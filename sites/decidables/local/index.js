(function () {
	'use strict';

	var commonjsGlobal = typeof globalThis !== 'undefined' ? globalThis : typeof window !== 'undefined' ? window : typeof global !== 'undefined' ? global : typeof self !== 'undefined' ? self : {};

	function ownKeys$4(object, enumerableOnly) {
	  var keys = Object.keys(object);

	  if (Object.getOwnPropertySymbols) {
	    var symbols = Object.getOwnPropertySymbols(object);
	    enumerableOnly && (symbols = symbols.filter(function (sym) {
	      return Object.getOwnPropertyDescriptor(object, sym).enumerable;
	    })), keys.push.apply(keys, symbols);
	  }

	  return keys;
	}

	function _objectSpread2(target) {
	  for (var i = 1; i < arguments.length; i++) {
	    var source = null != arguments[i] ? arguments[i] : {};
	    i % 2 ? ownKeys$4(Object(source), !0).forEach(function (key) {
	      _defineProperty(target, key, source[key]);
	    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$4(Object(source)).forEach(function (key) {
	      Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
	    });
	  }

	  return target;
	}

	function _typeof(obj) {
	  "@babel/helpers - typeof";

	  return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) {
	    return typeof obj;
	  } : function (obj) {
	    return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
	  }, _typeof(obj);
	}

	function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {
	  try {
	    var info = gen[key](arg);
	    var value = info.value;
	  } catch (error) {
	    reject(error);
	    return;
	  }

	  if (info.done) {
	    resolve(value);
	  } else {
	    Promise.resolve(value).then(_next, _throw);
	  }
	}

	function _asyncToGenerator(fn) {
	  return function () {
	    var self = this,
	        args = arguments;
	    return new Promise(function (resolve, reject) {
	      var gen = fn.apply(self, args);

	      function _next(value) {
	        asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value);
	      }

	      function _throw(err) {
	        asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err);
	      }

	      _next(undefined);
	    });
	  };
	}

	function _classCallCheck(instance, Constructor) {
	  if (!(instance instanceof Constructor)) {
	    throw new TypeError("Cannot call a class as a function");
	  }
	}

	function _defineProperties(target, props) {
	  for (var i = 0; i < props.length; i++) {
	    var descriptor = props[i];
	    descriptor.enumerable = descriptor.enumerable || false;
	    descriptor.configurable = true;
	    if ("value" in descriptor) descriptor.writable = true;
	    Object.defineProperty(target, descriptor.key, descriptor);
	  }
	}

	function _createClass(Constructor, protoProps, staticProps) {
	  if (protoProps) _defineProperties(Constructor.prototype, protoProps);
	  if (staticProps) _defineProperties(Constructor, staticProps);
	  Object.defineProperty(Constructor, "prototype", {
	    writable: false
	  });
	  return Constructor;
	}

	function _defineProperty(obj, key, value) {
	  if (key in obj) {
	    Object.defineProperty(obj, key, {
	      value: value,
	      enumerable: true,
	      configurable: true,
	      writable: true
	    });
	  } else {
	    obj[key] = value;
	  }

	  return obj;
	}

	function _inherits(subClass, superClass) {
	  if (typeof superClass !== "function" && superClass !== null) {
	    throw new TypeError("Super expression must either be null or a function");
	  }

	  subClass.prototype = Object.create(superClass && superClass.prototype, {
	    constructor: {
	      value: subClass,
	      writable: true,
	      configurable: true
	    }
	  });
	  Object.defineProperty(subClass, "prototype", {
	    writable: false
	  });
	  if (superClass) _setPrototypeOf(subClass, superClass);
	}

	function _getPrototypeOf(o) {
	  _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {
	    return o.__proto__ || Object.getPrototypeOf(o);
	  };
	  return _getPrototypeOf(o);
	}

	function _setPrototypeOf(o, p) {
	  _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {
	    o.__proto__ = p;
	    return o;
	  };

	  return _setPrototypeOf(o, p);
	}

	function _isNativeReflectConstruct() {
	  if (typeof Reflect === "undefined" || !Reflect.construct) return false;
	  if (Reflect.construct.sham) return false;
	  if (typeof Proxy === "function") return true;

	  try {
	    Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {}));
	    return true;
	  } catch (e) {
	    return false;
	  }
	}

	function _construct(Parent, args, Class) {
	  if (_isNativeReflectConstruct()) {
	    _construct = Reflect.construct;
	  } else {
	    _construct = function _construct(Parent, args, Class) {
	      var a = [null];
	      a.push.apply(a, args);
	      var Constructor = Function.bind.apply(Parent, a);
	      var instance = new Constructor();
	      if (Class) _setPrototypeOf(instance, Class.prototype);
	      return instance;
	    };
	  }

	  return _construct.apply(null, arguments);
	}

	function _isNativeFunction(fn) {
	  return Function.toString.call(fn).indexOf("[native code]") !== -1;
	}

	function _wrapNativeSuper(Class) {
	  var _cache = typeof Map === "function" ? new Map() : undefined;

	  _wrapNativeSuper = function _wrapNativeSuper(Class) {
	    if (Class === null || !_isNativeFunction(Class)) return Class;

	    if (typeof Class !== "function") {
	      throw new TypeError("Super expression must either be null or a function");
	    }

	    if (typeof _cache !== "undefined") {
	      if (_cache.has(Class)) return _cache.get(Class);

	      _cache.set(Class, Wrapper);
	    }

	    function Wrapper() {
	      return _construct(Class, arguments, _getPrototypeOf(this).constructor);
	    }

	    Wrapper.prototype = Object.create(Class.prototype, {
	      constructor: {
	        value: Wrapper,
	        enumerable: false,
	        writable: true,
	        configurable: true
	      }
	    });
	    return _setPrototypeOf(Wrapper, Class);
	  };

	  return _wrapNativeSuper(Class);
	}

	function _assertThisInitialized(self) {
	  if (self === void 0) {
	    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
	  }

	  return self;
	}

	function _possibleConstructorReturn(self, call) {
	  if (call && (typeof call === "object" || typeof call === "function")) {
	    return call;
	  } else if (call !== void 0) {
	    throw new TypeError("Derived constructors may only return object or undefined");
	  }

	  return _assertThisInitialized(self);
	}

	function _createSuper(Derived) {
	  var hasNativeReflectConstruct = _isNativeReflectConstruct();

	  return function _createSuperInternal() {
	    var Super = _getPrototypeOf(Derived),
	        result;

	    if (hasNativeReflectConstruct) {
	      var NewTarget = _getPrototypeOf(this).constructor;

	      result = Reflect.construct(Super, arguments, NewTarget);
	    } else {
	      result = Super.apply(this, arguments);
	    }

	    return _possibleConstructorReturn(this, result);
	  };
	}

	function _superPropBase(object, property) {
	  while (!Object.prototype.hasOwnProperty.call(object, property)) {
	    object = _getPrototypeOf(object);
	    if (object === null) break;
	  }

	  return object;
	}

	function _get() {
	  if (typeof Reflect !== "undefined" && Reflect.get) {
	    _get = Reflect.get;
	  } else {
	    _get = function _get(target, property, receiver) {
	      var base = _superPropBase(target, property);

	      if (!base) return;
	      var desc = Object.getOwnPropertyDescriptor(base, property);

	      if (desc.get) {
	        return desc.get.call(arguments.length < 3 ? target : receiver);
	      }

	      return desc.value;
	    };
	  }

	  return _get.apply(this, arguments);
	}

	function _taggedTemplateLiteral(strings, raw) {
	  if (!raw) {
	    raw = strings.slice(0);
	  }

	  return Object.freeze(Object.defineProperties(strings, {
	    raw: {
	      value: Object.freeze(raw)
	    }
	  }));
	}

	function _slicedToArray(arr, i) {
	  return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest();
	}

	function _toConsumableArray(arr) {
	  return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread();
	}

	function _arrayWithoutHoles(arr) {
	  if (Array.isArray(arr)) return _arrayLikeToArray(arr);
	}

	function _arrayWithHoles(arr) {
	  if (Array.isArray(arr)) return arr;
	}

	function _iterableToArray(iter) {
	  if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null) return Array.from(iter);
	}

	function _iterableToArrayLimit(arr, i) {
	  var _i = arr == null ? null : typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"];

	  if (_i == null) return;
	  var _arr = [];
	  var _n = true;
	  var _d = false;

	  var _s, _e;

	  try {
	    for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) {
	      _arr.push(_s.value);

	      if (i && _arr.length === i) break;
	    }
	  } catch (err) {
	    _d = true;
	    _e = err;
	  } finally {
	    try {
	      if (!_n && _i["return"] != null) _i["return"]();
	    } finally {
	      if (_d) throw _e;
	    }
	  }

	  return _arr;
	}

	function _unsupportedIterableToArray(o, minLen) {
	  if (!o) return;
	  if (typeof o === "string") return _arrayLikeToArray(o, minLen);
	  var n = Object.prototype.toString.call(o).slice(8, -1);
	  if (n === "Object" && o.constructor) n = o.constructor.name;
	  if (n === "Map" || n === "Set") return Array.from(o);
	  if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);
	}

	function _arrayLikeToArray(arr, len) {
	  if (len == null || len > arr.length) len = arr.length;

	  for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i];

	  return arr2;
	}

	function _nonIterableSpread() {
	  throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
	}

	function _nonIterableRest() {
	  throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
	}

	function _createForOfIteratorHelper(o, allowArrayLike) {
	  var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"];

	  if (!it) {
	    if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") {
	      if (it) o = it;
	      var i = 0;

	      var F = function () {};

	      return {
	        s: F,
	        n: function () {
	          if (i >= o.length) return {
	            done: true
	          };
	          return {
	            done: false,
	            value: o[i++]
	          };
	        },
	        e: function (e) {
	          throw e;
	        },
	        f: F
	      };
	    }

	    throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
	  }

	  var normalCompletion = true,
	      didErr = false,
	      err;
	  return {
	    s: function () {
	      it = it.call(o);
	    },
	    n: function () {
	      var step = it.next();
	      normalCompletion = step.done;
	      return step;
	    },
	    e: function (e) {
	      didErr = true;
	      err = e;
	    },
	    f: function () {
	      try {
	        if (!normalCompletion && it.return != null) it.return();
	      } finally {
	        if (didErr) throw err;
	      }
	    }
	  };
	}

	var check = function check(it) {
	  return it && it.Math == Math && it;
	}; // https://github.com/zloirock/core-js/issues/86#issuecomment-115759028


	var global$1B = // eslint-disable-next-line es/no-global-this -- safe
	check((typeof globalThis === "undefined" ? "undefined" : _typeof(globalThis)) == 'object' && globalThis) || check((typeof window === "undefined" ? "undefined" : _typeof(window)) == 'object' && window) || // eslint-disable-next-line no-restricted-globals -- safe
	check((typeof self === "undefined" ? "undefined" : _typeof(self)) == 'object' && self) || check(_typeof(commonjsGlobal) == 'object' && commonjsGlobal) || // eslint-disable-next-line no-new-func -- fallback
	function () {
	  return this;
	}() || Function('return this')();

	var objectGetOwnPropertyDescriptor = {};

	var fails$18 = function fails(exec) {
	  try {
	    return !!exec();
	  } catch (error) {
	    return true;
	  }
	};

	var fails$17 = fails$18; // Detect IE8's incomplete defineProperty implementation

	var descriptors = !fails$17(function () {
	  // eslint-disable-next-line es/no-object-defineproperty -- required for testing
	  return Object.defineProperty({}, 1, {
	    get: function get() {
	      return 7;
	    }
	  })[1] != 7;
	});

	var fails$16 = fails$18;
	var functionBindNative = !fails$16(function () {
	  var test = function () {
	    /* empty */
	  }.bind(); // eslint-disable-next-line no-prototype-builtins -- safe


	  return typeof test != 'function' || test.hasOwnProperty('prototype');
	});

	var NATIVE_BIND$4 = functionBindNative;
	var call$w = Function.prototype.call;
	var functionCall = NATIVE_BIND$4 ? call$w.bind(call$w) : function () {
	  return call$w.apply(call$w, arguments);
	};

	var objectPropertyIsEnumerable = {};

	var $propertyIsEnumerable$2 = {}.propertyIsEnumerable; // eslint-disable-next-line es/no-object-getownpropertydescriptor -- safe

	var getOwnPropertyDescriptor$8 = Object.getOwnPropertyDescriptor; // Nashorn ~ JDK8 bug

	var NASHORN_BUG = getOwnPropertyDescriptor$8 && !$propertyIsEnumerable$2.call({
	  1: 2
	}, 1); // `Object.prototype.propertyIsEnumerable` method implementation
	// https://tc39.es/ecma262/#sec-object.prototype.propertyisenumerable

	objectPropertyIsEnumerable.f = NASHORN_BUG ? function propertyIsEnumerable(V) {
	  var descriptor = getOwnPropertyDescriptor$8(this, V);
	  return !!descriptor && descriptor.enumerable;
	} : $propertyIsEnumerable$2;

	var createPropertyDescriptor$c = function createPropertyDescriptor(bitmap, value) {
	  return {
	    enumerable: !(bitmap & 1),
	    configurable: !(bitmap & 2),
	    writable: !(bitmap & 4),
	    value: value
	  };
	};

	var NATIVE_BIND$3 = functionBindNative;
	var FunctionPrototype$4 = Function.prototype;
	var bind$d = FunctionPrototype$4.bind;
	var call$v = FunctionPrototype$4.call;
	var uncurryThis$11 = NATIVE_BIND$3 && bind$d.bind(call$v, call$v);
	var functionUncurryThis = NATIVE_BIND$3 ? function (fn) {
	  return fn && uncurryThis$11(fn);
	} : function (fn) {
	  return fn && function () {
	    return call$v.apply(fn, arguments);
	  };
	};

	var uncurryThis$10 = functionUncurryThis;
	var toString$r = uncurryThis$10({}.toString);
	var stringSlice$e = uncurryThis$10(''.slice);

	var classofRaw$1 = function classofRaw(it) {
	  return stringSlice$e(toString$r(it), 8, -1);
	};

	var global$1A = global$1B;
	var uncurryThis$$ = functionUncurryThis;
	var fails$15 = fails$18;
	var classof$k = classofRaw$1;
	var Object$6 = global$1A.Object;
	var split$3 = uncurryThis$$(''.split); // fallback for non-array-like ES3 and non-enumerable old V8 strings

	var indexedObject = fails$15(function () {
	  // throws an error in rhino, see https://github.com/mozilla/rhino/issues/346
	  // eslint-disable-next-line no-prototype-builtins -- safe
	  return !Object$6('z').propertyIsEnumerable(0);
	}) ? function (it) {
	  return classof$k(it) == 'String' ? split$3(it, '') : Object$6(it);
	} : Object$6;

	var global$1z = global$1B;
	var TypeError$v = global$1z.TypeError; // `RequireObjectCoercible` abstract operation
	// https://tc39.es/ecma262/#sec-requireobjectcoercible

	var requireObjectCoercible$h = function requireObjectCoercible(it) {
	  if (it == undefined) throw TypeError$v("Can't call method on " + it);
	  return it;
	};

	var IndexedObject$4 = indexedObject;
	var requireObjectCoercible$g = requireObjectCoercible$h;

	var toIndexedObject$f = function toIndexedObject(it) {
	  return IndexedObject$4(requireObjectCoercible$g(it));
	};

	// https://tc39.es/ecma262/#sec-iscallable

	var isCallable$u = function isCallable(argument) {
	  return typeof argument == 'function';
	};

	var isCallable$t = isCallable$u;

	var isObject$z = function isObject(it) {
	  return _typeof(it) == 'object' ? it !== null : isCallable$t(it);
	};

	var global$1y = global$1B;
	var isCallable$s = isCallable$u;

	var aFunction = function aFunction(argument) {
	  return isCallable$s(argument) ? argument : undefined;
	};

	var getBuiltIn$j = function getBuiltIn(namespace, method) {
	  return arguments.length < 2 ? aFunction(global$1y[namespace]) : global$1y[namespace] && global$1y[namespace][method];
	};

	var uncurryThis$_ = functionUncurryThis;
	var objectIsPrototypeOf = uncurryThis$_({}.isPrototypeOf);

	var getBuiltIn$i = getBuiltIn$j;
	var engineUserAgent = getBuiltIn$i('navigator', 'userAgent') || '';

	var global$1x = global$1B;
	var userAgent$6 = engineUserAgent;
	var process$4 = global$1x.process;
	var Deno = global$1x.Deno;
	var versions = process$4 && process$4.versions || Deno && Deno.version;
	var v8 = versions && versions.v8;
	var match, version;

	if (v8) {
	  match = v8.split('.'); // in old Chrome, versions of V8 isn't V8 = Chrome / 10
	  // but their correct versions are not interesting for us

	  version = match[0] > 0 && match[0] < 4 ? 1 : +(match[0] + match[1]);
	} // BrowserFS NodeJS `process` polyfill incorrectly set `.v8` to `0.0`
	// so check `userAgent` even if `.v8` exists, but 0


	if (!version && userAgent$6) {
	  match = userAgent$6.match(/Edge\/(\d+)/);

	  if (!match || match[1] >= 74) {
	    match = userAgent$6.match(/Chrome\/(\d+)/);
	    if (match) version = +match[1];
	  }
	}

	var engineV8Version = version;

	/* eslint-disable es/no-symbol -- required for testing */
	var V8_VERSION$3 = engineV8Version;
	var fails$14 = fails$18; // eslint-disable-next-line es/no-object-getownpropertysymbols -- required for testing

	var nativeSymbol = !!Object.getOwnPropertySymbols && !fails$14(function () {
	  var symbol = Symbol(); // Chrome 38 Symbol has incorrect toString conversion
	  // `get-own-property-symbols` polyfill symbols converted to object are not Symbol instances

	  return !String(symbol) || !(Object(symbol) instanceof Symbol) || // Chrome 38-40 symbols are not inherited from DOM collections prototypes to instances
	  !Symbol.sham && V8_VERSION$3 && V8_VERSION$3 < 41;
	});

	var NATIVE_SYMBOL$3 = nativeSymbol;
	var useSymbolAsUid = NATIVE_SYMBOL$3 && !Symbol.sham && _typeof(Symbol.iterator) == 'symbol';

	var global$1w = global$1B;
	var getBuiltIn$h = getBuiltIn$j;
	var isCallable$r = isCallable$u;
	var isPrototypeOf$c = objectIsPrototypeOf;
	var USE_SYMBOL_AS_UID$1 = useSymbolAsUid;
	var Object$5 = global$1w.Object;
	var isSymbol$6 = USE_SYMBOL_AS_UID$1 ? function (it) {
	  return _typeof(it) == 'symbol';
	} : function (it) {
	  var $Symbol = getBuiltIn$h('Symbol');
	  return isCallable$r($Symbol) && isPrototypeOf$c($Symbol.prototype, Object$5(it));
	};

	var global$1v = global$1B;
	var String$7 = global$1v.String;

	var tryToString$5 = function tryToString(argument) {
	  try {
	    return String$7(argument);
	  } catch (error) {
	    return 'Object';
	  }
	};

	var global$1u = global$1B;
	var isCallable$q = isCallable$u;
	var tryToString$4 = tryToString$5;
	var TypeError$u = global$1u.TypeError; // `Assert: IsCallable(argument) is true`

	var aCallable$g = function aCallable(argument) {
	  if (isCallable$q(argument)) return argument;
	  throw TypeError$u(tryToString$4(argument) + ' is not a function');
	};

	var aCallable$f = aCallable$g; // `GetMethod` abstract operation
	// https://tc39.es/ecma262/#sec-getmethod

	var getMethod$9 = function getMethod(V, P) {
	  var func = V[P];
	  return func == null ? undefined : aCallable$f(func);
	};

	var global$1t = global$1B;
	var call$u = functionCall;
	var isCallable$p = isCallable$u;
	var isObject$y = isObject$z;
	var TypeError$t = global$1t.TypeError; // `OrdinaryToPrimitive` abstract operation
	// https://tc39.es/ecma262/#sec-ordinarytoprimitive

	var ordinaryToPrimitive$2 = function ordinaryToPrimitive(input, pref) {
	  var fn, val;
	  if (pref === 'string' && isCallable$p(fn = input.toString) && !isObject$y(val = call$u(fn, input))) return val;
	  if (isCallable$p(fn = input.valueOf) && !isObject$y(val = call$u(fn, input))) return val;
	  if (pref !== 'string' && isCallable$p(fn = input.toString) && !isObject$y(val = call$u(fn, input))) return val;
	  throw TypeError$t("Can't convert object to primitive value");
	};

	var shared$5 = {exports: {}};

	var isPure = false;

	var global$1s = global$1B; // eslint-disable-next-line es/no-object-defineproperty -- safe

	var defineProperty$h = Object.defineProperty;

	var setGlobal$3 = function setGlobal(key, value) {
	  try {
	    defineProperty$h(global$1s, key, {
	      value: value,
	      configurable: true,
	      writable: true
	    });
	  } catch (error) {
	    global$1s[key] = value;
	  }

	  return value;
	};

	var global$1r = global$1B;
	var setGlobal$2 = setGlobal$3;
	var SHARED = '__core-js_shared__';
	var store$3 = global$1r[SHARED] || setGlobal$2(SHARED, {});
	var sharedStore = store$3;

	var store$2 = sharedStore;
	(shared$5.exports = function (key, value) {
	  return store$2[key] || (store$2[key] = value !== undefined ? value : {});
	})('versions', []).push({
	  version: '3.21.0',
	  mode: 'global',
	  copyright: '© 2014-2022 Denis Pushkarev (zloirock.ru)',
	  license: 'https://github.com/zloirock/core-js/blob/v3.21.0/LICENSE',
	  source: 'https://github.com/zloirock/core-js'
	});

	var global$1q = global$1B;
	var requireObjectCoercible$f = requireObjectCoercible$h;
	var Object$4 = global$1q.Object; // `ToObject` abstract operation
	// https://tc39.es/ecma262/#sec-toobject

	var toObject$o = function toObject(argument) {
	  return Object$4(requireObjectCoercible$f(argument));
	};

	var uncurryThis$Z = functionUncurryThis;
	var toObject$n = toObject$o;
	var hasOwnProperty = uncurryThis$Z({}.hasOwnProperty); // `HasOwnProperty` abstract operation
	// https://tc39.es/ecma262/#sec-hasownproperty

	var hasOwnProperty_1 = Object.hasOwn || function hasOwn(it, key) {
	  return hasOwnProperty(toObject$n(it), key);
	};

	var uncurryThis$Y = functionUncurryThis;
	var id$3 = 0;
	var postfix = Math.random();
	var toString$q = uncurryThis$Y(1.0.toString);

	var uid$6 = function uid(key) {
	  return 'Symbol(' + (key === undefined ? '' : key) + ')_' + toString$q(++id$3 + postfix, 36);
	};

	var global$1p = global$1B;
	var shared$4 = shared$5.exports;
	var hasOwn$s = hasOwnProperty_1;
	var uid$5 = uid$6;
	var NATIVE_SYMBOL$2 = nativeSymbol;
	var USE_SYMBOL_AS_UID = useSymbolAsUid;
	var WellKnownSymbolsStore$1 = shared$4('wks');
	var _Symbol$2 = global$1p.Symbol;
	var symbolFor = _Symbol$2 && _Symbol$2['for'];
	var createWellKnownSymbol = USE_SYMBOL_AS_UID ? _Symbol$2 : _Symbol$2 && _Symbol$2.withoutSetter || uid$5;

	var wellKnownSymbol$y = function wellKnownSymbol(name) {
	  if (!hasOwn$s(WellKnownSymbolsStore$1, name) || !(NATIVE_SYMBOL$2 || typeof WellKnownSymbolsStore$1[name] == 'string')) {
	    var description = 'Symbol.' + name;

	    if (NATIVE_SYMBOL$2 && hasOwn$s(_Symbol$2, name)) {
	      WellKnownSymbolsStore$1[name] = _Symbol$2[name];
	    } else if (USE_SYMBOL_AS_UID && symbolFor) {
	      WellKnownSymbolsStore$1[name] = symbolFor(description);
	    } else {
	      WellKnownSymbolsStore$1[name] = createWellKnownSymbol(description);
	    }
	  }

	  return WellKnownSymbolsStore$1[name];
	};

	var global$1o = global$1B;
	var call$t = functionCall;
	var isObject$x = isObject$z;
	var isSymbol$5 = isSymbol$6;
	var getMethod$8 = getMethod$9;
	var ordinaryToPrimitive$1 = ordinaryToPrimitive$2;
	var wellKnownSymbol$x = wellKnownSymbol$y;
	var TypeError$s = global$1o.TypeError;
	var TO_PRIMITIVE$2 = wellKnownSymbol$x('toPrimitive'); // `ToPrimitive` abstract operation
	// https://tc39.es/ecma262/#sec-toprimitive

	var toPrimitive$2 = function toPrimitive(input, pref) {
	  if (!isObject$x(input) || isSymbol$5(input)) return input;
	  var exoticToPrim = getMethod$8(input, TO_PRIMITIVE$2);
	  var result;

	  if (exoticToPrim) {
	    if (pref === undefined) pref = 'default';
	    result = call$t(exoticToPrim, input, pref);
	    if (!isObject$x(result) || isSymbol$5(result)) return result;
	    throw TypeError$s("Can't convert object to primitive value");
	  }

	  if (pref === undefined) pref = 'number';
	  return ordinaryToPrimitive$1(input, pref);
	};

	var toPrimitive$1 = toPrimitive$2;
	var isSymbol$4 = isSymbol$6; // `ToPropertyKey` abstract operation
	// https://tc39.es/ecma262/#sec-topropertykey

	var toPropertyKey$8 = function toPropertyKey(argument) {
	  var key = toPrimitive$1(argument, 'string');
	  return isSymbol$4(key) ? key : key + '';
	};

	var global$1n = global$1B;
	var isObject$w = isObject$z;
	var document$3 = global$1n.document; // typeof document.createElement is 'object' in old IE

	var EXISTS$1 = isObject$w(document$3) && isObject$w(document$3.createElement);

	var documentCreateElement$2 = function documentCreateElement(it) {
	  return EXISTS$1 ? document$3.createElement(it) : {};
	};

	var DESCRIPTORS$z = descriptors;
	var fails$13 = fails$18;
	var createElement$1 = documentCreateElement$2; // Thanks to IE8 for its funny defineProperty

	var ie8DomDefine = !DESCRIPTORS$z && !fails$13(function () {
	  // eslint-disable-next-line es/no-object-defineproperty -- required for testing
	  return Object.defineProperty(createElement$1('div'), 'a', {
	    get: function get() {
	      return 7;
	    }
	  }).a != 7;
	});

	var DESCRIPTORS$y = descriptors;
	var call$s = functionCall;
	var propertyIsEnumerableModule$2 = objectPropertyIsEnumerable;
	var createPropertyDescriptor$b = createPropertyDescriptor$c;
	var toIndexedObject$e = toIndexedObject$f;
	var toPropertyKey$7 = toPropertyKey$8;
	var hasOwn$r = hasOwnProperty_1;
	var IE8_DOM_DEFINE$1 = ie8DomDefine; // eslint-disable-next-line es/no-object-getownpropertydescriptor -- safe

	var $getOwnPropertyDescriptor$2 = Object.getOwnPropertyDescriptor; // `Object.getOwnPropertyDescriptor` method
	// https://tc39.es/ecma262/#sec-object.getownpropertydescriptor

	objectGetOwnPropertyDescriptor.f = DESCRIPTORS$y ? $getOwnPropertyDescriptor$2 : function getOwnPropertyDescriptor(O, P) {
	  O = toIndexedObject$e(O);
	  P = toPropertyKey$7(P);
	  if (IE8_DOM_DEFINE$1) try {
	    return $getOwnPropertyDescriptor$2(O, P);
	  } catch (error) {
	    /* empty */
	  }
	  if (hasOwn$r(O, P)) return createPropertyDescriptor$b(!call$s(propertyIsEnumerableModule$2.f, O, P), O[P]);
	};

	var objectDefineProperty = {};

	var DESCRIPTORS$x = descriptors;
	var fails$12 = fails$18; // V8 ~ Chrome 36-
	// https://bugs.chromium.org/p/v8/issues/detail?id=3334

	var v8PrototypeDefineBug = DESCRIPTORS$x && fails$12(function () {
	  // eslint-disable-next-line es/no-object-defineproperty -- required for testing
	  return Object.defineProperty(function () {
	    /* empty */
	  }, 'prototype', {
	    value: 42,
	    writable: false
	  }).prototype != 42;
	});

	var global$1m = global$1B;
	var isObject$v = isObject$z;
	var String$6 = global$1m.String;
	var TypeError$r = global$1m.TypeError; // `Assert: Type(argument) is Object`

	var anObject$B = function anObject(argument) {
	  if (isObject$v(argument)) return argument;
	  throw TypeError$r(String$6(argument) + ' is not an object');
	};

	var global$1l = global$1B;
	var DESCRIPTORS$w = descriptors;
	var IE8_DOM_DEFINE = ie8DomDefine;
	var V8_PROTOTYPE_DEFINE_BUG$1 = v8PrototypeDefineBug;
	var anObject$A = anObject$B;
	var toPropertyKey$6 = toPropertyKey$8;
	var TypeError$q = global$1l.TypeError; // eslint-disable-next-line es/no-object-defineproperty -- safe

	var $defineProperty$1 = Object.defineProperty; // eslint-disable-next-line es/no-object-getownpropertydescriptor -- safe

	var $getOwnPropertyDescriptor$1 = Object.getOwnPropertyDescriptor;
	var ENUMERABLE = 'enumerable';
	var CONFIGURABLE$1 = 'configurable';
	var WRITABLE = 'writable'; // `Object.defineProperty` method
	// https://tc39.es/ecma262/#sec-object.defineproperty

	objectDefineProperty.f = DESCRIPTORS$w ? V8_PROTOTYPE_DEFINE_BUG$1 ? function defineProperty(O, P, Attributes) {
	  anObject$A(O);
	  P = toPropertyKey$6(P);
	  anObject$A(Attributes);

	  if (typeof O === 'function' && P === 'prototype' && 'value' in Attributes && WRITABLE in Attributes && !Attributes[WRITABLE]) {
	    var current = $getOwnPropertyDescriptor$1(O, P);

	    if (current && current[WRITABLE]) {
	      O[P] = Attributes.value;
	      Attributes = {
	        configurable: CONFIGURABLE$1 in Attributes ? Attributes[CONFIGURABLE$1] : current[CONFIGURABLE$1],
	        enumerable: ENUMERABLE in Attributes ? Attributes[ENUMERABLE] : current[ENUMERABLE],
	        writable: false
	      };
	    }
	  }

	  return $defineProperty$1(O, P, Attributes);
	} : $defineProperty$1 : function defineProperty(O, P, Attributes) {
	  anObject$A(O);
	  P = toPropertyKey$6(P);
	  anObject$A(Attributes);
	  if (IE8_DOM_DEFINE) try {
	    return $defineProperty$1(O, P, Attributes);
	  } catch (error) {
	    /* empty */
	  }
	  if ('get' in Attributes || 'set' in Attributes) throw TypeError$q('Accessors not supported');
	  if ('value' in Attributes) O[P] = Attributes.value;
	  return O;
	};

	var DESCRIPTORS$v = descriptors;
	var definePropertyModule$c = objectDefineProperty;
	var createPropertyDescriptor$a = createPropertyDescriptor$c;
	var createNonEnumerableProperty$f = DESCRIPTORS$v ? function (object, key, value) {
	  return definePropertyModule$c.f(object, key, createPropertyDescriptor$a(1, value));
	} : function (object, key, value) {
	  object[key] = value;
	  return object;
	};

	var redefine$j = {exports: {}};

	var uncurryThis$X = functionUncurryThis;
	var isCallable$o = isCallable$u;
	var store$1 = sharedStore;
	var functionToString$1 = uncurryThis$X(Function.toString); // this helper broken in `core-js@3.4.1-3.4.4`, so we can't use `shared` helper

	if (!isCallable$o(store$1.inspectSource)) {
	  store$1.inspectSource = function (it) {
	    return functionToString$1(it);
	  };
	}

	var inspectSource$4 = store$1.inspectSource;

	var global$1k = global$1B;
	var isCallable$n = isCallable$u;
	var inspectSource$3 = inspectSource$4;
	var WeakMap$2 = global$1k.WeakMap;
	var nativeWeakMap = isCallable$n(WeakMap$2) && /native code/.test(inspectSource$3(WeakMap$2));

	var shared$3 = shared$5.exports;
	var uid$4 = uid$6;
	var keys$3 = shared$3('keys');

	var sharedKey$4 = function sharedKey(key) {
	  return keys$3[key] || (keys$3[key] = uid$4(key));
	};

	var hiddenKeys$6 = {};

	var NATIVE_WEAK_MAP$1 = nativeWeakMap;
	var global$1j = global$1B;
	var uncurryThis$W = functionUncurryThis;
	var isObject$u = isObject$z;
	var createNonEnumerableProperty$e = createNonEnumerableProperty$f;
	var hasOwn$q = hasOwnProperty_1;
	var shared$2 = sharedStore;
	var sharedKey$3 = sharedKey$4;
	var hiddenKeys$5 = hiddenKeys$6;
	var OBJECT_ALREADY_INITIALIZED = 'Object already initialized';
	var TypeError$p = global$1j.TypeError;
	var WeakMap$1 = global$1j.WeakMap;
	var set$5, get$4, has;

	var enforce = function enforce(it) {
	  return has(it) ? get$4(it) : set$5(it, {});
	};

	var getterFor$1 = function getterFor(TYPE) {
	  return function (it) {
	    var state;

	    if (!isObject$u(it) || (state = get$4(it)).type !== TYPE) {
	      throw TypeError$p('Incompatible receiver, ' + TYPE + ' required');
	    }

	    return state;
	  };
	};

	if (NATIVE_WEAK_MAP$1 || shared$2.state) {
	  var store = shared$2.state || (shared$2.state = new WeakMap$1());
	  var wmget = uncurryThis$W(store.get);
	  var wmhas = uncurryThis$W(store.has);
	  var wmset = uncurryThis$W(store.set);

	  set$5 = function set(it, metadata) {
	    if (wmhas(store, it)) throw new TypeError$p(OBJECT_ALREADY_INITIALIZED);
	    metadata.facade = it;
	    wmset(store, it, metadata);
	    return metadata;
	  };

	  get$4 = function get(it) {
	    return wmget(store, it) || {};
	  };

	  has = function has(it) {
	    return wmhas(store, it);
	  };
	} else {
	  var STATE = sharedKey$3('state');
	  hiddenKeys$5[STATE] = true;

	  set$5 = function set(it, metadata) {
	    if (hasOwn$q(it, STATE)) throw new TypeError$p(OBJECT_ALREADY_INITIALIZED);
	    metadata.facade = it;
	    createNonEnumerableProperty$e(it, STATE, metadata);
	    return metadata;
	  };

	  get$4 = function get(it) {
	    return hasOwn$q(it, STATE) ? it[STATE] : {};
	  };

	  has = function has(it) {
	    return hasOwn$q(it, STATE);
	  };
	}

	var internalState = {
	  set: set$5,
	  get: get$4,
	  has: has,
	  enforce: enforce,
	  getterFor: getterFor$1
	};

	var DESCRIPTORS$u = descriptors;
	var hasOwn$p = hasOwnProperty_1;
	var FunctionPrototype$3 = Function.prototype; // eslint-disable-next-line es/no-object-getownpropertydescriptor -- safe

	var getDescriptor = DESCRIPTORS$u && Object.getOwnPropertyDescriptor;
	var EXISTS = hasOwn$p(FunctionPrototype$3, 'name'); // additional protection from minified / mangled / dropped function names

	var PROPER = EXISTS && function something() {
	  /* empty */
	}.name === 'something';

	var CONFIGURABLE = EXISTS && (!DESCRIPTORS$u || DESCRIPTORS$u && getDescriptor(FunctionPrototype$3, 'name').configurable);
	var functionName = {
	  EXISTS: EXISTS,
	  PROPER: PROPER,
	  CONFIGURABLE: CONFIGURABLE
	};

	var global$1i = global$1B;
	var isCallable$m = isCallable$u;
	var hasOwn$o = hasOwnProperty_1;
	var createNonEnumerableProperty$d = createNonEnumerableProperty$f;
	var setGlobal$1 = setGlobal$3;
	var inspectSource$2 = inspectSource$4;
	var InternalStateModule$c = internalState;
	var CONFIGURABLE_FUNCTION_NAME$2 = functionName.CONFIGURABLE;
	var getInternalState$b = InternalStateModule$c.get;
	var enforceInternalState$2 = InternalStateModule$c.enforce;
	var TEMPLATE = String(String).split('String');
	(redefine$j.exports = function (O, key, value, options) {
	  var unsafe = options ? !!options.unsafe : false;
	  var simple = options ? !!options.enumerable : false;
	  var noTargetGet = options ? !!options.noTargetGet : false;
	  var name = options && options.name !== undefined ? options.name : key;
	  var state;

	  if (isCallable$m(value)) {
	    if (String(name).slice(0, 7) === 'Symbol(') {
	      name = '[' + String(name).replace(/^Symbol\(([^)]*)\)/, '$1') + ']';
	    }

	    if (!hasOwn$o(value, 'name') || CONFIGURABLE_FUNCTION_NAME$2 && value.name !== name) {
	      createNonEnumerableProperty$d(value, 'name', name);
	    }

	    state = enforceInternalState$2(value);

	    if (!state.source) {
	      state.source = TEMPLATE.join(typeof name == 'string' ? name : '');
	    }
	  }

	  if (O === global$1i) {
	    if (simple) O[key] = value;else setGlobal$1(key, value);
	    return;
	  } else if (!unsafe) {
	    delete O[key];
	  } else if (!noTargetGet && O[key]) {
	    simple = true;
	  }

	  if (simple) O[key] = value;else createNonEnumerableProperty$d(O, key, value); // add fake Function#toString for correct work wrapped methods / constructors with methods like LoDash isNative
	})(Function.prototype, 'toString', function toString() {
	  return isCallable$m(this) && getInternalState$b(this).source || inspectSource$2(this);
	});

	var objectGetOwnPropertyNames = {};

	var ceil$2 = Math.ceil;
	var floor$b = Math.floor; // `ToIntegerOrInfinity` abstract operation
	// https://tc39.es/ecma262/#sec-tointegerorinfinity

	var toIntegerOrInfinity$g = function toIntegerOrInfinity(argument) {
	  var number = +argument; // eslint-disable-next-line no-self-compare -- safe

	  return number !== number || number === 0 ? 0 : (number > 0 ? floor$b : ceil$2)(number);
	};

	var toIntegerOrInfinity$f = toIntegerOrInfinity$g;
	var max$6 = Math.max;
	var min$9 = Math.min; // Helper for a popular repeating case of the spec:
	// Let integer be ? ToInteger(index).
	// If integer < 0, let result be max((length + integer), 0); else let result be min(integer, length).

	var toAbsoluteIndex$8 = function toAbsoluteIndex(index, length) {
	  var integer = toIntegerOrInfinity$f(index);
	  return integer < 0 ? max$6(integer + length, 0) : min$9(integer, length);
	};

	var toIntegerOrInfinity$e = toIntegerOrInfinity$g;
	var min$8 = Math.min; // `ToLength` abstract operation
	// https://tc39.es/ecma262/#sec-tolength

	var toLength$c = function toLength(argument) {
	  return argument > 0 ? min$8(toIntegerOrInfinity$e(argument), 0x1FFFFFFFFFFFFF) : 0; // 2 ** 53 - 1 == 9007199254740991
	};

	var toLength$b = toLength$c; // `LengthOfArrayLike` abstract operation
	// https://tc39.es/ecma262/#sec-lengthofarraylike

	var lengthOfArrayLike$n = function lengthOfArrayLike(obj) {
	  return toLength$b(obj.length);
	};

	var toIndexedObject$d = toIndexedObject$f;
	var toAbsoluteIndex$7 = toAbsoluteIndex$8;
	var lengthOfArrayLike$m = lengthOfArrayLike$n; // `Array.prototype.{ indexOf, includes }` methods implementation

	var createMethod$6 = function createMethod(IS_INCLUDES) {
	  return function ($this, el, fromIndex) {
	    var O = toIndexedObject$d($this);
	    var length = lengthOfArrayLike$m(O);
	    var index = toAbsoluteIndex$7(fromIndex, length);
	    var value; // Array#includes uses SameValueZero equality algorithm
	    // eslint-disable-next-line no-self-compare -- NaN check

	    if (IS_INCLUDES && el != el) while (length > index) {
	      value = O[index++]; // eslint-disable-next-line no-self-compare -- NaN check

	      if (value != value) return true; // Array#indexOf ignores holes, Array#includes - not
	    } else for (; length > index; index++) {
	      if ((IS_INCLUDES || index in O) && O[index] === el) return IS_INCLUDES || index || 0;
	    }
	    return !IS_INCLUDES && -1;
	  };
	};

	var arrayIncludes = {
	  // `Array.prototype.includes` method
	  // https://tc39.es/ecma262/#sec-array.prototype.includes
	  includes: createMethod$6(true),
	  // `Array.prototype.indexOf` method
	  // https://tc39.es/ecma262/#sec-array.prototype.indexof
	  indexOf: createMethod$6(false)
	};

	var uncurryThis$V = functionUncurryThis;
	var hasOwn$n = hasOwnProperty_1;
	var toIndexedObject$c = toIndexedObject$f;
	var indexOf$2 = arrayIncludes.indexOf;
	var hiddenKeys$4 = hiddenKeys$6;
	var push$d = uncurryThis$V([].push);

	var objectKeysInternal = function objectKeysInternal(object, names) {
	  var O = toIndexedObject$c(object);
	  var i = 0;
	  var result = [];
	  var key;

	  for (key in O) {
	    !hasOwn$n(hiddenKeys$4, key) && hasOwn$n(O, key) && push$d(result, key);
	  } // Don't enum bug & hidden keys


	  while (names.length > i) {
	    if (hasOwn$n(O, key = names[i++])) {
	      ~indexOf$2(result, key) || push$d(result, key);
	    }
	  }

	  return result;
	};

	var enumBugKeys$3 = ['constructor', 'hasOwnProperty', 'isPrototypeOf', 'propertyIsEnumerable', 'toLocaleString', 'toString', 'valueOf'];

	var internalObjectKeys$1 = objectKeysInternal;
	var enumBugKeys$2 = enumBugKeys$3;
	var hiddenKeys$3 = enumBugKeys$2.concat('length', 'prototype'); // `Object.getOwnPropertyNames` method
	// https://tc39.es/ecma262/#sec-object.getownpropertynames
	// eslint-disable-next-line es/no-object-getownpropertynames -- safe

	objectGetOwnPropertyNames.f = Object.getOwnPropertyNames || function getOwnPropertyNames(O) {
	  return internalObjectKeys$1(O, hiddenKeys$3);
	};

	var objectGetOwnPropertySymbols = {};

	objectGetOwnPropertySymbols.f = Object.getOwnPropertySymbols;

	var getBuiltIn$g = getBuiltIn$j;
	var uncurryThis$U = functionUncurryThis;
	var getOwnPropertyNamesModule$2 = objectGetOwnPropertyNames;
	var getOwnPropertySymbolsModule$2 = objectGetOwnPropertySymbols;
	var anObject$z = anObject$B;
	var concat$3 = uncurryThis$U([].concat); // all object keys, includes non-enumerable and symbols

	var ownKeys$3 = getBuiltIn$g('Reflect', 'ownKeys') || function ownKeys(it) {
	  var keys = getOwnPropertyNamesModule$2.f(anObject$z(it));
	  var getOwnPropertySymbols = getOwnPropertySymbolsModule$2.f;
	  return getOwnPropertySymbols ? concat$3(keys, getOwnPropertySymbols(it)) : keys;
	};

	var hasOwn$m = hasOwnProperty_1;
	var ownKeys$2 = ownKeys$3;
	var getOwnPropertyDescriptorModule$6 = objectGetOwnPropertyDescriptor;
	var definePropertyModule$b = objectDefineProperty;

	var copyConstructorProperties$4 = function copyConstructorProperties(target, source, exceptions) {
	  var keys = ownKeys$2(source);
	  var defineProperty = definePropertyModule$b.f;
	  var getOwnPropertyDescriptor = getOwnPropertyDescriptorModule$6.f;

	  for (var i = 0; i < keys.length; i++) {
	    var key = keys[i];

	    if (!hasOwn$m(target, key) && !(exceptions && hasOwn$m(exceptions, key))) {
	      defineProperty(target, key, getOwnPropertyDescriptor(source, key));
	    }
	  }
	};

	var fails$11 = fails$18;
	var isCallable$l = isCallable$u;
	var replacement = /#|\.prototype\./;

	var isForced$5 = function isForced(feature, detection) {
	  var value = data$1[normalize$1(feature)];
	  return value == POLYFILL ? true : value == NATIVE ? false : isCallable$l(detection) ? fails$11(detection) : !!detection;
	};

	var normalize$1 = isForced$5.normalize = function (string) {
	  return String(string).replace(replacement, '.').toLowerCase();
	};

	var data$1 = isForced$5.data = {};
	var NATIVE = isForced$5.NATIVE = 'N';
	var POLYFILL = isForced$5.POLYFILL = 'P';
	var isForced_1 = isForced$5;

	var global$1h = global$1B;
	var getOwnPropertyDescriptor$7 = objectGetOwnPropertyDescriptor.f;
	var createNonEnumerableProperty$c = createNonEnumerableProperty$f;
	var redefine$i = redefine$j.exports;
	var setGlobal = setGlobal$3;
	var copyConstructorProperties$3 = copyConstructorProperties$4;
	var isForced$4 = isForced_1;
	/*
	  options.target      - name of the target object
	  options.global      - target is the global object
	  options.stat        - export as static methods of target
	  options.proto       - export as prototype methods of target
	  options.real        - real prototype method for the `pure` version
	  options.forced      - export even if the native feature is available
	  options.bind        - bind methods to the target, required for the `pure` version
	  options.wrap        - wrap constructors to preventing global pollution, required for the `pure` version
	  options.unsafe      - use the simple assignment of property instead of delete + defineProperty
	  options.sham        - add a flag to not completely full polyfills
	  options.enumerable  - export as enumerable property
	  options.noTargetGet - prevent calling a getter on target
	  options.name        - the .name of the function if it does not match the key
	*/

	var _export = function _export(options, source) {
	  var TARGET = options.target;
	  var GLOBAL = options.global;
	  var STATIC = options.stat;
	  var FORCED, target, key, targetProperty, sourceProperty, descriptor;

	  if (GLOBAL) {
	    target = global$1h;
	  } else if (STATIC) {
	    target = global$1h[TARGET] || setGlobal(TARGET, {});
	  } else {
	    target = (global$1h[TARGET] || {}).prototype;
	  }

	  if (target) for (key in source) {
	    sourceProperty = source[key];

	    if (options.noTargetGet) {
	      descriptor = getOwnPropertyDescriptor$7(target, key);
	      targetProperty = descriptor && descriptor.value;
	    } else targetProperty = target[key];

	    FORCED = isForced$4(GLOBAL ? key : TARGET + (STATIC ? '.' : '#') + key, options.forced); // contained in target

	    if (!FORCED && targetProperty !== undefined) {
	      if (_typeof(sourceProperty) == _typeof(targetProperty)) continue;
	      copyConstructorProperties$3(sourceProperty, targetProperty);
	    } // add a flag to not completely full polyfills


	    if (options.sham || targetProperty && targetProperty.sham) {
	      createNonEnumerableProperty$c(sourceProperty, 'sham', true);
	    } // extend global


	    redefine$i(target, key, sourceProperty, options);
	  }
	};

	var NATIVE_BIND$2 = functionBindNative;
	var FunctionPrototype$2 = Function.prototype;
	var apply$b = FunctionPrototype$2.apply;
	var call$r = FunctionPrototype$2.call; // eslint-disable-next-line es/no-reflect -- safe

	var functionApply$1 = (typeof Reflect === "undefined" ? "undefined" : _typeof(Reflect)) == 'object' && Reflect.apply || (NATIVE_BIND$2 ? call$r.bind(apply$b) : function () {
	  return call$r.apply(apply$b, arguments);
	});

	var classof$j = classofRaw$1; // `IsArray` abstract operation
	// https://tc39.es/ecma262/#sec-isarray
	// eslint-disable-next-line es/no-array-isarray -- safe

	var isArray$5 = Array.isArray || function isArray(argument) {
	  return classof$j(argument) == 'Array';
	};

	var wellKnownSymbol$w = wellKnownSymbol$y;
	var TO_STRING_TAG$5 = wellKnownSymbol$w('toStringTag');
	var test$1 = {};
	test$1[TO_STRING_TAG$5] = 'z';
	var toStringTagSupport = String(test$1) === '[object z]';

	var global$1g = global$1B;
	var TO_STRING_TAG_SUPPORT$2 = toStringTagSupport;
	var isCallable$k = isCallable$u;
	var classofRaw = classofRaw$1;
	var wellKnownSymbol$v = wellKnownSymbol$y;
	var TO_STRING_TAG$4 = wellKnownSymbol$v('toStringTag');
	var Object$3 = global$1g.Object; // ES3 wrong here

	var CORRECT_ARGUMENTS = classofRaw(function () {
	  return arguments;
	}()) == 'Arguments'; // fallback for IE11 Script Access Denied error

	var tryGet = function tryGet(it, key) {
	  try {
	    return it[key];
	  } catch (error) {
	    /* empty */
	  }
	}; // getting tag from ES6+ `Object.prototype.toString`


	var classof$i = TO_STRING_TAG_SUPPORT$2 ? classofRaw : function (it) {
	  var O, tag, result;
	  return it === undefined ? 'Undefined' : it === null ? 'Null' // @@toStringTag case
	  : typeof (tag = tryGet(O = Object$3(it), TO_STRING_TAG$4)) == 'string' ? tag // builtinTag case
	  : CORRECT_ARGUMENTS ? classofRaw(O) // ES3 arguments fallback
	  : (result = classofRaw(O)) == 'Object' && isCallable$k(O.callee) ? 'Arguments' : result;
	};

	var global$1f = global$1B;
	var classof$h = classof$i;
	var String$5 = global$1f.String;

	var toString$p = function toString(argument) {
	  if (classof$h(argument) === 'Symbol') throw TypeError('Cannot convert a Symbol value to a string');
	  return String$5(argument);
	};

	var objectDefineProperties = {};

	var internalObjectKeys = objectKeysInternal;
	var enumBugKeys$1 = enumBugKeys$3; // `Object.keys` method
	// https://tc39.es/ecma262/#sec-object.keys
	// eslint-disable-next-line es/no-object-keys -- safe

	var objectKeys$5 = Object.keys || function keys(O) {
	  return internalObjectKeys(O, enumBugKeys$1);
	};

	var DESCRIPTORS$t = descriptors;
	var V8_PROTOTYPE_DEFINE_BUG = v8PrototypeDefineBug;
	var definePropertyModule$a = objectDefineProperty;
	var anObject$y = anObject$B;
	var toIndexedObject$b = toIndexedObject$f;
	var objectKeys$4 = objectKeys$5; // `Object.defineProperties` method
	// https://tc39.es/ecma262/#sec-object.defineproperties
	// eslint-disable-next-line es/no-object-defineproperties -- safe

	objectDefineProperties.f = DESCRIPTORS$t && !V8_PROTOTYPE_DEFINE_BUG ? Object.defineProperties : function defineProperties(O, Properties) {
	  anObject$y(O);
	  var props = toIndexedObject$b(Properties);
	  var keys = objectKeys$4(Properties);
	  var length = keys.length;
	  var index = 0;
	  var key;

	  while (length > index) {
	    definePropertyModule$a.f(O, key = keys[index++], props[key]);
	  }

	  return O;
	};

	var getBuiltIn$f = getBuiltIn$j;
	var html$2 = getBuiltIn$f('document', 'documentElement');

	/* global ActiveXObject -- old IE, WSH */
	var anObject$x = anObject$B;
	var definePropertiesModule$1 = objectDefineProperties;
	var enumBugKeys = enumBugKeys$3;
	var hiddenKeys$2 = hiddenKeys$6;
	var html$1 = html$2;
	var documentCreateElement$1 = documentCreateElement$2;
	var sharedKey$2 = sharedKey$4;
	var GT = '>';
	var LT = '<';
	var PROTOTYPE$2 = 'prototype';
	var SCRIPT = 'script';
	var IE_PROTO$1 = sharedKey$2('IE_PROTO');

	var EmptyConstructor = function EmptyConstructor() {
	  /* empty */
	};

	var scriptTag = function scriptTag(content) {
	  return LT + SCRIPT + GT + content + LT + '/' + SCRIPT + GT;
	}; // Create object with fake `null` prototype: use ActiveX Object with cleared prototype


	var NullProtoObjectViaActiveX = function NullProtoObjectViaActiveX(activeXDocument) {
	  activeXDocument.write(scriptTag(''));
	  activeXDocument.close();
	  var temp = activeXDocument.parentWindow.Object;
	  activeXDocument = null; // avoid memory leak

	  return temp;
	}; // Create object with fake `null` prototype: use iframe Object with cleared prototype


	var NullProtoObjectViaIFrame = function NullProtoObjectViaIFrame() {
	  // Thrash, waste and sodomy: IE GC bug
	  var iframe = documentCreateElement$1('iframe');
	  var JS = 'java' + SCRIPT + ':';
	  var iframeDocument;
	  iframe.style.display = 'none';
	  html$1.appendChild(iframe); // https://github.com/zloirock/core-js/issues/475

	  iframe.src = String(JS);
	  iframeDocument = iframe.contentWindow.document;
	  iframeDocument.open();
	  iframeDocument.write(scriptTag('document.F=Object'));
	  iframeDocument.close();
	  return iframeDocument.F;
	}; // Check for document.domain and active x support
	// No need to use active x approach when document.domain is not set
	// see https://github.com/es-shims/es5-shim/issues/150
	// variation of https://github.com/kitcambridge/es5-shim/commit/4f738ac066346
	// avoid IE GC bug


	var activeXDocument;

	var _NullProtoObject = function NullProtoObject() {
	  try {
	    activeXDocument = new ActiveXObject('htmlfile');
	  } catch (error) {
	    /* ignore */
	  }

	  _NullProtoObject = typeof document != 'undefined' ? document.domain && activeXDocument ? NullProtoObjectViaActiveX(activeXDocument) // old IE
	  : NullProtoObjectViaIFrame() : NullProtoObjectViaActiveX(activeXDocument); // WSH

	  var length = enumBugKeys.length;

	  while (length--) {
	    delete _NullProtoObject[PROTOTYPE$2][enumBugKeys[length]];
	  }

	  return _NullProtoObject();
	};

	hiddenKeys$2[IE_PROTO$1] = true; // `Object.create` method
	// https://tc39.es/ecma262/#sec-object.create

	var objectCreate = Object.create || function create(O, Properties) {
	  var result;

	  if (O !== null) {
	    EmptyConstructor[PROTOTYPE$2] = anObject$x(O);
	    result = new EmptyConstructor();
	    EmptyConstructor[PROTOTYPE$2] = null; // add "__proto__" for Object.getPrototypeOf polyfill

	    result[IE_PROTO$1] = O;
	  } else result = _NullProtoObject();

	  return Properties === undefined ? result : definePropertiesModule$1.f(result, Properties);
	};

	var objectGetOwnPropertyNamesExternal = {};

	var toPropertyKey$5 = toPropertyKey$8;
	var definePropertyModule$9 = objectDefineProperty;
	var createPropertyDescriptor$9 = createPropertyDescriptor$c;

	var createProperty$9 = function createProperty(object, key, value) {
	  var propertyKey = toPropertyKey$5(key);
	  if (propertyKey in object) definePropertyModule$9.f(object, propertyKey, createPropertyDescriptor$9(0, value));else object[propertyKey] = value;
	};

	var global$1e = global$1B;
	var toAbsoluteIndex$6 = toAbsoluteIndex$8;
	var lengthOfArrayLike$l = lengthOfArrayLike$n;
	var createProperty$8 = createProperty$9;
	var Array$9 = global$1e.Array;
	var max$5 = Math.max;

	var arraySliceSimple = function arraySliceSimple(O, start, end) {
	  var length = lengthOfArrayLike$l(O);
	  var k = toAbsoluteIndex$6(start, length);
	  var fin = toAbsoluteIndex$6(end === undefined ? length : end, length);
	  var result = Array$9(max$5(fin - k, 0));

	  for (var n = 0; k < fin; k++, n++) {
	    createProperty$8(result, n, O[k]);
	  }

	  result.length = n;
	  return result;
	};

	var classof$g = classofRaw$1;
	var toIndexedObject$a = toIndexedObject$f;
	var $getOwnPropertyNames$1 = objectGetOwnPropertyNames.f;
	var arraySlice$b = arraySliceSimple;
	var windowNames = (typeof window === "undefined" ? "undefined" : _typeof(window)) == 'object' && window && Object.getOwnPropertyNames ? Object.getOwnPropertyNames(window) : [];

	var getWindowNames = function getWindowNames(it) {
	  try {
	    return $getOwnPropertyNames$1(it);
	  } catch (error) {
	    return arraySlice$b(windowNames);
	  }
	}; // fallback for IE11 buggy Object.getOwnPropertyNames with iframe and window


	objectGetOwnPropertyNamesExternal.f = function getOwnPropertyNames(it) {
	  return windowNames && classof$g(it) == 'Window' ? getWindowNames(it) : $getOwnPropertyNames$1(toIndexedObject$a(it));
	};

	var uncurryThis$T = functionUncurryThis;
	var arraySlice$a = uncurryThis$T([].slice);

	var wellKnownSymbolWrapped = {};

	var wellKnownSymbol$u = wellKnownSymbol$y;
	wellKnownSymbolWrapped.f = wellKnownSymbol$u;

	var global$1d = global$1B;
	var path$2 = global$1d;

	var path$1 = path$2;
	var hasOwn$l = hasOwnProperty_1;
	var wrappedWellKnownSymbolModule$1 = wellKnownSymbolWrapped;
	var defineProperty$g = objectDefineProperty.f;

	var defineWellKnownSymbol$e = function defineWellKnownSymbol(NAME) {
	  var _Symbol = path$1.Symbol || (path$1.Symbol = {});

	  if (!hasOwn$l(_Symbol, NAME)) defineProperty$g(_Symbol, NAME, {
	    value: wrappedWellKnownSymbolModule$1.f(NAME)
	  });
	};

	var defineProperty$f = objectDefineProperty.f;
	var hasOwn$k = hasOwnProperty_1;
	var wellKnownSymbol$t = wellKnownSymbol$y;
	var TO_STRING_TAG$3 = wellKnownSymbol$t('toStringTag');

	var setToStringTag$c = function setToStringTag(target, TAG, STATIC) {
	  if (target && !STATIC) target = target.prototype;

	  if (target && !hasOwn$k(target, TO_STRING_TAG$3)) {
	    defineProperty$f(target, TO_STRING_TAG$3, {
	      configurable: true,
	      value: TAG
	    });
	  }
	};

	var uncurryThis$S = functionUncurryThis;
	var aCallable$e = aCallable$g;
	var NATIVE_BIND$1 = functionBindNative;
	var bind$c = uncurryThis$S(uncurryThis$S.bind); // optional / simple context binding

	var functionBindContext = function functionBindContext(fn, that) {
	  aCallable$e(fn);
	  return that === undefined ? fn : NATIVE_BIND$1 ? bind$c(fn, that) : function
	    /* ...args */
	  () {
	    return fn.apply(that, arguments);
	  };
	};

	var uncurryThis$R = functionUncurryThis;
	var fails$10 = fails$18;
	var isCallable$j = isCallable$u;
	var classof$f = classof$i;
	var getBuiltIn$e = getBuiltIn$j;
	var inspectSource$1 = inspectSource$4;

	var noop$3 = function noop() {
	  /* empty */
	};

	var empty$1 = [];
	var construct$1 = getBuiltIn$e('Reflect', 'construct');
	var constructorRegExp = /^\s*(?:class|function)\b/;
	var exec$7 = uncurryThis$R(constructorRegExp.exec);
	var INCORRECT_TO_STRING$2 = !constructorRegExp.exec(noop$3);

	var isConstructorModern = function isConstructor(argument) {
	  if (!isCallable$j(argument)) return false;

	  try {
	    construct$1(noop$3, empty$1, argument);
	    return true;
	  } catch (error) {
	    return false;
	  }
	};

	var isConstructorLegacy = function isConstructor(argument) {
	  if (!isCallable$j(argument)) return false;

	  switch (classof$f(argument)) {
	    case 'AsyncFunction':
	    case 'GeneratorFunction':
	    case 'AsyncGeneratorFunction':
	      return false;
	  }

	  try {
	    // we can't check .prototype since constructors produced by .bind haven't it
	    // `Function#toString` throws on some built-it function in some legacy engines
	    // (for example, `DOMQuad` and similar in FF41-)
	    return INCORRECT_TO_STRING$2 || !!exec$7(constructorRegExp, inspectSource$1(argument));
	  } catch (error) {
	    return true;
	  }
	};

	isConstructorLegacy.sham = true; // `IsConstructor` abstract operation
	// https://tc39.es/ecma262/#sec-isconstructor

	var isConstructor$6 = !construct$1 || fails$10(function () {
	  var called;
	  return isConstructorModern(isConstructorModern.call) || !isConstructorModern(Object) || !isConstructorModern(function () {
	    called = true;
	  }) || called;
	}) ? isConstructorLegacy : isConstructorModern;

	var global$1c = global$1B;
	var isArray$4 = isArray$5;
	var isConstructor$5 = isConstructor$6;
	var isObject$t = isObject$z;
	var wellKnownSymbol$s = wellKnownSymbol$y;
	var SPECIES$6 = wellKnownSymbol$s('species');
	var Array$8 = global$1c.Array; // a part of `ArraySpeciesCreate` abstract operation
	// https://tc39.es/ecma262/#sec-arrayspeciescreate

	var arraySpeciesConstructor$1 = function arraySpeciesConstructor(originalArray) {
	  var C;

	  if (isArray$4(originalArray)) {
	    C = originalArray.constructor; // cross-realm fallback

	    if (isConstructor$5(C) && (C === Array$8 || isArray$4(C.prototype))) C = undefined;else if (isObject$t(C)) {
	      C = C[SPECIES$6];
	      if (C === null) C = undefined;
	    }
	  }

	  return C === undefined ? Array$8 : C;
	};

	var arraySpeciesConstructor = arraySpeciesConstructor$1; // `ArraySpeciesCreate` abstract operation
	// https://tc39.es/ecma262/#sec-arrayspeciescreate

	var arraySpeciesCreate$5 = function arraySpeciesCreate(originalArray, length) {
	  return new (arraySpeciesConstructor(originalArray))(length === 0 ? 0 : length);
	};

	var bind$b = functionBindContext;
	var uncurryThis$Q = functionUncurryThis;
	var IndexedObject$3 = indexedObject;
	var toObject$m = toObject$o;
	var lengthOfArrayLike$k = lengthOfArrayLike$n;
	var arraySpeciesCreate$4 = arraySpeciesCreate$5;
	var push$c = uncurryThis$Q([].push); // `Array.prototype.{ forEach, map, filter, some, every, find, findIndex, filterReject }` methods implementation

	var createMethod$5 = function createMethod(TYPE) {
	  var IS_MAP = TYPE == 1;
	  var IS_FILTER = TYPE == 2;
	  var IS_SOME = TYPE == 3;
	  var IS_EVERY = TYPE == 4;
	  var IS_FIND_INDEX = TYPE == 6;
	  var IS_FILTER_REJECT = TYPE == 7;
	  var NO_HOLES = TYPE == 5 || IS_FIND_INDEX;
	  return function ($this, callbackfn, that, specificCreate) {
	    var O = toObject$m($this);
	    var self = IndexedObject$3(O);
	    var boundFunction = bind$b(callbackfn, that);
	    var length = lengthOfArrayLike$k(self);
	    var index = 0;
	    var create = specificCreate || arraySpeciesCreate$4;
	    var target = IS_MAP ? create($this, length) : IS_FILTER || IS_FILTER_REJECT ? create($this, 0) : undefined;
	    var value, result;

	    for (; length > index; index++) {
	      if (NO_HOLES || index in self) {
	        value = self[index];
	        result = boundFunction(value, index, O);

	        if (TYPE) {
	          if (IS_MAP) target[index] = result; // map
	          else if (result) switch (TYPE) {
	            case 3:
	              return true;
	            // some

	            case 5:
	              return value;
	            // find

	            case 6:
	              return index;
	            // findIndex

	            case 2:
	              push$c(target, value);
	            // filter
	          } else switch (TYPE) {
	            case 4:
	              return false;
	            // every

	            case 7:
	              push$c(target, value);
	            // filterReject
	          }
	        }
	      }
	    }

	    return IS_FIND_INDEX ? -1 : IS_SOME || IS_EVERY ? IS_EVERY : target;
	  };
	};

	var arrayIteration = {
	  // `Array.prototype.forEach` method
	  // https://tc39.es/ecma262/#sec-array.prototype.foreach
	  forEach: createMethod$5(0),
	  // `Array.prototype.map` method
	  // https://tc39.es/ecma262/#sec-array.prototype.map
	  map: createMethod$5(1),
	  // `Array.prototype.filter` method
	  // https://tc39.es/ecma262/#sec-array.prototype.filter
	  filter: createMethod$5(2),
	  // `Array.prototype.some` method
	  // https://tc39.es/ecma262/#sec-array.prototype.some
	  some: createMethod$5(3),
	  // `Array.prototype.every` method
	  // https://tc39.es/ecma262/#sec-array.prototype.every
	  every: createMethod$5(4),
	  // `Array.prototype.find` method
	  // https://tc39.es/ecma262/#sec-array.prototype.find
	  find: createMethod$5(5),
	  // `Array.prototype.findIndex` method
	  // https://tc39.es/ecma262/#sec-array.prototype.findIndex
	  findIndex: createMethod$5(6),
	  // `Array.prototype.filterReject` method
	  // https://github.com/tc39/proposal-array-filtering
	  filterReject: createMethod$5(7)
	};

	var $$2f = _export;
	var global$1b = global$1B;
	var getBuiltIn$d = getBuiltIn$j;
	var apply$a = functionApply$1;
	var call$q = functionCall;
	var uncurryThis$P = functionUncurryThis;
	var DESCRIPTORS$s = descriptors;
	var NATIVE_SYMBOL$1 = nativeSymbol;
	var fails$$ = fails$18;
	var hasOwn$j = hasOwnProperty_1;
	var isArray$3 = isArray$5;
	var isCallable$i = isCallable$u;
	var isObject$s = isObject$z;
	var isPrototypeOf$b = objectIsPrototypeOf;
	var isSymbol$3 = isSymbol$6;
	var anObject$w = anObject$B;
	var toObject$l = toObject$o;
	var toIndexedObject$9 = toIndexedObject$f;
	var toPropertyKey$4 = toPropertyKey$8;
	var $toString$3 = toString$p;
	var createPropertyDescriptor$8 = createPropertyDescriptor$c;
	var nativeObjectCreate = objectCreate;
	var objectKeys$3 = objectKeys$5;
	var getOwnPropertyNamesModule$1 = objectGetOwnPropertyNames;
	var getOwnPropertyNamesExternal = objectGetOwnPropertyNamesExternal;
	var getOwnPropertySymbolsModule$1 = objectGetOwnPropertySymbols;
	var getOwnPropertyDescriptorModule$5 = objectGetOwnPropertyDescriptor;
	var definePropertyModule$8 = objectDefineProperty;
	var definePropertiesModule = objectDefineProperties;
	var propertyIsEnumerableModule$1 = objectPropertyIsEnumerable;
	var arraySlice$9 = arraySlice$a;
	var redefine$h = redefine$j.exports;
	var shared$1 = shared$5.exports;
	var sharedKey$1 = sharedKey$4;
	var hiddenKeys$1 = hiddenKeys$6;
	var uid$3 = uid$6;
	var wellKnownSymbol$r = wellKnownSymbol$y;
	var wrappedWellKnownSymbolModule = wellKnownSymbolWrapped;
	var defineWellKnownSymbol$d = defineWellKnownSymbol$e;
	var setToStringTag$b = setToStringTag$c;
	var InternalStateModule$b = internalState;
	var $forEach$2 = arrayIteration.forEach;
	var HIDDEN = sharedKey$1('hidden');
	var SYMBOL = 'Symbol';
	var PROTOTYPE$1 = 'prototype';
	var TO_PRIMITIVE$1 = wellKnownSymbol$r('toPrimitive');
	var setInternalState$b = InternalStateModule$b.set;
	var getInternalState$a = InternalStateModule$b.getterFor(SYMBOL);
	var ObjectPrototype$4 = Object[PROTOTYPE$1];
	var $Symbol = global$1b.Symbol;
	var SymbolPrototype$1 = $Symbol && $Symbol[PROTOTYPE$1];
	var TypeError$o = global$1b.TypeError;
	var QObject = global$1b.QObject;
	var $stringify$1 = getBuiltIn$d('JSON', 'stringify');
	var nativeGetOwnPropertyDescriptor$2 = getOwnPropertyDescriptorModule$5.f;
	var nativeDefineProperty$1 = definePropertyModule$8.f;
	var nativeGetOwnPropertyNames = getOwnPropertyNamesExternal.f;
	var nativePropertyIsEnumerable = propertyIsEnumerableModule$1.f;
	var push$b = uncurryThis$P([].push);
	var AllSymbols = shared$1('symbols');
	var ObjectPrototypeSymbols = shared$1('op-symbols');
	var StringToSymbolRegistry = shared$1('string-to-symbol-registry');
	var SymbolToStringRegistry = shared$1('symbol-to-string-registry');
	var WellKnownSymbolsStore = shared$1('wks'); // Don't use setters in Qt Script, https://github.com/zloirock/core-js/issues/173

	var USE_SETTER = !QObject || !QObject[PROTOTYPE$1] || !QObject[PROTOTYPE$1].findChild; // fallback for old Android, https://code.google.com/p/v8/issues/detail?id=687

	var setSymbolDescriptor = DESCRIPTORS$s && fails$$(function () {
	  return nativeObjectCreate(nativeDefineProperty$1({}, 'a', {
	    get: function get() {
	      return nativeDefineProperty$1(this, 'a', {
	        value: 7
	      }).a;
	    }
	  })).a != 7;
	}) ? function (O, P, Attributes) {
	  var ObjectPrototypeDescriptor = nativeGetOwnPropertyDescriptor$2(ObjectPrototype$4, P);
	  if (ObjectPrototypeDescriptor) delete ObjectPrototype$4[P];
	  nativeDefineProperty$1(O, P, Attributes);

	  if (ObjectPrototypeDescriptor && O !== ObjectPrototype$4) {
	    nativeDefineProperty$1(ObjectPrototype$4, P, ObjectPrototypeDescriptor);
	  }
	} : nativeDefineProperty$1;

	var wrap = function wrap(tag, description) {
	  var symbol = AllSymbols[tag] = nativeObjectCreate(SymbolPrototype$1);
	  setInternalState$b(symbol, {
	    type: SYMBOL,
	    tag: tag,
	    description: description
	  });
	  if (!DESCRIPTORS$s) symbol.description = description;
	  return symbol;
	};

	var $defineProperty = function defineProperty(O, P, Attributes) {
	  if (O === ObjectPrototype$4) $defineProperty(ObjectPrototypeSymbols, P, Attributes);
	  anObject$w(O);
	  var key = toPropertyKey$4(P);
	  anObject$w(Attributes);

	  if (hasOwn$j(AllSymbols, key)) {
	    if (!Attributes.enumerable) {
	      if (!hasOwn$j(O, HIDDEN)) nativeDefineProperty$1(O, HIDDEN, createPropertyDescriptor$8(1, {}));
	      O[HIDDEN][key] = true;
	    } else {
	      if (hasOwn$j(O, HIDDEN) && O[HIDDEN][key]) O[HIDDEN][key] = false;
	      Attributes = nativeObjectCreate(Attributes, {
	        enumerable: createPropertyDescriptor$8(0, false)
	      });
	    }

	    return setSymbolDescriptor(O, key, Attributes);
	  }

	  return nativeDefineProperty$1(O, key, Attributes);
	};

	var $defineProperties = function defineProperties(O, Properties) {
	  anObject$w(O);
	  var properties = toIndexedObject$9(Properties);
	  var keys = objectKeys$3(properties).concat($getOwnPropertySymbols(properties));
	  $forEach$2(keys, function (key) {
	    if (!DESCRIPTORS$s || call$q($propertyIsEnumerable$1, properties, key)) $defineProperty(O, key, properties[key]);
	  });
	  return O;
	};

	var $create = function create(O, Properties) {
	  return Properties === undefined ? nativeObjectCreate(O) : $defineProperties(nativeObjectCreate(O), Properties);
	};

	var $propertyIsEnumerable$1 = function propertyIsEnumerable(V) {
	  var P = toPropertyKey$4(V);
	  var enumerable = call$q(nativePropertyIsEnumerable, this, P);
	  if (this === ObjectPrototype$4 && hasOwn$j(AllSymbols, P) && !hasOwn$j(ObjectPrototypeSymbols, P)) return false;
	  return enumerable || !hasOwn$j(this, P) || !hasOwn$j(AllSymbols, P) || hasOwn$j(this, HIDDEN) && this[HIDDEN][P] ? enumerable : true;
	};

	var $getOwnPropertyDescriptor = function getOwnPropertyDescriptor(O, P) {
	  var it = toIndexedObject$9(O);
	  var key = toPropertyKey$4(P);
	  if (it === ObjectPrototype$4 && hasOwn$j(AllSymbols, key) && !hasOwn$j(ObjectPrototypeSymbols, key)) return;
	  var descriptor = nativeGetOwnPropertyDescriptor$2(it, key);

	  if (descriptor && hasOwn$j(AllSymbols, key) && !(hasOwn$j(it, HIDDEN) && it[HIDDEN][key])) {
	    descriptor.enumerable = true;
	  }

	  return descriptor;
	};

	var $getOwnPropertyNames = function getOwnPropertyNames(O) {
	  var names = nativeGetOwnPropertyNames(toIndexedObject$9(O));
	  var result = [];
	  $forEach$2(names, function (key) {
	    if (!hasOwn$j(AllSymbols, key) && !hasOwn$j(hiddenKeys$1, key)) push$b(result, key);
	  });
	  return result;
	};

	var $getOwnPropertySymbols = function getOwnPropertySymbols(O) {
	  var IS_OBJECT_PROTOTYPE = O === ObjectPrototype$4;
	  var names = nativeGetOwnPropertyNames(IS_OBJECT_PROTOTYPE ? ObjectPrototypeSymbols : toIndexedObject$9(O));
	  var result = [];
	  $forEach$2(names, function (key) {
	    if (hasOwn$j(AllSymbols, key) && (!IS_OBJECT_PROTOTYPE || hasOwn$j(ObjectPrototype$4, key))) {
	      push$b(result, AllSymbols[key]);
	    }
	  });
	  return result;
	}; // `Symbol` constructor
	// https://tc39.es/ecma262/#sec-symbol-constructor


	if (!NATIVE_SYMBOL$1) {
	  $Symbol = function _Symbol() {
	    if (isPrototypeOf$b(SymbolPrototype$1, this)) throw TypeError$o('Symbol is not a constructor');
	    var description = !arguments.length || arguments[0] === undefined ? undefined : $toString$3(arguments[0]);
	    var tag = uid$3(description);

	    var setter = function setter(value) {
	      if (this === ObjectPrototype$4) call$q(setter, ObjectPrototypeSymbols, value);
	      if (hasOwn$j(this, HIDDEN) && hasOwn$j(this[HIDDEN], tag)) this[HIDDEN][tag] = false;
	      setSymbolDescriptor(this, tag, createPropertyDescriptor$8(1, value));
	    };

	    if (DESCRIPTORS$s && USE_SETTER) setSymbolDescriptor(ObjectPrototype$4, tag, {
	      configurable: true,
	      set: setter
	    });
	    return wrap(tag, description);
	  };

	  SymbolPrototype$1 = $Symbol[PROTOTYPE$1];
	  redefine$h(SymbolPrototype$1, 'toString', function toString() {
	    return getInternalState$a(this).tag;
	  });
	  redefine$h($Symbol, 'withoutSetter', function (description) {
	    return wrap(uid$3(description), description);
	  });
	  propertyIsEnumerableModule$1.f = $propertyIsEnumerable$1;
	  definePropertyModule$8.f = $defineProperty;
	  definePropertiesModule.f = $defineProperties;
	  getOwnPropertyDescriptorModule$5.f = $getOwnPropertyDescriptor;
	  getOwnPropertyNamesModule$1.f = getOwnPropertyNamesExternal.f = $getOwnPropertyNames;
	  getOwnPropertySymbolsModule$1.f = $getOwnPropertySymbols;

	  wrappedWellKnownSymbolModule.f = function (name) {
	    return wrap(wellKnownSymbol$r(name), name);
	  };

	  if (DESCRIPTORS$s) {
	    // https://github.com/tc39/proposal-Symbol-description
	    nativeDefineProperty$1(SymbolPrototype$1, 'description', {
	      configurable: true,
	      get: function description() {
	        return getInternalState$a(this).description;
	      }
	    });

	    {
	      redefine$h(ObjectPrototype$4, 'propertyIsEnumerable', $propertyIsEnumerable$1, {
	        unsafe: true
	      });
	    }
	  }
	}

	$$2f({
	  global: true,
	  wrap: true,
	  forced: !NATIVE_SYMBOL$1,
	  sham: !NATIVE_SYMBOL$1
	}, {
	  Symbol: $Symbol
	});
	$forEach$2(objectKeys$3(WellKnownSymbolsStore), function (name) {
	  defineWellKnownSymbol$d(name);
	});
	$$2f({
	  target: SYMBOL,
	  stat: true,
	  forced: !NATIVE_SYMBOL$1
	}, {
	  // `Symbol.for` method
	  // https://tc39.es/ecma262/#sec-symbol.for
	  'for': function _for(key) {
	    var string = $toString$3(key);
	    if (hasOwn$j(StringToSymbolRegistry, string)) return StringToSymbolRegistry[string];
	    var symbol = $Symbol(string);
	    StringToSymbolRegistry[string] = symbol;
	    SymbolToStringRegistry[symbol] = string;
	    return symbol;
	  },
	  // `Symbol.keyFor` method
	  // https://tc39.es/ecma262/#sec-symbol.keyfor
	  keyFor: function keyFor(sym) {
	    if (!isSymbol$3(sym)) throw TypeError$o(sym + ' is not a symbol');
	    if (hasOwn$j(SymbolToStringRegistry, sym)) return SymbolToStringRegistry[sym];
	  },
	  useSetter: function useSetter() {
	    USE_SETTER = true;
	  },
	  useSimple: function useSimple() {
	    USE_SETTER = false;
	  }
	});
	$$2f({
	  target: 'Object',
	  stat: true,
	  forced: !NATIVE_SYMBOL$1,
	  sham: !DESCRIPTORS$s
	}, {
	  // `Object.create` method
	  // https://tc39.es/ecma262/#sec-object.create
	  create: $create,
	  // `Object.defineProperty` method
	  // https://tc39.es/ecma262/#sec-object.defineproperty
	  defineProperty: $defineProperty,
	  // `Object.defineProperties` method
	  // https://tc39.es/ecma262/#sec-object.defineproperties
	  defineProperties: $defineProperties,
	  // `Object.getOwnPropertyDescriptor` method
	  // https://tc39.es/ecma262/#sec-object.getownpropertydescriptors
	  getOwnPropertyDescriptor: $getOwnPropertyDescriptor
	});
	$$2f({
	  target: 'Object',
	  stat: true,
	  forced: !NATIVE_SYMBOL$1
	}, {
	  // `Object.getOwnPropertyNames` method
	  // https://tc39.es/ecma262/#sec-object.getownpropertynames
	  getOwnPropertyNames: $getOwnPropertyNames,
	  // `Object.getOwnPropertySymbols` method
	  // https://tc39.es/ecma262/#sec-object.getownpropertysymbols
	  getOwnPropertySymbols: $getOwnPropertySymbols
	}); // Chrome 38 and 39 `Object.getOwnPropertySymbols` fails on primitives
	// https://bugs.chromium.org/p/v8/issues/detail?id=3443

	$$2f({
	  target: 'Object',
	  stat: true,
	  forced: fails$$(function () {
	    getOwnPropertySymbolsModule$1.f(1);
	  })
	}, {
	  getOwnPropertySymbols: function getOwnPropertySymbols(it) {
	    return getOwnPropertySymbolsModule$1.f(toObject$l(it));
	  }
	}); // `JSON.stringify` method behavior with symbols
	// https://tc39.es/ecma262/#sec-json.stringify

	if ($stringify$1) {
	  var FORCED_JSON_STRINGIFY = !NATIVE_SYMBOL$1 || fails$$(function () {
	    var symbol = $Symbol(); // MS Edge converts symbol values to JSON as {}

	    return $stringify$1([symbol]) != '[null]' // WebKit converts symbol values to JSON as null
	    || $stringify$1({
	      a: symbol
	    }) != '{}' // V8 throws on boxed symbols
	    || $stringify$1(Object(symbol)) != '{}';
	  });
	  $$2f({
	    target: 'JSON',
	    stat: true,
	    forced: FORCED_JSON_STRINGIFY
	  }, {
	    // eslint-disable-next-line no-unused-vars -- required for `.length`
	    stringify: function stringify(it, replacer, space) {
	      var args = arraySlice$9(arguments);
	      var $replacer = replacer;
	      if (!isObject$s(replacer) && it === undefined || isSymbol$3(it)) return; // IE8 returns string on undefined

	      if (!isArray$3(replacer)) replacer = function replacer(key, value) {
	        if (isCallable$i($replacer)) value = call$q($replacer, this, key, value);
	        if (!isSymbol$3(value)) return value;
	      };
	      args[1] = replacer;
	      return apply$a($stringify$1, null, args);
	    }
	  });
	} // `Symbol.prototype[@@toPrimitive]` method
	// https://tc39.es/ecma262/#sec-symbol.prototype-@@toprimitive


	if (!SymbolPrototype$1[TO_PRIMITIVE$1]) {
	  var valueOf = SymbolPrototype$1.valueOf; // eslint-disable-next-line no-unused-vars -- required for .length

	  redefine$h(SymbolPrototype$1, TO_PRIMITIVE$1, function (hint) {
	    // TODO: improve hint logic
	    return call$q(valueOf, this);
	  });
	} // `Symbol.prototype[@@toStringTag]` property
	// https://tc39.es/ecma262/#sec-symbol.prototype-@@tostringtag


	setToStringTag$b($Symbol, SYMBOL);
	hiddenKeys$1[HIDDEN] = true;

	var $$2e = _export;
	var DESCRIPTORS$r = descriptors;
	var global$1a = global$1B;
	var uncurryThis$O = functionUncurryThis;
	var hasOwn$i = hasOwnProperty_1;
	var isCallable$h = isCallable$u;
	var isPrototypeOf$a = objectIsPrototypeOf;
	var toString$o = toString$p;
	var defineProperty$e = objectDefineProperty.f;
	var copyConstructorProperties$2 = copyConstructorProperties$4;
	var NativeSymbol = global$1a.Symbol;
	var SymbolPrototype = NativeSymbol && NativeSymbol.prototype;

	if (DESCRIPTORS$r && isCallable$h(NativeSymbol) && (!('description' in SymbolPrototype) || // Safari 12 bug
	NativeSymbol().description !== undefined)) {
	  var EmptyStringDescriptionStore = {}; // wrap Symbol constructor for correct work with undefined description

	  var SymbolWrapper = function _Symbol() {
	    var description = arguments.length < 1 || arguments[0] === undefined ? undefined : toString$o(arguments[0]);
	    var result = isPrototypeOf$a(SymbolPrototype, this) ? new NativeSymbol(description) // in Edge 13, String(Symbol(undefined)) === 'Symbol(undefined)'
	    : description === undefined ? NativeSymbol() : NativeSymbol(description);
	    if (description === '') EmptyStringDescriptionStore[result] = true;
	    return result;
	  };

	  copyConstructorProperties$2(SymbolWrapper, NativeSymbol);
	  SymbolWrapper.prototype = SymbolPrototype;
	  SymbolPrototype.constructor = SymbolWrapper;
	  var NATIVE_SYMBOL = String(NativeSymbol('test')) == 'Symbol(test)';
	  var symbolToString = uncurryThis$O(SymbolPrototype.toString);
	  var symbolValueOf = uncurryThis$O(SymbolPrototype.valueOf);
	  var regexp = /^Symbol\((.*)\)[^)]+$/;
	  var replace$a = uncurryThis$O(''.replace);
	  var stringSlice$d = uncurryThis$O(''.slice);
	  defineProperty$e(SymbolPrototype, 'description', {
	    configurable: true,
	    get: function description() {
	      var symbol = symbolValueOf(this);
	      var string = symbolToString(symbol);
	      if (hasOwn$i(EmptyStringDescriptionStore, symbol)) return '';
	      var desc = NATIVE_SYMBOL ? stringSlice$d(string, 7, -1) : replace$a(string, regexp, '$1');
	      return desc === '' ? undefined : desc;
	    }
	  });
	  $$2e({
	    global: true,
	    forced: true
	  }, {
	    Symbol: SymbolWrapper
	  });
	}

	var defineWellKnownSymbol$c = defineWellKnownSymbol$e; // `Symbol.asyncIterator` well-known symbol
	// https://tc39.es/ecma262/#sec-symbol.asynciterator

	defineWellKnownSymbol$c('asyncIterator');

	var defineWellKnownSymbol$b = defineWellKnownSymbol$e; // `Symbol.hasInstance` well-known symbol
	// https://tc39.es/ecma262/#sec-symbol.hasinstance

	defineWellKnownSymbol$b('hasInstance');

	var defineWellKnownSymbol$a = defineWellKnownSymbol$e; // `Symbol.isConcatSpreadable` well-known symbol
	// https://tc39.es/ecma262/#sec-symbol.isconcatspreadable

	defineWellKnownSymbol$a('isConcatSpreadable');

	var defineWellKnownSymbol$9 = defineWellKnownSymbol$e; // `Symbol.iterator` well-known symbol
	// https://tc39.es/ecma262/#sec-symbol.iterator

	defineWellKnownSymbol$9('iterator');

	var defineWellKnownSymbol$8 = defineWellKnownSymbol$e; // `Symbol.match` well-known symbol
	// https://tc39.es/ecma262/#sec-symbol.match

	defineWellKnownSymbol$8('match');

	var defineWellKnownSymbol$7 = defineWellKnownSymbol$e; // `Symbol.matchAll` well-known symbol
	// https://tc39.es/ecma262/#sec-symbol.matchall

	defineWellKnownSymbol$7('matchAll');

	var defineWellKnownSymbol$6 = defineWellKnownSymbol$e; // `Symbol.replace` well-known symbol
	// https://tc39.es/ecma262/#sec-symbol.replace

	defineWellKnownSymbol$6('replace');

	var defineWellKnownSymbol$5 = defineWellKnownSymbol$e; // `Symbol.search` well-known symbol
	// https://tc39.es/ecma262/#sec-symbol.search

	defineWellKnownSymbol$5('search');

	var defineWellKnownSymbol$4 = defineWellKnownSymbol$e; // `Symbol.species` well-known symbol
	// https://tc39.es/ecma262/#sec-symbol.species

	defineWellKnownSymbol$4('species');

	var defineWellKnownSymbol$3 = defineWellKnownSymbol$e; // `Symbol.split` well-known symbol
	// https://tc39.es/ecma262/#sec-symbol.split

	defineWellKnownSymbol$3('split');

	var defineWellKnownSymbol$2 = defineWellKnownSymbol$e; // `Symbol.toPrimitive` well-known symbol
	// https://tc39.es/ecma262/#sec-symbol.toprimitive

	defineWellKnownSymbol$2('toPrimitive');

	var defineWellKnownSymbol$1 = defineWellKnownSymbol$e; // `Symbol.toStringTag` well-known symbol
	// https://tc39.es/ecma262/#sec-symbol.tostringtag

	defineWellKnownSymbol$1('toStringTag');

	var defineWellKnownSymbol = defineWellKnownSymbol$e; // `Symbol.unscopables` well-known symbol
	// https://tc39.es/ecma262/#sec-symbol.unscopables

	defineWellKnownSymbol('unscopables');

	var global$19 = global$1B;
	var isCallable$g = isCallable$u;
	var String$4 = global$19.String;
	var TypeError$n = global$19.TypeError;

	var aPossiblePrototype$2 = function aPossiblePrototype(argument) {
	  if (_typeof(argument) == 'object' || isCallable$g(argument)) return argument;
	  throw TypeError$n("Can't set " + String$4(argument) + ' as a prototype');
	};

	/* eslint-disable no-proto -- safe */
	var uncurryThis$N = functionUncurryThis;
	var anObject$v = anObject$B;
	var aPossiblePrototype$1 = aPossiblePrototype$2; // `Object.setPrototypeOf` method
	// https://tc39.es/ecma262/#sec-object.setprototypeof
	// Works with __proto__ only. Old v8 can't work with null proto objects.
	// eslint-disable-next-line es/no-object-setprototypeof -- safe

	var objectSetPrototypeOf$1 = Object.setPrototypeOf || ('__proto__' in {} ? function () {
	  var CORRECT_SETTER = false;
	  var test = {};
	  var setter;

	  try {
	    // eslint-disable-next-line es/no-object-getownpropertydescriptor -- safe
	    setter = uncurryThis$N(Object.getOwnPropertyDescriptor(Object.prototype, '__proto__').set);
	    setter(test, []);
	    CORRECT_SETTER = test instanceof Array;
	  } catch (error) {
	    /* empty */
	  }

	  return function setPrototypeOf(O, proto) {
	    anObject$v(O);
	    aPossiblePrototype$1(proto);
	    if (CORRECT_SETTER) setter(O, proto);else O.__proto__ = proto;
	    return O;
	  };
	}() : undefined);

	var isCallable$f = isCallable$u;
	var isObject$r = isObject$z;
	var setPrototypeOf$8 = objectSetPrototypeOf$1; // makes subclassing work correct for wrapped built-ins

	var inheritIfRequired$6 = function inheritIfRequired($this, dummy, Wrapper) {
	  var NewTarget, NewTargetPrototype;
	  if ( // it can work only with native `setPrototypeOf`
	  setPrototypeOf$8 && // we haven't completely correct pre-ES6 way for getting `new.target`, so use this
	  isCallable$f(NewTarget = dummy.constructor) && NewTarget !== Wrapper && isObject$r(NewTargetPrototype = NewTarget.prototype) && NewTargetPrototype !== Wrapper.prototype) setPrototypeOf$8($this, NewTargetPrototype);
	  return $this;
	};

	var toString$n = toString$p;

	var normalizeStringArgument$5 = function normalizeStringArgument(argument, $default) {
	  return argument === undefined ? arguments.length < 2 ? '' : $default : toString$n(argument);
	};

	var isObject$q = isObject$z;
	var createNonEnumerableProperty$b = createNonEnumerableProperty$f; // `InstallErrorCause` abstract operation
	// https://tc39.es/proposal-error-cause/#sec-errorobjects-install-error-cause

	var installErrorCause$2 = function installErrorCause(O, options) {
	  if (isObject$q(options) && 'cause' in options) {
	    createNonEnumerableProperty$b(O, 'cause', options.cause);
	  }
	};

	var uncurryThis$M = functionUncurryThis;
	var replace$9 = uncurryThis$M(''.replace);

	var TEST = function (arg) {
	  return String(Error(arg).stack);
	}('zxcasd');

	var V8_OR_CHAKRA_STACK_ENTRY = /\n\s*at [^:]*:[^\n]*/;
	var IS_V8_OR_CHAKRA_STACK = V8_OR_CHAKRA_STACK_ENTRY.test(TEST);

	var clearErrorStack$4 = function clearErrorStack(stack, dropEntries) {
	  if (IS_V8_OR_CHAKRA_STACK && typeof stack == 'string') {
	    while (dropEntries--) {
	      stack = replace$9(stack, V8_OR_CHAKRA_STACK_ENTRY, '');
	    }
	  }

	  return stack;
	};

	var fails$_ = fails$18;
	var createPropertyDescriptor$7 = createPropertyDescriptor$c;
	var errorStackInstallable = !fails$_(function () {
	  var error = Error('a');
	  if (!('stack' in error)) return true; // eslint-disable-next-line es/no-object-defineproperty -- safe

	  Object.defineProperty(error, 'stack', createPropertyDescriptor$7(1, 7));
	  return error.stack !== 7;
	});

	var getBuiltIn$c = getBuiltIn$j;
	var hasOwn$h = hasOwnProperty_1;
	var createNonEnumerableProperty$a = createNonEnumerableProperty$f;
	var isPrototypeOf$9 = objectIsPrototypeOf;
	var setPrototypeOf$7 = objectSetPrototypeOf$1;
	var copyConstructorProperties$1 = copyConstructorProperties$4;
	var inheritIfRequired$5 = inheritIfRequired$6;
	var normalizeStringArgument$4 = normalizeStringArgument$5;
	var installErrorCause$1 = installErrorCause$2;
	var clearErrorStack$3 = clearErrorStack$4;
	var ERROR_STACK_INSTALLABLE$2 = errorStackInstallable;

	var wrapErrorConstructorWithCause$2 = function wrapErrorConstructorWithCause(FULL_NAME, wrapper, FORCED, IS_AGGREGATE_ERROR) {
	  var OPTIONS_POSITION = IS_AGGREGATE_ERROR ? 2 : 1;
	  var path = FULL_NAME.split('.');
	  var ERROR_NAME = path[path.length - 1];
	  var OriginalError = getBuiltIn$c.apply(null, path);
	  if (!OriginalError) return;
	  var OriginalErrorPrototype = OriginalError.prototype; // V8 9.3- bug https://bugs.chromium.org/p/v8/issues/detail?id=12006

	  if (hasOwn$h(OriginalErrorPrototype, 'cause')) delete OriginalErrorPrototype.cause;
	  if (!FORCED) return OriginalError;
	  var BaseError = getBuiltIn$c('Error');
	  var WrappedError = wrapper(function (a, b) {
	    var message = normalizeStringArgument$4(IS_AGGREGATE_ERROR ? b : a, undefined);
	    var result = IS_AGGREGATE_ERROR ? new OriginalError(a) : new OriginalError();
	    if (message !== undefined) createNonEnumerableProperty$a(result, 'message', message);
	    if (ERROR_STACK_INSTALLABLE$2) createNonEnumerableProperty$a(result, 'stack', clearErrorStack$3(result.stack, 2));
	    if (this && isPrototypeOf$9(OriginalErrorPrototype, this)) inheritIfRequired$5(result, this, WrappedError);
	    if (arguments.length > OPTIONS_POSITION) installErrorCause$1(result, arguments[OPTIONS_POSITION]);
	    return result;
	  });
	  WrappedError.prototype = OriginalErrorPrototype;

	  if (ERROR_NAME !== 'Error') {
	    if (setPrototypeOf$7) setPrototypeOf$7(WrappedError, BaseError);else copyConstructorProperties$1(WrappedError, BaseError, {
	      name: true
	    });
	  }

	  copyConstructorProperties$1(WrappedError, OriginalError);
	  try {
	    // Safari 13- bug: WebAssembly errors does not have a proper `.name`
	    if (OriginalErrorPrototype.name !== ERROR_NAME) {
	      createNonEnumerableProperty$a(OriginalErrorPrototype, 'name', ERROR_NAME);
	    }

	    OriginalErrorPrototype.constructor = WrappedError;
	  } catch (error) {
	    /* empty */
	  }
	  return WrappedError;
	};

	/* eslint-disable no-unused-vars -- required for functions `.length` */
	var $$2d = _export;
	var global$18 = global$1B;
	var apply$9 = functionApply$1;
	var wrapErrorConstructorWithCause$1 = wrapErrorConstructorWithCause$2;
	var WEB_ASSEMBLY = 'WebAssembly';
	var WebAssembly$1 = global$18[WEB_ASSEMBLY];
	var FORCED$q = Error('e', {
	  cause: 7
	}).cause !== 7;

	var exportGlobalErrorCauseWrapper = function exportGlobalErrorCauseWrapper(ERROR_NAME, wrapper) {
	  var O = {};
	  O[ERROR_NAME] = wrapErrorConstructorWithCause$1(ERROR_NAME, wrapper, FORCED$q);
	  $$2d({
	    global: true,
	    forced: FORCED$q
	  }, O);
	};

	var exportWebAssemblyErrorCauseWrapper = function exportWebAssemblyErrorCauseWrapper(ERROR_NAME, wrapper) {
	  if (WebAssembly$1 && WebAssembly$1[ERROR_NAME]) {
	    var O = {};
	    O[ERROR_NAME] = wrapErrorConstructorWithCause$1(WEB_ASSEMBLY + '.' + ERROR_NAME, wrapper, FORCED$q);
	    $$2d({
	      target: WEB_ASSEMBLY,
	      stat: true,
	      forced: FORCED$q
	    }, O);
	  }
	}; // https://github.com/tc39/proposal-error-cause


	exportGlobalErrorCauseWrapper('Error', function (init) {
	  return function Error(message) {
	    return apply$9(init, this, arguments);
	  };
	});
	exportGlobalErrorCauseWrapper('EvalError', function (init) {
	  return function EvalError(message) {
	    return apply$9(init, this, arguments);
	  };
	});
	exportGlobalErrorCauseWrapper('RangeError', function (init) {
	  return function RangeError(message) {
	    return apply$9(init, this, arguments);
	  };
	});
	exportGlobalErrorCauseWrapper('ReferenceError', function (init) {
	  return function ReferenceError(message) {
	    return apply$9(init, this, arguments);
	  };
	});
	exportGlobalErrorCauseWrapper('SyntaxError', function (init) {
	  return function SyntaxError(message) {
	    return apply$9(init, this, arguments);
	  };
	});
	exportGlobalErrorCauseWrapper('TypeError', function (init) {
	  return function TypeError(message) {
	    return apply$9(init, this, arguments);
	  };
	});
	exportGlobalErrorCauseWrapper('URIError', function (init) {
	  return function URIError(message) {
	    return apply$9(init, this, arguments);
	  };
	});
	exportWebAssemblyErrorCauseWrapper('CompileError', function (init) {
	  return function CompileError(message) {
	    return apply$9(init, this, arguments);
	  };
	});
	exportWebAssemblyErrorCauseWrapper('LinkError', function (init) {
	  return function LinkError(message) {
	    return apply$9(init, this, arguments);
	  };
	});
	exportWebAssemblyErrorCauseWrapper('RuntimeError', function (init) {
	  return function RuntimeError(message) {
	    return apply$9(init, this, arguments);
	  };
	});

	var fails$Z = fails$18;
	var correctPrototypeGetter = !fails$Z(function () {
	  function F() {
	    /* empty */
	  }

	  F.prototype.constructor = null; // eslint-disable-next-line es/no-object-getprototypeof -- required for testing

	  return Object.getPrototypeOf(new F()) !== F.prototype;
	});

	var global$17 = global$1B;
	var hasOwn$g = hasOwnProperty_1;
	var isCallable$e = isCallable$u;
	var toObject$k = toObject$o;
	var sharedKey = sharedKey$4;
	var CORRECT_PROTOTYPE_GETTER$2 = correctPrototypeGetter;
	var IE_PROTO = sharedKey('IE_PROTO');
	var Object$2 = global$17.Object;
	var ObjectPrototype$3 = Object$2.prototype; // `Object.getPrototypeOf` method
	// https://tc39.es/ecma262/#sec-object.getprototypeof

	var objectGetPrototypeOf$1 = CORRECT_PROTOTYPE_GETTER$2 ? Object$2.getPrototypeOf : function (O) {
	  var object = toObject$k(O);
	  if (hasOwn$g(object, IE_PROTO)) return object[IE_PROTO];
	  var constructor = object.constructor;

	  if (isCallable$e(constructor) && object instanceof constructor) {
	    return constructor.prototype;
	  }

	  return object instanceof Object$2 ? ObjectPrototype$3 : null;
	};

	var iterators = {};

	var wellKnownSymbol$q = wellKnownSymbol$y;
	var Iterators$4 = iterators;
	var ITERATOR$a = wellKnownSymbol$q('iterator');
	var ArrayPrototype$1 = Array.prototype; // check on default Array iterator

	var isArrayIteratorMethod$3 = function isArrayIteratorMethod(it) {
	  return it !== undefined && (Iterators$4.Array === it || ArrayPrototype$1[ITERATOR$a] === it);
	};

	var classof$e = classof$i;
	var getMethod$7 = getMethod$9;
	var Iterators$3 = iterators;
	var wellKnownSymbol$p = wellKnownSymbol$y;
	var ITERATOR$9 = wellKnownSymbol$p('iterator');

	var getIteratorMethod$5 = function getIteratorMethod(it) {
	  if (it != undefined) return getMethod$7(it, ITERATOR$9) || getMethod$7(it, '@@iterator') || Iterators$3[classof$e(it)];
	};

	var global$16 = global$1B;
	var call$p = functionCall;
	var aCallable$d = aCallable$g;
	var anObject$u = anObject$B;
	var tryToString$3 = tryToString$5;
	var getIteratorMethod$4 = getIteratorMethod$5;
	var TypeError$m = global$16.TypeError;

	var getIterator$4 = function getIterator(argument, usingIterator) {
	  var iteratorMethod = arguments.length < 2 ? getIteratorMethod$4(argument) : usingIterator;
	  if (aCallable$d(iteratorMethod)) return anObject$u(call$p(iteratorMethod, argument));
	  throw TypeError$m(tryToString$3(argument) + ' is not iterable');
	};

	var call$o = functionCall;
	var anObject$t = anObject$B;
	var getMethod$6 = getMethod$9;

	var iteratorClose$2 = function iteratorClose(iterator, kind, value) {
	  var innerResult, innerError;
	  anObject$t(iterator);

	  try {
	    innerResult = getMethod$6(iterator, 'return');

	    if (!innerResult) {
	      if (kind === 'throw') throw value;
	      return value;
	    }

	    innerResult = call$o(innerResult, iterator);
	  } catch (error) {
	    innerError = true;
	    innerResult = error;
	  }

	  if (kind === 'throw') throw value;
	  if (innerError) throw innerResult;
	  anObject$t(innerResult);
	  return value;
	};

	var global$15 = global$1B;
	var bind$a = functionBindContext;
	var call$n = functionCall;
	var anObject$s = anObject$B;
	var tryToString$2 = tryToString$5;
	var isArrayIteratorMethod$2 = isArrayIteratorMethod$3;
	var lengthOfArrayLike$j = lengthOfArrayLike$n;
	var isPrototypeOf$8 = objectIsPrototypeOf;
	var getIterator$3 = getIterator$4;
	var getIteratorMethod$3 = getIteratorMethod$5;
	var iteratorClose$1 = iteratorClose$2;
	var TypeError$l = global$15.TypeError;

	var Result = function Result(stopped, result) {
	  this.stopped = stopped;
	  this.result = result;
	};

	var ResultPrototype = Result.prototype;

	var iterate$9 = function iterate(iterable, unboundFunction, options) {
	  var that = options && options.that;
	  var AS_ENTRIES = !!(options && options.AS_ENTRIES);
	  var IS_ITERATOR = !!(options && options.IS_ITERATOR);
	  var INTERRUPTED = !!(options && options.INTERRUPTED);
	  var fn = bind$a(unboundFunction, that);
	  var iterator, iterFn, index, length, result, next, step;

	  var stop = function stop(condition) {
	    if (iterator) iteratorClose$1(iterator, 'normal', condition);
	    return new Result(true, condition);
	  };

	  var callFn = function callFn(value) {
	    if (AS_ENTRIES) {
	      anObject$s(value);
	      return INTERRUPTED ? fn(value[0], value[1], stop) : fn(value[0], value[1]);
	    }

	    return INTERRUPTED ? fn(value, stop) : fn(value);
	  };

	  if (IS_ITERATOR) {
	    iterator = iterable;
	  } else {
	    iterFn = getIteratorMethod$3(iterable);
	    if (!iterFn) throw TypeError$l(tryToString$2(iterable) + ' is not iterable'); // optimisation for array iterators

	    if (isArrayIteratorMethod$2(iterFn)) {
	      for (index = 0, length = lengthOfArrayLike$j(iterable); length > index; index++) {
	        result = callFn(iterable[index]);
	        if (result && isPrototypeOf$8(ResultPrototype, result)) return result;
	      }

	      return new Result(false);
	    }

	    iterator = getIterator$3(iterable, iterFn);
	  }

	  next = iterator.next;

	  while (!(step = call$n(next, iterator)).done) {
	    try {
	      result = callFn(step.value);
	    } catch (error) {
	      iteratorClose$1(iterator, 'throw', error);
	    }

	    if (_typeof(result) == 'object' && result && isPrototypeOf$8(ResultPrototype, result)) return result;
	  }

	  return new Result(false);
	};

	var $$2c = _export;
	var global$14 = global$1B;
	var isPrototypeOf$7 = objectIsPrototypeOf;
	var getPrototypeOf$9 = objectGetPrototypeOf$1;
	var setPrototypeOf$6 = objectSetPrototypeOf$1;
	var copyConstructorProperties = copyConstructorProperties$4;
	var create$a = objectCreate;
	var createNonEnumerableProperty$9 = createNonEnumerableProperty$f;
	var createPropertyDescriptor$6 = createPropertyDescriptor$c;
	var clearErrorStack$2 = clearErrorStack$4;
	var installErrorCause = installErrorCause$2;
	var iterate$8 = iterate$9;
	var normalizeStringArgument$3 = normalizeStringArgument$5;
	var wellKnownSymbol$o = wellKnownSymbol$y;
	var ERROR_STACK_INSTALLABLE$1 = errorStackInstallable;
	var TO_STRING_TAG$2 = wellKnownSymbol$o('toStringTag');
	var Error$5 = global$14.Error;
	var push$a = [].push;

	var $AggregateError$1 = function AggregateError(errors, message
	/* , options */
	) {
	  var options = arguments.length > 2 ? arguments[2] : undefined;
	  var isInstance = isPrototypeOf$7(AggregateErrorPrototype, this);
	  var that;

	  if (setPrototypeOf$6) {
	    that = setPrototypeOf$6(new Error$5(), isInstance ? getPrototypeOf$9(this) : AggregateErrorPrototype);
	  } else {
	    that = isInstance ? this : create$a(AggregateErrorPrototype);
	    createNonEnumerableProperty$9(that, TO_STRING_TAG$2, 'Error');
	  }

	  if (message !== undefined) createNonEnumerableProperty$9(that, 'message', normalizeStringArgument$3(message));
	  if (ERROR_STACK_INSTALLABLE$1) createNonEnumerableProperty$9(that, 'stack', clearErrorStack$2(that.stack, 1));
	  installErrorCause(that, options);
	  var errorsArray = [];
	  iterate$8(errors, push$a, {
	    that: errorsArray
	  });
	  createNonEnumerableProperty$9(that, 'errors', errorsArray);
	  return that;
	};

	if (setPrototypeOf$6) setPrototypeOf$6($AggregateError$1, Error$5);else copyConstructorProperties($AggregateError$1, Error$5, {
	  name: true
	});
	var AggregateErrorPrototype = $AggregateError$1.prototype = create$a(Error$5.prototype, {
	  constructor: createPropertyDescriptor$6(1, $AggregateError$1),
	  message: createPropertyDescriptor$6(1, ''),
	  name: createPropertyDescriptor$6(1, 'AggregateError')
	}); // `AggregateError` constructor
	// https://tc39.es/ecma262/#sec-aggregate-error-constructor

	$$2c({
	  global: true
	}, {
	  AggregateError: $AggregateError$1
	});

	var $$2b = _export;
	var getBuiltIn$b = getBuiltIn$j;
	var apply$8 = functionApply$1;
	var fails$Y = fails$18;
	var wrapErrorConstructorWithCause = wrapErrorConstructorWithCause$2;
	var AGGREGATE_ERROR = 'AggregateError';
	var $AggregateError = getBuiltIn$b(AGGREGATE_ERROR);
	var FORCED$p = !fails$Y(function () {
	  return $AggregateError([1]).errors[0] !== 1;
	}) && fails$Y(function () {
	  return $AggregateError([1], AGGREGATE_ERROR, {
	    cause: 7
	  }).cause !== 7;
	}); // https://github.com/tc39/proposal-error-cause

	$$2b({
	  global: true,
	  forced: FORCED$p
	}, {
	  AggregateError: wrapErrorConstructorWithCause(AGGREGATE_ERROR, function (init) {
	    // eslint-disable-next-line no-unused-vars -- required for functions `.length`
	    return function AggregateError(errors, message) {
	      return apply$8(init, this, arguments);
	    };
	  }, FORCED$p, true)
	});

	var wellKnownSymbol$n = wellKnownSymbol$y;
	var create$9 = objectCreate;
	var definePropertyModule$7 = objectDefineProperty;
	var UNSCOPABLES = wellKnownSymbol$n('unscopables');
	var ArrayPrototype = Array.prototype; // Array.prototype[@@unscopables]
	// https://tc39.es/ecma262/#sec-array.prototype-@@unscopables

	if (ArrayPrototype[UNSCOPABLES] == undefined) {
	  definePropertyModule$7.f(ArrayPrototype, UNSCOPABLES, {
	    configurable: true,
	    value: create$9(null)
	  });
	} // add a key to Array.prototype[@@unscopables]


	var addToUnscopables$9 = function addToUnscopables(key) {
	  ArrayPrototype[UNSCOPABLES][key] = true;
	};

	var $$2a = _export;
	var toObject$j = toObject$o;
	var lengthOfArrayLike$i = lengthOfArrayLike$n;
	var toIntegerOrInfinity$d = toIntegerOrInfinity$g;
	var addToUnscopables$8 = addToUnscopables$9; // `Array.prototype.at` method
	// https://github.com/tc39/proposal-relative-indexing-method

	$$2a({
	  target: 'Array',
	  proto: true
	}, {
	  at: function at(index) {
	    var O = toObject$j(this);
	    var len = lengthOfArrayLike$i(O);
	    var relativeIndex = toIntegerOrInfinity$d(index);
	    var k = relativeIndex >= 0 ? relativeIndex : len + relativeIndex;
	    return k < 0 || k >= len ? undefined : O[k];
	  }
	});
	addToUnscopables$8('at');

	var fails$X = fails$18;
	var wellKnownSymbol$m = wellKnownSymbol$y;
	var V8_VERSION$2 = engineV8Version;
	var SPECIES$5 = wellKnownSymbol$m('species');

	var arrayMethodHasSpeciesSupport$5 = function arrayMethodHasSpeciesSupport(METHOD_NAME) {
	  // We can't use this feature detection in V8 since it causes
	  // deoptimization and serious performance degradation
	  // https://github.com/zloirock/core-js/issues/677
	  return V8_VERSION$2 >= 51 || !fails$X(function () {
	    var array = [];
	    var constructor = array.constructor = {};

	    constructor[SPECIES$5] = function () {
	      return {
	        foo: 1
	      };
	    };

	    return array[METHOD_NAME](Boolean).foo !== 1;
	  });
	};

	var $$29 = _export;
	var global$13 = global$1B;
	var fails$W = fails$18;
	var isArray$2 = isArray$5;
	var isObject$p = isObject$z;
	var toObject$i = toObject$o;
	var lengthOfArrayLike$h = lengthOfArrayLike$n;
	var createProperty$7 = createProperty$9;
	var arraySpeciesCreate$3 = arraySpeciesCreate$5;
	var arrayMethodHasSpeciesSupport$4 = arrayMethodHasSpeciesSupport$5;
	var wellKnownSymbol$l = wellKnownSymbol$y;
	var V8_VERSION$1 = engineV8Version;
	var IS_CONCAT_SPREADABLE = wellKnownSymbol$l('isConcatSpreadable');
	var MAX_SAFE_INTEGER$1 = 0x1FFFFFFFFFFFFF;
	var MAXIMUM_ALLOWED_INDEX_EXCEEDED = 'Maximum allowed index exceeded';
	var TypeError$k = global$13.TypeError; // We can't use this feature detection in V8 since it causes
	// deoptimization and serious performance degradation
	// https://github.com/zloirock/core-js/issues/679

	var IS_CONCAT_SPREADABLE_SUPPORT = V8_VERSION$1 >= 51 || !fails$W(function () {
	  var array = [];
	  array[IS_CONCAT_SPREADABLE] = false;
	  return array.concat()[0] !== array;
	});
	var SPECIES_SUPPORT = arrayMethodHasSpeciesSupport$4('concat');

	var isConcatSpreadable = function isConcatSpreadable(O) {
	  if (!isObject$p(O)) return false;
	  var spreadable = O[IS_CONCAT_SPREADABLE];
	  return spreadable !== undefined ? !!spreadable : isArray$2(O);
	};

	var FORCED$o = !IS_CONCAT_SPREADABLE_SUPPORT || !SPECIES_SUPPORT; // `Array.prototype.concat` method
	// https://tc39.es/ecma262/#sec-array.prototype.concat
	// with adding support of @@isConcatSpreadable and @@species

	$$29({
	  target: 'Array',
	  proto: true,
	  forced: FORCED$o
	}, {
	  // eslint-disable-next-line no-unused-vars -- required for `.length`
	  concat: function concat(arg) {
	    var O = toObject$i(this);
	    var A = arraySpeciesCreate$3(O, 0);
	    var n = 0;
	    var i, k, length, len, E;

	    for (i = -1, length = arguments.length; i < length; i++) {
	      E = i === -1 ? O : arguments[i];

	      if (isConcatSpreadable(E)) {
	        len = lengthOfArrayLike$h(E);
	        if (n + len > MAX_SAFE_INTEGER$1) throw TypeError$k(MAXIMUM_ALLOWED_INDEX_EXCEEDED);

	        for (k = 0; k < len; k++, n++) {
	          if (k in E) createProperty$7(A, n, E[k]);
	        }
	      } else {
	        if (n >= MAX_SAFE_INTEGER$1) throw TypeError$k(MAXIMUM_ALLOWED_INDEX_EXCEEDED);
	        createProperty$7(A, n++, E);
	      }
	    }

	    A.length = n;
	    return A;
	  }
	});

	var toObject$h = toObject$o;
	var toAbsoluteIndex$5 = toAbsoluteIndex$8;
	var lengthOfArrayLike$g = lengthOfArrayLike$n;
	var min$7 = Math.min; // `Array.prototype.copyWithin` method implementation
	// https://tc39.es/ecma262/#sec-array.prototype.copywithin
	// eslint-disable-next-line es/no-array-prototype-copywithin -- safe

	var arrayCopyWithin = [].copyWithin || function copyWithin(target
	/* = 0 */
	, start
	/* = 0, end = @length */
	) {
	  var O = toObject$h(this);
	  var len = lengthOfArrayLike$g(O);
	  var to = toAbsoluteIndex$5(target, len);
	  var from = toAbsoluteIndex$5(start, len);
	  var end = arguments.length > 2 ? arguments[2] : undefined;
	  var count = min$7((end === undefined ? len : toAbsoluteIndex$5(end, len)) - from, len - to);
	  var inc = 1;

	  if (from < to && to < from + count) {
	    inc = -1;
	    from += count - 1;
	    to += count - 1;
	  }

	  while (count-- > 0) {
	    if (from in O) O[to] = O[from];else delete O[to];
	    to += inc;
	    from += inc;
	  }

	  return O;
	};

	var $$28 = _export;
	var copyWithin = arrayCopyWithin;
	var addToUnscopables$7 = addToUnscopables$9; // `Array.prototype.copyWithin` method
	// https://tc39.es/ecma262/#sec-array.prototype.copywithin

	$$28({
	  target: 'Array',
	  proto: true
	}, {
	  copyWithin: copyWithin
	}); // https://tc39.es/ecma262/#sec-array.prototype-@@unscopables

	addToUnscopables$7('copyWithin');

	var toObject$g = toObject$o;
	var toAbsoluteIndex$4 = toAbsoluteIndex$8;
	var lengthOfArrayLike$f = lengthOfArrayLike$n; // `Array.prototype.fill` method implementation
	// https://tc39.es/ecma262/#sec-array.prototype.fill

	var arrayFill$1 = function fill(value
	/* , start = 0, end = @length */
	) {
	  var O = toObject$g(this);
	  var length = lengthOfArrayLike$f(O);
	  var argumentsLength = arguments.length;
	  var index = toAbsoluteIndex$4(argumentsLength > 1 ? arguments[1] : undefined, length);
	  var end = argumentsLength > 2 ? arguments[2] : undefined;
	  var endPos = end === undefined ? length : toAbsoluteIndex$4(end, length);

	  while (endPos > index) {
	    O[index++] = value;
	  }

	  return O;
	};

	var $$27 = _export;
	var fill$1 = arrayFill$1;
	var addToUnscopables$6 = addToUnscopables$9; // `Array.prototype.fill` method
	// https://tc39.es/ecma262/#sec-array.prototype.fill

	$$27({
	  target: 'Array',
	  proto: true
	}, {
	  fill: fill$1
	}); // https://tc39.es/ecma262/#sec-array.prototype-@@unscopables

	addToUnscopables$6('fill');

	var $$26 = _export;
	var $filter$1 = arrayIteration.filter;
	var arrayMethodHasSpeciesSupport$3 = arrayMethodHasSpeciesSupport$5;
	var HAS_SPECIES_SUPPORT$3 = arrayMethodHasSpeciesSupport$3('filter'); // `Array.prototype.filter` method
	// https://tc39.es/ecma262/#sec-array.prototype.filter
	// with adding support of @@species

	$$26({
	  target: 'Array',
	  proto: true,
	  forced: !HAS_SPECIES_SUPPORT$3
	}, {
	  filter: function filter(callbackfn
	  /* , thisArg */
	  ) {
	    return $filter$1(this, callbackfn, arguments.length > 1 ? arguments[1] : undefined);
	  }
	});

	var $$25 = _export;
	var $find$1 = arrayIteration.find;
	var addToUnscopables$5 = addToUnscopables$9;
	var FIND = 'find';
	var SKIPS_HOLES$1 = true; // Shouldn't skip holes

	if (FIND in []) Array(1)[FIND](function () {
	  SKIPS_HOLES$1 = false;
	}); // `Array.prototype.find` method
	// https://tc39.es/ecma262/#sec-array.prototype.find

	$$25({
	  target: 'Array',
	  proto: true,
	  forced: SKIPS_HOLES$1
	}, {
	  find: function find(callbackfn
	  /* , that = undefined */
	  ) {
	    return $find$1(this, callbackfn, arguments.length > 1 ? arguments[1] : undefined);
	  }
	}); // https://tc39.es/ecma262/#sec-array.prototype-@@unscopables

	addToUnscopables$5(FIND);

	var $$24 = _export;
	var $findIndex$1 = arrayIteration.findIndex;
	var addToUnscopables$4 = addToUnscopables$9;
	var FIND_INDEX = 'findIndex';
	var SKIPS_HOLES = true; // Shouldn't skip holes

	if (FIND_INDEX in []) Array(1)[FIND_INDEX](function () {
	  SKIPS_HOLES = false;
	}); // `Array.prototype.findIndex` method
	// https://tc39.es/ecma262/#sec-array.prototype.findindex

	$$24({
	  target: 'Array',
	  proto: true,
	  forced: SKIPS_HOLES
	}, {
	  findIndex: function findIndex(callbackfn
	  /* , that = undefined */
	  ) {
	    return $findIndex$1(this, callbackfn, arguments.length > 1 ? arguments[1] : undefined);
	  }
	}); // https://tc39.es/ecma262/#sec-array.prototype-@@unscopables

	addToUnscopables$4(FIND_INDEX);

	var global$12 = global$1B;
	var isArray$1 = isArray$5;
	var lengthOfArrayLike$e = lengthOfArrayLike$n;
	var bind$9 = functionBindContext;
	var TypeError$j = global$12.TypeError; // `FlattenIntoArray` abstract operation
	// https://tc39.github.io/proposal-flatMap/#sec-FlattenIntoArray

	var flattenIntoArray$2 = function flattenIntoArray(target, original, source, sourceLen, start, depth, mapper, thisArg) {
	  var targetIndex = start;
	  var sourceIndex = 0;
	  var mapFn = mapper ? bind$9(mapper, thisArg) : false;
	  var element, elementLen;

	  while (sourceIndex < sourceLen) {
	    if (sourceIndex in source) {
	      element = mapFn ? mapFn(source[sourceIndex], sourceIndex, original) : source[sourceIndex];

	      if (depth > 0 && isArray$1(element)) {
	        elementLen = lengthOfArrayLike$e(element);
	        targetIndex = flattenIntoArray(target, original, element, elementLen, targetIndex, depth - 1) - 1;
	      } else {
	        if (targetIndex >= 0x1FFFFFFFFFFFFF) throw TypeError$j('Exceed the acceptable array length');
	        target[targetIndex] = element;
	      }

	      targetIndex++;
	    }

	    sourceIndex++;
	  }

	  return targetIndex;
	};

	var flattenIntoArray_1 = flattenIntoArray$2;

	var $$23 = _export;
	var flattenIntoArray$1 = flattenIntoArray_1;
	var toObject$f = toObject$o;
	var lengthOfArrayLike$d = lengthOfArrayLike$n;
	var toIntegerOrInfinity$c = toIntegerOrInfinity$g;
	var arraySpeciesCreate$2 = arraySpeciesCreate$5; // `Array.prototype.flat` method
	// https://tc39.es/ecma262/#sec-array.prototype.flat

	$$23({
	  target: 'Array',
	  proto: true
	}, {
	  flat: function
	    /* depthArg = 1 */
	  flat() {
	    var depthArg = arguments.length ? arguments[0] : undefined;
	    var O = toObject$f(this);
	    var sourceLen = lengthOfArrayLike$d(O);
	    var A = arraySpeciesCreate$2(O, 0);
	    A.length = flattenIntoArray$1(A, O, O, sourceLen, 0, depthArg === undefined ? 1 : toIntegerOrInfinity$c(depthArg));
	    return A;
	  }
	});

	var $$22 = _export;
	var flattenIntoArray = flattenIntoArray_1;
	var aCallable$c = aCallable$g;
	var toObject$e = toObject$o;
	var lengthOfArrayLike$c = lengthOfArrayLike$n;
	var arraySpeciesCreate$1 = arraySpeciesCreate$5; // `Array.prototype.flatMap` method
	// https://tc39.es/ecma262/#sec-array.prototype.flatmap

	$$22({
	  target: 'Array',
	  proto: true
	}, {
	  flatMap: function flatMap(callbackfn
	  /* , thisArg */
	  ) {
	    var O = toObject$e(this);
	    var sourceLen = lengthOfArrayLike$c(O);
	    var A;
	    aCallable$c(callbackfn);
	    A = arraySpeciesCreate$1(O, 0);
	    A.length = flattenIntoArray(A, O, O, sourceLen, 0, 1, callbackfn, arguments.length > 1 ? arguments[1] : undefined);
	    return A;
	  }
	});

	var anObject$r = anObject$B;
	var iteratorClose = iteratorClose$2; // call something on iterator step with safe closing on error

	var callWithSafeIterationClosing$1 = function callWithSafeIterationClosing(iterator, fn, value, ENTRIES) {
	  try {
	    return ENTRIES ? fn(anObject$r(value)[0], value[1]) : fn(value);
	  } catch (error) {
	    iteratorClose(iterator, 'throw', error);
	  }
	};

	var global$11 = global$1B;
	var bind$8 = functionBindContext;
	var call$m = functionCall;
	var toObject$d = toObject$o;
	var callWithSafeIterationClosing = callWithSafeIterationClosing$1;
	var isArrayIteratorMethod$1 = isArrayIteratorMethod$3;
	var isConstructor$4 = isConstructor$6;
	var lengthOfArrayLike$b = lengthOfArrayLike$n;
	var createProperty$6 = createProperty$9;
	var getIterator$2 = getIterator$4;
	var getIteratorMethod$2 = getIteratorMethod$5;
	var Array$7 = global$11.Array; // `Array.from` method implementation
	// https://tc39.es/ecma262/#sec-array.from

	var arrayFrom$1 = function from(arrayLike
	/* , mapfn = undefined, thisArg = undefined */
	) {
	  var O = toObject$d(arrayLike);
	  var IS_CONSTRUCTOR = isConstructor$4(this);
	  var argumentsLength = arguments.length;
	  var mapfn = argumentsLength > 1 ? arguments[1] : undefined;
	  var mapping = mapfn !== undefined;
	  if (mapping) mapfn = bind$8(mapfn, argumentsLength > 2 ? arguments[2] : undefined);
	  var iteratorMethod = getIteratorMethod$2(O);
	  var index = 0;
	  var length, result, step, iterator, next, value; // if the target is not iterable or it's an array with the default iterator - use a simple case

	  if (iteratorMethod && !(this == Array$7 && isArrayIteratorMethod$1(iteratorMethod))) {
	    iterator = getIterator$2(O, iteratorMethod);
	    next = iterator.next;
	    result = IS_CONSTRUCTOR ? new this() : [];

	    for (; !(step = call$m(next, iterator)).done; index++) {
	      value = mapping ? callWithSafeIterationClosing(iterator, mapfn, [step.value, index], true) : step.value;
	      createProperty$6(result, index, value);
	    }
	  } else {
	    length = lengthOfArrayLike$b(O);
	    result = IS_CONSTRUCTOR ? new this(length) : Array$7(length);

	    for (; length > index; index++) {
	      value = mapping ? mapfn(O[index], index) : O[index];
	      createProperty$6(result, index, value);
	    }
	  }

	  result.length = index;
	  return result;
	};

	var wellKnownSymbol$k = wellKnownSymbol$y;
	var ITERATOR$8 = wellKnownSymbol$k('iterator');
	var SAFE_CLOSING = false;

	try {
	  var called = 0;
	  var iteratorWithReturn = {
	    next: function next() {
	      return {
	        done: !!called++
	      };
	    },
	    'return': function _return() {
	      SAFE_CLOSING = true;
	    }
	  };

	  iteratorWithReturn[ITERATOR$8] = function () {
	    return this;
	  }; // eslint-disable-next-line es/no-array-from, no-throw-literal -- required for testing


	  Array.from(iteratorWithReturn, function () {
	    throw 2;
	  });
	} catch (error) {
	  /* empty */
	}

	var checkCorrectnessOfIteration$4 = function checkCorrectnessOfIteration(exec, SKIP_CLOSING) {
	  if (!SKIP_CLOSING && !SAFE_CLOSING) return false;
	  var ITERATION_SUPPORT = false;

	  try {
	    var object = {};

	    object[ITERATOR$8] = function () {
	      return {
	        next: function next() {
	          return {
	            done: ITERATION_SUPPORT = true
	          };
	        }
	      };
	    };

	    exec(object);
	  } catch (error) {
	    /* empty */
	  }

	  return ITERATION_SUPPORT;
	};

	var $$21 = _export;
	var from = arrayFrom$1;
	var checkCorrectnessOfIteration$3 = checkCorrectnessOfIteration$4;
	var INCORRECT_ITERATION$1 = !checkCorrectnessOfIteration$3(function (iterable) {
	  // eslint-disable-next-line es/no-array-from -- required for testing
	  Array.from(iterable);
	}); // `Array.from` method
	// https://tc39.es/ecma262/#sec-array.from

	$$21({
	  target: 'Array',
	  stat: true,
	  forced: INCORRECT_ITERATION$1
	}, {
	  from: from
	});

	var $$20 = _export;
	var $includes$1 = arrayIncludes.includes;
	var addToUnscopables$3 = addToUnscopables$9; // `Array.prototype.includes` method
	// https://tc39.es/ecma262/#sec-array.prototype.includes

	$$20({
	  target: 'Array',
	  proto: true
	}, {
	  includes: function includes(el
	  /* , fromIndex = 0 */
	  ) {
	    return $includes$1(this, el, arguments.length > 1 ? arguments[1] : undefined);
	  }
	}); // https://tc39.es/ecma262/#sec-array.prototype-@@unscopables

	addToUnscopables$3('includes');

	var fails$V = fails$18;

	var arrayMethodIsStrict$7 = function arrayMethodIsStrict(METHOD_NAME, argument) {
	  var method = [][METHOD_NAME];
	  return !!method && fails$V(function () {
	    // eslint-disable-next-line no-useless-call,no-throw-literal -- required for testing
	    method.call(null, argument || function () {
	      throw 1;
	    }, 1);
	  });
	};

	/* eslint-disable es/no-array-prototype-indexof -- required for testing */


	var $$1$ = _export;
	var uncurryThis$L = functionUncurryThis;
	var $IndexOf = arrayIncludes.indexOf;
	var arrayMethodIsStrict$6 = arrayMethodIsStrict$7;
	var un$IndexOf = uncurryThis$L([].indexOf);
	var NEGATIVE_ZERO$1 = !!un$IndexOf && 1 / un$IndexOf([1], 1, -0) < 0;
	var STRICT_METHOD$6 = arrayMethodIsStrict$6('indexOf'); // `Array.prototype.indexOf` method
	// https://tc39.es/ecma262/#sec-array.prototype.indexof

	$$1$({
	  target: 'Array',
	  proto: true,
	  forced: NEGATIVE_ZERO$1 || !STRICT_METHOD$6
	}, {
	  indexOf: function indexOf(searchElement
	  /* , fromIndex = 0 */
	  ) {
	    var fromIndex = arguments.length > 1 ? arguments[1] : undefined;
	    return NEGATIVE_ZERO$1 // convert -0 to +0
	    ? un$IndexOf(this, searchElement, fromIndex) || 0 : $IndexOf(this, searchElement, fromIndex);
	  }
	});

	var fails$U = fails$18;
	var isCallable$d = isCallable$u;
	var getPrototypeOf$8 = objectGetPrototypeOf$1;
	var redefine$g = redefine$j.exports;
	var wellKnownSymbol$j = wellKnownSymbol$y;
	var ITERATOR$7 = wellKnownSymbol$j('iterator');
	var BUGGY_SAFARI_ITERATORS$1 = false; // `%IteratorPrototype%` object
	// https://tc39.es/ecma262/#sec-%iteratorprototype%-object

	var IteratorPrototype$2, PrototypeOfArrayIteratorPrototype, arrayIterator;
	/* eslint-disable es/no-array-prototype-keys -- safe */

	if ([].keys) {
	  arrayIterator = [].keys(); // Safari 8 has buggy iterators w/o `next`

	  if (!('next' in arrayIterator)) BUGGY_SAFARI_ITERATORS$1 = true;else {
	    PrototypeOfArrayIteratorPrototype = getPrototypeOf$8(getPrototypeOf$8(arrayIterator));
	    if (PrototypeOfArrayIteratorPrototype !== Object.prototype) IteratorPrototype$2 = PrototypeOfArrayIteratorPrototype;
	  }
	}

	var NEW_ITERATOR_PROTOTYPE = IteratorPrototype$2 == undefined || fails$U(function () {
	  var test = {}; // FF44- legacy iterators case

	  return IteratorPrototype$2[ITERATOR$7].call(test) !== test;
	});
	if (NEW_ITERATOR_PROTOTYPE) IteratorPrototype$2 = {}; // `%IteratorPrototype%[@@iterator]()` method
	// https://tc39.es/ecma262/#sec-%iteratorprototype%-@@iterator

	if (!isCallable$d(IteratorPrototype$2[ITERATOR$7])) {
	  redefine$g(IteratorPrototype$2, ITERATOR$7, function () {
	    return this;
	  });
	}

	var iteratorsCore = {
	  IteratorPrototype: IteratorPrototype$2,
	  BUGGY_SAFARI_ITERATORS: BUGGY_SAFARI_ITERATORS$1
	};

	var IteratorPrototype$1 = iteratorsCore.IteratorPrototype;
	var create$8 = objectCreate;
	var createPropertyDescriptor$5 = createPropertyDescriptor$c;
	var setToStringTag$a = setToStringTag$c;
	var Iterators$2 = iterators;

	var returnThis$1 = function returnThis() {
	  return this;
	};

	var createIteratorConstructor$3 = function createIteratorConstructor(IteratorConstructor, NAME, next, ENUMERABLE_NEXT) {
	  var TO_STRING_TAG = NAME + ' Iterator';
	  IteratorConstructor.prototype = create$8(IteratorPrototype$1, {
	    next: createPropertyDescriptor$5(+!ENUMERABLE_NEXT, next)
	  });
	  setToStringTag$a(IteratorConstructor, TO_STRING_TAG, false);
	  Iterators$2[TO_STRING_TAG] = returnThis$1;
	  return IteratorConstructor;
	};

	var $$1_ = _export;
	var call$l = functionCall;
	var FunctionName$1 = functionName;
	var isCallable$c = isCallable$u;
	var createIteratorConstructor$2 = createIteratorConstructor$3;
	var getPrototypeOf$7 = objectGetPrototypeOf$1;
	var setPrototypeOf$5 = objectSetPrototypeOf$1;
	var setToStringTag$9 = setToStringTag$c;
	var createNonEnumerableProperty$8 = createNonEnumerableProperty$f;
	var redefine$f = redefine$j.exports;
	var wellKnownSymbol$i = wellKnownSymbol$y;
	var Iterators$1 = iterators;
	var IteratorsCore = iteratorsCore;
	var PROPER_FUNCTION_NAME$3 = FunctionName$1.PROPER;
	var CONFIGURABLE_FUNCTION_NAME$1 = FunctionName$1.CONFIGURABLE;
	var IteratorPrototype = IteratorsCore.IteratorPrototype;
	var BUGGY_SAFARI_ITERATORS = IteratorsCore.BUGGY_SAFARI_ITERATORS;
	var ITERATOR$6 = wellKnownSymbol$i('iterator');
	var KEYS = 'keys';
	var VALUES = 'values';
	var ENTRIES = 'entries';

	var returnThis = function returnThis() {
	  return this;
	};

	var defineIterator$3 = function defineIterator(Iterable, NAME, IteratorConstructor, next, DEFAULT, IS_SET, FORCED) {
	  createIteratorConstructor$2(IteratorConstructor, NAME, next);

	  var getIterationMethod = function getIterationMethod(KIND) {
	    if (KIND === DEFAULT && defaultIterator) return defaultIterator;
	    if (!BUGGY_SAFARI_ITERATORS && KIND in IterablePrototype) return IterablePrototype[KIND];

	    switch (KIND) {
	      case KEYS:
	        return function keys() {
	          return new IteratorConstructor(this, KIND);
	        };

	      case VALUES:
	        return function values() {
	          return new IteratorConstructor(this, KIND);
	        };

	      case ENTRIES:
	        return function entries() {
	          return new IteratorConstructor(this, KIND);
	        };
	    }

	    return function () {
	      return new IteratorConstructor(this);
	    };
	  };

	  var TO_STRING_TAG = NAME + ' Iterator';
	  var INCORRECT_VALUES_NAME = false;
	  var IterablePrototype = Iterable.prototype;
	  var nativeIterator = IterablePrototype[ITERATOR$6] || IterablePrototype['@@iterator'] || DEFAULT && IterablePrototype[DEFAULT];
	  var defaultIterator = !BUGGY_SAFARI_ITERATORS && nativeIterator || getIterationMethod(DEFAULT);
	  var anyNativeIterator = NAME == 'Array' ? IterablePrototype.entries || nativeIterator : nativeIterator;
	  var CurrentIteratorPrototype, methods, KEY; // fix native

	  if (anyNativeIterator) {
	    CurrentIteratorPrototype = getPrototypeOf$7(anyNativeIterator.call(new Iterable()));

	    if (CurrentIteratorPrototype !== Object.prototype && CurrentIteratorPrototype.next) {
	      if (getPrototypeOf$7(CurrentIteratorPrototype) !== IteratorPrototype) {
	        if (setPrototypeOf$5) {
	          setPrototypeOf$5(CurrentIteratorPrototype, IteratorPrototype);
	        } else if (!isCallable$c(CurrentIteratorPrototype[ITERATOR$6])) {
	          redefine$f(CurrentIteratorPrototype, ITERATOR$6, returnThis);
	        }
	      } // Set @@toStringTag to native iterators


	      setToStringTag$9(CurrentIteratorPrototype, TO_STRING_TAG, true);
	    }
	  } // fix Array.prototype.{ values, @@iterator }.name in V8 / FF


	  if (PROPER_FUNCTION_NAME$3 && DEFAULT == VALUES && nativeIterator && nativeIterator.name !== VALUES) {
	    if (CONFIGURABLE_FUNCTION_NAME$1) {
	      createNonEnumerableProperty$8(IterablePrototype, 'name', VALUES);
	    } else {
	      INCORRECT_VALUES_NAME = true;

	      defaultIterator = function values() {
	        return call$l(nativeIterator, this);
	      };
	    }
	  } // export additional methods


	  if (DEFAULT) {
	    methods = {
	      values: getIterationMethod(VALUES),
	      keys: IS_SET ? defaultIterator : getIterationMethod(KEYS),
	      entries: getIterationMethod(ENTRIES)
	    };
	    if (FORCED) for (KEY in methods) {
	      if (BUGGY_SAFARI_ITERATORS || INCORRECT_VALUES_NAME || !(KEY in IterablePrototype)) {
	        redefine$f(IterablePrototype, KEY, methods[KEY]);
	      }
	    } else $$1_({
	      target: NAME,
	      proto: true,
	      forced: BUGGY_SAFARI_ITERATORS || INCORRECT_VALUES_NAME
	    }, methods);
	  } // define iterator


	  if (IterablePrototype[ITERATOR$6] !== defaultIterator) {
	    redefine$f(IterablePrototype, ITERATOR$6, defaultIterator, {
	      name: DEFAULT
	    });
	  }

	  Iterators$1[NAME] = defaultIterator;
	  return methods;
	};

	var toIndexedObject$8 = toIndexedObject$f;
	var addToUnscopables$2 = addToUnscopables$9;
	var Iterators = iterators;
	var InternalStateModule$a = internalState;
	var defineProperty$d = objectDefineProperty.f;
	var defineIterator$2 = defineIterator$3;
	var DESCRIPTORS$q = descriptors;
	var ARRAY_ITERATOR = 'Array Iterator';
	var setInternalState$a = InternalStateModule$a.set;
	var getInternalState$9 = InternalStateModule$a.getterFor(ARRAY_ITERATOR); // `Array.prototype.entries` method
	// https://tc39.es/ecma262/#sec-array.prototype.entries
	// `Array.prototype.keys` method
	// https://tc39.es/ecma262/#sec-array.prototype.keys
	// `Array.prototype.values` method
	// https://tc39.es/ecma262/#sec-array.prototype.values
	// `Array.prototype[@@iterator]` method
	// https://tc39.es/ecma262/#sec-array.prototype-@@iterator
	// `CreateArrayIterator` internal method
	// https://tc39.es/ecma262/#sec-createarrayiterator

	var es_array_iterator = defineIterator$2(Array, 'Array', function (iterated, kind) {
	  setInternalState$a(this, {
	    type: ARRAY_ITERATOR,
	    target: toIndexedObject$8(iterated),
	    // target
	    index: 0,
	    // next index
	    kind: kind // kind

	  }); // `%ArrayIteratorPrototype%.next` method
	  // https://tc39.es/ecma262/#sec-%arrayiteratorprototype%.next
	}, function () {
	  var state = getInternalState$9(this);
	  var target = state.target;
	  var kind = state.kind;
	  var index = state.index++;

	  if (!target || index >= target.length) {
	    state.target = undefined;
	    return {
	      value: undefined,
	      done: true
	    };
	  }

	  if (kind == 'keys') return {
	    value: index,
	    done: false
	  };
	  if (kind == 'values') return {
	    value: target[index],
	    done: false
	  };
	  return {
	    value: [index, target[index]],
	    done: false
	  };
	}, 'values'); // argumentsList[@@iterator] is %ArrayProto_values%
	// https://tc39.es/ecma262/#sec-createunmappedargumentsobject
	// https://tc39.es/ecma262/#sec-createmappedargumentsobject

	var values = Iterators.Arguments = Iterators.Array; // https://tc39.es/ecma262/#sec-array.prototype-@@unscopables

	addToUnscopables$2('keys');
	addToUnscopables$2('values');
	addToUnscopables$2('entries'); // V8 ~ Chrome 45- bug

	if (DESCRIPTORS$q && values.name !== 'values') try {
	  defineProperty$d(values, 'name', {
	    value: 'values'
	  });
	} catch (error) {
	  /* empty */
	}

	var $$1Z = _export;
	var uncurryThis$K = functionUncurryThis;
	var IndexedObject$2 = indexedObject;
	var toIndexedObject$7 = toIndexedObject$f;
	var arrayMethodIsStrict$5 = arrayMethodIsStrict$7;
	var un$Join = uncurryThis$K([].join);
	var ES3_STRINGS = IndexedObject$2 != Object;
	var STRICT_METHOD$5 = arrayMethodIsStrict$5('join', ','); // `Array.prototype.join` method
	// https://tc39.es/ecma262/#sec-array.prototype.join

	$$1Z({
	  target: 'Array',
	  proto: true,
	  forced: ES3_STRINGS || !STRICT_METHOD$5
	}, {
	  join: function join(separator) {
	    return un$Join(toIndexedObject$7(this), separator === undefined ? ',' : separator);
	  }
	});

	/* eslint-disable es/no-array-prototype-lastindexof -- safe */


	var apply$7 = functionApply$1;
	var toIndexedObject$6 = toIndexedObject$f;
	var toIntegerOrInfinity$b = toIntegerOrInfinity$g;
	var lengthOfArrayLike$a = lengthOfArrayLike$n;
	var arrayMethodIsStrict$4 = arrayMethodIsStrict$7;
	var min$6 = Math.min;
	var $lastIndexOf$1 = [].lastIndexOf;
	var NEGATIVE_ZERO = !!$lastIndexOf$1 && 1 / [1].lastIndexOf(1, -0) < 0;
	var STRICT_METHOD$4 = arrayMethodIsStrict$4('lastIndexOf');
	var FORCED$n = NEGATIVE_ZERO || !STRICT_METHOD$4; // `Array.prototype.lastIndexOf` method implementation
	// https://tc39.es/ecma262/#sec-array.prototype.lastindexof

	var arrayLastIndexOf = FORCED$n ? function lastIndexOf(searchElement
	/* , fromIndex = @[*-1] */
	) {
	  // convert -0 to +0
	  if (NEGATIVE_ZERO) return apply$7($lastIndexOf$1, this, arguments) || 0;
	  var O = toIndexedObject$6(this);
	  var length = lengthOfArrayLike$a(O);
	  var index = length - 1;
	  if (arguments.length > 1) index = min$6(index, toIntegerOrInfinity$b(arguments[1]));
	  if (index < 0) index = length + index;

	  for (; index >= 0; index--) {
	    if (index in O && O[index] === searchElement) return index || 0;
	  }

	  return -1;
	} : $lastIndexOf$1;

	var $$1Y = _export;
	var lastIndexOf = arrayLastIndexOf; // `Array.prototype.lastIndexOf` method
	// https://tc39.es/ecma262/#sec-array.prototype.lastindexof
	// eslint-disable-next-line es/no-array-prototype-lastindexof -- required for testing

	$$1Y({
	  target: 'Array',
	  proto: true,
	  forced: lastIndexOf !== [].lastIndexOf
	}, {
	  lastIndexOf: lastIndexOf
	});

	var $$1X = _export;
	var $map$1 = arrayIteration.map;
	var arrayMethodHasSpeciesSupport$2 = arrayMethodHasSpeciesSupport$5;
	var HAS_SPECIES_SUPPORT$2 = arrayMethodHasSpeciesSupport$2('map'); // `Array.prototype.map` method
	// https://tc39.es/ecma262/#sec-array.prototype.map
	// with adding support of @@species

	$$1X({
	  target: 'Array',
	  proto: true,
	  forced: !HAS_SPECIES_SUPPORT$2
	}, {
	  map: function map(callbackfn
	  /* , thisArg */
	  ) {
	    return $map$1(this, callbackfn, arguments.length > 1 ? arguments[1] : undefined);
	  }
	});

	var $$1W = _export;
	var global$10 = global$1B;
	var fails$T = fails$18;
	var isConstructor$3 = isConstructor$6;
	var createProperty$5 = createProperty$9;
	var Array$6 = global$10.Array;
	var ISNT_GENERIC = fails$T(function () {
	  function F() {
	    /* empty */
	  }

	  return !(Array$6.of.call(F) instanceof F);
	}); // `Array.of` method
	// https://tc39.es/ecma262/#sec-array.of
	// WebKit Array.of isn't generic

	$$1W({
	  target: 'Array',
	  stat: true,
	  forced: ISNT_GENERIC
	}, {
	  of: function
	    /* ...args */
	  of() {
	    var index = 0;
	    var argumentsLength = arguments.length;
	    var result = new (isConstructor$3(this) ? this : Array$6)(argumentsLength);

	    while (argumentsLength > index) {
	      createProperty$5(result, index, arguments[index++]);
	    }

	    result.length = argumentsLength;
	    return result;
	  }
	});

	var global$$ = global$1B;
	var aCallable$b = aCallable$g;
	var toObject$c = toObject$o;
	var IndexedObject$1 = indexedObject;
	var lengthOfArrayLike$9 = lengthOfArrayLike$n;
	var TypeError$i = global$$.TypeError; // `Array.prototype.{ reduce, reduceRight }` methods implementation

	var createMethod$4 = function createMethod(IS_RIGHT) {
	  return function (that, callbackfn, argumentsLength, memo) {
	    aCallable$b(callbackfn);
	    var O = toObject$c(that);
	    var self = IndexedObject$1(O);
	    var length = lengthOfArrayLike$9(O);
	    var index = IS_RIGHT ? length - 1 : 0;
	    var i = IS_RIGHT ? -1 : 1;
	    if (argumentsLength < 2) while (true) {
	      if (index in self) {
	        memo = self[index];
	        index += i;
	        break;
	      }

	      index += i;

	      if (IS_RIGHT ? index < 0 : length <= index) {
	        throw TypeError$i('Reduce of empty array with no initial value');
	      }
	    }

	    for (; IS_RIGHT ? index >= 0 : length > index; index += i) {
	      if (index in self) {
	        memo = callbackfn(memo, self[index], index, O);
	      }
	    }

	    return memo;
	  };
	};

	var arrayReduce = {
	  // `Array.prototype.reduce` method
	  // https://tc39.es/ecma262/#sec-array.prototype.reduce
	  left: createMethod$4(false),
	  // `Array.prototype.reduceRight` method
	  // https://tc39.es/ecma262/#sec-array.prototype.reduceright
	  right: createMethod$4(true)
	};

	var classof$d = classofRaw$1;
	var global$_ = global$1B;
	var engineIsNode = classof$d(global$_.process) == 'process';

	var $$1V = _export;
	var $reduce$1 = arrayReduce.left;
	var arrayMethodIsStrict$3 = arrayMethodIsStrict$7;
	var CHROME_VERSION$1 = engineV8Version;
	var IS_NODE$6 = engineIsNode;
	var STRICT_METHOD$3 = arrayMethodIsStrict$3('reduce'); // Chrome 80-82 has a critical bug
	// https://bugs.chromium.org/p/chromium/issues/detail?id=1049982

	var CHROME_BUG$1 = !IS_NODE$6 && CHROME_VERSION$1 > 79 && CHROME_VERSION$1 < 83; // `Array.prototype.reduce` method
	// https://tc39.es/ecma262/#sec-array.prototype.reduce

	$$1V({
	  target: 'Array',
	  proto: true,
	  forced: !STRICT_METHOD$3 || CHROME_BUG$1
	}, {
	  reduce: function reduce(callbackfn
	  /* , initialValue */
	  ) {
	    var length = arguments.length;
	    return $reduce$1(this, callbackfn, length, length > 1 ? arguments[1] : undefined);
	  }
	});

	var $$1U = _export;
	var $reduceRight$1 = arrayReduce.right;
	var arrayMethodIsStrict$2 = arrayMethodIsStrict$7;
	var CHROME_VERSION = engineV8Version;
	var IS_NODE$5 = engineIsNode;
	var STRICT_METHOD$2 = arrayMethodIsStrict$2('reduceRight'); // Chrome 80-82 has a critical bug
	// https://bugs.chromium.org/p/chromium/issues/detail?id=1049982

	var CHROME_BUG = !IS_NODE$5 && CHROME_VERSION > 79 && CHROME_VERSION < 83; // `Array.prototype.reduceRight` method
	// https://tc39.es/ecma262/#sec-array.prototype.reduceright

	$$1U({
	  target: 'Array',
	  proto: true,
	  forced: !STRICT_METHOD$2 || CHROME_BUG
	}, {
	  reduceRight: function reduceRight(callbackfn
	  /* , initialValue */
	  ) {
	    return $reduceRight$1(this, callbackfn, arguments.length, arguments.length > 1 ? arguments[1] : undefined);
	  }
	});

	var $$1T = _export;
	var global$Z = global$1B;
	var isArray = isArray$5;
	var isConstructor$2 = isConstructor$6;
	var isObject$o = isObject$z;
	var toAbsoluteIndex$3 = toAbsoluteIndex$8;
	var lengthOfArrayLike$8 = lengthOfArrayLike$n;
	var toIndexedObject$5 = toIndexedObject$f;
	var createProperty$4 = createProperty$9;
	var wellKnownSymbol$h = wellKnownSymbol$y;
	var arrayMethodHasSpeciesSupport$1 = arrayMethodHasSpeciesSupport$5;
	var un$Slice = arraySlice$a;
	var HAS_SPECIES_SUPPORT$1 = arrayMethodHasSpeciesSupport$1('slice');
	var SPECIES$4 = wellKnownSymbol$h('species');
	var Array$5 = global$Z.Array;
	var max$4 = Math.max; // `Array.prototype.slice` method
	// https://tc39.es/ecma262/#sec-array.prototype.slice
	// fallback for not array-like ES3 strings and DOM objects

	$$1T({
	  target: 'Array',
	  proto: true,
	  forced: !HAS_SPECIES_SUPPORT$1
	}, {
	  slice: function slice(start, end) {
	    var O = toIndexedObject$5(this);
	    var length = lengthOfArrayLike$8(O);
	    var k = toAbsoluteIndex$3(start, length);
	    var fin = toAbsoluteIndex$3(end === undefined ? length : end, length); // inline `ArraySpeciesCreate` for usage native `Array#slice` where it's possible

	    var Constructor, result, n;

	    if (isArray(O)) {
	      Constructor = O.constructor; // cross-realm fallback

	      if (isConstructor$2(Constructor) && (Constructor === Array$5 || isArray(Constructor.prototype))) {
	        Constructor = undefined;
	      } else if (isObject$o(Constructor)) {
	        Constructor = Constructor[SPECIES$4];
	        if (Constructor === null) Constructor = undefined;
	      }

	      if (Constructor === Array$5 || Constructor === undefined) {
	        return un$Slice(O, k, fin);
	      }
	    }

	    result = new (Constructor === undefined ? Array$5 : Constructor)(max$4(fin - k, 0));

	    for (n = 0; k < fin; k++, n++) {
	      if (k in O) createProperty$4(result, n, O[k]);
	    }

	    result.length = n;
	    return result;
	  }
	});

	var arraySlice$8 = arraySliceSimple;
	var floor$a = Math.floor;

	var mergeSort = function mergeSort(array, comparefn) {
	  var length = array.length;
	  var middle = floor$a(length / 2);
	  return length < 8 ? insertionSort(array, comparefn) : merge$1(array, mergeSort(arraySlice$8(array, 0, middle), comparefn), mergeSort(arraySlice$8(array, middle), comparefn), comparefn);
	};

	var insertionSort = function insertionSort(array, comparefn) {
	  var length = array.length;
	  var i = 1;
	  var element, j;

	  while (i < length) {
	    j = i;
	    element = array[i];

	    while (j && comparefn(array[j - 1], element) > 0) {
	      array[j] = array[--j];
	    }

	    if (j !== i++) array[j] = element;
	  }

	  return array;
	};

	var merge$1 = function merge(array, left, right, comparefn) {
	  var llength = left.length;
	  var rlength = right.length;
	  var lindex = 0;
	  var rindex = 0;

	  while (lindex < llength || rindex < rlength) {
	    array[lindex + rindex] = lindex < llength && rindex < rlength ? comparefn(left[lindex], right[rindex]) <= 0 ? left[lindex++] : right[rindex++] : lindex < llength ? left[lindex++] : right[rindex++];
	  }

	  return array;
	};

	var arraySort$1 = mergeSort;

	var userAgent$5 = engineUserAgent;
	var firefox = userAgent$5.match(/firefox\/(\d+)/i);
	var engineFfVersion = !!firefox && +firefox[1];

	var UA = engineUserAgent;
	var engineIsIeOrEdge = /MSIE|Trident/.test(UA);

	var userAgent$4 = engineUserAgent;
	var webkit = userAgent$4.match(/AppleWebKit\/(\d+)\./);
	var engineWebkitVersion = !!webkit && +webkit[1];

	var $$1S = _export;
	var uncurryThis$J = functionUncurryThis;
	var aCallable$a = aCallable$g;
	var toObject$b = toObject$o;
	var lengthOfArrayLike$7 = lengthOfArrayLike$n;
	var toString$m = toString$p;
	var fails$S = fails$18;
	var internalSort$1 = arraySort$1;
	var arrayMethodIsStrict$1 = arrayMethodIsStrict$7;
	var FF$1 = engineFfVersion;
	var IE_OR_EDGE$1 = engineIsIeOrEdge;
	var V8$1 = engineV8Version;
	var WEBKIT$2 = engineWebkitVersion;
	var test = [];
	var un$Sort$1 = uncurryThis$J(test.sort);
	var push$9 = uncurryThis$J(test.push); // IE8-

	var FAILS_ON_UNDEFINED = fails$S(function () {
	  test.sort(undefined);
	}); // V8 bug

	var FAILS_ON_NULL = fails$S(function () {
	  test.sort(null);
	}); // Old WebKit

	var STRICT_METHOD$1 = arrayMethodIsStrict$1('sort');
	var STABLE_SORT$1 = !fails$S(function () {
	  // feature detection can be too slow, so check engines versions
	  if (V8$1) return V8$1 < 70;
	  if (FF$1 && FF$1 > 3) return;
	  if (IE_OR_EDGE$1) return true;
	  if (WEBKIT$2) return WEBKIT$2 < 603;
	  var result = '';
	  var code, chr, value, index; // generate an array with more 512 elements (Chakra and old V8 fails only in this case)

	  for (code = 65; code < 76; code++) {
	    chr = String.fromCharCode(code);

	    switch (code) {
	      case 66:
	      case 69:
	      case 70:
	      case 72:
	        value = 3;
	        break;

	      case 68:
	      case 71:
	        value = 4;
	        break;

	      default:
	        value = 2;
	    }

	    for (index = 0; index < 47; index++) {
	      test.push({
	        k: chr + index,
	        v: value
	      });
	    }
	  }

	  test.sort(function (a, b) {
	    return b.v - a.v;
	  });

	  for (index = 0; index < test.length; index++) {
	    chr = test[index].k.charAt(0);
	    if (result.charAt(result.length - 1) !== chr) result += chr;
	  }

	  return result !== 'DGBEFHACIJK';
	});
	var FORCED$m = FAILS_ON_UNDEFINED || !FAILS_ON_NULL || !STRICT_METHOD$1 || !STABLE_SORT$1;

	var getSortCompare$1 = function getSortCompare(comparefn) {
	  return function (x, y) {
	    if (y === undefined) return -1;
	    if (x === undefined) return 1;
	    if (comparefn !== undefined) return +comparefn(x, y) || 0;
	    return toString$m(x) > toString$m(y) ? 1 : -1;
	  };
	}; // `Array.prototype.sort` method
	// https://tc39.es/ecma262/#sec-array.prototype.sort


	$$1S({
	  target: 'Array',
	  proto: true,
	  forced: FORCED$m
	}, {
	  sort: function sort(comparefn) {
	    if (comparefn !== undefined) aCallable$a(comparefn);
	    var array = toObject$b(this);
	    if (STABLE_SORT$1) return comparefn === undefined ? un$Sort$1(array) : un$Sort$1(array, comparefn);
	    var items = [];
	    var arrayLength = lengthOfArrayLike$7(array);
	    var itemsLength, index;

	    for (index = 0; index < arrayLength; index++) {
	      if (index in array) push$9(items, array[index]);
	    }

	    internalSort$1(items, getSortCompare$1(comparefn));
	    itemsLength = items.length;
	    index = 0;

	    while (index < itemsLength) {
	      array[index] = items[index++];
	    }

	    while (index < arrayLength) {
	      delete array[index++];
	    }

	    return array;
	  }
	});

	var getBuiltIn$a = getBuiltIn$j;
	var definePropertyModule$6 = objectDefineProperty;
	var wellKnownSymbol$g = wellKnownSymbol$y;
	var DESCRIPTORS$p = descriptors;
	var SPECIES$3 = wellKnownSymbol$g('species');

	var setSpecies$6 = function setSpecies(CONSTRUCTOR_NAME) {
	  var Constructor = getBuiltIn$a(CONSTRUCTOR_NAME);
	  var defineProperty = definePropertyModule$6.f;

	  if (DESCRIPTORS$p && Constructor && !Constructor[SPECIES$3]) {
	    defineProperty(Constructor, SPECIES$3, {
	      configurable: true,
	      get: function get() {
	        return this;
	      }
	    });
	  }
	};

	var setSpecies$5 = setSpecies$6; // `Array[@@species]` getter
	// https://tc39.es/ecma262/#sec-get-array-@@species

	setSpecies$5('Array');

	var $$1R = _export;
	var global$Y = global$1B;
	var toAbsoluteIndex$2 = toAbsoluteIndex$8;
	var toIntegerOrInfinity$a = toIntegerOrInfinity$g;
	var lengthOfArrayLike$6 = lengthOfArrayLike$n;
	var toObject$a = toObject$o;
	var arraySpeciesCreate = arraySpeciesCreate$5;
	var createProperty$3 = createProperty$9;
	var arrayMethodHasSpeciesSupport = arrayMethodHasSpeciesSupport$5;
	var HAS_SPECIES_SUPPORT = arrayMethodHasSpeciesSupport('splice');
	var TypeError$h = global$Y.TypeError;
	var max$3 = Math.max;
	var min$5 = Math.min;
	var MAX_SAFE_INTEGER = 0x1FFFFFFFFFFFFF;
	var MAXIMUM_ALLOWED_LENGTH_EXCEEDED = 'Maximum allowed length exceeded'; // `Array.prototype.splice` method
	// https://tc39.es/ecma262/#sec-array.prototype.splice
	// with adding support of @@species

	$$1R({
	  target: 'Array',
	  proto: true,
	  forced: !HAS_SPECIES_SUPPORT
	}, {
	  splice: function splice(start, deleteCount
	  /* , ...items */
	  ) {
	    var O = toObject$a(this);
	    var len = lengthOfArrayLike$6(O);
	    var actualStart = toAbsoluteIndex$2(start, len);
	    var argumentsLength = arguments.length;
	    var insertCount, actualDeleteCount, A, k, from, to;

	    if (argumentsLength === 0) {
	      insertCount = actualDeleteCount = 0;
	    } else if (argumentsLength === 1) {
	      insertCount = 0;
	      actualDeleteCount = len - actualStart;
	    } else {
	      insertCount = argumentsLength - 2;
	      actualDeleteCount = min$5(max$3(toIntegerOrInfinity$a(deleteCount), 0), len - actualStart);
	    }

	    if (len + insertCount - actualDeleteCount > MAX_SAFE_INTEGER) {
	      throw TypeError$h(MAXIMUM_ALLOWED_LENGTH_EXCEEDED);
	    }

	    A = arraySpeciesCreate(O, actualDeleteCount);

	    for (k = 0; k < actualDeleteCount; k++) {
	      from = actualStart + k;
	      if (from in O) createProperty$3(A, k, O[from]);
	    }

	    A.length = actualDeleteCount;

	    if (insertCount < actualDeleteCount) {
	      for (k = actualStart; k < len - actualDeleteCount; k++) {
	        from = k + actualDeleteCount;
	        to = k + insertCount;
	        if (from in O) O[to] = O[from];else delete O[to];
	      }

	      for (k = len; k > len - actualDeleteCount + insertCount; k--) {
	        delete O[k - 1];
	      }
	    } else if (insertCount > actualDeleteCount) {
	      for (k = len - actualDeleteCount; k > actualStart; k--) {
	        from = k + actualDeleteCount - 1;
	        to = k + insertCount - 1;
	        if (from in O) O[to] = O[from];else delete O[to];
	      }
	    }

	    for (k = 0; k < insertCount; k++) {
	      O[k + actualStart] = arguments[k + 2];
	    }

	    O.length = len - actualDeleteCount + insertCount;
	    return A;
	  }
	});

	// in popular engines, so it's moved to a separate module

	var addToUnscopables$1 = addToUnscopables$9; // https://tc39.es/ecma262/#sec-array.prototype-@@unscopables

	addToUnscopables$1('flat');

	// in popular engines, so it's moved to a separate module

	var addToUnscopables = addToUnscopables$9; // https://tc39.es/ecma262/#sec-array.prototype-@@unscopables

	addToUnscopables('flatMap');

	var arrayBufferNative = typeof ArrayBuffer != 'undefined' && typeof DataView != 'undefined';

	var redefine$e = redefine$j.exports;

	var redefineAll$6 = function redefineAll(target, src, options) {
	  for (var key in src) {
	    redefine$e(target, key, src[key], options);
	  }

	  return target;
	};

	var global$X = global$1B;
	var isPrototypeOf$6 = objectIsPrototypeOf;
	var TypeError$g = global$X.TypeError;

	var anInstance$a = function anInstance(it, Prototype) {
	  if (isPrototypeOf$6(Prototype, it)) return it;
	  throw TypeError$g('Incorrect invocation');
	};

	var global$W = global$1B;
	var toIntegerOrInfinity$9 = toIntegerOrInfinity$g;
	var toLength$a = toLength$c;
	var RangeError$b = global$W.RangeError; // `ToIndex` abstract operation
	// https://tc39.es/ecma262/#sec-toindex

	var toIndex$2 = function toIndex(it) {
	  if (it === undefined) return 0;
	  var number = toIntegerOrInfinity$9(it);
	  var length = toLength$a(number);
	  if (number !== length) throw RangeError$b('Wrong length or index');
	  return length;
	};

	var global$V = global$1B;
	var Array$4 = global$V.Array;
	var abs$9 = Math.abs;
	var pow$5 = Math.pow;
	var floor$9 = Math.floor;
	var log$8 = Math.log;
	var LN2$2 = Math.LN2;

	var pack = function pack(number, mantissaLength, bytes) {
	  var buffer = Array$4(bytes);
	  var exponentLength = bytes * 8 - mantissaLength - 1;
	  var eMax = (1 << exponentLength) - 1;
	  var eBias = eMax >> 1;
	  var rt = mantissaLength === 23 ? pow$5(2, -24) - pow$5(2, -77) : 0;
	  var sign = number < 0 || number === 0 && 1 / number < 0 ? 1 : 0;
	  var index = 0;
	  var exponent, mantissa, c;
	  number = abs$9(number); // eslint-disable-next-line no-self-compare -- NaN check

	  if (number != number || number === Infinity) {
	    // eslint-disable-next-line no-self-compare -- NaN check
	    mantissa = number != number ? 1 : 0;
	    exponent = eMax;
	  } else {
	    exponent = floor$9(log$8(number) / LN2$2);
	    c = pow$5(2, -exponent);

	    if (number * c < 1) {
	      exponent--;
	      c *= 2;
	    }

	    if (exponent + eBias >= 1) {
	      number += rt / c;
	    } else {
	      number += rt * pow$5(2, 1 - eBias);
	    }

	    if (number * c >= 2) {
	      exponent++;
	      c /= 2;
	    }

	    if (exponent + eBias >= eMax) {
	      mantissa = 0;
	      exponent = eMax;
	    } else if (exponent + eBias >= 1) {
	      mantissa = (number * c - 1) * pow$5(2, mantissaLength);
	      exponent = exponent + eBias;
	    } else {
	      mantissa = number * pow$5(2, eBias - 1) * pow$5(2, mantissaLength);
	      exponent = 0;
	    }
	  }

	  while (mantissaLength >= 8) {
	    buffer[index++] = mantissa & 255;
	    mantissa /= 256;
	    mantissaLength -= 8;
	  }

	  exponent = exponent << mantissaLength | mantissa;
	  exponentLength += mantissaLength;

	  while (exponentLength > 0) {
	    buffer[index++] = exponent & 255;
	    exponent /= 256;
	    exponentLength -= 8;
	  }

	  buffer[--index] |= sign * 128;
	  return buffer;
	};

	var unpack = function unpack(buffer, mantissaLength) {
	  var bytes = buffer.length;
	  var exponentLength = bytes * 8 - mantissaLength - 1;
	  var eMax = (1 << exponentLength) - 1;
	  var eBias = eMax >> 1;
	  var nBits = exponentLength - 7;
	  var index = bytes - 1;
	  var sign = buffer[index--];
	  var exponent = sign & 127;
	  var mantissa;
	  sign >>= 7;

	  while (nBits > 0) {
	    exponent = exponent * 256 + buffer[index--];
	    nBits -= 8;
	  }

	  mantissa = exponent & (1 << -nBits) - 1;
	  exponent >>= -nBits;
	  nBits += mantissaLength;

	  while (nBits > 0) {
	    mantissa = mantissa * 256 + buffer[index--];
	    nBits -= 8;
	  }

	  if (exponent === 0) {
	    exponent = 1 - eBias;
	  } else if (exponent === eMax) {
	    return mantissa ? NaN : sign ? -Infinity : Infinity;
	  } else {
	    mantissa = mantissa + pow$5(2, mantissaLength);
	    exponent = exponent - eBias;
	  }

	  return (sign ? -1 : 1) * mantissa * pow$5(2, exponent - mantissaLength);
	};

	var ieee754 = {
	  pack: pack,
	  unpack: unpack
	};

	var global$U = global$1B;
	var uncurryThis$I = functionUncurryThis;
	var DESCRIPTORS$o = descriptors;
	var NATIVE_ARRAY_BUFFER$1 = arrayBufferNative;
	var FunctionName = functionName;
	var createNonEnumerableProperty$7 = createNonEnumerableProperty$f;
	var redefineAll$5 = redefineAll$6;
	var fails$R = fails$18;
	var anInstance$9 = anInstance$a;
	var toIntegerOrInfinity$8 = toIntegerOrInfinity$g;
	var toLength$9 = toLength$c;
	var toIndex$1 = toIndex$2;
	var IEEE754 = ieee754;
	var getPrototypeOf$6 = objectGetPrototypeOf$1;
	var setPrototypeOf$4 = objectSetPrototypeOf$1;
	var getOwnPropertyNames$4 = objectGetOwnPropertyNames.f;
	var defineProperty$c = objectDefineProperty.f;
	var arrayFill = arrayFill$1;
	var arraySlice$7 = arraySliceSimple;
	var setToStringTag$8 = setToStringTag$c;
	var InternalStateModule$9 = internalState;
	var PROPER_FUNCTION_NAME$2 = FunctionName.PROPER;
	var CONFIGURABLE_FUNCTION_NAME = FunctionName.CONFIGURABLE;
	var getInternalState$8 = InternalStateModule$9.get;
	var setInternalState$9 = InternalStateModule$9.set;
	var ARRAY_BUFFER$1 = 'ArrayBuffer';
	var DATA_VIEW = 'DataView';
	var PROTOTYPE = 'prototype';
	var WRONG_LENGTH$1 = 'Wrong length';
	var WRONG_INDEX = 'Wrong index';
	var NativeArrayBuffer$1 = global$U[ARRAY_BUFFER$1];
	var $ArrayBuffer = NativeArrayBuffer$1;
	var ArrayBufferPrototype$1 = $ArrayBuffer && $ArrayBuffer[PROTOTYPE];
	var $DataView = global$U[DATA_VIEW];
	var DataViewPrototype = $DataView && $DataView[PROTOTYPE];
	var ObjectPrototype$2 = Object.prototype;
	var Array$3 = global$U.Array;
	var RangeError$a = global$U.RangeError;
	var fill = uncurryThis$I(arrayFill);
	var reverse = uncurryThis$I([].reverse);
	var packIEEE754 = IEEE754.pack;
	var unpackIEEE754 = IEEE754.unpack;

	var packInt8 = function packInt8(number) {
	  return [number & 0xFF];
	};

	var packInt16 = function packInt16(number) {
	  return [number & 0xFF, number >> 8 & 0xFF];
	};

	var packInt32 = function packInt32(number) {
	  return [number & 0xFF, number >> 8 & 0xFF, number >> 16 & 0xFF, number >> 24 & 0xFF];
	};

	var unpackInt32 = function unpackInt32(buffer) {
	  return buffer[3] << 24 | buffer[2] << 16 | buffer[1] << 8 | buffer[0];
	};

	var packFloat32 = function packFloat32(number) {
	  return packIEEE754(number, 23, 4);
	};

	var packFloat64 = function packFloat64(number) {
	  return packIEEE754(number, 52, 8);
	};

	var addGetter$1 = function addGetter(Constructor, key) {
	  defineProperty$c(Constructor[PROTOTYPE], key, {
	    get: function get() {
	      return getInternalState$8(this)[key];
	    }
	  });
	};

	var get$3 = function get(view, count, index, isLittleEndian) {
	  var intIndex = toIndex$1(index);
	  var store = getInternalState$8(view);
	  if (intIndex + count > store.byteLength) throw RangeError$a(WRONG_INDEX);
	  var bytes = getInternalState$8(store.buffer).bytes;
	  var start = intIndex + store.byteOffset;
	  var pack = arraySlice$7(bytes, start, start + count);
	  return isLittleEndian ? pack : reverse(pack);
	};

	var set$4 = function set(view, count, index, conversion, value, isLittleEndian) {
	  var intIndex = toIndex$1(index);
	  var store = getInternalState$8(view);
	  if (intIndex + count > store.byteLength) throw RangeError$a(WRONG_INDEX);
	  var bytes = getInternalState$8(store.buffer).bytes;
	  var start = intIndex + store.byteOffset;
	  var pack = conversion(+value);

	  for (var i = 0; i < count; i++) {
	    bytes[start + i] = pack[isLittleEndian ? i : count - i - 1];
	  }
	};

	if (!NATIVE_ARRAY_BUFFER$1) {
	  $ArrayBuffer = function ArrayBuffer(length) {
	    anInstance$9(this, ArrayBufferPrototype$1);
	    var byteLength = toIndex$1(length);
	    setInternalState$9(this, {
	      bytes: fill(Array$3(byteLength), 0),
	      byteLength: byteLength
	    });
	    if (!DESCRIPTORS$o) this.byteLength = byteLength;
	  };

	  ArrayBufferPrototype$1 = $ArrayBuffer[PROTOTYPE];

	  $DataView = function DataView(buffer, byteOffset, byteLength) {
	    anInstance$9(this, DataViewPrototype);
	    anInstance$9(buffer, ArrayBufferPrototype$1);
	    var bufferLength = getInternalState$8(buffer).byteLength;
	    var offset = toIntegerOrInfinity$8(byteOffset);
	    if (offset < 0 || offset > bufferLength) throw RangeError$a('Wrong offset');
	    byteLength = byteLength === undefined ? bufferLength - offset : toLength$9(byteLength);
	    if (offset + byteLength > bufferLength) throw RangeError$a(WRONG_LENGTH$1);
	    setInternalState$9(this, {
	      buffer: buffer,
	      byteLength: byteLength,
	      byteOffset: offset
	    });

	    if (!DESCRIPTORS$o) {
	      this.buffer = buffer;
	      this.byteLength = byteLength;
	      this.byteOffset = offset;
	    }
	  };

	  DataViewPrototype = $DataView[PROTOTYPE];

	  if (DESCRIPTORS$o) {
	    addGetter$1($ArrayBuffer, 'byteLength');
	    addGetter$1($DataView, 'buffer');
	    addGetter$1($DataView, 'byteLength');
	    addGetter$1($DataView, 'byteOffset');
	  }

	  redefineAll$5(DataViewPrototype, {
	    getInt8: function getInt8(byteOffset) {
	      return get$3(this, 1, byteOffset)[0] << 24 >> 24;
	    },
	    getUint8: function getUint8(byteOffset) {
	      return get$3(this, 1, byteOffset)[0];
	    },
	    getInt16: function getInt16(byteOffset
	    /* , littleEndian */
	    ) {
	      var bytes = get$3(this, 2, byteOffset, arguments.length > 1 ? arguments[1] : undefined);
	      return (bytes[1] << 8 | bytes[0]) << 16 >> 16;
	    },
	    getUint16: function getUint16(byteOffset
	    /* , littleEndian */
	    ) {
	      var bytes = get$3(this, 2, byteOffset, arguments.length > 1 ? arguments[1] : undefined);
	      return bytes[1] << 8 | bytes[0];
	    },
	    getInt32: function getInt32(byteOffset
	    /* , littleEndian */
	    ) {
	      return unpackInt32(get$3(this, 4, byteOffset, arguments.length > 1 ? arguments[1] : undefined));
	    },
	    getUint32: function getUint32(byteOffset
	    /* , littleEndian */
	    ) {
	      return unpackInt32(get$3(this, 4, byteOffset, arguments.length > 1 ? arguments[1] : undefined)) >>> 0;
	    },
	    getFloat32: function getFloat32(byteOffset
	    /* , littleEndian */
	    ) {
	      return unpackIEEE754(get$3(this, 4, byteOffset, arguments.length > 1 ? arguments[1] : undefined), 23);
	    },
	    getFloat64: function getFloat64(byteOffset
	    /* , littleEndian */
	    ) {
	      return unpackIEEE754(get$3(this, 8, byteOffset, arguments.length > 1 ? arguments[1] : undefined), 52);
	    },
	    setInt8: function setInt8(byteOffset, value) {
	      set$4(this, 1, byteOffset, packInt8, value);
	    },
	    setUint8: function setUint8(byteOffset, value) {
	      set$4(this, 1, byteOffset, packInt8, value);
	    },
	    setInt16: function setInt16(byteOffset, value
	    /* , littleEndian */
	    ) {
	      set$4(this, 2, byteOffset, packInt16, value, arguments.length > 2 ? arguments[2] : undefined);
	    },
	    setUint16: function setUint16(byteOffset, value
	    /* , littleEndian */
	    ) {
	      set$4(this, 2, byteOffset, packInt16, value, arguments.length > 2 ? arguments[2] : undefined);
	    },
	    setInt32: function setInt32(byteOffset, value
	    /* , littleEndian */
	    ) {
	      set$4(this, 4, byteOffset, packInt32, value, arguments.length > 2 ? arguments[2] : undefined);
	    },
	    setUint32: function setUint32(byteOffset, value
	    /* , littleEndian */
	    ) {
	      set$4(this, 4, byteOffset, packInt32, value, arguments.length > 2 ? arguments[2] : undefined);
	    },
	    setFloat32: function setFloat32(byteOffset, value
	    /* , littleEndian */
	    ) {
	      set$4(this, 4, byteOffset, packFloat32, value, arguments.length > 2 ? arguments[2] : undefined);
	    },
	    setFloat64: function setFloat64(byteOffset, value
	    /* , littleEndian */
	    ) {
	      set$4(this, 8, byteOffset, packFloat64, value, arguments.length > 2 ? arguments[2] : undefined);
	    }
	  });
	} else {
	  var INCORRECT_ARRAY_BUFFER_NAME = PROPER_FUNCTION_NAME$2 && NativeArrayBuffer$1.name !== ARRAY_BUFFER$1;
	  /* eslint-disable no-new -- required for testing */

	  if (!fails$R(function () {
	    NativeArrayBuffer$1(1);
	  }) || !fails$R(function () {
	    new NativeArrayBuffer$1(-1);
	  }) || fails$R(function () {
	    new NativeArrayBuffer$1();
	    new NativeArrayBuffer$1(1.5);
	    new NativeArrayBuffer$1(NaN);
	    return INCORRECT_ARRAY_BUFFER_NAME && !CONFIGURABLE_FUNCTION_NAME;
	  })) {
	    /* eslint-enable no-new -- required for testing */
	    $ArrayBuffer = function ArrayBuffer(length) {
	      anInstance$9(this, ArrayBufferPrototype$1);
	      return new NativeArrayBuffer$1(toIndex$1(length));
	    };

	    $ArrayBuffer[PROTOTYPE] = ArrayBufferPrototype$1;

	    for (var keys$2 = getOwnPropertyNames$4(NativeArrayBuffer$1), j$1 = 0, key$3; keys$2.length > j$1;) {
	      if (!((key$3 = keys$2[j$1++]) in $ArrayBuffer)) {
	        createNonEnumerableProperty$7($ArrayBuffer, key$3, NativeArrayBuffer$1[key$3]);
	      }
	    }

	    ArrayBufferPrototype$1.constructor = $ArrayBuffer;
	  } else if (INCORRECT_ARRAY_BUFFER_NAME && CONFIGURABLE_FUNCTION_NAME) {
	    createNonEnumerableProperty$7(NativeArrayBuffer$1, 'name', ARRAY_BUFFER$1);
	  } // WebKit bug - the same parent prototype for typed arrays and data view


	  if (setPrototypeOf$4 && getPrototypeOf$6(DataViewPrototype) !== ObjectPrototype$2) {
	    setPrototypeOf$4(DataViewPrototype, ObjectPrototype$2);
	  } // iOS Safari 7.x bug


	  var testView = new $DataView(new $ArrayBuffer(2));
	  var $setInt8 = uncurryThis$I(DataViewPrototype.setInt8);
	  testView.setInt8(0, 2147483648);
	  testView.setInt8(1, 2147483649);
	  if (testView.getInt8(0) || !testView.getInt8(1)) redefineAll$5(DataViewPrototype, {
	    setInt8: function setInt8(byteOffset, value) {
	      $setInt8(this, byteOffset, value << 24 >> 24);
	    },
	    setUint8: function setUint8(byteOffset, value) {
	      $setInt8(this, byteOffset, value << 24 >> 24);
	    }
	  }, {
	    unsafe: true
	  });
	}

	setToStringTag$8($ArrayBuffer, ARRAY_BUFFER$1);
	setToStringTag$8($DataView, DATA_VIEW);
	var arrayBuffer = {
	  ArrayBuffer: $ArrayBuffer,
	  DataView: $DataView
	};

	var $$1Q = _export;
	var global$T = global$1B;
	var arrayBufferModule = arrayBuffer;
	var setSpecies$4 = setSpecies$6;
	var ARRAY_BUFFER = 'ArrayBuffer';
	var ArrayBuffer$3 = arrayBufferModule[ARRAY_BUFFER];
	var NativeArrayBuffer = global$T[ARRAY_BUFFER]; // `ArrayBuffer` constructor
	// https://tc39.es/ecma262/#sec-arraybuffer-constructor

	$$1Q({
	  global: true,
	  forced: NativeArrayBuffer !== ArrayBuffer$3
	}, {
	  ArrayBuffer: ArrayBuffer$3
	});
	setSpecies$4(ARRAY_BUFFER);

	var global$S = global$1B;
	var anObject$q = anObject$B;
	var ordinaryToPrimitive = ordinaryToPrimitive$2;
	var TypeError$f = global$S.TypeError; // `Date.prototype[@@toPrimitive](hint)` method implementation
	// https://tc39.es/ecma262/#sec-date.prototype-@@toprimitive

	var dateToPrimitive$1 = function dateToPrimitive(hint) {
	  anObject$q(this);
	  if (hint === 'string' || hint === 'default') hint = 'string';else if (hint !== 'number') throw TypeError$f('Incorrect hint');
	  return ordinaryToPrimitive(this, hint);
	};

	var hasOwn$f = hasOwnProperty_1;
	var redefine$d = redefine$j.exports;
	var dateToPrimitive = dateToPrimitive$1;
	var wellKnownSymbol$f = wellKnownSymbol$y;
	var TO_PRIMITIVE = wellKnownSymbol$f('toPrimitive');
	var DatePrototype = Date.prototype; // `Date.prototype[@@toPrimitive]` method
	// https://tc39.es/ecma262/#sec-date.prototype-@@toprimitive

	if (!hasOwn$f(DatePrototype, TO_PRIMITIVE)) {
	  redefine$d(DatePrototype, TO_PRIMITIVE, dateToPrimitive);
	}

	var isCallable$b = isCallable$u;
	var isObject$n = isObject$z;
	var definePropertyModule$5 = objectDefineProperty;
	var getPrototypeOf$5 = objectGetPrototypeOf$1;
	var wellKnownSymbol$e = wellKnownSymbol$y;
	var HAS_INSTANCE = wellKnownSymbol$e('hasInstance');
	var FunctionPrototype$1 = Function.prototype; // `Function.prototype[@@hasInstance]` method
	// https://tc39.es/ecma262/#sec-function.prototype-@@hasinstance

	if (!(HAS_INSTANCE in FunctionPrototype$1)) {
	  definePropertyModule$5.f(FunctionPrototype$1, HAS_INSTANCE, {
	    value: function value(O) {
	      if (!isCallable$b(this) || !isObject$n(O)) return false;
	      var P = this.prototype;
	      if (!isObject$n(P)) return O instanceof this; // for environment w/o native `@@hasInstance` logic enough `instanceof`, but add this:

	      while (O = getPrototypeOf$5(O)) {
	        if (P === O) return true;
	      }

	      return false;
	    }
	  });
	}

	var DESCRIPTORS$n = descriptors;
	var FUNCTION_NAME_EXISTS = functionName.EXISTS;
	var uncurryThis$H = functionUncurryThis;
	var defineProperty$b = objectDefineProperty.f;
	var FunctionPrototype = Function.prototype;
	var functionToString = uncurryThis$H(FunctionPrototype.toString);
	var nameRE = /function\b(?:\s|\/\*[\S\s]*?\*\/|\/\/[^\n\r]*[\n\r]+)*([^\s(/]*)/;
	var regExpExec$4 = uncurryThis$H(nameRE.exec);
	var NAME$1 = 'name'; // Function instances `.name` property
	// https://tc39.es/ecma262/#sec-function-instances-name

	if (DESCRIPTORS$n && !FUNCTION_NAME_EXISTS) {
	  defineProperty$b(FunctionPrototype, NAME$1, {
	    configurable: true,
	    get: function get() {
	      try {
	        return regExpExec$4(nameRE, functionToString(this))[1];
	      } catch (error) {
	        return '';
	      }
	    }
	  });
	}

	var $$1P = _export;
	var global$R = global$1B; // `globalThis` object
	// https://tc39.es/ecma262/#sec-globalthis

	$$1P({
	  global: true
	}, {
	  globalThis: global$R
	});

	var $$1O = _export;
	var global$Q = global$1B;
	var getBuiltIn$9 = getBuiltIn$j;
	var apply$6 = functionApply$1;
	var uncurryThis$G = functionUncurryThis;
	var fails$Q = fails$18;
	var Array$2 = global$Q.Array;
	var $stringify = getBuiltIn$9('JSON', 'stringify');
	var exec$6 = uncurryThis$G(/./.exec);
	var charAt$a = uncurryThis$G(''.charAt);
	var charCodeAt$3 = uncurryThis$G(''.charCodeAt);
	var replace$8 = uncurryThis$G(''.replace);
	var numberToString$1 = uncurryThis$G(1.0.toString);
	var tester = /[\uD800-\uDFFF]/g;
	var low = /^[\uD800-\uDBFF]$/;
	var hi = /^[\uDC00-\uDFFF]$/;

	var fix = function fix(match, offset, string) {
	  var prev = charAt$a(string, offset - 1);
	  var next = charAt$a(string, offset + 1);

	  if (exec$6(low, match) && !exec$6(hi, next) || exec$6(hi, match) && !exec$6(low, prev)) {
	    return "\\u" + numberToString$1(charCodeAt$3(match, 0), 16);
	  }

	  return match;
	};

	var FORCED$l = fails$Q(function () {
	  return $stringify("\uDF06\uD834") !== "\"\\udf06\\ud834\"" || $stringify("\uDEAD") !== "\"\\udead\"";
	});

	if ($stringify) {
	  // `JSON.stringify` method
	  // https://tc39.es/ecma262/#sec-json.stringify
	  // https://github.com/tc39/proposal-well-formed-stringify
	  $$1O({
	    target: 'JSON',
	    stat: true,
	    forced: FORCED$l
	  }, {
	    // eslint-disable-next-line no-unused-vars -- required for `.length`
	    stringify: function stringify(it, replacer, space) {
	      for (var i = 0, l = arguments.length, args = Array$2(l); i < l; i++) {
	        args[i] = arguments[i];
	      }

	      var result = apply$6($stringify, null, args);
	      return typeof result == 'string' ? replace$8(result, tester, fix) : result;
	    }
	  });
	}

	var global$P = global$1B;
	var setToStringTag$7 = setToStringTag$c; // JSON[@@toStringTag] property
	// https://tc39.es/ecma262/#sec-json-@@tostringtag

	setToStringTag$7(global$P.JSON, 'JSON', true);

	var internalMetadata = {exports: {}};

	var fails$P = fails$18;
	var arrayBufferNonExtensible = fails$P(function () {
	  if (typeof ArrayBuffer == 'function') {
	    var buffer = new ArrayBuffer(8); // eslint-disable-next-line es/no-object-isextensible, es/no-object-defineproperty -- safe

	    if (Object.isExtensible(buffer)) Object.defineProperty(buffer, 'a', {
	      value: 8
	    });
	  }
	});

	var fails$O = fails$18;
	var isObject$m = isObject$z;
	var classof$c = classofRaw$1;
	var ARRAY_BUFFER_NON_EXTENSIBLE$2 = arrayBufferNonExtensible; // eslint-disable-next-line es/no-object-isextensible -- safe

	var $isExtensible$2 = Object.isExtensible;
	var FAILS_ON_PRIMITIVES$9 = fails$O(function () {
	  $isExtensible$2(1);
	}); // `Object.isExtensible` method
	// https://tc39.es/ecma262/#sec-object.isextensible

	var objectIsExtensible = FAILS_ON_PRIMITIVES$9 || ARRAY_BUFFER_NON_EXTENSIBLE$2 ? function isExtensible(it) {
	  if (!isObject$m(it)) return false;
	  if (ARRAY_BUFFER_NON_EXTENSIBLE$2 && classof$c(it) == 'ArrayBuffer') return false;
	  return $isExtensible$2 ? $isExtensible$2(it) : true;
	} : $isExtensible$2;

	var fails$N = fails$18;
	var freezing = !fails$N(function () {
	  // eslint-disable-next-line es/no-object-isextensible, es/no-object-preventextensions -- required for testing
	  return Object.isExtensible(Object.preventExtensions({}));
	});

	var $$1N = _export;
	var uncurryThis$F = functionUncurryThis;
	var hiddenKeys = hiddenKeys$6;
	var isObject$l = isObject$z;
	var hasOwn$e = hasOwnProperty_1;
	var defineProperty$a = objectDefineProperty.f;
	var getOwnPropertyNamesModule = objectGetOwnPropertyNames;
	var getOwnPropertyNamesExternalModule = objectGetOwnPropertyNamesExternal;
	var isExtensible$1 = objectIsExtensible;
	var uid$2 = uid$6;
	var FREEZING$4 = freezing;
	var REQUIRED = false;
	var METADATA = uid$2('meta');
	var id$2 = 0;

	var setMetadata = function setMetadata(it) {
	  defineProperty$a(it, METADATA, {
	    value: {
	      objectID: 'O' + id$2++,
	      // object ID
	      weakData: {} // weak collections IDs

	    }
	  });
	};

	var fastKey$1 = function fastKey(it, create) {
	  // return a primitive with prefix
	  if (!isObject$l(it)) return _typeof(it) == 'symbol' ? it : (typeof it == 'string' ? 'S' : 'P') + it;

	  if (!hasOwn$e(it, METADATA)) {
	    // can't set metadata to uncaught frozen object
	    if (!isExtensible$1(it)) return 'F'; // not necessary to add metadata

	    if (!create) return 'E'; // add missing metadata

	    setMetadata(it); // return object ID
	  }

	  return it[METADATA].objectID;
	};

	var getWeakData$1 = function getWeakData(it, create) {
	  if (!hasOwn$e(it, METADATA)) {
	    // can't set metadata to uncaught frozen object
	    if (!isExtensible$1(it)) return true; // not necessary to add metadata

	    if (!create) return false; // add missing metadata

	    setMetadata(it); // return the store of weak collections IDs
	  }

	  return it[METADATA].weakData;
	}; // add metadata on freeze-family methods calling


	var onFreeze$3 = function onFreeze(it) {
	  if (FREEZING$4 && REQUIRED && isExtensible$1(it) && !hasOwn$e(it, METADATA)) setMetadata(it);
	  return it;
	};

	var enable = function enable() {
	  meta.enable = function () {
	    /* empty */
	  };

	  REQUIRED = true;
	  var getOwnPropertyNames = getOwnPropertyNamesModule.f;
	  var splice = uncurryThis$F([].splice);
	  var test = {};
	  test[METADATA] = 1; // prevent exposing of metadata key

	  if (getOwnPropertyNames(test).length) {
	    getOwnPropertyNamesModule.f = function (it) {
	      var result = getOwnPropertyNames(it);

	      for (var i = 0, length = result.length; i < length; i++) {
	        if (result[i] === METADATA) {
	          splice(result, i, 1);
	          break;
	        }
	      }

	      return result;
	    };

	    $$1N({
	      target: 'Object',
	      stat: true,
	      forced: true
	    }, {
	      getOwnPropertyNames: getOwnPropertyNamesExternalModule.f
	    });
	  }
	};

	var meta = internalMetadata.exports = {
	  enable: enable,
	  fastKey: fastKey$1,
	  getWeakData: getWeakData$1,
	  onFreeze: onFreeze$3
	};
	hiddenKeys[METADATA] = true;

	var $$1M = _export;
	var global$O = global$1B;
	var uncurryThis$E = functionUncurryThis;
	var isForced$3 = isForced_1;
	var redefine$c = redefine$j.exports;
	var InternalMetadataModule$1 = internalMetadata.exports;
	var iterate$7 = iterate$9;
	var anInstance$8 = anInstance$a;
	var isCallable$a = isCallable$u;
	var isObject$k = isObject$z;
	var fails$M = fails$18;
	var checkCorrectnessOfIteration$2 = checkCorrectnessOfIteration$4;
	var setToStringTag$6 = setToStringTag$c;
	var inheritIfRequired$4 = inheritIfRequired$6;

	var collection$4 = function collection(CONSTRUCTOR_NAME, wrapper, common) {
	  var IS_MAP = CONSTRUCTOR_NAME.indexOf('Map') !== -1;
	  var IS_WEAK = CONSTRUCTOR_NAME.indexOf('Weak') !== -1;
	  var ADDER = IS_MAP ? 'set' : 'add';
	  var NativeConstructor = global$O[CONSTRUCTOR_NAME];
	  var NativePrototype = NativeConstructor && NativeConstructor.prototype;
	  var Constructor = NativeConstructor;
	  var exported = {};

	  var fixMethod = function fixMethod(KEY) {
	    var uncurriedNativeMethod = uncurryThis$E(NativePrototype[KEY]);
	    redefine$c(NativePrototype, KEY, KEY == 'add' ? function add(value) {
	      uncurriedNativeMethod(this, value === 0 ? 0 : value);
	      return this;
	    } : KEY == 'delete' ? function (key) {
	      return IS_WEAK && !isObject$k(key) ? false : uncurriedNativeMethod(this, key === 0 ? 0 : key);
	    } : KEY == 'get' ? function get(key) {
	      return IS_WEAK && !isObject$k(key) ? undefined : uncurriedNativeMethod(this, key === 0 ? 0 : key);
	    } : KEY == 'has' ? function has(key) {
	      return IS_WEAK && !isObject$k(key) ? false : uncurriedNativeMethod(this, key === 0 ? 0 : key);
	    } : function set(key, value) {
	      uncurriedNativeMethod(this, key === 0 ? 0 : key, value);
	      return this;
	    });
	  };

	  var REPLACE = isForced$3(CONSTRUCTOR_NAME, !isCallable$a(NativeConstructor) || !(IS_WEAK || NativePrototype.forEach && !fails$M(function () {
	    new NativeConstructor().entries().next();
	  })));

	  if (REPLACE) {
	    // create collection constructor
	    Constructor = common.getConstructor(wrapper, CONSTRUCTOR_NAME, IS_MAP, ADDER);
	    InternalMetadataModule$1.enable();
	  } else if (isForced$3(CONSTRUCTOR_NAME, true)) {
	    var instance = new Constructor(); // early implementations not supports chaining

	    var HASNT_CHAINING = instance[ADDER](IS_WEAK ? {} : -0, 1) != instance; // V8 ~ Chromium 40- weak-collections throws on primitives, but should return false

	    var THROWS_ON_PRIMITIVES = fails$M(function () {
	      instance.has(1);
	    }); // most early implementations doesn't supports iterables, most modern - not close it correctly
	    // eslint-disable-next-line no-new -- required for testing

	    var ACCEPT_ITERABLES = checkCorrectnessOfIteration$2(function (iterable) {
	      new NativeConstructor(iterable);
	    }); // for early implementations -0 and +0 not the same

	    var BUGGY_ZERO = !IS_WEAK && fails$M(function () {
	      // V8 ~ Chromium 42- fails only with 5+ elements
	      var $instance = new NativeConstructor();
	      var index = 5;

	      while (index--) {
	        $instance[ADDER](index, index);
	      }

	      return !$instance.has(-0);
	    });

	    if (!ACCEPT_ITERABLES) {
	      Constructor = wrapper(function (dummy, iterable) {
	        anInstance$8(dummy, NativePrototype);
	        var that = inheritIfRequired$4(new NativeConstructor(), dummy, Constructor);
	        if (iterable != undefined) iterate$7(iterable, that[ADDER], {
	          that: that,
	          AS_ENTRIES: IS_MAP
	        });
	        return that;
	      });
	      Constructor.prototype = NativePrototype;
	      NativePrototype.constructor = Constructor;
	    }

	    if (THROWS_ON_PRIMITIVES || BUGGY_ZERO) {
	      fixMethod('delete');
	      fixMethod('has');
	      IS_MAP && fixMethod('get');
	    }

	    if (BUGGY_ZERO || HASNT_CHAINING) fixMethod(ADDER); // weak collections should not contains .clear method

	    if (IS_WEAK && NativePrototype.clear) delete NativePrototype.clear;
	  }

	  exported[CONSTRUCTOR_NAME] = Constructor;
	  $$1M({
	    global: true,
	    forced: Constructor != NativeConstructor
	  }, exported);
	  setToStringTag$6(Constructor, CONSTRUCTOR_NAME);
	  if (!IS_WEAK) common.setStrong(Constructor, CONSTRUCTOR_NAME, IS_MAP);
	  return Constructor;
	};

	var defineProperty$9 = objectDefineProperty.f;
	var create$7 = objectCreate;
	var redefineAll$4 = redefineAll$6;
	var bind$7 = functionBindContext;
	var anInstance$7 = anInstance$a;
	var iterate$6 = iterate$9;
	var defineIterator$1 = defineIterator$3;
	var setSpecies$3 = setSpecies$6;
	var DESCRIPTORS$m = descriptors;
	var fastKey = internalMetadata.exports.fastKey;
	var InternalStateModule$8 = internalState;
	var setInternalState$8 = InternalStateModule$8.set;
	var internalStateGetterFor$1 = InternalStateModule$8.getterFor;
	var collectionStrong$2 = {
	  getConstructor: function getConstructor(wrapper, CONSTRUCTOR_NAME, IS_MAP, ADDER) {
	    var Constructor = wrapper(function (that, iterable) {
	      anInstance$7(that, Prototype);
	      setInternalState$8(that, {
	        type: CONSTRUCTOR_NAME,
	        index: create$7(null),
	        first: undefined,
	        last: undefined,
	        size: 0
	      });
	      if (!DESCRIPTORS$m) that.size = 0;
	      if (iterable != undefined) iterate$6(iterable, that[ADDER], {
	        that: that,
	        AS_ENTRIES: IS_MAP
	      });
	    });
	    var Prototype = Constructor.prototype;
	    var getInternalState = internalStateGetterFor$1(CONSTRUCTOR_NAME);

	    var define = function define(that, key, value) {
	      var state = getInternalState(that);
	      var entry = getEntry(that, key);
	      var previous, index; // change existing entry

	      if (entry) {
	        entry.value = value; // create new entry
	      } else {
	        state.last = entry = {
	          index: index = fastKey(key, true),
	          key: key,
	          value: value,
	          previous: previous = state.last,
	          next: undefined,
	          removed: false
	        };
	        if (!state.first) state.first = entry;
	        if (previous) previous.next = entry;
	        if (DESCRIPTORS$m) state.size++;else that.size++; // add to index

	        if (index !== 'F') state.index[index] = entry;
	      }

	      return that;
	    };

	    var getEntry = function getEntry(that, key) {
	      var state = getInternalState(that); // fast case

	      var index = fastKey(key);
	      var entry;
	      if (index !== 'F') return state.index[index]; // frozen object case

	      for (entry = state.first; entry; entry = entry.next) {
	        if (entry.key == key) return entry;
	      }
	    };

	    redefineAll$4(Prototype, {
	      // `{ Map, Set }.prototype.clear()` methods
	      // https://tc39.es/ecma262/#sec-map.prototype.clear
	      // https://tc39.es/ecma262/#sec-set.prototype.clear
	      clear: function clear() {
	        var that = this;
	        var state = getInternalState(that);
	        var data = state.index;
	        var entry = state.first;

	        while (entry) {
	          entry.removed = true;
	          if (entry.previous) entry.previous = entry.previous.next = undefined;
	          delete data[entry.index];
	          entry = entry.next;
	        }

	        state.first = state.last = undefined;
	        if (DESCRIPTORS$m) state.size = 0;else that.size = 0;
	      },
	      // `{ Map, Set }.prototype.delete(key)` methods
	      // https://tc39.es/ecma262/#sec-map.prototype.delete
	      // https://tc39.es/ecma262/#sec-set.prototype.delete
	      'delete': function _delete(key) {
	        var that = this;
	        var state = getInternalState(that);
	        var entry = getEntry(that, key);

	        if (entry) {
	          var next = entry.next;
	          var prev = entry.previous;
	          delete state.index[entry.index];
	          entry.removed = true;
	          if (prev) prev.next = next;
	          if (next) next.previous = prev;
	          if (state.first == entry) state.first = next;
	          if (state.last == entry) state.last = prev;
	          if (DESCRIPTORS$m) state.size--;else that.size--;
	        }

	        return !!entry;
	      },
	      // `{ Map, Set }.prototype.forEach(callbackfn, thisArg = undefined)` methods
	      // https://tc39.es/ecma262/#sec-map.prototype.foreach
	      // https://tc39.es/ecma262/#sec-set.prototype.foreach
	      forEach: function forEach(callbackfn
	      /* , that = undefined */
	      ) {
	        var state = getInternalState(this);
	        var boundFunction = bind$7(callbackfn, arguments.length > 1 ? arguments[1] : undefined);
	        var entry;

	        while (entry = entry ? entry.next : state.first) {
	          boundFunction(entry.value, entry.key, this); // revert to the last existing entry

	          while (entry && entry.removed) {
	            entry = entry.previous;
	          }
	        }
	      },
	      // `{ Map, Set}.prototype.has(key)` methods
	      // https://tc39.es/ecma262/#sec-map.prototype.has
	      // https://tc39.es/ecma262/#sec-set.prototype.has
	      has: function has(key) {
	        return !!getEntry(this, key);
	      }
	    });
	    redefineAll$4(Prototype, IS_MAP ? {
	      // `Map.prototype.get(key)` method
	      // https://tc39.es/ecma262/#sec-map.prototype.get
	      get: function get(key) {
	        var entry = getEntry(this, key);
	        return entry && entry.value;
	      },
	      // `Map.prototype.set(key, value)` method
	      // https://tc39.es/ecma262/#sec-map.prototype.set
	      set: function set(key, value) {
	        return define(this, key === 0 ? 0 : key, value);
	      }
	    } : {
	      // `Set.prototype.add(value)` method
	      // https://tc39.es/ecma262/#sec-set.prototype.add
	      add: function add(value) {
	        return define(this, value = value === 0 ? 0 : value, value);
	      }
	    });
	    if (DESCRIPTORS$m) defineProperty$9(Prototype, 'size', {
	      get: function get() {
	        return getInternalState(this).size;
	      }
	    });
	    return Constructor;
	  },
	  setStrong: function setStrong(Constructor, CONSTRUCTOR_NAME, IS_MAP) {
	    var ITERATOR_NAME = CONSTRUCTOR_NAME + ' Iterator';
	    var getInternalCollectionState = internalStateGetterFor$1(CONSTRUCTOR_NAME);
	    var getInternalIteratorState = internalStateGetterFor$1(ITERATOR_NAME); // `{ Map, Set }.prototype.{ keys, values, entries, @@iterator }()` methods
	    // https://tc39.es/ecma262/#sec-map.prototype.entries
	    // https://tc39.es/ecma262/#sec-map.prototype.keys
	    // https://tc39.es/ecma262/#sec-map.prototype.values
	    // https://tc39.es/ecma262/#sec-map.prototype-@@iterator
	    // https://tc39.es/ecma262/#sec-set.prototype.entries
	    // https://tc39.es/ecma262/#sec-set.prototype.keys
	    // https://tc39.es/ecma262/#sec-set.prototype.values
	    // https://tc39.es/ecma262/#sec-set.prototype-@@iterator

	    defineIterator$1(Constructor, CONSTRUCTOR_NAME, function (iterated, kind) {
	      setInternalState$8(this, {
	        type: ITERATOR_NAME,
	        target: iterated,
	        state: getInternalCollectionState(iterated),
	        kind: kind,
	        last: undefined
	      });
	    }, function () {
	      var state = getInternalIteratorState(this);
	      var kind = state.kind;
	      var entry = state.last; // revert to the last existing entry

	      while (entry && entry.removed) {
	        entry = entry.previous;
	      } // get next entry


	      if (!state.target || !(state.last = entry = entry ? entry.next : state.state.first)) {
	        // or finish the iteration
	        state.target = undefined;
	        return {
	          value: undefined,
	          done: true
	        };
	      } // return step by kind


	      if (kind == 'keys') return {
	        value: entry.key,
	        done: false
	      };
	      if (kind == 'values') return {
	        value: entry.value,
	        done: false
	      };
	      return {
	        value: [entry.key, entry.value],
	        done: false
	      };
	    }, IS_MAP ? 'entries' : 'values', !IS_MAP, true); // `{ Map, Set }.prototype[@@species]` accessors
	    // https://tc39.es/ecma262/#sec-get-map-@@species
	    // https://tc39.es/ecma262/#sec-get-set-@@species

	    setSpecies$3(CONSTRUCTOR_NAME);
	  }
	};

	var collection$3 = collection$4;
	var collectionStrong$1 = collectionStrong$2; // `Map` constructor
	// https://tc39.es/ecma262/#sec-map-objects

	collection$3('Map', function (init) {
	  return function Map() {
	    return init(this, arguments.length ? arguments[0] : undefined);
	  };
	}, collectionStrong$1);

	var log$7 = Math.log; // `Math.log1p` method implementation
	// https://tc39.es/ecma262/#sec-math.log1p
	// eslint-disable-next-line es/no-math-log1p -- safe

	var mathLog1p = Math.log1p || function log1p(x) {
	  return (x = +x) > -1e-8 && x < 1e-8 ? x - x * x / 2 : log$7(1 + x);
	};

	var $$1L = _export;
	var log1p$1 = mathLog1p; // eslint-disable-next-line es/no-math-acosh -- required for testing

	var $acosh = Math.acosh;
	var log$6 = Math.log;
	var sqrt$4 = Math.sqrt;
	var LN2$1 = Math.LN2;
	var FORCED$k = !$acosh // V8 bug: https://code.google.com/p/v8/issues/detail?id=3509
	|| Math.floor($acosh(Number.MAX_VALUE)) != 710 // Tor Browser bug: Math.acosh(Infinity) -> NaN
	|| $acosh(Infinity) != Infinity; // `Math.acosh` method
	// https://tc39.es/ecma262/#sec-math.acosh

	$$1L({
	  target: 'Math',
	  stat: true,
	  forced: FORCED$k
	}, {
	  acosh: function acosh(x) {
	    return (x = +x) < 1 ? NaN : x > 94906265.62425156 ? log$6(x) + LN2$1 : log1p$1(x - 1 + sqrt$4(x - 1) * sqrt$4(x + 1));
	  }
	});

	var $$1K = _export; // eslint-disable-next-line es/no-math-asinh -- required for testing

	var $asinh = Math.asinh;
	var log$5 = Math.log;
	var sqrt$3 = Math.sqrt;

	function asinh(x) {
	  return !isFinite(x = +x) || x == 0 ? x : x < 0 ? -asinh(-x) : log$5(x + sqrt$3(x * x + 1));
	} // `Math.asinh` method
	// https://tc39.es/ecma262/#sec-math.asinh
	// Tor Browser bug: Math.asinh(0) -> -0


	$$1K({
	  target: 'Math',
	  stat: true,
	  forced: !($asinh && 1 / $asinh(0) > 0)
	}, {
	  asinh: asinh
	});

	var $$1J = _export; // eslint-disable-next-line es/no-math-atanh -- required for testing

	var $atanh = Math.atanh;
	var log$4 = Math.log; // `Math.atanh` method
	// https://tc39.es/ecma262/#sec-math.atanh
	// Tor Browser bug: Math.atanh(-0) -> 0

	$$1J({
	  target: 'Math',
	  stat: true,
	  forced: !($atanh && 1 / $atanh(-0) < 0)
	}, {
	  atanh: function atanh(x) {
	    return (x = +x) == 0 ? x : log$4((1 + x) / (1 - x)) / 2;
	  }
	});

	// https://tc39.es/ecma262/#sec-math.sign
	// eslint-disable-next-line es/no-math-sign -- safe

	var mathSign = Math.sign || function sign(x) {
	  // eslint-disable-next-line no-self-compare -- NaN check
	  return (x = +x) == 0 || x != x ? x : x < 0 ? -1 : 1;
	};

	var $$1I = _export;
	var sign$2 = mathSign;
	var abs$8 = Math.abs;
	var pow$4 = Math.pow; // `Math.cbrt` method
	// https://tc39.es/ecma262/#sec-math.cbrt

	$$1I({
	  target: 'Math',
	  stat: true
	}, {
	  cbrt: function cbrt(x) {
	    return sign$2(x = +x) * pow$4(abs$8(x), 1 / 3);
	  }
	});

	var $$1H = _export;
	var floor$8 = Math.floor;
	var log$3 = Math.log;
	var LOG2E = Math.LOG2E; // `Math.clz32` method
	// https://tc39.es/ecma262/#sec-math.clz32

	$$1H({
	  target: 'Math',
	  stat: true
	}, {
	  clz32: function clz32(x) {
	    return (x >>>= 0) ? 31 - floor$8(log$3(x + 0.5) * LOG2E) : 32;
	  }
	});

	var $expm1 = Math.expm1;
	var exp$2 = Math.exp; // `Math.expm1` method implementation
	// https://tc39.es/ecma262/#sec-math.expm1

	var mathExpm1 = !$expm1 // Old FF bug
	|| $expm1(10) > 22025.465794806719 || $expm1(10) < 22025.4657948067165168 // Tor Browser bug
	|| $expm1(-2e-17) != -2e-17 ? function expm1(x) {
	  return (x = +x) == 0 ? x : x > -1e-6 && x < 1e-6 ? x + x * x / 2 : exp$2(x) - 1;
	} : $expm1;

	var $$1G = _export;
	var expm1$3 = mathExpm1; // eslint-disable-next-line es/no-math-cosh -- required for testing

	var $cosh = Math.cosh;
	var abs$7 = Math.abs;
	var E$2 = Math.E; // `Math.cosh` method
	// https://tc39.es/ecma262/#sec-math.cosh

	$$1G({
	  target: 'Math',
	  stat: true,
	  forced: !$cosh || $cosh(710) === Infinity
	}, {
	  cosh: function cosh(x) {
	    var t = expm1$3(abs$7(x) - 1) + 1;
	    return (t + 1 / (t * E$2 * E$2)) * (E$2 / 2);
	  }
	});

	var $$1F = _export;
	var expm1$2 = mathExpm1; // `Math.expm1` method
	// https://tc39.es/ecma262/#sec-math.expm1
	// eslint-disable-next-line es/no-math-expm1 -- required for testing

	$$1F({
	  target: 'Math',
	  stat: true,
	  forced: expm1$2 != Math.expm1
	}, {
	  expm1: expm1$2
	});

	var sign$1 = mathSign;
	var abs$6 = Math.abs;
	var pow$3 = Math.pow;
	var EPSILON = pow$3(2, -52);
	var EPSILON32 = pow$3(2, -23);
	var MAX32 = pow$3(2, 127) * (2 - EPSILON32);
	var MIN32 = pow$3(2, -126);

	var roundTiesToEven = function roundTiesToEven(n) {
	  return n + 1 / EPSILON - 1 / EPSILON;
	}; // `Math.fround` method implementation
	// https://tc39.es/ecma262/#sec-math.fround
	// eslint-disable-next-line es/no-math-fround -- safe


	var mathFround = Math.fround || function fround(x) {
	  var $abs = abs$6(x);
	  var $sign = sign$1(x);
	  var a, result;
	  if ($abs < MIN32) return $sign * roundTiesToEven($abs / MIN32 / EPSILON32) * MIN32 * EPSILON32;
	  a = (1 + EPSILON32 / EPSILON) * $abs;
	  result = a - (a - $abs); // eslint-disable-next-line no-self-compare -- NaN check

	  if (result > MAX32 || result != result) return $sign * Infinity;
	  return $sign * result;
	};

	var $$1E = _export;
	var fround = mathFround; // `Math.fround` method
	// https://tc39.es/ecma262/#sec-math.fround

	$$1E({
	  target: 'Math',
	  stat: true
	}, {
	  fround: fround
	});

	var $$1D = _export; // eslint-disable-next-line es/no-math-hypot -- required for testing

	var $hypot = Math.hypot;
	var abs$5 = Math.abs;
	var sqrt$2 = Math.sqrt; // Chrome 77 bug
	// https://bugs.chromium.org/p/v8/issues/detail?id=9546

	var BUGGY = !!$hypot && $hypot(Infinity, NaN) !== Infinity; // `Math.hypot` method
	// https://tc39.es/ecma262/#sec-math.hypot

	$$1D({
	  target: 'Math',
	  stat: true,
	  forced: BUGGY
	}, {
	  // eslint-disable-next-line no-unused-vars -- required for `.length`
	  hypot: function hypot(value1, value2) {
	    var sum = 0;
	    var i = 0;
	    var aLen = arguments.length;
	    var larg = 0;
	    var arg, div;

	    while (i < aLen) {
	      arg = abs$5(arguments[i++]);

	      if (larg < arg) {
	        div = larg / arg;
	        sum = sum * div * div + 1;
	        larg = arg;
	      } else if (arg > 0) {
	        div = arg / larg;
	        sum += div * div;
	      } else sum += arg;
	    }

	    return larg === Infinity ? Infinity : larg * sqrt$2(sum);
	  }
	});

	var $$1C = _export;
	var fails$L = fails$18; // eslint-disable-next-line es/no-math-imul -- required for testing

	var $imul = Math.imul;
	var FORCED$j = fails$L(function () {
	  return $imul(0xFFFFFFFF, 5) != -5 || $imul.length != 2;
	}); // `Math.imul` method
	// https://tc39.es/ecma262/#sec-math.imul
	// some WebKit versions fails with big numbers, some has wrong arity

	$$1C({
	  target: 'Math',
	  stat: true,
	  forced: FORCED$j
	}, {
	  imul: function imul(x, y) {
	    var UINT16 = 0xFFFF;
	    var xn = +x;
	    var yn = +y;
	    var xl = UINT16 & xn;
	    var yl = UINT16 & yn;
	    return 0 | xl * yl + ((UINT16 & xn >>> 16) * yl + xl * (UINT16 & yn >>> 16) << 16 >>> 0);
	  }
	});

	var log$2 = Math.log;
	var LOG10E = Math.LOG10E; // eslint-disable-next-line es/no-math-log10 -- safe

	var mathLog10 = Math.log10 || function log10(x) {
	  return log$2(x) * LOG10E;
	};

	var $$1B = _export;
	var log10$1 = mathLog10; // `Math.log10` method
	// https://tc39.es/ecma262/#sec-math.log10

	$$1B({
	  target: 'Math',
	  stat: true
	}, {
	  log10: log10$1
	});

	var $$1A = _export;
	var log1p = mathLog1p; // `Math.log1p` method
	// https://tc39.es/ecma262/#sec-math.log1p

	$$1A({
	  target: 'Math',
	  stat: true
	}, {
	  log1p: log1p
	});

	var $$1z = _export;
	var log$1 = Math.log;
	var LN2 = Math.LN2; // `Math.log2` method
	// https://tc39.es/ecma262/#sec-math.log2

	$$1z({
	  target: 'Math',
	  stat: true
	}, {
	  log2: function log2(x) {
	    return log$1(x) / LN2;
	  }
	});

	var $$1y = _export;
	var sign = mathSign; // `Math.sign` method
	// https://tc39.es/ecma262/#sec-math.sign

	$$1y({
	  target: 'Math',
	  stat: true
	}, {
	  sign: sign
	});

	var $$1x = _export;
	var fails$K = fails$18;
	var expm1$1 = mathExpm1;
	var abs$4 = Math.abs;
	var exp$1 = Math.exp;
	var E$1 = Math.E;
	var FORCED$i = fails$K(function () {
	  // eslint-disable-next-line es/no-math-sinh -- required for testing
	  return Math.sinh(-2e-17) != -2e-17;
	}); // `Math.sinh` method
	// https://tc39.es/ecma262/#sec-math.sinh
	// V8 near Chromium 38 has a problem with very small numbers

	$$1x({
	  target: 'Math',
	  stat: true,
	  forced: FORCED$i
	}, {
	  sinh: function sinh(x) {
	    return abs$4(x = +x) < 1 ? (expm1$1(x) - expm1$1(-x)) / 2 : (exp$1(x - 1) - exp$1(-x - 1)) * (E$1 / 2);
	  }
	});

	var $$1w = _export;
	var expm1 = mathExpm1;
	var exp = Math.exp; // `Math.tanh` method
	// https://tc39.es/ecma262/#sec-math.tanh

	$$1w({
	  target: 'Math',
	  stat: true
	}, {
	  tanh: function tanh(x) {
	    var a = expm1(x = +x);
	    var b = expm1(-x);
	    return a == Infinity ? 1 : b == Infinity ? -1 : (a - b) / (exp(x) + exp(-x));
	  }
	});

	var setToStringTag$5 = setToStringTag$c; // Math[@@toStringTag] property
	// https://tc39.es/ecma262/#sec-math-@@tostringtag

	setToStringTag$5(Math, 'Math', true);

	var $$1v = _export;
	var ceil$1 = Math.ceil;
	var floor$7 = Math.floor; // `Math.trunc` method
	// https://tc39.es/ecma262/#sec-math.trunc

	$$1v({
	  target: 'Math',
	  stat: true
	}, {
	  trunc: function trunc(it) {
	    return (it > 0 ? floor$7 : ceil$1)(it);
	  }
	});

	var uncurryThis$D = functionUncurryThis; // `thisNumberValue` abstract operation
	// https://tc39.es/ecma262/#sec-thisnumbervalue

	var thisNumberValue$3 = uncurryThis$D(1.0.valueOf);

	var whitespaces$4 = "\t\n\x0B\f\r \xA0\u1680\u2000\u2001\u2002" + "\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200A\u202F\u205F\u3000\u2028\u2029\uFEFF";

	var uncurryThis$C = functionUncurryThis;
	var requireObjectCoercible$e = requireObjectCoercible$h;
	var toString$l = toString$p;
	var whitespaces$3 = whitespaces$4;
	var replace$7 = uncurryThis$C(''.replace);
	var whitespace = '[' + whitespaces$3 + ']';
	var ltrim = RegExp('^' + whitespace + whitespace + '*');
	var rtrim = RegExp(whitespace + whitespace + '*$'); // `String.prototype.{ trim, trimStart, trimEnd, trimLeft, trimRight }` methods implementation

	var createMethod$3 = function createMethod(TYPE) {
	  return function ($this) {
	    var string = toString$l(requireObjectCoercible$e($this));
	    if (TYPE & 1) string = replace$7(string, ltrim, '');
	    if (TYPE & 2) string = replace$7(string, rtrim, '');
	    return string;
	  };
	};

	var stringTrim = {
	  // `String.prototype.{ trimLeft, trimStart }` methods
	  // https://tc39.es/ecma262/#sec-string.prototype.trimstart
	  start: createMethod$3(1),
	  // `String.prototype.{ trimRight, trimEnd }` methods
	  // https://tc39.es/ecma262/#sec-string.prototype.trimend
	  end: createMethod$3(2),
	  // `String.prototype.trim` method
	  // https://tc39.es/ecma262/#sec-string.prototype.trim
	  trim: createMethod$3(3)
	};

	var DESCRIPTORS$l = descriptors;
	var global$N = global$1B;
	var uncurryThis$B = functionUncurryThis;
	var isForced$2 = isForced_1;
	var redefine$b = redefine$j.exports;
	var hasOwn$d = hasOwnProperty_1;
	var inheritIfRequired$3 = inheritIfRequired$6;
	var isPrototypeOf$5 = objectIsPrototypeOf;
	var isSymbol$2 = isSymbol$6;
	var toPrimitive = toPrimitive$2;
	var fails$J = fails$18;
	var getOwnPropertyNames$3 = objectGetOwnPropertyNames.f;
	var getOwnPropertyDescriptor$6 = objectGetOwnPropertyDescriptor.f;
	var defineProperty$8 = objectDefineProperty.f;
	var thisNumberValue$2 = thisNumberValue$3;
	var trim$2 = stringTrim.trim;
	var NUMBER = 'Number';
	var NativeNumber = global$N[NUMBER];
	var NumberPrototype = NativeNumber.prototype;
	var TypeError$e = global$N.TypeError;
	var arraySlice$6 = uncurryThis$B(''.slice);
	var charCodeAt$2 = uncurryThis$B(''.charCodeAt); // `ToNumeric` abstract operation
	// https://tc39.es/ecma262/#sec-tonumeric

	var toNumeric = function toNumeric(value) {
	  var primValue = toPrimitive(value, 'number');
	  return typeof primValue == 'bigint' ? primValue : toNumber(primValue);
	}; // `ToNumber` abstract operation
	// https://tc39.es/ecma262/#sec-tonumber


	var toNumber = function toNumber(argument) {
	  var it = toPrimitive(argument, 'number');
	  var first, third, radix, maxCode, digits, length, index, code;
	  if (isSymbol$2(it)) throw TypeError$e('Cannot convert a Symbol value to a number');

	  if (typeof it == 'string' && it.length > 2) {
	    it = trim$2(it);
	    first = charCodeAt$2(it, 0);

	    if (first === 43 || first === 45) {
	      third = charCodeAt$2(it, 2);
	      if (third === 88 || third === 120) return NaN; // Number('+0x1') should be NaN, old V8 fix
	    } else if (first === 48) {
	      switch (charCodeAt$2(it, 1)) {
	        case 66:
	        case 98:
	          radix = 2;
	          maxCode = 49;
	          break;
	        // fast equal of /^0b[01]+$/i

	        case 79:
	        case 111:
	          radix = 8;
	          maxCode = 55;
	          break;
	        // fast equal of /^0o[0-7]+$/i

	        default:
	          return +it;
	      }

	      digits = arraySlice$6(it, 2);
	      length = digits.length;

	      for (index = 0; index < length; index++) {
	        code = charCodeAt$2(digits, index); // parseInt parses a string to a first unavailable symbol
	        // but ToNumber should return NaN if a string contains unavailable symbols

	        if (code < 48 || code > maxCode) return NaN;
	      }

	      return parseInt(digits, radix);
	    }
	  }

	  return +it;
	}; // `Number` constructor
	// https://tc39.es/ecma262/#sec-number-constructor


	if (isForced$2(NUMBER, !NativeNumber(' 0o1') || !NativeNumber('0b1') || NativeNumber('+0x1'))) {
	  var NumberWrapper = function Number(value) {
	    var n = arguments.length < 1 ? 0 : NativeNumber(toNumeric(value));
	    var dummy = this; // check on 1..constructor(foo) case

	    return isPrototypeOf$5(NumberPrototype, dummy) && fails$J(function () {
	      thisNumberValue$2(dummy);
	    }) ? inheritIfRequired$3(Object(n), dummy, NumberWrapper) : n;
	  };

	  for (var keys$1 = DESCRIPTORS$l ? getOwnPropertyNames$3(NativeNumber) : ( // ES3:
	  'MAX_VALUE,MIN_VALUE,NaN,NEGATIVE_INFINITY,POSITIVE_INFINITY,' + // ES2015 (in case, if modules with ES2015 Number statics required before):
	  'EPSILON,MAX_SAFE_INTEGER,MIN_SAFE_INTEGER,isFinite,isInteger,isNaN,isSafeInteger,parseFloat,parseInt,' + // ESNext
	  'fromString,range').split(','), j = 0, key$2; keys$1.length > j; j++) {
	    if (hasOwn$d(NativeNumber, key$2 = keys$1[j]) && !hasOwn$d(NumberWrapper, key$2)) {
	      defineProperty$8(NumberWrapper, key$2, getOwnPropertyDescriptor$6(NativeNumber, key$2));
	    }
	  }

	  NumberWrapper.prototype = NumberPrototype;
	  NumberPrototype.constructor = NumberWrapper;
	  redefine$b(global$N, NUMBER, NumberWrapper);
	}

	var $$1u = _export; // `Number.EPSILON` constant
	// https://tc39.es/ecma262/#sec-number.epsilon

	$$1u({
	  target: 'Number',
	  stat: true
	}, {
	  EPSILON: Math.pow(2, -52)
	});

	var global$M = global$1B;
	var globalIsFinite = global$M.isFinite; // `Number.isFinite` method
	// https://tc39.es/ecma262/#sec-number.isfinite
	// eslint-disable-next-line es/no-number-isfinite -- safe

	var numberIsFinite$1 = Number.isFinite || function isFinite(it) {
	  return typeof it == 'number' && globalIsFinite(it);
	};

	var $$1t = _export;
	var numberIsFinite = numberIsFinite$1; // `Number.isFinite` method
	// https://tc39.es/ecma262/#sec-number.isfinite

	$$1t({
	  target: 'Number',
	  stat: true
	}, {
	  isFinite: numberIsFinite
	});

	var isObject$j = isObject$z;
	var floor$6 = Math.floor; // `IsIntegralNumber` abstract operation
	// https://tc39.es/ecma262/#sec-isintegralnumber
	// eslint-disable-next-line es/no-number-isinteger -- safe

	var isIntegralNumber$3 = Number.isInteger || function isInteger(it) {
	  return !isObject$j(it) && isFinite(it) && floor$6(it) === it;
	};

	var $$1s = _export;
	var isIntegralNumber$2 = isIntegralNumber$3; // `Number.isInteger` method
	// https://tc39.es/ecma262/#sec-number.isinteger

	$$1s({
	  target: 'Number',
	  stat: true
	}, {
	  isInteger: isIntegralNumber$2
	});

	var $$1r = _export; // `Number.isNaN` method
	// https://tc39.es/ecma262/#sec-number.isnan

	$$1r({
	  target: 'Number',
	  stat: true
	}, {
	  isNaN: function isNaN(number) {
	    // eslint-disable-next-line no-self-compare -- NaN check
	    return number != number;
	  }
	});

	var $$1q = _export;
	var isIntegralNumber$1 = isIntegralNumber$3;
	var abs$3 = Math.abs; // `Number.isSafeInteger` method
	// https://tc39.es/ecma262/#sec-number.issafeinteger

	$$1q({
	  target: 'Number',
	  stat: true
	}, {
	  isSafeInteger: function isSafeInteger(number) {
	    return isIntegralNumber$1(number) && abs$3(number) <= 0x1FFFFFFFFFFFFF;
	  }
	});

	var $$1p = _export; // `Number.MAX_SAFE_INTEGER` constant
	// https://tc39.es/ecma262/#sec-number.max_safe_integer

	$$1p({
	  target: 'Number',
	  stat: true
	}, {
	  MAX_SAFE_INTEGER: 0x1FFFFFFFFFFFFF
	});

	var $$1o = _export; // `Number.MIN_SAFE_INTEGER` constant
	// https://tc39.es/ecma262/#sec-number.min_safe_integer

	$$1o({
	  target: 'Number',
	  stat: true
	}, {
	  MIN_SAFE_INTEGER: -0x1FFFFFFFFFFFFF
	});

	var global$L = global$1B;
	var fails$I = fails$18;
	var uncurryThis$A = functionUncurryThis;
	var toString$k = toString$p;
	var trim$1 = stringTrim.trim;
	var whitespaces$2 = whitespaces$4;
	var charAt$9 = uncurryThis$A(''.charAt);
	var n$ParseFloat = global$L.parseFloat;
	var _Symbol$1 = global$L.Symbol;
	var ITERATOR$5 = _Symbol$1 && _Symbol$1.iterator;
	var FORCED$h = 1 / n$ParseFloat(whitespaces$2 + '-0') !== -Infinity // MS Edge 18- broken with boxed symbols
	|| ITERATOR$5 && !fails$I(function () {
	  n$ParseFloat(Object(ITERATOR$5));
	}); // `parseFloat` method
	// https://tc39.es/ecma262/#sec-parsefloat-string

	var numberParseFloat = FORCED$h ? function parseFloat(string) {
	  var trimmedString = trim$1(toString$k(string));
	  var result = n$ParseFloat(trimmedString);
	  return result === 0 && charAt$9(trimmedString, 0) == '-' ? -0 : result;
	} : n$ParseFloat;

	var $$1n = _export;
	var parseFloat$1 = numberParseFloat; // `Number.parseFloat` method
	// https://tc39.es/ecma262/#sec-number.parseFloat
	// eslint-disable-next-line es/no-number-parsefloat -- required for testing

	$$1n({
	  target: 'Number',
	  stat: true,
	  forced: Number.parseFloat != parseFloat$1
	}, {
	  parseFloat: parseFloat$1
	});

	var global$K = global$1B;
	var fails$H = fails$18;
	var uncurryThis$z = functionUncurryThis;
	var toString$j = toString$p;
	var trim = stringTrim.trim;
	var whitespaces$1 = whitespaces$4;
	var $parseInt$1 = global$K.parseInt;
	var _Symbol = global$K.Symbol;
	var ITERATOR$4 = _Symbol && _Symbol.iterator;
	var hex$1 = /^[+-]?0x/i;
	var exec$5 = uncurryThis$z(hex$1.exec);
	var FORCED$g = $parseInt$1(whitespaces$1 + '08') !== 8 || $parseInt$1(whitespaces$1 + '0x16') !== 22 // MS Edge 18- broken with boxed symbols
	|| ITERATOR$4 && !fails$H(function () {
	  $parseInt$1(Object(ITERATOR$4));
	}); // `parseInt` method
	// https://tc39.es/ecma262/#sec-parseint-string-radix

	var numberParseInt = FORCED$g ? function parseInt(string, radix) {
	  var S = trim(toString$j(string));
	  return $parseInt$1(S, radix >>> 0 || (exec$5(hex$1, S) ? 16 : 10));
	} : $parseInt$1;

	var $$1m = _export;
	var parseInt$2 = numberParseInt; // `Number.parseInt` method
	// https://tc39.es/ecma262/#sec-number.parseint
	// eslint-disable-next-line es/no-number-parseint -- required for testing

	$$1m({
	  target: 'Number',
	  stat: true,
	  forced: Number.parseInt != parseInt$2
	}, {
	  parseInt: parseInt$2
	});

	var global$J = global$1B;
	var toIntegerOrInfinity$7 = toIntegerOrInfinity$g;
	var toString$i = toString$p;
	var requireObjectCoercible$d = requireObjectCoercible$h;
	var RangeError$9 = global$J.RangeError; // `String.prototype.repeat` method implementation
	// https://tc39.es/ecma262/#sec-string.prototype.repeat

	var stringRepeat = function repeat(count) {
	  var str = toString$i(requireObjectCoercible$d(this));
	  var result = '';
	  var n = toIntegerOrInfinity$7(count);
	  if (n < 0 || n == Infinity) throw RangeError$9('Wrong number of repetitions');

	  for (; n > 0; (n >>>= 1) && (str += str)) {
	    if (n & 1) result += str;
	  }

	  return result;
	};

	var $$1l = _export;
	var global$I = global$1B;
	var uncurryThis$y = functionUncurryThis;
	var toIntegerOrInfinity$6 = toIntegerOrInfinity$g;
	var thisNumberValue$1 = thisNumberValue$3;
	var $repeat$2 = stringRepeat;
	var log10 = mathLog10;
	var fails$G = fails$18;
	var RangeError$8 = global$I.RangeError;
	var String$3 = global$I.String;
	var isFinite$1 = global$I.isFinite;
	var abs$2 = Math.abs;
	var floor$5 = Math.floor;
	var pow$2 = Math.pow;
	var round$1 = Math.round;
	var un$ToExponential = uncurryThis$y(1.0.toExponential);
	var repeat$3 = uncurryThis$y($repeat$2);
	var stringSlice$c = uncurryThis$y(''.slice); // Edge 17-

	var ROUNDS_PROPERLY = un$ToExponential(-6.9e-11, 4) === '-6.9000e-11' // IE11- && Edge 14-
	&& un$ToExponential(1.255, 2) === '1.25e+0' // FF86-, V8 ~ Chrome 49-50
	&& un$ToExponential(12345, 3) === '1.235e+4' // FF86-, V8 ~ Chrome 49-50
	&& un$ToExponential(25, 0) === '3e+1'; // IE8-

	var THROWS_ON_INFINITY_FRACTION = fails$G(function () {
	  un$ToExponential(1, Infinity);
	}) && fails$G(function () {
	  un$ToExponential(1, -Infinity);
	}); // Safari <11 && FF <50

	var PROPER_NON_FINITE_THIS_CHECK = !fails$G(function () {
	  un$ToExponential(Infinity, Infinity);
	}) && !fails$G(function () {
	  un$ToExponential(NaN, Infinity);
	});
	var FORCED$f = !ROUNDS_PROPERLY || !THROWS_ON_INFINITY_FRACTION || !PROPER_NON_FINITE_THIS_CHECK; // `Number.prototype.toExponential` method
	// https://tc39.es/ecma262/#sec-number.prototype.toexponential

	$$1l({
	  target: 'Number',
	  proto: true,
	  forced: FORCED$f
	}, {
	  toExponential: function toExponential(fractionDigits) {
	    var x = thisNumberValue$1(this);
	    if (fractionDigits === undefined) return un$ToExponential(x);
	    var f = toIntegerOrInfinity$6(fractionDigits);
	    if (!isFinite$1(x)) return String$3(x); // TODO: ES2018 increased the maximum number of fraction digits to 100, need to improve the implementation

	    if (f < 0 || f > 20) throw RangeError$8('Incorrect fraction digits');
	    if (ROUNDS_PROPERLY) return un$ToExponential(x, f);
	    var s = '';
	    var m = '';
	    var e = 0;
	    var c = '';
	    var d = '';

	    if (x < 0) {
	      s = '-';
	      x = -x;
	    }

	    if (x === 0) {
	      e = 0;
	      m = repeat$3('0', f + 1);
	    } else {
	      // this block is based on https://gist.github.com/SheetJSDev/1100ad56b9f856c95299ed0e068eea08
	      // TODO: improve accuracy with big fraction digits
	      var l = log10(x);
	      e = floor$5(l);
	      var n = 0;
	      var w = pow$2(10, e - f);
	      n = round$1(x / w);

	      if (2 * x >= (2 * n + 1) * w) {
	        n += 1;
	      }

	      if (n >= pow$2(10, f + 1)) {
	        n /= 10;
	        e += 1;
	      }

	      m = String$3(n);
	    }

	    if (f !== 0) {
	      m = stringSlice$c(m, 0, 1) + '.' + stringSlice$c(m, 1);
	    }

	    if (e === 0) {
	      c = '+';
	      d = '0';
	    } else {
	      c = e > 0 ? '+' : '-';
	      d = String$3(abs$2(e));
	    }

	    m += 'e' + c + d;
	    return s + m;
	  }
	});

	var $$1k = _export;
	var global$H = global$1B;
	var uncurryThis$x = functionUncurryThis;
	var toIntegerOrInfinity$5 = toIntegerOrInfinity$g;
	var thisNumberValue = thisNumberValue$3;
	var $repeat$1 = stringRepeat;
	var fails$F = fails$18;
	var RangeError$7 = global$H.RangeError;
	var String$2 = global$H.String;
	var floor$4 = Math.floor;
	var repeat$2 = uncurryThis$x($repeat$1);
	var stringSlice$b = uncurryThis$x(''.slice);
	var un$ToFixed = uncurryThis$x(1.0.toFixed);

	var pow$1 = function pow(x, n, acc) {
	  return n === 0 ? acc : n % 2 === 1 ? pow(x, n - 1, acc * x) : pow(x * x, n / 2, acc);
	};

	var log = function log(x) {
	  var n = 0;
	  var x2 = x;

	  while (x2 >= 4096) {
	    n += 12;
	    x2 /= 4096;
	  }

	  while (x2 >= 2) {
	    n += 1;
	    x2 /= 2;
	  }

	  return n;
	};

	var multiply = function multiply(data, n, c) {
	  var index = -1;
	  var c2 = c;

	  while (++index < 6) {
	    c2 += n * data[index];
	    data[index] = c2 % 1e7;
	    c2 = floor$4(c2 / 1e7);
	  }
	};

	var divide = function divide(data, n) {
	  var index = 6;
	  var c = 0;

	  while (--index >= 0) {
	    c += data[index];
	    data[index] = floor$4(c / n);
	    c = c % n * 1e7;
	  }
	};

	var dataToString = function dataToString(data) {
	  var index = 6;
	  var s = '';

	  while (--index >= 0) {
	    if (s !== '' || index === 0 || data[index] !== 0) {
	      var t = String$2(data[index]);
	      s = s === '' ? t : s + repeat$2('0', 7 - t.length) + t;
	    }
	  }

	  return s;
	};

	var FORCED$e = fails$F(function () {
	  return un$ToFixed(0.00008, 3) !== '0.000' || un$ToFixed(0.9, 0) !== '1' || un$ToFixed(1.255, 2) !== '1.25' || un$ToFixed(1000000000000000128.0, 0) !== '1000000000000000128';
	}) || !fails$F(function () {
	  // V8 ~ Android 4.3-
	  un$ToFixed({});
	}); // `Number.prototype.toFixed` method
	// https://tc39.es/ecma262/#sec-number.prototype.tofixed

	$$1k({
	  target: 'Number',
	  proto: true,
	  forced: FORCED$e
	}, {
	  toFixed: function toFixed(fractionDigits) {
	    var number = thisNumberValue(this);
	    var fractDigits = toIntegerOrInfinity$5(fractionDigits);
	    var data = [0, 0, 0, 0, 0, 0];
	    var sign = '';
	    var result = '0';
	    var e, z, j, k; // TODO: ES2018 increased the maximum number of fraction digits to 100, need to improve the implementation

	    if (fractDigits < 0 || fractDigits > 20) throw RangeError$7('Incorrect fraction digits'); // eslint-disable-next-line no-self-compare -- NaN check

	    if (number != number) return 'NaN';
	    if (number <= -1e21 || number >= 1e21) return String$2(number);

	    if (number < 0) {
	      sign = '-';
	      number = -number;
	    }

	    if (number > 1e-21) {
	      e = log(number * pow$1(2, 69, 1)) - 69;
	      z = e < 0 ? number * pow$1(2, -e, 1) : number / pow$1(2, e, 1);
	      z *= 0x10000000000000;
	      e = 52 - e;

	      if (e > 0) {
	        multiply(data, 0, z);
	        j = fractDigits;

	        while (j >= 7) {
	          multiply(data, 1e7, 0);
	          j -= 7;
	        }

	        multiply(data, pow$1(10, j, 1), 0);
	        j = e - 1;

	        while (j >= 23) {
	          divide(data, 1 << 23);
	          j -= 23;
	        }

	        divide(data, 1 << j);
	        multiply(data, 1, 1);
	        divide(data, 2);
	        result = dataToString(data);
	      } else {
	        multiply(data, 0, z);
	        multiply(data, 1 << -e, 0);
	        result = dataToString(data) + repeat$2('0', fractDigits);
	      }
	    }

	    if (fractDigits > 0) {
	      k = result.length;
	      result = sign + (k <= fractDigits ? '0.' + repeat$2('0', fractDigits - k) + result : stringSlice$b(result, 0, k - fractDigits) + '.' + stringSlice$b(result, k - fractDigits));
	    } else {
	      result = sign + result;
	    }

	    return result;
	  }
	});

	var DESCRIPTORS$k = descriptors;
	var uncurryThis$w = functionUncurryThis;
	var call$k = functionCall;
	var fails$E = fails$18;
	var objectKeys$2 = objectKeys$5;
	var getOwnPropertySymbolsModule = objectGetOwnPropertySymbols;
	var propertyIsEnumerableModule = objectPropertyIsEnumerable;
	var toObject$9 = toObject$o;
	var IndexedObject = indexedObject; // eslint-disable-next-line es/no-object-assign -- safe

	var $assign = Object.assign; // eslint-disable-next-line es/no-object-defineproperty -- required for testing

	var defineProperty$7 = Object.defineProperty;
	var concat$2 = uncurryThis$w([].concat); // `Object.assign` method
	// https://tc39.es/ecma262/#sec-object.assign

	var objectAssign = !$assign || fails$E(function () {
	  // should have correct order of operations (Edge bug)
	  if (DESCRIPTORS$k && $assign({
	    b: 1
	  }, $assign(defineProperty$7({}, 'a', {
	    enumerable: true,
	    get: function get() {
	      defineProperty$7(this, 'b', {
	        value: 3,
	        enumerable: false
	      });
	    }
	  }), {
	    b: 2
	  })).b !== 1) return true; // should work with symbols and should have deterministic property order (V8 bug)

	  var A = {};
	  var B = {}; // eslint-disable-next-line es/no-symbol -- safe

	  var symbol = Symbol();
	  var alphabet = 'abcdefghijklmnopqrst';
	  A[symbol] = 7;
	  alphabet.split('').forEach(function (chr) {
	    B[chr] = chr;
	  });
	  return $assign({}, A)[symbol] != 7 || objectKeys$2($assign({}, B)).join('') != alphabet;
	}) ? function assign(target, source) {
	  // eslint-disable-line no-unused-vars -- required for `.length`
	  var T = toObject$9(target);
	  var argumentsLength = arguments.length;
	  var index = 1;
	  var getOwnPropertySymbols = getOwnPropertySymbolsModule.f;
	  var propertyIsEnumerable = propertyIsEnumerableModule.f;

	  while (argumentsLength > index) {
	    var S = IndexedObject(arguments[index++]);
	    var keys = getOwnPropertySymbols ? concat$2(objectKeys$2(S), getOwnPropertySymbols(S)) : objectKeys$2(S);
	    var length = keys.length;
	    var j = 0;
	    var key;

	    while (length > j) {
	      key = keys[j++];
	      if (!DESCRIPTORS$k || call$k(propertyIsEnumerable, S, key)) T[key] = S[key];
	    }
	  }

	  return T;
	} : $assign;

	var $$1j = _export;
	var assign$1 = objectAssign; // `Object.assign` method
	// https://tc39.es/ecma262/#sec-object.assign
	// eslint-disable-next-line es/no-object-assign -- required for testing

	$$1j({
	  target: 'Object',
	  stat: true,
	  forced: Object.assign !== assign$1
	}, {
	  assign: assign$1
	});

	var global$G = global$1B;
	var fails$D = fails$18;
	var WEBKIT$1 = engineWebkitVersion; // Forced replacement object prototype accessors methods

	var objectPrototypeAccessorsForced = !fails$D(function () {
	  // This feature detection crashes old WebKit
	  // https://github.com/zloirock/core-js/issues/232
	  if (WEBKIT$1 && WEBKIT$1 < 535) return;
	  var key = Math.random(); // In FF throws only define methods
	  // eslint-disable-next-line no-undef, no-useless-call -- required for testing

	  __defineSetter__.call(null, key, function () {
	    /* empty */
	  });

	  delete global$G[key];
	});

	var $$1i = _export;
	var DESCRIPTORS$j = descriptors;
	var FORCED$d = objectPrototypeAccessorsForced;
	var aCallable$9 = aCallable$g;
	var toObject$8 = toObject$o;
	var definePropertyModule$4 = objectDefineProperty; // `Object.prototype.__defineGetter__` method
	// https://tc39.es/ecma262/#sec-object.prototype.__defineGetter__

	if (DESCRIPTORS$j) {
	  $$1i({
	    target: 'Object',
	    proto: true,
	    forced: FORCED$d
	  }, {
	    __defineGetter__: function __defineGetter__(P, getter) {
	      definePropertyModule$4.f(toObject$8(this), P, {
	        get: aCallable$9(getter),
	        enumerable: true,
	        configurable: true
	      });
	    }
	  });
	}

	var $$1h = _export;
	var DESCRIPTORS$i = descriptors;
	var defineProperties$2 = objectDefineProperties.f; // `Object.defineProperties` method
	// https://tc39.es/ecma262/#sec-object.defineproperties
	// eslint-disable-next-line es/no-object-defineproperties -- safe

	$$1h({
	  target: 'Object',
	  stat: true,
	  forced: Object.defineProperties !== defineProperties$2,
	  sham: !DESCRIPTORS$i
	}, {
	  defineProperties: defineProperties$2
	});

	var $$1g = _export;
	var DESCRIPTORS$h = descriptors;
	var defineProperty$6 = objectDefineProperty.f; // `Object.defineProperty` method
	// https://tc39.es/ecma262/#sec-object.defineproperty
	// eslint-disable-next-line es/no-object-defineproperty -- safe

	$$1g({
	  target: 'Object',
	  stat: true,
	  forced: Object.defineProperty !== defineProperty$6,
	  sham: !DESCRIPTORS$h
	}, {
	  defineProperty: defineProperty$6
	});

	var $$1f = _export;
	var DESCRIPTORS$g = descriptors;
	var FORCED$c = objectPrototypeAccessorsForced;
	var aCallable$8 = aCallable$g;
	var toObject$7 = toObject$o;
	var definePropertyModule$3 = objectDefineProperty; // `Object.prototype.__defineSetter__` method
	// https://tc39.es/ecma262/#sec-object.prototype.__defineSetter__

	if (DESCRIPTORS$g) {
	  $$1f({
	    target: 'Object',
	    proto: true,
	    forced: FORCED$c
	  }, {
	    __defineSetter__: function __defineSetter__(P, setter) {
	      definePropertyModule$3.f(toObject$7(this), P, {
	        set: aCallable$8(setter),
	        enumerable: true,
	        configurable: true
	      });
	    }
	  });
	}

	var DESCRIPTORS$f = descriptors;
	var uncurryThis$v = functionUncurryThis;
	var objectKeys$1 = objectKeys$5;
	var toIndexedObject$4 = toIndexedObject$f;
	var $propertyIsEnumerable = objectPropertyIsEnumerable.f;
	var propertyIsEnumerable = uncurryThis$v($propertyIsEnumerable);
	var push$8 = uncurryThis$v([].push); // `Object.{ entries, values }` methods implementation

	var createMethod$2 = function createMethod(TO_ENTRIES) {
	  return function (it) {
	    var O = toIndexedObject$4(it);
	    var keys = objectKeys$1(O);
	    var length = keys.length;
	    var i = 0;
	    var result = [];
	    var key;

	    while (length > i) {
	      key = keys[i++];

	      if (!DESCRIPTORS$f || propertyIsEnumerable(O, key)) {
	        push$8(result, TO_ENTRIES ? [key, O[key]] : O[key]);
	      }
	    }

	    return result;
	  };
	};

	var objectToArray = {
	  // `Object.entries` method
	  // https://tc39.es/ecma262/#sec-object.entries
	  entries: createMethod$2(true),
	  // `Object.values` method
	  // https://tc39.es/ecma262/#sec-object.values
	  values: createMethod$2(false)
	};

	var $$1e = _export;
	var $entries = objectToArray.entries; // `Object.entries` method
	// https://tc39.es/ecma262/#sec-object.entries

	$$1e({
	  target: 'Object',
	  stat: true
	}, {
	  entries: function entries(O) {
	    return $entries(O);
	  }
	});

	var $$1d = _export;
	var FREEZING$3 = freezing;
	var fails$C = fails$18;
	var isObject$i = isObject$z;
	var onFreeze$2 = internalMetadata.exports.onFreeze; // eslint-disable-next-line es/no-object-freeze -- safe

	var $freeze = Object.freeze;
	var FAILS_ON_PRIMITIVES$8 = fails$C(function () {
	  $freeze(1);
	}); // `Object.freeze` method
	// https://tc39.es/ecma262/#sec-object.freeze

	$$1d({
	  target: 'Object',
	  stat: true,
	  forced: FAILS_ON_PRIMITIVES$8,
	  sham: !FREEZING$3
	}, {
	  freeze: function freeze(it) {
	    return $freeze && isObject$i(it) ? $freeze(onFreeze$2(it)) : it;
	  }
	});

	var $$1c = _export;
	var iterate$5 = iterate$9;
	var createProperty$2 = createProperty$9; // `Object.fromEntries` method
	// https://github.com/tc39/proposal-object-from-entries

	$$1c({
	  target: 'Object',
	  stat: true
	}, {
	  fromEntries: function fromEntries(iterable) {
	    var obj = {};
	    iterate$5(iterable, function (k, v) {
	      createProperty$2(obj, k, v);
	    }, {
	      AS_ENTRIES: true
	    });
	    return obj;
	  }
	});

	var $$1b = _export;
	var fails$B = fails$18;
	var toIndexedObject$3 = toIndexedObject$f;
	var nativeGetOwnPropertyDescriptor$1 = objectGetOwnPropertyDescriptor.f;
	var DESCRIPTORS$e = descriptors;
	var FAILS_ON_PRIMITIVES$7 = fails$B(function () {
	  nativeGetOwnPropertyDescriptor$1(1);
	});
	var FORCED$b = !DESCRIPTORS$e || FAILS_ON_PRIMITIVES$7; // `Object.getOwnPropertyDescriptor` method
	// https://tc39.es/ecma262/#sec-object.getownpropertydescriptor

	$$1b({
	  target: 'Object',
	  stat: true,
	  forced: FORCED$b,
	  sham: !DESCRIPTORS$e
	}, {
	  getOwnPropertyDescriptor: function getOwnPropertyDescriptor(it, key) {
	    return nativeGetOwnPropertyDescriptor$1(toIndexedObject$3(it), key);
	  }
	});

	var $$1a = _export;
	var DESCRIPTORS$d = descriptors;
	var ownKeys$1 = ownKeys$3;
	var toIndexedObject$2 = toIndexedObject$f;
	var getOwnPropertyDescriptorModule$4 = objectGetOwnPropertyDescriptor;
	var createProperty$1 = createProperty$9; // `Object.getOwnPropertyDescriptors` method
	// https://tc39.es/ecma262/#sec-object.getownpropertydescriptors

	$$1a({
	  target: 'Object',
	  stat: true,
	  sham: !DESCRIPTORS$d
	}, {
	  getOwnPropertyDescriptors: function getOwnPropertyDescriptors(object) {
	    var O = toIndexedObject$2(object);
	    var getOwnPropertyDescriptor = getOwnPropertyDescriptorModule$4.f;
	    var keys = ownKeys$1(O);
	    var result = {};
	    var index = 0;
	    var key, descriptor;

	    while (keys.length > index) {
	      descriptor = getOwnPropertyDescriptor(O, key = keys[index++]);
	      if (descriptor !== undefined) createProperty$1(result, key, descriptor);
	    }

	    return result;
	  }
	});

	var $$19 = _export;
	var fails$A = fails$18;
	var getOwnPropertyNames$2 = objectGetOwnPropertyNamesExternal.f; // eslint-disable-next-line es/no-object-getownpropertynames -- required for testing

	var FAILS_ON_PRIMITIVES$6 = fails$A(function () {
	  return !Object.getOwnPropertyNames(1);
	}); // `Object.getOwnPropertyNames` method
	// https://tc39.es/ecma262/#sec-object.getownpropertynames

	$$19({
	  target: 'Object',
	  stat: true,
	  forced: FAILS_ON_PRIMITIVES$6
	}, {
	  getOwnPropertyNames: getOwnPropertyNames$2
	});

	var $$18 = _export;
	var fails$z = fails$18;
	var toObject$6 = toObject$o;
	var nativeGetPrototypeOf = objectGetPrototypeOf$1;
	var CORRECT_PROTOTYPE_GETTER$1 = correctPrototypeGetter;
	var FAILS_ON_PRIMITIVES$5 = fails$z(function () {
	  nativeGetPrototypeOf(1);
	}); // `Object.getPrototypeOf` method
	// https://tc39.es/ecma262/#sec-object.getprototypeof

	$$18({
	  target: 'Object',
	  stat: true,
	  forced: FAILS_ON_PRIMITIVES$5,
	  sham: !CORRECT_PROTOTYPE_GETTER$1
	}, {
	  getPrototypeOf: function getPrototypeOf(it) {
	    return nativeGetPrototypeOf(toObject$6(it));
	  }
	});

	var $$17 = _export;
	var hasOwn$c = hasOwnProperty_1; // `Object.hasOwn` method
	// https://github.com/tc39/proposal-accessible-object-hasownproperty

	$$17({
	  target: 'Object',
	  stat: true
	}, {
	  hasOwn: hasOwn$c
	});

	// https://tc39.es/ecma262/#sec-samevalue
	// eslint-disable-next-line es/no-object-is -- safe

	var sameValue$1 = Object.is || function is(x, y) {
	  // eslint-disable-next-line no-self-compare -- NaN check
	  return x === y ? x !== 0 || 1 / x === 1 / y : x != x && y != y;
	};

	var $$16 = _export;
	var is = sameValue$1; // `Object.is` method
	// https://tc39.es/ecma262/#sec-object.is

	$$16({
	  target: 'Object',
	  stat: true
	}, {
	  is: is
	});

	var $$15 = _export;
	var $isExtensible$1 = objectIsExtensible; // `Object.isExtensible` method
	// https://tc39.es/ecma262/#sec-object.isextensible
	// eslint-disable-next-line es/no-object-isextensible -- safe

	$$15({
	  target: 'Object',
	  stat: true,
	  forced: Object.isExtensible !== $isExtensible$1
	}, {
	  isExtensible: $isExtensible$1
	});

	var $$14 = _export;
	var fails$y = fails$18;
	var isObject$h = isObject$z;
	var classof$b = classofRaw$1;
	var ARRAY_BUFFER_NON_EXTENSIBLE$1 = arrayBufferNonExtensible; // eslint-disable-next-line es/no-object-isfrozen -- safe

	var $isFrozen = Object.isFrozen;
	var FAILS_ON_PRIMITIVES$4 = fails$y(function () {
	  $isFrozen(1);
	}); // `Object.isFrozen` method
	// https://tc39.es/ecma262/#sec-object.isfrozen

	$$14({
	  target: 'Object',
	  stat: true,
	  forced: FAILS_ON_PRIMITIVES$4 || ARRAY_BUFFER_NON_EXTENSIBLE$1
	}, {
	  isFrozen: function isFrozen(it) {
	    if (!isObject$h(it)) return true;
	    if (ARRAY_BUFFER_NON_EXTENSIBLE$1 && classof$b(it) == 'ArrayBuffer') return true;
	    return $isFrozen ? $isFrozen(it) : false;
	  }
	});

	var $$13 = _export;
	var fails$x = fails$18;
	var isObject$g = isObject$z;
	var classof$a = classofRaw$1;
	var ARRAY_BUFFER_NON_EXTENSIBLE = arrayBufferNonExtensible; // eslint-disable-next-line es/no-object-issealed -- safe

	var $isSealed = Object.isSealed;
	var FAILS_ON_PRIMITIVES$3 = fails$x(function () {
	  $isSealed(1);
	}); // `Object.isSealed` method
	// https://tc39.es/ecma262/#sec-object.issealed

	$$13({
	  target: 'Object',
	  stat: true,
	  forced: FAILS_ON_PRIMITIVES$3 || ARRAY_BUFFER_NON_EXTENSIBLE
	}, {
	  isSealed: function isSealed(it) {
	    if (!isObject$g(it)) return true;
	    if (ARRAY_BUFFER_NON_EXTENSIBLE && classof$a(it) == 'ArrayBuffer') return true;
	    return $isSealed ? $isSealed(it) : false;
	  }
	});

	var $$12 = _export;
	var toObject$5 = toObject$o;
	var nativeKeys = objectKeys$5;
	var fails$w = fails$18;
	var FAILS_ON_PRIMITIVES$2 = fails$w(function () {
	  nativeKeys(1);
	}); // `Object.keys` method
	// https://tc39.es/ecma262/#sec-object.keys

	$$12({
	  target: 'Object',
	  stat: true,
	  forced: FAILS_ON_PRIMITIVES$2
	}, {
	  keys: function keys(it) {
	    return nativeKeys(toObject$5(it));
	  }
	});

	var $$11 = _export;
	var DESCRIPTORS$c = descriptors;
	var FORCED$a = objectPrototypeAccessorsForced;
	var toObject$4 = toObject$o;
	var toPropertyKey$3 = toPropertyKey$8;
	var getPrototypeOf$4 = objectGetPrototypeOf$1;
	var getOwnPropertyDescriptor$5 = objectGetOwnPropertyDescriptor.f; // `Object.prototype.__lookupGetter__` method
	// https://tc39.es/ecma262/#sec-object.prototype.__lookupGetter__

	if (DESCRIPTORS$c) {
	  $$11({
	    target: 'Object',
	    proto: true,
	    forced: FORCED$a
	  }, {
	    __lookupGetter__: function __lookupGetter__(P) {
	      var O = toObject$4(this);
	      var key = toPropertyKey$3(P);
	      var desc;

	      do {
	        if (desc = getOwnPropertyDescriptor$5(O, key)) return desc.get;
	      } while (O = getPrototypeOf$4(O));
	    }
	  });
	}

	var $$10 = _export;
	var DESCRIPTORS$b = descriptors;
	var FORCED$9 = objectPrototypeAccessorsForced;
	var toObject$3 = toObject$o;
	var toPropertyKey$2 = toPropertyKey$8;
	var getPrototypeOf$3 = objectGetPrototypeOf$1;
	var getOwnPropertyDescriptor$4 = objectGetOwnPropertyDescriptor.f; // `Object.prototype.__lookupSetter__` method
	// https://tc39.es/ecma262/#sec-object.prototype.__lookupSetter__

	if (DESCRIPTORS$b) {
	  $$10({
	    target: 'Object',
	    proto: true,
	    forced: FORCED$9
	  }, {
	    __lookupSetter__: function __lookupSetter__(P) {
	      var O = toObject$3(this);
	      var key = toPropertyKey$2(P);
	      var desc;

	      do {
	        if (desc = getOwnPropertyDescriptor$4(O, key)) return desc.set;
	      } while (O = getPrototypeOf$3(O));
	    }
	  });
	}

	var $$$ = _export;
	var isObject$f = isObject$z;
	var onFreeze$1 = internalMetadata.exports.onFreeze;
	var FREEZING$2 = freezing;
	var fails$v = fails$18; // eslint-disable-next-line es/no-object-preventextensions -- safe

	var $preventExtensions = Object.preventExtensions;
	var FAILS_ON_PRIMITIVES$1 = fails$v(function () {
	  $preventExtensions(1);
	}); // `Object.preventExtensions` method
	// https://tc39.es/ecma262/#sec-object.preventextensions

	$$$({
	  target: 'Object',
	  stat: true,
	  forced: FAILS_ON_PRIMITIVES$1,
	  sham: !FREEZING$2
	}, {
	  preventExtensions: function preventExtensions(it) {
	    return $preventExtensions && isObject$f(it) ? $preventExtensions(onFreeze$1(it)) : it;
	  }
	});

	var $$_ = _export;
	var isObject$e = isObject$z;
	var onFreeze = internalMetadata.exports.onFreeze;
	var FREEZING$1 = freezing;
	var fails$u = fails$18; // eslint-disable-next-line es/no-object-seal -- safe

	var $seal = Object.seal;
	var FAILS_ON_PRIMITIVES = fails$u(function () {
	  $seal(1);
	}); // `Object.seal` method
	// https://tc39.es/ecma262/#sec-object.seal

	$$_({
	  target: 'Object',
	  stat: true,
	  forced: FAILS_ON_PRIMITIVES,
	  sham: !FREEZING$1
	}, {
	  seal: function seal(it) {
	    return $seal && isObject$e(it) ? $seal(onFreeze(it)) : it;
	  }
	});

	var $$Z = _export;
	var setPrototypeOf$3 = objectSetPrototypeOf$1; // `Object.setPrototypeOf` method
	// https://tc39.es/ecma262/#sec-object.setprototypeof

	$$Z({
	  target: 'Object',
	  stat: true
	}, {
	  setPrototypeOf: setPrototypeOf$3
	});

	var TO_STRING_TAG_SUPPORT$1 = toStringTagSupport;
	var classof$9 = classof$i; // `Object.prototype.toString` method implementation
	// https://tc39.es/ecma262/#sec-object.prototype.tostring

	var objectToString = TO_STRING_TAG_SUPPORT$1 ? {}.toString : function toString() {
	  return '[object ' + classof$9(this) + ']';
	};

	var TO_STRING_TAG_SUPPORT = toStringTagSupport;
	var redefine$a = redefine$j.exports;
	var toString$h = objectToString; // `Object.prototype.toString` method
	// https://tc39.es/ecma262/#sec-object.prototype.tostring

	if (!TO_STRING_TAG_SUPPORT) {
	  redefine$a(Object.prototype, 'toString', toString$h, {
	    unsafe: true
	  });
	}

	var $$Y = _export;
	var $values = objectToArray.values; // `Object.values` method
	// https://tc39.es/ecma262/#sec-object.values

	$$Y({
	  target: 'Object',
	  stat: true
	}, {
	  values: function values(O) {
	    return $values(O);
	  }
	});

	var $$X = _export;
	var $parseFloat = numberParseFloat; // `parseFloat` method
	// https://tc39.es/ecma262/#sec-parsefloat-string

	$$X({
	  global: true,
	  forced: parseFloat != $parseFloat
	}, {
	  parseFloat: $parseFloat
	});

	var $$W = _export;
	var $parseInt = numberParseInt; // `parseInt` method
	// https://tc39.es/ecma262/#sec-parseint-string-radix

	$$W({
	  global: true,
	  forced: parseInt != $parseInt
	}, {
	  parseInt: $parseInt
	});

	var global$F = global$1B;
	var nativePromiseConstructor = global$F.Promise;

	var global$E = global$1B;
	var isConstructor$1 = isConstructor$6;
	var tryToString$1 = tryToString$5;
	var TypeError$d = global$E.TypeError; // `Assert: IsConstructor(argument) is true`

	var aConstructor$3 = function aConstructor(argument) {
	  if (isConstructor$1(argument)) return argument;
	  throw TypeError$d(tryToString$1(argument) + ' is not a constructor');
	};

	var anObject$p = anObject$B;
	var aConstructor$2 = aConstructor$3;
	var wellKnownSymbol$d = wellKnownSymbol$y;
	var SPECIES$2 = wellKnownSymbol$d('species'); // `SpeciesConstructor` abstract operation
	// https://tc39.es/ecma262/#sec-speciesconstructor

	var speciesConstructor$5 = function speciesConstructor(O, defaultConstructor) {
	  var C = anObject$p(O).constructor;
	  var S;
	  return C === undefined || (S = anObject$p(C)[SPECIES$2]) == undefined ? defaultConstructor : aConstructor$2(S);
	};

	var global$D = global$1B;
	var TypeError$c = global$D.TypeError;

	var validateArgumentsLength$5 = function validateArgumentsLength(passed, required) {
	  if (passed < required) throw TypeError$c('Not enough arguments');
	  return passed;
	};

	var userAgent$3 = engineUserAgent;
	var engineIsIos = /(?:ipad|iphone|ipod).*applewebkit/i.test(userAgent$3);

	var global$C = global$1B;
	var apply$5 = functionApply$1;
	var bind$6 = functionBindContext;
	var isCallable$9 = isCallable$u;
	var hasOwn$b = hasOwnProperty_1;
	var fails$t = fails$18;
	var html = html$2;
	var arraySlice$5 = arraySlice$a;
	var createElement = documentCreateElement$2;
	var validateArgumentsLength$4 = validateArgumentsLength$5;
	var IS_IOS$1 = engineIsIos;
	var IS_NODE$4 = engineIsNode;
	var set$3 = global$C.setImmediate;
	var clear = global$C.clearImmediate;
	var process$3 = global$C.process;
	var Dispatch$1 = global$C.Dispatch;
	var Function$2 = global$C.Function;
	var MessageChannel = global$C.MessageChannel;
	var String$1 = global$C.String;
	var counter = 0;
	var queue$1 = {};
	var ONREADYSTATECHANGE = 'onreadystatechange';
	var location$1, defer, channel, port;

	try {
	  // Deno throws a ReferenceError on `location` access without `--location` flag
	  location$1 = global$C.location;
	} catch (error) {
	  /* empty */
	}

	var run = function run(id) {
	  if (hasOwn$b(queue$1, id)) {
	    var fn = queue$1[id];
	    delete queue$1[id];
	    fn();
	  }
	};

	var runner = function runner(id) {
	  return function () {
	    run(id);
	  };
	};

	var listener = function listener(event) {
	  run(event.data);
	};

	var post = function post(id) {
	  // old engines have not location.origin
	  global$C.postMessage(String$1(id), location$1.protocol + '//' + location$1.host);
	}; // Node.js 0.9+ & IE10+ has setImmediate, otherwise:


	if (!set$3 || !clear) {
	  set$3 = function setImmediate(handler) {
	    validateArgumentsLength$4(arguments.length, 1);
	    var fn = isCallable$9(handler) ? handler : Function$2(handler);
	    var args = arraySlice$5(arguments, 1);

	    queue$1[++counter] = function () {
	      apply$5(fn, undefined, args);
	    };

	    defer(counter);
	    return counter;
	  };

	  clear = function clearImmediate(id) {
	    delete queue$1[id];
	  }; // Node.js 0.8-


	  if (IS_NODE$4) {
	    defer = function defer(id) {
	      process$3.nextTick(runner(id));
	    }; // Sphere (JS game engine) Dispatch API

	  } else if (Dispatch$1 && Dispatch$1.now) {
	    defer = function defer(id) {
	      Dispatch$1.now(runner(id));
	    }; // Browsers with MessageChannel, includes WebWorkers
	    // except iOS - https://github.com/zloirock/core-js/issues/624

	  } else if (MessageChannel && !IS_IOS$1) {
	    channel = new MessageChannel();
	    port = channel.port2;
	    channel.port1.onmessage = listener;
	    defer = bind$6(port.postMessage, port); // Browsers with postMessage, skip WebWorkers
	    // IE8 has postMessage, but it's sync & typeof its postMessage is 'object'
	  } else if (global$C.addEventListener && isCallable$9(global$C.postMessage) && !global$C.importScripts && location$1 && location$1.protocol !== 'file:' && !fails$t(post)) {
	    defer = post;
	    global$C.addEventListener('message', listener, false); // IE8-
	  } else if (ONREADYSTATECHANGE in createElement('script')) {
	    defer = function defer(id) {
	      html.appendChild(createElement('script'))[ONREADYSTATECHANGE] = function () {
	        html.removeChild(this);
	        run(id);
	      };
	    }; // Rest old browsers

	  } else {
	    defer = function defer(id) {
	      setTimeout(runner(id), 0);
	    };
	  }
	}

	var task$2 = {
	  set: set$3,
	  clear: clear
	};

	var userAgent$2 = engineUserAgent;
	var global$B = global$1B;
	var engineIsIosPebble = /ipad|iphone|ipod/i.test(userAgent$2) && global$B.Pebble !== undefined;

	var userAgent$1 = engineUserAgent;
	var engineIsWebosWebkit = /web0s(?!.*chrome)/i.test(userAgent$1);

	var global$A = global$1B;
	var bind$5 = functionBindContext;
	var getOwnPropertyDescriptor$3 = objectGetOwnPropertyDescriptor.f;
	var macrotask = task$2.set;
	var IS_IOS = engineIsIos;
	var IS_IOS_PEBBLE = engineIsIosPebble;
	var IS_WEBOS_WEBKIT = engineIsWebosWebkit;
	var IS_NODE$3 = engineIsNode;
	var MutationObserver$1 = global$A.MutationObserver || global$A.WebKitMutationObserver;
	var document$2 = global$A.document;
	var process$2 = global$A.process;
	var Promise$1 = global$A.Promise; // Node.js 11 shows ExperimentalWarning on getting `queueMicrotask`

	var queueMicrotaskDescriptor = getOwnPropertyDescriptor$3(global$A, 'queueMicrotask');
	var queueMicrotask = queueMicrotaskDescriptor && queueMicrotaskDescriptor.value;
	var flush, head, last, notify$1, toggle, node, promise, then; // modern engines have queueMicrotask method

	if (!queueMicrotask) {
	  flush = function flush() {
	    var parent, fn;
	    if (IS_NODE$3 && (parent = process$2.domain)) parent.exit();

	    while (head) {
	      fn = head.fn;
	      head = head.next;

	      try {
	        fn();
	      } catch (error) {
	        if (head) notify$1();else last = undefined;
	        throw error;
	      }
	    }

	    last = undefined;
	    if (parent) parent.enter();
	  }; // browsers with MutationObserver, except iOS - https://github.com/zloirock/core-js/issues/339
	  // also except WebOS Webkit https://github.com/zloirock/core-js/issues/898


	  if (!IS_IOS && !IS_NODE$3 && !IS_WEBOS_WEBKIT && MutationObserver$1 && document$2) {
	    toggle = true;
	    node = document$2.createTextNode('');
	    new MutationObserver$1(flush).observe(node, {
	      characterData: true
	    });

	    notify$1 = function notify() {
	      node.data = toggle = !toggle;
	    }; // environments with maybe non-completely correct, but existent Promise

	  } else if (!IS_IOS_PEBBLE && Promise$1 && Promise$1.resolve) {
	    // Promise.resolve without an argument throws an error in LG WebOS 2
	    promise = Promise$1.resolve(undefined); // workaround of WebKit ~ iOS Safari 10.1 bug

	    promise.constructor = Promise$1;
	    then = bind$5(promise.then, promise);

	    notify$1 = function notify() {
	      then(flush);
	    }; // Node.js without promises

	  } else if (IS_NODE$3) {
	    notify$1 = function notify() {
	      process$2.nextTick(flush);
	    }; // for other environments - macrotask based on:
	    // - setImmediate
	    // - MessageChannel
	    // - window.postMessag
	    // - onreadystatechange
	    // - setTimeout

	  } else {
	    // strange IE + webpack dev server bug - use .bind(global)
	    macrotask = bind$5(macrotask, global$A);

	    notify$1 = function notify() {
	      macrotask(flush);
	    };
	  }
	}

	var microtask$2 = queueMicrotask || function (fn) {
	  var task = {
	    fn: fn,
	    next: undefined
	  };
	  if (last) last.next = task;

	  if (!head) {
	    head = task;
	    notify$1();
	  }

	  last = task;
	};

	var newPromiseCapability$2 = {};

	var aCallable$7 = aCallable$g;

	var PromiseCapability = function PromiseCapability(C) {
	  var resolve, reject;
	  this.promise = new C(function ($$resolve, $$reject) {
	    if (resolve !== undefined || reject !== undefined) throw TypeError('Bad Promise constructor');
	    resolve = $$resolve;
	    reject = $$reject;
	  });
	  this.resolve = aCallable$7(resolve);
	  this.reject = aCallable$7(reject);
	}; // `NewPromiseCapability` abstract operation
	// https://tc39.es/ecma262/#sec-newpromisecapability


	newPromiseCapability$2.f = function (C) {
	  return new PromiseCapability(C);
	};

	var anObject$o = anObject$B;
	var isObject$d = isObject$z;
	var newPromiseCapability$1 = newPromiseCapability$2;

	var promiseResolve$2 = function promiseResolve(C, x) {
	  anObject$o(C);
	  if (isObject$d(x) && x.constructor === C) return x;
	  var promiseCapability = newPromiseCapability$1.f(C);
	  var resolve = promiseCapability.resolve;
	  resolve(x);
	  return promiseCapability.promise;
	};

	var global$z = global$1B;

	var hostReportErrors$1 = function hostReportErrors(a, b) {
	  var console = global$z.console;

	  if (console && console.error) {
	    arguments.length == 1 ? console.error(a) : console.error(a, b);
	  }
	};

	var perform$3 = function perform(exec) {
	  try {
	    return {
	      error: false,
	      value: exec()
	    };
	  } catch (error) {
	    return {
	      error: true,
	      value: error
	    };
	  }
	};

	var Queue$1 = function Queue() {
	  this.head = null;
	  this.tail = null;
	};

	Queue$1.prototype = {
	  add: function add(item) {
	    var entry = {
	      item: item,
	      next: null
	    };
	    if (this.head) this.tail.next = entry;else this.head = entry;
	    this.tail = entry;
	  },
	  get: function get() {
	    var entry = this.head;

	    if (entry) {
	      this.head = entry.next;
	      if (this.tail === entry) this.tail = null;
	      return entry.item;
	    }
	  }
	};
	var queue = Queue$1;

	var engineIsBrowser = (typeof window === "undefined" ? "undefined" : _typeof(window)) == 'object';

	var $$V = _export;
	var global$y = global$1B;
	var getBuiltIn$8 = getBuiltIn$j;
	var call$j = functionCall;
	var NativePromise$1 = nativePromiseConstructor;
	var redefine$9 = redefine$j.exports;
	var redefineAll$3 = redefineAll$6;
	var setPrototypeOf$2 = objectSetPrototypeOf$1;
	var setToStringTag$4 = setToStringTag$c;
	var setSpecies$2 = setSpecies$6;
	var aCallable$6 = aCallable$g;
	var isCallable$8 = isCallable$u;
	var isObject$c = isObject$z;
	var anInstance$6 = anInstance$a;
	var inspectSource = inspectSource$4;
	var iterate$4 = iterate$9;
	var checkCorrectnessOfIteration$1 = checkCorrectnessOfIteration$4;
	var speciesConstructor$4 = speciesConstructor$5;
	var task$1 = task$2.set;
	var microtask$1 = microtask$2;
	var promiseResolve$1 = promiseResolve$2;
	var hostReportErrors = hostReportErrors$1;
	var newPromiseCapabilityModule$2 = newPromiseCapability$2;
	var perform$2 = perform$3;
	var Queue = queue;
	var InternalStateModule$7 = internalState;
	var isForced$1 = isForced_1;
	var wellKnownSymbol$c = wellKnownSymbol$y;
	var IS_BROWSER = engineIsBrowser;
	var IS_NODE$2 = engineIsNode;
	var V8_VERSION = engineV8Version;
	var SPECIES$1 = wellKnownSymbol$c('species');
	var PROMISE = 'Promise';
	var getInternalState$7 = InternalStateModule$7.getterFor(PROMISE);
	var setInternalState$7 = InternalStateModule$7.set;
	var getInternalPromiseState = InternalStateModule$7.getterFor(PROMISE);
	var NativePromisePrototype = NativePromise$1 && NativePromise$1.prototype;
	var PromiseConstructor = NativePromise$1;
	var PromisePrototype = NativePromisePrototype;
	var TypeError$b = global$y.TypeError;
	var document$1 = global$y.document;
	var process$1 = global$y.process;
	var newPromiseCapability = newPromiseCapabilityModule$2.f;
	var newGenericPromiseCapability = newPromiseCapability;
	var DISPATCH_EVENT = !!(document$1 && document$1.createEvent && global$y.dispatchEvent);
	var NATIVE_REJECTION_EVENT = isCallable$8(global$y.PromiseRejectionEvent);
	var UNHANDLED_REJECTION = 'unhandledrejection';
	var REJECTION_HANDLED = 'rejectionhandled';
	var PENDING = 0;
	var FULFILLED = 1;
	var REJECTED = 2;
	var HANDLED = 1;
	var UNHANDLED = 2;
	var SUBCLASSING = false;
	var Internal, OwnPromiseCapability, PromiseWrapper, nativeThen;
	var FORCED$8 = isForced$1(PROMISE, function () {
	  var PROMISE_CONSTRUCTOR_SOURCE = inspectSource(PromiseConstructor);
	  var GLOBAL_CORE_JS_PROMISE = PROMISE_CONSTRUCTOR_SOURCE !== String(PromiseConstructor); // V8 6.6 (Node 10 and Chrome 66) have a bug with resolving custom thenables
	  // https://bugs.chromium.org/p/chromium/issues/detail?id=830565
	  // We can't detect it synchronously, so just check versions

	  if (!GLOBAL_CORE_JS_PROMISE && V8_VERSION === 66) return true; // We need Promise#finally in the pure version for preventing prototype pollution
	  // deoptimization and performance degradation
	  // https://github.com/zloirock/core-js/issues/679

	  if (V8_VERSION >= 51 && /native code/.test(PROMISE_CONSTRUCTOR_SOURCE)) return false; // Detect correctness of subclassing with @@species support

	  var promise = new PromiseConstructor(function (resolve) {
	    resolve(1);
	  });

	  var FakePromise = function FakePromise(exec) {
	    exec(function () {
	      /* empty */
	    }, function () {
	      /* empty */
	    });
	  };

	  var constructor = promise.constructor = {};
	  constructor[SPECIES$1] = FakePromise;
	  SUBCLASSING = promise.then(function () {
	    /* empty */
	  }) instanceof FakePromise;
	  if (!SUBCLASSING) return true; // Unhandled rejections tracking support, NodeJS Promise without it fails @@species test

	  return !GLOBAL_CORE_JS_PROMISE && IS_BROWSER && !NATIVE_REJECTION_EVENT;
	});
	var INCORRECT_ITERATION = FORCED$8 || !checkCorrectnessOfIteration$1(function (iterable) {
	  PromiseConstructor.all(iterable)['catch'](function () {
	    /* empty */
	  });
	}); // helpers

	var isThenable = function isThenable(it) {
	  var then;
	  return isObject$c(it) && isCallable$8(then = it.then) ? then : false;
	};

	var callReaction = function callReaction(reaction, state) {
	  var value = state.value;
	  var ok = state.state == FULFILLED;
	  var handler = ok ? reaction.ok : reaction.fail;
	  var resolve = reaction.resolve;
	  var reject = reaction.reject;
	  var domain = reaction.domain;
	  var result, then, exited;

	  try {
	    if (handler) {
	      if (!ok) {
	        if (state.rejection === UNHANDLED) onHandleUnhandled(state);
	        state.rejection = HANDLED;
	      }

	      if (handler === true) result = value;else {
	        if (domain) domain.enter();
	        result = handler(value); // can throw

	        if (domain) {
	          domain.exit();
	          exited = true;
	        }
	      }

	      if (result === reaction.promise) {
	        reject(TypeError$b('Promise-chain cycle'));
	      } else if (then = isThenable(result)) {
	        call$j(then, result, resolve, reject);
	      } else resolve(result);
	    } else reject(value);
	  } catch (error) {
	    if (domain && !exited) domain.exit();
	    reject(error);
	  }
	};

	var notify = function notify(state, isReject) {
	  if (state.notified) return;
	  state.notified = true;
	  microtask$1(function () {
	    var reactions = state.reactions;
	    var reaction;

	    while (reaction = reactions.get()) {
	      callReaction(reaction, state);
	    }

	    state.notified = false;
	    if (isReject && !state.rejection) onUnhandled(state);
	  });
	};

	var dispatchEvent$1 = function dispatchEvent(name, promise, reason) {
	  var event, handler;

	  if (DISPATCH_EVENT) {
	    event = document$1.createEvent('Event');
	    event.promise = promise;
	    event.reason = reason;
	    event.initEvent(name, false, true);
	    global$y.dispatchEvent(event);
	  } else event = {
	    promise: promise,
	    reason: reason
	  };

	  if (!NATIVE_REJECTION_EVENT && (handler = global$y['on' + name])) handler(event);else if (name === UNHANDLED_REJECTION) hostReportErrors('Unhandled promise rejection', reason);
	};

	var onUnhandled = function onUnhandled(state) {
	  call$j(task$1, global$y, function () {
	    var promise = state.facade;
	    var value = state.value;
	    var IS_UNHANDLED = isUnhandled(state);
	    var result;

	    if (IS_UNHANDLED) {
	      result = perform$2(function () {
	        if (IS_NODE$2) {
	          process$1.emit('unhandledRejection', value, promise);
	        } else dispatchEvent$1(UNHANDLED_REJECTION, promise, value);
	      }); // Browsers should not trigger `rejectionHandled` event if it was handled here, NodeJS - should

	      state.rejection = IS_NODE$2 || isUnhandled(state) ? UNHANDLED : HANDLED;
	      if (result.error) throw result.value;
	    }
	  });
	};

	var isUnhandled = function isUnhandled(state) {
	  return state.rejection !== HANDLED && !state.parent;
	};

	var onHandleUnhandled = function onHandleUnhandled(state) {
	  call$j(task$1, global$y, function () {
	    var promise = state.facade;

	    if (IS_NODE$2) {
	      process$1.emit('rejectionHandled', promise);
	    } else dispatchEvent$1(REJECTION_HANDLED, promise, state.value);
	  });
	};

	var bind$4 = function bind(fn, state, unwrap) {
	  return function (value) {
	    fn(state, value, unwrap);
	  };
	};

	var internalReject = function internalReject(state, value, unwrap) {
	  if (state.done) return;
	  state.done = true;
	  if (unwrap) state = unwrap;
	  state.value = value;
	  state.state = REJECTED;
	  notify(state, true);
	};

	var internalResolve = function internalResolve(state, value, unwrap) {
	  if (state.done) return;
	  state.done = true;
	  if (unwrap) state = unwrap;

	  try {
	    if (state.facade === value) throw TypeError$b("Promise can't be resolved itself");
	    var then = isThenable(value);

	    if (then) {
	      microtask$1(function () {
	        var wrapper = {
	          done: false
	        };

	        try {
	          call$j(then, value, bind$4(internalResolve, wrapper, state), bind$4(internalReject, wrapper, state));
	        } catch (error) {
	          internalReject(wrapper, error, state);
	        }
	      });
	    } else {
	      state.value = value;
	      state.state = FULFILLED;
	      notify(state, false);
	    }
	  } catch (error) {
	    internalReject({
	      done: false
	    }, error, state);
	  }
	}; // constructor polyfill


	if (FORCED$8) {
	  // 25.4.3.1 Promise(executor)
	  PromiseConstructor = function Promise(executor) {
	    anInstance$6(this, PromisePrototype);
	    aCallable$6(executor);
	    call$j(Internal, this);
	    var state = getInternalState$7(this);

	    try {
	      executor(bind$4(internalResolve, state), bind$4(internalReject, state));
	    } catch (error) {
	      internalReject(state, error);
	    }
	  };

	  PromisePrototype = PromiseConstructor.prototype; // eslint-disable-next-line no-unused-vars -- required for `.length`

	  Internal = function Promise(executor) {
	    setInternalState$7(this, {
	      type: PROMISE,
	      done: false,
	      notified: false,
	      parent: false,
	      reactions: new Queue(),
	      rejection: false,
	      state: PENDING,
	      value: undefined
	    });
	  };

	  Internal.prototype = redefineAll$3(PromisePrototype, {
	    // `Promise.prototype.then` method
	    // https://tc39.es/ecma262/#sec-promise.prototype.then
	    // eslint-disable-next-line unicorn/no-thenable -- safe
	    then: function then(onFulfilled, onRejected) {
	      var state = getInternalPromiseState(this);
	      var reaction = newPromiseCapability(speciesConstructor$4(this, PromiseConstructor));
	      state.parent = true;
	      reaction.ok = isCallable$8(onFulfilled) ? onFulfilled : true;
	      reaction.fail = isCallable$8(onRejected) && onRejected;
	      reaction.domain = IS_NODE$2 ? process$1.domain : undefined;
	      if (state.state == PENDING) state.reactions.add(reaction);else microtask$1(function () {
	        callReaction(reaction, state);
	      });
	      return reaction.promise;
	    },
	    // `Promise.prototype.catch` method
	    // https://tc39.es/ecma262/#sec-promise.prototype.catch
	    'catch': function _catch(onRejected) {
	      return this.then(undefined, onRejected);
	    }
	  });

	  OwnPromiseCapability = function OwnPromiseCapability() {
	    var promise = new Internal();
	    var state = getInternalState$7(promise);
	    this.promise = promise;
	    this.resolve = bind$4(internalResolve, state);
	    this.reject = bind$4(internalReject, state);
	  };

	  newPromiseCapabilityModule$2.f = newPromiseCapability = function newPromiseCapability(C) {
	    return C === PromiseConstructor || C === PromiseWrapper ? new OwnPromiseCapability(C) : newGenericPromiseCapability(C);
	  };

	  if (isCallable$8(NativePromise$1) && NativePromisePrototype !== Object.prototype) {
	    nativeThen = NativePromisePrototype.then;

	    if (!SUBCLASSING) {
	      // make `Promise#then` return a polyfilled `Promise` for native promise-based APIs
	      redefine$9(NativePromisePrototype, 'then', function then(onFulfilled, onRejected) {
	        var that = this;
	        return new PromiseConstructor(function (resolve, reject) {
	          call$j(nativeThen, that, resolve, reject);
	        }).then(onFulfilled, onRejected); // https://github.com/zloirock/core-js/issues/640
	      }, {
	        unsafe: true
	      }); // makes sure that native promise-based APIs `Promise#catch` properly works with patched `Promise#then`

	      redefine$9(NativePromisePrototype, 'catch', PromisePrototype['catch'], {
	        unsafe: true
	      });
	    } // make `.constructor === Promise` work for native promise-based APIs


	    try {
	      delete NativePromisePrototype.constructor;
	    } catch (error) {
	      /* empty */
	    } // make `instanceof Promise` work for native promise-based APIs


	    if (setPrototypeOf$2) {
	      setPrototypeOf$2(NativePromisePrototype, PromisePrototype);
	    }
	  }
	}

	$$V({
	  global: true,
	  wrap: true,
	  forced: FORCED$8
	}, {
	  Promise: PromiseConstructor
	});
	setToStringTag$4(PromiseConstructor, PROMISE, false);
	setSpecies$2(PROMISE);
	PromiseWrapper = getBuiltIn$8(PROMISE); // statics

	$$V({
	  target: PROMISE,
	  stat: true,
	  forced: FORCED$8
	}, {
	  // `Promise.reject` method
	  // https://tc39.es/ecma262/#sec-promise.reject
	  reject: function reject(r) {
	    var capability = newPromiseCapability(this);
	    call$j(capability.reject, undefined, r);
	    return capability.promise;
	  }
	});
	$$V({
	  target: PROMISE,
	  stat: true,
	  forced: FORCED$8
	}, {
	  // `Promise.resolve` method
	  // https://tc39.es/ecma262/#sec-promise.resolve
	  resolve: function resolve(x) {
	    return promiseResolve$1(this, x);
	  }
	});
	$$V({
	  target: PROMISE,
	  stat: true,
	  forced: INCORRECT_ITERATION
	}, {
	  // `Promise.all` method
	  // https://tc39.es/ecma262/#sec-promise.all
	  all: function all(iterable) {
	    var C = this;
	    var capability = newPromiseCapability(C);
	    var resolve = capability.resolve;
	    var reject = capability.reject;
	    var result = perform$2(function () {
	      var $promiseResolve = aCallable$6(C.resolve);
	      var values = [];
	      var counter = 0;
	      var remaining = 1;
	      iterate$4(iterable, function (promise) {
	        var index = counter++;
	        var alreadyCalled = false;
	        remaining++;
	        call$j($promiseResolve, C, promise).then(function (value) {
	          if (alreadyCalled) return;
	          alreadyCalled = true;
	          values[index] = value;
	          --remaining || resolve(values);
	        }, reject);
	      });
	      --remaining || resolve(values);
	    });
	    if (result.error) reject(result.value);
	    return capability.promise;
	  },
	  // `Promise.race` method
	  // https://tc39.es/ecma262/#sec-promise.race
	  race: function race(iterable) {
	    var C = this;
	    var capability = newPromiseCapability(C);
	    var reject = capability.reject;
	    var result = perform$2(function () {
	      var $promiseResolve = aCallable$6(C.resolve);
	      iterate$4(iterable, function (promise) {
	        call$j($promiseResolve, C, promise).then(capability.resolve, reject);
	      });
	    });
	    if (result.error) reject(result.value);
	    return capability.promise;
	  }
	});

	var $$U = _export;
	var call$i = functionCall;
	var aCallable$5 = aCallable$g;
	var newPromiseCapabilityModule$1 = newPromiseCapability$2;
	var perform$1 = perform$3;
	var iterate$3 = iterate$9; // `Promise.allSettled` method
	// https://tc39.es/ecma262/#sec-promise.allsettled

	$$U({
	  target: 'Promise',
	  stat: true
	}, {
	  allSettled: function allSettled(iterable) {
	    var C = this;
	    var capability = newPromiseCapabilityModule$1.f(C);
	    var resolve = capability.resolve;
	    var reject = capability.reject;
	    var result = perform$1(function () {
	      var promiseResolve = aCallable$5(C.resolve);
	      var values = [];
	      var counter = 0;
	      var remaining = 1;
	      iterate$3(iterable, function (promise) {
	        var index = counter++;
	        var alreadyCalled = false;
	        remaining++;
	        call$i(promiseResolve, C, promise).then(function (value) {
	          if (alreadyCalled) return;
	          alreadyCalled = true;
	          values[index] = {
	            status: 'fulfilled',
	            value: value
	          };
	          --remaining || resolve(values);
	        }, function (error) {
	          if (alreadyCalled) return;
	          alreadyCalled = true;
	          values[index] = {
	            status: 'rejected',
	            reason: error
	          };
	          --remaining || resolve(values);
	        });
	      });
	      --remaining || resolve(values);
	    });
	    if (result.error) reject(result.value);
	    return capability.promise;
	  }
	});

	var $$T = _export;
	var aCallable$4 = aCallable$g;
	var getBuiltIn$7 = getBuiltIn$j;
	var call$h = functionCall;
	var newPromiseCapabilityModule = newPromiseCapability$2;
	var perform = perform$3;
	var iterate$2 = iterate$9;
	var PROMISE_ANY_ERROR = 'No one promise resolved'; // `Promise.any` method
	// https://tc39.es/ecma262/#sec-promise.any

	$$T({
	  target: 'Promise',
	  stat: true
	}, {
	  any: function any(iterable) {
	    var C = this;
	    var AggregateError = getBuiltIn$7('AggregateError');
	    var capability = newPromiseCapabilityModule.f(C);
	    var resolve = capability.resolve;
	    var reject = capability.reject;
	    var result = perform(function () {
	      var promiseResolve = aCallable$4(C.resolve);
	      var errors = [];
	      var counter = 0;
	      var remaining = 1;
	      var alreadyResolved = false;
	      iterate$2(iterable, function (promise) {
	        var index = counter++;
	        var alreadyRejected = false;
	        remaining++;
	        call$h(promiseResolve, C, promise).then(function (value) {
	          if (alreadyRejected || alreadyResolved) return;
	          alreadyResolved = true;
	          resolve(value);
	        }, function (error) {
	          if (alreadyRejected || alreadyResolved) return;
	          alreadyRejected = true;
	          errors[index] = error;
	          --remaining || reject(new AggregateError(errors, PROMISE_ANY_ERROR));
	        });
	      });
	      --remaining || reject(new AggregateError(errors, PROMISE_ANY_ERROR));
	    });
	    if (result.error) reject(result.value);
	    return capability.promise;
	  }
	});

	var $$S = _export;
	var NativePromise = nativePromiseConstructor;
	var fails$s = fails$18;
	var getBuiltIn$6 = getBuiltIn$j;
	var isCallable$7 = isCallable$u;
	var speciesConstructor$3 = speciesConstructor$5;
	var promiseResolve = promiseResolve$2;
	var redefine$8 = redefine$j.exports; // Safari bug https://bugs.webkit.org/show_bug.cgi?id=200829

	var NON_GENERIC = !!NativePromise && fails$s(function () {
	  // eslint-disable-next-line unicorn/no-thenable -- required for testing
	  NativePromise.prototype['finally'].call({
	    then: function then() {
	      /* empty */
	    }
	  }, function () {
	    /* empty */
	  });
	}); // `Promise.prototype.finally` method
	// https://tc39.es/ecma262/#sec-promise.prototype.finally

	$$S({
	  target: 'Promise',
	  proto: true,
	  real: true,
	  forced: NON_GENERIC
	}, {
	  'finally': function _finally(onFinally) {
	    var C = speciesConstructor$3(this, getBuiltIn$6('Promise'));
	    var isFunction = isCallable$7(onFinally);
	    return this.then(isFunction ? function (x) {
	      return promiseResolve(C, onFinally()).then(function () {
	        return x;
	      });
	    } : onFinally, isFunction ? function (e) {
	      return promiseResolve(C, onFinally()).then(function () {
	        throw e;
	      });
	    } : onFinally);
	  }
	}); // makes sure that native promise-based APIs `Promise#finally` properly works with patched `Promise#then`

	if (isCallable$7(NativePromise)) {
	  var method = getBuiltIn$6('Promise').prototype['finally'];

	  if (NativePromise.prototype['finally'] !== method) {
	    redefine$8(NativePromise.prototype, 'finally', method, {
	      unsafe: true
	    });
	  }
	}

	var $$R = _export;
	var functionApply = functionApply$1;
	var aCallable$3 = aCallable$g;
	var anObject$n = anObject$B;
	var fails$r = fails$18; // MS Edge argumentsList argument is optional

	var OPTIONAL_ARGUMENTS_LIST = !fails$r(function () {
	  // eslint-disable-next-line es/no-reflect -- required for testing
	  Reflect.apply(function () {
	    /* empty */
	  });
	}); // `Reflect.apply` method
	// https://tc39.es/ecma262/#sec-reflect.apply

	$$R({
	  target: 'Reflect',
	  stat: true,
	  forced: OPTIONAL_ARGUMENTS_LIST
	}, {
	  apply: function apply(target, thisArgument, argumentsList) {
	    return functionApply(aCallable$3(target), thisArgument, anObject$n(argumentsList));
	  }
	});

	var global$x = global$1B;
	var uncurryThis$u = functionUncurryThis;
	var aCallable$2 = aCallable$g;
	var isObject$b = isObject$z;
	var hasOwn$a = hasOwnProperty_1;
	var arraySlice$4 = arraySlice$a;
	var NATIVE_BIND = functionBindNative;
	var Function$1 = global$x.Function;
	var concat$1 = uncurryThis$u([].concat);
	var join$6 = uncurryThis$u([].join);
	var factories = {};

	var construct = function construct(C, argsLength, args) {
	  if (!hasOwn$a(factories, argsLength)) {
	    for (var list = [], i = 0; i < argsLength; i++) {
	      list[i] = 'a[' + i + ']';
	    }

	    factories[argsLength] = Function$1('C,a', 'return new C(' + join$6(list, ',') + ')');
	  }

	  return factories[argsLength](C, args);
	}; // `Function.prototype.bind` method implementation
	// https://tc39.es/ecma262/#sec-function.prototype.bind


	var functionBind = NATIVE_BIND ? Function$1.bind : function bind(that
	/* , ...args */
	) {
	  var F = aCallable$2(this);
	  var Prototype = F.prototype;
	  var partArgs = arraySlice$4(arguments, 1);

	  var boundFunction = function
	    /* args... */
	  bound() {
	    var args = concat$1(partArgs, arraySlice$4(arguments));
	    return this instanceof boundFunction ? construct(F, args.length, args) : F.apply(that, args);
	  };

	  if (isObject$b(Prototype)) boundFunction.prototype = Prototype;
	  return boundFunction;
	};

	var $$Q = _export;
	var getBuiltIn$5 = getBuiltIn$j;
	var apply$4 = functionApply$1;
	var bind$3 = functionBind;
	var aConstructor$1 = aConstructor$3;
	var anObject$m = anObject$B;
	var isObject$a = isObject$z;
	var create$6 = objectCreate;
	var fails$q = fails$18;
	var nativeConstruct = getBuiltIn$5('Reflect', 'construct');
	var ObjectPrototype$1 = Object.prototype;
	var push$7 = [].push; // `Reflect.construct` method
	// https://tc39.es/ecma262/#sec-reflect.construct
	// MS Edge supports only 2 arguments and argumentsList argument is optional
	// FF Nightly sets third argument as `new.target`, but does not create `this` from it

	var NEW_TARGET_BUG = fails$q(function () {
	  function F() {
	    /* empty */
	  }

	  return !(nativeConstruct(function () {
	    /* empty */
	  }, [], F) instanceof F);
	});
	var ARGS_BUG = !fails$q(function () {
	  nativeConstruct(function () {
	    /* empty */
	  });
	});
	var FORCED$7 = NEW_TARGET_BUG || ARGS_BUG;
	$$Q({
	  target: 'Reflect',
	  stat: true,
	  forced: FORCED$7,
	  sham: FORCED$7
	}, {
	  construct: function construct(Target, args
	  /* , newTarget */
	  ) {
	    aConstructor$1(Target);
	    anObject$m(args);
	    var newTarget = arguments.length < 3 ? Target : aConstructor$1(arguments[2]);
	    if (ARGS_BUG && !NEW_TARGET_BUG) return nativeConstruct(Target, args, newTarget);

	    if (Target == newTarget) {
	      // w/o altered newTarget, optimization for 0-4 arguments
	      switch (args.length) {
	        case 0:
	          return new Target();

	        case 1:
	          return new Target(args[0]);

	        case 2:
	          return new Target(args[0], args[1]);

	        case 3:
	          return new Target(args[0], args[1], args[2]);

	        case 4:
	          return new Target(args[0], args[1], args[2], args[3]);
	      } // w/o altered newTarget, lot of arguments case


	      var $args = [null];
	      apply$4(push$7, $args, args);
	      return new (apply$4(bind$3, Target, $args))();
	    } // with altered newTarget, not support built-in constructors


	    var proto = newTarget.prototype;
	    var instance = create$6(isObject$a(proto) ? proto : ObjectPrototype$1);
	    var result = apply$4(Target, instance, args);
	    return isObject$a(result) ? result : instance;
	  }
	});

	var $$P = _export;
	var DESCRIPTORS$a = descriptors;
	var anObject$l = anObject$B;
	var toPropertyKey$1 = toPropertyKey$8;
	var definePropertyModule$2 = objectDefineProperty;
	var fails$p = fails$18; // MS Edge has broken Reflect.defineProperty - throwing instead of returning false

	var ERROR_INSTEAD_OF_FALSE = fails$p(function () {
	  // eslint-disable-next-line es/no-reflect -- required for testing
	  Reflect.defineProperty(definePropertyModule$2.f({}, 1, {
	    value: 1
	  }), 1, {
	    value: 2
	  });
	}); // `Reflect.defineProperty` method
	// https://tc39.es/ecma262/#sec-reflect.defineproperty

	$$P({
	  target: 'Reflect',
	  stat: true,
	  forced: ERROR_INSTEAD_OF_FALSE,
	  sham: !DESCRIPTORS$a
	}, {
	  defineProperty: function defineProperty(target, propertyKey, attributes) {
	    anObject$l(target);
	    var key = toPropertyKey$1(propertyKey);
	    anObject$l(attributes);

	    try {
	      definePropertyModule$2.f(target, key, attributes);
	      return true;
	    } catch (error) {
	      return false;
	    }
	  }
	});

	var $$O = _export;
	var anObject$k = anObject$B;
	var getOwnPropertyDescriptor$2 = objectGetOwnPropertyDescriptor.f; // `Reflect.deleteProperty` method
	// https://tc39.es/ecma262/#sec-reflect.deleteproperty

	$$O({
	  target: 'Reflect',
	  stat: true
	}, {
	  deleteProperty: function deleteProperty(target, propertyKey) {
	    var descriptor = getOwnPropertyDescriptor$2(anObject$k(target), propertyKey);
	    return descriptor && !descriptor.configurable ? false : delete target[propertyKey];
	  }
	});

	var hasOwn$9 = hasOwnProperty_1;

	var isDataDescriptor$2 = function isDataDescriptor(descriptor) {
	  return descriptor !== undefined && (hasOwn$9(descriptor, 'value') || hasOwn$9(descriptor, 'writable'));
	};

	var $$N = _export;
	var call$g = functionCall;
	var isObject$9 = isObject$z;
	var anObject$j = anObject$B;
	var isDataDescriptor$1 = isDataDescriptor$2;
	var getOwnPropertyDescriptorModule$3 = objectGetOwnPropertyDescriptor;
	var getPrototypeOf$2 = objectGetPrototypeOf$1; // `Reflect.get` method
	// https://tc39.es/ecma262/#sec-reflect.get

	function get$2(target, propertyKey
	/* , receiver */
	) {
	  var receiver = arguments.length < 3 ? target : arguments[2];
	  var descriptor, prototype;
	  if (anObject$j(target) === receiver) return target[propertyKey];
	  descriptor = getOwnPropertyDescriptorModule$3.f(target, propertyKey);
	  if (descriptor) return isDataDescriptor$1(descriptor) ? descriptor.value : descriptor.get === undefined ? undefined : call$g(descriptor.get, receiver);
	  if (isObject$9(prototype = getPrototypeOf$2(target))) return get$2(prototype, propertyKey, receiver);
	}

	$$N({
	  target: 'Reflect',
	  stat: true
	}, {
	  get: get$2
	});

	var $$M = _export;
	var DESCRIPTORS$9 = descriptors;
	var anObject$i = anObject$B;
	var getOwnPropertyDescriptorModule$2 = objectGetOwnPropertyDescriptor; // `Reflect.getOwnPropertyDescriptor` method
	// https://tc39.es/ecma262/#sec-reflect.getownpropertydescriptor

	$$M({
	  target: 'Reflect',
	  stat: true,
	  sham: !DESCRIPTORS$9
	}, {
	  getOwnPropertyDescriptor: function getOwnPropertyDescriptor(target, propertyKey) {
	    return getOwnPropertyDescriptorModule$2.f(anObject$i(target), propertyKey);
	  }
	});

	var $$L = _export;
	var anObject$h = anObject$B;
	var objectGetPrototypeOf = objectGetPrototypeOf$1;
	var CORRECT_PROTOTYPE_GETTER = correctPrototypeGetter; // `Reflect.getPrototypeOf` method
	// https://tc39.es/ecma262/#sec-reflect.getprototypeof

	$$L({
	  target: 'Reflect',
	  stat: true,
	  sham: !CORRECT_PROTOTYPE_GETTER
	}, {
	  getPrototypeOf: function getPrototypeOf(target) {
	    return objectGetPrototypeOf(anObject$h(target));
	  }
	});

	var $$K = _export; // `Reflect.has` method
	// https://tc39.es/ecma262/#sec-reflect.has

	$$K({
	  target: 'Reflect',
	  stat: true
	}, {
	  has: function has(target, propertyKey) {
	    return propertyKey in target;
	  }
	});

	var $$J = _export;
	var anObject$g = anObject$B;
	var $isExtensible = objectIsExtensible; // `Reflect.isExtensible` method
	// https://tc39.es/ecma262/#sec-reflect.isextensible

	$$J({
	  target: 'Reflect',
	  stat: true
	}, {
	  isExtensible: function isExtensible(target) {
	    anObject$g(target);
	    return $isExtensible(target);
	  }
	});

	var $$I = _export;
	var ownKeys = ownKeys$3; // `Reflect.ownKeys` method
	// https://tc39.es/ecma262/#sec-reflect.ownkeys

	$$I({
	  target: 'Reflect',
	  stat: true
	}, {
	  ownKeys: ownKeys
	});

	var $$H = _export;
	var getBuiltIn$4 = getBuiltIn$j;
	var anObject$f = anObject$B;
	var FREEZING = freezing; // `Reflect.preventExtensions` method
	// https://tc39.es/ecma262/#sec-reflect.preventextensions

	$$H({
	  target: 'Reflect',
	  stat: true,
	  sham: !FREEZING
	}, {
	  preventExtensions: function preventExtensions(target) {
	    anObject$f(target);

	    try {
	      var objectPreventExtensions = getBuiltIn$4('Object', 'preventExtensions');
	      if (objectPreventExtensions) objectPreventExtensions(target);
	      return true;
	    } catch (error) {
	      return false;
	    }
	  }
	});

	var $$G = _export;
	var call$f = functionCall;
	var anObject$e = anObject$B;
	var isObject$8 = isObject$z;
	var isDataDescriptor = isDataDescriptor$2;
	var fails$o = fails$18;
	var definePropertyModule$1 = objectDefineProperty;
	var getOwnPropertyDescriptorModule$1 = objectGetOwnPropertyDescriptor;
	var getPrototypeOf$1 = objectGetPrototypeOf$1;
	var createPropertyDescriptor$4 = createPropertyDescriptor$c; // `Reflect.set` method
	// https://tc39.es/ecma262/#sec-reflect.set

	function set$2(target, propertyKey, V
	/* , receiver */
	) {
	  var receiver = arguments.length < 4 ? target : arguments[3];
	  var ownDescriptor = getOwnPropertyDescriptorModule$1.f(anObject$e(target), propertyKey);
	  var existingDescriptor, prototype, setter;

	  if (!ownDescriptor) {
	    if (isObject$8(prototype = getPrototypeOf$1(target))) {
	      return set$2(prototype, propertyKey, V, receiver);
	    }

	    ownDescriptor = createPropertyDescriptor$4(0);
	  }

	  if (isDataDescriptor(ownDescriptor)) {
	    if (ownDescriptor.writable === false || !isObject$8(receiver)) return false;

	    if (existingDescriptor = getOwnPropertyDescriptorModule$1.f(receiver, propertyKey)) {
	      if (existingDescriptor.get || existingDescriptor.set || existingDescriptor.writable === false) return false;
	      existingDescriptor.value = V;
	      definePropertyModule$1.f(receiver, propertyKey, existingDescriptor);
	    } else definePropertyModule$1.f(receiver, propertyKey, createPropertyDescriptor$4(0, V));
	  } else {
	    setter = ownDescriptor.set;
	    if (setter === undefined) return false;
	    call$f(setter, receiver, V);
	  }

	  return true;
	} // MS Edge 17-18 Reflect.set allows setting the property to object
	// with non-writable property on the prototype


	var MS_EDGE_BUG = fails$o(function () {
	  var Constructor = function Constructor() {
	    /* empty */
	  };

	  var object = definePropertyModule$1.f(new Constructor(), 'a', {
	    configurable: true
	  }); // eslint-disable-next-line es/no-reflect -- required for testing

	  return Reflect.set(Constructor.prototype, 'a', 1, object) !== false;
	});
	$$G({
	  target: 'Reflect',
	  stat: true,
	  forced: MS_EDGE_BUG
	}, {
	  set: set$2
	});

	var $$F = _export;
	var anObject$d = anObject$B;
	var aPossiblePrototype = aPossiblePrototype$2;
	var objectSetPrototypeOf = objectSetPrototypeOf$1; // `Reflect.setPrototypeOf` method
	// https://tc39.es/ecma262/#sec-reflect.setprototypeof

	if (objectSetPrototypeOf) $$F({
	  target: 'Reflect',
	  stat: true
	}, {
	  setPrototypeOf: function setPrototypeOf(target, proto) {
	    anObject$d(target);
	    aPossiblePrototype(proto);

	    try {
	      objectSetPrototypeOf(target, proto);
	      return true;
	    } catch (error) {
	      return false;
	    }
	  }
	});

	var $$E = _export;
	var global$w = global$1B;
	var setToStringTag$3 = setToStringTag$c;
	$$E({
	  global: true
	}, {
	  Reflect: {}
	}); // Reflect[@@toStringTag] property
	// https://tc39.es/ecma262/#sec-reflect-@@tostringtag

	setToStringTag$3(global$w.Reflect, 'Reflect', true);

	var isObject$7 = isObject$z;
	var classof$8 = classofRaw$1;
	var wellKnownSymbol$b = wellKnownSymbol$y;
	var MATCH$2 = wellKnownSymbol$b('match'); // `IsRegExp` abstract operation
	// https://tc39.es/ecma262/#sec-isregexp

	var isRegexp = function isRegexp(it) {
	  var isRegExp;
	  return isObject$7(it) && ((isRegExp = it[MATCH$2]) !== undefined ? !!isRegExp : classof$8(it) == 'RegExp');
	};

	var anObject$c = anObject$B; // `RegExp.prototype.flags` getter implementation
	// https://tc39.es/ecma262/#sec-get-regexp.prototype.flags

	var regexpFlags$1 = function regexpFlags() {
	  var that = anObject$c(this);
	  var result = '';
	  if (that.global) result += 'g';
	  if (that.ignoreCase) result += 'i';
	  if (that.multiline) result += 'm';
	  if (that.dotAll) result += 's';
	  if (that.unicode) result += 'u';
	  if (that.sticky) result += 'y';
	  return result;
	};

	var fails$n = fails$18;
	var global$v = global$1B; // babel-minify and Closure Compiler transpiles RegExp('a', 'y') -> /a/y and it causes SyntaxError

	var $RegExp$2 = global$v.RegExp;
	var UNSUPPORTED_Y$3 = fails$n(function () {
	  var re = $RegExp$2('a', 'y');
	  re.lastIndex = 2;
	  return re.exec('abcd') != null;
	}); // UC Browser bug
	// https://github.com/zloirock/core-js/issues/1008

	var MISSED_STICKY$2 = UNSUPPORTED_Y$3 || fails$n(function () {
	  return !$RegExp$2('a', 'y').sticky;
	});
	var BROKEN_CARET = UNSUPPORTED_Y$3 || fails$n(function () {
	  // https://bugzilla.mozilla.org/show_bug.cgi?id=773687
	  var re = $RegExp$2('^r', 'gy');
	  re.lastIndex = 2;
	  return re.exec('str') != null;
	});
	var regexpStickyHelpers = {
	  BROKEN_CARET: BROKEN_CARET,
	  MISSED_STICKY: MISSED_STICKY$2,
	  UNSUPPORTED_Y: UNSUPPORTED_Y$3
	};

	var fails$m = fails$18;
	var global$u = global$1B; // babel-minify and Closure Compiler transpiles RegExp('.', 's') -> /./s and it causes SyntaxError

	var $RegExp$1 = global$u.RegExp;
	var regexpUnsupportedDotAll = fails$m(function () {
	  var re = $RegExp$1('.', 's');
	  return !(re.dotAll && re.exec('\n') && re.flags === 's');
	});

	var fails$l = fails$18;
	var global$t = global$1B; // babel-minify and Closure Compiler transpiles RegExp('(?<a>b)', 'g') -> /(?<a>b)/g and it causes SyntaxError

	var $RegExp = global$t.RegExp;
	var regexpUnsupportedNcg = fails$l(function () {
	  var re = $RegExp('(?<a>b)', 'g');
	  return re.exec('b').groups.a !== 'b' || 'b'.replace(re, '$<a>c') !== 'bc';
	});

	var DESCRIPTORS$8 = descriptors;
	var global$s = global$1B;
	var uncurryThis$t = functionUncurryThis;
	var isForced = isForced_1;
	var inheritIfRequired$2 = inheritIfRequired$6;
	var createNonEnumerableProperty$6 = createNonEnumerableProperty$f;
	var defineProperty$5 = objectDefineProperty.f;
	var getOwnPropertyNames$1 = objectGetOwnPropertyNames.f;
	var isPrototypeOf$4 = objectIsPrototypeOf;
	var isRegExp$4 = isRegexp;
	var toString$g = toString$p;
	var regExpFlags$5 = regexpFlags$1;
	var stickyHelpers$2 = regexpStickyHelpers;
	var redefine$7 = redefine$j.exports;
	var fails$k = fails$18;
	var hasOwn$8 = hasOwnProperty_1;
	var enforceInternalState$1 = internalState.enforce;
	var setSpecies$1 = setSpecies$6;
	var wellKnownSymbol$a = wellKnownSymbol$y;
	var UNSUPPORTED_DOT_ALL$2 = regexpUnsupportedDotAll;
	var UNSUPPORTED_NCG$1 = regexpUnsupportedNcg;
	var MATCH$1 = wellKnownSymbol$a('match');
	var NativeRegExp = global$s.RegExp;
	var RegExpPrototype$7 = NativeRegExp.prototype;
	var SyntaxError$2 = global$s.SyntaxError;
	var getFlags$4 = uncurryThis$t(regExpFlags$5);
	var exec$4 = uncurryThis$t(RegExpPrototype$7.exec);
	var charAt$8 = uncurryThis$t(''.charAt);
	var replace$6 = uncurryThis$t(''.replace);
	var stringIndexOf$4 = uncurryThis$t(''.indexOf);
	var stringSlice$a = uncurryThis$t(''.slice); // TODO: Use only propper RegExpIdentifierName

	var IS_NCG = /^\?<[^\s\d!#%&*+<=>@^][^\s!#%&*+<=>@^]*>/;
	var re1 = /a/g;
	var re2 = /a/g; // "new" should create a new object, old webkit bug

	var CORRECT_NEW = new NativeRegExp(re1) !== re1;
	var MISSED_STICKY$1 = stickyHelpers$2.MISSED_STICKY;
	var UNSUPPORTED_Y$2 = stickyHelpers$2.UNSUPPORTED_Y;
	var BASE_FORCED = DESCRIPTORS$8 && (!CORRECT_NEW || MISSED_STICKY$1 || UNSUPPORTED_DOT_ALL$2 || UNSUPPORTED_NCG$1 || fails$k(function () {
	  re2[MATCH$1] = false; // RegExp constructor can alter flags and IsRegExp works correct with @@match

	  return NativeRegExp(re1) != re1 || NativeRegExp(re2) == re2 || NativeRegExp(re1, 'i') != '/a/i';
	}));

	var handleDotAll = function handleDotAll(string) {
	  var length = string.length;
	  var index = 0;
	  var result = '';
	  var brackets = false;
	  var chr;

	  for (; index <= length; index++) {
	    chr = charAt$8(string, index);

	    if (chr === '\\') {
	      result += chr + charAt$8(string, ++index);
	      continue;
	    }

	    if (!brackets && chr === '.') {
	      result += '[\\s\\S]';
	    } else {
	      if (chr === '[') {
	        brackets = true;
	      } else if (chr === ']') {
	        brackets = false;
	      }

	      result += chr;
	    }
	  }

	  return result;
	};

	var handleNCG = function handleNCG(string) {
	  var length = string.length;
	  var index = 0;
	  var result = '';
	  var named = [];
	  var names = {};
	  var brackets = false;
	  var ncg = false;
	  var groupid = 0;
	  var groupname = '';
	  var chr;

	  for (; index <= length; index++) {
	    chr = charAt$8(string, index);

	    if (chr === '\\') {
	      chr = chr + charAt$8(string, ++index);
	    } else if (chr === ']') {
	      brackets = false;
	    } else if (!brackets) switch (true) {
	      case chr === '[':
	        brackets = true;
	        break;

	      case chr === '(':
	        if (exec$4(IS_NCG, stringSlice$a(string, index + 1))) {
	          index += 2;
	          ncg = true;
	        }

	        result += chr;
	        groupid++;
	        continue;

	      case chr === '>' && ncg:
	        if (groupname === '' || hasOwn$8(names, groupname)) {
	          throw new SyntaxError$2('Invalid capture group name');
	        }

	        names[groupname] = true;
	        named[named.length] = [groupname, groupid];
	        ncg = false;
	        groupname = '';
	        continue;
	    }

	    if (ncg) groupname += chr;else result += chr;
	  }

	  return [result, named];
	}; // `RegExp` constructor
	// https://tc39.es/ecma262/#sec-regexp-constructor


	if (isForced('RegExp', BASE_FORCED)) {
	  var RegExpWrapper = function RegExp(pattern, flags) {
	    var thisIsRegExp = isPrototypeOf$4(RegExpPrototype$7, this);
	    var patternIsRegExp = isRegExp$4(pattern);
	    var flagsAreUndefined = flags === undefined;
	    var groups = [];
	    var rawPattern = pattern;
	    var rawFlags, dotAll, sticky, handled, result, state;

	    if (!thisIsRegExp && patternIsRegExp && flagsAreUndefined && pattern.constructor === RegExpWrapper) {
	      return pattern;
	    }

	    if (patternIsRegExp || isPrototypeOf$4(RegExpPrototype$7, pattern)) {
	      pattern = pattern.source;
	      if (flagsAreUndefined) flags = 'flags' in rawPattern ? rawPattern.flags : getFlags$4(rawPattern);
	    }

	    pattern = pattern === undefined ? '' : toString$g(pattern);
	    flags = flags === undefined ? '' : toString$g(flags);
	    rawPattern = pattern;

	    if (UNSUPPORTED_DOT_ALL$2 && 'dotAll' in re1) {
	      dotAll = !!flags && stringIndexOf$4(flags, 's') > -1;
	      if (dotAll) flags = replace$6(flags, /s/g, '');
	    }

	    rawFlags = flags;

	    if (MISSED_STICKY$1 && 'sticky' in re1) {
	      sticky = !!flags && stringIndexOf$4(flags, 'y') > -1;
	      if (sticky && UNSUPPORTED_Y$2) flags = replace$6(flags, /y/g, '');
	    }

	    if (UNSUPPORTED_NCG$1) {
	      handled = handleNCG(pattern);
	      pattern = handled[0];
	      groups = handled[1];
	    }

	    result = inheritIfRequired$2(NativeRegExp(pattern, flags), thisIsRegExp ? this : RegExpPrototype$7, RegExpWrapper);

	    if (dotAll || sticky || groups.length) {
	      state = enforceInternalState$1(result);

	      if (dotAll) {
	        state.dotAll = true;
	        state.raw = RegExpWrapper(handleDotAll(pattern), rawFlags);
	      }

	      if (sticky) state.sticky = true;
	      if (groups.length) state.groups = groups;
	    }

	    if (pattern !== rawPattern) try {
	      // fails in old engines, but we have no alternatives for unsupported regex syntax
	      createNonEnumerableProperty$6(result, 'source', rawPattern === '' ? '(?:)' : rawPattern);
	    } catch (error) {
	      /* empty */
	    }
	    return result;
	  };

	  var proxy = function proxy(key) {
	    key in RegExpWrapper || defineProperty$5(RegExpWrapper, key, {
	      configurable: true,
	      get: function get() {
	        return NativeRegExp[key];
	      },
	      set: function set(it) {
	        NativeRegExp[key] = it;
	      }
	    });
	  };

	  for (var keys = getOwnPropertyNames$1(NativeRegExp), index$1 = 0; keys.length > index$1;) {
	    proxy(keys[index$1++]);
	  }

	  RegExpPrototype$7.constructor = RegExpWrapper;
	  RegExpWrapper.prototype = RegExpPrototype$7;
	  redefine$7(global$s, 'RegExp', RegExpWrapper);
	} // https://tc39.es/ecma262/#sec-get-regexp-@@species


	setSpecies$1('RegExp');

	var global$r = global$1B;
	var DESCRIPTORS$7 = descriptors;
	var UNSUPPORTED_DOT_ALL$1 = regexpUnsupportedDotAll;
	var classof$7 = classofRaw$1;
	var defineProperty$4 = objectDefineProperty.f;
	var getInternalState$6 = internalState.get;
	var RegExpPrototype$6 = RegExp.prototype;
	var TypeError$a = global$r.TypeError; // `RegExp.prototype.dotAll` getter
	// https://tc39.es/ecma262/#sec-get-regexp.prototype.dotall

	if (DESCRIPTORS$7 && UNSUPPORTED_DOT_ALL$1) {
	  defineProperty$4(RegExpPrototype$6, 'dotAll', {
	    configurable: true,
	    get: function get() {
	      if (this === RegExpPrototype$6) return undefined; // We can't use InternalStateModule.getterFor because
	      // we don't add metadata for regexps created by a literal.

	      if (classof$7(this) === 'RegExp') {
	        return !!getInternalState$6(this).dotAll;
	      }

	      throw TypeError$a('Incompatible receiver, RegExp required');
	    }
	  });
	}

	/* eslint-disable regexp/no-empty-capturing-group, regexp/no-empty-group, regexp/no-lazy-ends -- testing */

	/* eslint-disable regexp/no-useless-quantifier -- testing */


	var call$e = functionCall;
	var uncurryThis$s = functionUncurryThis;
	var toString$f = toString$p;
	var regexpFlags = regexpFlags$1;
	var stickyHelpers$1 = regexpStickyHelpers;
	var shared = shared$5.exports;
	var create$5 = objectCreate;
	var getInternalState$5 = internalState.get;
	var UNSUPPORTED_DOT_ALL = regexpUnsupportedDotAll;
	var UNSUPPORTED_NCG = regexpUnsupportedNcg;
	var nativeReplace = shared('native-string-replace', String.prototype.replace);
	var nativeExec = RegExp.prototype.exec;
	var patchedExec = nativeExec;
	var charAt$7 = uncurryThis$s(''.charAt);
	var indexOf$1 = uncurryThis$s(''.indexOf);
	var replace$5 = uncurryThis$s(''.replace);
	var stringSlice$9 = uncurryThis$s(''.slice);

	var UPDATES_LAST_INDEX_WRONG = function () {
	  var re1 = /a/;
	  var re2 = /b*/g;
	  call$e(nativeExec, re1, 'a');
	  call$e(nativeExec, re2, 'a');
	  return re1.lastIndex !== 0 || re2.lastIndex !== 0;
	}();

	var UNSUPPORTED_Y$1 = stickyHelpers$1.BROKEN_CARET; // nonparticipating capturing group, copied from es5-shim's String#split patch.

	var NPCG_INCLUDED = /()??/.exec('')[1] !== undefined;
	var PATCH = UPDATES_LAST_INDEX_WRONG || NPCG_INCLUDED || UNSUPPORTED_Y$1 || UNSUPPORTED_DOT_ALL || UNSUPPORTED_NCG;

	if (PATCH) {
	  patchedExec = function exec(string) {
	    var re = this;
	    var state = getInternalState$5(re);
	    var str = toString$f(string);
	    var raw = state.raw;
	    var result, reCopy, lastIndex, match, i, object, group;

	    if (raw) {
	      raw.lastIndex = re.lastIndex;
	      result = call$e(patchedExec, raw, str);
	      re.lastIndex = raw.lastIndex;
	      return result;
	    }

	    var groups = state.groups;
	    var sticky = UNSUPPORTED_Y$1 && re.sticky;
	    var flags = call$e(regexpFlags, re);
	    var source = re.source;
	    var charsAdded = 0;
	    var strCopy = str;

	    if (sticky) {
	      flags = replace$5(flags, 'y', '');

	      if (indexOf$1(flags, 'g') === -1) {
	        flags += 'g';
	      }

	      strCopy = stringSlice$9(str, re.lastIndex); // Support anchored sticky behavior.

	      if (re.lastIndex > 0 && (!re.multiline || re.multiline && charAt$7(str, re.lastIndex - 1) !== '\n')) {
	        source = '(?: ' + source + ')';
	        strCopy = ' ' + strCopy;
	        charsAdded++;
	      } // ^(? + rx + ) is needed, in combination with some str slicing, to
	      // simulate the 'y' flag.


	      reCopy = new RegExp('^(?:' + source + ')', flags);
	    }

	    if (NPCG_INCLUDED) {
	      reCopy = new RegExp('^' + source + '$(?!\\s)', flags);
	    }

	    if (UPDATES_LAST_INDEX_WRONG) lastIndex = re.lastIndex;
	    match = call$e(nativeExec, sticky ? reCopy : re, strCopy);

	    if (sticky) {
	      if (match) {
	        match.input = stringSlice$9(match.input, charsAdded);
	        match[0] = stringSlice$9(match[0], charsAdded);
	        match.index = re.lastIndex;
	        re.lastIndex += match[0].length;
	      } else re.lastIndex = 0;
	    } else if (UPDATES_LAST_INDEX_WRONG && match) {
	      re.lastIndex = re.global ? match.index + match[0].length : lastIndex;
	    }

	    if (NPCG_INCLUDED && match && match.length > 1) {
	      // Fix browsers whose `exec` methods don't consistently return `undefined`
	      // for NPCG, like IE8. NOTE: This doesn' work for /(.?)?/
	      call$e(nativeReplace, match[0], reCopy, function () {
	        for (i = 1; i < arguments.length - 2; i++) {
	          if (arguments[i] === undefined) match[i] = undefined;
	        }
	      });
	    }

	    if (match && groups) {
	      match.groups = object = create$5(null);

	      for (i = 0; i < groups.length; i++) {
	        group = groups[i];
	        object[group[0]] = match[group[1]];
	      }
	    }

	    return match;
	  };
	}

	var regexpExec$3 = patchedExec;

	var $$D = _export;
	var exec$3 = regexpExec$3; // `RegExp.prototype.exec` method
	// https://tc39.es/ecma262/#sec-regexp.prototype.exec

	$$D({
	  target: 'RegExp',
	  proto: true,
	  forced: /./.exec !== exec$3
	}, {
	  exec: exec$3
	});

	var DESCRIPTORS$6 = descriptors;
	var objectDefinePropertyModule = objectDefineProperty;
	var regExpFlags$4 = regexpFlags$1;
	var fails$j = fails$18;
	var RegExpPrototype$5 = RegExp.prototype;
	var FORCED$6 = DESCRIPTORS$6 && fails$j(function () {
	  // eslint-disable-next-line es/no-object-getownpropertydescriptor -- safe
	  return Object.getOwnPropertyDescriptor(RegExpPrototype$5, 'flags').get.call({
	    dotAll: true,
	    sticky: true
	  }) !== 'sy';
	}); // `RegExp.prototype.flags` getter
	// https://tc39.es/ecma262/#sec-get-regexp.prototype.flags

	if (FORCED$6) objectDefinePropertyModule.f(RegExpPrototype$5, 'flags', {
	  configurable: true,
	  get: regExpFlags$4
	});

	var global$q = global$1B;
	var DESCRIPTORS$5 = descriptors;
	var MISSED_STICKY = regexpStickyHelpers.MISSED_STICKY;
	var classof$6 = classofRaw$1;
	var defineProperty$3 = objectDefineProperty.f;
	var getInternalState$4 = internalState.get;
	var RegExpPrototype$4 = RegExp.prototype;
	var TypeError$9 = global$q.TypeError; // `RegExp.prototype.sticky` getter
	// https://tc39.es/ecma262/#sec-get-regexp.prototype.sticky

	if (DESCRIPTORS$5 && MISSED_STICKY) {
	  defineProperty$3(RegExpPrototype$4, 'sticky', {
	    configurable: true,
	    get: function get() {
	      if (this === RegExpPrototype$4) return undefined; // We can't use InternalStateModule.getterFor because
	      // we don't add metadata for regexps created by a literal.

	      if (classof$6(this) === 'RegExp') {
	        return !!getInternalState$4(this).sticky;
	      }

	      throw TypeError$9('Incompatible receiver, RegExp required');
	    }
	  });
	}

	var $$C = _export;
	var global$p = global$1B;
	var call$d = functionCall;
	var uncurryThis$r = functionUncurryThis;
	var isCallable$6 = isCallable$u;
	var isObject$6 = isObject$z;

	var DELEGATES_TO_EXEC = function () {
	  var execCalled = false;
	  var re = /[ac]/;

	  re.exec = function () {
	    execCalled = true;
	    return /./.exec.apply(this, arguments);
	  };

	  return re.test('abc') === true && execCalled;
	}();

	var Error$4 = global$p.Error;
	var un$Test = uncurryThis$r(/./.test); // `RegExp.prototype.test` method
	// https://tc39.es/ecma262/#sec-regexp.prototype.test

	$$C({
	  target: 'RegExp',
	  proto: true,
	  forced: !DELEGATES_TO_EXEC
	}, {
	  test: function test(str) {
	    var exec = this.exec;
	    if (!isCallable$6(exec)) return un$Test(this, str);
	    var result = call$d(exec, this, str);

	    if (result !== null && !isObject$6(result)) {
	      throw new Error$4('RegExp exec method returned something other than an Object or null');
	    }

	    return !!result;
	  }
	});

	var uncurryThis$q = functionUncurryThis;
	var PROPER_FUNCTION_NAME$1 = functionName.PROPER;
	var redefine$6 = redefine$j.exports;
	var anObject$b = anObject$B;
	var isPrototypeOf$3 = objectIsPrototypeOf;
	var $toString$2 = toString$p;
	var fails$i = fails$18;
	var regExpFlags$3 = regexpFlags$1;
	var TO_STRING = 'toString';
	var RegExpPrototype$3 = RegExp.prototype;
	var n$ToString = RegExpPrototype$3[TO_STRING];
	var getFlags$3 = uncurryThis$q(regExpFlags$3);
	var NOT_GENERIC = fails$i(function () {
	  return n$ToString.call({
	    source: 'a',
	    flags: 'b'
	  }) != '/a/b';
	}); // FF44- RegExp#toString has a wrong name

	var INCORRECT_NAME = PROPER_FUNCTION_NAME$1 && n$ToString.name != TO_STRING; // `RegExp.prototype.toString` method
	// https://tc39.es/ecma262/#sec-regexp.prototype.tostring

	if (NOT_GENERIC || INCORRECT_NAME) {
	  redefine$6(RegExp.prototype, TO_STRING, function toString() {
	    var R = anObject$b(this);
	    var p = $toString$2(R.source);
	    var rf = R.flags;
	    var f = $toString$2(rf === undefined && isPrototypeOf$3(RegExpPrototype$3, R) && !('flags' in RegExpPrototype$3) ? getFlags$3(R) : rf);
	    return '/' + p + '/' + f;
	  }, {
	    unsafe: true
	  });
	}

	var collection$2 = collection$4;
	var collectionStrong = collectionStrong$2; // `Set` constructor
	// https://tc39.es/ecma262/#sec-set-objects

	collection$2('Set', function (init) {
	  return function Set() {
	    return init(this, arguments.length ? arguments[0] : undefined);
	  };
	}, collectionStrong);

	var $$B = _export;
	var uncurryThis$p = functionUncurryThis;
	var requireObjectCoercible$c = requireObjectCoercible$h;
	var toIntegerOrInfinity$4 = toIntegerOrInfinity$g;
	var toString$e = toString$p;
	var fails$h = fails$18;
	var charAt$6 = uncurryThis$p(''.charAt);
	var FORCED$5 = fails$h(function () {
	  return '𠮷'.at(-2) !== "\uD842";
	}); // `String.prototype.at` method
	// https://github.com/tc39/proposal-relative-indexing-method

	$$B({
	  target: 'String',
	  proto: true,
	  forced: FORCED$5
	}, {
	  at: function at(index) {
	    var S = toString$e(requireObjectCoercible$c(this));
	    var len = S.length;
	    var relativeIndex = toIntegerOrInfinity$4(index);
	    var k = relativeIndex >= 0 ? relativeIndex : len + relativeIndex;
	    return k < 0 || k >= len ? undefined : charAt$6(S, k);
	  }
	});

	var uncurryThis$o = functionUncurryThis;
	var toIntegerOrInfinity$3 = toIntegerOrInfinity$g;
	var toString$d = toString$p;
	var requireObjectCoercible$b = requireObjectCoercible$h;
	var charAt$5 = uncurryThis$o(''.charAt);
	var charCodeAt$1 = uncurryThis$o(''.charCodeAt);
	var stringSlice$8 = uncurryThis$o(''.slice);

	var createMethod$1 = function createMethod(CONVERT_TO_STRING) {
	  return function ($this, pos) {
	    var S = toString$d(requireObjectCoercible$b($this));
	    var position = toIntegerOrInfinity$3(pos);
	    var size = S.length;
	    var first, second;
	    if (position < 0 || position >= size) return CONVERT_TO_STRING ? '' : undefined;
	    first = charCodeAt$1(S, position);
	    return first < 0xD800 || first > 0xDBFF || position + 1 === size || (second = charCodeAt$1(S, position + 1)) < 0xDC00 || second > 0xDFFF ? CONVERT_TO_STRING ? charAt$5(S, position) : first : CONVERT_TO_STRING ? stringSlice$8(S, position, position + 2) : (first - 0xD800 << 10) + (second - 0xDC00) + 0x10000;
	  };
	};

	var stringMultibyte = {
	  // `String.prototype.codePointAt` method
	  // https://tc39.es/ecma262/#sec-string.prototype.codepointat
	  codeAt: createMethod$1(false),
	  // `String.prototype.at` method
	  // https://github.com/mathiasbynens/String.prototype.at
	  charAt: createMethod$1(true)
	};

	var $$A = _export;
	var codeAt$1 = stringMultibyte.codeAt; // `String.prototype.codePointAt` method
	// https://tc39.es/ecma262/#sec-string.prototype.codepointat

	$$A({
	  target: 'String',
	  proto: true
	}, {
	  codePointAt: function codePointAt(pos) {
	    return codeAt$1(this, pos);
	  }
	});

	var global$o = global$1B;
	var isRegExp$3 = isRegexp;
	var TypeError$8 = global$o.TypeError;

	var notARegexp = function notARegexp(it) {
	  if (isRegExp$3(it)) {
	    throw TypeError$8("The method doesn't accept regular expressions");
	  }

	  return it;
	};

	var wellKnownSymbol$9 = wellKnownSymbol$y;
	var MATCH = wellKnownSymbol$9('match');

	var correctIsRegexpLogic = function correctIsRegexpLogic(METHOD_NAME) {
	  var regexp = /./;

	  try {
	    '/./'[METHOD_NAME](regexp);
	  } catch (error1) {
	    try {
	      regexp[MATCH] = false;
	      return '/./'[METHOD_NAME](regexp);
	    } catch (error2) {
	      /* empty */
	    }
	  }

	  return false;
	};

	var $$z = _export;
	var uncurryThis$n = functionUncurryThis;
	var getOwnPropertyDescriptor$1 = objectGetOwnPropertyDescriptor.f;
	var toLength$8 = toLength$c;
	var toString$c = toString$p;
	var notARegExp$2 = notARegexp;
	var requireObjectCoercible$a = requireObjectCoercible$h;
	var correctIsRegExpLogic$2 = correctIsRegexpLogic;

	var un$EndsWith = uncurryThis$n(''.endsWith);
	var slice$2 = uncurryThis$n(''.slice);
	var min$4 = Math.min;
	var CORRECT_IS_REGEXP_LOGIC$1 = correctIsRegExpLogic$2('endsWith'); // https://github.com/zloirock/core-js/pull/702

	var MDN_POLYFILL_BUG$1 = !CORRECT_IS_REGEXP_LOGIC$1 && !!function () {
	  var descriptor = getOwnPropertyDescriptor$1(String.prototype, 'endsWith');
	  return descriptor && !descriptor.writable;
	}(); // `String.prototype.endsWith` method
	// https://tc39.es/ecma262/#sec-string.prototype.endswith

	$$z({
	  target: 'String',
	  proto: true,
	  forced: !MDN_POLYFILL_BUG$1 && !CORRECT_IS_REGEXP_LOGIC$1
	}, {
	  endsWith: function endsWith(searchString
	  /* , endPosition = @length */
	  ) {
	    var that = toString$c(requireObjectCoercible$a(this));
	    notARegExp$2(searchString);
	    var endPosition = arguments.length > 1 ? arguments[1] : undefined;
	    var len = that.length;
	    var end = endPosition === undefined ? len : min$4(toLength$8(endPosition), len);
	    var search = toString$c(searchString);
	    return un$EndsWith ? un$EndsWith(that, search, end) : slice$2(that, end - search.length, end) === search;
	  }
	});

	var $$y = _export;
	var global$n = global$1B;
	var uncurryThis$m = functionUncurryThis;
	var toAbsoluteIndex$1 = toAbsoluteIndex$8;
	var RangeError$6 = global$n.RangeError;
	var fromCharCode$1 = String.fromCharCode; // eslint-disable-next-line es/no-string-fromcodepoint -- required for testing

	var $fromCodePoint = String.fromCodePoint;
	var join$5 = uncurryThis$m([].join); // length should be 1, old FF problem

	var INCORRECT_LENGTH = !!$fromCodePoint && $fromCodePoint.length != 1; // `String.fromCodePoint` method
	// https://tc39.es/ecma262/#sec-string.fromcodepoint

	$$y({
	  target: 'String',
	  stat: true,
	  forced: INCORRECT_LENGTH
	}, {
	  // eslint-disable-next-line no-unused-vars -- required for `.length`
	  fromCodePoint: function fromCodePoint(x) {
	    var elements = [];
	    var length = arguments.length;
	    var i = 0;
	    var code;

	    while (length > i) {
	      code = +arguments[i++];
	      if (toAbsoluteIndex$1(code, 0x10FFFF) !== code) throw RangeError$6(code + ' is not a valid code point');
	      elements[i] = code < 0x10000 ? fromCharCode$1(code) : fromCharCode$1(((code -= 0x10000) >> 10) + 0xD800, code % 0x400 + 0xDC00);
	    }

	    return join$5(elements, '');
	  }
	});

	var $$x = _export;
	var uncurryThis$l = functionUncurryThis;
	var notARegExp$1 = notARegexp;
	var requireObjectCoercible$9 = requireObjectCoercible$h;
	var toString$b = toString$p;
	var correctIsRegExpLogic$1 = correctIsRegexpLogic;
	var stringIndexOf$3 = uncurryThis$l(''.indexOf); // `String.prototype.includes` method
	// https://tc39.es/ecma262/#sec-string.prototype.includes

	$$x({
	  target: 'String',
	  proto: true,
	  forced: !correctIsRegExpLogic$1('includes')
	}, {
	  includes: function includes(searchString
	  /* , position = 0 */
	  ) {
	    return !!~stringIndexOf$3(toString$b(requireObjectCoercible$9(this)), toString$b(notARegExp$1(searchString)), arguments.length > 1 ? arguments[1] : undefined);
	  }
	});

	var charAt$4 = stringMultibyte.charAt;
	var toString$a = toString$p;
	var InternalStateModule$6 = internalState;
	var defineIterator = defineIterator$3;
	var STRING_ITERATOR = 'String Iterator';
	var setInternalState$6 = InternalStateModule$6.set;
	var getInternalState$3 = InternalStateModule$6.getterFor(STRING_ITERATOR); // `String.prototype[@@iterator]` method
	// https://tc39.es/ecma262/#sec-string.prototype-@@iterator

	defineIterator(String, 'String', function (iterated) {
	  setInternalState$6(this, {
	    type: STRING_ITERATOR,
	    string: toString$a(iterated),
	    index: 0
	  }); // `%StringIteratorPrototype%.next` method
	  // https://tc39.es/ecma262/#sec-%stringiteratorprototype%.next
	}, function next() {
	  var state = getInternalState$3(this);
	  var string = state.string;
	  var index = state.index;
	  var point;
	  if (index >= string.length) return {
	    value: undefined,
	    done: true
	  };
	  point = charAt$4(string, index);
	  state.index += point.length;
	  return {
	    value: point,
	    done: false
	  };
	});

	var uncurryThis$k = functionUncurryThis;
	var redefine$5 = redefine$j.exports;
	var regexpExec$2 = regexpExec$3;
	var fails$g = fails$18;
	var wellKnownSymbol$8 = wellKnownSymbol$y;
	var createNonEnumerableProperty$5 = createNonEnumerableProperty$f;
	var SPECIES = wellKnownSymbol$8('species');
	var RegExpPrototype$2 = RegExp.prototype;

	var fixRegexpWellKnownSymbolLogic = function fixRegexpWellKnownSymbolLogic(KEY, exec, FORCED, SHAM) {
	  var SYMBOL = wellKnownSymbol$8(KEY);
	  var DELEGATES_TO_SYMBOL = !fails$g(function () {
	    // String methods call symbol-named RegEp methods
	    var O = {};

	    O[SYMBOL] = function () {
	      return 7;
	    };

	    return ''[KEY](O) != 7;
	  });
	  var DELEGATES_TO_EXEC = DELEGATES_TO_SYMBOL && !fails$g(function () {
	    // Symbol-named RegExp methods call .exec
	    var execCalled = false;
	    var re = /a/;

	    if (KEY === 'split') {
	      // We can't use real regex here since it causes deoptimization
	      // and serious performance degradation in V8
	      // https://github.com/zloirock/core-js/issues/306
	      re = {}; // RegExp[@@split] doesn't call the regex's exec method, but first creates
	      // a new one. We need to return the patched regex when creating the new one.

	      re.constructor = {};

	      re.constructor[SPECIES] = function () {
	        return re;
	      };

	      re.flags = '';
	      re[SYMBOL] = /./[SYMBOL];
	    }

	    re.exec = function () {
	      execCalled = true;
	      return null;
	    };

	    re[SYMBOL]('');
	    return !execCalled;
	  });

	  if (!DELEGATES_TO_SYMBOL || !DELEGATES_TO_EXEC || FORCED) {
	    var uncurriedNativeRegExpMethod = uncurryThis$k(/./[SYMBOL]);
	    var methods = exec(SYMBOL, ''[KEY], function (nativeMethod, regexp, str, arg2, forceStringMethod) {
	      var uncurriedNativeMethod = uncurryThis$k(nativeMethod);
	      var $exec = regexp.exec;

	      if ($exec === regexpExec$2 || $exec === RegExpPrototype$2.exec) {
	        if (DELEGATES_TO_SYMBOL && !forceStringMethod) {
	          // The native String method already delegates to @@method (this
	          // polyfilled function), leasing to infinite recursion.
	          // We avoid it by directly calling the native @@method method.
	          return {
	            done: true,
	            value: uncurriedNativeRegExpMethod(regexp, str, arg2)
	          };
	        }

	        return {
	          done: true,
	          value: uncurriedNativeMethod(str, regexp, arg2)
	        };
	      }

	      return {
	        done: false
	      };
	    });
	    redefine$5(String.prototype, KEY, methods[0]);
	    redefine$5(RegExpPrototype$2, SYMBOL, methods[1]);
	  }

	  if (SHAM) createNonEnumerableProperty$5(RegExpPrototype$2[SYMBOL], 'sham', true);
	};

	var charAt$3 = stringMultibyte.charAt; // `AdvanceStringIndex` abstract operation
	// https://tc39.es/ecma262/#sec-advancestringindex

	var advanceStringIndex$4 = function advanceStringIndex(S, index, unicode) {
	  return index + (unicode ? charAt$3(S, index).length : 1);
	};

	var global$m = global$1B;
	var call$c = functionCall;
	var anObject$a = anObject$B;
	var isCallable$5 = isCallable$u;
	var classof$5 = classofRaw$1;
	var regexpExec$1 = regexpExec$3;
	var TypeError$7 = global$m.TypeError; // `RegExpExec` abstract operation
	// https://tc39.es/ecma262/#sec-regexpexec

	var regexpExecAbstract = function regexpExecAbstract(R, S) {
	  var exec = R.exec;

	  if (isCallable$5(exec)) {
	    var result = call$c(exec, R, S);
	    if (result !== null) anObject$a(result);
	    return result;
	  }

	  if (classof$5(R) === 'RegExp') return call$c(regexpExec$1, R, S);
	  throw TypeError$7('RegExp#exec called on incompatible receiver');
	};

	var call$b = functionCall;
	var fixRegExpWellKnownSymbolLogic$3 = fixRegexpWellKnownSymbolLogic;
	var anObject$9 = anObject$B;
	var toLength$7 = toLength$c;
	var toString$9 = toString$p;
	var requireObjectCoercible$8 = requireObjectCoercible$h;
	var getMethod$5 = getMethod$9;
	var advanceStringIndex$3 = advanceStringIndex$4;
	var regExpExec$3 = regexpExecAbstract; // @@match logic

	fixRegExpWellKnownSymbolLogic$3('match', function (MATCH, nativeMatch, maybeCallNative) {
	  return [// `String.prototype.match` method
	  // https://tc39.es/ecma262/#sec-string.prototype.match
	  function match(regexp) {
	    var O = requireObjectCoercible$8(this);
	    var matcher = regexp == undefined ? undefined : getMethod$5(regexp, MATCH);
	    return matcher ? call$b(matcher, regexp, O) : new RegExp(regexp)[MATCH](toString$9(O));
	  }, // `RegExp.prototype[@@match]` method
	  // https://tc39.es/ecma262/#sec-regexp.prototype-@@match
	  function (string) {
	    var rx = anObject$9(this);
	    var S = toString$9(string);
	    var res = maybeCallNative(nativeMatch, rx, S);
	    if (res.done) return res.value;
	    if (!rx.global) return regExpExec$3(rx, S);
	    var fullUnicode = rx.unicode;
	    rx.lastIndex = 0;
	    var A = [];
	    var n = 0;
	    var result;

	    while ((result = regExpExec$3(rx, S)) !== null) {
	      var matchStr = toString$9(result[0]);
	      A[n] = matchStr;
	      if (matchStr === '') rx.lastIndex = advanceStringIndex$3(S, toLength$7(rx.lastIndex), fullUnicode);
	      n++;
	    }

	    return n === 0 ? null : A;
	  }];
	});

	/* eslint-disable es/no-string-prototype-matchall -- safe */


	var $$w = _export;
	var global$l = global$1B;
	var call$a = functionCall;
	var uncurryThis$j = functionUncurryThis;
	var createIteratorConstructor$1 = createIteratorConstructor$3;
	var requireObjectCoercible$7 = requireObjectCoercible$h;
	var toLength$6 = toLength$c;
	var toString$8 = toString$p;
	var anObject$8 = anObject$B;
	var classof$4 = classofRaw$1;
	var isPrototypeOf$2 = objectIsPrototypeOf;
	var isRegExp$2 = isRegexp;
	var regExpFlags$2 = regexpFlags$1;
	var getMethod$4 = getMethod$9;
	var redefine$4 = redefine$j.exports;
	var fails$f = fails$18;
	var wellKnownSymbol$7 = wellKnownSymbol$y;
	var speciesConstructor$2 = speciesConstructor$5;
	var advanceStringIndex$2 = advanceStringIndex$4;
	var regExpExec$2 = regexpExecAbstract;
	var InternalStateModule$5 = internalState;
	var IS_PURE$1 = isPure;
	var MATCH_ALL = wellKnownSymbol$7('matchAll');
	var REGEXP_STRING = 'RegExp String';
	var REGEXP_STRING_ITERATOR = REGEXP_STRING + ' Iterator';
	var setInternalState$5 = InternalStateModule$5.set;
	var getInternalState$2 = InternalStateModule$5.getterFor(REGEXP_STRING_ITERATOR);
	var RegExpPrototype$1 = RegExp.prototype;
	var TypeError$6 = global$l.TypeError;
	var getFlags$2 = uncurryThis$j(regExpFlags$2);
	var stringIndexOf$2 = uncurryThis$j(''.indexOf);
	var un$MatchAll = uncurryThis$j(''.matchAll);
	var WORKS_WITH_NON_GLOBAL_REGEX = !!un$MatchAll && !fails$f(function () {
	  un$MatchAll('a', /./);
	});
	var $RegExpStringIterator = createIteratorConstructor$1(function RegExpStringIterator(regexp, string, $global, fullUnicode) {
	  setInternalState$5(this, {
	    type: REGEXP_STRING_ITERATOR,
	    regexp: regexp,
	    string: string,
	    global: $global,
	    unicode: fullUnicode,
	    done: false
	  });
	}, REGEXP_STRING, function next() {
	  var state = getInternalState$2(this);
	  if (state.done) return {
	    value: undefined,
	    done: true
	  };
	  var R = state.regexp;
	  var S = state.string;
	  var match = regExpExec$2(R, S);
	  if (match === null) return {
	    value: undefined,
	    done: state.done = true
	  };

	  if (state.global) {
	    if (toString$8(match[0]) === '') R.lastIndex = advanceStringIndex$2(S, toLength$6(R.lastIndex), state.unicode);
	    return {
	      value: match,
	      done: false
	    };
	  }

	  state.done = true;
	  return {
	    value: match,
	    done: false
	  };
	});

	var $matchAll = function $matchAll(string) {
	  var R = anObject$8(this);
	  var S = toString$8(string);
	  var C, flagsValue, flags, matcher, $global, fullUnicode;
	  C = speciesConstructor$2(R, RegExp);
	  flagsValue = R.flags;

	  if (flagsValue === undefined && isPrototypeOf$2(RegExpPrototype$1, R) && !('flags' in RegExpPrototype$1)) {
	    flagsValue = getFlags$2(R);
	  }

	  flags = flagsValue === undefined ? '' : toString$8(flagsValue);
	  matcher = new C(C === RegExp ? R.source : R, flags);
	  $global = !!~stringIndexOf$2(flags, 'g');
	  fullUnicode = !!~stringIndexOf$2(flags, 'u');
	  matcher.lastIndex = toLength$6(R.lastIndex);
	  return new $RegExpStringIterator(matcher, S, $global, fullUnicode);
	}; // `String.prototype.matchAll` method
	// https://tc39.es/ecma262/#sec-string.prototype.matchall


	$$w({
	  target: 'String',
	  proto: true,
	  forced: WORKS_WITH_NON_GLOBAL_REGEX
	}, {
	  matchAll: function matchAll(regexp) {
	    var O = requireObjectCoercible$7(this);
	    var flags, S, matcher, rx;

	    if (regexp != null) {
	      if (isRegExp$2(regexp)) {
	        flags = toString$8(requireObjectCoercible$7('flags' in RegExpPrototype$1 ? regexp.flags : getFlags$2(regexp)));
	        if (!~stringIndexOf$2(flags, 'g')) throw TypeError$6('`.matchAll` does not allow non-global regexes');
	      }

	      if (WORKS_WITH_NON_GLOBAL_REGEX) return un$MatchAll(O, regexp);
	      matcher = getMethod$4(regexp, MATCH_ALL);
	      if (matcher === undefined && IS_PURE$1 && classof$4(regexp) == 'RegExp') matcher = $matchAll;
	      if (matcher) return call$a(matcher, regexp, O);
	    } else if (WORKS_WITH_NON_GLOBAL_REGEX) return un$MatchAll(O, regexp);

	    S = toString$8(O);
	    rx = new RegExp(regexp, 'g');
	    return rx[MATCH_ALL](S);
	  }
	});
	MATCH_ALL in RegExpPrototype$1 || redefine$4(RegExpPrototype$1, MATCH_ALL, $matchAll);

	var uncurryThis$i = functionUncurryThis;
	var toLength$5 = toLength$c;
	var toString$7 = toString$p;
	var $repeat = stringRepeat;
	var requireObjectCoercible$6 = requireObjectCoercible$h;
	var repeat$1 = uncurryThis$i($repeat);
	var stringSlice$7 = uncurryThis$i(''.slice);
	var ceil = Math.ceil; // `String.prototype.{ padStart, padEnd }` methods implementation

	var createMethod = function createMethod(IS_END) {
	  return function ($this, maxLength, fillString) {
	    var S = toString$7(requireObjectCoercible$6($this));
	    var intMaxLength = toLength$5(maxLength);
	    var stringLength = S.length;
	    var fillStr = fillString === undefined ? ' ' : toString$7(fillString);
	    var fillLen, stringFiller;
	    if (intMaxLength <= stringLength || fillStr == '') return S;
	    fillLen = intMaxLength - stringLength;
	    stringFiller = repeat$1(fillStr, ceil(fillLen / fillStr.length));
	    if (stringFiller.length > fillLen) stringFiller = stringSlice$7(stringFiller, 0, fillLen);
	    return IS_END ? S + stringFiller : stringFiller + S;
	  };
	};

	var stringPad = {
	  // `String.prototype.padStart` method
	  // https://tc39.es/ecma262/#sec-string.prototype.padstart
	  start: createMethod(false),
	  // `String.prototype.padEnd` method
	  // https://tc39.es/ecma262/#sec-string.prototype.padend
	  end: createMethod(true)
	};

	var userAgent = engineUserAgent;
	var stringPadWebkitBug = /Version\/10(?:\.\d+){1,2}(?: [\w./]+)?(?: Mobile\/\w+)? Safari\//.test(userAgent);

	var $$v = _export;
	var $padEnd = stringPad.end;
	var WEBKIT_BUG$1 = stringPadWebkitBug; // `String.prototype.padEnd` method
	// https://tc39.es/ecma262/#sec-string.prototype.padend

	$$v({
	  target: 'String',
	  proto: true,
	  forced: WEBKIT_BUG$1
	}, {
	  padEnd: function padEnd(maxLength
	  /* , fillString = ' ' */
	  ) {
	    return $padEnd(this, maxLength, arguments.length > 1 ? arguments[1] : undefined);
	  }
	});

	var $$u = _export;
	var $padStart = stringPad.start;
	var WEBKIT_BUG = stringPadWebkitBug; // `String.prototype.padStart` method
	// https://tc39.es/ecma262/#sec-string.prototype.padstart

	$$u({
	  target: 'String',
	  proto: true,
	  forced: WEBKIT_BUG
	}, {
	  padStart: function padStart(maxLength
	  /* , fillString = ' ' */
	  ) {
	    return $padStart(this, maxLength, arguments.length > 1 ? arguments[1] : undefined);
	  }
	});

	var $$t = _export;
	var uncurryThis$h = functionUncurryThis;
	var toIndexedObject$1 = toIndexedObject$f;
	var toObject$2 = toObject$o;
	var toString$6 = toString$p;
	var lengthOfArrayLike$5 = lengthOfArrayLike$n;
	var push$6 = uncurryThis$h([].push);
	var join$4 = uncurryThis$h([].join); // `String.raw` method
	// https://tc39.es/ecma262/#sec-string.raw

	$$t({
	  target: 'String',
	  stat: true
	}, {
	  raw: function raw(template) {
	    var rawTemplate = toIndexedObject$1(toObject$2(template).raw);
	    var literalSegments = lengthOfArrayLike$5(rawTemplate);
	    var argumentsLength = arguments.length;
	    var elements = [];
	    var i = 0;

	    while (literalSegments > i) {
	      push$6(elements, toString$6(rawTemplate[i++]));
	      if (i === literalSegments) return join$4(elements, '');
	      if (i < argumentsLength) push$6(elements, toString$6(arguments[i]));
	    }
	  }
	});

	var $$s = _export;
	var repeat = stringRepeat; // `String.prototype.repeat` method
	// https://tc39.es/ecma262/#sec-string.prototype.repeat

	$$s({
	  target: 'String',
	  proto: true
	}, {
	  repeat: repeat
	});

	var uncurryThis$g = functionUncurryThis;
	var toObject$1 = toObject$o;
	var floor$3 = Math.floor;
	var charAt$2 = uncurryThis$g(''.charAt);
	var replace$4 = uncurryThis$g(''.replace);
	var stringSlice$6 = uncurryThis$g(''.slice);
	var SUBSTITUTION_SYMBOLS = /\$([$&'`]|\d{1,2}|<[^>]*>)/g;
	var SUBSTITUTION_SYMBOLS_NO_NAMED = /\$([$&'`]|\d{1,2})/g; // `GetSubstitution` abstract operation
	// https://tc39.es/ecma262/#sec-getsubstitution

	var getSubstitution$2 = function getSubstitution(matched, str, position, captures, namedCaptures, replacement) {
	  var tailPos = position + matched.length;
	  var m = captures.length;
	  var symbols = SUBSTITUTION_SYMBOLS_NO_NAMED;

	  if (namedCaptures !== undefined) {
	    namedCaptures = toObject$1(namedCaptures);
	    symbols = SUBSTITUTION_SYMBOLS;
	  }

	  return replace$4(replacement, symbols, function (match, ch) {
	    var capture;

	    switch (charAt$2(ch, 0)) {
	      case '$':
	        return '$';

	      case '&':
	        return matched;

	      case '`':
	        return stringSlice$6(str, 0, position);

	      case "'":
	        return stringSlice$6(str, tailPos);

	      case '<':
	        capture = namedCaptures[stringSlice$6(ch, 1, -1)];
	        break;

	      default:
	        // \d\d?
	        var n = +ch;
	        if (n === 0) return match;

	        if (n > m) {
	          var f = floor$3(n / 10);
	          if (f === 0) return match;
	          if (f <= m) return captures[f - 1] === undefined ? charAt$2(ch, 1) : captures[f - 1] + charAt$2(ch, 1);
	          return match;
	        }

	        capture = captures[n - 1];
	    }

	    return capture === undefined ? '' : capture;
	  });
	};

	var apply$3 = functionApply$1;
	var call$9 = functionCall;
	var uncurryThis$f = functionUncurryThis;
	var fixRegExpWellKnownSymbolLogic$2 = fixRegexpWellKnownSymbolLogic;
	var fails$e = fails$18;
	var anObject$7 = anObject$B;
	var isCallable$4 = isCallable$u;
	var toIntegerOrInfinity$2 = toIntegerOrInfinity$g;
	var toLength$4 = toLength$c;
	var toString$5 = toString$p;
	var requireObjectCoercible$5 = requireObjectCoercible$h;
	var advanceStringIndex$1 = advanceStringIndex$4;
	var getMethod$3 = getMethod$9;
	var getSubstitution$1 = getSubstitution$2;
	var regExpExec$1 = regexpExecAbstract;
	var wellKnownSymbol$6 = wellKnownSymbol$y;
	var REPLACE$1 = wellKnownSymbol$6('replace');
	var max$2 = Math.max;
	var min$3 = Math.min;
	var concat = uncurryThis$f([].concat);
	var push$5 = uncurryThis$f([].push);
	var stringIndexOf$1 = uncurryThis$f(''.indexOf);
	var stringSlice$5 = uncurryThis$f(''.slice);

	var maybeToString = function maybeToString(it) {
	  return it === undefined ? it : String(it);
	}; // IE <= 11 replaces $0 with the whole match, as if it was $&
	// https://stackoverflow.com/questions/6024666/getting-ie-to-replace-a-regex-with-the-literal-string-0


	var REPLACE_KEEPS_$0 = function () {
	  // eslint-disable-next-line regexp/prefer-escape-replacement-dollar-char -- required for testing
	  return 'a'.replace(/./, '$0') === '$0';
	}(); // Safari <= 13.0.3(?) substitutes nth capture where n>m with an empty string


	var REGEXP_REPLACE_SUBSTITUTES_UNDEFINED_CAPTURE = function () {
	  if (/./[REPLACE$1]) {
	    return /./[REPLACE$1]('a', '$0') === '';
	  }

	  return false;
	}();

	var REPLACE_SUPPORTS_NAMED_GROUPS = !fails$e(function () {
	  var re = /./;

	  re.exec = function () {
	    var result = [];
	    result.groups = {
	      a: '7'
	    };
	    return result;
	  }; // eslint-disable-next-line regexp/no-useless-dollar-replacements -- false positive


	  return ''.replace(re, '$<a>') !== '7';
	}); // @@replace logic

	fixRegExpWellKnownSymbolLogic$2('replace', function (_, nativeReplace, maybeCallNative) {
	  var UNSAFE_SUBSTITUTE = REGEXP_REPLACE_SUBSTITUTES_UNDEFINED_CAPTURE ? '$' : '$0';
	  return [// `String.prototype.replace` method
	  // https://tc39.es/ecma262/#sec-string.prototype.replace
	  function replace(searchValue, replaceValue) {
	    var O = requireObjectCoercible$5(this);
	    var replacer = searchValue == undefined ? undefined : getMethod$3(searchValue, REPLACE$1);
	    return replacer ? call$9(replacer, searchValue, O, replaceValue) : call$9(nativeReplace, toString$5(O), searchValue, replaceValue);
	  }, // `RegExp.prototype[@@replace]` method
	  // https://tc39.es/ecma262/#sec-regexp.prototype-@@replace
	  function (string, replaceValue) {
	    var rx = anObject$7(this);
	    var S = toString$5(string);

	    if (typeof replaceValue == 'string' && stringIndexOf$1(replaceValue, UNSAFE_SUBSTITUTE) === -1 && stringIndexOf$1(replaceValue, '$<') === -1) {
	      var res = maybeCallNative(nativeReplace, rx, S, replaceValue);
	      if (res.done) return res.value;
	    }

	    var functionalReplace = isCallable$4(replaceValue);
	    if (!functionalReplace) replaceValue = toString$5(replaceValue);
	    var global = rx.global;

	    if (global) {
	      var fullUnicode = rx.unicode;
	      rx.lastIndex = 0;
	    }

	    var results = [];

	    while (true) {
	      var result = regExpExec$1(rx, S);
	      if (result === null) break;
	      push$5(results, result);
	      if (!global) break;
	      var matchStr = toString$5(result[0]);
	      if (matchStr === '') rx.lastIndex = advanceStringIndex$1(S, toLength$4(rx.lastIndex), fullUnicode);
	    }

	    var accumulatedResult = '';
	    var nextSourcePosition = 0;

	    for (var i = 0; i < results.length; i++) {
	      result = results[i];
	      var matched = toString$5(result[0]);
	      var position = max$2(min$3(toIntegerOrInfinity$2(result.index), S.length), 0);
	      var captures = []; // NOTE: This is equivalent to
	      //   captures = result.slice(1).map(maybeToString)
	      // but for some reason `nativeSlice.call(result, 1, result.length)` (called in
	      // the slice polyfill when slicing native arrays) "doesn't work" in safari 9 and
	      // causes a crash (https://pastebin.com/N21QzeQA) when trying to debug it.

	      for (var j = 1; j < result.length; j++) {
	        push$5(captures, maybeToString(result[j]));
	      }

	      var namedCaptures = result.groups;

	      if (functionalReplace) {
	        var replacerArgs = concat([matched], captures, position, S);
	        if (namedCaptures !== undefined) push$5(replacerArgs, namedCaptures);
	        var replacement = toString$5(apply$3(replaceValue, undefined, replacerArgs));
	      } else {
	        replacement = getSubstitution$1(matched, S, position, captures, namedCaptures, replaceValue);
	      }

	      if (position >= nextSourcePosition) {
	        accumulatedResult += stringSlice$5(S, nextSourcePosition, position) + replacement;
	        nextSourcePosition = position + matched.length;
	      }
	    }

	    return accumulatedResult + stringSlice$5(S, nextSourcePosition);
	  }];
	}, !REPLACE_SUPPORTS_NAMED_GROUPS || !REPLACE_KEEPS_$0 || REGEXP_REPLACE_SUBSTITUTES_UNDEFINED_CAPTURE);

	var $$r = _export;
	var global$k = global$1B;
	var call$8 = functionCall;
	var uncurryThis$e = functionUncurryThis;
	var requireObjectCoercible$4 = requireObjectCoercible$h;
	var isCallable$3 = isCallable$u;
	var isRegExp$1 = isRegexp;
	var toString$4 = toString$p;
	var getMethod$2 = getMethod$9;
	var regExpFlags$1 = regexpFlags$1;
	var getSubstitution = getSubstitution$2;
	var wellKnownSymbol$5 = wellKnownSymbol$y;
	var REPLACE = wellKnownSymbol$5('replace');
	var RegExpPrototype = RegExp.prototype;
	var TypeError$5 = global$k.TypeError;
	var getFlags$1 = uncurryThis$e(regExpFlags$1);
	var indexOf = uncurryThis$e(''.indexOf);
	uncurryThis$e(''.replace);
	var stringSlice$4 = uncurryThis$e(''.slice);
	var max$1 = Math.max;

	var stringIndexOf = function stringIndexOf(string, searchValue, fromIndex) {
	  if (fromIndex > string.length) return -1;
	  if (searchValue === '') return fromIndex;
	  return indexOf(string, searchValue, fromIndex);
	}; // `String.prototype.replaceAll` method
	// https://tc39.es/ecma262/#sec-string.prototype.replaceall


	$$r({
	  target: 'String',
	  proto: true
	}, {
	  replaceAll: function replaceAll(searchValue, replaceValue) {
	    var O = requireObjectCoercible$4(this);
	    var IS_REG_EXP, flags, replacer, string, searchString, functionalReplace, searchLength, advanceBy, replacement;
	    var position = 0;
	    var endOfLastMatch = 0;
	    var result = '';

	    if (searchValue != null) {
	      IS_REG_EXP = isRegExp$1(searchValue);

	      if (IS_REG_EXP) {
	        flags = toString$4(requireObjectCoercible$4('flags' in RegExpPrototype ? searchValue.flags : getFlags$1(searchValue)));
	        if (!~indexOf(flags, 'g')) throw TypeError$5('`.replaceAll` does not allow non-global regexes');
	      }

	      replacer = getMethod$2(searchValue, REPLACE);

	      if (replacer) {
	        return call$8(replacer, searchValue, O, replaceValue);
	      }
	    }

	    string = toString$4(O);
	    searchString = toString$4(searchValue);
	    functionalReplace = isCallable$3(replaceValue);
	    if (!functionalReplace) replaceValue = toString$4(replaceValue);
	    searchLength = searchString.length;
	    advanceBy = max$1(1, searchLength);
	    position = stringIndexOf(string, searchString, 0);

	    while (position !== -1) {
	      replacement = functionalReplace ? toString$4(replaceValue(searchString, position, string)) : getSubstitution(searchString, string, position, [], undefined, replaceValue);
	      result += stringSlice$4(string, endOfLastMatch, position) + replacement;
	      endOfLastMatch = position + searchLength;
	      position = stringIndexOf(string, searchString, position + advanceBy);
	    }

	    if (endOfLastMatch < string.length) {
	      result += stringSlice$4(string, endOfLastMatch);
	    }

	    return result;
	  }
	});

	var call$7 = functionCall;
	var fixRegExpWellKnownSymbolLogic$1 = fixRegexpWellKnownSymbolLogic;
	var anObject$6 = anObject$B;
	var requireObjectCoercible$3 = requireObjectCoercible$h;
	var sameValue = sameValue$1;
	var toString$3 = toString$p;
	var getMethod$1 = getMethod$9;
	var regExpExec = regexpExecAbstract; // @@search logic

	fixRegExpWellKnownSymbolLogic$1('search', function (SEARCH, nativeSearch, maybeCallNative) {
	  return [// `String.prototype.search` method
	  // https://tc39.es/ecma262/#sec-string.prototype.search
	  function search(regexp) {
	    var O = requireObjectCoercible$3(this);
	    var searcher = regexp == undefined ? undefined : getMethod$1(regexp, SEARCH);
	    return searcher ? call$7(searcher, regexp, O) : new RegExp(regexp)[SEARCH](toString$3(O));
	  }, // `RegExp.prototype[@@search]` method
	  // https://tc39.es/ecma262/#sec-regexp.prototype-@@search
	  function (string) {
	    var rx = anObject$6(this);
	    var S = toString$3(string);
	    var res = maybeCallNative(nativeSearch, rx, S);
	    if (res.done) return res.value;
	    var previousLastIndex = rx.lastIndex;
	    if (!sameValue(previousLastIndex, 0)) rx.lastIndex = 0;
	    var result = regExpExec(rx, S);
	    if (!sameValue(rx.lastIndex, previousLastIndex)) rx.lastIndex = previousLastIndex;
	    return result === null ? -1 : result.index;
	  }];
	});

	var apply$2 = functionApply$1;
	var call$6 = functionCall;
	var uncurryThis$d = functionUncurryThis;
	var fixRegExpWellKnownSymbolLogic = fixRegexpWellKnownSymbolLogic;
	var isRegExp = isRegexp;
	var anObject$5 = anObject$B;
	var requireObjectCoercible$2 = requireObjectCoercible$h;
	var speciesConstructor$1 = speciesConstructor$5;
	var advanceStringIndex = advanceStringIndex$4;
	var toLength$3 = toLength$c;
	var toString$2 = toString$p;
	var getMethod = getMethod$9;
	var arraySlice$3 = arraySliceSimple;
	var callRegExpExec = regexpExecAbstract;
	var regexpExec = regexpExec$3;
	var stickyHelpers = regexpStickyHelpers;
	var fails$d = fails$18;
	var UNSUPPORTED_Y = stickyHelpers.UNSUPPORTED_Y;
	var MAX_UINT32 = 0xFFFFFFFF;
	var min$2 = Math.min;
	var $push = [].push;
	var exec$2 = uncurryThis$d(/./.exec);
	var push$4 = uncurryThis$d($push);
	var stringSlice$3 = uncurryThis$d(''.slice); // Chrome 51 has a buggy "split" implementation when RegExp#exec !== nativeExec
	// Weex JS has frozen built-in prototypes, so use try / catch wrapper

	var SPLIT_WORKS_WITH_OVERWRITTEN_EXEC = !fails$d(function () {
	  // eslint-disable-next-line regexp/no-empty-group -- required for testing
	  var re = /(?:)/;
	  var originalExec = re.exec;

	  re.exec = function () {
	    return originalExec.apply(this, arguments);
	  };

	  var result = 'ab'.split(re);
	  return result.length !== 2 || result[0] !== 'a' || result[1] !== 'b';
	}); // @@split logic

	fixRegExpWellKnownSymbolLogic('split', function (SPLIT, nativeSplit, maybeCallNative) {
	  var internalSplit;

	  if ('abbc'.split(/(b)*/)[1] == 'c' || // eslint-disable-next-line regexp/no-empty-group -- required for testing
	  'test'.split(/(?:)/, -1).length != 4 || 'ab'.split(/(?:ab)*/).length != 2 || '.'.split(/(.?)(.?)/).length != 4 || // eslint-disable-next-line regexp/no-empty-capturing-group, regexp/no-empty-group -- required for testing
	  '.'.split(/()()/).length > 1 || ''.split(/.?/).length) {
	    // based on es5-shim implementation, need to rework it
	    internalSplit = function internalSplit(separator, limit) {
	      var string = toString$2(requireObjectCoercible$2(this));
	      var lim = limit === undefined ? MAX_UINT32 : limit >>> 0;
	      if (lim === 0) return [];
	      if (separator === undefined) return [string]; // If `separator` is not a regex, use native split

	      if (!isRegExp(separator)) {
	        return call$6(nativeSplit, string, separator, lim);
	      }

	      var output = [];
	      var flags = (separator.ignoreCase ? 'i' : '') + (separator.multiline ? 'm' : '') + (separator.unicode ? 'u' : '') + (separator.sticky ? 'y' : '');
	      var lastLastIndex = 0; // Make `global` and avoid `lastIndex` issues by working with a copy

	      var separatorCopy = new RegExp(separator.source, flags + 'g');
	      var match, lastIndex, lastLength;

	      while (match = call$6(regexpExec, separatorCopy, string)) {
	        lastIndex = separatorCopy.lastIndex;

	        if (lastIndex > lastLastIndex) {
	          push$4(output, stringSlice$3(string, lastLastIndex, match.index));
	          if (match.length > 1 && match.index < string.length) apply$2($push, output, arraySlice$3(match, 1));
	          lastLength = match[0].length;
	          lastLastIndex = lastIndex;
	          if (output.length >= lim) break;
	        }

	        if (separatorCopy.lastIndex === match.index) separatorCopy.lastIndex++; // Avoid an infinite loop
	      }

	      if (lastLastIndex === string.length) {
	        if (lastLength || !exec$2(separatorCopy, '')) push$4(output, '');
	      } else push$4(output, stringSlice$3(string, lastLastIndex));

	      return output.length > lim ? arraySlice$3(output, 0, lim) : output;
	    }; // Chakra, V8

	  } else if ('0'.split(undefined, 0).length) {
	    internalSplit = function internalSplit(separator, limit) {
	      return separator === undefined && limit === 0 ? [] : call$6(nativeSplit, this, separator, limit);
	    };
	  } else internalSplit = nativeSplit;

	  return [// `String.prototype.split` method
	  // https://tc39.es/ecma262/#sec-string.prototype.split
	  function split(separator, limit) {
	    var O = requireObjectCoercible$2(this);
	    var splitter = separator == undefined ? undefined : getMethod(separator, SPLIT);
	    return splitter ? call$6(splitter, separator, O, limit) : call$6(internalSplit, toString$2(O), separator, limit);
	  }, // `RegExp.prototype[@@split]` method
	  // https://tc39.es/ecma262/#sec-regexp.prototype-@@split
	  //
	  // NOTE: This cannot be properly polyfilled in engines that don't support
	  // the 'y' flag.
	  function (string, limit) {
	    var rx = anObject$5(this);
	    var S = toString$2(string);
	    var res = maybeCallNative(internalSplit, rx, S, limit, internalSplit !== nativeSplit);
	    if (res.done) return res.value;
	    var C = speciesConstructor$1(rx, RegExp);
	    var unicodeMatching = rx.unicode;
	    var flags = (rx.ignoreCase ? 'i' : '') + (rx.multiline ? 'm' : '') + (rx.unicode ? 'u' : '') + (UNSUPPORTED_Y ? 'g' : 'y'); // ^(? + rx + ) is needed, in combination with some S slicing, to
	    // simulate the 'y' flag.

	    var splitter = new C(UNSUPPORTED_Y ? '^(?:' + rx.source + ')' : rx, flags);
	    var lim = limit === undefined ? MAX_UINT32 : limit >>> 0;
	    if (lim === 0) return [];
	    if (S.length === 0) return callRegExpExec(splitter, S) === null ? [S] : [];
	    var p = 0;
	    var q = 0;
	    var A = [];

	    while (q < S.length) {
	      splitter.lastIndex = UNSUPPORTED_Y ? 0 : q;
	      var z = callRegExpExec(splitter, UNSUPPORTED_Y ? stringSlice$3(S, q) : S);
	      var e;

	      if (z === null || (e = min$2(toLength$3(splitter.lastIndex + (UNSUPPORTED_Y ? q : 0)), S.length)) === p) {
	        q = advanceStringIndex(S, q, unicodeMatching);
	      } else {
	        push$4(A, stringSlice$3(S, p, q));
	        if (A.length === lim) return A;

	        for (var i = 1; i <= z.length - 1; i++) {
	          push$4(A, z[i]);
	          if (A.length === lim) return A;
	        }

	        q = p = e;
	      }
	    }

	    push$4(A, stringSlice$3(S, p));
	    return A;
	  }];
	}, !SPLIT_WORKS_WITH_OVERWRITTEN_EXEC, UNSUPPORTED_Y);

	var $$q = _export;
	var uncurryThis$c = functionUncurryThis;
	var getOwnPropertyDescriptor = objectGetOwnPropertyDescriptor.f;
	var toLength$2 = toLength$c;
	var toString$1 = toString$p;
	var notARegExp = notARegexp;
	var requireObjectCoercible$1 = requireObjectCoercible$h;
	var correctIsRegExpLogic = correctIsRegexpLogic;

	var un$StartsWith = uncurryThis$c(''.startsWith);
	var stringSlice$2 = uncurryThis$c(''.slice);
	var min$1 = Math.min;
	var CORRECT_IS_REGEXP_LOGIC = correctIsRegExpLogic('startsWith'); // https://github.com/zloirock/core-js/pull/702

	var MDN_POLYFILL_BUG = !CORRECT_IS_REGEXP_LOGIC && !!function () {
	  var descriptor = getOwnPropertyDescriptor(String.prototype, 'startsWith');
	  return descriptor && !descriptor.writable;
	}(); // `String.prototype.startsWith` method
	// https://tc39.es/ecma262/#sec-string.prototype.startswith

	$$q({
	  target: 'String',
	  proto: true,
	  forced: !MDN_POLYFILL_BUG && !CORRECT_IS_REGEXP_LOGIC
	}, {
	  startsWith: function startsWith(searchString
	  /* , position = 0 */
	  ) {
	    var that = toString$1(requireObjectCoercible$1(this));
	    notARegExp(searchString);
	    var index = toLength$2(min$1(arguments.length > 1 ? arguments[1] : undefined, that.length));
	    var search = toString$1(searchString);
	    return un$StartsWith ? un$StartsWith(that, search, index) : stringSlice$2(that, index, index + search.length) === search;
	  }
	});

	var PROPER_FUNCTION_NAME = functionName.PROPER;
	var fails$c = fails$18;
	var whitespaces = whitespaces$4;
	var non = "\u200B\x85\u180E"; // check that a method works with the correct list
	// of whitespaces and has a correct name

	var stringTrimForced = function stringTrimForced(METHOD_NAME) {
	  return fails$c(function () {
	    return !!whitespaces[METHOD_NAME]() || non[METHOD_NAME]() !== non || PROPER_FUNCTION_NAME && whitespaces[METHOD_NAME].name !== METHOD_NAME;
	  });
	};

	var $$p = _export;
	var $trim = stringTrim.trim;
	var forcedStringTrimMethod$2 = stringTrimForced; // `String.prototype.trim` method
	// https://tc39.es/ecma262/#sec-string.prototype.trim

	$$p({
	  target: 'String',
	  proto: true,
	  forced: forcedStringTrimMethod$2('trim')
	}, {
	  trim: function trim() {
	    return $trim(this);
	  }
	});

	var $$o = _export;
	var $trimEnd = stringTrim.end;
	var forcedStringTrimMethod$1 = stringTrimForced;
	var FORCED$4 = forcedStringTrimMethod$1('trimEnd');
	var trimEnd = FORCED$4 ? function trimEnd() {
	  return $trimEnd(this); // eslint-disable-next-line es/no-string-prototype-trimstart-trimend -- safe
	} : ''.trimEnd; // `String.prototype.{ trimEnd, trimRight }` methods
	// https://tc39.es/ecma262/#sec-string.prototype.trimend
	// https://tc39.es/ecma262/#String.prototype.trimright

	$$o({
	  target: 'String',
	  proto: true,
	  name: 'trimEnd',
	  forced: FORCED$4
	}, {
	  trimEnd: trimEnd,
	  trimRight: trimEnd
	});

	var $$n = _export;
	var $trimStart = stringTrim.start;
	var forcedStringTrimMethod = stringTrimForced;
	var FORCED$3 = forcedStringTrimMethod('trimStart');
	var trimStart = FORCED$3 ? function trimStart() {
	  return $trimStart(this); // eslint-disable-next-line es/no-string-prototype-trimstart-trimend -- safe
	} : ''.trimStart; // `String.prototype.{ trimStart, trimLeft }` methods
	// https://tc39.es/ecma262/#sec-string.prototype.trimstart
	// https://tc39.es/ecma262/#String.prototype.trimleft

	$$n({
	  target: 'String',
	  proto: true,
	  name: 'trimStart',
	  forced: FORCED$3
	}, {
	  trimStart: trimStart,
	  trimLeft: trimStart
	});

	var uncurryThis$b = functionUncurryThis;
	var requireObjectCoercible = requireObjectCoercible$h;
	var toString = toString$p;
	var quot = /"/g;
	var replace$3 = uncurryThis$b(''.replace); // `CreateHTML` abstract operation
	// https://tc39.es/ecma262/#sec-createhtml

	var createHtml = function createHtml(string, tag, attribute, value) {
	  var S = toString(requireObjectCoercible(string));
	  var p1 = '<' + tag;
	  if (attribute !== '') p1 += ' ' + attribute + '="' + replace$3(toString(value), quot, '&quot;') + '"';
	  return p1 + '>' + S + '</' + tag + '>';
	};

	var fails$b = fails$18; // check the existence of a method, lowercase
	// of a tag and escaping quotes in arguments

	var stringHtmlForced = function stringHtmlForced(METHOD_NAME) {
	  return fails$b(function () {
	    var test = ''[METHOD_NAME]('"');
	    return test !== test.toLowerCase() || test.split('"').length > 3;
	  });
	};

	var $$m = _export;
	var createHTML$c = createHtml;
	var forcedStringHTMLMethod$c = stringHtmlForced; // `String.prototype.anchor` method
	// https://tc39.es/ecma262/#sec-string.prototype.anchor

	$$m({
	  target: 'String',
	  proto: true,
	  forced: forcedStringHTMLMethod$c('anchor')
	}, {
	  anchor: function anchor(name) {
	    return createHTML$c(this, 'a', 'name', name);
	  }
	});

	var $$l = _export;
	var createHTML$b = createHtml;
	var forcedStringHTMLMethod$b = stringHtmlForced; // `String.prototype.big` method
	// https://tc39.es/ecma262/#sec-string.prototype.big

	$$l({
	  target: 'String',
	  proto: true,
	  forced: forcedStringHTMLMethod$b('big')
	}, {
	  big: function big() {
	    return createHTML$b(this, 'big', '', '');
	  }
	});

	var $$k = _export;
	var createHTML$a = createHtml;
	var forcedStringHTMLMethod$a = stringHtmlForced; // `String.prototype.blink` method
	// https://tc39.es/ecma262/#sec-string.prototype.blink

	$$k({
	  target: 'String',
	  proto: true,
	  forced: forcedStringHTMLMethod$a('blink')
	}, {
	  blink: function blink() {
	    return createHTML$a(this, 'blink', '', '');
	  }
	});

	var $$j = _export;
	var createHTML$9 = createHtml;
	var forcedStringHTMLMethod$9 = stringHtmlForced; // `String.prototype.bold` method
	// https://tc39.es/ecma262/#sec-string.prototype.bold

	$$j({
	  target: 'String',
	  proto: true,
	  forced: forcedStringHTMLMethod$9('bold')
	}, {
	  bold: function bold() {
	    return createHTML$9(this, 'b', '', '');
	  }
	});

	var $$i = _export;
	var createHTML$8 = createHtml;
	var forcedStringHTMLMethod$8 = stringHtmlForced; // `String.prototype.fixed` method
	// https://tc39.es/ecma262/#sec-string.prototype.fixed

	$$i({
	  target: 'String',
	  proto: true,
	  forced: forcedStringHTMLMethod$8('fixed')
	}, {
	  fixed: function fixed() {
	    return createHTML$8(this, 'tt', '', '');
	  }
	});

	var $$h = _export;
	var createHTML$7 = createHtml;
	var forcedStringHTMLMethod$7 = stringHtmlForced; // `String.prototype.fontcolor` method
	// https://tc39.es/ecma262/#sec-string.prototype.fontcolor

	$$h({
	  target: 'String',
	  proto: true,
	  forced: forcedStringHTMLMethod$7('fontcolor')
	}, {
	  fontcolor: function fontcolor(color) {
	    return createHTML$7(this, 'font', 'color', color);
	  }
	});

	var $$g = _export;
	var createHTML$6 = createHtml;
	var forcedStringHTMLMethod$6 = stringHtmlForced; // `String.prototype.fontsize` method
	// https://tc39.es/ecma262/#sec-string.prototype.fontsize

	$$g({
	  target: 'String',
	  proto: true,
	  forced: forcedStringHTMLMethod$6('fontsize')
	}, {
	  fontsize: function fontsize(size) {
	    return createHTML$6(this, 'font', 'size', size);
	  }
	});

	var $$f = _export;
	var createHTML$5 = createHtml;
	var forcedStringHTMLMethod$5 = stringHtmlForced; // `String.prototype.italics` method
	// https://tc39.es/ecma262/#sec-string.prototype.italics

	$$f({
	  target: 'String',
	  proto: true,
	  forced: forcedStringHTMLMethod$5('italics')
	}, {
	  italics: function italics() {
	    return createHTML$5(this, 'i', '', '');
	  }
	});

	var $$e = _export;
	var createHTML$4 = createHtml;
	var forcedStringHTMLMethod$4 = stringHtmlForced; // `String.prototype.link` method
	// https://tc39.es/ecma262/#sec-string.prototype.link

	$$e({
	  target: 'String',
	  proto: true,
	  forced: forcedStringHTMLMethod$4('link')
	}, {
	  link: function link(url) {
	    return createHTML$4(this, 'a', 'href', url);
	  }
	});

	var $$d = _export;
	var createHTML$3 = createHtml;
	var forcedStringHTMLMethod$3 = stringHtmlForced; // `String.prototype.small` method
	// https://tc39.es/ecma262/#sec-string.prototype.small

	$$d({
	  target: 'String',
	  proto: true,
	  forced: forcedStringHTMLMethod$3('small')
	}, {
	  small: function small() {
	    return createHTML$3(this, 'small', '', '');
	  }
	});

	var $$c = _export;
	var createHTML$2 = createHtml;
	var forcedStringHTMLMethod$2 = stringHtmlForced; // `String.prototype.strike` method
	// https://tc39.es/ecma262/#sec-string.prototype.strike

	$$c({
	  target: 'String',
	  proto: true,
	  forced: forcedStringHTMLMethod$2('strike')
	}, {
	  strike: function strike() {
	    return createHTML$2(this, 'strike', '', '');
	  }
	});

	var $$b = _export;
	var createHTML$1 = createHtml;
	var forcedStringHTMLMethod$1 = stringHtmlForced; // `String.prototype.sub` method
	// https://tc39.es/ecma262/#sec-string.prototype.sub

	$$b({
	  target: 'String',
	  proto: true,
	  forced: forcedStringHTMLMethod$1('sub')
	}, {
	  sub: function sub() {
	    return createHTML$1(this, 'sub', '', '');
	  }
	});

	var $$a = _export;
	var createHTML = createHtml;
	var forcedStringHTMLMethod = stringHtmlForced; // `String.prototype.sup` method
	// https://tc39.es/ecma262/#sec-string.prototype.sup

	$$a({
	  target: 'String',
	  proto: true,
	  forced: forcedStringHTMLMethod('sup')
	}, {
	  sup: function sup() {
	    return createHTML(this, 'sup', '', '');
	  }
	});

	var typedArrayConstructor = {exports: {}};

	var NATIVE_ARRAY_BUFFER = arrayBufferNative;
	var DESCRIPTORS$4 = descriptors;
	var global$j = global$1B;
	var isCallable$2 = isCallable$u;
	var isObject$5 = isObject$z;
	var hasOwn$7 = hasOwnProperty_1;
	var classof$3 = classof$i;
	var tryToString = tryToString$5;
	var createNonEnumerableProperty$4 = createNonEnumerableProperty$f;
	var redefine$3 = redefine$j.exports;
	var defineProperty$2 = objectDefineProperty.f;
	var isPrototypeOf$1 = objectIsPrototypeOf;
	var getPrototypeOf = objectGetPrototypeOf$1;
	var setPrototypeOf$1 = objectSetPrototypeOf$1;
	var wellKnownSymbol$4 = wellKnownSymbol$y;
	var uid$1 = uid$6;
	var Int8Array$4 = global$j.Int8Array;
	var Int8ArrayPrototype$1 = Int8Array$4 && Int8Array$4.prototype;
	var Uint8ClampedArray$1 = global$j.Uint8ClampedArray;
	var Uint8ClampedArrayPrototype = Uint8ClampedArray$1 && Uint8ClampedArray$1.prototype;
	var TypedArray$1 = Int8Array$4 && getPrototypeOf(Int8Array$4);
	var TypedArrayPrototype$2 = Int8ArrayPrototype$1 && getPrototypeOf(Int8ArrayPrototype$1);
	var ObjectPrototype = Object.prototype;
	var TypeError$4 = global$j.TypeError;
	var TO_STRING_TAG$1 = wellKnownSymbol$4('toStringTag');
	var TYPED_ARRAY_TAG$1 = uid$1('TYPED_ARRAY_TAG');
	var TYPED_ARRAY_CONSTRUCTOR$2 = uid$1('TYPED_ARRAY_CONSTRUCTOR'); // Fixing native typed arrays in Opera Presto crashes the browser, see #595

	var NATIVE_ARRAY_BUFFER_VIEWS$2 = NATIVE_ARRAY_BUFFER && !!setPrototypeOf$1 && classof$3(global$j.opera) !== 'Opera';
	var TYPED_ARRAY_TAG_REQUIRED = false;
	var NAME, Constructor, Prototype;
	var TypedArrayConstructorsList = {
	  Int8Array: 1,
	  Uint8Array: 1,
	  Uint8ClampedArray: 1,
	  Int16Array: 2,
	  Uint16Array: 2,
	  Int32Array: 4,
	  Uint32Array: 4,
	  Float32Array: 4,
	  Float64Array: 8
	};
	var BigIntArrayConstructorsList = {
	  BigInt64Array: 8,
	  BigUint64Array: 8
	};

	var isView = function isView(it) {
	  if (!isObject$5(it)) return false;
	  var klass = classof$3(it);
	  return klass === 'DataView' || hasOwn$7(TypedArrayConstructorsList, klass) || hasOwn$7(BigIntArrayConstructorsList, klass);
	};

	var isTypedArray$1 = function isTypedArray(it) {
	  if (!isObject$5(it)) return false;
	  var klass = classof$3(it);
	  return hasOwn$7(TypedArrayConstructorsList, klass) || hasOwn$7(BigIntArrayConstructorsList, klass);
	};

	var aTypedArray$n = function aTypedArray(it) {
	  if (isTypedArray$1(it)) return it;
	  throw TypeError$4('Target is not a typed array');
	};

	var aTypedArrayConstructor$4 = function aTypedArrayConstructor(C) {
	  if (isCallable$2(C) && (!setPrototypeOf$1 || isPrototypeOf$1(TypedArray$1, C))) return C;
	  throw TypeError$4(tryToString(C) + ' is not a typed array constructor');
	};

	var exportTypedArrayMethod$o = function exportTypedArrayMethod(KEY, property, forced, options) {
	  if (!DESCRIPTORS$4) return;
	  if (forced) for (var ARRAY in TypedArrayConstructorsList) {
	    var TypedArrayConstructor = global$j[ARRAY];
	    if (TypedArrayConstructor && hasOwn$7(TypedArrayConstructor.prototype, KEY)) try {
	      delete TypedArrayConstructor.prototype[KEY];
	    } catch (error) {
	      // old WebKit bug - some methods are non-configurable
	      try {
	        TypedArrayConstructor.prototype[KEY] = property;
	      } catch (error2) {
	        /* empty */
	      }
	    }
	  }

	  if (!TypedArrayPrototype$2[KEY] || forced) {
	    redefine$3(TypedArrayPrototype$2, KEY, forced ? property : NATIVE_ARRAY_BUFFER_VIEWS$2 && Int8ArrayPrototype$1[KEY] || property, options);
	  }
	};

	var exportTypedArrayStaticMethod$2 = function exportTypedArrayStaticMethod(KEY, property, forced) {
	  var ARRAY, TypedArrayConstructor;
	  if (!DESCRIPTORS$4) return;

	  if (setPrototypeOf$1) {
	    if (forced) for (ARRAY in TypedArrayConstructorsList) {
	      TypedArrayConstructor = global$j[ARRAY];
	      if (TypedArrayConstructor && hasOwn$7(TypedArrayConstructor, KEY)) try {
	        delete TypedArrayConstructor[KEY];
	      } catch (error) {
	        /* empty */
	      }
	    }

	    if (!TypedArray$1[KEY] || forced) {
	      // V8 ~ Chrome 49-50 `%TypedArray%` methods are non-writable non-configurable
	      try {
	        return redefine$3(TypedArray$1, KEY, forced ? property : NATIVE_ARRAY_BUFFER_VIEWS$2 && TypedArray$1[KEY] || property);
	      } catch (error) {
	        /* empty */
	      }
	    } else return;
	  }

	  for (ARRAY in TypedArrayConstructorsList) {
	    TypedArrayConstructor = global$j[ARRAY];

	    if (TypedArrayConstructor && (!TypedArrayConstructor[KEY] || forced)) {
	      redefine$3(TypedArrayConstructor, KEY, property);
	    }
	  }
	};

	for (NAME in TypedArrayConstructorsList) {
	  Constructor = global$j[NAME];
	  Prototype = Constructor && Constructor.prototype;
	  if (Prototype) createNonEnumerableProperty$4(Prototype, TYPED_ARRAY_CONSTRUCTOR$2, Constructor);else NATIVE_ARRAY_BUFFER_VIEWS$2 = false;
	}

	for (NAME in BigIntArrayConstructorsList) {
	  Constructor = global$j[NAME];
	  Prototype = Constructor && Constructor.prototype;
	  if (Prototype) createNonEnumerableProperty$4(Prototype, TYPED_ARRAY_CONSTRUCTOR$2, Constructor);
	} // WebKit bug - typed arrays constructors prototype is Object.prototype


	if (!NATIVE_ARRAY_BUFFER_VIEWS$2 || !isCallable$2(TypedArray$1) || TypedArray$1 === Function.prototype) {
	  // eslint-disable-next-line no-shadow -- safe
	  TypedArray$1 = function TypedArray() {
	    throw TypeError$4('Incorrect invocation');
	  };

	  if (NATIVE_ARRAY_BUFFER_VIEWS$2) for (NAME in TypedArrayConstructorsList) {
	    if (global$j[NAME]) setPrototypeOf$1(global$j[NAME], TypedArray$1);
	  }
	}

	if (!NATIVE_ARRAY_BUFFER_VIEWS$2 || !TypedArrayPrototype$2 || TypedArrayPrototype$2 === ObjectPrototype) {
	  TypedArrayPrototype$2 = TypedArray$1.prototype;
	  if (NATIVE_ARRAY_BUFFER_VIEWS$2) for (NAME in TypedArrayConstructorsList) {
	    if (global$j[NAME]) setPrototypeOf$1(global$j[NAME].prototype, TypedArrayPrototype$2);
	  }
	} // WebKit bug - one more object in Uint8ClampedArray prototype chain


	if (NATIVE_ARRAY_BUFFER_VIEWS$2 && getPrototypeOf(Uint8ClampedArrayPrototype) !== TypedArrayPrototype$2) {
	  setPrototypeOf$1(Uint8ClampedArrayPrototype, TypedArrayPrototype$2);
	}

	if (DESCRIPTORS$4 && !hasOwn$7(TypedArrayPrototype$2, TO_STRING_TAG$1)) {
	  TYPED_ARRAY_TAG_REQUIRED = true;
	  defineProperty$2(TypedArrayPrototype$2, TO_STRING_TAG$1, {
	    get: function get() {
	      return isObject$5(this) ? this[TYPED_ARRAY_TAG$1] : undefined;
	    }
	  });

	  for (NAME in TypedArrayConstructorsList) {
	    if (global$j[NAME]) {
	      createNonEnumerableProperty$4(global$j[NAME], TYPED_ARRAY_TAG$1, NAME);
	    }
	  }
	}

	var arrayBufferViewCore = {
	  NATIVE_ARRAY_BUFFER_VIEWS: NATIVE_ARRAY_BUFFER_VIEWS$2,
	  TYPED_ARRAY_CONSTRUCTOR: TYPED_ARRAY_CONSTRUCTOR$2,
	  TYPED_ARRAY_TAG: TYPED_ARRAY_TAG_REQUIRED && TYPED_ARRAY_TAG$1,
	  aTypedArray: aTypedArray$n,
	  aTypedArrayConstructor: aTypedArrayConstructor$4,
	  exportTypedArrayMethod: exportTypedArrayMethod$o,
	  exportTypedArrayStaticMethod: exportTypedArrayStaticMethod$2,
	  isView: isView,
	  isTypedArray: isTypedArray$1,
	  TypedArray: TypedArray$1,
	  TypedArrayPrototype: TypedArrayPrototype$2
	};

	/* eslint-disable no-new -- required for testing */
	var global$i = global$1B;
	var fails$a = fails$18;
	var checkCorrectnessOfIteration = checkCorrectnessOfIteration$4;
	var NATIVE_ARRAY_BUFFER_VIEWS$1 = arrayBufferViewCore.NATIVE_ARRAY_BUFFER_VIEWS;
	var ArrayBuffer$2 = global$i.ArrayBuffer;
	var Int8Array$3 = global$i.Int8Array;
	var typedArrayConstructorsRequireWrappers = !NATIVE_ARRAY_BUFFER_VIEWS$1 || !fails$a(function () {
	  Int8Array$3(1);
	}) || !fails$a(function () {
	  new Int8Array$3(-1);
	}) || !checkCorrectnessOfIteration(function (iterable) {
	  new Int8Array$3();
	  new Int8Array$3(null);
	  new Int8Array$3(1.5);
	  new Int8Array$3(iterable);
	}, true) || fails$a(function () {
	  // Safari (11+) bug - a reason why even Safari 13 should load a typed array polyfill
	  return new Int8Array$3(new ArrayBuffer$2(2), 1, undefined).length !== 1;
	});

	var global$h = global$1B;
	var toIntegerOrInfinity$1 = toIntegerOrInfinity$g;
	var RangeError$5 = global$h.RangeError;

	var toPositiveInteger$1 = function toPositiveInteger(it) {
	  var result = toIntegerOrInfinity$1(it);
	  if (result < 0) throw RangeError$5("The argument can't be less than 0");
	  return result;
	};

	var global$g = global$1B;
	var toPositiveInteger = toPositiveInteger$1;
	var RangeError$4 = global$g.RangeError;

	var toOffset$2 = function toOffset(it, BYTES) {
	  var offset = toPositiveInteger(it);
	  if (offset % BYTES) throw RangeError$4('Wrong offset');
	  return offset;
	};

	var bind$2 = functionBindContext;
	var call$5 = functionCall;
	var aConstructor = aConstructor$3;
	var toObject = toObject$o;
	var lengthOfArrayLike$4 = lengthOfArrayLike$n;
	var getIterator$1 = getIterator$4;
	var getIteratorMethod$1 = getIteratorMethod$5;
	var isArrayIteratorMethod = isArrayIteratorMethod$3;
	var aTypedArrayConstructor$3 = arrayBufferViewCore.aTypedArrayConstructor;

	var typedArrayFrom$2 = function from(source
	/* , mapfn, thisArg */
	) {
	  var C = aConstructor(this);
	  var O = toObject(source);
	  var argumentsLength = arguments.length;
	  var mapfn = argumentsLength > 1 ? arguments[1] : undefined;
	  var mapping = mapfn !== undefined;
	  var iteratorMethod = getIteratorMethod$1(O);
	  var i, length, result, step, iterator, next;

	  if (iteratorMethod && !isArrayIteratorMethod(iteratorMethod)) {
	    iterator = getIterator$1(O, iteratorMethod);
	    next = iterator.next;
	    O = [];

	    while (!(step = call$5(next, iterator)).done) {
	      O.push(step.value);
	    }
	  }

	  if (mapping && argumentsLength > 2) {
	    mapfn = bind$2(mapfn, arguments[2]);
	  }

	  length = lengthOfArrayLike$4(O);
	  result = new (aTypedArrayConstructor$3(C))(length);

	  for (i = 0; length > i; i++) {
	    result[i] = mapping ? mapfn(O[i], i) : O[i];
	  }

	  return result;
	};

	var $$9 = _export;
	var global$f = global$1B;
	var call$4 = functionCall;
	var DESCRIPTORS$3 = descriptors;
	var TYPED_ARRAYS_CONSTRUCTORS_REQUIRES_WRAPPERS$2 = typedArrayConstructorsRequireWrappers;
	var ArrayBufferViewCore$p = arrayBufferViewCore;
	var ArrayBufferModule = arrayBuffer;
	var anInstance$5 = anInstance$a;
	var createPropertyDescriptor$3 = createPropertyDescriptor$c;
	var createNonEnumerableProperty$3 = createNonEnumerableProperty$f;
	var isIntegralNumber = isIntegralNumber$3;
	var toLength$1 = toLength$c;
	var toIndex = toIndex$2;
	var toOffset$1 = toOffset$2;
	var toPropertyKey = toPropertyKey$8;
	var hasOwn$6 = hasOwnProperty_1;
	var classof$2 = classof$i;
	var isObject$4 = isObject$z;
	var isSymbol$1 = isSymbol$6;
	var create$4 = objectCreate;
	var isPrototypeOf = objectIsPrototypeOf;
	var setPrototypeOf = objectSetPrototypeOf$1;
	var getOwnPropertyNames = objectGetOwnPropertyNames.f;
	var typedArrayFrom$1 = typedArrayFrom$2;
	var forEach$1 = arrayIteration.forEach;
	var setSpecies = setSpecies$6;
	var definePropertyModule = objectDefineProperty;
	var getOwnPropertyDescriptorModule = objectGetOwnPropertyDescriptor;
	var InternalStateModule$4 = internalState;
	var inheritIfRequired$1 = inheritIfRequired$6;
	var getInternalState$1 = InternalStateModule$4.get;
	var setInternalState$4 = InternalStateModule$4.set;
	var nativeDefineProperty = definePropertyModule.f;
	var nativeGetOwnPropertyDescriptor = getOwnPropertyDescriptorModule.f;
	var round = Math.round;
	var RangeError$3 = global$f.RangeError;
	var ArrayBuffer$1 = ArrayBufferModule.ArrayBuffer;
	var ArrayBufferPrototype = ArrayBuffer$1.prototype;
	var DataView$1 = ArrayBufferModule.DataView;
	var NATIVE_ARRAY_BUFFER_VIEWS = ArrayBufferViewCore$p.NATIVE_ARRAY_BUFFER_VIEWS;
	var TYPED_ARRAY_CONSTRUCTOR$1 = ArrayBufferViewCore$p.TYPED_ARRAY_CONSTRUCTOR;
	var TYPED_ARRAY_TAG = ArrayBufferViewCore$p.TYPED_ARRAY_TAG;
	var TypedArray = ArrayBufferViewCore$p.TypedArray;
	var TypedArrayPrototype$1 = ArrayBufferViewCore$p.TypedArrayPrototype;
	var aTypedArrayConstructor$2 = ArrayBufferViewCore$p.aTypedArrayConstructor;
	var isTypedArray = ArrayBufferViewCore$p.isTypedArray;
	var BYTES_PER_ELEMENT = 'BYTES_PER_ELEMENT';
	var WRONG_LENGTH = 'Wrong length';

	var fromList = function fromList(C, list) {
	  aTypedArrayConstructor$2(C);
	  var index = 0;
	  var length = list.length;
	  var result = new C(length);

	  while (length > index) {
	    result[index] = list[index++];
	  }

	  return result;
	};

	var addGetter = function addGetter(it, key) {
	  nativeDefineProperty(it, key, {
	    get: function get() {
	      return getInternalState$1(this)[key];
	    }
	  });
	};

	var isArrayBuffer = function isArrayBuffer(it) {
	  var klass;
	  return isPrototypeOf(ArrayBufferPrototype, it) || (klass = classof$2(it)) == 'ArrayBuffer' || klass == 'SharedArrayBuffer';
	};

	var isTypedArrayIndex = function isTypedArrayIndex(target, key) {
	  return isTypedArray(target) && !isSymbol$1(key) && key in target && isIntegralNumber(+key) && key >= 0;
	};

	var wrappedGetOwnPropertyDescriptor = function getOwnPropertyDescriptor(target, key) {
	  key = toPropertyKey(key);
	  return isTypedArrayIndex(target, key) ? createPropertyDescriptor$3(2, target[key]) : nativeGetOwnPropertyDescriptor(target, key);
	};

	var wrappedDefineProperty = function defineProperty(target, key, descriptor) {
	  key = toPropertyKey(key);

	  if (isTypedArrayIndex(target, key) && isObject$4(descriptor) && hasOwn$6(descriptor, 'value') && !hasOwn$6(descriptor, 'get') && !hasOwn$6(descriptor, 'set') // TODO: add validation descriptor w/o calling accessors
	  && !descriptor.configurable && (!hasOwn$6(descriptor, 'writable') || descriptor.writable) && (!hasOwn$6(descriptor, 'enumerable') || descriptor.enumerable)) {
	    target[key] = descriptor.value;
	    return target;
	  }

	  return nativeDefineProperty(target, key, descriptor);
	};

	if (DESCRIPTORS$3) {
	  if (!NATIVE_ARRAY_BUFFER_VIEWS) {
	    getOwnPropertyDescriptorModule.f = wrappedGetOwnPropertyDescriptor;
	    definePropertyModule.f = wrappedDefineProperty;
	    addGetter(TypedArrayPrototype$1, 'buffer');
	    addGetter(TypedArrayPrototype$1, 'byteOffset');
	    addGetter(TypedArrayPrototype$1, 'byteLength');
	    addGetter(TypedArrayPrototype$1, 'length');
	  }

	  $$9({
	    target: 'Object',
	    stat: true,
	    forced: !NATIVE_ARRAY_BUFFER_VIEWS
	  }, {
	    getOwnPropertyDescriptor: wrappedGetOwnPropertyDescriptor,
	    defineProperty: wrappedDefineProperty
	  });

	  typedArrayConstructor.exports = function (TYPE, wrapper, CLAMPED) {
	    var BYTES = TYPE.match(/\d+$/)[0] / 8;
	    var CONSTRUCTOR_NAME = TYPE + (CLAMPED ? 'Clamped' : '') + 'Array';
	    var GETTER = 'get' + TYPE;
	    var SETTER = 'set' + TYPE;
	    var NativeTypedArrayConstructor = global$f[CONSTRUCTOR_NAME];
	    var TypedArrayConstructor = NativeTypedArrayConstructor;
	    var TypedArrayConstructorPrototype = TypedArrayConstructor && TypedArrayConstructor.prototype;
	    var exported = {};

	    var getter = function getter(that, index) {
	      var data = getInternalState$1(that);
	      return data.view[GETTER](index * BYTES + data.byteOffset, true);
	    };

	    var setter = function setter(that, index, value) {
	      var data = getInternalState$1(that);
	      if (CLAMPED) value = (value = round(value)) < 0 ? 0 : value > 0xFF ? 0xFF : value & 0xFF;
	      data.view[SETTER](index * BYTES + data.byteOffset, value, true);
	    };

	    var addElement = function addElement(that, index) {
	      nativeDefineProperty(that, index, {
	        get: function get() {
	          return getter(this, index);
	        },
	        set: function set(value) {
	          return setter(this, index, value);
	        },
	        enumerable: true
	      });
	    };

	    if (!NATIVE_ARRAY_BUFFER_VIEWS) {
	      TypedArrayConstructor = wrapper(function (that, data, offset, $length) {
	        anInstance$5(that, TypedArrayConstructorPrototype);
	        var index = 0;
	        var byteOffset = 0;
	        var buffer, byteLength, length;

	        if (!isObject$4(data)) {
	          length = toIndex(data);
	          byteLength = length * BYTES;
	          buffer = new ArrayBuffer$1(byteLength);
	        } else if (isArrayBuffer(data)) {
	          buffer = data;
	          byteOffset = toOffset$1(offset, BYTES);
	          var $len = data.byteLength;

	          if ($length === undefined) {
	            if ($len % BYTES) throw RangeError$3(WRONG_LENGTH);
	            byteLength = $len - byteOffset;
	            if (byteLength < 0) throw RangeError$3(WRONG_LENGTH);
	          } else {
	            byteLength = toLength$1($length) * BYTES;
	            if (byteLength + byteOffset > $len) throw RangeError$3(WRONG_LENGTH);
	          }

	          length = byteLength / BYTES;
	        } else if (isTypedArray(data)) {
	          return fromList(TypedArrayConstructor, data);
	        } else {
	          return call$4(typedArrayFrom$1, TypedArrayConstructor, data);
	        }

	        setInternalState$4(that, {
	          buffer: buffer,
	          byteOffset: byteOffset,
	          byteLength: byteLength,
	          length: length,
	          view: new DataView$1(buffer)
	        });

	        while (index < length) {
	          addElement(that, index++);
	        }
	      });
	      if (setPrototypeOf) setPrototypeOf(TypedArrayConstructor, TypedArray);
	      TypedArrayConstructorPrototype = TypedArrayConstructor.prototype = create$4(TypedArrayPrototype$1);
	    } else if (TYPED_ARRAYS_CONSTRUCTORS_REQUIRES_WRAPPERS$2) {
	      TypedArrayConstructor = wrapper(function (dummy, data, typedArrayOffset, $length) {
	        anInstance$5(dummy, TypedArrayConstructorPrototype);
	        return inheritIfRequired$1(function () {
	          if (!isObject$4(data)) return new NativeTypedArrayConstructor(toIndex(data));
	          if (isArrayBuffer(data)) return $length !== undefined ? new NativeTypedArrayConstructor(data, toOffset$1(typedArrayOffset, BYTES), $length) : typedArrayOffset !== undefined ? new NativeTypedArrayConstructor(data, toOffset$1(typedArrayOffset, BYTES)) : new NativeTypedArrayConstructor(data);
	          if (isTypedArray(data)) return fromList(TypedArrayConstructor, data);
	          return call$4(typedArrayFrom$1, TypedArrayConstructor, data);
	        }(), dummy, TypedArrayConstructor);
	      });
	      if (setPrototypeOf) setPrototypeOf(TypedArrayConstructor, TypedArray);
	      forEach$1(getOwnPropertyNames(NativeTypedArrayConstructor), function (key) {
	        if (!(key in TypedArrayConstructor)) {
	          createNonEnumerableProperty$3(TypedArrayConstructor, key, NativeTypedArrayConstructor[key]);
	        }
	      });
	      TypedArrayConstructor.prototype = TypedArrayConstructorPrototype;
	    }

	    if (TypedArrayConstructorPrototype.constructor !== TypedArrayConstructor) {
	      createNonEnumerableProperty$3(TypedArrayConstructorPrototype, 'constructor', TypedArrayConstructor);
	    }

	    createNonEnumerableProperty$3(TypedArrayConstructorPrototype, TYPED_ARRAY_CONSTRUCTOR$1, TypedArrayConstructor);

	    if (TYPED_ARRAY_TAG) {
	      createNonEnumerableProperty$3(TypedArrayConstructorPrototype, TYPED_ARRAY_TAG, CONSTRUCTOR_NAME);
	    }

	    exported[CONSTRUCTOR_NAME] = TypedArrayConstructor;
	    $$9({
	      global: true,
	      forced: TypedArrayConstructor != NativeTypedArrayConstructor,
	      sham: !NATIVE_ARRAY_BUFFER_VIEWS
	    }, exported);

	    if (!(BYTES_PER_ELEMENT in TypedArrayConstructor)) {
	      createNonEnumerableProperty$3(TypedArrayConstructor, BYTES_PER_ELEMENT, BYTES);
	    }

	    if (!(BYTES_PER_ELEMENT in TypedArrayConstructorPrototype)) {
	      createNonEnumerableProperty$3(TypedArrayConstructorPrototype, BYTES_PER_ELEMENT, BYTES);
	    }

	    setSpecies(CONSTRUCTOR_NAME);
	  };
	} else typedArrayConstructor.exports = function () {
	  /* empty */
	};

	var createTypedArrayConstructor$8 = typedArrayConstructor.exports; // `Float32Array` constructor
	// https://tc39.es/ecma262/#sec-typedarray-objects

	createTypedArrayConstructor$8('Float32', function (init) {
	  return function Float32Array(data, byteOffset, length) {
	    return init(this, data, byteOffset, length);
	  };
	});

	var createTypedArrayConstructor$7 = typedArrayConstructor.exports; // `Float64Array` constructor
	// https://tc39.es/ecma262/#sec-typedarray-objects

	createTypedArrayConstructor$7('Float64', function (init) {
	  return function Float64Array(data, byteOffset, length) {
	    return init(this, data, byteOffset, length);
	  };
	});

	var createTypedArrayConstructor$6 = typedArrayConstructor.exports; // `Int8Array` constructor
	// https://tc39.es/ecma262/#sec-typedarray-objects

	createTypedArrayConstructor$6('Int8', function (init) {
	  return function Int8Array(data, byteOffset, length) {
	    return init(this, data, byteOffset, length);
	  };
	});

	var createTypedArrayConstructor$5 = typedArrayConstructor.exports; // `Int16Array` constructor
	// https://tc39.es/ecma262/#sec-typedarray-objects

	createTypedArrayConstructor$5('Int16', function (init) {
	  return function Int16Array(data, byteOffset, length) {
	    return init(this, data, byteOffset, length);
	  };
	});

	var createTypedArrayConstructor$4 = typedArrayConstructor.exports; // `Int32Array` constructor
	// https://tc39.es/ecma262/#sec-typedarray-objects

	createTypedArrayConstructor$4('Int32', function (init) {
	  return function Int32Array(data, byteOffset, length) {
	    return init(this, data, byteOffset, length);
	  };
	});

	var createTypedArrayConstructor$3 = typedArrayConstructor.exports; // `Uint8Array` constructor
	// https://tc39.es/ecma262/#sec-typedarray-objects

	createTypedArrayConstructor$3('Uint8', function (init) {
	  return function Uint8Array(data, byteOffset, length) {
	    return init(this, data, byteOffset, length);
	  };
	});

	var createTypedArrayConstructor$2 = typedArrayConstructor.exports; // `Uint8ClampedArray` constructor
	// https://tc39.es/ecma262/#sec-typedarray-objects

	createTypedArrayConstructor$2('Uint8', function (init) {
	  return function Uint8ClampedArray(data, byteOffset, length) {
	    return init(this, data, byteOffset, length);
	  };
	}, true);

	var createTypedArrayConstructor$1 = typedArrayConstructor.exports; // `Uint16Array` constructor
	// https://tc39.es/ecma262/#sec-typedarray-objects

	createTypedArrayConstructor$1('Uint16', function (init) {
	  return function Uint16Array(data, byteOffset, length) {
	    return init(this, data, byteOffset, length);
	  };
	});

	var createTypedArrayConstructor = typedArrayConstructor.exports; // `Uint32Array` constructor
	// https://tc39.es/ecma262/#sec-typedarray-objects

	createTypedArrayConstructor('Uint32', function (init) {
	  return function Uint32Array(data, byteOffset, length) {
	    return init(this, data, byteOffset, length);
	  };
	});

	var ArrayBufferViewCore$o = arrayBufferViewCore;
	var lengthOfArrayLike$3 = lengthOfArrayLike$n;
	var toIntegerOrInfinity = toIntegerOrInfinity$g;
	var aTypedArray$m = ArrayBufferViewCore$o.aTypedArray;
	var exportTypedArrayMethod$n = ArrayBufferViewCore$o.exportTypedArrayMethod; // `%TypedArray%.prototype.at` method
	// https://github.com/tc39/proposal-relative-indexing-method

	exportTypedArrayMethod$n('at', function at(index) {
	  var O = aTypedArray$m(this);
	  var len = lengthOfArrayLike$3(O);
	  var relativeIndex = toIntegerOrInfinity(index);
	  var k = relativeIndex >= 0 ? relativeIndex : len + relativeIndex;
	  return k < 0 || k >= len ? undefined : O[k];
	});

	var uncurryThis$a = functionUncurryThis;
	var ArrayBufferViewCore$n = arrayBufferViewCore;
	var $ArrayCopyWithin = arrayCopyWithin;
	var u$ArrayCopyWithin = uncurryThis$a($ArrayCopyWithin);
	var aTypedArray$l = ArrayBufferViewCore$n.aTypedArray;
	var exportTypedArrayMethod$m = ArrayBufferViewCore$n.exportTypedArrayMethod; // `%TypedArray%.prototype.copyWithin` method
	// https://tc39.es/ecma262/#sec-%typedarray%.prototype.copywithin

	exportTypedArrayMethod$m('copyWithin', function copyWithin(target, start
	/* , end */
	) {
	  return u$ArrayCopyWithin(aTypedArray$l(this), target, start, arguments.length > 2 ? arguments[2] : undefined);
	});

	var ArrayBufferViewCore$m = arrayBufferViewCore;
	var $every = arrayIteration.every;
	var aTypedArray$k = ArrayBufferViewCore$m.aTypedArray;
	var exportTypedArrayMethod$l = ArrayBufferViewCore$m.exportTypedArrayMethod; // `%TypedArray%.prototype.every` method
	// https://tc39.es/ecma262/#sec-%typedarray%.prototype.every

	exportTypedArrayMethod$l('every', function every(callbackfn
	/* , thisArg */
	) {
	  return $every(aTypedArray$k(this), callbackfn, arguments.length > 1 ? arguments[1] : undefined);
	});

	var ArrayBufferViewCore$l = arrayBufferViewCore;
	var call$3 = functionCall;
	var $fill = arrayFill$1;
	var aTypedArray$j = ArrayBufferViewCore$l.aTypedArray;
	var exportTypedArrayMethod$k = ArrayBufferViewCore$l.exportTypedArrayMethod; // `%TypedArray%.prototype.fill` method
	// https://tc39.es/ecma262/#sec-%typedarray%.prototype.fill

	exportTypedArrayMethod$k('fill', function fill(value
	/* , start, end */
	) {
	  var length = arguments.length;
	  return call$3($fill, aTypedArray$j(this), value, length > 1 ? arguments[1] : undefined, length > 2 ? arguments[2] : undefined);
	});

	var lengthOfArrayLike$2 = lengthOfArrayLike$n;

	var arrayFromConstructorAndList$1 = function arrayFromConstructorAndList(Constructor, list) {
	  var index = 0;
	  var length = lengthOfArrayLike$2(list);
	  var result = new Constructor(length);

	  while (length > index) {
	    result[index] = list[index++];
	  }

	  return result;
	};

	var ArrayBufferViewCore$k = arrayBufferViewCore;
	var speciesConstructor = speciesConstructor$5;
	var TYPED_ARRAY_CONSTRUCTOR = ArrayBufferViewCore$k.TYPED_ARRAY_CONSTRUCTOR;
	var aTypedArrayConstructor$1 = ArrayBufferViewCore$k.aTypedArrayConstructor; // a part of `TypedArraySpeciesCreate` abstract operation
	// https://tc39.es/ecma262/#typedarray-species-create

	var typedArraySpeciesConstructor$4 = function typedArraySpeciesConstructor(originalArray) {
	  return aTypedArrayConstructor$1(speciesConstructor(originalArray, originalArray[TYPED_ARRAY_CONSTRUCTOR]));
	};

	var arrayFromConstructorAndList = arrayFromConstructorAndList$1;
	var typedArraySpeciesConstructor$3 = typedArraySpeciesConstructor$4;

	var typedArrayFromSpeciesAndList = function typedArrayFromSpeciesAndList(instance, list) {
	  return arrayFromConstructorAndList(typedArraySpeciesConstructor$3(instance), list);
	};

	var ArrayBufferViewCore$j = arrayBufferViewCore;
	var $filter = arrayIteration.filter;
	var fromSpeciesAndList = typedArrayFromSpeciesAndList;
	var aTypedArray$i = ArrayBufferViewCore$j.aTypedArray;
	var exportTypedArrayMethod$j = ArrayBufferViewCore$j.exportTypedArrayMethod; // `%TypedArray%.prototype.filter` method
	// https://tc39.es/ecma262/#sec-%typedarray%.prototype.filter

	exportTypedArrayMethod$j('filter', function filter(callbackfn
	/* , thisArg */
	) {
	  var list = $filter(aTypedArray$i(this), callbackfn, arguments.length > 1 ? arguments[1] : undefined);
	  return fromSpeciesAndList(this, list);
	});

	var ArrayBufferViewCore$i = arrayBufferViewCore;
	var $find = arrayIteration.find;
	var aTypedArray$h = ArrayBufferViewCore$i.aTypedArray;
	var exportTypedArrayMethod$i = ArrayBufferViewCore$i.exportTypedArrayMethod; // `%TypedArray%.prototype.find` method
	// https://tc39.es/ecma262/#sec-%typedarray%.prototype.find

	exportTypedArrayMethod$i('find', function find(predicate
	/* , thisArg */
	) {
	  return $find(aTypedArray$h(this), predicate, arguments.length > 1 ? arguments[1] : undefined);
	});

	var ArrayBufferViewCore$h = arrayBufferViewCore;
	var $findIndex = arrayIteration.findIndex;
	var aTypedArray$g = ArrayBufferViewCore$h.aTypedArray;
	var exportTypedArrayMethod$h = ArrayBufferViewCore$h.exportTypedArrayMethod; // `%TypedArray%.prototype.findIndex` method
	// https://tc39.es/ecma262/#sec-%typedarray%.prototype.findindex

	exportTypedArrayMethod$h('findIndex', function findIndex(predicate
	/* , thisArg */
	) {
	  return $findIndex(aTypedArray$g(this), predicate, arguments.length > 1 ? arguments[1] : undefined);
	});

	var ArrayBufferViewCore$g = arrayBufferViewCore;
	var $forEach$1 = arrayIteration.forEach;
	var aTypedArray$f = ArrayBufferViewCore$g.aTypedArray;
	var exportTypedArrayMethod$g = ArrayBufferViewCore$g.exportTypedArrayMethod; // `%TypedArray%.prototype.forEach` method
	// https://tc39.es/ecma262/#sec-%typedarray%.prototype.foreach

	exportTypedArrayMethod$g('forEach', function forEach(callbackfn
	/* , thisArg */
	) {
	  $forEach$1(aTypedArray$f(this), callbackfn, arguments.length > 1 ? arguments[1] : undefined);
	});

	var TYPED_ARRAYS_CONSTRUCTORS_REQUIRES_WRAPPERS$1 = typedArrayConstructorsRequireWrappers;
	var exportTypedArrayStaticMethod$1 = arrayBufferViewCore.exportTypedArrayStaticMethod;
	var typedArrayFrom = typedArrayFrom$2; // `%TypedArray%.from` method
	// https://tc39.es/ecma262/#sec-%typedarray%.from

	exportTypedArrayStaticMethod$1('from', typedArrayFrom, TYPED_ARRAYS_CONSTRUCTORS_REQUIRES_WRAPPERS$1);

	var ArrayBufferViewCore$f = arrayBufferViewCore;
	var $includes = arrayIncludes.includes;
	var aTypedArray$e = ArrayBufferViewCore$f.aTypedArray;
	var exportTypedArrayMethod$f = ArrayBufferViewCore$f.exportTypedArrayMethod; // `%TypedArray%.prototype.includes` method
	// https://tc39.es/ecma262/#sec-%typedarray%.prototype.includes

	exportTypedArrayMethod$f('includes', function includes(searchElement
	/* , fromIndex */
	) {
	  return $includes(aTypedArray$e(this), searchElement, arguments.length > 1 ? arguments[1] : undefined);
	});

	var ArrayBufferViewCore$e = arrayBufferViewCore;
	var $indexOf = arrayIncludes.indexOf;
	var aTypedArray$d = ArrayBufferViewCore$e.aTypedArray;
	var exportTypedArrayMethod$e = ArrayBufferViewCore$e.exportTypedArrayMethod; // `%TypedArray%.prototype.indexOf` method
	// https://tc39.es/ecma262/#sec-%typedarray%.prototype.indexof

	exportTypedArrayMethod$e('indexOf', function indexOf(searchElement
	/* , fromIndex */
	) {
	  return $indexOf(aTypedArray$d(this), searchElement, arguments.length > 1 ? arguments[1] : undefined);
	});

	var global$e = global$1B;
	var fails$9 = fails$18;
	var uncurryThis$9 = functionUncurryThis;
	var ArrayBufferViewCore$d = arrayBufferViewCore;
	var ArrayIterators = es_array_iterator;
	var wellKnownSymbol$3 = wellKnownSymbol$y;
	var ITERATOR$3 = wellKnownSymbol$3('iterator');
	var Uint8Array$1 = global$e.Uint8Array;
	var arrayValues = uncurryThis$9(ArrayIterators.values);
	var arrayKeys = uncurryThis$9(ArrayIterators.keys);
	var arrayEntries = uncurryThis$9(ArrayIterators.entries);
	var aTypedArray$c = ArrayBufferViewCore$d.aTypedArray;
	var exportTypedArrayMethod$d = ArrayBufferViewCore$d.exportTypedArrayMethod;
	var TypedArrayPrototype = Uint8Array$1 && Uint8Array$1.prototype;
	var GENERIC = !fails$9(function () {
	  TypedArrayPrototype[ITERATOR$3].call([1]);
	});
	var ITERATOR_IS_VALUES = !!TypedArrayPrototype && TypedArrayPrototype.values && TypedArrayPrototype[ITERATOR$3] === TypedArrayPrototype.values && TypedArrayPrototype.values.name === 'values';

	var typedArrayValues = function values() {
	  return arrayValues(aTypedArray$c(this));
	}; // `%TypedArray%.prototype.entries` method
	// https://tc39.es/ecma262/#sec-%typedarray%.prototype.entries


	exportTypedArrayMethod$d('entries', function entries() {
	  return arrayEntries(aTypedArray$c(this));
	}, GENERIC); // `%TypedArray%.prototype.keys` method
	// https://tc39.es/ecma262/#sec-%typedarray%.prototype.keys

	exportTypedArrayMethod$d('keys', function keys() {
	  return arrayKeys(aTypedArray$c(this));
	}, GENERIC); // `%TypedArray%.prototype.values` method
	// https://tc39.es/ecma262/#sec-%typedarray%.prototype.values

	exportTypedArrayMethod$d('values', typedArrayValues, GENERIC || !ITERATOR_IS_VALUES, {
	  name: 'values'
	}); // `%TypedArray%.prototype[@@iterator]` method
	// https://tc39.es/ecma262/#sec-%typedarray%.prototype-@@iterator

	exportTypedArrayMethod$d(ITERATOR$3, typedArrayValues, GENERIC || !ITERATOR_IS_VALUES, {
	  name: 'values'
	});

	var ArrayBufferViewCore$c = arrayBufferViewCore;
	var uncurryThis$8 = functionUncurryThis;
	var aTypedArray$b = ArrayBufferViewCore$c.aTypedArray;
	var exportTypedArrayMethod$c = ArrayBufferViewCore$c.exportTypedArrayMethod;
	var $join = uncurryThis$8([].join); // `%TypedArray%.prototype.join` method
	// https://tc39.es/ecma262/#sec-%typedarray%.prototype.join

	exportTypedArrayMethod$c('join', function join(separator) {
	  return $join(aTypedArray$b(this), separator);
	});

	var ArrayBufferViewCore$b = arrayBufferViewCore;
	var apply$1 = functionApply$1;
	var $lastIndexOf = arrayLastIndexOf;
	var aTypedArray$a = ArrayBufferViewCore$b.aTypedArray;
	var exportTypedArrayMethod$b = ArrayBufferViewCore$b.exportTypedArrayMethod; // `%TypedArray%.prototype.lastIndexOf` method
	// https://tc39.es/ecma262/#sec-%typedarray%.prototype.lastindexof

	exportTypedArrayMethod$b('lastIndexOf', function lastIndexOf(searchElement
	/* , fromIndex */
	) {
	  var length = arguments.length;
	  return apply$1($lastIndexOf, aTypedArray$a(this), length > 1 ? [searchElement, arguments[1]] : [searchElement]);
	});

	var ArrayBufferViewCore$a = arrayBufferViewCore;
	var $map = arrayIteration.map;
	var typedArraySpeciesConstructor$2 = typedArraySpeciesConstructor$4;
	var aTypedArray$9 = ArrayBufferViewCore$a.aTypedArray;
	var exportTypedArrayMethod$a = ArrayBufferViewCore$a.exportTypedArrayMethod; // `%TypedArray%.prototype.map` method
	// https://tc39.es/ecma262/#sec-%typedarray%.prototype.map

	exportTypedArrayMethod$a('map', function map(mapfn
	/* , thisArg */
	) {
	  return $map(aTypedArray$9(this), mapfn, arguments.length > 1 ? arguments[1] : undefined, function (O, length) {
	    return new (typedArraySpeciesConstructor$2(O))(length);
	  });
	});

	var ArrayBufferViewCore$9 = arrayBufferViewCore;
	var TYPED_ARRAYS_CONSTRUCTORS_REQUIRES_WRAPPERS = typedArrayConstructorsRequireWrappers;
	var aTypedArrayConstructor = ArrayBufferViewCore$9.aTypedArrayConstructor;
	var exportTypedArrayStaticMethod = ArrayBufferViewCore$9.exportTypedArrayStaticMethod; // `%TypedArray%.of` method
	// https://tc39.es/ecma262/#sec-%typedarray%.of

	exportTypedArrayStaticMethod('of', function
	  /* ...items */
	of() {
	  var index = 0;
	  var length = arguments.length;
	  var result = new (aTypedArrayConstructor(this))(length);

	  while (length > index) {
	    result[index] = arguments[index++];
	  }

	  return result;
	}, TYPED_ARRAYS_CONSTRUCTORS_REQUIRES_WRAPPERS);

	var ArrayBufferViewCore$8 = arrayBufferViewCore;
	var $reduce = arrayReduce.left;
	var aTypedArray$8 = ArrayBufferViewCore$8.aTypedArray;
	var exportTypedArrayMethod$9 = ArrayBufferViewCore$8.exportTypedArrayMethod; // `%TypedArray%.prototype.reduce` method
	// https://tc39.es/ecma262/#sec-%typedarray%.prototype.reduce

	exportTypedArrayMethod$9('reduce', function reduce(callbackfn
	/* , initialValue */
	) {
	  var length = arguments.length;
	  return $reduce(aTypedArray$8(this), callbackfn, length, length > 1 ? arguments[1] : undefined);
	});

	var ArrayBufferViewCore$7 = arrayBufferViewCore;
	var $reduceRight = arrayReduce.right;
	var aTypedArray$7 = ArrayBufferViewCore$7.aTypedArray;
	var exportTypedArrayMethod$8 = ArrayBufferViewCore$7.exportTypedArrayMethod; // `%TypedArray%.prototype.reduceRicht` method
	// https://tc39.es/ecma262/#sec-%typedarray%.prototype.reduceright

	exportTypedArrayMethod$8('reduceRight', function reduceRight(callbackfn
	/* , initialValue */
	) {
	  var length = arguments.length;
	  return $reduceRight(aTypedArray$7(this), callbackfn, length, length > 1 ? arguments[1] : undefined);
	});

	var ArrayBufferViewCore$6 = arrayBufferViewCore;
	var aTypedArray$6 = ArrayBufferViewCore$6.aTypedArray;
	var exportTypedArrayMethod$7 = ArrayBufferViewCore$6.exportTypedArrayMethod;
	var floor$2 = Math.floor; // `%TypedArray%.prototype.reverse` method
	// https://tc39.es/ecma262/#sec-%typedarray%.prototype.reverse

	exportTypedArrayMethod$7('reverse', function reverse() {
	  var that = this;
	  var length = aTypedArray$6(that).length;
	  var middle = floor$2(length / 2);
	  var index = 0;
	  var value;

	  while (index < middle) {
	    value = that[index];
	    that[index++] = that[--length];
	    that[length] = value;
	  }

	  return that;
	});

	var global$d = global$1B;
	var call$2 = functionCall;
	var ArrayBufferViewCore$5 = arrayBufferViewCore;
	var lengthOfArrayLike$1 = lengthOfArrayLike$n;
	var toOffset = toOffset$2;
	var toIndexedObject = toObject$o;
	var fails$8 = fails$18;
	var RangeError$2 = global$d.RangeError;
	var Int8Array$2 = global$d.Int8Array;
	var Int8ArrayPrototype = Int8Array$2 && Int8Array$2.prototype;
	var $set = Int8ArrayPrototype && Int8ArrayPrototype.set;
	var aTypedArray$5 = ArrayBufferViewCore$5.aTypedArray;
	var exportTypedArrayMethod$6 = ArrayBufferViewCore$5.exportTypedArrayMethod;
	var WORKS_WITH_OBJECTS_AND_GEERIC_ON_TYPED_ARRAYS = !fails$8(function () {
	  // eslint-disable-next-line es/no-typed-arrays -- required for testing
	  var array = new Uint8ClampedArray(2);
	  call$2($set, array, {
	    length: 1,
	    0: 3
	  }, 1);
	  return array[1] !== 3;
	}); // https://bugs.chromium.org/p/v8/issues/detail?id=11294 and other

	var TO_OBJECT_BUG = WORKS_WITH_OBJECTS_AND_GEERIC_ON_TYPED_ARRAYS && ArrayBufferViewCore$5.NATIVE_ARRAY_BUFFER_VIEWS && fails$8(function () {
	  var array = new Int8Array$2(2);
	  array.set(1);
	  array.set('2', 1);
	  return array[0] !== 0 || array[1] !== 2;
	}); // `%TypedArray%.prototype.set` method
	// https://tc39.es/ecma262/#sec-%typedarray%.prototype.set

	exportTypedArrayMethod$6('set', function set(arrayLike
	/* , offset */
	) {
	  aTypedArray$5(this);
	  var offset = toOffset(arguments.length > 1 ? arguments[1] : undefined, 1);
	  var src = toIndexedObject(arrayLike);
	  if (WORKS_WITH_OBJECTS_AND_GEERIC_ON_TYPED_ARRAYS) return call$2($set, this, src, offset);
	  var length = this.length;
	  var len = lengthOfArrayLike$1(src);
	  var index = 0;
	  if (len + offset > length) throw RangeError$2('Wrong length');

	  while (index < len) {
	    this[offset + index] = src[index++];
	  }
	}, !WORKS_WITH_OBJECTS_AND_GEERIC_ON_TYPED_ARRAYS || TO_OBJECT_BUG);

	var ArrayBufferViewCore$4 = arrayBufferViewCore;
	var typedArraySpeciesConstructor$1 = typedArraySpeciesConstructor$4;
	var fails$7 = fails$18;
	var arraySlice$2 = arraySlice$a;
	var aTypedArray$4 = ArrayBufferViewCore$4.aTypedArray;
	var exportTypedArrayMethod$5 = ArrayBufferViewCore$4.exportTypedArrayMethod;
	var FORCED$2 = fails$7(function () {
	  // eslint-disable-next-line es/no-typed-arrays -- required for testing
	  new Int8Array(1).slice();
	}); // `%TypedArray%.prototype.slice` method
	// https://tc39.es/ecma262/#sec-%typedarray%.prototype.slice

	exportTypedArrayMethod$5('slice', function slice(start, end) {
	  var list = arraySlice$2(aTypedArray$4(this), start, end);
	  var C = typedArraySpeciesConstructor$1(this);
	  var index = 0;
	  var length = list.length;
	  var result = new C(length);

	  while (length > index) {
	    result[index] = list[index++];
	  }

	  return result;
	}, FORCED$2);

	var ArrayBufferViewCore$3 = arrayBufferViewCore;
	var $some = arrayIteration.some;
	var aTypedArray$3 = ArrayBufferViewCore$3.aTypedArray;
	var exportTypedArrayMethod$4 = ArrayBufferViewCore$3.exportTypedArrayMethod; // `%TypedArray%.prototype.some` method
	// https://tc39.es/ecma262/#sec-%typedarray%.prototype.some

	exportTypedArrayMethod$4('some', function some(callbackfn
	/* , thisArg */
	) {
	  return $some(aTypedArray$3(this), callbackfn, arguments.length > 1 ? arguments[1] : undefined);
	});

	var global$c = global$1B;
	var uncurryThis$7 = functionUncurryThis;
	var fails$6 = fails$18;
	var aCallable$1 = aCallable$g;
	var internalSort = arraySort$1;
	var ArrayBufferViewCore$2 = arrayBufferViewCore;
	var FF = engineFfVersion;
	var IE_OR_EDGE = engineIsIeOrEdge;
	var V8 = engineV8Version;
	var WEBKIT = engineWebkitVersion;
	var Array$1 = global$c.Array;
	var aTypedArray$2 = ArrayBufferViewCore$2.aTypedArray;
	var exportTypedArrayMethod$3 = ArrayBufferViewCore$2.exportTypedArrayMethod;
	var Uint16Array = global$c.Uint16Array;
	var un$Sort = Uint16Array && uncurryThis$7(Uint16Array.prototype.sort); // WebKit

	var ACCEPT_INCORRECT_ARGUMENTS = !!un$Sort && !(fails$6(function () {
	  un$Sort(new Uint16Array(2), null);
	}) && fails$6(function () {
	  un$Sort(new Uint16Array(2), {});
	}));
	var STABLE_SORT = !!un$Sort && !fails$6(function () {
	  // feature detection can be too slow, so check engines versions
	  if (V8) return V8 < 74;
	  if (FF) return FF < 67;
	  if (IE_OR_EDGE) return true;
	  if (WEBKIT) return WEBKIT < 602;
	  var array = new Uint16Array(516);
	  var expected = Array$1(516);
	  var index, mod;

	  for (index = 0; index < 516; index++) {
	    mod = index % 4;
	    array[index] = 515 - index;
	    expected[index] = index - 2 * mod + 3;
	  }

	  un$Sort(array, function (a, b) {
	    return (a / 4 | 0) - (b / 4 | 0);
	  });

	  for (index = 0; index < 516; index++) {
	    if (array[index] !== expected[index]) return true;
	  }
	});

	var getSortCompare = function getSortCompare(comparefn) {
	  return function (x, y) {
	    if (comparefn !== undefined) return +comparefn(x, y) || 0; // eslint-disable-next-line no-self-compare -- NaN check

	    if (y !== y) return -1; // eslint-disable-next-line no-self-compare -- NaN check

	    if (x !== x) return 1;
	    if (x === 0 && y === 0) return 1 / x > 0 && 1 / y < 0 ? 1 : -1;
	    return x > y;
	  };
	}; // `%TypedArray%.prototype.sort` method
	// https://tc39.es/ecma262/#sec-%typedarray%.prototype.sort


	exportTypedArrayMethod$3('sort', function sort(comparefn) {
	  if (comparefn !== undefined) aCallable$1(comparefn);
	  if (STABLE_SORT) return un$Sort(this, comparefn);
	  return internalSort(aTypedArray$2(this), getSortCompare(comparefn));
	}, !STABLE_SORT || ACCEPT_INCORRECT_ARGUMENTS);

	var ArrayBufferViewCore$1 = arrayBufferViewCore;
	var toLength = toLength$c;
	var toAbsoluteIndex = toAbsoluteIndex$8;
	var typedArraySpeciesConstructor = typedArraySpeciesConstructor$4;
	var aTypedArray$1 = ArrayBufferViewCore$1.aTypedArray;
	var exportTypedArrayMethod$2 = ArrayBufferViewCore$1.exportTypedArrayMethod; // `%TypedArray%.prototype.subarray` method
	// https://tc39.es/ecma262/#sec-%typedarray%.prototype.subarray

	exportTypedArrayMethod$2('subarray', function subarray(begin, end) {
	  var O = aTypedArray$1(this);
	  var length = O.length;
	  var beginIndex = toAbsoluteIndex(begin, length);
	  var C = typedArraySpeciesConstructor(O);
	  return new C(O.buffer, O.byteOffset + beginIndex * O.BYTES_PER_ELEMENT, toLength((end === undefined ? length : toAbsoluteIndex(end, length)) - beginIndex));
	});

	var global$b = global$1B;
	var apply = functionApply$1;
	var ArrayBufferViewCore = arrayBufferViewCore;
	var fails$5 = fails$18;
	var arraySlice$1 = arraySlice$a;
	var Int8Array$1 = global$b.Int8Array;
	var aTypedArray = ArrayBufferViewCore.aTypedArray;
	var exportTypedArrayMethod$1 = ArrayBufferViewCore.exportTypedArrayMethod;
	var $toLocaleString = [].toLocaleString; // iOS Safari 6.x fails here

	var TO_LOCALE_STRING_BUG = !!Int8Array$1 && fails$5(function () {
	  $toLocaleString.call(new Int8Array$1(1));
	});
	var FORCED$1 = fails$5(function () {
	  return [1, 2].toLocaleString() != new Int8Array$1([1, 2]).toLocaleString();
	}) || !fails$5(function () {
	  Int8Array$1.prototype.toLocaleString.call([1, 2]);
	}); // `%TypedArray%.prototype.toLocaleString` method
	// https://tc39.es/ecma262/#sec-%typedarray%.prototype.tolocalestring

	exportTypedArrayMethod$1('toLocaleString', function toLocaleString() {
	  return apply($toLocaleString, TO_LOCALE_STRING_BUG ? arraySlice$1(aTypedArray(this)) : aTypedArray(this), arraySlice$1(arguments));
	}, FORCED$1);

	var exportTypedArrayMethod = arrayBufferViewCore.exportTypedArrayMethod;
	var fails$4 = fails$18;
	var global$a = global$1B;
	var uncurryThis$6 = functionUncurryThis;
	var Uint8Array = global$a.Uint8Array;
	var Uint8ArrayPrototype = Uint8Array && Uint8Array.prototype || {};
	var arrayToString = [].toString;
	var join$3 = uncurryThis$6([].join);

	if (fails$4(function () {
	  arrayToString.call({});
	})) {
	  arrayToString = function toString() {
	    return join$3(this);
	  };
	}

	var IS_NOT_ARRAY_METHOD = Uint8ArrayPrototype.toString != arrayToString; // `%TypedArray%.prototype.toString` method
	// https://tc39.es/ecma262/#sec-%typedarray%.prototype.tostring

	exportTypedArrayMethod('toString', arrayToString, IS_NOT_ARRAY_METHOD);

	var uncurryThis$5 = functionUncurryThis;
	var redefineAll$2 = redefineAll$6;
	var getWeakData = internalMetadata.exports.getWeakData;
	var anObject$4 = anObject$B;
	var isObject$3 = isObject$z;
	var anInstance$4 = anInstance$a;
	var iterate$1 = iterate$9;
	var ArrayIterationModule = arrayIteration;
	var hasOwn$5 = hasOwnProperty_1;
	var InternalStateModule$3 = internalState;
	var setInternalState$3 = InternalStateModule$3.set;
	var internalStateGetterFor = InternalStateModule$3.getterFor;
	var find$2 = ArrayIterationModule.find;
	var findIndex = ArrayIterationModule.findIndex;
	var splice$1 = uncurryThis$5([].splice);
	var id$1 = 0; // fallback for uncaught frozen keys

	var uncaughtFrozenStore = function uncaughtFrozenStore(store) {
	  return store.frozen || (store.frozen = new UncaughtFrozenStore());
	};

	var UncaughtFrozenStore = function UncaughtFrozenStore() {
	  this.entries = [];
	};

	var findUncaughtFrozen = function findUncaughtFrozen(store, key) {
	  return find$2(store.entries, function (it) {
	    return it[0] === key;
	  });
	};

	UncaughtFrozenStore.prototype = {
	  get: function get(key) {
	    var entry = findUncaughtFrozen(this, key);
	    if (entry) return entry[1];
	  },
	  has: function has(key) {
	    return !!findUncaughtFrozen(this, key);
	  },
	  set: function set(key, value) {
	    var entry = findUncaughtFrozen(this, key);
	    if (entry) entry[1] = value;else this.entries.push([key, value]);
	  },
	  'delete': function _delete(key) {
	    var index = findIndex(this.entries, function (it) {
	      return it[0] === key;
	    });
	    if (~index) splice$1(this.entries, index, 1);
	    return !!~index;
	  }
	};
	var collectionWeak$2 = {
	  getConstructor: function getConstructor(wrapper, CONSTRUCTOR_NAME, IS_MAP, ADDER) {
	    var Constructor = wrapper(function (that, iterable) {
	      anInstance$4(that, Prototype);
	      setInternalState$3(that, {
	        type: CONSTRUCTOR_NAME,
	        id: id$1++,
	        frozen: undefined
	      });
	      if (iterable != undefined) iterate$1(iterable, that[ADDER], {
	        that: that,
	        AS_ENTRIES: IS_MAP
	      });
	    });
	    var Prototype = Constructor.prototype;
	    var getInternalState = internalStateGetterFor(CONSTRUCTOR_NAME);

	    var define = function define(that, key, value) {
	      var state = getInternalState(that);
	      var data = getWeakData(anObject$4(key), true);
	      if (data === true) uncaughtFrozenStore(state).set(key, value);else data[state.id] = value;
	      return that;
	    };

	    redefineAll$2(Prototype, {
	      // `{ WeakMap, WeakSet }.prototype.delete(key)` methods
	      // https://tc39.es/ecma262/#sec-weakmap.prototype.delete
	      // https://tc39.es/ecma262/#sec-weakset.prototype.delete
	      'delete': function _delete(key) {
	        var state = getInternalState(this);
	        if (!isObject$3(key)) return false;
	        var data = getWeakData(key);
	        if (data === true) return uncaughtFrozenStore(state)['delete'](key);
	        return data && hasOwn$5(data, state.id) && delete data[state.id];
	      },
	      // `{ WeakMap, WeakSet }.prototype.has(key)` methods
	      // https://tc39.es/ecma262/#sec-weakmap.prototype.has
	      // https://tc39.es/ecma262/#sec-weakset.prototype.has
	      has: function has(key) {
	        var state = getInternalState(this);
	        if (!isObject$3(key)) return false;
	        var data = getWeakData(key);
	        if (data === true) return uncaughtFrozenStore(state).has(key);
	        return data && hasOwn$5(data, state.id);
	      }
	    });
	    redefineAll$2(Prototype, IS_MAP ? {
	      // `WeakMap.prototype.get(key)` method
	      // https://tc39.es/ecma262/#sec-weakmap.prototype.get
	      get: function get(key) {
	        var state = getInternalState(this);

	        if (isObject$3(key)) {
	          var data = getWeakData(key);
	          if (data === true) return uncaughtFrozenStore(state).get(key);
	          return data ? data[state.id] : undefined;
	        }
	      },
	      // `WeakMap.prototype.set(key, value)` method
	      // https://tc39.es/ecma262/#sec-weakmap.prototype.set
	      set: function set(key, value) {
	        return define(this, key, value);
	      }
	    } : {
	      // `WeakSet.prototype.add(value)` method
	      // https://tc39.es/ecma262/#sec-weakset.prototype.add
	      add: function add(value) {
	        return define(this, value, true);
	      }
	    });
	    return Constructor;
	  }
	};

	var global$9 = global$1B;
	var uncurryThis$4 = functionUncurryThis;
	var redefineAll$1 = redefineAll$6;
	var InternalMetadataModule = internalMetadata.exports;
	var collection$1 = collection$4;
	var collectionWeak$1 = collectionWeak$2;
	var isObject$2 = isObject$z;
	var isExtensible = objectIsExtensible;
	var enforceInternalState = internalState.enforce;
	var NATIVE_WEAK_MAP = nativeWeakMap;
	var IS_IE11 = !global$9.ActiveXObject && 'ActiveXObject' in global$9;
	var InternalWeakMap;

	var wrapper = function wrapper(init) {
	  return function WeakMap() {
	    return init(this, arguments.length ? arguments[0] : undefined);
	  };
	}; // `WeakMap` constructor
	// https://tc39.es/ecma262/#sec-weakmap-constructor


	var $WeakMap = collection$1('WeakMap', wrapper, collectionWeak$1); // IE11 WeakMap frozen keys fix
	// We can't use feature detection because it crash some old IE builds
	// https://github.com/zloirock/core-js/issues/485

	if (NATIVE_WEAK_MAP && IS_IE11) {
	  InternalWeakMap = collectionWeak$1.getConstructor(wrapper, 'WeakMap', true);
	  InternalMetadataModule.enable();
	  var WeakMapPrototype = $WeakMap.prototype;
	  var nativeDelete = uncurryThis$4(WeakMapPrototype['delete']);
	  var nativeHas = uncurryThis$4(WeakMapPrototype.has);
	  var nativeGet = uncurryThis$4(WeakMapPrototype.get);
	  var nativeSet = uncurryThis$4(WeakMapPrototype.set);
	  redefineAll$1(WeakMapPrototype, {
	    'delete': function _delete(key) {
	      if (isObject$2(key) && !isExtensible(key)) {
	        var state = enforceInternalState(this);
	        if (!state.frozen) state.frozen = new InternalWeakMap();
	        return nativeDelete(this, key) || state.frozen['delete'](key);
	      }

	      return nativeDelete(this, key);
	    },
	    has: function has(key) {
	      if (isObject$2(key) && !isExtensible(key)) {
	        var state = enforceInternalState(this);
	        if (!state.frozen) state.frozen = new InternalWeakMap();
	        return nativeHas(this, key) || state.frozen.has(key);
	      }

	      return nativeHas(this, key);
	    },
	    get: function get(key) {
	      if (isObject$2(key) && !isExtensible(key)) {
	        var state = enforceInternalState(this);
	        if (!state.frozen) state.frozen = new InternalWeakMap();
	        return nativeHas(this, key) ? nativeGet(this, key) : state.frozen.get(key);
	      }

	      return nativeGet(this, key);
	    },
	    set: function set(key, value) {
	      if (isObject$2(key) && !isExtensible(key)) {
	        var state = enforceInternalState(this);
	        if (!state.frozen) state.frozen = new InternalWeakMap();
	        nativeHas(this, key) ? nativeSet(this, key, value) : state.frozen.set(key, value);
	      } else nativeSet(this, key, value);

	      return this;
	    }
	  });
	}

	var collection = collection$4;
	var collectionWeak = collectionWeak$2; // `WeakSet` constructor
	// https://tc39.es/ecma262/#sec-weakset-constructor

	collection('WeakSet', function (init) {
	  return function WeakSet() {
	    return init(this, arguments.length ? arguments[0] : undefined);
	  };
	}, collectionWeak);

	// flag - `iterable` interface - 'entries', 'keys', 'values', 'forEach' methods

	var domIterables = {
	  CSSRuleList: 0,
	  CSSStyleDeclaration: 0,
	  CSSValueList: 0,
	  ClientRectList: 0,
	  DOMRectList: 0,
	  DOMStringList: 0,
	  DOMTokenList: 1,
	  DataTransferItemList: 0,
	  FileList: 0,
	  HTMLAllCollection: 0,
	  HTMLCollection: 0,
	  HTMLFormElement: 0,
	  HTMLSelectElement: 0,
	  MediaList: 0,
	  MimeTypeArray: 0,
	  NamedNodeMap: 0,
	  NodeList: 1,
	  PaintRequestList: 0,
	  Plugin: 0,
	  PluginArray: 0,
	  SVGLengthList: 0,
	  SVGNumberList: 0,
	  SVGPathSegList: 0,
	  SVGPointList: 0,
	  SVGStringList: 0,
	  SVGTransformList: 0,
	  SourceBufferList: 0,
	  StyleSheetList: 0,
	  TextTrackCueList: 0,
	  TextTrackList: 0,
	  TouchList: 0
	};

	var documentCreateElement = documentCreateElement$2;
	var classList$1 = documentCreateElement('span').classList;
	var DOMTokenListPrototype$2 = classList$1 && classList$1.constructor && classList$1.constructor.prototype;
	var domTokenListPrototype = DOMTokenListPrototype$2 === Object.prototype ? undefined : DOMTokenListPrototype$2;

	var $forEach = arrayIteration.forEach;
	var arrayMethodIsStrict = arrayMethodIsStrict$7;
	var STRICT_METHOD = arrayMethodIsStrict('forEach'); // `Array.prototype.forEach` method implementation
	// https://tc39.es/ecma262/#sec-array.prototype.foreach

	var arrayForEach = !STRICT_METHOD ? function forEach(callbackfn
	/* , thisArg */
	) {
	  return $forEach(this, callbackfn, arguments.length > 1 ? arguments[1] : undefined); // eslint-disable-next-line es/no-array-prototype-foreach -- safe
	} : [].forEach;

	var global$8 = global$1B;
	var DOMIterables$1 = domIterables;
	var DOMTokenListPrototype$1 = domTokenListPrototype;
	var forEach = arrayForEach;
	var createNonEnumerableProperty$2 = createNonEnumerableProperty$f;

	var handlePrototype$1 = function handlePrototype(CollectionPrototype) {
	  // some Chrome versions have non-configurable methods on DOMTokenList
	  if (CollectionPrototype && CollectionPrototype.forEach !== forEach) try {
	    createNonEnumerableProperty$2(CollectionPrototype, 'forEach', forEach);
	  } catch (error) {
	    CollectionPrototype.forEach = forEach;
	  }
	};

	for (var COLLECTION_NAME$1 in DOMIterables$1) {
	  if (DOMIterables$1[COLLECTION_NAME$1]) {
	    handlePrototype$1(global$8[COLLECTION_NAME$1] && global$8[COLLECTION_NAME$1].prototype);
	  }
	}

	handlePrototype$1(DOMTokenListPrototype$1);

	var global$7 = global$1B;
	var DOMIterables = domIterables;
	var DOMTokenListPrototype = domTokenListPrototype;
	var ArrayIteratorMethods = es_array_iterator;
	var createNonEnumerableProperty$1 = createNonEnumerableProperty$f;
	var wellKnownSymbol$2 = wellKnownSymbol$y;
	var ITERATOR$2 = wellKnownSymbol$2('iterator');
	var TO_STRING_TAG = wellKnownSymbol$2('toStringTag');
	var ArrayValues = ArrayIteratorMethods.values;

	var handlePrototype = function handlePrototype(CollectionPrototype, COLLECTION_NAME) {
	  if (CollectionPrototype) {
	    // some Chrome versions have non-configurable methods on DOMTokenList
	    if (CollectionPrototype[ITERATOR$2] !== ArrayValues) try {
	      createNonEnumerableProperty$1(CollectionPrototype, ITERATOR$2, ArrayValues);
	    } catch (error) {
	      CollectionPrototype[ITERATOR$2] = ArrayValues;
	    }

	    if (!CollectionPrototype[TO_STRING_TAG]) {
	      createNonEnumerableProperty$1(CollectionPrototype, TO_STRING_TAG, COLLECTION_NAME);
	    }

	    if (DOMIterables[COLLECTION_NAME]) for (var METHOD_NAME in ArrayIteratorMethods) {
	      // some Chrome versions have non-configurable methods on DOMTokenList
	      if (CollectionPrototype[METHOD_NAME] !== ArrayIteratorMethods[METHOD_NAME]) try {
	        createNonEnumerableProperty$1(CollectionPrototype, METHOD_NAME, ArrayIteratorMethods[METHOD_NAME]);
	      } catch (error) {
	        CollectionPrototype[METHOD_NAME] = ArrayIteratorMethods[METHOD_NAME];
	      }
	    }
	  }
	};

	for (var COLLECTION_NAME in DOMIterables) {
	  handlePrototype(global$7[COLLECTION_NAME] && global$7[COLLECTION_NAME].prototype, COLLECTION_NAME);
	}

	handlePrototype(DOMTokenListPrototype, 'DOMTokenList');

	var IS_NODE$1 = engineIsNode;

	var tryNodeRequire$1 = function tryNodeRequire(name) {
	  try {
	    // eslint-disable-next-line no-new-func -- safe
	    if (IS_NODE$1) return Function('return require("' + name + '")')();
	  } catch (error) {
	    /* empty */
	  }
	};

	var DESCRIPTORS$2 = descriptors;
	var fails$3 = fails$18;
	var anObject$3 = anObject$B;
	var create$3 = objectCreate;
	var normalizeStringArgument$2 = normalizeStringArgument$5;
	var nativeErrorToString = Error.prototype.toString;
	var INCORRECT_TO_STRING$1 = fails$3(function () {
	  if (DESCRIPTORS$2) {
	    // Chrome 32- incorrectly call accessor
	    // eslint-disable-next-line es/no-object-defineproperty -- safe
	    var object = create$3(Object.defineProperty({}, 'name', {
	      get: function get() {
	        return this === object;
	      }
	    }));
	    if (nativeErrorToString.call(object) !== 'true') return true;
	  } // FF10- does not properly handle non-strings


	  return nativeErrorToString.call({
	    message: 1,
	    name: 2
	  }) !== '2: 1' // IE8 does not properly handle defaults
	  || nativeErrorToString.call({}) !== 'Error';
	});
	var errorToString$1 = INCORRECT_TO_STRING$1 ? function toString() {
	  var O = anObject$3(this);
	  var name = normalizeStringArgument$2(O.name, 'Error');
	  var message = normalizeStringArgument$2(O.message);
	  return !name ? message : !message ? name : name + ': ' + message;
	} : nativeErrorToString;

	var domExceptionConstants = {
	  IndexSizeError: {
	    s: 'INDEX_SIZE_ERR',
	    c: 1,
	    m: 1
	  },
	  DOMStringSizeError: {
	    s: 'DOMSTRING_SIZE_ERR',
	    c: 2,
	    m: 0
	  },
	  HierarchyRequestError: {
	    s: 'HIERARCHY_REQUEST_ERR',
	    c: 3,
	    m: 1
	  },
	  WrongDocumentError: {
	    s: 'WRONG_DOCUMENT_ERR',
	    c: 4,
	    m: 1
	  },
	  InvalidCharacterError: {
	    s: 'INVALID_CHARACTER_ERR',
	    c: 5,
	    m: 1
	  },
	  NoDataAllowedError: {
	    s: 'NO_DATA_ALLOWED_ERR',
	    c: 6,
	    m: 0
	  },
	  NoModificationAllowedError: {
	    s: 'NO_MODIFICATION_ALLOWED_ERR',
	    c: 7,
	    m: 1
	  },
	  NotFoundError: {
	    s: 'NOT_FOUND_ERR',
	    c: 8,
	    m: 1
	  },
	  NotSupportedError: {
	    s: 'NOT_SUPPORTED_ERR',
	    c: 9,
	    m: 1
	  },
	  InUseAttributeError: {
	    s: 'INUSE_ATTRIBUTE_ERR',
	    c: 10,
	    m: 1
	  },
	  InvalidStateError: {
	    s: 'INVALID_STATE_ERR',
	    c: 11,
	    m: 1
	  },
	  SyntaxError: {
	    s: 'SYNTAX_ERR',
	    c: 12,
	    m: 1
	  },
	  InvalidModificationError: {
	    s: 'INVALID_MODIFICATION_ERR',
	    c: 13,
	    m: 1
	  },
	  NamespaceError: {
	    s: 'NAMESPACE_ERR',
	    c: 14,
	    m: 1
	  },
	  InvalidAccessError: {
	    s: 'INVALID_ACCESS_ERR',
	    c: 15,
	    m: 1
	  },
	  ValidationError: {
	    s: 'VALIDATION_ERR',
	    c: 16,
	    m: 0
	  },
	  TypeMismatchError: {
	    s: 'TYPE_MISMATCH_ERR',
	    c: 17,
	    m: 1
	  },
	  SecurityError: {
	    s: 'SECURITY_ERR',
	    c: 18,
	    m: 1
	  },
	  NetworkError: {
	    s: 'NETWORK_ERR',
	    c: 19,
	    m: 1
	  },
	  AbortError: {
	    s: 'ABORT_ERR',
	    c: 20,
	    m: 1
	  },
	  URLMismatchError: {
	    s: 'URL_MISMATCH_ERR',
	    c: 21,
	    m: 1
	  },
	  QuotaExceededError: {
	    s: 'QUOTA_EXCEEDED_ERR',
	    c: 22,
	    m: 1
	  },
	  TimeoutError: {
	    s: 'TIMEOUT_ERR',
	    c: 23,
	    m: 1
	  },
	  InvalidNodeTypeError: {
	    s: 'INVALID_NODE_TYPE_ERR',
	    c: 24,
	    m: 1
	  },
	  DataCloneError: {
	    s: 'DATA_CLONE_ERR',
	    c: 25,
	    m: 1
	  }
	};

	var $$8 = _export;
	var tryNodeRequire = tryNodeRequire$1;
	var getBuiltIn$3 = getBuiltIn$j;
	var fails$2 = fails$18;
	var create$2 = objectCreate;
	var createPropertyDescriptor$2 = createPropertyDescriptor$c;
	var defineProperty$1 = objectDefineProperty.f;
	var defineProperties$1 = objectDefineProperties.f;
	var redefine$2 = redefine$j.exports;
	var hasOwn$4 = hasOwnProperty_1;
	var anInstance$3 = anInstance$a;
	var anObject$2 = anObject$B;
	var errorToString = errorToString$1;
	var normalizeStringArgument$1 = normalizeStringArgument$5;
	var DOMExceptionConstants$1 = domExceptionConstants;
	var clearErrorStack$1 = clearErrorStack$4;
	var InternalStateModule$2 = internalState;
	var DESCRIPTORS$1 = descriptors;
	var DOM_EXCEPTION$2 = 'DOMException';
	var DATA_CLONE_ERR = 'DATA_CLONE_ERR';
	var Error$3 = getBuiltIn$3('Error'); // NodeJS < 17.0 does not expose `DOMException` to global

	var NativeDOMException$1 = getBuiltIn$3(DOM_EXCEPTION$2) || function () {
	  try {
	    // NodeJS < 15.0 does not expose `MessageChannel` to global
	    var MessageChannel = getBuiltIn$3('MessageChannel') || tryNodeRequire('worker_threads').MessageChannel; // eslint-disable-next-line es/no-weak-map, unicorn/require-post-message-target-origin -- safe

	    new MessageChannel().port1.postMessage(new WeakMap());
	  } catch (error) {
	    if (error.name == DATA_CLONE_ERR && error.code == 25) return error.constructor;
	  }
	}();

	var NativeDOMExceptionPrototype = NativeDOMException$1 && NativeDOMException$1.prototype;
	var ErrorPrototype = Error$3.prototype;
	var setInternalState$2 = InternalStateModule$2.set;
	var getInternalState = InternalStateModule$2.getterFor(DOM_EXCEPTION$2);
	var HAS_STACK = ('stack' in Error$3(DOM_EXCEPTION$2));

	var codeFor = function codeFor(name) {
	  return hasOwn$4(DOMExceptionConstants$1, name) && DOMExceptionConstants$1[name].m ? DOMExceptionConstants$1[name].c : 0;
	};

	var $DOMException$1 = function DOMException() {
	  anInstance$3(this, DOMExceptionPrototype$1);
	  var argumentsLength = arguments.length;
	  var message = normalizeStringArgument$1(argumentsLength < 1 ? undefined : arguments[0]);
	  var name = normalizeStringArgument$1(argumentsLength < 2 ? undefined : arguments[1], 'Error');
	  var code = codeFor(name);
	  setInternalState$2(this, {
	    type: DOM_EXCEPTION$2,
	    name: name,
	    message: message,
	    code: code
	  });

	  if (!DESCRIPTORS$1) {
	    this.name = name;
	    this.message = message;
	    this.code = code;
	  }

	  if (HAS_STACK) {
	    var error = Error$3(message);
	    error.name = DOM_EXCEPTION$2;
	    defineProperty$1(this, 'stack', createPropertyDescriptor$2(1, clearErrorStack$1(error.stack, 1)));
	  }
	};

	var DOMExceptionPrototype$1 = $DOMException$1.prototype = create$2(ErrorPrototype);

	var createGetterDescriptor = function createGetterDescriptor(get) {
	  return {
	    enumerable: true,
	    configurable: true,
	    get: get
	  };
	};

	var getterFor = function getterFor(key) {
	  return createGetterDescriptor(function () {
	    return getInternalState(this)[key];
	  });
	};

	if (DESCRIPTORS$1) defineProperties$1(DOMExceptionPrototype$1, {
	  name: getterFor('name'),
	  message: getterFor('message'),
	  code: getterFor('code')
	});
	defineProperty$1(DOMExceptionPrototype$1, 'constructor', createPropertyDescriptor$2(1, $DOMException$1)); // FF36- DOMException is a function, but can't be constructed

	var INCORRECT_CONSTRUCTOR = fails$2(function () {
	  return !(new NativeDOMException$1() instanceof Error$3);
	}); // Safari 10.1 / Chrome 32- / IE8- DOMException.prototype.toString bugs

	var INCORRECT_TO_STRING = INCORRECT_CONSTRUCTOR || fails$2(function () {
	  return ErrorPrototype.toString !== errorToString || String(new NativeDOMException$1(1, 2)) !== '2: 1';
	}); // Deno 1.6.3- DOMException.prototype.code just missed

	var INCORRECT_CODE = INCORRECT_CONSTRUCTOR || fails$2(function () {
	  return new NativeDOMException$1(1, 'DataCloneError').code !== 25;
	}); // Deno 1.6.3- DOMException constants just missed

	INCORRECT_CONSTRUCTOR || NativeDOMException$1[DATA_CLONE_ERR] !== 25 || NativeDOMExceptionPrototype[DATA_CLONE_ERR] !== 25;
	var FORCED_CONSTRUCTOR$1 = INCORRECT_CONSTRUCTOR; // `DOMException` constructor
	// https://webidl.spec.whatwg.org/#idl-DOMException

	$$8({
	  global: true,
	  forced: FORCED_CONSTRUCTOR$1
	}, {
	  DOMException: FORCED_CONSTRUCTOR$1 ? $DOMException$1 : NativeDOMException$1
	});
	var PolyfilledDOMException$1 = getBuiltIn$3(DOM_EXCEPTION$2);
	var PolyfilledDOMExceptionPrototype$1 = PolyfilledDOMException$1.prototype;

	if (INCORRECT_TO_STRING && (NativeDOMException$1 === PolyfilledDOMException$1)) {
	  redefine$2(PolyfilledDOMExceptionPrototype$1, 'toString', errorToString);
	}

	if (INCORRECT_CODE && DESCRIPTORS$1 && NativeDOMException$1 === PolyfilledDOMException$1) {
	  defineProperty$1(PolyfilledDOMExceptionPrototype$1, 'code', createGetterDescriptor(function () {
	    return codeFor(anObject$2(this).name);
	  }));
	}

	for (var key$1 in DOMExceptionConstants$1) {
	  if (hasOwn$4(DOMExceptionConstants$1, key$1)) {
	    var constant$7 = DOMExceptionConstants$1[key$1];
	    var constantName$1 = constant$7.s;
	    var descriptor = createPropertyDescriptor$2(6, constant$7.c);

	    if (!hasOwn$4(PolyfilledDOMException$1, constantName$1)) {
	      defineProperty$1(PolyfilledDOMException$1, constantName$1, descriptor);
	    }

	    if (!hasOwn$4(PolyfilledDOMExceptionPrototype$1, constantName$1)) {
	      defineProperty$1(PolyfilledDOMExceptionPrototype$1, constantName$1, descriptor);
	    }
	  }
	}

	var $$7 = _export;
	var getBuiltIn$2 = getBuiltIn$j;
	var createPropertyDescriptor$1 = createPropertyDescriptor$c;
	var defineProperty = objectDefineProperty.f;
	var hasOwn$3 = hasOwnProperty_1;
	var anInstance$2 = anInstance$a;
	var inheritIfRequired = inheritIfRequired$6;
	var normalizeStringArgument = normalizeStringArgument$5;
	var DOMExceptionConstants = domExceptionConstants;
	var clearErrorStack = clearErrorStack$4;
	var DOM_EXCEPTION$1 = 'DOMException';
	var Error$2 = getBuiltIn$2('Error');
	var NativeDOMException = getBuiltIn$2(DOM_EXCEPTION$1);

	var $DOMException = function DOMException() {
	  anInstance$2(this, DOMExceptionPrototype);
	  var argumentsLength = arguments.length;
	  var message = normalizeStringArgument(argumentsLength < 1 ? undefined : arguments[0]);
	  var name = normalizeStringArgument(argumentsLength < 2 ? undefined : arguments[1], 'Error');
	  var that = new NativeDOMException(message, name);
	  var error = Error$2(message);
	  error.name = DOM_EXCEPTION$1;
	  defineProperty(that, 'stack', createPropertyDescriptor$1(1, clearErrorStack(error.stack, 1)));
	  inheritIfRequired(that, this, $DOMException);
	  return that;
	};

	var DOMExceptionPrototype = $DOMException.prototype = NativeDOMException.prototype;
	var ERROR_HAS_STACK = ('stack' in Error$2(DOM_EXCEPTION$1));
	var DOM_EXCEPTION_HAS_STACK = ('stack' in new NativeDOMException(1, 2));
	var FORCED_CONSTRUCTOR = ERROR_HAS_STACK && !DOM_EXCEPTION_HAS_STACK; // `DOMException` constructor patch for `.stack` where it's required
	// https://webidl.spec.whatwg.org/#es-DOMException-specialness

	$$7({
	  global: true,
	  forced: FORCED_CONSTRUCTOR
	}, {
	  // TODO: fix export logic
	  DOMException: FORCED_CONSTRUCTOR ? $DOMException : NativeDOMException
	});
	var PolyfilledDOMException = getBuiltIn$2(DOM_EXCEPTION$1);
	var PolyfilledDOMExceptionPrototype = PolyfilledDOMException.prototype;

	if (PolyfilledDOMExceptionPrototype.constructor !== PolyfilledDOMException) {
	  {
	    defineProperty(PolyfilledDOMExceptionPrototype, 'constructor', createPropertyDescriptor$1(1, PolyfilledDOMException));
	  }

	  for (var key in DOMExceptionConstants) {
	    if (hasOwn$3(DOMExceptionConstants, key)) {
	      var constant$6 = DOMExceptionConstants[key];
	      var constantName = constant$6.s;

	      if (!hasOwn$3(PolyfilledDOMException, constantName)) {
	        defineProperty(PolyfilledDOMException, constantName, createPropertyDescriptor$1(6, constant$6.c));
	      }
	    }
	  }
	}

	var getBuiltIn$1 = getBuiltIn$j;
	var setToStringTag$2 = setToStringTag$c;
	var DOM_EXCEPTION = 'DOMException';
	setToStringTag$2(getBuiltIn$1(DOM_EXCEPTION), DOM_EXCEPTION);

	var $$6 = _export;
	var global$6 = global$1B;
	var task = task$2;
	var FORCED = !global$6.setImmediate || !global$6.clearImmediate; // http://w3c.github.io/setImmediate/

	$$6({
	  global: true,
	  bind: true,
	  enumerable: true,
	  forced: FORCED
	}, {
	  // `setImmediate` method
	  // http://w3c.github.io/setImmediate/#si-setImmediate
	  setImmediate: task.set,
	  // `clearImmediate` method
	  // http://w3c.github.io/setImmediate/#si-clearImmediate
	  clearImmediate: task.clear
	});

	var $$5 = _export;
	var global$5 = global$1B;
	var microtask = microtask$2;
	var aCallable = aCallable$g;
	var validateArgumentsLength$3 = validateArgumentsLength$5;
	var IS_NODE = engineIsNode;
	var process = global$5.process; // `queueMicrotask` method
	// https://html.spec.whatwg.org/multipage/timers-and-user-prompts.html#dom-queuemicrotask

	$$5({
	  global: true,
	  enumerable: true,
	  noTargetGet: true
	}, {
	  queueMicrotask: function queueMicrotask(fn) {
	    validateArgumentsLength$3(arguments.length, 1);
	    aCallable(fn);
	    var domain = IS_NODE && process.domain;
	    microtask(domain ? domain.bind(fn) : fn);
	  }
	});

	var $$4 = _export;
	var global$4 = global$1B;
	var getBuiltin = getBuiltIn$j;
	var uncurryThis$3 = functionUncurryThis;
	var fails$1 = fails$18;
	var uid = uid$6;
	var isCallable$1 = isCallable$u;
	var isConstructor = isConstructor$6;
	var isObject$1 = isObject$z;
	var isSymbol = isSymbol$6;
	var iterate = iterate$9;
	var anObject$1 = anObject$B;
	var classof$1 = classof$i;
	var hasOwn$2 = hasOwnProperty_1;
	var createProperty = createProperty$9;
	var createNonEnumerableProperty = createNonEnumerableProperty$f;
	var lengthOfArrayLike = lengthOfArrayLike$n;
	var validateArgumentsLength$2 = validateArgumentsLength$5;
	var regExpFlags = regexpFlags$1;
	var ERROR_STACK_INSTALLABLE = errorStackInstallable;
	var Object$1 = global$4.Object;
	var Date$1 = global$4.Date;
	var Error$1 = global$4.Error;
	var EvalError = global$4.EvalError;
	var RangeError$1 = global$4.RangeError;
	var ReferenceError$1 = global$4.ReferenceError;
	var SyntaxError$1 = global$4.SyntaxError;
	var TypeError$3 = global$4.TypeError;
	var URIError = global$4.URIError;
	var PerformanceMark = global$4.PerformanceMark;
	var WebAssembly = global$4.WebAssembly;
	var CompileError = WebAssembly && WebAssembly.CompileError || Error$1;
	var LinkError = WebAssembly && WebAssembly.LinkError || Error$1;
	var RuntimeError = WebAssembly && WebAssembly.RuntimeError || Error$1;
	var DOMException = getBuiltin('DOMException');
	var Set$1 = getBuiltin('Set');
	var Map$1 = getBuiltin('Map');
	var MapPrototype = Map$1.prototype;
	var mapHas = uncurryThis$3(MapPrototype.has);
	var mapGet = uncurryThis$3(MapPrototype.get);
	var mapSet = uncurryThis$3(MapPrototype.set);
	var setAdd = uncurryThis$3(Set$1.prototype.add);
	var objectKeys = getBuiltin('Object', 'keys');
	var push$3 = uncurryThis$3([].push);
	var booleanValueOf = uncurryThis$3(true.valueOf);
	var numberValueOf = uncurryThis$3(1.0.valueOf);
	var stringValueOf = uncurryThis$3(''.valueOf);
	var getFlags = uncurryThis$3(regExpFlags);
	var getTime = uncurryThis$3(Date$1.prototype.getTime);
	var PERFORMANCE_MARK = uid('structuredClone');
	var DATA_CLONE_ERROR = 'DataCloneError';
	var TRANSFERRING = 'Transferring';

	var checkBasicSemantic = function checkBasicSemantic(structuredCloneImplementation) {
	  return !fails$1(function () {
	    var set1 = new global$4.Set([7]);
	    var set2 = structuredCloneImplementation(set1);
	    var number = structuredCloneImplementation(Object$1(7));
	    return set2 == set1 || !set2.has(7) || _typeof(number) != 'object' || number != 7;
	  }) && structuredCloneImplementation;
	}; // https://github.com/whatwg/html/pull/5749


	var checkNewErrorsSemantic = function checkNewErrorsSemantic(structuredCloneImplementation) {
	  return !fails$1(function () {
	    var test = structuredCloneImplementation(new global$4.AggregateError([1], PERFORMANCE_MARK, {
	      cause: 3
	    }));
	    return test.name != 'AggregateError' || test.errors[0] != 1 || test.message != PERFORMANCE_MARK || test.cause != 3;
	  }) && structuredCloneImplementation;
	}; // FF94+, Safari TP134+, Chrome Canary 98+, NodeJS 17.0+, Deno 1.13+
	// current FF and Safari implementations can't clone errors
	// https://bugzilla.mozilla.org/show_bug.cgi?id=1556604
	// no one of current implementations supports new (html/5749) error cloning semantic


	var nativeStructuredClone = global$4.structuredClone;
	var FORCED_REPLACEMENT = !checkNewErrorsSemantic(nativeStructuredClone); // Chrome 82+, Safari 14.1+, Deno 1.11+
	// Chrome 78-81 implementation swaps `.name` and `.message` of cloned `DOMException`
	// Safari 14.1 implementation doesn't clone some `RegExp` flags, so requires a workaround
	// current Safari implementation can't clone errors
	// Deno 1.2-1.10 implementations too naive
	// NodeJS 16.0+ does not have `PerformanceMark` constructor, structured cloning implementation
	//   from `performance.mark` is too naive and can't clone, for example, `RegExp` or some boxed primitives
	//   https://github.com/nodejs/node/issues/40840
	// no one of current implementations supports new (html/5749) error cloning semantic

	var structuredCloneFromMark = !nativeStructuredClone && checkBasicSemantic(function (value) {
	  return new PerformanceMark(PERFORMANCE_MARK, {
	    detail: value
	  }).detail;
	});
	var nativeRestrictedStructuredClone = checkBasicSemantic(nativeStructuredClone) || structuredCloneFromMark;

	var throwUncloneable = function throwUncloneable(type) {
	  throw new DOMException('Uncloneable type: ' + type, DATA_CLONE_ERROR);
	};

	var throwUnpolyfillable = function throwUnpolyfillable(type, kind) {
	  throw new DOMException((kind || 'Cloning') + ' of ' + type + ' cannot be properly polyfilled in this engine', DATA_CLONE_ERROR);
	};

	var structuredCloneInternal = function structuredCloneInternal(value, map) {
	  if (isSymbol(value)) throwUncloneable('Symbol');
	  if (!isObject$1(value)) return value; // effectively preserves circular references

	  if (map) {
	    if (mapHas(map, value)) return mapGet(map, value);
	  } else map = new Map$1();

	  var type = classof$1(value);
	  var deep = false;
	  var C, name, cloned, dataTransfer, i, length, keys, key, source, target;

	  switch (type) {
	    case 'Array':
	      cloned = [];
	      deep = true;
	      break;

	    case 'Object':
	      cloned = {};
	      deep = true;
	      break;

	    case 'Map':
	      cloned = new Map$1();
	      deep = true;
	      break;

	    case 'Set':
	      cloned = new Set$1();
	      deep = true;
	      break;

	    case 'RegExp':
	      // in this block because of a Safari 14.1 bug
	      // old FF does not clone regexes passed to the constructor, so get the source and flags directly
	      cloned = new RegExp(value.source, 'flags' in value ? value.flags : getFlags(value));
	      break;

	    case 'Error':
	      name = value.name;

	      switch (name) {
	        case 'AggregateError':
	          cloned = getBuiltin('AggregateError')([]);
	          break;

	        case 'EvalError':
	          cloned = EvalError();
	          break;

	        case 'RangeError':
	          cloned = RangeError$1();
	          break;

	        case 'ReferenceError':
	          cloned = ReferenceError$1();
	          break;

	        case 'SyntaxError':
	          cloned = SyntaxError$1();
	          break;

	        case 'TypeError':
	          cloned = TypeError$3();
	          break;

	        case 'URIError':
	          cloned = URIError();
	          break;

	        case 'CompileError':
	          cloned = CompileError();
	          break;

	        case 'LinkError':
	          cloned = LinkError();
	          break;

	        case 'RuntimeError':
	          cloned = RuntimeError();
	          break;

	        default:
	          cloned = Error$1();
	      }

	      deep = true;
	      break;

	    case 'DOMException':
	      cloned = new DOMException(value.message, value.name);
	      deep = true;
	      break;

	    case 'DataView':
	    case 'Int8Array':
	    case 'Uint8Array':
	    case 'Uint8ClampedArray':
	    case 'Int16Array':
	    case 'Uint16Array':
	    case 'Int32Array':
	    case 'Uint32Array':
	    case 'Float32Array':
	    case 'Float64Array':
	    case 'BigInt64Array':
	    case 'BigUint64Array':
	      C = global$4[type]; // in some old engines like Safari 9, typeof C is 'object'
	      // on Uint8ClampedArray or some other constructors

	      if (!isObject$1(C)) throwUnpolyfillable(type);
	      cloned = new C( // this is safe, since arraybuffer cannot have circular references
	      structuredCloneInternal(value.buffer, map), value.byteOffset, type === 'DataView' ? value.byteLength : value.length);
	      break;

	    case 'DOMQuad':
	      try {
	        cloned = new DOMQuad(structuredCloneInternal(value.p1, map), structuredCloneInternal(value.p2, map), structuredCloneInternal(value.p3, map), structuredCloneInternal(value.p4, map));
	      } catch (error) {
	        if (nativeRestrictedStructuredClone) {
	          cloned = nativeRestrictedStructuredClone(value);
	        } else throwUnpolyfillable(type);
	      }

	      break;

	    case 'FileList':
	      C = global$4.DataTransfer;

	      if (isConstructor(C)) {
	        dataTransfer = new C();

	        for (i = 0, length = lengthOfArrayLike(value); i < length; i++) {
	          dataTransfer.items.add(structuredCloneInternal(value[i], map));
	        }

	        cloned = dataTransfer.files;
	      } else if (nativeRestrictedStructuredClone) {
	        cloned = nativeRestrictedStructuredClone(value);
	      } else throwUnpolyfillable(type);

	      break;

	    case 'ImageData':
	      // Safari 9 ImageData is a constructor, but typeof ImageData is 'object'
	      try {
	        cloned = new ImageData(structuredCloneInternal(value.data, map), value.width, value.height, {
	          colorSpace: value.colorSpace
	        });
	      } catch (error) {
	        if (nativeRestrictedStructuredClone) {
	          cloned = nativeRestrictedStructuredClone(value);
	        } else throwUnpolyfillable(type);
	      }

	      break;

	    default:
	      if (nativeRestrictedStructuredClone) {
	        cloned = nativeRestrictedStructuredClone(value);
	      } else switch (type) {
	        case 'BigInt':
	          // can be a 3rd party polyfill
	          cloned = Object$1(value.valueOf());
	          break;

	        case 'Boolean':
	          cloned = Object$1(booleanValueOf(value));
	          break;

	        case 'Number':
	          cloned = Object$1(numberValueOf(value));
	          break;

	        case 'String':
	          cloned = Object$1(stringValueOf(value));
	          break;

	        case 'Date':
	          cloned = new Date$1(getTime(value));
	          break;

	        case 'ArrayBuffer':
	          C = global$4.DataView; // `ArrayBuffer#slice` is not available in IE10
	          // `ArrayBuffer#slice` and `DataView` are not available in old FF

	          if (!C && typeof value.slice != 'function') throwUnpolyfillable(type); // detached buffers throws in `DataView` and `.slice`

	          try {
	            if (typeof value.slice == 'function') {
	              cloned = value.slice(0);
	            } else {
	              length = value.byteLength;
	              cloned = new ArrayBuffer(length);
	              source = new C(value);
	              target = new C(cloned);

	              for (i = 0; i < length; i++) {
	                target.setUint8(i, source.getUint8(i));
	              }
	            }
	          } catch (error) {
	            throw new DOMException('ArrayBuffer is detached', DATA_CLONE_ERROR);
	          }

	          break;

	        case 'SharedArrayBuffer':
	          // SharedArrayBuffer should use shared memory, we can't polyfill it, so return the original
	          cloned = value;
	          break;

	        case 'Blob':
	          try {
	            cloned = value.slice(0, value.size, value.type);
	          } catch (error) {
	            throwUnpolyfillable(type);
	          }

	          break;

	        case 'DOMPoint':
	        case 'DOMPointReadOnly':
	          C = global$4[type];

	          try {
	            cloned = C.fromPoint ? C.fromPoint(value) : new C(value.x, value.y, value.z, value.w);
	          } catch (error) {
	            throwUnpolyfillable(type);
	          }

	          break;

	        case 'DOMRect':
	        case 'DOMRectReadOnly':
	          C = global$4[type];

	          try {
	            cloned = C.fromRect ? C.fromRect(value) : new C(value.x, value.y, value.width, value.height);
	          } catch (error) {
	            throwUnpolyfillable(type);
	          }

	          break;

	        case 'DOMMatrix':
	        case 'DOMMatrixReadOnly':
	          C = global$4[type];

	          try {
	            cloned = C.fromMatrix ? C.fromMatrix(value) : new C(value);
	          } catch (error) {
	            throwUnpolyfillable(type);
	          }

	          break;

	        case 'AudioData':
	        case 'VideoFrame':
	          if (!isCallable$1(value.clone)) throwUnpolyfillable(type);

	          try {
	            cloned = value.clone();
	          } catch (error) {
	            throwUncloneable(type);
	          }

	          break;

	        case 'File':
	          try {
	            cloned = new File([value], value.name, value);
	          } catch (error) {
	            throwUnpolyfillable(type);
	          }

	          break;

	        case 'CryptoKey':
	        case 'GPUCompilationMessage':
	        case 'GPUCompilationInfo':
	        case 'ImageBitmap':
	        case 'RTCCertificate':
	        case 'WebAssembly.Module':
	          throwUnpolyfillable(type);
	        // break omitted

	        default:
	          throwUncloneable(type);
	      }

	  }

	  mapSet(map, value, cloned);
	  if (deep) switch (type) {
	    case 'Array':
	    case 'Object':
	      keys = objectKeys(value);

	      for (i = 0, length = lengthOfArrayLike(keys); i < length; i++) {
	        key = keys[i];
	        createProperty(cloned, key, structuredCloneInternal(value[key], map));
	      }

	      break;

	    case 'Map':
	      value.forEach(function (v, k) {
	        mapSet(cloned, structuredCloneInternal(k, map), structuredCloneInternal(v, map));
	      });
	      break;

	    case 'Set':
	      value.forEach(function (v) {
	        setAdd(cloned, structuredCloneInternal(v, map));
	      });
	      break;

	    case 'Error':
	      createNonEnumerableProperty(cloned, 'message', structuredCloneInternal(value.message, map));

	      if (hasOwn$2(value, 'cause')) {
	        createNonEnumerableProperty(cloned, 'cause', structuredCloneInternal(value.cause, map));
	      }

	      if (name == 'AggregateError') {
	        cloned.errors = structuredCloneInternal(value.errors, map);
	      }

	    // break omitted

	    case 'DOMException':
	      if (ERROR_STACK_INSTALLABLE) {
	        createNonEnumerableProperty(cloned, 'stack', structuredCloneInternal(value.stack, map));
	      }

	  }
	  return cloned;
	};

	var PROPER_TRANSFER = nativeStructuredClone && !fails$1(function () {
	  var buffer = new ArrayBuffer(8);
	  var clone = nativeStructuredClone(buffer, {
	    transfer: [buffer]
	  });
	  return buffer.byteLength != 0 || clone.byteLength != 8;
	});

	var tryToTransfer = function tryToTransfer(rawTransfer, map) {
	  if (!isObject$1(rawTransfer)) throw TypeError$3('Transfer option cannot be converted to a sequence');
	  var transfer = [];
	  iterate(rawTransfer, function (value) {
	    push$3(transfer, anObject$1(value));
	  });
	  var i = 0;
	  var length = lengthOfArrayLike(transfer);
	  var value, type, C, transferredArray, transferred, canvas, context;

	  if (PROPER_TRANSFER) {
	    transferredArray = nativeStructuredClone(transfer, {
	      transfer: transfer
	    });

	    while (i < length) {
	      mapSet(map, transfer[i], transferredArray[i++]);
	    }
	  } else while (i < length) {
	    value = transfer[i++];
	    if (mapHas(map, value)) throw new DOMException('Duplicate transferable', DATA_CLONE_ERROR);
	    type = classof$1(value);

	    switch (type) {
	      case 'ImageBitmap':
	        C = global$4.OffscreenCanvas;
	        if (!isConstructor(C)) throwUnpolyfillable(type, TRANSFERRING);

	        try {
	          canvas = new C(value.width, value.height);
	          context = canvas.getContext('bitmaprenderer');
	          context.transferFromImageBitmap(value);
	          transferred = canvas.transferToImageBitmap();
	        } catch (error) {
	          /* empty */
	        }

	        break;

	      case 'AudioData':
	      case 'VideoFrame':
	        if (!isCallable$1(value.clone) || !isCallable$1(value.close)) throwUnpolyfillable(type, TRANSFERRING);

	        try {
	          transferred = value.clone();
	          value.close();
	        } catch (error) {
	          /* empty */
	        }

	        break;

	      case 'ArrayBuffer':
	      case 'MessagePort':
	      case 'OffscreenCanvas':
	      case 'ReadableStream':
	      case 'TransformStream':
	      case 'WritableStream':
	        throwUnpolyfillable(type, TRANSFERRING);
	    }

	    if (transferred === undefined) throw new DOMException('This object cannot be transferred: ' + type, DATA_CLONE_ERROR);
	    mapSet(map, value, transferred);
	  }
	};

	$$4({
	  global: true,
	  enumerable: true,
	  sham: !PROPER_TRANSFER,
	  forced: FORCED_REPLACEMENT
	}, {
	  structuredClone: function structuredClone(value
	  /* , { transfer } */
	  ) {
	    var options = validateArgumentsLength$2(arguments.length, 1) > 1 ? anObject$1(arguments[1]) : undefined;
	    var transfer = options ? options.transfer : undefined;
	    var map;

	    if (transfer !== undefined) {
	      map = new Map$1();
	      tryToTransfer(transfer, map);
	    }

	    return structuredCloneInternal(value, map);
	  }
	});

	var fails = fails$18;
	var wellKnownSymbol$1 = wellKnownSymbol$y;
	var IS_PURE = isPure;
	var ITERATOR$1 = wellKnownSymbol$1('iterator');
	var nativeUrl = !fails(function () {
	  // eslint-disable-next-line unicorn/relative-url-style -- required for testing
	  var url = new URL('b?a=1&b=2&c=3', 'http://a');
	  var searchParams = url.searchParams;
	  var result = '';
	  url.pathname = 'c%20d';
	  searchParams.forEach(function (value, key) {
	    searchParams['delete']('b');
	    result += key + value;
	  });
	  return IS_PURE && !url.toJSON || !searchParams.sort || url.href !== 'http://a/c%20d?a=1&c=3' || searchParams.get('c') !== '3' || String(new URLSearchParams('?a=1')) !== 'a=1' || !searchParams[ITERATOR$1] // throws in Edge
	  || new URL('https://a@b').username !== 'a' || new URLSearchParams(new URLSearchParams('a=b')).get('a') !== 'b' // not punycoded in Edge
	  || new URL('http://тест').host !== 'xn--e1aybc' // not escaped in Chrome 62-
	  || new URL('http://a#б').hash !== '#%D0%B1' // fails in Chrome 66-
	  || result !== 'a1c3' // throws in Safari
	  || new URL('http://x', undefined).host !== 'x';
	});

	var global$3 = global$1B;
	var uncurryThis$2 = functionUncurryThis;
	var maxInt = 2147483647; // aka. 0x7FFFFFFF or 2^31-1

	var base = 36;
	var tMin = 1;
	var tMax = 26;
	var skew = 38;
	var damp = 700;
	var initialBias = 72;
	var initialN = 128; // 0x80

	var delimiter = '-'; // '\x2D'

	var regexNonASCII = /[^\0-\u007E]/; // non-ASCII chars

	var regexSeparators = /[.\u3002\uFF0E\uFF61]/g; // RFC 3490 separators

	var OVERFLOW_ERROR = 'Overflow: input needs wider integers to process';
	var baseMinusTMin = base - tMin;
	var RangeError = global$3.RangeError;
	var exec$1 = uncurryThis$2(regexSeparators.exec);
	var floor$1 = Math.floor;
	var fromCharCode = String.fromCharCode;
	var charCodeAt = uncurryThis$2(''.charCodeAt);
	var join$2 = uncurryThis$2([].join);
	var push$2 = uncurryThis$2([].push);
	var replace$2 = uncurryThis$2(''.replace);
	var split$2 = uncurryThis$2(''.split);
	var toLowerCase$1 = uncurryThis$2(''.toLowerCase);
	/**
	 * Creates an array containing the numeric code points of each Unicode
	 * character in the string. While JavaScript uses UCS-2 internally,
	 * this function will convert a pair of surrogate halves (each of which
	 * UCS-2 exposes as separate characters) into a single code point,
	 * matching UTF-16.
	 */

	var ucs2decode = function ucs2decode(string) {
	  var output = [];
	  var counter = 0;
	  var length = string.length;

	  while (counter < length) {
	    var value = charCodeAt(string, counter++);

	    if (value >= 0xD800 && value <= 0xDBFF && counter < length) {
	      // It's a high surrogate, and there is a next character.
	      var extra = charCodeAt(string, counter++);

	      if ((extra & 0xFC00) == 0xDC00) {
	        // Low surrogate.
	        push$2(output, ((value & 0x3FF) << 10) + (extra & 0x3FF) + 0x10000);
	      } else {
	        // It's an unmatched surrogate; only append this code unit, in case the
	        // next code unit is the high surrogate of a surrogate pair.
	        push$2(output, value);
	        counter--;
	      }
	    } else {
	      push$2(output, value);
	    }
	  }

	  return output;
	};
	/**
	 * Converts a digit/integer into a basic code point.
	 */


	var digitToBasic = function digitToBasic(digit) {
	  //  0..25 map to ASCII a..z or A..Z
	  // 26..35 map to ASCII 0..9
	  return digit + 22 + 75 * (digit < 26);
	};
	/**
	 * Bias adaptation function as per section 3.4 of RFC 3492.
	 * https://tools.ietf.org/html/rfc3492#section-3.4
	 */


	var adapt = function adapt(delta, numPoints, firstTime) {
	  var k = 0;
	  delta = firstTime ? floor$1(delta / damp) : delta >> 1;
	  delta += floor$1(delta / numPoints);

	  while (delta > baseMinusTMin * tMax >> 1) {
	    delta = floor$1(delta / baseMinusTMin);
	    k += base;
	  }

	  return floor$1(k + (baseMinusTMin + 1) * delta / (delta + skew));
	};
	/**
	 * Converts a string of Unicode symbols (e.g. a domain name label) to a
	 * Punycode string of ASCII-only symbols.
	 */


	var encode = function encode(input) {
	  var output = []; // Convert the input in UCS-2 to an array of Unicode code points.

	  input = ucs2decode(input); // Cache the length.

	  var inputLength = input.length; // Initialize the state.

	  var n = initialN;
	  var delta = 0;
	  var bias = initialBias;
	  var i, currentValue; // Handle the basic code points.

	  for (i = 0; i < input.length; i++) {
	    currentValue = input[i];

	    if (currentValue < 0x80) {
	      push$2(output, fromCharCode(currentValue));
	    }
	  }

	  var basicLength = output.length; // number of basic code points.

	  var handledCPCount = basicLength; // number of code points that have been handled;
	  // Finish the basic string with a delimiter unless it's empty.

	  if (basicLength) {
	    push$2(output, delimiter);
	  } // Main encoding loop:


	  while (handledCPCount < inputLength) {
	    // All non-basic code points < n have been handled already. Find the next larger one:
	    var m = maxInt;

	    for (i = 0; i < input.length; i++) {
	      currentValue = input[i];

	      if (currentValue >= n && currentValue < m) {
	        m = currentValue;
	      }
	    } // Increase `delta` enough to advance the decoder's <n,i> state to <m,0>, but guard against overflow.


	    var handledCPCountPlusOne = handledCPCount + 1;

	    if (m - n > floor$1((maxInt - delta) / handledCPCountPlusOne)) {
	      throw RangeError(OVERFLOW_ERROR);
	    }

	    delta += (m - n) * handledCPCountPlusOne;
	    n = m;

	    for (i = 0; i < input.length; i++) {
	      currentValue = input[i];

	      if (currentValue < n && ++delta > maxInt) {
	        throw RangeError(OVERFLOW_ERROR);
	      }

	      if (currentValue == n) {
	        // Represent delta as a generalized variable-length integer.
	        var q = delta;
	        var k = base;

	        while (true) {
	          var t = k <= bias ? tMin : k >= bias + tMax ? tMax : k - bias;
	          if (q < t) break;
	          var qMinusT = q - t;
	          var baseMinusT = base - t;
	          push$2(output, fromCharCode(digitToBasic(t + qMinusT % baseMinusT)));
	          q = floor$1(qMinusT / baseMinusT);
	          k += base;
	        }

	        push$2(output, fromCharCode(digitToBasic(q)));
	        bias = adapt(delta, handledCPCountPlusOne, handledCPCount == basicLength);
	        delta = 0;
	        handledCPCount++;
	      }
	    }

	    delta++;
	    n++;
	  }

	  return join$2(output, '');
	};

	var stringPunycodeToAscii = function stringPunycodeToAscii(input) {
	  var encoded = [];
	  var labels = split$2(replace$2(toLowerCase$1(input), regexSeparators, "."), '.');
	  var i, label;

	  for (i = 0; i < labels.length; i++) {
	    label = labels[i];
	    push$2(encoded, exec$1(regexNonASCII, label) ? 'xn--' + encode(label) : label);
	  }

	  return join$2(encoded, '.');
	};

	var $$3 = _export;
	var global$2 = global$1B;
	var getBuiltIn = getBuiltIn$j;
	var call$1 = functionCall;
	var uncurryThis$1 = functionUncurryThis;
	var USE_NATIVE_URL$1 = nativeUrl;
	var redefine$1 = redefine$j.exports;
	var redefineAll = redefineAll$6;
	var setToStringTag$1 = setToStringTag$c;
	var createIteratorConstructor = createIteratorConstructor$3;
	var InternalStateModule$1 = internalState;
	var anInstance$1 = anInstance$a;
	var isCallable = isCallable$u;
	var hasOwn$1 = hasOwnProperty_1;
	var bind$1 = functionBindContext;
	var classof = classof$i;
	var anObject = anObject$B;
	var isObject = isObject$z;
	var $toString$1 = toString$p;
	var create$1 = objectCreate;
	var createPropertyDescriptor = createPropertyDescriptor$c;
	var getIterator = getIterator$4;
	var getIteratorMethod = getIteratorMethod$5;
	var validateArgumentsLength$1 = validateArgumentsLength$5;
	var wellKnownSymbol = wellKnownSymbol$y;
	var arraySort = arraySort$1;
	var ITERATOR = wellKnownSymbol('iterator');
	var URL_SEARCH_PARAMS = 'URLSearchParams';
	var URL_SEARCH_PARAMS_ITERATOR = URL_SEARCH_PARAMS + 'Iterator';
	var setInternalState$1 = InternalStateModule$1.set;
	var getInternalParamsState = InternalStateModule$1.getterFor(URL_SEARCH_PARAMS);
	var getInternalIteratorState = InternalStateModule$1.getterFor(URL_SEARCH_PARAMS_ITERATOR);
	var n$Fetch = getBuiltIn('fetch');
	var N$Request = getBuiltIn('Request');
	var Headers = getBuiltIn('Headers');
	var RequestPrototype = N$Request && N$Request.prototype;
	var HeadersPrototype = Headers && Headers.prototype;
	var RegExp$1 = global$2.RegExp;
	var TypeError$2 = global$2.TypeError;
	var decodeURIComponent = global$2.decodeURIComponent;
	var encodeURIComponent$1 = global$2.encodeURIComponent;
	var charAt$1 = uncurryThis$1(''.charAt);
	var join$1 = uncurryThis$1([].join);
	var push$1 = uncurryThis$1([].push);
	var replace$1 = uncurryThis$1(''.replace);
	var shift$1 = uncurryThis$1([].shift);
	var splice = uncurryThis$1([].splice);
	var split$1 = uncurryThis$1(''.split);
	var stringSlice$1 = uncurryThis$1(''.slice);
	var plus = /\+/g;
	var sequences = Array(4);

	var percentSequence = function percentSequence(bytes) {
	  return sequences[bytes - 1] || (sequences[bytes - 1] = RegExp$1('((?:%[\\da-f]{2}){' + bytes + '})', 'gi'));
	};

	var percentDecode = function percentDecode(sequence) {
	  try {
	    return decodeURIComponent(sequence);
	  } catch (error) {
	    return sequence;
	  }
	};

	var deserialize = function deserialize(it) {
	  var result = replace$1(it, plus, ' ');
	  var bytes = 4;

	  try {
	    return decodeURIComponent(result);
	  } catch (error) {
	    while (bytes) {
	      result = replace$1(result, percentSequence(bytes--), percentDecode);
	    }

	    return result;
	  }
	};

	var find$1 = /[!'()~]|%20/g;
	var replacements = {
	  '!': '%21',
	  "'": '%27',
	  '(': '%28',
	  ')': '%29',
	  '~': '%7E',
	  '%20': '+'
	};

	var replacer = function replacer(match) {
	  return replacements[match];
	};

	var _serialize = function serialize(it) {
	  return replace$1(encodeURIComponent$1(it), find$1, replacer);
	};

	var URLSearchParamsIterator = createIteratorConstructor(function Iterator(params, kind) {
	  setInternalState$1(this, {
	    type: URL_SEARCH_PARAMS_ITERATOR,
	    iterator: getIterator(getInternalParamsState(params).entries),
	    kind: kind
	  });
	}, 'Iterator', function next() {
	  var state = getInternalIteratorState(this);
	  var kind = state.kind;
	  var step = state.iterator.next();
	  var entry = step.value;

	  if (!step.done) {
	    step.value = kind === 'keys' ? entry.key : kind === 'values' ? entry.value : [entry.key, entry.value];
	  }

	  return step;
	}, true);

	var URLSearchParamsState = function URLSearchParamsState(init) {
	  this.entries = [];
	  this.url = null;

	  if (init !== undefined) {
	    if (isObject(init)) this.parseObject(init);else this.parseQuery(typeof init == 'string' ? charAt$1(init, 0) === '?' ? stringSlice$1(init, 1) : init : $toString$1(init));
	  }
	};

	URLSearchParamsState.prototype = {
	  type: URL_SEARCH_PARAMS,
	  bindURL: function bindURL(url) {
	    this.url = url;
	    this.update();
	  },
	  parseObject: function parseObject(object) {
	    var iteratorMethod = getIteratorMethod(object);
	    var iterator, next, step, entryIterator, entryNext, first, second;

	    if (iteratorMethod) {
	      iterator = getIterator(object, iteratorMethod);
	      next = iterator.next;

	      while (!(step = call$1(next, iterator)).done) {
	        entryIterator = getIterator(anObject(step.value));
	        entryNext = entryIterator.next;
	        if ((first = call$1(entryNext, entryIterator)).done || (second = call$1(entryNext, entryIterator)).done || !call$1(entryNext, entryIterator).done) throw TypeError$2('Expected sequence with length 2');
	        push$1(this.entries, {
	          key: $toString$1(first.value),
	          value: $toString$1(second.value)
	        });
	      }
	    } else for (var key in object) {
	      if (hasOwn$1(object, key)) {
	        push$1(this.entries, {
	          key: key,
	          value: $toString$1(object[key])
	        });
	      }
	    }
	  },
	  parseQuery: function parseQuery(query) {
	    if (query) {
	      var attributes = split$1(query, '&');
	      var index = 0;
	      var attribute, entry;

	      while (index < attributes.length) {
	        attribute = attributes[index++];

	        if (attribute.length) {
	          entry = split$1(attribute, '=');
	          push$1(this.entries, {
	            key: deserialize(shift$1(entry)),
	            value: deserialize(join$1(entry, '='))
	          });
	        }
	      }
	    }
	  },
	  serialize: function serialize() {
	    var entries = this.entries;
	    var result = [];
	    var index = 0;
	    var entry;

	    while (index < entries.length) {
	      entry = entries[index++];
	      push$1(result, _serialize(entry.key) + '=' + _serialize(entry.value));
	    }

	    return join$1(result, '&');
	  },
	  update: function update() {
	    this.entries.length = 0;
	    this.parseQuery(this.url.query);
	  },
	  updateURL: function updateURL() {
	    if (this.url) this.url.update();
	  }
	}; // `URLSearchParams` constructor
	// https://url.spec.whatwg.org/#interface-urlsearchparams

	var URLSearchParamsConstructor = function
	  /* init */
	URLSearchParams() {
	  anInstance$1(this, URLSearchParamsPrototype);
	  var init = arguments.length > 0 ? arguments[0] : undefined;
	  setInternalState$1(this, new URLSearchParamsState(init));
	};

	var URLSearchParamsPrototype = URLSearchParamsConstructor.prototype;
	redefineAll(URLSearchParamsPrototype, {
	  // `URLSearchParams.prototype.append` method
	  // https://url.spec.whatwg.org/#dom-urlsearchparams-append
	  append: function append(name, value) {
	    validateArgumentsLength$1(arguments.length, 2);
	    var state = getInternalParamsState(this);
	    push$1(state.entries, {
	      key: $toString$1(name),
	      value: $toString$1(value)
	    });
	    state.updateURL();
	  },
	  // `URLSearchParams.prototype.delete` method
	  // https://url.spec.whatwg.org/#dom-urlsearchparams-delete
	  'delete': function _delete(name) {
	    validateArgumentsLength$1(arguments.length, 1);
	    var state = getInternalParamsState(this);
	    var entries = state.entries;
	    var key = $toString$1(name);
	    var index = 0;

	    while (index < entries.length) {
	      if (entries[index].key === key) splice(entries, index, 1);else index++;
	    }

	    state.updateURL();
	  },
	  // `URLSearchParams.prototype.get` method
	  // https://url.spec.whatwg.org/#dom-urlsearchparams-get
	  get: function get(name) {
	    validateArgumentsLength$1(arguments.length, 1);
	    var entries = getInternalParamsState(this).entries;
	    var key = $toString$1(name);
	    var index = 0;

	    for (; index < entries.length; index++) {
	      if (entries[index].key === key) return entries[index].value;
	    }

	    return null;
	  },
	  // `URLSearchParams.prototype.getAll` method
	  // https://url.spec.whatwg.org/#dom-urlsearchparams-getall
	  getAll: function getAll(name) {
	    validateArgumentsLength$1(arguments.length, 1);
	    var entries = getInternalParamsState(this).entries;
	    var key = $toString$1(name);
	    var result = [];
	    var index = 0;

	    for (; index < entries.length; index++) {
	      if (entries[index].key === key) push$1(result, entries[index].value);
	    }

	    return result;
	  },
	  // `URLSearchParams.prototype.has` method
	  // https://url.spec.whatwg.org/#dom-urlsearchparams-has
	  has: function has(name) {
	    validateArgumentsLength$1(arguments.length, 1);
	    var entries = getInternalParamsState(this).entries;
	    var key = $toString$1(name);
	    var index = 0;

	    while (index < entries.length) {
	      if (entries[index++].key === key) return true;
	    }

	    return false;
	  },
	  // `URLSearchParams.prototype.set` method
	  // https://url.spec.whatwg.org/#dom-urlsearchparams-set
	  set: function set(name, value) {
	    validateArgumentsLength$1(arguments.length, 1);
	    var state = getInternalParamsState(this);
	    var entries = state.entries;
	    var found = false;
	    var key = $toString$1(name);
	    var val = $toString$1(value);
	    var index = 0;
	    var entry;

	    for (; index < entries.length; index++) {
	      entry = entries[index];

	      if (entry.key === key) {
	        if (found) splice(entries, index--, 1);else {
	          found = true;
	          entry.value = val;
	        }
	      }
	    }

	    if (!found) push$1(entries, {
	      key: key,
	      value: val
	    });
	    state.updateURL();
	  },
	  // `URLSearchParams.prototype.sort` method
	  // https://url.spec.whatwg.org/#dom-urlsearchparams-sort
	  sort: function sort() {
	    var state = getInternalParamsState(this);
	    arraySort(state.entries, function (a, b) {
	      return a.key > b.key ? 1 : -1;
	    });
	    state.updateURL();
	  },
	  // `URLSearchParams.prototype.forEach` method
	  forEach: function forEach(callback
	  /* , thisArg */
	  ) {
	    var entries = getInternalParamsState(this).entries;
	    var boundFunction = bind$1(callback, arguments.length > 1 ? arguments[1] : undefined);
	    var index = 0;
	    var entry;

	    while (index < entries.length) {
	      entry = entries[index++];
	      boundFunction(entry.value, entry.key, this);
	    }
	  },
	  // `URLSearchParams.prototype.keys` method
	  keys: function keys() {
	    return new URLSearchParamsIterator(this, 'keys');
	  },
	  // `URLSearchParams.prototype.values` method
	  values: function values() {
	    return new URLSearchParamsIterator(this, 'values');
	  },
	  // `URLSearchParams.prototype.entries` method
	  entries: function entries() {
	    return new URLSearchParamsIterator(this, 'entries');
	  }
	}, {
	  enumerable: true
	}); // `URLSearchParams.prototype[@@iterator]` method

	redefine$1(URLSearchParamsPrototype, ITERATOR, URLSearchParamsPrototype.entries, {
	  name: 'entries'
	}); // `URLSearchParams.prototype.toString` method
	// https://url.spec.whatwg.org/#urlsearchparams-stringification-behavior

	redefine$1(URLSearchParamsPrototype, 'toString', function toString() {
	  return getInternalParamsState(this).serialize();
	}, {
	  enumerable: true
	});
	setToStringTag$1(URLSearchParamsConstructor, URL_SEARCH_PARAMS);
	$$3({
	  global: true,
	  forced: !USE_NATIVE_URL$1
	}, {
	  URLSearchParams: URLSearchParamsConstructor
	}); // Wrap `fetch` and `Request` for correct work with polyfilled `URLSearchParams`

	if (!USE_NATIVE_URL$1 && isCallable(Headers)) {
	  var headersHas = uncurryThis$1(HeadersPrototype.has);
	  var headersSet = uncurryThis$1(HeadersPrototype.set);

	  var wrapRequestOptions = function wrapRequestOptions(init) {
	    if (isObject(init)) {
	      var body = init.body;
	      var headers;

	      if (classof(body) === URL_SEARCH_PARAMS) {
	        headers = init.headers ? new Headers(init.headers) : new Headers();

	        if (!headersHas(headers, 'content-type')) {
	          headersSet(headers, 'content-type', 'application/x-www-form-urlencoded;charset=UTF-8');
	        }

	        return create$1(init, {
	          body: createPropertyDescriptor(0, $toString$1(body)),
	          headers: createPropertyDescriptor(0, headers)
	        });
	      }
	    }

	    return init;
	  };

	  if (isCallable(n$Fetch)) {
	    $$3({
	      global: true,
	      enumerable: true,
	      forced: true
	    }, {
	      fetch: function fetch(input
	      /* , init */
	      ) {
	        return n$Fetch(input, arguments.length > 1 ? wrapRequestOptions(arguments[1]) : {});
	      }
	    });
	  }

	  if (isCallable(N$Request)) {
	    var RequestConstructor = function Request(input
	    /* , init */
	    ) {
	      anInstance$1(this, RequestPrototype);
	      return new N$Request(input, arguments.length > 1 ? wrapRequestOptions(arguments[1]) : {});
	    };

	    RequestPrototype.constructor = RequestConstructor;
	    RequestConstructor.prototype = RequestPrototype;
	    $$3({
	      global: true,
	      forced: true
	    }, {
	      Request: RequestConstructor
	    });
	  }
	}

	var web_urlSearchParams = {
	  URLSearchParams: URLSearchParamsConstructor,
	  getState: getInternalParamsState
	};

	var $$2 = _export;
	var DESCRIPTORS = descriptors;
	var USE_NATIVE_URL = nativeUrl;
	var global$1 = global$1B;
	var bind = functionBindContext;
	var uncurryThis = functionUncurryThis;
	var defineProperties = objectDefineProperties.f;
	var redefine = redefine$j.exports;
	var anInstance = anInstance$a;
	var hasOwn = hasOwnProperty_1;
	var assign = objectAssign;
	var arrayFrom = arrayFrom$1;
	var arraySlice = arraySliceSimple;
	var codeAt = stringMultibyte.codeAt;
	var toASCII = stringPunycodeToAscii;
	var $toString = toString$p;
	var setToStringTag = setToStringTag$c;
	var validateArgumentsLength = validateArgumentsLength$5;
	var URLSearchParamsModule = web_urlSearchParams;
	var InternalStateModule = internalState;
	var setInternalState = InternalStateModule.set;
	var getInternalURLState = InternalStateModule.getterFor('URL');
	var URLSearchParams$1 = URLSearchParamsModule.URLSearchParams;
	var getInternalSearchParamsState = URLSearchParamsModule.getState;
	var NativeURL = global$1.URL;
	var TypeError$1 = global$1.TypeError;
	var parseInt$1 = global$1.parseInt;
	var floor = Math.floor;
	var pow = Math.pow;
	var charAt = uncurryThis(''.charAt);
	var exec = uncurryThis(/./.exec);
	var join = uncurryThis([].join);
	var numberToString = uncurryThis(1.0.toString);
	var pop = uncurryThis([].pop);
	var push = uncurryThis([].push);
	var replace = uncurryThis(''.replace);
	var shift = uncurryThis([].shift);
	var split = uncurryThis(''.split);
	var stringSlice = uncurryThis(''.slice);
	var toLowerCase = uncurryThis(''.toLowerCase);
	var unshift = uncurryThis([].unshift);
	var INVALID_AUTHORITY = 'Invalid authority';
	var INVALID_SCHEME = 'Invalid scheme';
	var INVALID_HOST = 'Invalid host';
	var INVALID_PORT = 'Invalid port';
	var ALPHA = /[a-z]/i; // eslint-disable-next-line regexp/no-obscure-range -- safe

	var ALPHANUMERIC = /[\d+-.a-z]/i;
	var DIGIT = /\d/;
	var HEX_START = /^0x/i;
	var OCT = /^[0-7]+$/;
	var DEC = /^\d+$/;
	var HEX = /^[\da-f]+$/i;
	/* eslint-disable regexp/no-control-character -- safe */

	var FORBIDDEN_HOST_CODE_POINT = /[\0\t\n\r #%/:<>?@[\\\]^|]/;
	var FORBIDDEN_HOST_CODE_POINT_EXCLUDING_PERCENT = /[\0\t\n\r #/:<>?@[\\\]^|]/;
	var LEADING_AND_TRAILING_C0_CONTROL_OR_SPACE = /^[\u0000-\u0020]+|[\u0000-\u0020]+$/g;
	var TAB_AND_NEW_LINE = /[\t\n\r]/g;
	/* eslint-enable regexp/no-control-character -- safe */

	var EOF; // https://url.spec.whatwg.org/#ipv4-number-parser

	var parseIPv4 = function parseIPv4(input) {
	  var parts = split(input, '.');
	  var partsLength, numbers, index, part, radix, number, ipv4;

	  if (parts.length && parts[parts.length - 1] == '') {
	    parts.length--;
	  }

	  partsLength = parts.length;
	  if (partsLength > 4) return input;
	  numbers = [];

	  for (index = 0; index < partsLength; index++) {
	    part = parts[index];
	    if (part == '') return input;
	    radix = 10;

	    if (part.length > 1 && charAt(part, 0) == '0') {
	      radix = exec(HEX_START, part) ? 16 : 8;
	      part = stringSlice(part, radix == 8 ? 1 : 2);
	    }

	    if (part === '') {
	      number = 0;
	    } else {
	      if (!exec(radix == 10 ? DEC : radix == 8 ? OCT : HEX, part)) return input;
	      number = parseInt$1(part, radix);
	    }

	    push(numbers, number);
	  }

	  for (index = 0; index < partsLength; index++) {
	    number = numbers[index];

	    if (index == partsLength - 1) {
	      if (number >= pow(256, 5 - partsLength)) return null;
	    } else if (number > 255) return null;
	  }

	  ipv4 = pop(numbers);

	  for (index = 0; index < numbers.length; index++) {
	    ipv4 += numbers[index] * pow(256, 3 - index);
	  }

	  return ipv4;
	}; // https://url.spec.whatwg.org/#concept-ipv6-parser
	// eslint-disable-next-line max-statements -- TODO


	var parseIPv6 = function parseIPv6(input) {
	  var address = [0, 0, 0, 0, 0, 0, 0, 0];
	  var pieceIndex = 0;
	  var compress = null;
	  var pointer = 0;
	  var value, length, numbersSeen, ipv4Piece, number, swaps, swap;

	  var chr = function chr() {
	    return charAt(input, pointer);
	  };

	  if (chr() == ':') {
	    if (charAt(input, 1) != ':') return;
	    pointer += 2;
	    pieceIndex++;
	    compress = pieceIndex;
	  }

	  while (chr()) {
	    if (pieceIndex == 8) return;

	    if (chr() == ':') {
	      if (compress !== null) return;
	      pointer++;
	      pieceIndex++;
	      compress = pieceIndex;
	      continue;
	    }

	    value = length = 0;

	    while (length < 4 && exec(HEX, chr())) {
	      value = value * 16 + parseInt$1(chr(), 16);
	      pointer++;
	      length++;
	    }

	    if (chr() == '.') {
	      if (length == 0) return;
	      pointer -= length;
	      if (pieceIndex > 6) return;
	      numbersSeen = 0;

	      while (chr()) {
	        ipv4Piece = null;

	        if (numbersSeen > 0) {
	          if (chr() == '.' && numbersSeen < 4) pointer++;else return;
	        }

	        if (!exec(DIGIT, chr())) return;

	        while (exec(DIGIT, chr())) {
	          number = parseInt$1(chr(), 10);
	          if (ipv4Piece === null) ipv4Piece = number;else if (ipv4Piece == 0) return;else ipv4Piece = ipv4Piece * 10 + number;
	          if (ipv4Piece > 255) return;
	          pointer++;
	        }

	        address[pieceIndex] = address[pieceIndex] * 256 + ipv4Piece;
	        numbersSeen++;
	        if (numbersSeen == 2 || numbersSeen == 4) pieceIndex++;
	      }

	      if (numbersSeen != 4) return;
	      break;
	    } else if (chr() == ':') {
	      pointer++;
	      if (!chr()) return;
	    } else if (chr()) return;

	    address[pieceIndex++] = value;
	  }

	  if (compress !== null) {
	    swaps = pieceIndex - compress;
	    pieceIndex = 7;

	    while (pieceIndex != 0 && swaps > 0) {
	      swap = address[pieceIndex];
	      address[pieceIndex--] = address[compress + swaps - 1];
	      address[compress + --swaps] = swap;
	    }
	  } else if (pieceIndex != 8) return;

	  return address;
	};

	var findLongestZeroSequence = function findLongestZeroSequence(ipv6) {
	  var maxIndex = null;
	  var maxLength = 1;
	  var currStart = null;
	  var currLength = 0;
	  var index = 0;

	  for (; index < 8; index++) {
	    if (ipv6[index] !== 0) {
	      if (currLength > maxLength) {
	        maxIndex = currStart;
	        maxLength = currLength;
	      }

	      currStart = null;
	      currLength = 0;
	    } else {
	      if (currStart === null) currStart = index;
	      ++currLength;
	    }
	  }

	  if (currLength > maxLength) {
	    maxIndex = currStart;
	    maxLength = currLength;
	  }

	  return maxIndex;
	}; // https://url.spec.whatwg.org/#host-serializing


	var serializeHost = function serializeHost(host) {
	  var result, index, compress, ignore0; // ipv4

	  if (typeof host == 'number') {
	    result = [];

	    for (index = 0; index < 4; index++) {
	      unshift(result, host % 256);
	      host = floor(host / 256);
	    }

	    return join(result, '.'); // ipv6
	  } else if (_typeof(host) == 'object') {
	    result = '';
	    compress = findLongestZeroSequence(host);

	    for (index = 0; index < 8; index++) {
	      if (ignore0 && host[index] === 0) continue;
	      if (ignore0) ignore0 = false;

	      if (compress === index) {
	        result += index ? ':' : '::';
	        ignore0 = true;
	      } else {
	        result += numberToString(host[index], 16);
	        if (index < 7) result += ':';
	      }
	    }

	    return '[' + result + ']';
	  }

	  return host;
	};

	var C0ControlPercentEncodeSet = {};
	var fragmentPercentEncodeSet = assign({}, C0ControlPercentEncodeSet, {
	  ' ': 1,
	  '"': 1,
	  '<': 1,
	  '>': 1,
	  '`': 1
	});
	var pathPercentEncodeSet = assign({}, fragmentPercentEncodeSet, {
	  '#': 1,
	  '?': 1,
	  '{': 1,
	  '}': 1
	});
	var userinfoPercentEncodeSet = assign({}, pathPercentEncodeSet, {
	  '/': 1,
	  ':': 1,
	  ';': 1,
	  '=': 1,
	  '@': 1,
	  '[': 1,
	  '\\': 1,
	  ']': 1,
	  '^': 1,
	  '|': 1
	});

	var percentEncode = function percentEncode(chr, set) {
	  var code = codeAt(chr, 0);
	  return code > 0x20 && code < 0x7F && !hasOwn(set, chr) ? chr : encodeURIComponent(chr);
	}; // https://url.spec.whatwg.org/#special-scheme


	var specialSchemes = {
	  ftp: 21,
	  file: null,
	  http: 80,
	  https: 443,
	  ws: 80,
	  wss: 443
	}; // https://url.spec.whatwg.org/#windows-drive-letter

	var isWindowsDriveLetter = function isWindowsDriveLetter(string, normalized) {
	  var second;
	  return string.length == 2 && exec(ALPHA, charAt(string, 0)) && ((second = charAt(string, 1)) == ':' || !normalized && second == '|');
	}; // https://url.spec.whatwg.org/#start-with-a-windows-drive-letter


	var startsWithWindowsDriveLetter = function startsWithWindowsDriveLetter(string) {
	  var third;
	  return string.length > 1 && isWindowsDriveLetter(stringSlice(string, 0, 2)) && (string.length == 2 || (third = charAt(string, 2)) === '/' || third === '\\' || third === '?' || third === '#');
	}; // https://url.spec.whatwg.org/#single-dot-path-segment


	var isSingleDot = function isSingleDot(segment) {
	  return segment === '.' || toLowerCase(segment) === '%2e';
	}; // https://url.spec.whatwg.org/#double-dot-path-segment


	var isDoubleDot = function isDoubleDot(segment) {
	  segment = toLowerCase(segment);
	  return segment === '..' || segment === '%2e.' || segment === '.%2e' || segment === '%2e%2e';
	}; // States:


	var SCHEME_START = {};
	var SCHEME = {};
	var NO_SCHEME = {};
	var SPECIAL_RELATIVE_OR_AUTHORITY = {};
	var PATH_OR_AUTHORITY = {};
	var RELATIVE = {};
	var RELATIVE_SLASH = {};
	var SPECIAL_AUTHORITY_SLASHES = {};
	var SPECIAL_AUTHORITY_IGNORE_SLASHES = {};
	var AUTHORITY = {};
	var HOST = {};
	var HOSTNAME = {};
	var PORT = {};
	var FILE = {};
	var FILE_SLASH = {};
	var FILE_HOST = {};
	var PATH_START = {};
	var PATH = {};
	var CANNOT_BE_A_BASE_URL_PATH = {};
	var QUERY = {};
	var FRAGMENT = {};

	var URLState = function URLState(url, isBase, base) {
	  var urlString = $toString(url);
	  var baseState, failure, searchParams;

	  if (isBase) {
	    failure = this.parse(urlString);
	    if (failure) throw TypeError$1(failure);
	    this.searchParams = null;
	  } else {
	    if (base !== undefined) baseState = new URLState(base, true);
	    failure = this.parse(urlString, null, baseState);
	    if (failure) throw TypeError$1(failure);
	    searchParams = getInternalSearchParamsState(new URLSearchParams$1());
	    searchParams.bindURL(this);
	    this.searchParams = searchParams;
	  }
	};

	URLState.prototype = {
	  type: 'URL',
	  // https://url.spec.whatwg.org/#url-parsing
	  // eslint-disable-next-line max-statements -- TODO
	  parse: function parse(input, stateOverride, base) {
	    var url = this;
	    var state = stateOverride || SCHEME_START;
	    var pointer = 0;
	    var buffer = '';
	    var seenAt = false;
	    var seenBracket = false;
	    var seenPasswordToken = false;
	    var codePoints, chr, bufferCodePoints, failure;
	    input = $toString(input);

	    if (!stateOverride) {
	      url.scheme = '';
	      url.username = '';
	      url.password = '';
	      url.host = null;
	      url.port = null;
	      url.path = [];
	      url.query = null;
	      url.fragment = null;
	      url.cannotBeABaseURL = false;
	      input = replace(input, LEADING_AND_TRAILING_C0_CONTROL_OR_SPACE, '');
	    }

	    input = replace(input, TAB_AND_NEW_LINE, '');
	    codePoints = arrayFrom(input);

	    while (pointer <= codePoints.length) {
	      chr = codePoints[pointer];

	      switch (state) {
	        case SCHEME_START:
	          if (chr && exec(ALPHA, chr)) {
	            buffer += toLowerCase(chr);
	            state = SCHEME;
	          } else if (!stateOverride) {
	            state = NO_SCHEME;
	            continue;
	          } else return INVALID_SCHEME;

	          break;

	        case SCHEME:
	          if (chr && (exec(ALPHANUMERIC, chr) || chr == '+' || chr == '-' || chr == '.')) {
	            buffer += toLowerCase(chr);
	          } else if (chr == ':') {
	            if (stateOverride && (url.isSpecial() != hasOwn(specialSchemes, buffer) || buffer == 'file' && (url.includesCredentials() || url.port !== null) || url.scheme == 'file' && !url.host)) return;
	            url.scheme = buffer;

	            if (stateOverride) {
	              if (url.isSpecial() && specialSchemes[url.scheme] == url.port) url.port = null;
	              return;
	            }

	            buffer = '';

	            if (url.scheme == 'file') {
	              state = FILE;
	            } else if (url.isSpecial() && base && base.scheme == url.scheme) {
	              state = SPECIAL_RELATIVE_OR_AUTHORITY;
	            } else if (url.isSpecial()) {
	              state = SPECIAL_AUTHORITY_SLASHES;
	            } else if (codePoints[pointer + 1] == '/') {
	              state = PATH_OR_AUTHORITY;
	              pointer++;
	            } else {
	              url.cannotBeABaseURL = true;
	              push(url.path, '');
	              state = CANNOT_BE_A_BASE_URL_PATH;
	            }
	          } else if (!stateOverride) {
	            buffer = '';
	            state = NO_SCHEME;
	            pointer = 0;
	            continue;
	          } else return INVALID_SCHEME;

	          break;

	        case NO_SCHEME:
	          if (!base || base.cannotBeABaseURL && chr != '#') return INVALID_SCHEME;

	          if (base.cannotBeABaseURL && chr == '#') {
	            url.scheme = base.scheme;
	            url.path = arraySlice(base.path);
	            url.query = base.query;
	            url.fragment = '';
	            url.cannotBeABaseURL = true;
	            state = FRAGMENT;
	            break;
	          }

	          state = base.scheme == 'file' ? FILE : RELATIVE;
	          continue;

	        case SPECIAL_RELATIVE_OR_AUTHORITY:
	          if (chr == '/' && codePoints[pointer + 1] == '/') {
	            state = SPECIAL_AUTHORITY_IGNORE_SLASHES;
	            pointer++;
	          } else {
	            state = RELATIVE;
	            continue;
	          }

	          break;

	        case PATH_OR_AUTHORITY:
	          if (chr == '/') {
	            state = AUTHORITY;
	            break;
	          } else {
	            state = PATH;
	            continue;
	          }

	        case RELATIVE:
	          url.scheme = base.scheme;

	          if (chr == EOF) {
	            url.username = base.username;
	            url.password = base.password;
	            url.host = base.host;
	            url.port = base.port;
	            url.path = arraySlice(base.path);
	            url.query = base.query;
	          } else if (chr == '/' || chr == '\\' && url.isSpecial()) {
	            state = RELATIVE_SLASH;
	          } else if (chr == '?') {
	            url.username = base.username;
	            url.password = base.password;
	            url.host = base.host;
	            url.port = base.port;
	            url.path = arraySlice(base.path);
	            url.query = '';
	            state = QUERY;
	          } else if (chr == '#') {
	            url.username = base.username;
	            url.password = base.password;
	            url.host = base.host;
	            url.port = base.port;
	            url.path = arraySlice(base.path);
	            url.query = base.query;
	            url.fragment = '';
	            state = FRAGMENT;
	          } else {
	            url.username = base.username;
	            url.password = base.password;
	            url.host = base.host;
	            url.port = base.port;
	            url.path = arraySlice(base.path);
	            url.path.length--;
	            state = PATH;
	            continue;
	          }

	          break;

	        case RELATIVE_SLASH:
	          if (url.isSpecial() && (chr == '/' || chr == '\\')) {
	            state = SPECIAL_AUTHORITY_IGNORE_SLASHES;
	          } else if (chr == '/') {
	            state = AUTHORITY;
	          } else {
	            url.username = base.username;
	            url.password = base.password;
	            url.host = base.host;
	            url.port = base.port;
	            state = PATH;
	            continue;
	          }

	          break;

	        case SPECIAL_AUTHORITY_SLASHES:
	          state = SPECIAL_AUTHORITY_IGNORE_SLASHES;
	          if (chr != '/' || charAt(buffer, pointer + 1) != '/') continue;
	          pointer++;
	          break;

	        case SPECIAL_AUTHORITY_IGNORE_SLASHES:
	          if (chr != '/' && chr != '\\') {
	            state = AUTHORITY;
	            continue;
	          }

	          break;

	        case AUTHORITY:
	          if (chr == '@') {
	            if (seenAt) buffer = '%40' + buffer;
	            seenAt = true;
	            bufferCodePoints = arrayFrom(buffer);

	            for (var i = 0; i < bufferCodePoints.length; i++) {
	              var codePoint = bufferCodePoints[i];

	              if (codePoint == ':' && !seenPasswordToken) {
	                seenPasswordToken = true;
	                continue;
	              }

	              var encodedCodePoints = percentEncode(codePoint, userinfoPercentEncodeSet);
	              if (seenPasswordToken) url.password += encodedCodePoints;else url.username += encodedCodePoints;
	            }

	            buffer = '';
	          } else if (chr == EOF || chr == '/' || chr == '?' || chr == '#' || chr == '\\' && url.isSpecial()) {
	            if (seenAt && buffer == '') return INVALID_AUTHORITY;
	            pointer -= arrayFrom(buffer).length + 1;
	            buffer = '';
	            state = HOST;
	          } else buffer += chr;

	          break;

	        case HOST:
	        case HOSTNAME:
	          if (stateOverride && url.scheme == 'file') {
	            state = FILE_HOST;
	            continue;
	          } else if (chr == ':' && !seenBracket) {
	            if (buffer == '') return INVALID_HOST;
	            failure = url.parseHost(buffer);
	            if (failure) return failure;
	            buffer = '';
	            state = PORT;
	            if (stateOverride == HOSTNAME) return;
	          } else if (chr == EOF || chr == '/' || chr == '?' || chr == '#' || chr == '\\' && url.isSpecial()) {
	            if (url.isSpecial() && buffer == '') return INVALID_HOST;
	            if (stateOverride && buffer == '' && (url.includesCredentials() || url.port !== null)) return;
	            failure = url.parseHost(buffer);
	            if (failure) return failure;
	            buffer = '';
	            state = PATH_START;
	            if (stateOverride) return;
	            continue;
	          } else {
	            if (chr == '[') seenBracket = true;else if (chr == ']') seenBracket = false;
	            buffer += chr;
	          }

	          break;

	        case PORT:
	          if (exec(DIGIT, chr)) {
	            buffer += chr;
	          } else if (chr == EOF || chr == '/' || chr == '?' || chr == '#' || chr == '\\' && url.isSpecial() || stateOverride) {
	            if (buffer != '') {
	              var port = parseInt$1(buffer, 10);
	              if (port > 0xFFFF) return INVALID_PORT;
	              url.port = url.isSpecial() && port === specialSchemes[url.scheme] ? null : port;
	              buffer = '';
	            }

	            if (stateOverride) return;
	            state = PATH_START;
	            continue;
	          } else return INVALID_PORT;

	          break;

	        case FILE:
	          url.scheme = 'file';
	          if (chr == '/' || chr == '\\') state = FILE_SLASH;else if (base && base.scheme == 'file') {
	            if (chr == EOF) {
	              url.host = base.host;
	              url.path = arraySlice(base.path);
	              url.query = base.query;
	            } else if (chr == '?') {
	              url.host = base.host;
	              url.path = arraySlice(base.path);
	              url.query = '';
	              state = QUERY;
	            } else if (chr == '#') {
	              url.host = base.host;
	              url.path = arraySlice(base.path);
	              url.query = base.query;
	              url.fragment = '';
	              state = FRAGMENT;
	            } else {
	              if (!startsWithWindowsDriveLetter(join(arraySlice(codePoints, pointer), ''))) {
	                url.host = base.host;
	                url.path = arraySlice(base.path);
	                url.shortenPath();
	              }

	              state = PATH;
	              continue;
	            }
	          } else {
	            state = PATH;
	            continue;
	          }
	          break;

	        case FILE_SLASH:
	          if (chr == '/' || chr == '\\') {
	            state = FILE_HOST;
	            break;
	          }

	          if (base && base.scheme == 'file' && !startsWithWindowsDriveLetter(join(arraySlice(codePoints, pointer), ''))) {
	            if (isWindowsDriveLetter(base.path[0], true)) push(url.path, base.path[0]);else url.host = base.host;
	          }

	          state = PATH;
	          continue;

	        case FILE_HOST:
	          if (chr == EOF || chr == '/' || chr == '\\' || chr == '?' || chr == '#') {
	            if (!stateOverride && isWindowsDriveLetter(buffer)) {
	              state = PATH;
	            } else if (buffer == '') {
	              url.host = '';
	              if (stateOverride) return;
	              state = PATH_START;
	            } else {
	              failure = url.parseHost(buffer);
	              if (failure) return failure;
	              if (url.host == 'localhost') url.host = '';
	              if (stateOverride) return;
	              buffer = '';
	              state = PATH_START;
	            }

	            continue;
	          } else buffer += chr;

	          break;

	        case PATH_START:
	          if (url.isSpecial()) {
	            state = PATH;
	            if (chr != '/' && chr != '\\') continue;
	          } else if (!stateOverride && chr == '?') {
	            url.query = '';
	            state = QUERY;
	          } else if (!stateOverride && chr == '#') {
	            url.fragment = '';
	            state = FRAGMENT;
	          } else if (chr != EOF) {
	            state = PATH;
	            if (chr != '/') continue;
	          }

	          break;

	        case PATH:
	          if (chr == EOF || chr == '/' || chr == '\\' && url.isSpecial() || !stateOverride && (chr == '?' || chr == '#')) {
	            if (isDoubleDot(buffer)) {
	              url.shortenPath();

	              if (chr != '/' && !(chr == '\\' && url.isSpecial())) {
	                push(url.path, '');
	              }
	            } else if (isSingleDot(buffer)) {
	              if (chr != '/' && !(chr == '\\' && url.isSpecial())) {
	                push(url.path, '');
	              }
	            } else {
	              if (url.scheme == 'file' && !url.path.length && isWindowsDriveLetter(buffer)) {
	                if (url.host) url.host = '';
	                buffer = charAt(buffer, 0) + ':'; // normalize windows drive letter
	              }

	              push(url.path, buffer);
	            }

	            buffer = '';

	            if (url.scheme == 'file' && (chr == EOF || chr == '?' || chr == '#')) {
	              while (url.path.length > 1 && url.path[0] === '') {
	                shift(url.path);
	              }
	            }

	            if (chr == '?') {
	              url.query = '';
	              state = QUERY;
	            } else if (chr == '#') {
	              url.fragment = '';
	              state = FRAGMENT;
	            }
	          } else {
	            buffer += percentEncode(chr, pathPercentEncodeSet);
	          }

	          break;

	        case CANNOT_BE_A_BASE_URL_PATH:
	          if (chr == '?') {
	            url.query = '';
	            state = QUERY;
	          } else if (chr == '#') {
	            url.fragment = '';
	            state = FRAGMENT;
	          } else if (chr != EOF) {
	            url.path[0] += percentEncode(chr, C0ControlPercentEncodeSet);
	          }

	          break;

	        case QUERY:
	          if (!stateOverride && chr == '#') {
	            url.fragment = '';
	            state = FRAGMENT;
	          } else if (chr != EOF) {
	            if (chr == "'" && url.isSpecial()) url.query += '%27';else if (chr == '#') url.query += '%23';else url.query += percentEncode(chr, C0ControlPercentEncodeSet);
	          }

	          break;

	        case FRAGMENT:
	          if (chr != EOF) url.fragment += percentEncode(chr, fragmentPercentEncodeSet);
	          break;
	      }

	      pointer++;
	    }
	  },
	  // https://url.spec.whatwg.org/#host-parsing
	  parseHost: function parseHost(input) {
	    var result, codePoints, index;

	    if (charAt(input, 0) == '[') {
	      if (charAt(input, input.length - 1) != ']') return INVALID_HOST;
	      result = parseIPv6(stringSlice(input, 1, -1));
	      if (!result) return INVALID_HOST;
	      this.host = result; // opaque host
	    } else if (!this.isSpecial()) {
	      if (exec(FORBIDDEN_HOST_CODE_POINT_EXCLUDING_PERCENT, input)) return INVALID_HOST;
	      result = '';
	      codePoints = arrayFrom(input);

	      for (index = 0; index < codePoints.length; index++) {
	        result += percentEncode(codePoints[index], C0ControlPercentEncodeSet);
	      }

	      this.host = result;
	    } else {
	      input = toASCII(input);
	      if (exec(FORBIDDEN_HOST_CODE_POINT, input)) return INVALID_HOST;
	      result = parseIPv4(input);
	      if (result === null) return INVALID_HOST;
	      this.host = result;
	    }
	  },
	  // https://url.spec.whatwg.org/#cannot-have-a-username-password-port
	  cannotHaveUsernamePasswordPort: function cannotHaveUsernamePasswordPort() {
	    return !this.host || this.cannotBeABaseURL || this.scheme == 'file';
	  },
	  // https://url.spec.whatwg.org/#include-credentials
	  includesCredentials: function includesCredentials() {
	    return this.username != '' || this.password != '';
	  },
	  // https://url.spec.whatwg.org/#is-special
	  isSpecial: function isSpecial() {
	    return hasOwn(specialSchemes, this.scheme);
	  },
	  // https://url.spec.whatwg.org/#shorten-a-urls-path
	  shortenPath: function shortenPath() {
	    var path = this.path;
	    var pathSize = path.length;

	    if (pathSize && (this.scheme != 'file' || pathSize != 1 || !isWindowsDriveLetter(path[0], true))) {
	      path.length--;
	    }
	  },
	  // https://url.spec.whatwg.org/#concept-url-serializer
	  serialize: function serialize() {
	    var url = this;
	    var scheme = url.scheme;
	    var username = url.username;
	    var password = url.password;
	    var host = url.host;
	    var port = url.port;
	    var path = url.path;
	    var query = url.query;
	    var fragment = url.fragment;
	    var output = scheme + ':';

	    if (host !== null) {
	      output += '//';

	      if (url.includesCredentials()) {
	        output += username + (password ? ':' + password : '') + '@';
	      }

	      output += serializeHost(host);
	      if (port !== null) output += ':' + port;
	    } else if (scheme == 'file') output += '//';

	    output += url.cannotBeABaseURL ? path[0] : path.length ? '/' + join(path, '/') : '';
	    if (query !== null) output += '?' + query;
	    if (fragment !== null) output += '#' + fragment;
	    return output;
	  },
	  // https://url.spec.whatwg.org/#dom-url-href
	  setHref: function setHref(href) {
	    var failure = this.parse(href);
	    if (failure) throw TypeError$1(failure);
	    this.searchParams.update();
	  },
	  // https://url.spec.whatwg.org/#dom-url-origin
	  getOrigin: function getOrigin() {
	    var scheme = this.scheme;
	    var port = this.port;
	    if (scheme == 'blob') try {
	      return new URLConstructor(scheme.path[0]).origin;
	    } catch (error) {
	      return 'null';
	    }
	    if (scheme == 'file' || !this.isSpecial()) return 'null';
	    return scheme + '://' + serializeHost(this.host) + (port !== null ? ':' + port : '');
	  },
	  // https://url.spec.whatwg.org/#dom-url-protocol
	  getProtocol: function getProtocol() {
	    return this.scheme + ':';
	  },
	  setProtocol: function setProtocol(protocol) {
	    this.parse($toString(protocol) + ':', SCHEME_START);
	  },
	  // https://url.spec.whatwg.org/#dom-url-username
	  getUsername: function getUsername() {
	    return this.username;
	  },
	  setUsername: function setUsername(username) {
	    var codePoints = arrayFrom($toString(username));
	    if (this.cannotHaveUsernamePasswordPort()) return;
	    this.username = '';

	    for (var i = 0; i < codePoints.length; i++) {
	      this.username += percentEncode(codePoints[i], userinfoPercentEncodeSet);
	    }
	  },
	  // https://url.spec.whatwg.org/#dom-url-password
	  getPassword: function getPassword() {
	    return this.password;
	  },
	  setPassword: function setPassword(password) {
	    var codePoints = arrayFrom($toString(password));
	    if (this.cannotHaveUsernamePasswordPort()) return;
	    this.password = '';

	    for (var i = 0; i < codePoints.length; i++) {
	      this.password += percentEncode(codePoints[i], userinfoPercentEncodeSet);
	    }
	  },
	  // https://url.spec.whatwg.org/#dom-url-host
	  getHost: function getHost() {
	    var host = this.host;
	    var port = this.port;
	    return host === null ? '' : port === null ? serializeHost(host) : serializeHost(host) + ':' + port;
	  },
	  setHost: function setHost(host) {
	    if (this.cannotBeABaseURL) return;
	    this.parse(host, HOST);
	  },
	  // https://url.spec.whatwg.org/#dom-url-hostname
	  getHostname: function getHostname() {
	    var host = this.host;
	    return host === null ? '' : serializeHost(host);
	  },
	  setHostname: function setHostname(hostname) {
	    if (this.cannotBeABaseURL) return;
	    this.parse(hostname, HOSTNAME);
	  },
	  // https://url.spec.whatwg.org/#dom-url-port
	  getPort: function getPort() {
	    var port = this.port;
	    return port === null ? '' : $toString(port);
	  },
	  setPort: function setPort(port) {
	    if (this.cannotHaveUsernamePasswordPort()) return;
	    port = $toString(port);
	    if (port == '') this.port = null;else this.parse(port, PORT);
	  },
	  // https://url.spec.whatwg.org/#dom-url-pathname
	  getPathname: function getPathname() {
	    var path = this.path;
	    return this.cannotBeABaseURL ? path[0] : path.length ? '/' + join(path, '/') : '';
	  },
	  setPathname: function setPathname(pathname) {
	    if (this.cannotBeABaseURL) return;
	    this.path = [];
	    this.parse(pathname, PATH_START);
	  },
	  // https://url.spec.whatwg.org/#dom-url-search
	  getSearch: function getSearch() {
	    var query = this.query;
	    return query ? '?' + query : '';
	  },
	  setSearch: function setSearch(search) {
	    search = $toString(search);

	    if (search == '') {
	      this.query = null;
	    } else {
	      if ('?' == charAt(search, 0)) search = stringSlice(search, 1);
	      this.query = '';
	      this.parse(search, QUERY);
	    }

	    this.searchParams.update();
	  },
	  // https://url.spec.whatwg.org/#dom-url-searchparams
	  getSearchParams: function getSearchParams() {
	    return this.searchParams.facade;
	  },
	  // https://url.spec.whatwg.org/#dom-url-hash
	  getHash: function getHash() {
	    var fragment = this.fragment;
	    return fragment ? '#' + fragment : '';
	  },
	  setHash: function setHash(hash) {
	    hash = $toString(hash);

	    if (hash == '') {
	      this.fragment = null;
	      return;
	    }

	    if ('#' == charAt(hash, 0)) hash = stringSlice(hash, 1);
	    this.fragment = '';
	    this.parse(hash, FRAGMENT);
	  },
	  update: function update() {
	    this.query = this.searchParams.serialize() || null;
	  }
	}; // `URL` constructor
	// https://url.spec.whatwg.org/#url-class

	var URLConstructor = function URL(url
	/* , base */
	) {
	  var that = anInstance(this, URLPrototype);
	  var base = validateArgumentsLength(arguments.length, 1) > 1 ? arguments[1] : undefined;
	  var state = setInternalState(that, new URLState(url, false, base));

	  if (!DESCRIPTORS) {
	    that.href = state.serialize();
	    that.origin = state.getOrigin();
	    that.protocol = state.getProtocol();
	    that.username = state.getUsername();
	    that.password = state.getPassword();
	    that.host = state.getHost();
	    that.hostname = state.getHostname();
	    that.port = state.getPort();
	    that.pathname = state.getPathname();
	    that.search = state.getSearch();
	    that.searchParams = state.getSearchParams();
	    that.hash = state.getHash();
	  }
	};

	var URLPrototype = URLConstructor.prototype;

	var accessorDescriptor = function accessorDescriptor(getter, setter) {
	  return {
	    get: function get() {
	      return getInternalURLState(this)[getter]();
	    },
	    set: setter && function (value) {
	      return getInternalURLState(this)[setter](value);
	    },
	    configurable: true,
	    enumerable: true
	  };
	};

	if (DESCRIPTORS) {
	  defineProperties(URLPrototype, {
	    // `URL.prototype.href` accessors pair
	    // https://url.spec.whatwg.org/#dom-url-href
	    href: accessorDescriptor('serialize', 'setHref'),
	    // `URL.prototype.origin` getter
	    // https://url.spec.whatwg.org/#dom-url-origin
	    origin: accessorDescriptor('getOrigin'),
	    // `URL.prototype.protocol` accessors pair
	    // https://url.spec.whatwg.org/#dom-url-protocol
	    protocol: accessorDescriptor('getProtocol', 'setProtocol'),
	    // `URL.prototype.username` accessors pair
	    // https://url.spec.whatwg.org/#dom-url-username
	    username: accessorDescriptor('getUsername', 'setUsername'),
	    // `URL.prototype.password` accessors pair
	    // https://url.spec.whatwg.org/#dom-url-password
	    password: accessorDescriptor('getPassword', 'setPassword'),
	    // `URL.prototype.host` accessors pair
	    // https://url.spec.whatwg.org/#dom-url-host
	    host: accessorDescriptor('getHost', 'setHost'),
	    // `URL.prototype.hostname` accessors pair
	    // https://url.spec.whatwg.org/#dom-url-hostname
	    hostname: accessorDescriptor('getHostname', 'setHostname'),
	    // `URL.prototype.port` accessors pair
	    // https://url.spec.whatwg.org/#dom-url-port
	    port: accessorDescriptor('getPort', 'setPort'),
	    // `URL.prototype.pathname` accessors pair
	    // https://url.spec.whatwg.org/#dom-url-pathname
	    pathname: accessorDescriptor('getPathname', 'setPathname'),
	    // `URL.prototype.search` accessors pair
	    // https://url.spec.whatwg.org/#dom-url-search
	    search: accessorDescriptor('getSearch', 'setSearch'),
	    // `URL.prototype.searchParams` getter
	    // https://url.spec.whatwg.org/#dom-url-searchparams
	    searchParams: accessorDescriptor('getSearchParams'),
	    // `URL.prototype.hash` accessors pair
	    // https://url.spec.whatwg.org/#dom-url-hash
	    hash: accessorDescriptor('getHash', 'setHash')
	  });
	} // `URL.prototype.toJSON` method
	// https://url.spec.whatwg.org/#dom-url-tojson


	redefine(URLPrototype, 'toJSON', function toJSON() {
	  return getInternalURLState(this).serialize();
	}, {
	  enumerable: true
	}); // `URL.prototype.toString` method
	// https://url.spec.whatwg.org/#URL-stringification-behavior

	redefine(URLPrototype, 'toString', function toString() {
	  return getInternalURLState(this).serialize();
	}, {
	  enumerable: true
	});

	if (NativeURL) {
	  var nativeCreateObjectURL = NativeURL.createObjectURL;
	  var nativeRevokeObjectURL = NativeURL.revokeObjectURL; // `URL.createObjectURL` method
	  // https://developer.mozilla.org/en-US/docs/Web/API/URL/createObjectURL

	  if (nativeCreateObjectURL) redefine(URLConstructor, 'createObjectURL', bind(nativeCreateObjectURL, NativeURL)); // `URL.revokeObjectURL` method
	  // https://developer.mozilla.org/en-US/docs/Web/API/URL/revokeObjectURL

	  if (nativeRevokeObjectURL) redefine(URLConstructor, 'revokeObjectURL', bind(nativeRevokeObjectURL, NativeURL));
	}

	setToStringTag(URLConstructor, 'URL');
	$$2({
	  global: true,
	  forced: !USE_NATIVE_URL,
	  sham: !DESCRIPTORS
	}, {
	  URL: URLConstructor
	});

	var $$1 = _export;
	var call = functionCall; // `URL.prototype.toJSON` method
	// https://url.spec.whatwg.org/#dom-url-tojson

	$$1({
	  target: 'URL',
	  proto: true,
	  enumerable: true
	}, {
	  toJSON: function toJSON() {
	    return call(URL.prototype.toString, this);
	  }
	});

	var runtime = {exports: {}};

	(function (module) {
	  var runtime = function (exports) {

	    var Op = Object.prototype;
	    var hasOwn = Op.hasOwnProperty;
	    var undefined$1; // More compressible than void 0.

	    var $Symbol = typeof Symbol === "function" ? Symbol : {};
	    var iteratorSymbol = $Symbol.iterator || "@@iterator";
	    var asyncIteratorSymbol = $Symbol.asyncIterator || "@@asyncIterator";
	    var toStringTagSymbol = $Symbol.toStringTag || "@@toStringTag";

	    function define(obj, key, value) {
	      Object.defineProperty(obj, key, {
	        value: value,
	        enumerable: true,
	        configurable: true,
	        writable: true
	      });
	      return obj[key];
	    }

	    try {
	      // IE 8 has a broken Object.defineProperty that only works on DOM objects.
	      define({}, "");
	    } catch (err) {
	      define = function define(obj, key, value) {
	        return obj[key] = value;
	      };
	    }

	    function wrap(innerFn, outerFn, self, tryLocsList) {
	      // If outerFn provided and outerFn.prototype is a Generator, then outerFn.prototype instanceof Generator.
	      var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator;
	      var generator = Object.create(protoGenerator.prototype);
	      var context = new Context(tryLocsList || []); // The ._invoke method unifies the implementations of the .next,
	      // .throw, and .return methods.

	      generator._invoke = makeInvokeMethod(innerFn, self, context);
	      return generator;
	    }

	    exports.wrap = wrap; // Try/catch helper to minimize deoptimizations. Returns a completion
	    // record like context.tryEntries[i].completion. This interface could
	    // have been (and was previously) designed to take a closure to be
	    // invoked without arguments, but in all the cases we care about we
	    // already have an existing method we want to call, so there's no need
	    // to create a new function object. We can even get away with assuming
	    // the method takes exactly one argument, since that happens to be true
	    // in every case, so we don't have to touch the arguments object. The
	    // only additional allocation required is the completion record, which
	    // has a stable shape and so hopefully should be cheap to allocate.

	    function tryCatch(fn, obj, arg) {
	      try {
	        return {
	          type: "normal",
	          arg: fn.call(obj, arg)
	        };
	      } catch (err) {
	        return {
	          type: "throw",
	          arg: err
	        };
	      }
	    }

	    var GenStateSuspendedStart = "suspendedStart";
	    var GenStateSuspendedYield = "suspendedYield";
	    var GenStateExecuting = "executing";
	    var GenStateCompleted = "completed"; // Returning this object from the innerFn has the same effect as
	    // breaking out of the dispatch switch statement.

	    var ContinueSentinel = {}; // Dummy constructor functions that we use as the .constructor and
	    // .constructor.prototype properties for functions that return Generator
	    // objects. For full spec compliance, you may wish to configure your
	    // minifier not to mangle the names of these two functions.

	    function Generator() {}

	    function GeneratorFunction() {}

	    function GeneratorFunctionPrototype() {} // This is a polyfill for %IteratorPrototype% for environments that
	    // don't natively support it.


	    var IteratorPrototype = {};
	    define(IteratorPrototype, iteratorSymbol, function () {
	      return this;
	    });
	    var getProto = Object.getPrototypeOf;
	    var NativeIteratorPrototype = getProto && getProto(getProto(values([])));

	    if (NativeIteratorPrototype && NativeIteratorPrototype !== Op && hasOwn.call(NativeIteratorPrototype, iteratorSymbol)) {
	      // This environment has a native %IteratorPrototype%; use it instead
	      // of the polyfill.
	      IteratorPrototype = NativeIteratorPrototype;
	    }

	    var Gp = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(IteratorPrototype);
	    GeneratorFunction.prototype = GeneratorFunctionPrototype;
	    define(Gp, "constructor", GeneratorFunctionPrototype);
	    define(GeneratorFunctionPrototype, "constructor", GeneratorFunction);
	    GeneratorFunction.displayName = define(GeneratorFunctionPrototype, toStringTagSymbol, "GeneratorFunction"); // Helper for defining the .next, .throw, and .return methods of the
	    // Iterator interface in terms of a single ._invoke method.

	    function defineIteratorMethods(prototype) {
	      ["next", "throw", "return"].forEach(function (method) {
	        define(prototype, method, function (arg) {
	          return this._invoke(method, arg);
	        });
	      });
	    }

	    exports.isGeneratorFunction = function (genFun) {
	      var ctor = typeof genFun === "function" && genFun.constructor;
	      return ctor ? ctor === GeneratorFunction || // For the native GeneratorFunction constructor, the best we can
	      // do is to check its .name property.
	      (ctor.displayName || ctor.name) === "GeneratorFunction" : false;
	    };

	    exports.mark = function (genFun) {
	      if (Object.setPrototypeOf) {
	        Object.setPrototypeOf(genFun, GeneratorFunctionPrototype);
	      } else {
	        genFun.__proto__ = GeneratorFunctionPrototype;
	        define(genFun, toStringTagSymbol, "GeneratorFunction");
	      }

	      genFun.prototype = Object.create(Gp);
	      return genFun;
	    }; // Within the body of any async function, `await x` is transformed to
	    // `yield regeneratorRuntime.awrap(x)`, so that the runtime can test
	    // `hasOwn.call(value, "__await")` to determine if the yielded value is
	    // meant to be awaited.


	    exports.awrap = function (arg) {
	      return {
	        __await: arg
	      };
	    };

	    function AsyncIterator(generator, PromiseImpl) {
	      function invoke(method, arg, resolve, reject) {
	        var record = tryCatch(generator[method], generator, arg);

	        if (record.type === "throw") {
	          reject(record.arg);
	        } else {
	          var result = record.arg;
	          var value = result.value;

	          if (value && _typeof(value) === "object" && hasOwn.call(value, "__await")) {
	            return PromiseImpl.resolve(value.__await).then(function (value) {
	              invoke("next", value, resolve, reject);
	            }, function (err) {
	              invoke("throw", err, resolve, reject);
	            });
	          }

	          return PromiseImpl.resolve(value).then(function (unwrapped) {
	            // When a yielded Promise is resolved, its final value becomes
	            // the .value of the Promise<{value,done}> result for the
	            // current iteration.
	            result.value = unwrapped;
	            resolve(result);
	          }, function (error) {
	            // If a rejected Promise was yielded, throw the rejection back
	            // into the async generator function so it can be handled there.
	            return invoke("throw", error, resolve, reject);
	          });
	        }
	      }

	      var previousPromise;

	      function enqueue(method, arg) {
	        function callInvokeWithMethodAndArg() {
	          return new PromiseImpl(function (resolve, reject) {
	            invoke(method, arg, resolve, reject);
	          });
	        }

	        return previousPromise = // If enqueue has been called before, then we want to wait until
	        // all previous Promises have been resolved before calling invoke,
	        // so that results are always delivered in the correct order. If
	        // enqueue has not been called before, then it is important to
	        // call invoke immediately, without waiting on a callback to fire,
	        // so that the async generator function has the opportunity to do
	        // any necessary setup in a predictable way. This predictability
	        // is why the Promise constructor synchronously invokes its
	        // executor callback, and why async functions synchronously
	        // execute code before the first await. Since we implement simple
	        // async functions in terms of async generators, it is especially
	        // important to get this right, even though it requires care.
	        previousPromise ? previousPromise.then(callInvokeWithMethodAndArg, // Avoid propagating failures to Promises returned by later
	        // invocations of the iterator.
	        callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg();
	      } // Define the unified helper method that is used to implement .next,
	      // .throw, and .return (see defineIteratorMethods).


	      this._invoke = enqueue;
	    }

	    defineIteratorMethods(AsyncIterator.prototype);
	    define(AsyncIterator.prototype, asyncIteratorSymbol, function () {
	      return this;
	    });
	    exports.AsyncIterator = AsyncIterator; // Note that simple async functions are implemented on top of
	    // AsyncIterator objects; they just return a Promise for the value of
	    // the final result produced by the iterator.

	    exports.async = function (innerFn, outerFn, self, tryLocsList, PromiseImpl) {
	      if (PromiseImpl === void 0) PromiseImpl = Promise;
	      var iter = new AsyncIterator(wrap(innerFn, outerFn, self, tryLocsList), PromiseImpl);
	      return exports.isGeneratorFunction(outerFn) ? iter // If outerFn is a generator, return the full iterator.
	      : iter.next().then(function (result) {
	        return result.done ? result.value : iter.next();
	      });
	    };

	    function makeInvokeMethod(innerFn, self, context) {
	      var state = GenStateSuspendedStart;
	      return function invoke(method, arg) {
	        if (state === GenStateExecuting) {
	          throw new Error("Generator is already running");
	        }

	        if (state === GenStateCompleted) {
	          if (method === "throw") {
	            throw arg;
	          } // Be forgiving, per 25.3.3.3.3 of the spec:
	          // https://people.mozilla.org/~jorendorff/es6-draft.html#sec-generatorresume


	          return doneResult();
	        }

	        context.method = method;
	        context.arg = arg;

	        while (true) {
	          var delegate = context.delegate;

	          if (delegate) {
	            var delegateResult = maybeInvokeDelegate(delegate, context);

	            if (delegateResult) {
	              if (delegateResult === ContinueSentinel) continue;
	              return delegateResult;
	            }
	          }

	          if (context.method === "next") {
	            // Setting context._sent for legacy support of Babel's
	            // function.sent implementation.
	            context.sent = context._sent = context.arg;
	          } else if (context.method === "throw") {
	            if (state === GenStateSuspendedStart) {
	              state = GenStateCompleted;
	              throw context.arg;
	            }

	            context.dispatchException(context.arg);
	          } else if (context.method === "return") {
	            context.abrupt("return", context.arg);
	          }

	          state = GenStateExecuting;
	          var record = tryCatch(innerFn, self, context);

	          if (record.type === "normal") {
	            // If an exception is thrown from innerFn, we leave state ===
	            // GenStateExecuting and loop back for another invocation.
	            state = context.done ? GenStateCompleted : GenStateSuspendedYield;

	            if (record.arg === ContinueSentinel) {
	              continue;
	            }

	            return {
	              value: record.arg,
	              done: context.done
	            };
	          } else if (record.type === "throw") {
	            state = GenStateCompleted; // Dispatch the exception by looping back around to the
	            // context.dispatchException(context.arg) call above.

	            context.method = "throw";
	            context.arg = record.arg;
	          }
	        }
	      };
	    } // Call delegate.iterator[context.method](context.arg) and handle the
	    // result, either by returning a { value, done } result from the
	    // delegate iterator, or by modifying context.method and context.arg,
	    // setting context.delegate to null, and returning the ContinueSentinel.


	    function maybeInvokeDelegate(delegate, context) {
	      var method = delegate.iterator[context.method];

	      if (method === undefined$1) {
	        // A .throw or .return when the delegate iterator has no .throw
	        // method always terminates the yield* loop.
	        context.delegate = null;

	        if (context.method === "throw") {
	          // Note: ["return"] must be used for ES3 parsing compatibility.
	          if (delegate.iterator["return"]) {
	            // If the delegate iterator has a return method, give it a
	            // chance to clean up.
	            context.method = "return";
	            context.arg = undefined$1;
	            maybeInvokeDelegate(delegate, context);

	            if (context.method === "throw") {
	              // If maybeInvokeDelegate(context) changed context.method from
	              // "return" to "throw", let that override the TypeError below.
	              return ContinueSentinel;
	            }
	          }

	          context.method = "throw";
	          context.arg = new TypeError("The iterator does not provide a 'throw' method");
	        }

	        return ContinueSentinel;
	      }

	      var record = tryCatch(method, delegate.iterator, context.arg);

	      if (record.type === "throw") {
	        context.method = "throw";
	        context.arg = record.arg;
	        context.delegate = null;
	        return ContinueSentinel;
	      }

	      var info = record.arg;

	      if (!info) {
	        context.method = "throw";
	        context.arg = new TypeError("iterator result is not an object");
	        context.delegate = null;
	        return ContinueSentinel;
	      }

	      if (info.done) {
	        // Assign the result of the finished delegate to the temporary
	        // variable specified by delegate.resultName (see delegateYield).
	        context[delegate.resultName] = info.value; // Resume execution at the desired location (see delegateYield).

	        context.next = delegate.nextLoc; // If context.method was "throw" but the delegate handled the
	        // exception, let the outer generator proceed normally. If
	        // context.method was "next", forget context.arg since it has been
	        // "consumed" by the delegate iterator. If context.method was
	        // "return", allow the original .return call to continue in the
	        // outer generator.

	        if (context.method !== "return") {
	          context.method = "next";
	          context.arg = undefined$1;
	        }
	      } else {
	        // Re-yield the result returned by the delegate method.
	        return info;
	      } // The delegate iterator is finished, so forget it and continue with
	      // the outer generator.


	      context.delegate = null;
	      return ContinueSentinel;
	    } // Define Generator.prototype.{next,throw,return} in terms of the
	    // unified ._invoke helper method.


	    defineIteratorMethods(Gp);
	    define(Gp, toStringTagSymbol, "Generator"); // A Generator should always return itself as the iterator object when the
	    // @@iterator function is called on it. Some browsers' implementations of the
	    // iterator prototype chain incorrectly implement this, causing the Generator
	    // object to not be returned from this call. This ensures that doesn't happen.
	    // See https://github.com/facebook/regenerator/issues/274 for more details.

	    define(Gp, iteratorSymbol, function () {
	      return this;
	    });
	    define(Gp, "toString", function () {
	      return "[object Generator]";
	    });

	    function pushTryEntry(locs) {
	      var entry = {
	        tryLoc: locs[0]
	      };

	      if (1 in locs) {
	        entry.catchLoc = locs[1];
	      }

	      if (2 in locs) {
	        entry.finallyLoc = locs[2];
	        entry.afterLoc = locs[3];
	      }

	      this.tryEntries.push(entry);
	    }

	    function resetTryEntry(entry) {
	      var record = entry.completion || {};
	      record.type = "normal";
	      delete record.arg;
	      entry.completion = record;
	    }

	    function Context(tryLocsList) {
	      // The root entry object (effectively a try statement without a catch
	      // or a finally block) gives us a place to store values thrown from
	      // locations where there is no enclosing try statement.
	      this.tryEntries = [{
	        tryLoc: "root"
	      }];
	      tryLocsList.forEach(pushTryEntry, this);
	      this.reset(true);
	    }

	    exports.keys = function (object) {
	      var keys = [];

	      for (var key in object) {
	        keys.push(key);
	      }

	      keys.reverse(); // Rather than returning an object with a next method, we keep
	      // things simple and return the next function itself.

	      return function next() {
	        while (keys.length) {
	          var key = keys.pop();

	          if (key in object) {
	            next.value = key;
	            next.done = false;
	            return next;
	          }
	        } // To avoid creating an additional object, we just hang the .value
	        // and .done properties off the next function object itself. This
	        // also ensures that the minifier will not anonymize the function.


	        next.done = true;
	        return next;
	      };
	    };

	    function values(iterable) {
	      if (iterable) {
	        var iteratorMethod = iterable[iteratorSymbol];

	        if (iteratorMethod) {
	          return iteratorMethod.call(iterable);
	        }

	        if (typeof iterable.next === "function") {
	          return iterable;
	        }

	        if (!isNaN(iterable.length)) {
	          var i = -1,
	              next = function next() {
	            while (++i < iterable.length) {
	              if (hasOwn.call(iterable, i)) {
	                next.value = iterable[i];
	                next.done = false;
	                return next;
	              }
	            }

	            next.value = undefined$1;
	            next.done = true;
	            return next;
	          };

	          return next.next = next;
	        }
	      } // Return an iterator with no values.


	      return {
	        next: doneResult
	      };
	    }

	    exports.values = values;

	    function doneResult() {
	      return {
	        value: undefined$1,
	        done: true
	      };
	    }

	    Context.prototype = {
	      constructor: Context,
	      reset: function reset(skipTempReset) {
	        this.prev = 0;
	        this.next = 0; // Resetting context._sent for legacy support of Babel's
	        // function.sent implementation.

	        this.sent = this._sent = undefined$1;
	        this.done = false;
	        this.delegate = null;
	        this.method = "next";
	        this.arg = undefined$1;
	        this.tryEntries.forEach(resetTryEntry);

	        if (!skipTempReset) {
	          for (var name in this) {
	            // Not sure about the optimal order of these conditions:
	            if (name.charAt(0) === "t" && hasOwn.call(this, name) && !isNaN(+name.slice(1))) {
	              this[name] = undefined$1;
	            }
	          }
	        }
	      },
	      stop: function stop() {
	        this.done = true;
	        var rootEntry = this.tryEntries[0];
	        var rootRecord = rootEntry.completion;

	        if (rootRecord.type === "throw") {
	          throw rootRecord.arg;
	        }

	        return this.rval;
	      },
	      dispatchException: function dispatchException(exception) {
	        if (this.done) {
	          throw exception;
	        }

	        var context = this;

	        function handle(loc, caught) {
	          record.type = "throw";
	          record.arg = exception;
	          context.next = loc;

	          if (caught) {
	            // If the dispatched exception was caught by a catch block,
	            // then let that catch block handle the exception normally.
	            context.method = "next";
	            context.arg = undefined$1;
	          }

	          return !!caught;
	        }

	        for (var i = this.tryEntries.length - 1; i >= 0; --i) {
	          var entry = this.tryEntries[i];
	          var record = entry.completion;

	          if (entry.tryLoc === "root") {
	            // Exception thrown outside of any try block that could handle
	            // it, so set the completion value of the entire function to
	            // throw the exception.
	            return handle("end");
	          }

	          if (entry.tryLoc <= this.prev) {
	            var hasCatch = hasOwn.call(entry, "catchLoc");
	            var hasFinally = hasOwn.call(entry, "finallyLoc");

	            if (hasCatch && hasFinally) {
	              if (this.prev < entry.catchLoc) {
	                return handle(entry.catchLoc, true);
	              } else if (this.prev < entry.finallyLoc) {
	                return handle(entry.finallyLoc);
	              }
	            } else if (hasCatch) {
	              if (this.prev < entry.catchLoc) {
	                return handle(entry.catchLoc, true);
	              }
	            } else if (hasFinally) {
	              if (this.prev < entry.finallyLoc) {
	                return handle(entry.finallyLoc);
	              }
	            } else {
	              throw new Error("try statement without catch or finally");
	            }
	          }
	        }
	      },
	      abrupt: function abrupt(type, arg) {
	        for (var i = this.tryEntries.length - 1; i >= 0; --i) {
	          var entry = this.tryEntries[i];

	          if (entry.tryLoc <= this.prev && hasOwn.call(entry, "finallyLoc") && this.prev < entry.finallyLoc) {
	            var finallyEntry = entry;
	            break;
	          }
	        }

	        if (finallyEntry && (type === "break" || type === "continue") && finallyEntry.tryLoc <= arg && arg <= finallyEntry.finallyLoc) {
	          // Ignore the finally entry if control is not jumping to a
	          // location outside the try/catch block.
	          finallyEntry = null;
	        }

	        var record = finallyEntry ? finallyEntry.completion : {};
	        record.type = type;
	        record.arg = arg;

	        if (finallyEntry) {
	          this.method = "next";
	          this.next = finallyEntry.finallyLoc;
	          return ContinueSentinel;
	        }

	        return this.complete(record);
	      },
	      complete: function complete(record, afterLoc) {
	        if (record.type === "throw") {
	          throw record.arg;
	        }

	        if (record.type === "break" || record.type === "continue") {
	          this.next = record.arg;
	        } else if (record.type === "return") {
	          this.rval = this.arg = record.arg;
	          this.method = "return";
	          this.next = "end";
	        } else if (record.type === "normal" && afterLoc) {
	          this.next = afterLoc;
	        }

	        return ContinueSentinel;
	      },
	      finish: function finish(finallyLoc) {
	        for (var i = this.tryEntries.length - 1; i >= 0; --i) {
	          var entry = this.tryEntries[i];

	          if (entry.finallyLoc === finallyLoc) {
	            this.complete(entry.completion, entry.afterLoc);
	            resetTryEntry(entry);
	            return ContinueSentinel;
	          }
	        }
	      },
	      "catch": function _catch(tryLoc) {
	        for (var i = this.tryEntries.length - 1; i >= 0; --i) {
	          var entry = this.tryEntries[i];

	          if (entry.tryLoc === tryLoc) {
	            var record = entry.completion;

	            if (record.type === "throw") {
	              var thrown = record.arg;
	              resetTryEntry(entry);
	            }

	            return thrown;
	          }
	        } // The context.catch method must only be called with a location
	        // argument that corresponds to a known catch block.


	        throw new Error("illegal catch attempt");
	      },
	      delegateYield: function delegateYield(iterable, resultName, nextLoc) {
	        this.delegate = {
	          iterator: values(iterable),
	          resultName: resultName,
	          nextLoc: nextLoc
	        };

	        if (this.method === "next") {
	          // Deliberately forget the last sent value so that we don't
	          // accidentally pass it on to the delegate.
	          this.arg = undefined$1;
	        }

	        return ContinueSentinel;
	      }
	    }; // Regardless of whether this script is executing as a CommonJS module
	    // or not, return the runtime object so that we can declare the variable
	    // regeneratorRuntime in the outer scope, which allows this module to be
	    // injected easily by `bin/regenerator --include-runtime script.js`.

	    return exports;
	  }( // If this script is executing as a CommonJS module, use module.exports
	  // as the regeneratorRuntime namespace. Otherwise create a new empty
	  // object. Either way, the resulting object will be used to initialize
	  // the regeneratorRuntime variable at the top of this file.
	  module.exports );

	  try {
	    regeneratorRuntime = runtime;
	  } catch (accidentalStrictMode) {
	    // This module should not be running in strict mode, so the above
	    // assignment should always work unless something is misconfigured. Just
	    // in case runtime.js accidentally runs in strict mode, in modern engines
	    // we can explicitly access globalThis. In older engines we can escape
	    // strict mode using a global Function call. This could conceivably fail
	    // if a Content Security Policy forbids using Function, but in that case
	    // the proper solution is to fix the accidental strict mode problem. If
	    // you've misconfigured your bundler to force strict mode and applied a
	    // CSP to forbid Function, and you're not willing to fix either of those
	    // problems, please detail your unique predicament in a GitHub issue.
	    if ((typeof globalThis === "undefined" ? "undefined" : _typeof(globalThis)) === "object") {
	      globalThis.regeneratorRuntime = runtime;
	    } else {
	      Function("r", "regeneratorRuntime = r")(runtime);
	    }
	  }
	})(runtime);

	/**
	@license @nocompile
	Copyright (c) 2018 The Polymer Project Authors. All rights reserved.
	This code may only be used under the BSD style license found at http://polymer.github.io/LICENSE.txt
	The complete set of authors may be found at http://polymer.github.io/AUTHORS.txt
	The complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt
	Code distributed by Google as part of the polymer project is also
	subject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt
	*/
	(function () {

	  (function () {
	    if (void 0 === window.Reflect || void 0 === window.customElements || window.customElements.polyfillWrapFlushCallback) return;
	    var a = HTMLElement;
	    window.HTMLElement = {
	      HTMLElement: function HTMLElement() {
	        return Reflect.construct(a, [], this.constructor);
	      }
	    }.HTMLElement, HTMLElement.prototype = a.prototype, HTMLElement.prototype.constructor = HTMLElement, Object.setPrototypeOf(HTMLElement, a);
	  })();
	})();

	(function () {

	  var v;

	  function ba(a) {
	    var b = 0;
	    return function () {
	      return b < a.length ? {
	        done: !1,
	        value: a[b++]
	      } : {
	        done: !0
	      };
	    };
	  }

	  var ca = "function" == typeof Object.defineProperties ? Object.defineProperty : function (a, b, c) {
	    if (a == Array.prototype || a == Object.prototype) return a;
	    a[b] = c.value;
	    return a;
	  };

	  function da(a) {
	    a = ["object" == (typeof globalThis === "undefined" ? "undefined" : _typeof(globalThis)) && globalThis, a, "object" == (typeof window === "undefined" ? "undefined" : _typeof(window)) && window, "object" == (typeof self === "undefined" ? "undefined" : _typeof(self)) && self, "object" == _typeof(commonjsGlobal) && commonjsGlobal];

	    for (var b = 0; b < a.length; ++b) {
	      var c = a[b];
	      if (c && c.Math == Math) return c;
	    }

	    throw Error("Cannot find global object");
	  }

	  var ea = da(this);

	  function ia(a, b) {
	    if (b) a: {
	      var c = ea;
	      a = a.split(".");

	      for (var d = 0; d < a.length - 1; d++) {
	        var e = a[d];
	        if (!(e in c)) break a;
	        c = c[e];
	      }

	      a = a[a.length - 1];
	      d = c[a];
	      b = b(d);
	      b != d && null != b && ca(c, a, {
	        configurable: !0,
	        writable: !0,
	        value: b
	      });
	    }
	  }

	  ia("Symbol", function (a) {
	    function b(e) {
	      if (this instanceof b) throw new TypeError("Symbol is not a constructor");
	      return new c("jscomp_symbol_" + (e || "") + "_" + d++, e);
	    }

	    function c(e, f) {
	      this.g = e;
	      ca(this, "description", {
	        configurable: !0,
	        writable: !0,
	        value: f
	      });
	    }

	    if (a) return a;

	    c.prototype.toString = function () {
	      return this.g;
	    };

	    var d = 0;
	    return b;
	  });
	  ia("Symbol.iterator", function (a) {
	    if (a) return a;
	    a = Symbol("Symbol.iterator");

	    for (var b = "Array Int8Array Uint8Array Uint8ClampedArray Int16Array Uint16Array Int32Array Uint32Array Float32Array Float64Array".split(" "), c = 0; c < b.length; c++) {
	      var d = ea[b[c]];
	      "function" === typeof d && "function" != typeof d.prototype[a] && ca(d.prototype, a, {
	        configurable: !0,
	        writable: !0,
	        value: function value() {
	          return ja(ba(this));
	        }
	      });
	    }

	    return a;
	  });

	  function ja(a) {
	    a = {
	      next: a
	    };

	    a[Symbol.iterator] = function () {
	      return this;
	    };

	    return a;
	  }

	  function ka(a) {
	    var b = "undefined" != typeof Symbol && Symbol.iterator && a[Symbol.iterator];
	    return b ? b.call(a) : {
	      next: ba(a)
	    };
	  }

	  function x(a) {
	    if (!(a instanceof Array)) {
	      a = ka(a);

	      for (var b, c = []; !(b = a.next()).done;) {
	        c.push(b.value);
	      }

	      a = c;
	    }

	    return a;
	  }

	  var ma;
	  if ("function" == typeof Object.setPrototypeOf) ma = Object.setPrototypeOf;else {
	    var na;

	    a: {
	      var oa = {
	        a: !0
	      },
	          pa = {};

	      try {
	        pa.__proto__ = oa;
	        na = pa.a;
	        break a;
	      } catch (a) {}

	      na = !1;
	    }

	    ma = na ? function (a, b) {
	      a.__proto__ = b;
	      if (a.__proto__ !== b) throw new TypeError(a + " is not extensible");
	      return a;
	    } : null;
	  }
	  var qa = ma;

	  function ra() {
	    this.u = !1;
	    this.h = null;
	    this.Ka = void 0;
	    this.g = 1;
	    this.da = 0;
	    this.i = null;
	  }

	  function ua(a) {
	    if (a.u) throw new TypeError("Generator is already running");
	    a.u = !0;
	  }

	  ra.prototype.O = function (a) {
	    this.Ka = a;
	  };

	  function xa(a, b) {
	    a.i = {
	      Wa: b,
	      $a: !0
	    };
	    a.g = a.da;
	  }

	  ra.prototype.return = function (a) {
	    this.i = {
	      return: a
	    };
	    this.g = this.da;
	  };

	  function ya(a, b) {
	    a.g = 3;
	    return {
	      value: b
	    };
	  }

	  function za(a) {
	    this.g = new ra();
	    this.h = a;
	  }

	  function Aa(a, b) {
	    ua(a.g);
	    var c = a.g.h;
	    if (c) return Ba(a, "return" in c ? c["return"] : function (d) {
	      return {
	        value: d,
	        done: !0
	      };
	    }, b, a.g.return);
	    a.g.return(b);
	    return Ca(a);
	  }

	  function Ba(a, b, c, d) {
	    try {
	      var e = b.call(a.g.h, c);
	      if (!(e instanceof Object)) throw new TypeError("Iterator result " + e + " is not an object");
	      if (!e.done) return a.g.u = !1, e;
	      var f = e.value;
	    } catch (g) {
	      return a.g.h = null, xa(a.g, g), Ca(a);
	    }

	    a.g.h = null;
	    d.call(a.g, f);
	    return Ca(a);
	  }

	  function Ca(a) {
	    for (; a.g.g;) {
	      try {
	        var b = a.h(a.g);
	        if (b) return a.g.u = !1, {
	          value: b.value,
	          done: !1
	        };
	      } catch (c) {
	        a.g.Ka = void 0, xa(a.g, c);
	      }
	    }

	    a.g.u = !1;

	    if (a.g.i) {
	      b = a.g.i;
	      a.g.i = null;
	      if (b.$a) throw b.Wa;
	      return {
	        value: b.return,
	        done: !0
	      };
	    }

	    return {
	      value: void 0,
	      done: !0
	    };
	  }

	  function Da(a) {
	    this.next = function (b) {
	      ua(a.g);
	      a.g.h ? b = Ba(a, a.g.h.next, b, a.g.O) : (a.g.O(b), b = Ca(a));
	      return b;
	    };

	    this.throw = function (b) {
	      ua(a.g);
	      a.g.h ? b = Ba(a, a.g.h["throw"], b, a.g.O) : (xa(a.g, b), b = Ca(a));
	      return b;
	    };

	    this.return = function (b) {
	      return Aa(a, b);
	    };

	    this[Symbol.iterator] = function () {
	      return this;
	    };
	  }

	  function Ea(a, b) {
	    b = new Da(new za(b));
	    qa && a.prototype && qa(b, a.prototype);
	    return b;
	  }

	  Array.from || (Array.from = function (a) {
	    return [].slice.call(a);
	  });
	  Object.assign || (Object.assign = function (a) {
	    for (var b = [].slice.call(arguments, 1), c = 0, d; c < b.length; c++) {
	      if (d = b[c]) for (var e = a, f = Object.keys(d), g = 0; g < f.length; g++) {
	        var h = f[g];
	        e[h] = d[h];
	      }
	    }

	    return a;
	  });
	  var Fa = setTimeout;

	  function Ga() {}

	  function Ha(a, b) {
	    return function () {
	      a.apply(b, arguments);
	    };
	  }

	  function A(a) {
	    if (!(this instanceof A)) throw new TypeError("Promises must be constructed via new");
	    if ("function" !== typeof a) throw new TypeError("not a function");
	    this.N = 0;
	    this.Ea = !1;
	    this.I = void 0;
	    this.ba = [];
	    Ia(a, this);
	  }

	  function Ja(a, b) {
	    for (; 3 === a.N;) {
	      a = a.I;
	    }

	    0 === a.N ? a.ba.push(b) : (a.Ea = !0, Ka(function () {
	      var c = 1 === a.N ? b.bb : b.cb;
	      if (null === c) (1 === a.N ? La : Ma)(b.promise, a.I);else {
	        try {
	          var d = c(a.I);
	        } catch (e) {
	          Ma(b.promise, e);
	          return;
	        }

	        La(b.promise, d);
	      }
	    }));
	  }

	  function La(a, b) {
	    try {
	      if (b === a) throw new TypeError("A promise cannot be resolved with itself.");

	      if (b && ("object" === _typeof(b) || "function" === typeof b)) {
	        var c = b.then;

	        if (b instanceof A) {
	          a.N = 3;
	          a.I = b;
	          Na(a);
	          return;
	        }

	        if ("function" === typeof c) {
	          Ia(Ha(c, b), a);
	          return;
	        }
	      }

	      a.N = 1;
	      a.I = b;
	      Na(a);
	    } catch (d) {
	      Ma(a, d);
	    }
	  }

	  function Ma(a, b) {
	    a.N = 2;
	    a.I = b;
	    Na(a);
	  }

	  function Na(a) {
	    2 === a.N && 0 === a.ba.length && Ka(function () {
	      a.Ea || "undefined" !== typeof console && console && console.warn("Possible Unhandled Promise Rejection:", a.I);
	    });

	    for (var b = 0, c = a.ba.length; b < c; b++) {
	      Ja(a, a.ba[b]);
	    }

	    a.ba = null;
	  }

	  function Oa(a, b, c) {
	    this.bb = "function" === typeof a ? a : null;
	    this.cb = "function" === typeof b ? b : null;
	    this.promise = c;
	  }

	  function Ia(a, b) {
	    var c = !1;

	    try {
	      a(function (d) {
	        c || (c = !0, La(b, d));
	      }, function (d) {
	        c || (c = !0, Ma(b, d));
	      });
	    } catch (d) {
	      c || (c = !0, Ma(b, d));
	    }
	  }

	  A.prototype["catch"] = function (a) {
	    return this.then(null, a);
	  };

	  A.prototype.then = function (a, b) {
	    var c = new this.constructor(Ga);
	    Ja(this, new Oa(a, b, c));
	    return c;
	  };

	  A.prototype["finally"] = function (a) {
	    var b = this.constructor;
	    return this.then(function (c) {
	      return b.resolve(a()).then(function () {
	        return c;
	      });
	    }, function (c) {
	      return b.resolve(a()).then(function () {
	        return b.reject(c);
	      });
	    });
	  };

	  function Pa(a) {
	    return new A(function (b, c) {
	      function d(h, k) {
	        try {
	          if (k && ("object" === _typeof(k) || "function" === typeof k)) {
	            var l = k.then;

	            if ("function" === typeof l) {
	              l.call(k, function (m) {
	                d(h, m);
	              }, c);
	              return;
	            }
	          }

	          e[h] = k;
	          0 === --f && b(e);
	        } catch (m) {
	          c(m);
	        }
	      }

	      if (!a || "undefined" === typeof a.length) return c(new TypeError("Promise.all accepts an array"));
	      var e = Array.prototype.slice.call(a);
	      if (0 === e.length) return b([]);

	      for (var f = e.length, g = 0; g < e.length; g++) {
	        d(g, e[g]);
	      }
	    });
	  }

	  function Qa(a) {
	    return a && "object" === _typeof(a) && a.constructor === A ? a : new A(function (b) {
	      b(a);
	    });
	  }

	  function Ra(a) {
	    return new A(function (b, c) {
	      c(a);
	    });
	  }

	  function Sa(a) {
	    return new A(function (b, c) {
	      if (!a || "undefined" === typeof a.length) return c(new TypeError("Promise.race accepts an array"));

	      for (var d = 0, e = a.length; d < e; d++) {
	        Qa(a[d]).then(b, c);
	      }
	    });
	  }

	  var Ka = "function" === typeof setImmediate && function (a) {
	    setImmediate(a);
	  } || function (a) {
	    Fa(a, 0);
	  };
	  /*
	  Copyright (c) 2017 The Polymer Project Authors. All rights reserved.
	  This code may only be used under the BSD style license found at
	  http://polymer.github.io/LICENSE.txt The complete set of authors may be found at
	  http://polymer.github.io/AUTHORS.txt The complete set of contributors may be
	  found at http://polymer.github.io/CONTRIBUTORS.txt Code distributed by Google as
	  part of the polymer project is also subject to an additional IP rights grant
	  found at http://polymer.github.io/PATENTS.txt
	  */


	  if (!window.Promise) {
	    window.Promise = A;
	    A.prototype.then = A.prototype.then;
	    A.all = Pa;
	    A.race = Sa;
	    A.resolve = Qa;
	    A.reject = Ra;
	    var Ta = document.createTextNode(""),
	        Va = [];
	    new MutationObserver(function () {
	      for (var a = Va.length, b = 0; b < a; b++) {
	        Va[b]();
	      }

	      Va.splice(0, a);
	    }).observe(Ta, {
	      characterData: !0
	    });

	    Ka = function Ka(a) {
	      Va.push(a);
	      Ta.textContent = 0 < Ta.textContent.length ? "" : "a";
	    };
	  }
	  /*
	  Copyright (C) 2015 by WebReflection
	  Permission is hereby granted, free of charge, to any person obtaining a copy
	  of this software and associated documentation files (the "Software"), to deal
	  in the Software without restriction, including without limitation the rights
	  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
	  copies of the Software, and to permit persons to whom the Software is
	  furnished to do so, subject to the following conditions:
	  The above copyright notice and this permission notice shall be included in
	  all copies or substantial portions of the Software.
	  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
	  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
	  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
	  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
	  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
	  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
	  THE SOFTWARE.
	  */

	  (function (a, b) {
	    if (!(b in a)) {
	      var c = _typeof(commonjsGlobal) === _typeof(c) ? window : commonjsGlobal,
	          d = 0,
	          e = String(Math.random()),
	          f = "__\x01symbol@@" + e,
	          g = a.getOwnPropertyNames,
	          h = a.getOwnPropertyDescriptor,
	          k = a.create,
	          l = a.keys,
	          m = a.freeze || a,
	          q = a.defineProperty,
	          H = a.defineProperties,
	          C = h(a, "getOwnPropertyNames"),
	          t = a.prototype,
	          F = t.hasOwnProperty,
	          E = t.propertyIsEnumerable,
	          M = t.toString,
	          y = function y(I, u, G) {
	        F.call(I, f) || q(I, f, {
	          enumerable: !1,
	          configurable: !1,
	          writable: !1,
	          value: {}
	        });
	        I[f]["@@" + u] = G;
	      },
	          W = function W(I, u) {
	        var G = k(I);
	        g(u).forEach(function (p) {
	          sa.call(u, p) && Ua(G, p, u[p]);
	        });
	        return G;
	      },
	          w = function w() {},
	          ta = function ta(I) {
	        return I != f && !F.call(fa, I);
	      },
	          ha = function ha(I) {
	        return I != f && F.call(fa, I);
	      },
	          sa = function sa(I) {
	        var u = String(I);
	        return ha(u) ? F.call(this, u) && !!this[f] && this[f]["@@" + u] : E.call(this, I);
	      },
	          n = function n(I) {
	        q(t, I, {
	          enumerable: !1,
	          configurable: !0,
	          get: w,
	          set: function set(u) {
	            wa(this, I, {
	              enumerable: !1,
	              configurable: !0,
	              writable: !0,
	              value: u
	            });
	            y(this, I, !0);
	          }
	        });
	        fa[I] = q(a(I), "constructor", gc);
	        return m(fa[I]);
	      },
	          J = function G(u) {
	        if (this instanceof G) throw new TypeError("Symbol is not a constructor");
	        return n("__\x01symbol:".concat(u || "", e, ++d));
	      },
	          fa = k(null),
	          gc = {
	        value: J
	      },
	          fb = function fb(u) {
	        return fa[u];
	      },
	          Ua = function Ua(u, G, p) {
	        var r = String(G);

	        if (ha(r)) {
	          G = wa;

	          if (p.enumerable) {
	            var B = k(p);
	            B.enumerable = !1;
	          } else B = p;

	          G(u, r, B);
	          y(u, r, !!p.enumerable);
	        } else q(u, G, p);

	        return u;
	      },
	          gb = function gb(u) {
	        return g(u).filter(ha).map(fb);
	      };

	      C.value = Ua;
	      q(a, "defineProperty", C);
	      C.value = gb;
	      q(a, b, C);

	      C.value = function (u) {
	        return g(u).filter(ta);
	      };

	      q(a, "getOwnPropertyNames", C);

	      C.value = function (u, G) {
	        var p = gb(G);
	        p.length ? l(G).concat(p).forEach(function (r) {
	          sa.call(G, r) && Ua(u, r, G[r]);
	        }) : H(u, G);
	        return u;
	      };

	      q(a, "defineProperties", C);
	      C.value = sa;
	      q(t, "propertyIsEnumerable", C);
	      C.value = J;
	      q(c, "Symbol", C);

	      C.value = function (u) {
	        u = "__\x01symbol:".concat("__\x01symbol:", u, e);
	        return u in t ? fa[u] : n(u);
	      };

	      q(J, "for", C);

	      C.value = function (u) {
	        if (ta(u)) throw new TypeError(u + " is not a symbol");
	        if (F.call(fa, u) && (u = u.slice(10), "__\x01symbol:" === u.slice(0, 10) && (u = u.slice(10), u !== e))) return u = u.slice(0, u.length - e.length), 0 < u.length ? u : void 0;
	      };

	      q(J, "keyFor", C);

	      C.value = function (u, G) {
	        var p = h(u, G);
	        p && ha(G) && (p.enumerable = sa.call(u, G));
	        return p;
	      };

	      q(a, "getOwnPropertyDescriptor", C);

	      C.value = function (u, G) {
	        return 1 === arguments.length || "undefined" === typeof G ? k(u) : W(u, G);
	      };

	      q(a, "create", C);

	      C.value = function () {
	        var u = M.call(this);
	        return "[object String]" === u && ha(this) ? "[object Symbol]" : u;
	      };

	      q(t, "toString", C);

	      try {
	        if (!0 === k(q({}, "__\x01symbol:", {
	          get: function get() {
	            return q(this, "__\x01symbol:", {
	              value: !0
	            })["__\x01symbol:"];
	          }
	        }))["__\x01symbol:"]) var wa = q;else throw "IE11";
	      } catch (u) {
	        wa = function wa(G, p, r) {
	          var B = h(t, p);
	          delete t[p];
	          q(G, p, r);
	          q(t, p, B);
	        };
	      }
	    }
	  })(Object, "getOwnPropertySymbols");

	  (function (a, b) {
	    var c = a.defineProperty,
	        d = a.prototype,
	        e = d.toString,
	        f;
	    "iterator match replace search split hasInstance isConcatSpreadable unscopables species toPrimitive toStringTag".split(" ").forEach(function (g) {
	      g in b || (c(b, g, {
	        value: b(g)
	      }), "toStringTag" === g && (f = a.getOwnPropertyDescriptor(d, "toString"), f.value = function () {
	        var h = e.call(this),
	            k = null == this ? this : this[b.toStringTag];
	        return null == k ? h : "[object " + k + "]";
	      }, c(d, "toString", f)));
	    });
	  })(Object, Symbol);

	  (function (a, b, c) {
	    function d() {
	      return this;
	    }

	    b[a] || (b[a] = function () {
	      var e = 0,
	          f = this,
	          g = {
	        next: function next() {
	          var h = f.length <= e;
	          return h ? {
	            done: h
	          } : {
	            done: h,
	            value: f[e++]
	          };
	        }
	      };
	      g[a] = d;
	      return g;
	    });
	    c[a] || (c[a] = function () {
	      var e = String.fromCodePoint,
	          f = this,
	          g = 0,
	          h = f.length,
	          k = {
	        next: function next() {
	          var l = h <= g,
	              m = l ? "" : e(f.codePointAt(g));
	          g += m.length;
	          return l ? {
	            done: l
	          } : {
	            done: l,
	            value: m
	          };
	        }
	      };
	      k[a] = d;
	      return k;
	    });
	  })(Symbol.iterator, Array.prototype, String.prototype);
	  /*
	  Copyright (c) 2018 The Polymer Project Authors. All rights reserved.
	  This code may only be used under the BSD style license found at
	  http://polymer.github.io/LICENSE.txt The complete set of authors may be found at
	  http://polymer.github.io/AUTHORS.txt The complete set of contributors may be
	  found at http://polymer.github.io/CONTRIBUTORS.txt Code distributed by Google as
	  part of the polymer project is also subject to an additional IP rights grant
	  found at http://polymer.github.io/PATENTS.txt
	  */


	  var Wa = Object.prototype.toString;

	  Object.prototype.toString = function () {
	    return void 0 === this ? "[object Undefined]" : null === this ? "[object Null]" : Wa.call(this);
	  };

	  Object.keys = function (a) {
	    return Object.getOwnPropertyNames(a).filter(function (b) {
	      return (b = Object.getOwnPropertyDescriptor(a, b)) && b.enumerable;
	    });
	  };

	  String.prototype[Symbol.iterator] && String.prototype.codePointAt || (String.prototype[Symbol.iterator] = function Xa() {
	    var b,
	        c = this;
	    return Ea(Xa, function (d) {
	      1 == d.g && (b = 0);
	      if (3 != d.g) return b < c.length ? d = ya(d, c[b]) : (d.g = 0, d = void 0), d;
	      b++;
	      d.g = 2;
	    });
	  });
	  Set.prototype[Symbol.iterator] || (Set.prototype[Symbol.iterator] = function Ya() {
	    var b,
	        c = this,
	        d;
	    return Ea(Ya, function (e) {
	      1 == e.g && (b = [], c.forEach(function (f) {
	        b.push(f);
	      }), d = 0);
	      if (3 != e.g) return d < b.length ? e = ya(e, b[d]) : (e.g = 0, e = void 0), e;
	      d++;
	      e.g = 2;
	    });
	  });
	  Map.prototype[Symbol.iterator] || (Map.prototype[Symbol.iterator] = function Za() {
	    var b,
	        c = this,
	        d;
	    return Ea(Za, function (e) {
	      1 == e.g && (b = [], c.forEach(function (f, g) {
	        b.push([g, f]);
	      }), d = 0);
	      if (3 != e.g) return d < b.length ? e = ya(e, b[d]) : (e.g = 0, e = void 0), e;
	      d++;
	      e.g = 2;
	    });
	  });
	  /*
	  Copyright (c) 2020 The Polymer Project Authors. All rights reserved.
	  This code may only be used under the BSD style license found at http://polymer.github.io/LICENSE.txt
	  The complete set of authors may be found at http://polymer.github.io/AUTHORS.txt
	  The complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt
	  Code distributed by Google as part of the polymer project is also
	  subject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt
	  */

	  var $a = document.createEvent("Event");
	  $a.initEvent("foo", !0, !0);
	  $a.preventDefault();

	  if (!$a.defaultPrevented) {
	    var ab = Event.prototype.preventDefault;

	    Event.prototype.preventDefault = function () {
	      this.cancelable && (ab.call(this), Object.defineProperty(this, "defaultPrevented", {
	        get: function get() {
	          return !0;
	        },
	        configurable: !0
	      }));
	    };
	  }

	  var bb = /Trident/.test(navigator.userAgent);

	  if (!window.Event || bb && "function" !== typeof window.Event) {
	    var cb = window.Event;

	    window.Event = function (a, b) {
	      b = b || {};
	      var c = document.createEvent("Event");
	      c.initEvent(a, !!b.bubbles, !!b.cancelable);
	      return c;
	    };

	    if (cb) {
	      for (var db in cb) {
	        window.Event[db] = cb[db];
	      }

	      window.Event.prototype = cb.prototype;
	    }
	  }

	  if (!window.CustomEvent || bb && "function" !== typeof window.CustomEvent) window.CustomEvent = function (a, b) {
	    b = b || {};
	    var c = document.createEvent("CustomEvent");
	    c.initCustomEvent(a, !!b.bubbles, !!b.cancelable, b.detail);
	    return c;
	  }, window.CustomEvent.prototype = window.Event.prototype;

	  if (!window.MouseEvent || bb && "function" !== typeof window.MouseEvent) {
	    var eb = window.MouseEvent;

	    window.MouseEvent = function (a, b) {
	      b = b || {};
	      var c = document.createEvent("MouseEvent");
	      c.initMouseEvent(a, !!b.bubbles, !!b.cancelable, b.view || window, b.detail, b.screenX, b.screenY, b.clientX, b.clientY, b.ctrlKey, b.altKey, b.shiftKey, b.metaKey, b.button, b.relatedTarget);
	      return c;
	    };

	    if (eb) for (var hb in eb) {
	      window.MouseEvent[hb] = eb[hb];
	    }
	    window.MouseEvent.prototype = eb.prototype;
	  }
	  Object.getOwnPropertyDescriptor(Node.prototype, "baseURI") || Object.defineProperty(Node.prototype, "baseURI", {
	    get: function get() {
	      var a = (this.ownerDocument || this).querySelector("base[href]");
	      return a && a.href || window.location.href;
	    },
	    configurable: !0,
	    enumerable: !0
	  });
	  /*
	  Copyright (c) 2020 The Polymer Project Authors. All rights reserved.
	  This code may only be used under the BSD style license found at
	  http://polymer.github.io/LICENSE.txt The complete set of authors may be found at
	  http://polymer.github.io/AUTHORS.txt The complete set of contributors may be
	  found at http://polymer.github.io/CONTRIBUTORS.txt Code distributed by Google as
	  part of the polymer project is also subject to an additional IP rights grant
	  found at http://polymer.github.io/PATENTS.txt
	  */

	  var ib,
	      jb,
	      kb = Element.prototype,
	      nb = null !== (ib = Object.getOwnPropertyDescriptor(kb, "attributes")) && void 0 !== ib ? ib : Object.getOwnPropertyDescriptor(Node.prototype, "attributes"),
	      ob = null !== (jb = null === nb || void 0 === nb ? void 0 : nb.get) && void 0 !== jb ? jb : function () {
	    return this.attributes;
	  },
	      pb = Array.prototype.map;
	  kb.hasOwnProperty("getAttributeNames") || (kb.getAttributeNames = function () {
	    return pb.call(ob.call(this), function (a) {
	      return a.name;
	    });
	  });
	  var qb,
	      rb = Element.prototype;
	  rb.hasOwnProperty("matches") || (rb.matches = null !== (qb = rb.webkitMatchesSelector) && void 0 !== qb ? qb : rb.msMatchesSelector);
	  var sb = Node.prototype.appendChild;

	  function tb(a) {
	    a = a.prototype;
	    a.hasOwnProperty("append") || Object.defineProperty(a, "append", {
	      configurable: !0,
	      enumerable: !0,
	      writable: !0,
	      value: function value(b) {
	        for (var c = [], d = 0; d < arguments.length; ++d) {
	          c[d] = arguments[d];
	        }

	        c = ka(c);

	        for (d = c.next(); !d.done; d = c.next()) {
	          d = d.value, sb.call(this, "string" === typeof d ? document.createTextNode(d) : d);
	        }
	      }
	    });
	  }

	  tb(Document);
	  tb(DocumentFragment);
	  tb(Element);
	  var ub,
	      vb,
	      wb = Node.prototype.insertBefore,
	      xb = null !== (vb = null === (ub = Object.getOwnPropertyDescriptor(Node.prototype, "firstChild")) || void 0 === ub ? void 0 : ub.get) && void 0 !== vb ? vb : function () {
	    return this.firstChild;
	  };

	  function yb(a) {
	    a = a.prototype;
	    a.hasOwnProperty("prepend") || Object.defineProperty(a, "prepend", {
	      configurable: !0,
	      enumerable: !0,
	      writable: !0,
	      value: function value(b) {
	        for (var c = [], d = 0; d < arguments.length; ++d) {
	          c[d] = arguments[d];
	        }

	        d = xb.call(this);
	        c = ka(c);

	        for (var e = c.next(); !e.done; e = c.next()) {
	          e = e.value, wb.call(this, "string" === typeof e ? document.createTextNode(e) : e, d);
	        }
	      }
	    });
	  }

	  yb(Document);
	  yb(DocumentFragment);
	  yb(Element);
	  var zb,
	      Ab,
	      Bb = Node.prototype.appendChild,
	      Cb = Node.prototype.removeChild,
	      Db = null !== (Ab = null === (zb = Object.getOwnPropertyDescriptor(Node.prototype, "firstChild")) || void 0 === zb ? void 0 : zb.get) && void 0 !== Ab ? Ab : function () {
	    return this.firstChild;
	  };

	  function Eb(a) {
	    a = a.prototype;
	    a.hasOwnProperty("replaceChildren") || Object.defineProperty(a, "replaceChildren", {
	      configurable: !0,
	      enumerable: !0,
	      writable: !0,
	      value: function value(b) {
	        for (var c = [], d = 0; d < arguments.length; ++d) {
	          c[d] = arguments[d];
	        }

	        for (; null !== (d = Db.call(this));) {
	          Cb.call(this, d);
	        }

	        c = ka(c);

	        for (d = c.next(); !d.done; d = c.next()) {
	          d = d.value, Bb.call(this, "string" === typeof d ? document.createTextNode(d) : d);
	        }
	      }
	    });
	  }

	  Eb(Document);
	  Eb(DocumentFragment);
	  Eb(Element);
	  var Fb,
	      Gb,
	      Hb,
	      Ib,
	      Jb = Node.prototype.insertBefore,
	      Kb = null !== (Gb = null === (Fb = Object.getOwnPropertyDescriptor(Node.prototype, "parentNode")) || void 0 === Fb ? void 0 : Fb.get) && void 0 !== Gb ? Gb : function () {
	    return this.parentNode;
	  },
	      Lb = null !== (Ib = null === (Hb = Object.getOwnPropertyDescriptor(Node.prototype, "nextSibling")) || void 0 === Hb ? void 0 : Hb.get) && void 0 !== Ib ? Ib : function () {
	    return this.nextSibling;
	  };

	  function Mb(a) {
	    a = a.prototype;
	    a.hasOwnProperty("after") || Object.defineProperty(a, "after", {
	      configurable: !0,
	      enumerable: !0,
	      writable: !0,
	      value: function value(b) {
	        for (var c = [], d = 0; d < arguments.length; ++d) {
	          c[d] = arguments[d];
	        }

	        d = Kb.call(this);

	        if (null !== d) {
	          var e = Lb.call(this);
	          c = ka(c);

	          for (var f = c.next(); !f.done; f = c.next()) {
	            f = f.value, Jb.call(d, "string" === typeof f ? document.createTextNode(f) : f, e);
	          }
	        }
	      }
	    });
	  }

	  Mb(CharacterData);
	  Mb(Element);
	  var Nb,
	      Ob,
	      Pb = Node.prototype.insertBefore,
	      Qb = null !== (Ob = null === (Nb = Object.getOwnPropertyDescriptor(Node.prototype, "parentNode")) || void 0 === Nb ? void 0 : Nb.get) && void 0 !== Ob ? Ob : function () {
	    return this.parentNode;
	  };

	  function Rb(a) {
	    a = a.prototype;
	    a.hasOwnProperty("before") || Object.defineProperty(a, "before", {
	      configurable: !0,
	      enumerable: !0,
	      writable: !0,
	      value: function value(b) {
	        for (var c = [], d = 0; d < arguments.length; ++d) {
	          c[d] = arguments[d];
	        }

	        d = Qb.call(this);

	        if (null !== d) {
	          c = ka(c);

	          for (var e = c.next(); !e.done; e = c.next()) {
	            e = e.value, Pb.call(d, "string" === typeof e ? document.createTextNode(e) : e, this);
	          }
	        }
	      }
	    });
	  }

	  Rb(CharacterData);
	  Rb(Element);
	  var Sb,
	      Tb,
	      Ub = Node.prototype.removeChild,
	      Vb = null !== (Tb = null === (Sb = Object.getOwnPropertyDescriptor(Node.prototype, "parentNode")) || void 0 === Sb ? void 0 : Sb.get) && void 0 !== Tb ? Tb : function () {
	    return this.parentNode;
	  };

	  function Wb(a) {
	    a = a.prototype;
	    a.hasOwnProperty("remove") || Object.defineProperty(a, "remove", {
	      configurable: !0,
	      enumerable: !0,
	      writable: !0,
	      value: function value() {
	        var b = Vb.call(this);
	        b && Ub.call(b, this);
	      }
	    });
	  }

	  Wb(CharacterData);
	  Wb(Element);
	  var Xb,
	      Yb,
	      Zb = Node.prototype.insertBefore,
	      $b = Node.prototype.removeChild,
	      ac = null !== (Yb = null === (Xb = Object.getOwnPropertyDescriptor(Node.prototype, "parentNode")) || void 0 === Xb ? void 0 : Xb.get) && void 0 !== Yb ? Yb : function () {
	    return this.parentNode;
	  };

	  function bc(a) {
	    a = a.prototype;
	    a.hasOwnProperty("replaceWith") || Object.defineProperty(a, "replaceWith", {
	      configurable: !0,
	      enumerable: !0,
	      writable: !0,
	      value: function value(b) {
	        for (var c = [], d = 0; d < arguments.length; ++d) {
	          c[d] = arguments[d];
	        }

	        d = ac.call(this);

	        if (null !== d) {
	          c = ka(c);

	          for (var e = c.next(); !e.done; e = c.next()) {
	            e = e.value, Zb.call(d, "string" === typeof e ? document.createTextNode(e) : e, this);
	          }

	          $b.call(d, this);
	        }
	      }
	    });
	  }

	  bc(CharacterData);
	  bc(Element);
	  var cc = window.Element.prototype,
	      dc = window.HTMLElement.prototype,
	      ec = window.SVGElement.prototype;
	  !dc.hasOwnProperty("classList") || cc.hasOwnProperty("classList") || ec.hasOwnProperty("classList") || Object.defineProperty(cc, "classList", Object.getOwnPropertyDescriptor(dc, "classList"));
	  /*
	  Copyright (c) 2014 The Polymer Project Authors. All rights reserved.
	  This code may only be used under the BSD style license found at
	  http://polymer.github.io/LICENSE.txt The complete set of authors may be found
	  at http://polymer.github.io/AUTHORS.txt The complete set of contributors may
	  be found at http://polymer.github.io/CONTRIBUTORS.txt Code distributed by
	  Google as part of the polymer project is also subject to an additional IP
	  rights grant found at http://polymer.github.io/PATENTS.txt
	  */

	  var fc = document.createElement("style");
	  fc.textContent = "body {transition: opacity ease-in 0.2s; } \nbody[unresolved] {opacity: 0; display: block; overflow: hidden; position: relative; } \n";
	  var hc = document.querySelector("head");
	  hc.insertBefore(fc, hc.firstChild);
	  var ic = window;
	  ic.WebComponents = ic.WebComponents || {
	    flags: {}
	  };
	  var jc = document.querySelector('script[src*="webcomponents-bundle"]'),
	      kc = /wc-(.+)/,
	      lc = {};

	  if (!lc.noOpts) {
	    location.search.slice(1).split("&").forEach(function (a) {
	      a = a.split("=");
	      var b;
	      a[0] && (b = a[0].match(kc)) && (lc[b[1]] = a[1] || !0);
	    });
	    if (jc) for (var mc = 0, nc = void 0; nc = jc.attributes[mc]; mc++) {
	      "src" !== nc.name && (lc[nc.name] = nc.value || !0);
	    }
	    var oc = {};
	    lc.log && lc.log.split && lc.log.split(",").forEach(function (a) {
	      oc[a] = !0;
	    });
	    lc.log = oc;
	  }

	  ic.WebComponents.flags = lc;
	  var pc = lc.shadydom;

	  if (pc) {
	    ic.ShadyDOM = ic.ShadyDOM || {};
	    ic.ShadyDOM.force = pc;
	    var qc = lc.noPatch;
	    ic.ShadyDOM.noPatch = "true" === qc ? !0 : qc;
	  }

	  var rc = lc.register || lc.ce;
	  rc && window.customElements && (ic.customElements.forcePolyfill = rc);
	  /*
	  Copyright (c) 2016 The Polymer Project Authors. All rights reserved.
	  This code may only be used under the BSD style license found at http://polymer.github.io/LICENSE.txt
	  The complete set of authors may be found at http://polymer.github.io/AUTHORS.txt
	  The complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt
	  Code distributed by Google as part of the polymer project is also
	  subject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt
	  */

	  (function () {
	    function a() {}

	    function b(p, r) {
	      if (!p.childNodes.length) return [];

	      switch (p.nodeType) {
	        case Node.DOCUMENT_NODE:
	          return F.call(p, r);

	        case Node.DOCUMENT_FRAGMENT_NODE:
	          return E.call(p, r);

	        default:
	          return t.call(p, r);
	      }
	    }

	    var c = "undefined" === typeof HTMLTemplateElement,
	        d = !(document.createDocumentFragment().cloneNode() instanceof DocumentFragment),
	        e = !1;
	    /Trident/.test(navigator.userAgent) && function () {
	      function p(z, R) {
	        if (z instanceof DocumentFragment) for (var lb; lb = z.firstChild;) {
	          B.call(this, lb, R);
	        } else B.call(this, z, R);
	        return z;
	      }

	      e = !0;
	      var r = Node.prototype.cloneNode;

	      Node.prototype.cloneNode = function (z) {
	        z = r.call(this, z);
	        this instanceof DocumentFragment && (z.__proto__ = DocumentFragment.prototype);
	        return z;
	      };

	      DocumentFragment.prototype.querySelectorAll = HTMLElement.prototype.querySelectorAll;
	      DocumentFragment.prototype.querySelector = HTMLElement.prototype.querySelector;
	      Object.defineProperties(DocumentFragment.prototype, {
	        nodeType: {
	          get: function get() {
	            return Node.DOCUMENT_FRAGMENT_NODE;
	          },
	          configurable: !0
	        },
	        localName: {
	          get: function get() {},
	          configurable: !0
	        },
	        nodeName: {
	          get: function get() {
	            return "#document-fragment";
	          },
	          configurable: !0
	        }
	      });
	      var B = Node.prototype.insertBefore;
	      Node.prototype.insertBefore = p;
	      var K = Node.prototype.appendChild;

	      Node.prototype.appendChild = function (z) {
	        z instanceof DocumentFragment ? p.call(this, z, null) : K.call(this, z);
	        return z;
	      };

	      var aa = Node.prototype.removeChild,
	          la = Node.prototype.replaceChild;

	      Node.prototype.replaceChild = function (z, R) {
	        z instanceof DocumentFragment ? (p.call(this, z, R), aa.call(this, R)) : la.call(this, z, R);
	        return R;
	      };

	      Document.prototype.createDocumentFragment = function () {
	        var z = this.createElement("df");
	        z.__proto__ = DocumentFragment.prototype;
	        return z;
	      };

	      var va = Document.prototype.importNode;

	      Document.prototype.importNode = function (z, R) {
	        R = va.call(this, z, R || !1);
	        z instanceof DocumentFragment && (R.__proto__ = DocumentFragment.prototype);
	        return R;
	      };
	    }();

	    var f = Node.prototype.cloneNode,
	        g = Document.prototype.createElement,
	        h = Document.prototype.importNode,
	        k = Node.prototype.removeChild,
	        l = Node.prototype.appendChild,
	        m = Node.prototype.replaceChild,
	        q = DOMParser.prototype.parseFromString,
	        H = Object.getOwnPropertyDescriptor(window.HTMLElement.prototype, "innerHTML") || {
	      get: function get() {
	        return this.innerHTML;
	      },
	      set: function set(p) {
	        this.innerHTML = p;
	      }
	    },
	        C = Object.getOwnPropertyDescriptor(window.Node.prototype, "childNodes") || {
	      get: function get() {
	        return this.childNodes;
	      }
	    },
	        t = Element.prototype.querySelectorAll,
	        F = Document.prototype.querySelectorAll,
	        E = DocumentFragment.prototype.querySelectorAll,
	        M = function () {
	      if (!c) {
	        var p = document.createElement("template"),
	            r = document.createElement("template");
	        r.content.appendChild(document.createElement("div"));
	        p.content.appendChild(r);
	        p = p.cloneNode(!0);
	        return 0 === p.content.childNodes.length || 0 === p.content.firstChild.content.childNodes.length || d;
	      }
	    }();

	    if (c) {
	      var y = document.implementation.createHTMLDocument("template"),
	          W = !0,
	          w = document.createElement("style");
	      w.textContent = "template{display:none;}";
	      var ta = document.head;
	      ta.insertBefore(w, ta.firstElementChild);
	      a.prototype = Object.create(HTMLElement.prototype);
	      var ha = !document.createElement("div").hasOwnProperty("innerHTML");

	      a.Z = function (p) {
	        if (!p.content && p.namespaceURI === document.documentElement.namespaceURI) {
	          p.content = y.createDocumentFragment();

	          for (var r; r = p.firstChild;) {
	            l.call(p.content, r);
	          }

	          if (ha) p.__proto__ = a.prototype;else if (p.cloneNode = function (B) {
	            return a.sa(this, B);
	          }, W) try {
	            n(p), J(p);
	          } catch (B) {
	            W = !1;
	          }
	          a.bootstrap(p.content);
	        }
	      };

	      var sa = {
	        option: ["select"],
	        thead: ["table"],
	        col: ["colgroup", "table"],
	        tr: ["tbody", "table"],
	        th: ["tr", "tbody", "table"],
	        td: ["tr", "tbody", "table"]
	      },
	          n = function n(p) {
	        Object.defineProperty(p, "innerHTML", {
	          get: function get() {
	            return wa(this);
	          },
	          set: function set(r) {
	            var B = sa[(/<([a-z][^/\0>\x20\t\r\n\f]+)/i.exec(r) || ["", ""])[1].toLowerCase()];
	            if (B) for (var K = 0; K < B.length; K++) {
	              r = "<" + B[K] + ">" + r + "</" + B[K] + ">";
	            }
	            y.body.innerHTML = r;

	            for (a.bootstrap(y); this.content.firstChild;) {
	              k.call(this.content, this.content.firstChild);
	            }

	            r = y.body;
	            if (B) for (K = 0; K < B.length; K++) {
	              r = r.lastChild;
	            }

	            for (; r.firstChild;) {
	              l.call(this.content, r.firstChild);
	            }
	          },
	          configurable: !0
	        });
	      },
	          J = function J(p) {
	        Object.defineProperty(p, "outerHTML", {
	          get: function get() {
	            return "<template>" + this.innerHTML + "</template>";
	          },
	          set: function set(r) {
	            if (this.parentNode) {
	              y.body.innerHTML = r;

	              for (r = this.ownerDocument.createDocumentFragment(); y.body.firstChild;) {
	                l.call(r, y.body.firstChild);
	              }

	              m.call(this.parentNode, r, this);
	            } else throw Error("Failed to set the 'outerHTML' property on 'Element': This element has no parent node.");
	          },
	          configurable: !0
	        });
	      };

	      n(a.prototype);
	      J(a.prototype);

	      a.bootstrap = function (p) {
	        p = b(p, "template");

	        for (var r = 0, B = p.length, K; r < B && (K = p[r]); r++) {
	          a.Z(K);
	        }
	      };

	      document.addEventListener("DOMContentLoaded", function () {
	        a.bootstrap(document);
	      });

	      Document.prototype.createElement = function () {
	        var p = g.apply(this, arguments);
	        "template" === p.localName && a.Z(p);
	        return p;
	      };

	      DOMParser.prototype.parseFromString = function () {
	        var p = q.apply(this, arguments);
	        a.bootstrap(p);
	        return p;
	      };

	      Object.defineProperty(HTMLElement.prototype, "innerHTML", {
	        get: function get() {
	          return wa(this);
	        },
	        set: function set(p) {
	          H.set.call(this, p);
	          a.bootstrap(this);
	        },
	        configurable: !0,
	        enumerable: !0
	      });

	      var fa = /[&\u00A0"]/g,
	          gc = /[&\u00A0<>]/g,
	          fb = function fb(p) {
	        switch (p) {
	          case "&":
	            return "&amp;";

	          case "<":
	            return "&lt;";

	          case ">":
	            return "&gt;";

	          case '"':
	            return "&quot;";

	          case "\xA0":
	            return "&nbsp;";
	        }
	      };

	      w = function w(p) {
	        for (var r = {}, B = 0; B < p.length; B++) {
	          r[p[B]] = !0;
	        }

	        return r;
	      };

	      var Ua = w("area base br col command embed hr img input keygen link meta param source track wbr".split(" ")),
	          gb = w("style script xmp iframe noembed noframes plaintext noscript".split(" ")),
	          wa = function wa(p, r) {
	        "template" === p.localName && (p = p.content);

	        for (var B = "", K = r ? r(p) : C.get.call(p), aa = 0, la = K.length, va; aa < la && (va = K[aa]); aa++) {
	          a: {
	            var z = va;
	            var R = p;
	            var lb = r;

	            switch (z.nodeType) {
	              case Node.ELEMENT_NODE:
	                for (var Fc = z.localName, mb = "<" + Fc, Bh = z.attributes, oe = 0; R = Bh[oe]; oe++) {
	                  mb += " " + R.name + '="' + R.value.replace(fa, fb) + '"';
	                }

	                mb += ">";
	                z = Ua[Fc] ? mb : mb + wa(z, lb) + "</" + Fc + ">";
	                break a;

	              case Node.TEXT_NODE:
	                z = z.data;
	                z = R && gb[R.localName] ? z : z.replace(gc, fb);
	                break a;

	              case Node.COMMENT_NODE:
	                z = "\x3c!--" + z.data + "--\x3e";
	                break a;

	              default:
	                throw window.console.error(z), Error("not implemented");
	            }
	          }

	          B += z;
	        }

	        return B;
	      };
	    }

	    if (c || M) {
	      a.sa = function (p, r) {
	        var B = f.call(p, !1);
	        this.Z && this.Z(B);
	        r && (l.call(B.content, f.call(p.content, !0)), I(B.content, p.content));
	        return B;
	      };

	      var I = function I(p, r) {
	        if (r.querySelectorAll && (r = b(r, "template"), 0 !== r.length)) {
	          p = b(p, "template");

	          for (var B = 0, K = p.length, aa, la; B < K; B++) {
	            la = r[B], aa = p[B], a && a.Z && a.Z(la), m.call(aa.parentNode, u.call(la, !0), aa);
	          }
	        }
	      },
	          u = Node.prototype.cloneNode = function (p) {
	        if (!e && d && this instanceof DocumentFragment) {
	          if (p) var r = G.call(this.ownerDocument, this, !0);else return this.ownerDocument.createDocumentFragment();
	        } else this.nodeType === Node.ELEMENT_NODE && "template" === this.localName && this.namespaceURI == document.documentElement.namespaceURI ? r = a.sa(this, p) : r = f.call(this, p);
	        p && I(r, this);
	        return r;
	      },
	          G = Document.prototype.importNode = function (p, r) {
	        r = r || !1;
	        if ("template" === p.localName) return a.sa(p, r);
	        var B = h.call(this, p, r);

	        if (r) {
	          I(B, p);
	          p = b(B, 'script:not([type]),script[type="application/javascript"],script[type="text/javascript"]');

	          for (var K, aa = 0; aa < p.length; aa++) {
	            K = p[aa];
	            r = g.call(document, "script");
	            r.textContent = K.textContent;

	            for (var la = K.attributes, va = 0, z; va < la.length; va++) {
	              z = la[va], r.setAttribute(z.name, z.value);
	            }

	            m.call(K.parentNode, r, K);
	          }
	        }

	        return B;
	      };
	    }

	    c && (window.HTMLTemplateElement = a);
	  })();
	  /*
	  Copyright (c) 2016 The Polymer Project Authors. All rights reserved.
	  This code may only be used under the BSD style license found at http://polymer.github.io/LICENSE.txt
	  The complete set of authors may be found at http://polymer.github.io/AUTHORS.txt
	  The complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt
	  Code distributed by Google as part of the polymer project is also
	  subject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt
	  */


	  function sc() {}

	  sc.prototype.toJSON = function () {
	    return {};
	  };

	  function D(a) {
	    a.__shady || (a.__shady = new sc());
	    return a.__shady;
	  }

	  function L(a) {
	    return a && a.__shady;
	  }
	  var N = window.ShadyDOM || {};
	  N.Ya = !(!Element.prototype.attachShadow || !Node.prototype.getRootNode);
	  var tc = Object.getOwnPropertyDescriptor(Node.prototype, "firstChild");
	  N.H = !!(tc && tc.configurable && tc.get);
	  N.ya = N.force || !N.Ya;
	  N.J = N.noPatch || !1;
	  N.fa = N.preferPerformance;
	  N.Aa = "on-demand" === N.J;
	  N.Na = navigator.userAgent.match("Trident");

	  function uc() {
	    return Document.prototype.msElementsFromPoint ? "msElementsFromPoint" : "elementsFromPoint";
	  }

	  function vc(a) {
	    return (a = L(a)) && void 0 !== a.firstChild;
	  }

	  function O(a) {
	    return a instanceof ShadowRoot;
	  }

	  function wc(a) {
	    return (a = (a = L(a)) && a.root) && xc(a);
	  }

	  var yc = Element.prototype,
	      zc = yc.matches || yc.matchesSelector || yc.mozMatchesSelector || yc.msMatchesSelector || yc.oMatchesSelector || yc.webkitMatchesSelector,
	      Ac = document.createTextNode(""),
	      Bc = 0,
	      Cc = [];
	  new MutationObserver(function () {
	    for (; Cc.length;) {
	      try {
	        Cc.shift()();
	      } catch (a) {
	        throw Ac.textContent = Bc++, a;
	      }
	    }
	  }).observe(Ac, {
	    characterData: !0
	  });

	  function Dc(a) {
	    Cc.push(a);
	    Ac.textContent = Bc++;
	  }

	  var Ec = document.contains ? function (a, b) {
	    return a.__shady_native_contains(b);
	  } : function (a, b) {
	    return a === b || a.documentElement && a.documentElement.__shady_native_contains(b);
	  };

	  function Gc(a, b) {
	    for (; b;) {
	      if (b == a) return !0;
	      b = b.__shady_parentNode;
	    }

	    return !1;
	  }

	  function Hc(a) {
	    for (var b = a.length - 1; 0 <= b; b--) {
	      var c = a[b],
	          d = c.getAttribute("id") || c.getAttribute("name");
	      d && "length" !== d && isNaN(d) && (a[d] = c);
	    }

	    a.item = function (e) {
	      return a[e];
	    };

	    a.namedItem = function (e) {
	      if ("length" !== e && isNaN(e) && a[e]) return a[e];

	      for (var f = ka(a), g = f.next(); !g.done; g = f.next()) {
	        if (g = g.value, (g.getAttribute("id") || g.getAttribute("name")) == e) return g;
	      }

	      return null;
	    };

	    return a;
	  }

	  function Ic(a) {
	    var b = [];

	    for (a = a.__shady_native_firstChild; a; a = a.__shady_native_nextSibling) {
	      b.push(a);
	    }

	    return b;
	  }

	  function Jc(a) {
	    var b = [];

	    for (a = a.__shady_firstChild; a; a = a.__shady_nextSibling) {
	      b.push(a);
	    }

	    return b;
	  }

	  function Kc(a, b, c) {
	    c.configurable = !0;
	    if (c.value) a[b] = c.value;else try {
	      Object.defineProperty(a, b, c);
	    } catch (d) {}
	  }

	  function P(a, b, c, d) {
	    c = void 0 === c ? "" : c;

	    for (var e in b) {
	      d && 0 <= d.indexOf(e) || Kc(a, c + e, b[e]);
	    }
	  }

	  function Lc(a, b) {
	    for (var c in b) {
	      c in a && Kc(a, c, b[c]);
	    }
	  }

	  function Q(a) {
	    var b = {};
	    Object.getOwnPropertyNames(a).forEach(function (c) {
	      b[c] = Object.getOwnPropertyDescriptor(a, c);
	    });
	    return b;
	  }

	  function Mc(a, b) {
	    for (var c = Object.getOwnPropertyNames(b), d = 0, e; d < c.length; d++) {
	      e = c[d], a[e] = b[e];
	    }
	  }

	  function Nc(a) {
	    return a instanceof Node ? a : document.createTextNode("" + a);
	  }

	  function Oc(a) {
	    for (var b = [], c = 0; c < arguments.length; ++c) {
	      b[c] = arguments[c];
	    }

	    if (1 === b.length) return Nc(b[0]);
	    c = document.createDocumentFragment();
	    b = ka(b);

	    for (var d = b.next(); !d.done; d = b.next()) {
	      c.appendChild(Nc(d.value));
	    }

	    return c;
	  }
	  var Pc = [],
	      Qc;

	  function Rc(a) {
	    Qc || (Qc = !0, Dc(Sc));
	    Pc.push(a);
	  }

	  function Sc() {
	    Qc = !1;

	    for (var a = !!Pc.length; Pc.length;) {
	      Pc.shift()();
	    }

	    return a;
	  }

	  Sc.list = Pc;

	  function Tc() {
	    this.g = !1;
	    this.addedNodes = [];
	    this.removedNodes = [];
	    this.oa = new Set();
	  }

	  function Uc(a) {
	    a.g || (a.g = !0, Dc(function () {
	      a.flush();
	    }));
	  }

	  Tc.prototype.flush = function () {
	    if (this.g) {
	      this.g = !1;
	      var a = this.takeRecords();
	      a.length && this.oa.forEach(function (b) {
	        b(a);
	      });
	    }
	  };

	  Tc.prototype.takeRecords = function () {
	    if (this.addedNodes.length || this.removedNodes.length) {
	      var a = [{
	        addedNodes: this.addedNodes,
	        removedNodes: this.removedNodes
	      }];
	      this.addedNodes = [];
	      this.removedNodes = [];
	      return a;
	    }

	    return [];
	  };

	  function Vc(a, b) {
	    var c = D(a);
	    c.ea || (c.ea = new Tc());
	    c.ea.oa.add(b);
	    var d = c.ea;
	    return {
	      Ra: b,
	      X: d,
	      Sa: a,
	      takeRecords: function takeRecords() {
	        return d.takeRecords();
	      }
	    };
	  }

	  function Wc(a) {
	    var b = a && a.X;
	    b && (b.oa.delete(a.Ra), b.oa.size || (D(a.Sa).ea = null));
	  }

	  function Xc(a, b) {
	    var c = b.getRootNode();
	    return a.map(function (d) {
	      var e = c === d.target.getRootNode();

	      if (e && d.addedNodes) {
	        if (e = [].slice.call(d.addedNodes).filter(function (f) {
	          return c === f.getRootNode();
	        }), e.length) return d = Object.create(d), Object.defineProperty(d, "addedNodes", {
	          value: e,
	          configurable: !0
	        }), d;
	      } else if (e) return d;
	    }).filter(function (d) {
	      return d;
	    });
	  }
	  var Yc = /[&\u00A0"]/g,
	      Zc = /[&\u00A0<>]/g;

	  function $c(a) {
	    switch (a) {
	      case "&":
	        return "&amp;";

	      case "<":
	        return "&lt;";

	      case ">":
	        return "&gt;";

	      case '"':
	        return "&quot;";

	      case "\xA0":
	        return "&nbsp;";
	    }
	  }

	  function ad(a) {
	    for (var b = {}, c = 0; c < a.length; c++) {
	      b[a[c]] = !0;
	    }

	    return b;
	  }

	  var bd = ad("area base br col command embed hr img input keygen link meta param source track wbr".split(" ")),
	      cd = ad("style script xmp iframe noembed noframes plaintext noscript".split(" "));

	  function dd(a, b) {
	    "template" === a.localName && (a = a.content);

	    for (var c = "", d = b ? b(a) : a.childNodes, e = 0, f = d.length, g = void 0; e < f && (g = d[e]); e++) {
	      a: {
	        var h = g;
	        var k = a,
	            l = b;

	        switch (h.nodeType) {
	          case Node.ELEMENT_NODE:
	            k = h.localName;

	            for (var m = "<" + k, q = h.attributes, H = 0, C; C = q[H]; H++) {
	              m += " " + C.name + '="' + C.value.replace(Yc, $c) + '"';
	            }

	            m += ">";
	            h = bd[k] ? m : m + dd(h, l) + "</" + k + ">";
	            break a;

	          case Node.TEXT_NODE:
	            h = h.data;
	            h = k && cd[k.localName] ? h : h.replace(Zc, $c);
	            break a;

	          case Node.COMMENT_NODE:
	            h = "\x3c!--" + h.data + "--\x3e";
	            break a;

	          default:
	            throw window.console.error(h), Error("not implemented");
	        }
	      }

	      c += h;
	    }

	    return c;
	  }
	  var ed = N.H,
	      fd = {
	    querySelector: function querySelector(a) {
	      return this.__shady_native_querySelector(a);
	    },
	    querySelectorAll: function querySelectorAll(a) {
	      return this.__shady_native_querySelectorAll(a);
	    }
	  },
	      gd = {};

	  function hd(a) {
	    gd[a] = function (b) {
	      return b["__shady_native_" + a];
	    };
	  }

	  function id(a, b) {
	    P(a, b, "__shady_native_");

	    for (var c in b) {
	      hd(c);
	    }
	  }

	  function S(a, b) {
	    b = void 0 === b ? [] : b;

	    for (var c = 0; c < b.length; c++) {
	      var d = b[c],
	          e = Object.getOwnPropertyDescriptor(a, d);
	      e && (Object.defineProperty(a, "__shady_native_" + d, e), e.value ? fd[d] || (fd[d] = e.value) : hd(d));
	    }
	  }

	  var jd = document.createTreeWalker(document, NodeFilter.SHOW_ALL, null, !1),
	      kd = document.createTreeWalker(document, NodeFilter.SHOW_ELEMENT, null, !1),
	      ld = document.implementation.createHTMLDocument("inert");

	  function md(a) {
	    for (var b; b = a.__shady_native_firstChild;) {
	      a.__shady_native_removeChild(b);
	    }
	  }

	  var nd = ["firstElementChild", "lastElementChild", "children", "childElementCount"],
	      od = ["querySelector", "querySelectorAll", "append", "prepend", "replaceChildren"];

	  function pd() {
	    var a = ["dispatchEvent", "addEventListener", "removeEventListener"];
	    window.EventTarget ? (S(window.EventTarget.prototype, a), void 0 === window.__shady_native_addEventListener && S(Window.prototype, a)) : (S(Node.prototype, a), S(Window.prototype, a));
	    ed ? S(Node.prototype, "parentNode firstChild lastChild previousSibling nextSibling childNodes parentElement textContent".split(" ")) : id(Node.prototype, {
	      parentNode: {
	        get: function get() {
	          jd.currentNode = this;
	          return jd.parentNode();
	        }
	      },
	      firstChild: {
	        get: function get() {
	          jd.currentNode = this;
	          return jd.firstChild();
	        }
	      },
	      lastChild: {
	        get: function get() {
	          jd.currentNode = this;
	          return jd.lastChild();
	        }
	      },
	      previousSibling: {
	        get: function get() {
	          jd.currentNode = this;
	          return jd.previousSibling();
	        }
	      },
	      nextSibling: {
	        get: function get() {
	          jd.currentNode = this;
	          return jd.nextSibling();
	        }
	      },
	      childNodes: {
	        get: function get() {
	          var b = [];
	          jd.currentNode = this;

	          for (var c = jd.firstChild(); c;) {
	            b.push(c), c = jd.nextSibling();
	          }

	          return b;
	        }
	      },
	      parentElement: {
	        get: function get() {
	          kd.currentNode = this;
	          return kd.parentNode();
	        }
	      },
	      textContent: {
	        get: function get() {
	          switch (this.nodeType) {
	            case Node.ELEMENT_NODE:
	            case Node.DOCUMENT_FRAGMENT_NODE:
	              for (var b = document.createTreeWalker(this, NodeFilter.SHOW_TEXT, null, !1), c = "", d; d = b.nextNode();) {
	                c += d.nodeValue;
	              }

	              return c;

	            default:
	              return this.nodeValue;
	          }
	        },
	        set: function set(b) {
	          if ("undefined" === typeof b || null === b) b = "";

	          switch (this.nodeType) {
	            case Node.ELEMENT_NODE:
	            case Node.DOCUMENT_FRAGMENT_NODE:
	              md(this);
	              (0 < b.length || this.nodeType === Node.ELEMENT_NODE) && this.__shady_native_insertBefore(document.createTextNode(b), void 0);
	              break;

	            default:
	              this.nodeValue = b;
	          }
	        }
	      }
	    });
	    S(Node.prototype, "appendChild insertBefore removeChild replaceChild cloneNode contains".split(" "));
	    S(HTMLElement.prototype, ["parentElement", "contains"]);
	    a = {
	      firstElementChild: {
	        get: function get() {
	          kd.currentNode = this;
	          return kd.firstChild();
	        }
	      },
	      lastElementChild: {
	        get: function get() {
	          kd.currentNode = this;
	          return kd.lastChild();
	        }
	      },
	      children: {
	        get: function get() {
	          var b = [];
	          kd.currentNode = this;

	          for (var c = kd.firstChild(); c;) {
	            b.push(c), c = kd.nextSibling();
	          }

	          return Hc(b);
	        }
	      },
	      childElementCount: {
	        get: function get() {
	          return this.children ? this.children.length : 0;
	        }
	      }
	    };
	    ed ? (S(Element.prototype, nd), S(Element.prototype, ["previousElementSibling", "nextElementSibling", "innerHTML", "className"]), S(HTMLElement.prototype, ["children", "innerHTML", "className"])) : (id(Element.prototype, a), id(Element.prototype, {
	      previousElementSibling: {
	        get: function get() {
	          kd.currentNode = this;
	          return kd.previousSibling();
	        }
	      },
	      nextElementSibling: {
	        get: function get() {
	          kd.currentNode = this;
	          return kd.nextSibling();
	        }
	      },
	      innerHTML: {
	        get: function get() {
	          return dd(this, Ic);
	        },
	        set: function set(b) {
	          var c = "template" === this.localName ? this.content : this;
	          md(c);
	          var d = this.localName || "div";
	          d = this.namespaceURI && this.namespaceURI !== ld.namespaceURI ? ld.createElementNS(this.namespaceURI, d) : ld.createElement(d);
	          d.innerHTML = b;

	          for (b = "template" === this.localName ? d.content : d; d = b.__shady_native_firstChild;) {
	            c.__shady_native_insertBefore(d, void 0);
	          }
	        }
	      },
	      className: {
	        get: function get() {
	          return this.getAttribute("class") || "";
	        },
	        set: function set(b) {
	          this.setAttribute("class", b);
	        }
	      }
	    }));
	    S(Element.prototype, "setAttribute getAttribute hasAttribute removeAttribute focus blur".split(" "));
	    S(Element.prototype, od);
	    S(HTMLElement.prototype, ["focus", "blur"]);
	    window.HTMLTemplateElement && S(window.HTMLTemplateElement.prototype, ["innerHTML"]);
	    ed ? S(DocumentFragment.prototype, nd) : id(DocumentFragment.prototype, a);
	    S(DocumentFragment.prototype, od);
	    ed ? (S(Document.prototype, nd), S(Document.prototype, ["activeElement"])) : id(Document.prototype, a);
	    S(Document.prototype, ["importNode", "getElementById", "elementFromPoint", uc()]);
	    S(Document.prototype, od);
	  }
	  var qd = Q({
	    get childNodes() {
	      return this.__shady_childNodes;
	    },

	    get firstChild() {
	      return this.__shady_firstChild;
	    },

	    get lastChild() {
	      return this.__shady_lastChild;
	    },

	    get childElementCount() {
	      return this.__shady_childElementCount;
	    },

	    get children() {
	      return this.__shady_children;
	    },

	    get firstElementChild() {
	      return this.__shady_firstElementChild;
	    },

	    get lastElementChild() {
	      return this.__shady_lastElementChild;
	    },

	    get shadowRoot() {
	      return this.__shady_shadowRoot;
	    }

	  }),
	      rd = Q({
	    get textContent() {
	      return this.__shady_textContent;
	    },

	    set textContent(a) {
	      this.__shady_textContent = a;
	    },

	    get innerHTML() {
	      return this.__shady_innerHTML;
	    },

	    set innerHTML(a) {
	      this.__shady_innerHTML = a;
	    }

	  }),
	      sd = Q({
	    get parentElement() {
	      return this.__shady_parentElement;
	    },

	    get parentNode() {
	      return this.__shady_parentNode;
	    },

	    get nextSibling() {
	      return this.__shady_nextSibling;
	    },

	    get previousSibling() {
	      return this.__shady_previousSibling;
	    },

	    get nextElementSibling() {
	      return this.__shady_nextElementSibling;
	    },

	    get previousElementSibling() {
	      return this.__shady_previousElementSibling;
	    },

	    get className() {
	      return this.__shady_className;
	    },

	    set className(a) {
	      this.__shady_className = a;
	    }

	  });

	  function td(a) {
	    for (var b in a) {
	      var c = a[b];
	      c && (c.enumerable = !1);
	    }
	  }

	  td(qd);
	  td(rd);
	  td(sd);
	  var ud = N.H || !0 === N.J,
	      vd = ud ? function () {} : function (a) {
	    var b = D(a);
	    b.Pa || (b.Pa = !0, Lc(a, sd));
	  },
	      wd = ud ? function () {} : function (a) {
	    var b = D(a);
	    b.Oa || (b.Oa = !0, Lc(a, qd), window.customElements && window.customElements.polyfillWrapFlushCallback && !N.J || Lc(a, rd));
	  };

	  var xd = "__eventWrappers" + Date.now(),
	      yd = function () {
	    var a = Object.getOwnPropertyDescriptor(Event.prototype, "composed");
	    return a ? function (b) {
	      return a.get.call(b);
	    } : null;
	  }(),
	      zd = function () {
	    function a() {}

	    var b = !1,
	        c = {
	      get capture() {
	        b = !0;
	        return !1;
	      }

	    };
	    window.addEventListener("test", a, c);
	    window.removeEventListener("test", a, c);
	    return b;
	  }();

	  function Ad(a) {
	    if (a && "object" === _typeof(a)) {
	      var b = !!a.capture;
	      var c = !!a.once;
	      var d = !!a.passive;
	      var e = a.U;
	    } else b = !!a, d = c = !1;

	    return {
	      La: e,
	      capture: b,
	      once: c,
	      passive: d,
	      Ja: zd ? a : b
	    };
	  }

	  var Bd = {
	    blur: !0,
	    focus: !0,
	    focusin: !0,
	    focusout: !0,
	    click: !0,
	    dblclick: !0,
	    mousedown: !0,
	    mouseenter: !0,
	    mouseleave: !0,
	    mousemove: !0,
	    mouseout: !0,
	    mouseover: !0,
	    mouseup: !0,
	    wheel: !0,
	    beforeinput: !0,
	    input: !0,
	    keydown: !0,
	    keyup: !0,
	    compositionstart: !0,
	    compositionupdate: !0,
	    compositionend: !0,
	    touchstart: !0,
	    touchend: !0,
	    touchmove: !0,
	    touchcancel: !0,
	    pointerover: !0,
	    pointerenter: !0,
	    pointerdown: !0,
	    pointermove: !0,
	    pointerup: !0,
	    pointercancel: !0,
	    pointerout: !0,
	    pointerleave: !0,
	    gotpointercapture: !0,
	    lostpointercapture: !0,
	    dragstart: !0,
	    drag: !0,
	    dragenter: !0,
	    dragleave: !0,
	    dragover: !0,
	    drop: !0,
	    dragend: !0,
	    DOMActivate: !0,
	    DOMFocusIn: !0,
	    DOMFocusOut: !0,
	    keypress: !0
	  },
	      Cd = {
	    DOMAttrModified: !0,
	    DOMAttributeNameChanged: !0,
	    DOMCharacterDataModified: !0,
	    DOMElementNameChanged: !0,
	    DOMNodeInserted: !0,
	    DOMNodeInsertedIntoDocument: !0,
	    DOMNodeRemoved: !0,
	    DOMNodeRemovedFromDocument: !0,
	    DOMSubtreeModified: !0
	  };

	  function Dd(a) {
	    return a instanceof Node ? a.__shady_getRootNode() : a;
	  }

	  function Ed(a, b) {
	    var c = [],
	        d = a;

	    for (a = Dd(a); d;) {
	      c.push(d), d = d.__shady_assignedSlot ? d.__shady_assignedSlot : d.nodeType === Node.DOCUMENT_FRAGMENT_NODE && d.host && (b || d !== a) ? d.host : d.__shady_parentNode;
	    }

	    c[c.length - 1] === document && c.push(window);
	    return c;
	  }

	  function Fd(a) {
	    a.__composedPath || (a.__composedPath = Ed(a.target, !0));
	    return a.__composedPath;
	  }

	  function Gd(a, b) {
	    if (!O) return a;
	    a = Ed(a, !0);

	    for (var c = 0, d, e = void 0, f, g = void 0; c < b.length; c++) {
	      if (d = b[c], f = Dd(d), f !== e && (g = a.indexOf(f), e = f), !O(f) || -1 < g) return d;
	    }
	  }

	  function Hd(a) {
	    function b(c, d) {
	      c = new a(c, d);
	      c.__composed = d && !!d.composed;
	      return c;
	    }

	    b.__proto__ = a;
	    b.prototype = a.prototype;
	    return b;
	  }

	  var Id = {
	    focus: !0,
	    blur: !0
	  };

	  function Jd(a) {
	    return a.__target !== a.target || a.__relatedTarget !== a.relatedTarget;
	  }

	  function Kd(a, b, c) {
	    if (c = b.__handlers && b.__handlers[a.type] && b.__handlers[a.type][c]) for (var d = 0, e; (e = c[d]) && (!Jd(a) || a.target !== a.relatedTarget) && (e.call(b, a), !a.__immediatePropagationStopped); d++) {
	    }
	  }

	  function Ld(a) {
	    var b = a.composedPath(),
	        c = b.map(function (k) {
	      return Gd(k, b);
	    }),
	        d = a.bubbles;
	    Object.defineProperty(a, "currentTarget", {
	      configurable: !0,
	      enumerable: !0,
	      get: function get() {
	        return g;
	      }
	    });
	    var e = Event.CAPTURING_PHASE;
	    Object.defineProperty(a, "eventPhase", {
	      configurable: !0,
	      enumerable: !0,
	      get: function get() {
	        return e;
	      }
	    });

	    for (var f = b.length - 1; 0 <= f; f--) {
	      var g = b[f];
	      e = g === c[f] ? Event.AT_TARGET : Event.CAPTURING_PHASE;
	      Kd(a, g, "capture");
	      if (a.ra) return;
	    }

	    for (f = 0; f < b.length; f++) {
	      g = b[f];
	      var h = g === c[f];
	      if (h || d) if (e = h ? Event.AT_TARGET : Event.BUBBLING_PHASE, Kd(a, g, "bubble"), a.ra) return;
	    }

	    e = 0;
	    g = null;
	  }

	  function Md(a, b, c, d, e, f) {
	    for (var g = 0; g < a.length; g++) {
	      var h = a[g],
	          k = h.type,
	          l = h.capture,
	          m = h.once,
	          q = h.passive;
	      if (b === h.node && c === k && d === l && e === m && f === q) return g;
	    }

	    return -1;
	  }

	  function Nd(a) {
	    Sc();
	    return !N.fa && this instanceof Node && !Ec(document, this) ? (a.__target || Od(a, this), Ld(a)) : this.__shady_native_dispatchEvent(a);
	  }

	  function Pd(a, b, c) {
	    var d = Ad(c),
	        e = d.capture,
	        f = d.once,
	        g = d.passive,
	        h = d.La;
	    d = d.Ja;

	    if (b) {
	      var k = _typeof(b);

	      if ("function" === k || "object" === k) if ("object" !== k || b.handleEvent && "function" === typeof b.handleEvent) {
	        if (Cd[a]) return this.__shady_native_addEventListener(a, b, d);
	        var l = h || this;

	        if (h = b[xd]) {
	          if (-1 < Md(h, l, a, e, f, g)) return;
	        } else b[xd] = [];

	        h = function h(m) {
	          f && this.__shady_removeEventListener(a, b, c);
	          m.__target || Od(m);

	          if (l !== this) {
	            var q = Object.getOwnPropertyDescriptor(m, "currentTarget");
	            Object.defineProperty(m, "currentTarget", {
	              get: function get() {
	                return l;
	              },
	              configurable: !0
	            });
	            var H = Object.getOwnPropertyDescriptor(m, "eventPhase");
	            Object.defineProperty(m, "eventPhase", {
	              configurable: !0,
	              enumerable: !0,
	              get: function get() {
	                return e ? Event.CAPTURING_PHASE : Event.BUBBLING_PHASE;
	              }
	            });
	          }

	          m.__previousCurrentTarget = m.currentTarget;
	          if (!O(l) && "slot" !== l.localName || -1 != m.composedPath().indexOf(l)) if (m.composed || -1 < m.composedPath().indexOf(l)) if (Jd(m) && m.target === m.relatedTarget) m.eventPhase === Event.BUBBLING_PHASE && m.stopImmediatePropagation();else if (m.eventPhase === Event.CAPTURING_PHASE || m.bubbles || m.target === l || l instanceof Window) {
	            var C = "function" === k ? b.call(l, m) : b.handleEvent && b.handleEvent(m);
	            l !== this && (q ? (Object.defineProperty(m, "currentTarget", q), q = null) : delete m.currentTarget, H ? (Object.defineProperty(m, "eventPhase", H), H = null) : delete m.eventPhase);
	            return C;
	          }
	        };

	        b[xd].push({
	          node: l,
	          type: a,
	          capture: e,
	          once: f,
	          passive: g,
	          pb: h
	        });
	        this.__handlers = this.__handlers || {};
	        this.__handlers[a] = this.__handlers[a] || {
	          capture: [],
	          bubble: []
	        };

	        this.__handlers[a][e ? "capture" : "bubble"].push(h);

	        Id[a] || this.__shady_native_addEventListener(a, h, d);
	      }
	    }
	  }

	  function Qd(a, b, c) {
	    if (b) {
	      var d = Ad(c);
	      c = d.capture;
	      var e = d.once,
	          f = d.passive,
	          g = d.La;
	      d = d.Ja;
	      if (Cd[a]) return this.__shady_native_removeEventListener(a, b, d);
	      var h = g || this;
	      g = void 0;
	      var k = null;

	      try {
	        k = b[xd];
	      } catch (l) {}

	      k && (e = Md(k, h, a, c, e, f), -1 < e && (g = k.splice(e, 1)[0].pb, k.length || (b[xd] = void 0)));

	      this.__shady_native_removeEventListener(a, g || b, d);

	      g && this.__handlers && this.__handlers[a] && (a = this.__handlers[a][c ? "capture" : "bubble"], b = a.indexOf(g), -1 < b && a.splice(b, 1));
	    }
	  }

	  function Rd() {
	    for (var a in Id) {
	      window.__shady_native_addEventListener(a, function (b) {
	        b.__target || (Od(b), Ld(b));
	      }, !0);
	    }
	  }

	  var Sd = Q({
	    get composed() {
	      void 0 === this.__composed && (yd ? this.__composed = "focusin" === this.type || "focusout" === this.type || yd(this) : !1 !== this.isTrusted && (this.__composed = Bd[this.type]));
	      return this.__composed || !1;
	    },

	    composedPath: function composedPath() {
	      this.__composedPath || (this.__composedPath = Ed(this.__target, this.composed));
	      return this.__composedPath;
	    },

	    get target() {
	      return Gd(this.currentTarget || this.__previousCurrentTarget, this.composedPath());
	    },

	    get relatedTarget() {
	      if (!this.__relatedTarget) return null;
	      this.__relatedTargetComposedPath || (this.__relatedTargetComposedPath = Ed(this.__relatedTarget, !0));
	      return Gd(this.currentTarget || this.__previousCurrentTarget, this.__relatedTargetComposedPath);
	    },

	    stopPropagation: function stopPropagation() {
	      Event.prototype.stopPropagation.call(this);
	      this.ra = !0;
	    },
	    stopImmediatePropagation: function stopImmediatePropagation() {
	      Event.prototype.stopImmediatePropagation.call(this);
	      this.ra = this.__immediatePropagationStopped = !0;
	    }
	  });

	  function Od(a, b) {
	    b = void 0 === b ? a.target : b;
	    a.__target = b;
	    a.__relatedTarget = a.relatedTarget;

	    if (N.H) {
	      b = Object.getPrototypeOf(a);

	      if (!b.hasOwnProperty("__shady_patchedProto")) {
	        var c = Object.create(b);
	        c.__shady_sourceProto = b;
	        P(c, Sd);
	        b.__shady_patchedProto = c;
	      }

	      a.__proto__ = b.__shady_patchedProto;
	    } else P(a, Sd);
	  }

	  var Td = Hd(Event),
	      Ud = Hd(CustomEvent),
	      Vd = Hd(MouseEvent);

	  function Wd() {
	    if (!yd && Object.getOwnPropertyDescriptor(Event.prototype, "isTrusted")) {
	      var a = function a() {
	        var b = new MouseEvent("click", {
	          bubbles: !0,
	          cancelable: !0,
	          composed: !0
	        });

	        this.__shady_dispatchEvent(b);
	      };

	      Element.prototype.click ? Element.prototype.click = a : HTMLElement.prototype.click && (HTMLElement.prototype.click = a);
	    }
	  }

	  var Xd = Object.getOwnPropertyNames(Element.prototype).filter(function (a) {
	    return "on" === a.substring(0, 2);
	  }),
	      Yd = Object.getOwnPropertyNames(HTMLElement.prototype).filter(function (a) {
	    return "on" === a.substring(0, 2);
	  });

	  function Zd(a) {
	    return {
	      set: function set(b) {
	        var c = D(this),
	            d = a.substring(2);
	        c.T || (c.T = {});
	        c.T[a] && this.removeEventListener(d, c.T[a]);

	        this.__shady_addEventListener(d, b);

	        c.T[a] = b;
	      },
	      get: function get() {
	        var b = L(this);
	        return b && b.T && b.T[a];
	      },
	      configurable: !0
	    };
	  }

	  function $d(a, b) {
	    return {
	      index: a,
	      ga: [],
	      na: b
	    };
	  }

	  function ae(a, b, c, d) {
	    var e = 0,
	        f = 0,
	        g = 0,
	        h = 0,
	        k = Math.min(b - e, d - f);
	    if (0 == e && 0 == f) a: {
	      for (g = 0; g < k; g++) {
	        if (a[g] !== c[g]) break a;
	      }

	      g = k;
	    }

	    if (b == a.length && d == c.length) {
	      h = a.length;

	      for (var l = c.length, m = 0; m < k - g && be(a[--h], c[--l]);) {
	        m++;
	      }

	      h = m;
	    }

	    e += g;
	    f += g;
	    b -= h;
	    d -= h;
	    if (0 == b - e && 0 == d - f) return [];

	    if (e == b) {
	      for (b = $d(e, 0); f < d;) {
	        b.ga.push(c[f++]);
	      }

	      return [b];
	    }

	    if (f == d) return [$d(e, b - e)];
	    k = e;
	    g = f;
	    d = d - g + 1;
	    h = b - k + 1;
	    b = Array(d);

	    for (l = 0; l < d; l++) {
	      b[l] = Array(h), b[l][0] = l;
	    }

	    for (l = 0; l < h; l++) {
	      b[0][l] = l;
	    }

	    for (l = 1; l < d; l++) {
	      for (m = 1; m < h; m++) {
	        if (a[k + m - 1] === c[g + l - 1]) b[l][m] = b[l - 1][m - 1];else {
	          var q = b[l - 1][m] + 1,
	              H = b[l][m - 1] + 1;
	          b[l][m] = q < H ? q : H;
	        }
	      }
	    }

	    k = b.length - 1;
	    g = b[0].length - 1;
	    d = b[k][g];

	    for (a = []; 0 < k || 0 < g;) {
	      0 == k ? (a.push(2), g--) : 0 == g ? (a.push(3), k--) : (h = b[k - 1][g - 1], l = b[k - 1][g], m = b[k][g - 1], q = l < m ? l < h ? l : h : m < h ? m : h, q == h ? (h == d ? a.push(0) : (a.push(1), d = h), k--, g--) : q == l ? (a.push(3), k--, d = l) : (a.push(2), g--, d = m));
	    }

	    a.reverse();
	    b = void 0;
	    k = [];

	    for (g = 0; g < a.length; g++) {
	      switch (a[g]) {
	        case 0:
	          b && (k.push(b), b = void 0);
	          e++;
	          f++;
	          break;

	        case 1:
	          b || (b = $d(e, 0));
	          b.na++;
	          e++;
	          b.ga.push(c[f]);
	          f++;
	          break;

	        case 2:
	          b || (b = $d(e, 0));
	          b.na++;
	          e++;
	          break;

	        case 3:
	          b || (b = $d(e, 0)), b.ga.push(c[f]), f++;
	      }
	    }

	    b && k.push(b);
	    return k;
	  }

	  function be(a, b) {
	    return a === b;
	  }
	  var ce = Q({
	    dispatchEvent: Nd,
	    addEventListener: Pd,
	    removeEventListener: Qd
	  });
	  var de = null;

	  function ee() {
	    de || (de = window.ShadyCSS && window.ShadyCSS.ScopingShim);
	    return de || null;
	  }

	  function fe(a, b, c) {
	    var d = ee();
	    return d && "class" === b ? (d.setElementClass(a, c), !0) : !1;
	  }

	  function ge(a, b) {
	    var c = ee();
	    c && c.unscopeNode(a, b);
	  }

	  function he(a, b) {
	    var c = ee();
	    if (!c) return !0;

	    if (a.nodeType === Node.DOCUMENT_FRAGMENT_NODE) {
	      c = !0;

	      for (a = a.__shady_firstChild; a; a = a.__shady_nextSibling) {
	        c = c && he(a, b);
	      }

	      return c;
	    }

	    return a.nodeType !== Node.ELEMENT_NODE ? !0 : c.currentScopeForNode(a) === b;
	  }

	  function ie(a) {
	    if (a.nodeType !== Node.ELEMENT_NODE) return "";
	    var b = ee();
	    return b ? b.currentScopeForNode(a) : "";
	  }

	  function je(a, b) {
	    if (a) for (a.nodeType === Node.ELEMENT_NODE && b(a), a = a.__shady_firstChild; a; a = a.__shady_nextSibling) {
	      a.nodeType === Node.ELEMENT_NODE && je(a, b);
	    }
	  }
	  var ke = window.document,
	      le = N.fa,
	      me = Object.getOwnPropertyDescriptor(Node.prototype, "isConnected"),
	      ne = me && me.get;

	  function pe(a) {
	    for (var b; b = a.__shady_firstChild;) {
	      a.__shady_removeChild(b);
	    }
	  }

	  function qe(a) {
	    var b = L(a);
	    if (b && void 0 !== b.qa) for (b = a.__shady_firstChild; b; b = b.__shady_nextSibling) {
	      qe(b);
	    }
	    if (a = L(a)) a.qa = void 0;
	  }

	  function re(a) {
	    var b = a;

	    if (a && "slot" === a.localName) {
	      var c = L(a);
	      (c = c && c.aa) && (b = c.length ? c[0] : re(a.__shady_nextSibling));
	    }

	    return b;
	  }

	  function se(a, b, c) {
	    if (a = (a = L(a)) && a.ea) {
	      if (b) if (b.nodeType === Node.DOCUMENT_FRAGMENT_NODE) for (var d = 0, e = b.childNodes.length; d < e; d++) {
	        a.addedNodes.push(b.childNodes[d]);
	      } else a.addedNodes.push(b);
	      c && a.removedNodes.push(c);
	      Uc(a);
	    }
	  }

	  var ze = Q({
	    get parentNode() {
	      var a = L(this);
	      a = a && a.parentNode;
	      return void 0 !== a ? a : this.__shady_native_parentNode;
	    },

	    get firstChild() {
	      var a = L(this);
	      a = a && a.firstChild;
	      return void 0 !== a ? a : this.__shady_native_firstChild;
	    },

	    get lastChild() {
	      var a = L(this);
	      a = a && a.lastChild;
	      return void 0 !== a ? a : this.__shady_native_lastChild;
	    },

	    get nextSibling() {
	      var a = L(this);
	      a = a && a.nextSibling;
	      return void 0 !== a ? a : this.__shady_native_nextSibling;
	    },

	    get previousSibling() {
	      var a = L(this);
	      a = a && a.previousSibling;
	      return void 0 !== a ? a : this.__shady_native_previousSibling;
	    },

	    get childNodes() {
	      if (vc(this)) {
	        var a = L(this);

	        if (!a.childNodes) {
	          a.childNodes = [];

	          for (var b = this.__shady_firstChild; b; b = b.__shady_nextSibling) {
	            a.childNodes.push(b);
	          }
	        }

	        var c = a.childNodes;
	      } else c = this.__shady_native_childNodes;

	      c.item = function (d) {
	        return c[d];
	      };

	      return c;
	    },

	    get parentElement() {
	      var a = L(this);
	      (a = a && a.parentNode) && a.nodeType !== Node.ELEMENT_NODE && (a = null);
	      return void 0 !== a ? a : this.__shady_native_parentElement;
	    },

	    get isConnected() {
	      if (ne && ne.call(this)) return !0;
	      if (this.nodeType == Node.DOCUMENT_FRAGMENT_NODE) return !1;
	      var a = this.ownerDocument;
	      if (null === a || Ec(a, this)) return !0;

	      for (a = this; a && !(a instanceof Document);) {
	        a = a.__shady_parentNode || (O(a) ? a.host : void 0);
	      }

	      return !!(a && a instanceof Document);
	    },

	    get textContent() {
	      if (vc(this)) {
	        for (var a = [], b = this.__shady_firstChild; b; b = b.__shady_nextSibling) {
	          b.nodeType !== Node.COMMENT_NODE && a.push(b.__shady_textContent);
	        }

	        return a.join("");
	      }

	      return this.__shady_native_textContent;
	    },

	    set textContent(a) {
	      if ("undefined" === typeof a || null === a) a = "";

	      switch (this.nodeType) {
	        case Node.ELEMENT_NODE:
	        case Node.DOCUMENT_FRAGMENT_NODE:
	          if (!vc(this) && N.H) {
	            var b = this.__shady_firstChild;
	            (b != this.__shady_lastChild || b && b.nodeType != Node.TEXT_NODE) && pe(this);
	            this.__shady_native_textContent = a;
	          } else pe(this), (0 < a.length || this.nodeType === Node.ELEMENT_NODE) && this.__shady_insertBefore(document.createTextNode(a));

	          break;

	        default:
	          this.nodeValue = a;
	      }
	    },

	    insertBefore: function insertBefore(a, b) {
	      if (this.ownerDocument !== ke && a.ownerDocument !== ke) return this.__shady_native_insertBefore(a, b), a;
	      if (a === this) throw Error("Failed to execute 'appendChild' on 'Node': The new child element contains the parent.");

	      if (b) {
	        var c = L(b);
	        c = c && c.parentNode;
	        if (void 0 !== c && c !== this || void 0 === c && b.__shady_native_parentNode !== this) throw Error("Failed to execute 'insertBefore' on 'Node': The node before which the new node is to be inserted is not a child of this node.");
	      }

	      if (b === a) return a;
	      se(this, a);
	      var d = [],
	          e = (c = te(this)) ? c.host.localName : ie(this),
	          f = a.__shady_parentNode;

	      if (f) {
	        var g = ie(a);
	        var h = !!c || !te(a) || le && void 0 !== this.__noInsertionPoint;

	        f.__shady_removeChild(a, h);
	      }

	      f = !0;
	      var k = (!le || void 0 === a.__noInsertionPoint && void 0 === this.__noInsertionPoint) && !he(a, e),
	          l = c && !a.__noInsertionPoint && (!le || a.nodeType === Node.DOCUMENT_FRAGMENT_NODE);
	      if (l || k) k && (g = g || ie(a)), je(a, function (m) {
	        l && "slot" === m.localName && d.push(m);

	        if (k) {
	          var q = g;
	          ee() && (q && ge(m, q), (q = ee()) && q.scopeNode(m, e));
	        }
	      });
	      d.length && (ue(c), c.i.push.apply(c.i, x(d)), ve(c));
	      vc(this) && (we(a, this, b), h = L(this), h.root ? (f = !1, wc(this) && ve(h.root)) : c && "slot" === this.localName && (f = !1, ve(c)));
	      f ? (c = O(this) ? this.host : this, b ? (b = re(b), c.__shady_native_insertBefore(a, b)) : c.__shady_native_appendChild(a)) : a.ownerDocument !== this.ownerDocument && this.ownerDocument.adoptNode(a);
	      return a;
	    },
	    appendChild: function appendChild(a) {
	      if (this != a || !O(a)) return this.__shady_insertBefore(a);
	    },
	    removeChild: function removeChild(a, b) {
	      b = void 0 === b ? !1 : b;
	      if (this.ownerDocument !== ke) return this.__shady_native_removeChild(a);
	      if (a.__shady_parentNode !== this) throw Error("The node to be removed is not a child of this node: " + a);
	      se(this, null, a);
	      var c = te(a),
	          d = c && xe(c, a),
	          e = L(this);

	      if (vc(this) && (ye(a, this), wc(this))) {
	        ve(e.root);
	        var f = !0;
	      }

	      if (ee() && !b && c && a.nodeType !== Node.TEXT_NODE) {
	        var g = ie(a);
	        je(a, function (h) {
	          ge(h, g);
	        });
	      }

	      qe(a);
	      c && ((b = "slot" === this.localName) && (f = !0), (d || b) && ve(c));
	      f || (f = O(this) ? this.host : this, (!e.root && "slot" !== a.localName || f === a.__shady_native_parentNode) && f.__shady_native_removeChild(a));
	      return a;
	    },
	    replaceChild: function replaceChild(a, b) {
	      this.__shady_insertBefore(a, b);

	      this.__shady_removeChild(b);

	      return a;
	    },
	    cloneNode: function cloneNode(a) {
	      if ("template" == this.localName) return this.__shady_native_cloneNode(a);

	      var b = this.__shady_native_cloneNode(!1);

	      if (a && b.nodeType !== Node.ATTRIBUTE_NODE) {
	        a = this.__shady_firstChild;

	        for (var c; a; a = a.__shady_nextSibling) {
	          c = a.__shady_cloneNode(!0), b.__shady_appendChild(c);
	        }
	      }

	      return b;
	    },
	    getRootNode: function getRootNode(a) {
	      if (this && this.nodeType) {
	        var b = D(this),
	            c = b.qa;
	        void 0 === c && (O(this) ? (c = this, b.qa = c) : (c = (c = this.__shady_parentNode) ? c.__shady_getRootNode(a) : this, document.documentElement.__shady_native_contains(this) && (b.qa = c)));
	        return c;
	      }
	    },
	    contains: function contains(a) {
	      return Gc(this, a);
	    }
	  });
	  var Be = Q({
	    get assignedSlot() {
	      var a = this.__shady_parentNode;
	      (a = a && a.__shady_shadowRoot) && Ae(a);
	      return (a = L(this)) && a.assignedSlot || null;
	    }

	  });

	  function Ce(a, b, c) {
	    var d = [];
	    De(a, b, c, d);
	    return d;
	  }

	  function De(a, b, c, d) {
	    for (a = a.__shady_firstChild; a; a = a.__shady_nextSibling) {
	      var e;

	      if (e = a.nodeType === Node.ELEMENT_NODE) {
	        e = a;
	        var f = b,
	            g = c,
	            h = d,
	            k = f(e);
	        k && h.push(e);
	        g && g(k) ? e = k : (De(e, f, g, h), e = void 0);
	      }

	      if (e) break;
	    }
	  }

	  var Ee = {
	    get firstElementChild() {
	      var a = L(this);

	      if (a && void 0 !== a.firstChild) {
	        for (a = this.__shady_firstChild; a && a.nodeType !== Node.ELEMENT_NODE;) {
	          a = a.__shady_nextSibling;
	        }

	        return a;
	      }

	      return this.__shady_native_firstElementChild;
	    },

	    get lastElementChild() {
	      var a = L(this);

	      if (a && void 0 !== a.lastChild) {
	        for (a = this.__shady_lastChild; a && a.nodeType !== Node.ELEMENT_NODE;) {
	          a = a.__shady_previousSibling;
	        }

	        return a;
	      }

	      return this.__shady_native_lastElementChild;
	    },

	    get children() {
	      return vc(this) ? Hc(Array.prototype.filter.call(Jc(this), function (a) {
	        return a.nodeType === Node.ELEMENT_NODE;
	      })) : this.__shady_native_children;
	    },

	    get childElementCount() {
	      var a = this.__shady_children;
	      return a ? a.length : 0;
	    }

	  },
	      Fe = Q((Ee.append = function (a) {
	    for (var b = [], c = 0; c < arguments.length; ++c) {
	      b[c] = arguments[c];
	    }

	    this.__shady_insertBefore(Oc.apply(null, x(b)), null);
	  }, Ee.prepend = function (a) {
	    for (var b = [], c = 0; c < arguments.length; ++c) {
	      b[c] = arguments[c];
	    }

	    this.__shady_insertBefore(Oc.apply(null, x(b)), this.__shady_firstChild);
	  }, Ee.replaceChildren = function (a) {
	    for (var b = [], c = 0; c < arguments.length; ++c) {
	      b[c] = arguments[c];
	    }

	    for (; null !== (c = this.__shady_firstChild);) {
	      this.__shady_removeChild(c);
	    }

	    this.__shady_insertBefore(Oc.apply(null, x(b)), null);
	  }, Ee)),
	      Ge = Q({
	    querySelector: function querySelector(a) {
	      return Ce(this, function (b) {
	        return zc.call(b, a);
	      }, function (b) {
	        return !!b;
	      })[0] || null;
	    },
	    querySelectorAll: function querySelectorAll(a, b) {
	      if (b) {
	        b = Array.prototype.slice.call(this.__shady_native_querySelectorAll(a));

	        var c = this.__shady_getRootNode();

	        return Hc(b.filter(function (d) {
	          return d.__shady_getRootNode() == c;
	        }));
	      }

	      return Hc(Ce(this, function (d) {
	        return zc.call(d, a);
	      }));
	    }
	  }),
	      He = N.fa && !N.J ? Mc({}, Fe) : Fe;
	  Mc(Fe, Ge);
	  var Ie = Q({
	    after: function after(a) {
	      for (var b = [], c = 0; c < arguments.length; ++c) {
	        b[c] = arguments[c];
	      }

	      c = this.__shady_parentNode;

	      if (null !== c) {
	        var d = this.__shady_nextSibling;

	        c.__shady_insertBefore(Oc.apply(null, x(b)), d);
	      }
	    },
	    before: function before(a) {
	      for (var b = [], c = 0; c < arguments.length; ++c) {
	        b[c] = arguments[c];
	      }

	      c = this.__shady_parentNode;
	      null !== c && c.__shady_insertBefore(Oc.apply(null, x(b)), this);
	    },
	    remove: function remove() {
	      var a = this.__shady_parentNode;
	      null !== a && a.__shady_removeChild(this);
	    },
	    replaceWith: function replaceWith(a) {
	      for (var b = [], c = 0; c < arguments.length; ++c) {
	        b[c] = arguments[c];
	      }

	      c = this.__shady_parentNode;

	      if (null !== c) {
	        var d = this.__shady_nextSibling;

	        c.__shady_removeChild(this);

	        c.__shady_insertBefore(Oc.apply(null, x(b)), d);
	      }
	    }
	  });
	  var Je = window.document;

	  function Ke(a, b) {
	    if ("slot" === b) a = a.__shady_parentNode, wc(a) && ve(L(a).root);else if ("slot" === a.localName && "name" === b && (b = te(a))) {
	      if (b.g) {
	        Le(b);
	        var c = a.Qa,
	            d = Me(a);

	        if (d !== c) {
	          c = b.h[c];
	          var e = c.indexOf(a);
	          0 <= e && c.splice(e, 1);
	          c = b.h[d] || (b.h[d] = []);
	          c.push(a);
	          1 < c.length && (b.h[d] = Ne(c));
	        }
	      }

	      ve(b);
	    }
	  }

	  var Oe = Q({
	    get previousElementSibling() {
	      var a = L(this);

	      if (a && void 0 !== a.previousSibling) {
	        for (a = this.__shady_previousSibling; a && a.nodeType !== Node.ELEMENT_NODE;) {
	          a = a.__shady_previousSibling;
	        }

	        return a;
	      }

	      return this.__shady_native_previousElementSibling;
	    },

	    get nextElementSibling() {
	      var a = L(this);

	      if (a && void 0 !== a.nextSibling) {
	        for (a = this.__shady_nextSibling; a && a.nodeType !== Node.ELEMENT_NODE;) {
	          a = a.__shady_nextSibling;
	        }

	        return a;
	      }

	      return this.__shady_native_nextElementSibling;
	    },

	    get slot() {
	      return this.getAttribute("slot");
	    },

	    set slot(a) {
	      this.__shady_setAttribute("slot", a);
	    },

	    get className() {
	      return this.getAttribute("class") || "";
	    },

	    set className(a) {
	      this.__shady_setAttribute("class", a);
	    },

	    setAttribute: function setAttribute(a, b) {
	      this.ownerDocument !== Je ? this.__shady_native_setAttribute(a, b) : fe(this, a, b) || (this.__shady_native_setAttribute(a, b), Ke(this, a));
	    },
	    removeAttribute: function removeAttribute(a) {
	      this.ownerDocument !== Je ? this.__shady_native_removeAttribute(a) : fe(this, a, "") ? "" === this.getAttribute(a) && this.__shady_native_removeAttribute(a) : (this.__shady_native_removeAttribute(a), Ke(this, a));
	    }
	  });
	  N.fa || Xd.forEach(function (a) {
	    Oe[a] = Zd(a);
	  });
	  var Te = Q({
	    attachShadow: function attachShadow(a) {
	      if (!this) throw Error("Must provide a host.");
	      if (!a) throw Error("Not enough arguments.");

	      if (a.shadyUpgradeFragment && !N.Na) {
	        var b = a.shadyUpgradeFragment;
	        b.__proto__ = ShadowRoot.prototype;
	        Pe(b, this, a);
	        Qe(b, b);
	        a = b.__noInsertionPoint ? null : b.querySelectorAll("slot");
	        b.__noInsertionPoint = void 0;

	        if (a && a.length) {
	          var c = b;
	          ue(c);
	          c.i.push.apply(c.i, x(a));
	          ve(b);
	        }

	        b.host.__shady_native_appendChild(b);
	      } else b = new Re(Se, this, a);

	      return this.__CE_shadowRoot = b;
	    },

	    get shadowRoot() {
	      var a = L(this);
	      return a && a.gb || null;
	    }

	  });
	  Mc(Oe, Te);
	  var Ue = document.implementation.createHTMLDocument("inert"),
	      Ve = Q({
	    get innerHTML() {
	      return vc(this) ? dd("template" === this.localName ? this.content : this, Jc) : this.__shady_native_innerHTML;
	    },

	    set innerHTML(a) {
	      if ("template" === this.localName) this.__shady_native_innerHTML = a;else {
	        pe(this);
	        var b = this.localName || "div";
	        b = this.namespaceURI && this.namespaceURI !== Ue.namespaceURI ? Ue.createElementNS(this.namespaceURI, b) : Ue.createElement(b);

	        for (N.H ? b.__shady_native_innerHTML = a : b.innerHTML = a; a = b.__shady_firstChild;) {
	          this.__shady_insertBefore(a);
	        }
	      }
	    }

	  });
	  var We = Q({
	    blur: function blur() {
	      var a = L(this);
	      (a = (a = a && a.root) && a.activeElement) ? a.__shady_blur() : this.__shady_native_blur();
	    }
	  });
	  N.fa || Yd.forEach(function (a) {
	    We[a] = Zd(a);
	  });
	  var Xe = Q({
	    assignedNodes: function assignedNodes(a) {
	      if ("slot" === this.localName) {
	        var b = this.__shady_getRootNode();

	        b && O(b) && Ae(b);
	        return (b = L(this)) ? (a && a.flatten ? b.aa : b.assignedNodes) || [] : [];
	      }
	    },
	    addEventListener: function addEventListener(a, b, c) {
	      if ("slot" !== this.localName || "slotchange" === a) Pd.call(this, a, b, c);else {
	        "object" !== _typeof(c) && (c = {
	          capture: !!c
	        });
	        var d = this.__shady_parentNode;
	        if (!d) throw Error("ShadyDOM cannot attach event to slot unless it has a `parentNode`");
	        c.U = this;

	        d.__shady_addEventListener(a, b, c);
	      }
	    },
	    removeEventListener: function removeEventListener(a, b, c) {
	      if ("slot" !== this.localName || "slotchange" === a) Qd.call(this, a, b, c);else {
	        "object" !== _typeof(c) && (c = {
	          capture: !!c
	        });
	        var d = this.__shady_parentNode;
	        if (!d) throw Error("ShadyDOM cannot attach event to slot unless it has a `parentNode`");
	        c.U = this;

	        d.__shady_removeEventListener(a, b, c);
	      }
	    }
	  });
	  var Ye = Q({
	    getElementById: function getElementById(a) {
	      return "" === a ? null : Ce(this, function (b) {
	        return b.id == a;
	      }, function (b) {
	        return !!b;
	      })[0] || null;
	    }
	  });

	  function Ze(a, b) {
	    for (var c; b && !a.has(c = b.__shady_getRootNode());) {
	      b = c.host;
	    }

	    return b;
	  }

	  function $e(a) {
	    var b = new Set();

	    for (b.add(a); O(a) && a.host;) {
	      a = a.host.__shady_getRootNode(), b.add(a);
	    }

	    return b;
	  }

	  var af = "__shady_native_" + uc(),
	      bf = Q({
	    get activeElement() {
	      var a = N.H ? document.__shady_native_activeElement : document.activeElement;
	      if (!a || !a.nodeType) return null;
	      var b = !!O(this);
	      if (!(this === document || b && this.host !== a && this.host.__shady_native_contains(a))) return null;

	      for (b = te(a); b && b !== this;) {
	        a = b.host, b = te(a);
	      }

	      return this === document ? b ? null : a : b === this ? a : null;
	    },

	    elementsFromPoint: function elementsFromPoint(a, b) {
	      a = [].slice.call(document[af](a, b));
	      b = $e(this);

	      for (var c = new Set(), d = 0; d < a.length; d++) {
	        c.add(Ze(b, a[d]));
	      }

	      var e = [];
	      c.forEach(function (f) {
	        return e.push(f);
	      });
	      return e;
	    },
	    elementFromPoint: function elementFromPoint(a, b) {
	      return this.__shady_elementsFromPoint(a, b)[0] || null;
	    }
	  });
	  var cf = window.document,
	      df = Q({
	    importNode: function importNode(a, b) {
	      if (a.ownerDocument !== cf || "template" === a.localName) return this.__shady_native_importNode(a, b);

	      var c = this.__shady_native_importNode(a, !1);

	      if (b) for (a = a.__shady_firstChild; a; a = a.__shady_nextSibling) {
	        b = this.__shady_importNode(a, !0), c.__shady_appendChild(b);
	      }
	      return c;
	    }
	  });
	  var ef = Q({
	    dispatchEvent: Nd,
	    addEventListener: Pd.bind(window),
	    removeEventListener: Qd.bind(window)
	  });
	  var ff = {};
	  Object.getOwnPropertyDescriptor(HTMLElement.prototype, "parentElement") && (ff.parentElement = ze.parentElement);
	  Object.getOwnPropertyDescriptor(HTMLElement.prototype, "contains") && (ff.contains = ze.contains);
	  Object.getOwnPropertyDescriptor(HTMLElement.prototype, "children") && (ff.children = Fe.children);
	  Object.getOwnPropertyDescriptor(HTMLElement.prototype, "innerHTML") && (ff.innerHTML = Ve.innerHTML);
	  Object.getOwnPropertyDescriptor(HTMLElement.prototype, "className") && (ff.className = Oe.className);
	  var gf = {
	    EventTarget: [ce],
	    Node: [ze, window.EventTarget ? null : ce],
	    Text: [Be],
	    Comment: [Be],
	    CDATASection: [Be],
	    ProcessingInstruction: [Be],
	    Element: [Oe, Fe, Ie, Be, !N.H || "innerHTML" in Element.prototype ? Ve : null, window.HTMLSlotElement ? null : Xe],
	    HTMLElement: [We, ff],
	    HTMLSlotElement: [Xe],
	    DocumentFragment: [He, Ye],
	    Document: [df, He, Ye, bf],
	    Window: [ef],
	    CharacterData: [Ie]
	  },
	      hf = N.H ? null : ["innerHTML", "textContent"];

	  function jf(a, b, c, d) {
	    b.forEach(function (e) {
	      return a && e && P(a, e, c, d);
	    });
	  }

	  function kf(a) {
	    var b = a ? null : hf,
	        c;

	    for (c in gf) {
	      jf(window[c] && window[c].prototype, gf[c], a, b);
	    }
	  }

	  ["Text", "Comment", "CDATASection", "ProcessingInstruction"].forEach(function (a) {
	    var b = window[a],
	        c = Object.create(b.prototype);
	    c.__shady_protoIsPatched = !0;
	    jf(c, gf.EventTarget);
	    jf(c, gf.Node);
	    gf[a] && jf(c, gf[a]);
	    b.prototype.__shady_patchedProto = c;
	  });

	  function lf(a) {
	    a.__shady_protoIsPatched = !0;
	    jf(a, gf.EventTarget);
	    jf(a, gf.Node);
	    jf(a, gf.Element);
	    jf(a, gf.HTMLElement);
	    jf(a, gf.HTMLSlotElement);
	    return a;
	  }
	  var mf = N.Aa,
	      nf = N.H;

	  function of(a, b) {
	    if (mf && !a.__shady_protoIsPatched && !O(a)) {
	      var c = Object.getPrototypeOf(a),
	          d = c.hasOwnProperty("__shady_patchedProto") && c.__shady_patchedProto;

	      d || (d = Object.create(c), lf(d), c.__shady_patchedProto = d);
	      Object.setPrototypeOf(a, d);
	    }

	    nf || (1 === b ? vd(a) : 2 === b && wd(a));
	  }

	  function pf(a, b, c, d) {
	    of(a, 1);
	    d = d || null;
	    var e = D(a),
	        f = d ? D(d) : null;
	    e.previousSibling = d ? f.previousSibling : b.__shady_lastChild;
	    if (f = L(e.previousSibling)) f.nextSibling = a;
	    if (f = L(e.nextSibling = d)) f.previousSibling = a;
	    e.parentNode = b;
	    d ? d === c.firstChild && (c.firstChild = a) : (c.lastChild = a, c.firstChild || (c.firstChild = a));
	    c.childNodes = null;
	  }

	  function we(a, b, c) {
	    of(b, 2);
	    var d = D(b);
	    void 0 !== d.firstChild && (d.childNodes = null);
	    if (a.nodeType === Node.DOCUMENT_FRAGMENT_NODE) for (a = a.__shady_native_firstChild; a; a = a.__shady_native_nextSibling) {
	      pf(a, b, d, c);
	    } else pf(a, b, d, c);
	  }

	  function ye(a, b) {
	    var c = D(a);
	    b = D(b);
	    a === b.firstChild && (b.firstChild = c.nextSibling);
	    a === b.lastChild && (b.lastChild = c.previousSibling);
	    a = c.previousSibling;
	    var d = c.nextSibling;
	    a && (D(a).nextSibling = d);
	    d && (D(d).previousSibling = a);
	    c.parentNode = c.previousSibling = c.nextSibling = void 0;
	    void 0 !== b.childNodes && (b.childNodes = null);
	  }

	  function Qe(a, b) {
	    var c = D(a);

	    if (b || void 0 === c.firstChild) {
	      c.childNodes = null;
	      var d = c.firstChild = a.__shady_native_firstChild;
	      c.lastChild = a.__shady_native_lastChild;
	      of(a, 2);
	      c = d;

	      for (d = void 0; c; c = c.__shady_native_nextSibling) {
	        var e = D(c);
	        e.parentNode = b || a;
	        e.nextSibling = c.__shady_native_nextSibling;
	        e.previousSibling = d || null;
	        d = c;
	        of(c, 1);
	      }
	    }
	  }
	  var qf = Q({
	    addEventListener: function addEventListener(a, b, c) {
	      "object" !== _typeof(c) && (c = {
	        capture: !!c
	      });
	      c.U = c.U || this;

	      this.host.__shady_addEventListener(a, b, c);
	    },
	    removeEventListener: function removeEventListener(a, b, c) {
	      "object" !== _typeof(c) && (c = {
	        capture: !!c
	      });
	      c.U = c.U || this;

	      this.host.__shady_removeEventListener(a, b, c);
	    }
	  });

	  function rf(a, b) {
	    P(a, qf, b);
	    P(a, bf, b);
	    P(a, Ve, b);
	    P(a, Fe, b);
	    N.J && !b ? (P(a, ze, b), P(a, Ye, b)) : N.H || (P(a, sd), P(a, qd), P(a, rd));
	  }
	  var Se = {},
	      sf = N.deferConnectionCallbacks && "loading" === document.readyState,
	      tf;

	  function uf(a) {
	    var b = [];

	    do {
	      b.unshift(a);
	    } while (a = a.__shady_parentNode);

	    return b;
	  }

	  function Re(a, b, c) {
	    if (a !== Se) throw new TypeError("Illegal constructor");
	    this.g = null;
	    Pe(this, b, c);
	  }

	  function Pe(a, b, c) {
	    a.host = b;
	    a.mode = c && c.mode;
	    Qe(a.host);
	    b = D(a.host);
	    b.root = a;
	    b.gb = "closed" !== a.mode ? a : null;
	    b = D(a);
	    b.firstChild = b.lastChild = b.parentNode = b.nextSibling = b.previousSibling = null;
	    if (N.preferPerformance) for (; b = a.host.__shady_native_firstChild;) {
	      a.host.__shady_native_removeChild(b);
	    } else ve(a);
	  }

	  function ve(a) {
	    a.Y || (a.Y = !0, Rc(function () {
	      return Ae(a);
	    }));
	  }

	  function Ae(a) {
	    var b;

	    if (b = a.Y) {
	      for (var c; a;) {
	        a: {
	          a.Y && (c = a), b = a;
	          a = b.host.__shady_getRootNode();
	          if (O(a) && (b = L(b.host)) && 0 < b.ia) break a;
	          a = void 0;
	        }
	      }

	      b = c;
	    }

	    (c = b) && c._renderSelf();
	  }

	  Re.prototype._renderSelf = function () {
	    var a = sf;
	    sf = !0;
	    this.Y = !1;

	    if (this.g) {
	      Le(this);

	      for (var b = 0, c; b < this.g.length; b++) {
	        c = this.g[b];
	        var d = L(c),
	            e = d.assignedNodes;
	        d.assignedNodes = [];
	        d.aa = [];
	        if (d.Ga = e) for (d = 0; d < e.length; d++) {
	          var f = L(e[d]);
	          f.ua = f.assignedSlot;
	          f.assignedSlot === c && (f.assignedSlot = null);
	        }
	      }

	      for (b = this.host.__shady_firstChild; b; b = b.__shady_nextSibling) {
	        vf(this, b);
	      }

	      for (b = 0; b < this.g.length; b++) {
	        c = this.g[b];
	        e = L(c);
	        if (!e.assignedNodes.length) for (d = c.__shady_firstChild; d; d = d.__shady_nextSibling) {
	          vf(this, d, c);
	        }
	        (d = (d = L(c.__shady_parentNode)) && d.root) && (xc(d) || d.Y) && d._renderSelf();
	        wf(this, e.aa, e.assignedNodes);

	        if (d = e.Ga) {
	          for (f = 0; f < d.length; f++) {
	            L(d[f]).ua = null;
	          }

	          e.Ga = null;
	          d.length > e.assignedNodes.length && (e.xa = !0);
	        }

	        e.xa && (e.xa = !1, xf(this, c));
	      }

	      c = this.g;
	      b = [];

	      for (e = 0; e < c.length; e++) {
	        d = c[e].__shady_parentNode, (f = L(d)) && f.root || !(0 > b.indexOf(d)) || b.push(d);
	      }

	      for (c = 0; c < b.length; c++) {
	        f = b[c];
	        e = f === this ? this.host : f;
	        d = [];

	        for (f = f.__shady_firstChild; f; f = f.__shady_nextSibling) {
	          if ("slot" == f.localName) for (var g = L(f).aa, h = 0; h < g.length; h++) {
	            d.push(g[h]);
	          } else d.push(f);
	        }

	        f = Ic(e);
	        g = ae(d, d.length, f, f.length);

	        for (var k = h = 0, l = void 0; h < g.length && (l = g[h]); h++) {
	          for (var m = 0, q = void 0; m < l.ga.length && (q = l.ga[m]); m++) {
	            q.__shady_native_parentNode === e && e.__shady_native_removeChild(q), f.splice(l.index + k, 1);
	          }

	          k -= l.na;
	        }

	        k = 0;

	        for (l = void 0; k < g.length && (l = g[k]); k++) {
	          for (h = f[l.index], m = l.index; m < l.index + l.na; m++) {
	            q = d[m], e.__shady_native_insertBefore(q, h), f.splice(m, 0, q);
	          }
	        }
	      }
	    }

	    if (!N.preferPerformance && !this.Fa) for (b = this.host.__shady_firstChild; b; b = b.__shady_nextSibling) {
	      c = L(b), b.__shady_native_parentNode !== this.host || "slot" !== b.localName && c.assignedSlot || this.host.__shady_native_removeChild(b);
	    }
	    this.Fa = !0;
	    sf = a;
	    tf && tf();
	  };

	  function vf(a, b, c) {
	    var d = D(b),
	        e = d.ua;
	    d.ua = null;
	    c || (c = (a = a.h[b.__shady_slot || "__catchall"]) && a[0]);
	    c ? (D(c).assignedNodes.push(b), d.assignedSlot = c) : d.assignedSlot = void 0;
	    e !== d.assignedSlot && d.assignedSlot && (D(d.assignedSlot).xa = !0);
	  }

	  function wf(a, b, c) {
	    for (var d = 0, e = void 0; d < c.length && (e = c[d]); d++) {
	      if ("slot" == e.localName) {
	        var f = L(e).assignedNodes;
	        f && f.length && wf(a, b, f);
	      } else b.push(c[d]);
	    }
	  }

	  function xf(a, b) {
	    b.__shady_native_dispatchEvent(new Event("slotchange"));

	    b = L(b);
	    b.assignedSlot && xf(a, b.assignedSlot);
	  }

	  function ue(a) {
	    a.i = a.i || [];
	    a.g = a.g || [];
	    a.h = a.h || {};
	  }

	  function Le(a) {
	    if (a.i && a.i.length) {
	      for (var b = a.i, c, d = 0; d < b.length; d++) {
	        var e = b[d];
	        Qe(e);
	        var f = e.__shady_parentNode;
	        Qe(f);
	        f = L(f);
	        f.ia = (f.ia || 0) + 1;
	        f = Me(e);
	        a.h[f] ? (c = c || {}, c[f] = !0, a.h[f].push(e)) : a.h[f] = [e];
	        a.g.push(e);
	      }

	      if (c) for (var g in c) {
	        a.h[g] = Ne(a.h[g]);
	      }
	      a.i = [];
	    }
	  }

	  function Me(a) {
	    var b = a.name || a.getAttribute("name") || "__catchall";
	    return a.Qa = b;
	  }

	  function Ne(a) {
	    return a.sort(function (b, c) {
	      b = uf(b);

	      for (var d = uf(c), e = 0; e < b.length; e++) {
	        c = b[e];
	        var f = d[e];
	        if (c !== f) return b = Jc(c.__shady_parentNode), b.indexOf(c) - b.indexOf(f);
	      }
	    });
	  }

	  function xe(a, b) {
	    if (a.g) {
	      Le(a);
	      var c = a.h,
	          d;

	      for (d in c) {
	        for (var e = c[d], f = 0; f < e.length; f++) {
	          var g = e[f];

	          if (Gc(b, g)) {
	            e.splice(f, 1);
	            var h = a.g.indexOf(g);
	            0 <= h && (a.g.splice(h, 1), (h = L(g.__shady_parentNode)) && h.ia && h.ia--);
	            f--;
	            g = L(g);
	            if (h = g.aa) for (var k = 0; k < h.length; k++) {
	              var l = h[k],
	                  m = l.__shady_native_parentNode;
	              m && m.__shady_native_removeChild(l);
	            }
	            g.aa = [];
	            g.assignedNodes = [];
	            h = !0;
	          }
	        }
	      }

	      return h;
	    }
	  }

	  function xc(a) {
	    Le(a);
	    return !(!a.g || !a.g.length);
	  }

	  (function (a) {
	    a.__proto__ = DocumentFragment.prototype;
	    rf(a, "__shady_");
	    rf(a);
	    Object.defineProperties(a, {
	      nodeType: {
	        value: Node.DOCUMENT_FRAGMENT_NODE,
	        configurable: !0
	      },
	      nodeName: {
	        value: "#document-fragment",
	        configurable: !0
	      },
	      nodeValue: {
	        value: null,
	        configurable: !0
	      }
	    });
	    ["localName", "namespaceURI", "prefix"].forEach(function (b) {
	      Object.defineProperty(a, b, {
	        value: void 0,
	        configurable: !0
	      });
	    });
	    ["ownerDocument", "baseURI", "isConnected"].forEach(function (b) {
	      Object.defineProperty(a, b, {
	        get: function get() {
	          return this.host[b];
	        },
	        configurable: !0
	      });
	    });
	  })(Re.prototype);

	  if (window.customElements && window.customElements.define && N.ya && !N.preferPerformance) {
	    var yf = new Map();

	    tf = function tf() {
	      var a = [];
	      yf.forEach(function (d, e) {
	        a.push([e, d]);
	      });
	      yf.clear();

	      for (var b = 0; b < a.length; b++) {
	        var c = a[b][0];
	        a[b][1] ? c.__shadydom_connectedCallback() : c.__shadydom_disconnectedCallback();
	      }
	    };

	    sf && document.addEventListener("readystatechange", function () {
	      sf = !1;
	      tf();
	    }, {
	      once: !0
	    });

	    var zf = function zf(a, b, c) {
	      var d = 0,
	          e = "__isConnected" + d++;
	      if (b || c) a.prototype.connectedCallback = a.prototype.__shadydom_connectedCallback = function () {
	        sf ? yf.set(this, !0) : this[e] || (this[e] = !0, b && b.call(this));
	      }, a.prototype.disconnectedCallback = a.prototype.__shadydom_disconnectedCallback = function () {
	        sf ? this.isConnected || yf.set(this, !1) : this[e] && (this[e] = !1, c && c.call(this));
	      };
	      return a;
	    },
	        Af = window.customElements.define,
	        Bf = function Bf(a, b) {
	      var c = b.prototype.connectedCallback,
	          d = b.prototype.disconnectedCallback;
	      Af.call(window.customElements, a, zf(b, c, d));
	      b.prototype.connectedCallback = c;
	      b.prototype.disconnectedCallback = d;
	    };

	    window.customElements.define = Bf;
	    Object.defineProperty(window.CustomElementRegistry.prototype, "define", {
	      value: Bf,
	      configurable: !0
	    });
	  }

	  function te(a) {
	    a = a.__shady_getRootNode();
	    if (O(a)) return a;
	  }

	  function Cf(a) {
	    this.node = a;
	  }

	  v = Cf.prototype;

	  v.addEventListener = function (a, b, c) {
	    return this.node.__shady_addEventListener(a, b, c);
	  };

	  v.removeEventListener = function (a, b, c) {
	    return this.node.__shady_removeEventListener(a, b, c);
	  };

	  v.appendChild = function (a) {
	    return this.node.__shady_appendChild(a);
	  };

	  v.insertBefore = function (a, b) {
	    return this.node.__shady_insertBefore(a, b);
	  };

	  v.removeChild = function (a) {
	    return this.node.__shady_removeChild(a);
	  };

	  v.replaceChild = function (a, b) {
	    return this.node.__shady_replaceChild(a, b);
	  };

	  v.cloneNode = function (a) {
	    return this.node.__shady_cloneNode(a);
	  };

	  v.getRootNode = function (a) {
	    return this.node.__shady_getRootNode(a);
	  };

	  v.contains = function (a) {
	    return this.node.__shady_contains(a);
	  };

	  v.dispatchEvent = function (a) {
	    return this.node.__shady_dispatchEvent(a);
	  };

	  v.setAttribute = function (a, b) {
	    this.node.__shady_setAttribute(a, b);
	  };

	  v.getAttribute = function (a) {
	    return this.node.__shady_native_getAttribute(a);
	  };

	  v.hasAttribute = function (a) {
	    return this.node.__shady_native_hasAttribute(a);
	  };

	  v.removeAttribute = function (a) {
	    this.node.__shady_removeAttribute(a);
	  };

	  v.attachShadow = function (a) {
	    return this.node.__shady_attachShadow(a);
	  };

	  v.focus = function () {
	    this.node.__shady_native_focus();
	  };

	  v.blur = function () {
	    this.node.__shady_blur();
	  };

	  v.importNode = function (a, b) {
	    if (this.node.nodeType === Node.DOCUMENT_NODE) return this.node.__shady_importNode(a, b);
	  };

	  v.getElementById = function (a) {
	    if (this.node.nodeType === Node.DOCUMENT_NODE) return this.node.__shady_getElementById(a);
	  };

	  v.elementsFromPoint = function (a, b) {
	    return this.node.__shady_elementsFromPoint(a, b);
	  };

	  v.elementFromPoint = function (a, b) {
	    return this.node.__shady_elementFromPoint(a, b);
	  };

	  v.querySelector = function (a) {
	    return this.node.__shady_querySelector(a);
	  };

	  v.querySelectorAll = function (a, b) {
	    return this.node.__shady_querySelectorAll(a, b);
	  };

	  v.assignedNodes = function (a) {
	    if ("slot" === this.node.localName) return this.node.__shady_assignedNodes(a);
	  };

	  v.append = function (a) {
	    for (var b = [], c = 0; c < arguments.length; ++c) {
	      b[c] = arguments[c];
	    }

	    return this.node.__shady_append.apply(this.node, x(b));
	  };

	  v.prepend = function (a) {
	    for (var b = [], c = 0; c < arguments.length; ++c) {
	      b[c] = arguments[c];
	    }

	    return this.node.__shady_prepend.apply(this.node, x(b));
	  };

	  v.after = function (a) {
	    for (var b = [], c = 0; c < arguments.length; ++c) {
	      b[c] = arguments[c];
	    }

	    return this.node.__shady_after.apply(this.node, x(b));
	  };

	  v.before = function (a) {
	    for (var b = [], c = 0; c < arguments.length; ++c) {
	      b[c] = arguments[c];
	    }

	    return this.node.__shady_before.apply(this.node, x(b));
	  };

	  v.remove = function () {
	    return this.node.__shady_remove();
	  };

	  v.replaceWith = function (a) {
	    for (var b = [], c = 0; c < arguments.length; ++c) {
	      b[c] = arguments[c];
	    }

	    return this.node.__shady_replaceWith.apply(this.node, x(b));
	  };

	  ea.Object.defineProperties(Cf.prototype, {
	    activeElement: {
	      configurable: !0,
	      enumerable: !0,
	      get: function get() {
	        if (O(this.node) || this.node.nodeType === Node.DOCUMENT_NODE) return this.node.__shady_activeElement;
	      }
	    },
	    _activeElement: {
	      configurable: !0,
	      enumerable: !0,
	      get: function get() {
	        return this.activeElement;
	      }
	    },
	    host: {
	      configurable: !0,
	      enumerable: !0,
	      get: function get() {
	        if (O(this.node)) return this.node.host;
	      }
	    },
	    parentNode: {
	      configurable: !0,
	      enumerable: !0,
	      get: function get() {
	        return this.node.__shady_parentNode;
	      }
	    },
	    firstChild: {
	      configurable: !0,
	      enumerable: !0,
	      get: function get() {
	        return this.node.__shady_firstChild;
	      }
	    },
	    lastChild: {
	      configurable: !0,
	      enumerable: !0,
	      get: function get() {
	        return this.node.__shady_lastChild;
	      }
	    },
	    nextSibling: {
	      configurable: !0,
	      enumerable: !0,
	      get: function get() {
	        return this.node.__shady_nextSibling;
	      }
	    },
	    previousSibling: {
	      configurable: !0,
	      enumerable: !0,
	      get: function get() {
	        return this.node.__shady_previousSibling;
	      }
	    },
	    childNodes: {
	      configurable: !0,
	      enumerable: !0,
	      get: function get() {
	        return this.node.__shady_childNodes;
	      }
	    },
	    parentElement: {
	      configurable: !0,
	      enumerable: !0,
	      get: function get() {
	        return this.node.__shady_parentElement;
	      }
	    },
	    firstElementChild: {
	      configurable: !0,
	      enumerable: !0,
	      get: function get() {
	        return this.node.__shady_firstElementChild;
	      }
	    },
	    lastElementChild: {
	      configurable: !0,
	      enumerable: !0,
	      get: function get() {
	        return this.node.__shady_lastElementChild;
	      }
	    },
	    nextElementSibling: {
	      configurable: !0,
	      enumerable: !0,
	      get: function get() {
	        return this.node.__shady_nextElementSibling;
	      }
	    },
	    previousElementSibling: {
	      configurable: !0,
	      enumerable: !0,
	      get: function get() {
	        return this.node.__shady_previousElementSibling;
	      }
	    },
	    children: {
	      configurable: !0,
	      enumerable: !0,
	      get: function get() {
	        return this.node.__shady_children;
	      }
	    },
	    childElementCount: {
	      configurable: !0,
	      enumerable: !0,
	      get: function get() {
	        return this.node.__shady_childElementCount;
	      }
	    },
	    shadowRoot: {
	      configurable: !0,
	      enumerable: !0,
	      get: function get() {
	        return this.node.__shady_shadowRoot;
	      }
	    },
	    assignedSlot: {
	      configurable: !0,
	      enumerable: !0,
	      get: function get() {
	        return this.node.__shady_assignedSlot;
	      }
	    },
	    isConnected: {
	      configurable: !0,
	      enumerable: !0,
	      get: function get() {
	        return this.node.__shady_isConnected;
	      }
	    },
	    innerHTML: {
	      configurable: !0,
	      enumerable: !0,
	      get: function get() {
	        return this.node.__shady_innerHTML;
	      },
	      set: function set(a) {
	        this.node.__shady_innerHTML = a;
	      }
	    },
	    textContent: {
	      configurable: !0,
	      enumerable: !0,
	      get: function get() {
	        return this.node.__shady_textContent;
	      },
	      set: function set(a) {
	        this.node.__shady_textContent = a;
	      }
	    },
	    slot: {
	      configurable: !0,
	      enumerable: !0,
	      get: function get() {
	        return this.node.__shady_slot;
	      },
	      set: function set(a) {
	        this.node.__shady_slot = a;
	      }
	    },
	    className: {
	      configurable: !0,
	      enumerable: !0,
	      get: function get() {
	        return this.node.__shady_className;
	      },
	      set: function set(a) {
	        this.node.__shady_className = a;
	      }
	    }
	  });

	  function Df(a) {
	    Object.defineProperty(Cf.prototype, a, {
	      get: function get() {
	        return this.node["__shady_" + a];
	      },
	      set: function set(b) {
	        this.node["__shady_" + a] = b;
	      },
	      configurable: !0
	    });
	  }

	  Xd.forEach(function (a) {
	    return Df(a);
	  });
	  Yd.forEach(function (a) {
	    return Df(a);
	  });
	  var Ef = new WeakMap();

	  function Ff(a) {
	    if (O(a) || a instanceof Cf) return a;
	    var b = Ef.get(a);
	    b || (b = new Cf(a), Ef.set(a, b));
	    return b;
	  }

	  if (N.ya) {
	    var Gf = N.H ? function (a) {
	      return a;
	    } : function (a) {
	      wd(a);
	      vd(a);
	      return a;
	    },
	        ShadyDOM = {
	      inUse: N.ya,
	      patch: Gf,
	      isShadyRoot: O,
	      enqueue: Rc,
	      flush: Sc,
	      flushInitial: function flushInitial(a) {
	        !a.Fa && a.Y && Ae(a);
	      },
	      settings: N,
	      filterMutations: Xc,
	      observeChildren: Vc,
	      unobserveChildren: Wc,
	      deferConnectionCallbacks: N.deferConnectionCallbacks,
	      preferPerformance: N.preferPerformance,
	      handlesDynamicScoping: !0,
	      wrap: N.J ? Ff : Gf,
	      wrapIfNeeded: !0 === N.J ? Ff : function (a) {
	        return a;
	      },
	      Wrapper: Cf,
	      composedPath: Fd,
	      noPatch: N.J,
	      patchOnDemand: N.Aa,
	      nativeMethods: fd,
	      nativeTree: gd,
	      patchElementProto: lf
	    };
	    window.ShadyDOM = ShadyDOM;
	    pd();
	    kf("__shady_");
	    Object.defineProperty(document, "_activeElement", bf.activeElement);
	    P(Window.prototype, ef, "__shady_");
	    N.J ? N.Aa && P(Element.prototype, Te) : (kf(), Wd());
	    Rd();
	    window.Event = Td;
	    window.CustomEvent = Ud;
	    window.MouseEvent = Vd;
	    window.ShadowRoot = Re;
	  }
	  var Hf = window.Document.prototype.createElement,
	      If = window.Document.prototype.createElementNS,
	      Jf = window.Document.prototype.importNode,
	      Kf = window.Document.prototype.prepend,
	      Lf = window.Document.prototype.append,
	      Mf = window.DocumentFragment.prototype.prepend,
	      Nf = window.DocumentFragment.prototype.append,
	      Of = window.Node.prototype.cloneNode,
	      Pf = window.Node.prototype.appendChild,
	      Qf = window.Node.prototype.insertBefore,
	      Rf = window.Node.prototype.removeChild,
	      Sf = window.Node.prototype.replaceChild,
	      Tf = Object.getOwnPropertyDescriptor(window.Node.prototype, "textContent"),
	      Uf = window.Element.prototype.attachShadow,
	      Vf = Object.getOwnPropertyDescriptor(window.Element.prototype, "innerHTML"),
	      Wf = window.Element.prototype.getAttribute,
	      Xf = window.Element.prototype.setAttribute,
	      Yf = window.Element.prototype.removeAttribute,
	      Zf = window.Element.prototype.getAttributeNS,
	      $f = window.Element.prototype.setAttributeNS,
	      ag = window.Element.prototype.removeAttributeNS,
	      bg = window.Element.prototype.insertAdjacentElement,
	      cg = window.Element.prototype.insertAdjacentHTML,
	      dg = window.Element.prototype.prepend,
	      eg = window.Element.prototype.append,
	      fg = window.Element.prototype.before,
	      gg = window.Element.prototype.after,
	      hg = window.Element.prototype.replaceWith,
	      ig = window.Element.prototype.remove,
	      jg = window.HTMLElement,
	      kg = Object.getOwnPropertyDescriptor(window.HTMLElement.prototype, "innerHTML"),
	      lg = window.HTMLElement.prototype.insertAdjacentElement,
	      mg = window.HTMLElement.prototype.insertAdjacentHTML;
	  var ng = new Set();
	  "annotation-xml color-profile font-face font-face-src font-face-uri font-face-format font-face-name missing-glyph".split(" ").forEach(function (a) {
	    return ng.add(a);
	  });

	  function og(a) {
	    var b = ng.has(a);
	    a = /^[a-z][.0-9_a-z]*-[-.0-9_a-z]*$/.test(a);
	    return !b && a;
	  }

	  var pg = document.contains ? document.contains.bind(document) : document.documentElement.contains.bind(document.documentElement);

	  function T(a) {
	    var b = a.isConnected;
	    if (void 0 !== b) return b;
	    if (pg(a)) return !0;

	    for (; a && !(a.__CE_isImportDocument || a instanceof Document);) {
	      a = a.parentNode || (window.ShadowRoot && a instanceof ShadowRoot ? a.host : void 0);
	    }

	    return !(!a || !(a.__CE_isImportDocument || a instanceof Document));
	  }

	  function qg(a) {
	    var b = a.children;
	    if (b) return Array.prototype.slice.call(b);
	    b = [];

	    for (a = a.firstChild; a; a = a.nextSibling) {
	      a.nodeType === Node.ELEMENT_NODE && b.push(a);
	    }

	    return b;
	  }

	  function rg(a, b) {
	    for (; b && b !== a && !b.nextSibling;) {
	      b = b.parentNode;
	    }

	    return b && b !== a ? b.nextSibling : null;
	  }

	  function sg(a, b, c) {
	    for (var d = a; d;) {
	      if (d.nodeType === Node.ELEMENT_NODE) {
	        var e = d;
	        b(e);
	        var f = e.localName;

	        if ("link" === f && "import" === e.getAttribute("rel")) {
	          d = e.import;
	          void 0 === c && (c = new Set());
	          if (d instanceof Node && !c.has(d)) for (c.add(d), d = d.firstChild; d; d = d.nextSibling) {
	            sg(d, b, c);
	          }
	          d = rg(a, e);
	          continue;
	        } else if ("template" === f) {
	          d = rg(a, e);
	          continue;
	        }

	        if (e = e.__CE_shadowRoot) for (e = e.firstChild; e; e = e.nextSibling) {
	          sg(e, b, c);
	        }
	      }

	      d = d.firstChild ? d.firstChild : rg(a, d);
	    }
	  }

	  function tg() {
	    var a = !(null === ug || void 0 === ug || !ug.noDocumentConstructionObserver),
	        b = !(null === ug || void 0 === ug || !ug.shadyDomFastWalk);
	    this.ca = [];
	    this.g = [];
	    this.W = !1;
	    this.shadyDomFastWalk = b;
	    this.nb = !a;
	  }

	  function vg(a, b, c, d) {
	    var e = window.ShadyDOM;

	    if (a.shadyDomFastWalk && e && e.inUse) {
	      if (b.nodeType === Node.ELEMENT_NODE && c(b), b.querySelectorAll) for (a = e.nativeMethods.querySelectorAll.call(b, "*"), b = 0; b < a.length; b++) {
	        c(a[b]);
	      }
	    } else sg(b, c, d);
	  }

	  function wg(a, b) {
	    a.W = !0;
	    a.ca.push(b);
	  }

	  function xg(a, b) {
	    a.W = !0;
	    a.g.push(b);
	  }

	  function yg(a, b) {
	    a.W && vg(a, b, function (c) {
	      return zg(a, c);
	    });
	  }

	  function zg(a, b) {
	    if (a.W && !b.__CE_patched) {
	      b.__CE_patched = !0;

	      for (var c = 0; c < a.ca.length; c++) {
	        a.ca[c](b);
	      }

	      for (c = 0; c < a.g.length; c++) {
	        a.g[c](b);
	      }
	    }
	  }

	  function Ag(a, b) {
	    var c = [];
	    vg(a, b, function (e) {
	      return c.push(e);
	    });

	    for (b = 0; b < c.length; b++) {
	      var d = c[b];
	      1 === d.__CE_state ? a.connectedCallback(d) : Bg(a, d);
	    }
	  }

	  function Cg(a, b) {
	    var c = [];
	    vg(a, b, function (e) {
	      return c.push(e);
	    });

	    for (b = 0; b < c.length; b++) {
	      var d = c[b];
	      1 === d.__CE_state && a.disconnectedCallback(d);
	    }
	  }

	  function Dg(a, b, c) {
	    c = void 0 === c ? {} : c;

	    var d = c.ob,
	        e = c.upgrade || function (g) {
	      return Bg(a, g);
	    },
	        f = [];

	    vg(a, b, function (g) {
	      a.W && zg(a, g);

	      if ("link" === g.localName && "import" === g.getAttribute("rel")) {
	        var h = g.import;
	        h instanceof Node && (h.__CE_isImportDocument = !0, h.__CE_registry = document.__CE_registry);
	        h && "complete" === h.readyState ? h.__CE_documentLoadHandled = !0 : g.addEventListener("load", function () {
	          var k = g.import;

	          if (!k.__CE_documentLoadHandled) {
	            k.__CE_documentLoadHandled = !0;
	            var l = new Set();
	            d && (d.forEach(function (m) {
	              return l.add(m);
	            }), l.delete(k));
	            Dg(a, k, {
	              ob: l,
	              upgrade: e
	            });
	          }
	        });
	      } else f.push(g);
	    }, d);

	    for (b = 0; b < f.length; b++) {
	      e(f[b]);
	    }
	  }

	  function Bg(a, b) {
	    try {
	      var c = b.ownerDocument,
	          d = c.__CE_registry;
	      var e = d && (c.defaultView || c.__CE_isImportDocument) ? Eg(d, b.localName) : void 0;

	      if (e && void 0 === b.__CE_state) {
	        e.constructionStack.push(b);

	        try {
	          try {
	            if (new e.constructorFunction() !== b) throw Error("The custom element constructor did not produce the element being upgraded.");
	          } finally {
	            e.constructionStack.pop();
	          }
	        } catch (k) {
	          throw b.__CE_state = 2, k;
	        }

	        b.__CE_state = 1;
	        b.__CE_definition = e;

	        if (e.attributeChangedCallback && b.hasAttributes()) {
	          var f = e.observedAttributes;

	          for (e = 0; e < f.length; e++) {
	            var g = f[e],
	                h = b.getAttribute(g);
	            null !== h && a.attributeChangedCallback(b, g, null, h, null);
	          }
	        }

	        T(b) && a.connectedCallback(b);
	      }
	    } catch (k) {
	      Fg(k);
	    }
	  }

	  tg.prototype.connectedCallback = function (a) {
	    var b = a.__CE_definition;
	    if (b.connectedCallback) try {
	      b.connectedCallback.call(a);
	    } catch (c) {
	      Fg(c);
	    }
	  };

	  tg.prototype.disconnectedCallback = function (a) {
	    var b = a.__CE_definition;
	    if (b.disconnectedCallback) try {
	      b.disconnectedCallback.call(a);
	    } catch (c) {
	      Fg(c);
	    }
	  };

	  tg.prototype.attributeChangedCallback = function (a, b, c, d, e) {
	    var f = a.__CE_definition;
	    if (f.attributeChangedCallback && -1 < f.observedAttributes.indexOf(b)) try {
	      f.attributeChangedCallback.call(a, b, c, d, e);
	    } catch (g) {
	      Fg(g);
	    }
	  };

	  function Gg(a, b, c, d) {
	    var e = b.__CE_registry;
	    if (e && (null === d || "http://www.w3.org/1999/xhtml" === d) && (e = Eg(e, c))) try {
	      var f = new e.constructorFunction();
	      if (void 0 === f.__CE_state || void 0 === f.__CE_definition) throw Error("Failed to construct '" + c + "': The returned value was not constructed with the HTMLElement constructor.");
	      if ("http://www.w3.org/1999/xhtml" !== f.namespaceURI) throw Error("Failed to construct '" + c + "': The constructed element's namespace must be the HTML namespace.");
	      if (f.hasAttributes()) throw Error("Failed to construct '" + c + "': The constructed element must not have any attributes.");
	      if (null !== f.firstChild) throw Error("Failed to construct '" + c + "': The constructed element must not have any children.");
	      if (null !== f.parentNode) throw Error("Failed to construct '" + c + "': The constructed element must not have a parent node.");
	      if (f.ownerDocument !== b) throw Error("Failed to construct '" + c + "': The constructed element's owner document is incorrect.");
	      if (f.localName !== c) throw Error("Failed to construct '" + c + "': The constructed element's local name is incorrect.");
	      return f;
	    } catch (g) {
	      return Fg(g), b = null === d ? Hf.call(b, c) : If.call(b, d, c), Object.setPrototypeOf(b, HTMLUnknownElement.prototype), b.__CE_state = 2, b.__CE_definition = void 0, zg(a, b), b;
	    }
	    b = null === d ? Hf.call(b, c) : If.call(b, d, c);
	    zg(a, b);
	    return b;
	  }

	  function Fg(a) {
	    var b = a.message,
	        c = a.sourceURL || a.fileName || "",
	        d = a.line || a.lineNumber || 0,
	        e = a.column || a.columnNumber || 0,
	        f = void 0;
	    void 0 === ErrorEvent.prototype.initErrorEvent ? f = new ErrorEvent("error", {
	      cancelable: !0,
	      message: b,
	      filename: c,
	      lineno: d,
	      colno: e,
	      error: a
	    }) : (f = document.createEvent("ErrorEvent"), f.initErrorEvent("error", !1, !0, b, c, d), f.preventDefault = function () {
	      Object.defineProperty(this, "defaultPrevented", {
	        configurable: !0,
	        get: function get() {
	          return !0;
	        }
	      });
	    });
	    void 0 === f.error && Object.defineProperty(f, "error", {
	      configurable: !0,
	      enumerable: !0,
	      get: function get() {
	        return a;
	      }
	    });
	    window.dispatchEvent(f);
	    f.defaultPrevented || console.error(a);
	  }

	  function Hg() {
	    var a = this;
	    this.I = void 0;
	    this.Ha = new Promise(function (b) {
	      a.g = b;
	    });
	  }

	  Hg.prototype.resolve = function (a) {
	    if (this.I) throw Error("Already resolved.");
	    this.I = a;
	    this.g(a);
	  };

	  function Ig(a) {
	    var b = document;
	    this.X = void 0;
	    this.S = a;
	    this.g = b;
	    Dg(this.S, this.g);
	    "loading" === this.g.readyState && (this.X = new MutationObserver(this.h.bind(this)), this.X.observe(this.g, {
	      childList: !0,
	      subtree: !0
	    }));
	  }

	  function Jg(a) {
	    a.X && a.X.disconnect();
	  }

	  Ig.prototype.h = function (a) {
	    var b = this.g.readyState;
	    "interactive" !== b && "complete" !== b || Jg(this);

	    for (b = 0; b < a.length; b++) {
	      for (var c = a[b].addedNodes, d = 0; d < c.length; d++) {
	        Dg(this.S, c[d]);
	      }
	    }
	  };

	  function U(a) {
	    this.ka = new Map();
	    this.la = new Map();
	    this.Ca = new Map();
	    this.ta = !1;
	    this.wa = new Map();

	    this.ja = function (b) {
	      return b();
	    };

	    this.V = !1;
	    this.ma = [];
	    this.S = a;
	    this.Da = a.nb ? new Ig(a) : void 0;
	  }

	  v = U.prototype;

	  v.eb = function (a, b) {
	    var c = this;
	    if (!(b instanceof Function)) throw new TypeError("Custom element constructor getters must be functions.");
	    Kg(this, a);
	    this.ka.set(a, b);
	    this.ma.push(a);
	    this.V || (this.V = !0, this.ja(function () {
	      return Lg(c);
	    }));
	  };

	  v.define = function (a, b) {
	    var c = this;
	    if (!(b instanceof Function)) throw new TypeError("Custom element constructors must be functions.");
	    Kg(this, a);
	    Mg(this, a, b);
	    this.ma.push(a);
	    this.V || (this.V = !0, this.ja(function () {
	      return Lg(c);
	    }));
	  };

	  function Kg(a, b) {
	    if (!og(b)) throw new SyntaxError("The element name '" + b + "' is not valid.");
	    if (Eg(a, b)) throw Error("A custom element with name '" + (b + "' has already been defined."));
	    if (a.ta) throw Error("A custom element is already being defined.");
	  }

	  function Mg(a, b, c) {
	    a.ta = !0;
	    var d;

	    try {
	      var e = c.prototype;
	      if (!(e instanceof Object)) throw new TypeError("The custom element constructor's prototype is not an object.");

	      var f = function f(m) {
	        var q = e[m];
	        if (void 0 !== q && !(q instanceof Function)) throw Error("The '" + m + "' callback must be a function.");
	        return q;
	      };

	      var g = f("connectedCallback");
	      var h = f("disconnectedCallback");
	      var k = f("adoptedCallback");
	      var l = (d = f("attributeChangedCallback")) && c.observedAttributes || [];
	    } catch (m) {
	      throw m;
	    } finally {
	      a.ta = !1;
	    }

	    c = {
	      localName: b,
	      constructorFunction: c,
	      connectedCallback: g,
	      disconnectedCallback: h,
	      adoptedCallback: k,
	      attributeChangedCallback: d,
	      observedAttributes: l,
	      constructionStack: []
	    };
	    a.la.set(b, c);
	    a.Ca.set(c.constructorFunction, c);
	    return c;
	  }

	  v.upgrade = function (a) {
	    Dg(this.S, a);
	  };

	  function Lg(a) {
	    if (!1 !== a.V) {
	      a.V = !1;

	      for (var b = [], c = a.ma, d = new Map(), e = 0; e < c.length; e++) {
	        d.set(c[e], []);
	      }

	      Dg(a.S, document, {
	        upgrade: function upgrade(k) {
	          if (void 0 === k.__CE_state) {
	            var l = k.localName,
	                m = d.get(l);
	            m ? m.push(k) : a.la.has(l) && b.push(k);
	          }
	        }
	      });

	      for (e = 0; e < b.length; e++) {
	        Bg(a.S, b[e]);
	      }

	      for (e = 0; e < c.length; e++) {
	        for (var f = c[e], g = d.get(f), h = 0; h < g.length; h++) {
	          Bg(a.S, g[h]);
	        }

	        (f = a.wa.get(f)) && f.resolve(void 0);
	      }

	      c.length = 0;
	    }
	  }

	  v.get = function (a) {
	    if (a = Eg(this, a)) return a.constructorFunction;
	  };

	  v.whenDefined = function (a) {
	    if (!og(a)) return Promise.reject(new SyntaxError("'" + a + "' is not a valid custom element name."));
	    var b = this.wa.get(a);
	    if (b) return b.Ha;
	    b = new Hg();
	    this.wa.set(a, b);
	    var c = this.la.has(a) || this.ka.has(a);
	    a = -1 === this.ma.indexOf(a);
	    c && a && b.resolve(void 0);
	    return b.Ha;
	  };

	  v.polyfillWrapFlushCallback = function (a) {
	    this.Da && Jg(this.Da);
	    var b = this.ja;

	    this.ja = function (c) {
	      return a(function () {
	        return b(c);
	      });
	    };
	  };

	  function Eg(a, b) {
	    var c = a.la.get(b);
	    if (c) return c;

	    if (c = a.ka.get(b)) {
	      a.ka.delete(b);

	      try {
	        return Mg(a, b, c());
	      } catch (d) {
	        Fg(d);
	      }
	    }
	  }

	  window.CustomElementRegistry = U;
	  U.prototype.define = U.prototype.define;
	  U.prototype.upgrade = U.prototype.upgrade;
	  U.prototype.get = U.prototype.get;
	  U.prototype.whenDefined = U.prototype.whenDefined;
	  U.prototype.polyfillDefineLazy = U.prototype.eb;
	  U.prototype.polyfillWrapFlushCallback = U.prototype.polyfillWrapFlushCallback;

	  function Ng(a, b, c) {
	    function d(e) {
	      return function (f) {
	        for (var g = [], h = 0; h < arguments.length; ++h) {
	          g[h] = arguments[h];
	        }

	        h = [];

	        for (var k = [], l = 0; l < g.length; l++) {
	          var m = g[l];
	          m instanceof Element && T(m) && k.push(m);
	          if (m instanceof DocumentFragment) for (m = m.firstChild; m; m = m.nextSibling) {
	            h.push(m);
	          } else h.push(m);
	        }

	        e.apply(this, g);

	        for (g = 0; g < k.length; g++) {
	          Cg(a, k[g]);
	        }

	        if (T(this)) for (g = 0; g < h.length; g++) {
	          k = h[g], k instanceof Element && Ag(a, k);
	        }
	      };
	    }

	    void 0 !== c.prepend && (b.prepend = d(c.prepend));
	    void 0 !== c.append && (b.append = d(c.append));
	  }

	  function Og(a) {
	    Document.prototype.createElement = function (b) {
	      return Gg(a, this, b, null);
	    };

	    Document.prototype.importNode = function (b, c) {
	      b = Jf.call(this, b, !!c);
	      this.__CE_registry ? Dg(a, b) : yg(a, b);
	      return b;
	    };

	    Document.prototype.createElementNS = function (b, c) {
	      return Gg(a, this, c, b);
	    };

	    Ng(a, Document.prototype, {
	      prepend: Kf,
	      append: Lf
	    });
	  }

	  function Pg(a) {
	    function b(d) {
	      return function (e) {
	        for (var f = [], g = 0; g < arguments.length; ++g) {
	          f[g] = arguments[g];
	        }

	        g = [];

	        for (var h = [], k = 0; k < f.length; k++) {
	          var l = f[k];
	          l instanceof Element && T(l) && h.push(l);
	          if (l instanceof DocumentFragment) for (l = l.firstChild; l; l = l.nextSibling) {
	            g.push(l);
	          } else g.push(l);
	        }

	        d.apply(this, f);

	        for (f = 0; f < h.length; f++) {
	          Cg(a, h[f]);
	        }

	        if (T(this)) for (f = 0; f < g.length; f++) {
	          h = g[f], h instanceof Element && Ag(a, h);
	        }
	      };
	    }

	    var c = Element.prototype;
	    void 0 !== fg && (c.before = b(fg));
	    void 0 !== gg && (c.after = b(gg));
	    void 0 !== hg && (c.replaceWith = function (d) {
	      for (var e = [], f = 0; f < arguments.length; ++f) {
	        e[f] = arguments[f];
	      }

	      f = [];

	      for (var g = [], h = 0; h < e.length; h++) {
	        var k = e[h];
	        k instanceof Element && T(k) && g.push(k);
	        if (k instanceof DocumentFragment) for (k = k.firstChild; k; k = k.nextSibling) {
	          f.push(k);
	        } else f.push(k);
	      }

	      h = T(this);
	      hg.apply(this, e);

	      for (e = 0; e < g.length; e++) {
	        Cg(a, g[e]);
	      }

	      if (h) for (Cg(a, this), e = 0; e < f.length; e++) {
	        g = f[e], g instanceof Element && Ag(a, g);
	      }
	    });
	    void 0 !== ig && (c.remove = function () {
	      var d = T(this);
	      ig.call(this);
	      d && Cg(a, this);
	    });
	  }

	  function Qg(a) {
	    function b(e, f) {
	      Object.defineProperty(e, "innerHTML", {
	        enumerable: f.enumerable,
	        configurable: !0,
	        get: f.get,
	        set: function set(g) {
	          var h = this,
	              k = void 0;
	          T(this) && (k = [], vg(a, this, function (q) {
	            q !== h && k.push(q);
	          }));
	          f.set.call(this, g);
	          if (k) for (var l = 0; l < k.length; l++) {
	            var m = k[l];
	            1 === m.__CE_state && a.disconnectedCallback(m);
	          }
	          this.ownerDocument.__CE_registry ? Dg(a, this) : yg(a, this);
	          return g;
	        }
	      });
	    }

	    function c(e, f) {
	      e.insertAdjacentElement = function (g, h) {
	        var k = T(h);
	        g = f.call(this, g, h);
	        k && Cg(a, h);
	        T(g) && Ag(a, h);
	        return g;
	      };
	    }

	    function d(e, f) {
	      function g(h, k) {
	        for (var l = []; h !== k; h = h.nextSibling) {
	          l.push(h);
	        }

	        for (k = 0; k < l.length; k++) {
	          Dg(a, l[k]);
	        }
	      }

	      e.insertAdjacentHTML = function (h, k) {
	        h = h.toLowerCase();

	        if ("beforebegin" === h) {
	          var l = this.previousSibling;
	          f.call(this, h, k);
	          g(l || this.parentNode.firstChild, this);
	        } else if ("afterbegin" === h) l = this.firstChild, f.call(this, h, k), g(this.firstChild, l);else if ("beforeend" === h) l = this.lastChild, f.call(this, h, k), g(l || this.firstChild, null);else if ("afterend" === h) l = this.nextSibling, f.call(this, h, k), g(this.nextSibling, l);else throw new SyntaxError("The value provided (" + String(h) + ") is not one of 'beforebegin', 'afterbegin', 'beforeend', or 'afterend'.");
	      };
	    }

	    Uf && (Element.prototype.attachShadow = function (e) {
	      e = Uf.call(this, e);

	      if (a.W && !e.__CE_patched) {
	        e.__CE_patched = !0;

	        for (var f = 0; f < a.ca.length; f++) {
	          a.ca[f](e);
	        }
	      }

	      return this.__CE_shadowRoot = e;
	    });
	    Vf && Vf.get ? b(Element.prototype, Vf) : kg && kg.get ? b(HTMLElement.prototype, kg) : xg(a, function (e) {
	      b(e, {
	        enumerable: !0,
	        configurable: !0,
	        get: function get() {
	          return Of.call(this, !0).innerHTML;
	        },
	        set: function set(f) {
	          var g = "template" === this.localName,
	              h = g ? this.content : this,
	              k = If.call(document, this.namespaceURI, this.localName);

	          for (k.innerHTML = f; 0 < h.childNodes.length;) {
	            Rf.call(h, h.childNodes[0]);
	          }

	          for (f = g ? k.content : k; 0 < f.childNodes.length;) {
	            Pf.call(h, f.childNodes[0]);
	          }
	        }
	      });
	    });

	    Element.prototype.setAttribute = function (e, f) {
	      if (1 !== this.__CE_state) return Xf.call(this, e, f);
	      var g = Wf.call(this, e);
	      Xf.call(this, e, f);
	      f = Wf.call(this, e);
	      a.attributeChangedCallback(this, e, g, f, null);
	    };

	    Element.prototype.setAttributeNS = function (e, f, g) {
	      if (1 !== this.__CE_state) return $f.call(this, e, f, g);
	      var h = Zf.call(this, e, f);
	      $f.call(this, e, f, g);
	      g = Zf.call(this, e, f);
	      a.attributeChangedCallback(this, f, h, g, e);
	    };

	    Element.prototype.removeAttribute = function (e) {
	      if (1 !== this.__CE_state) return Yf.call(this, e);
	      var f = Wf.call(this, e);
	      Yf.call(this, e);
	      null !== f && a.attributeChangedCallback(this, e, f, null, null);
	    };

	    Element.prototype.removeAttributeNS = function (e, f) {
	      if (1 !== this.__CE_state) return ag.call(this, e, f);
	      var g = Zf.call(this, e, f);
	      ag.call(this, e, f);
	      var h = Zf.call(this, e, f);
	      g !== h && a.attributeChangedCallback(this, f, g, h, e);
	    };

	    lg ? c(HTMLElement.prototype, lg) : bg && c(Element.prototype, bg);
	    mg ? d(HTMLElement.prototype, mg) : cg && d(Element.prototype, cg);
	    Ng(a, Element.prototype, {
	      prepend: dg,
	      append: eg
	    });
	    Pg(a);
	  }
	  var Rg = {};

	  function Sg(a) {
	    function b() {
	      var c = this.constructor;

	      var d = document.__CE_registry.Ca.get(c);

	      if (!d) throw Error("Failed to construct a custom element: The constructor was not registered with `customElements`.");
	      var e = d.constructionStack;
	      if (0 === e.length) return e = Hf.call(document, d.localName), Object.setPrototypeOf(e, c.prototype), e.__CE_state = 1, e.__CE_definition = d, zg(a, e), e;
	      var f = e.length - 1,
	          g = e[f];
	      if (g === Rg) throw Error("Failed to construct '" + d.localName + "': This element was already constructed.");
	      e[f] = Rg;
	      Object.setPrototypeOf(g, c.prototype);
	      zg(a, g);
	      return g;
	    }

	    b.prototype = jg.prototype;
	    Object.defineProperty(HTMLElement.prototype, "constructor", {
	      writable: !0,
	      configurable: !0,
	      enumerable: !1,
	      value: b
	    });
	    window.HTMLElement = b;
	  }

	  function Tg(a) {
	    function b(c, d) {
	      Object.defineProperty(c, "textContent", {
	        enumerable: d.enumerable,
	        configurable: !0,
	        get: d.get,
	        set: function set(e) {
	          if (this.nodeType === Node.TEXT_NODE) d.set.call(this, e);else {
	            var f = void 0;

	            if (this.firstChild) {
	              var g = this.childNodes,
	                  h = g.length;

	              if (0 < h && T(this)) {
	                f = Array(h);

	                for (var k = 0; k < h; k++) {
	                  f[k] = g[k];
	                }
	              }
	            }

	            d.set.call(this, e);
	            if (f) for (e = 0; e < f.length; e++) {
	              Cg(a, f[e]);
	            }
	          }
	        }
	      });
	    }

	    Node.prototype.insertBefore = function (c, d) {
	      if (c instanceof DocumentFragment) {
	        var e = qg(c);
	        c = Qf.call(this, c, d);
	        if (T(this)) for (d = 0; d < e.length; d++) {
	          Ag(a, e[d]);
	        }
	        return c;
	      }

	      e = c instanceof Element && T(c);
	      d = Qf.call(this, c, d);
	      e && Cg(a, c);
	      T(this) && Ag(a, c);
	      return d;
	    };

	    Node.prototype.appendChild = function (c) {
	      if (c instanceof DocumentFragment) {
	        var d = qg(c);
	        c = Pf.call(this, c);
	        if (T(this)) for (var e = 0; e < d.length; e++) {
	          Ag(a, d[e]);
	        }
	        return c;
	      }

	      d = c instanceof Element && T(c);
	      e = Pf.call(this, c);
	      d && Cg(a, c);
	      T(this) && Ag(a, c);
	      return e;
	    };

	    Node.prototype.cloneNode = function (c) {
	      c = Of.call(this, !!c);
	      this.ownerDocument.__CE_registry ? Dg(a, c) : yg(a, c);
	      return c;
	    };

	    Node.prototype.removeChild = function (c) {
	      var d = c instanceof Element && T(c),
	          e = Rf.call(this, c);
	      d && Cg(a, c);
	      return e;
	    };

	    Node.prototype.replaceChild = function (c, d) {
	      if (c instanceof DocumentFragment) {
	        var e = qg(c);
	        c = Sf.call(this, c, d);
	        if (T(this)) for (Cg(a, d), d = 0; d < e.length; d++) {
	          Ag(a, e[d]);
	        }
	        return c;
	      }

	      e = c instanceof Element && T(c);
	      var f = Sf.call(this, c, d),
	          g = T(this);
	      g && Cg(a, d);
	      e && Cg(a, c);
	      g && Ag(a, c);
	      return f;
	    };

	    Tf && Tf.get ? b(Node.prototype, Tf) : wg(a, function (c) {
	      b(c, {
	        enumerable: !0,
	        configurable: !0,
	        get: function get() {
	          for (var d = [], e = this.firstChild; e; e = e.nextSibling) {
	            e.nodeType !== Node.COMMENT_NODE && d.push(e.textContent);
	          }

	          return d.join("");
	        },
	        set: function set(d) {
	          for (; this.firstChild;) {
	            Rf.call(this, this.firstChild);
	          }

	          null != d && "" !== d && Pf.call(this, document.createTextNode(d));
	        }
	      });
	    });
	  }
	  var ug = window.customElements;

	  function Ug() {
	    var a = new tg();
	    Sg(a);
	    Og(a);
	    Ng(a, DocumentFragment.prototype, {
	      prepend: Mf,
	      append: Nf
	    });
	    Tg(a);
	    Qg(a);
	    a = new U(a);
	    document.__CE_registry = a;
	    Object.defineProperty(window, "customElements", {
	      configurable: !0,
	      enumerable: !0,
	      value: a
	    });
	  }

	  ug && !ug.forcePolyfill && "function" == typeof ug.define && "function" == typeof ug.get || Ug();
	  window.__CE_installPolyfill = Ug;
	  /*
	  Copyright (c) 2017 The Polymer Project Authors. All rights reserved.
	  This code may only be used under the BSD style license found at http://polymer.github.io/LICENSE.txt
	  The complete set of authors may be found at http://polymer.github.io/AUTHORS.txt
	  The complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt
	  Code distributed by Google as part of the polymer project is also
	  subject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt
	  */

	  function Vg() {
	    this.end = this.start = 0;
	    this.rules = this.parent = this.previous = null;
	    this.cssText = this.parsedCssText = "";
	    this.atRule = !1;
	    this.type = 0;
	    this.parsedSelector = this.selector = this.keyframesName = "";
	  }

	  function Wg(a) {
	    var b = a = a.replace(Xg, "").replace(Yg, ""),
	        c = new Vg();
	    c.start = 0;
	    c.end = b.length;

	    for (var d = c, e = 0, f = b.length; e < f; e++) {
	      if ("{" === b[e]) {
	        d.rules || (d.rules = []);
	        var g = d,
	            h = g.rules[g.rules.length - 1] || null;
	        d = new Vg();
	        d.start = e + 1;
	        d.parent = g;
	        d.previous = h;
	        g.rules.push(d);
	      } else "}" === b[e] && (d.end = e + 1, d = d.parent || c);
	    }

	    return Zg(c, a);
	  }

	  function Zg(a, b) {
	    var c = b.substring(a.start, a.end - 1);
	    a.parsedCssText = a.cssText = c.trim();
	    a.parent && (c = b.substring(a.previous ? a.previous.end : a.parent.start, a.start - 1), c = $g(c), c = c.replace(ah, " "), c = c.substring(c.lastIndexOf(";") + 1), c = a.parsedSelector = a.selector = c.trim(), a.atRule = 0 === c.indexOf("@"), a.atRule ? 0 === c.indexOf("@media") ? a.type = bh : c.match(ch) && (a.type = dh, a.keyframesName = a.selector.split(ah).pop()) : a.type = 0 === c.indexOf("--") ? eh : fh);
	    if (c = a.rules) for (var d = 0, e = c.length, f = void 0; d < e && (f = c[d]); d++) {
	      Zg(f, b);
	    }
	    return a;
	  }

	  function $g(a) {
	    return a.replace(/\\([0-9a-f]{1,6})\s/gi, function (b, c) {
	      b = c;

	      for (c = 6 - b.length; c--;) {
	        b = "0" + b;
	      }

	      return "\\" + b;
	    });
	  }

	  function gh(a, b, c) {
	    c = void 0 === c ? "" : c;
	    var d = "";

	    if (a.cssText || a.rules) {
	      var e = a.rules,
	          f;
	      if (f = e) f = e[0], f = !(f && f.selector && 0 === f.selector.indexOf("--"));

	      if (f) {
	        f = 0;

	        for (var g = e.length, h = void 0; f < g && (h = e[f]); f++) {
	          d = gh(h, b, d);
	        }
	      } else b ? b = a.cssText : (b = a.cssText, b = b.replace(hh, "").replace(ih, ""), b = b.replace(jh, "").replace(kh, "")), (d = b.trim()) && (d = "  " + d + "\n");
	    }

	    d && (a.selector && (c += a.selector + " {\n"), c += d, a.selector && (c += "}\n\n"));
	    return c;
	  }

	  var fh = 1,
	      dh = 7,
	      bh = 4,
	      eh = 1E3,
	      Xg = /\/\*[^*]*\*+([^/*][^*]*\*+)*\//gim,
	      Yg = /@import[^;]*;/gim,
	      hh = /(?:^[^;\-\s}]+)?--[^;{}]*?:[^{};]*?(?:[;\n]|$)/gim,
	      ih = /(?:^[^;\-\s}]+)?--[^;{}]*?:[^{};]*?{[^}]*?}(?:[;\n]|$)?/gim,
	      jh = /@apply\s*\(?[^);]*\)?\s*(?:[;\n]|$)?/gim,
	      kh = /[^;:]*?:[^;]*?var\([^;]*\)(?:[;\n]|$)?/gim,
	      ch = /^@[^\s]*keyframes/,
	      ah = /\s+/g;
	  var V = !(window.ShadyDOM && window.ShadyDOM.inUse),
	      lh;

	  function mh(a) {
	    lh = a && a.shimcssproperties ? !1 : V || !(navigator.userAgent.match(/AppleWebKit\/601|Edge\/15/) || !window.CSS || !CSS.supports || !CSS.supports("box-shadow", "0 0 0 var(--foo)"));
	  }

	  var nh;
	  window.ShadyCSS && void 0 !== window.ShadyCSS.cssBuild && (nh = window.ShadyCSS.cssBuild);
	  var oh = !(!window.ShadyCSS || !window.ShadyCSS.disableRuntime);
	  window.ShadyCSS && void 0 !== window.ShadyCSS.nativeCss ? lh = window.ShadyCSS.nativeCss : window.ShadyCSS ? (mh(window.ShadyCSS), window.ShadyCSS = void 0) : mh(window.WebComponents && window.WebComponents.flags);
	  var X = lh;
	  var ph = /(?:^|[;\s{]\s*)(--[\w-]*?)\s*:\s*(?:((?:'(?:\\'|.)*?'|"(?:\\"|.)*?"|\([^)]*?\)|[^};{])+)|\{([^}]*)\}(?:(?=[;\s}])|$))/gi,
	      qh = /(?:^|\W+)@apply\s*\(?([^);\n]*)\)?/gi,
	      rh = /(--[\w-]+)\s*([:,;)]|$)/gi,
	      sh = /(animation\s*:)|(animation-name\s*:)/,
	      th = /@media\s(.*)/,
	      uh = /\{[^}]*\}/g;
	  var vh = new Set();

	  function wh(a, b) {
	    if (!a) return "";
	    "string" === typeof a && (a = Wg(a));
	    b && xh(a, b);
	    return gh(a, X);
	  }

	  function yh(a) {
	    !a.__cssRules && a.textContent && (a.__cssRules = Wg(a.textContent));
	    return a.__cssRules || null;
	  }

	  function zh(a) {
	    return !!a.parent && a.parent.type === dh;
	  }

	  function xh(a, b, c, d) {
	    if (a) {
	      var e = !1,
	          f = a.type;

	      if (d && f === bh) {
	        var g = a.selector.match(th);
	        g && (window.matchMedia(g[1]).matches || (e = !0));
	      }

	      f === fh ? b(a) : c && f === dh ? c(a) : f === eh && (e = !0);
	      if ((a = a.rules) && !e) for (e = 0, f = a.length, g = void 0; e < f && (g = a[e]); e++) {
	        xh(g, b, c, d);
	      }
	    }
	  }

	  function Ah(a, b, c, d) {
	    var e = document.createElement("style");
	    b && e.setAttribute("scope", b);
	    e.textContent = a;
	    Ch(e, c, d);
	    return e;
	  }

	  var Dh = null;

	  function Eh(a) {
	    a = document.createComment(" Shady DOM styles for " + a + " ");
	    var b = document.head;
	    b.insertBefore(a, (Dh ? Dh.nextSibling : null) || b.firstChild);
	    return Dh = a;
	  }

	  function Ch(a, b, c) {
	    b = b || document.head;
	    b.insertBefore(a, c && c.nextSibling || b.firstChild);
	    Dh ? a.compareDocumentPosition(Dh) === Node.DOCUMENT_POSITION_PRECEDING && (Dh = a) : Dh = a;
	  }

	  function Fh(a, b) {
	    for (var c = 0, d = a.length; b < d; b++) {
	      if ("(" === a[b]) c++;else if (")" === a[b] && 0 === --c) return b;
	    }

	    return -1;
	  }

	  function Gh(a, b) {
	    var c = a.indexOf("var(");
	    if (-1 === c) return b(a, "", "", "");
	    var d = Fh(a, c + 3),
	        e = a.substring(c + 4, d);
	    c = a.substring(0, c);
	    a = Gh(a.substring(d + 1), b);
	    d = e.indexOf(",");
	    return -1 === d ? b(c, e.trim(), "", a) : b(c, e.substring(0, d).trim(), e.substring(d + 1).trim(), a);
	  }

	  function Hh(a, b) {
	    V ? a.setAttribute("class", b) : window.ShadyDOM.nativeMethods.setAttribute.call(a, "class", b);
	  }

	  var Ih = window.ShadyDOM && window.ShadyDOM.wrap || function (a) {
	    return a;
	  };

	  function Jh(a) {
	    var b = a.localName,
	        c = "";
	    b ? -1 < b.indexOf("-") || (c = b, b = a.getAttribute && a.getAttribute("is") || "") : (b = a.is, c = a.extends);
	    return {
	      is: b,
	      ha: c
	    };
	  }

	  function Kh(a) {
	    for (var b = [], c = "", d = 0; 0 <= d && d < a.length; d++) {
	      if ("(" === a[d]) {
	        var e = Fh(a, d);
	        c += a.slice(d, e + 1);
	        d = e;
	      } else "," === a[d] ? (b.push(c), c = "") : c += a[d];
	    }

	    c && b.push(c);
	    return b;
	  }

	  function Lh(a) {
	    if (void 0 !== nh) return nh;

	    if (void 0 === a.__cssBuild) {
	      var b = a.getAttribute("css-build");
	      if (b) a.__cssBuild = b;else {
	        a: {
	          b = "template" === a.localName ? a.content.firstChild : a.firstChild;

	          if (b instanceof Comment && (b = b.textContent.trim().split(":"), "css-build" === b[0])) {
	            b = b[1];
	            break a;
	          }

	          b = "";
	        }

	        if ("" !== b) {
	          var c = "template" === a.localName ? a.content.firstChild : a.firstChild;
	          c.parentNode.removeChild(c);
	        }

	        a.__cssBuild = b;
	      }
	    }

	    return a.__cssBuild || "";
	  }

	  function Mh(a) {
	    a = void 0 === a ? "" : a;
	    return "" !== a && X ? V ? "shadow" === a : "shady" === a : !1;
	  }

	  function Nh() {}

	  function Oh(a, b) {
	    Ph(Qh, a, function (c) {
	      Rh(c, b || "");
	    });
	  }

	  function Ph(a, b, c) {
	    b.nodeType === Node.ELEMENT_NODE && c(b);
	    var d;
	    "template" === b.localName ? d = (b.content || b._content || b).childNodes : d = b.children || b.childNodes;
	    if (d) for (b = 0; b < d.length; b++) {
	      Ph(a, d[b], c);
	    }
	  }

	  function Rh(a, b, c) {
	    if (b) if (a.classList) c ? (a.classList.remove("style-scope"), a.classList.remove(b)) : (a.classList.add("style-scope"), a.classList.add(b));else if (a.getAttribute) {
	      var d = a.getAttribute("class");
	      c ? d && (b = d.replace("style-scope", "").replace(b, ""), Hh(a, b)) : Hh(a, (d ? d + " " : "") + "style-scope " + b);
	    }
	  }

	  function Sh(a, b, c) {
	    Ph(Qh, a, function (d) {
	      Rh(d, b, !0);
	      Rh(d, c);
	    });
	  }

	  function Th(a, b) {
	    Ph(Qh, a, function (c) {
	      Rh(c, b || "", !0);
	    });
	  }

	  function Uh(a, b, c, d, e) {
	    var f = Qh;
	    e = void 0 === e ? "" : e;
	    "" === e && (V || "shady" === (void 0 === d ? "" : d) ? e = wh(b, c) : (a = Jh(a), e = Vh(f, b, a.is, a.ha, c) + "\n\n"));
	    return e.trim();
	  }

	  function Vh(a, b, c, d, e) {
	    var f = Wh(c, d);
	    c = c ? "." + c : "";
	    return wh(b, function (g) {
	      g.i || (g.selector = g.F = Xh(a, g, a.h, c, f), g.i = !0);
	      e && e(g, c, f);
	    });
	  }

	  function Wh(a, b) {
	    return b ? "[is=" + a + "]" : a;
	  }

	  function Xh(a, b, c, d, e) {
	    var f = Kh(b.selector);

	    if (!zh(b)) {
	      b = 0;

	      for (var g = f.length, h = void 0; b < g && (h = f[b]); b++) {
	        f[b] = c.call(a, h, d, e);
	      }
	    }

	    return f.filter(function (k) {
	      return !!k;
	    }).join(",");
	  }

	  function Yh(a) {
	    return a.replace(Zh, function (b, c, d) {
	      -1 < d.indexOf("+") ? d = d.replace(/\+/g, "___") : -1 < d.indexOf("___") && (d = d.replace(/___/g, "+"));
	      return ":" + c + "(" + d + ")";
	    });
	  }

	  function $h(a) {
	    for (var b = [], c; c = a.match(ai);) {
	      var d = c.index,
	          e = Fh(a, d);
	      if (-1 === e) throw Error(c.input + " selector missing ')'");
	      c = a.slice(d, e + 1);
	      a = a.replace(c, "\uE000");
	      b.push(c);
	    }

	    return {
	      Ba: a,
	      matches: b
	    };
	  }

	  function bi(a, b) {
	    var c = a.split("\uE000");
	    return b.reduce(function (d, e, f) {
	      return d + e + c[f + 1];
	    }, c[0]);
	  }

	  Nh.prototype.h = function (a, b, c) {
	    var d = !1;
	    a = a.trim();
	    var e = Zh.test(a);
	    e && (a = a.replace(Zh, function (h, k, l) {
	      return ":" + k + "(" + l.replace(/\s/g, "") + ")";
	    }), a = Yh(a));
	    var f = ai.test(a);

	    if (f) {
	      var g = $h(a);
	      a = g.Ba;
	      g = g.matches;
	    }

	    a = a.replace(ci, ":host $1");
	    a = a.replace(di, function (h, k, l) {
	      d || (h = ei(l, k, b, c), d = d || h.stop, k = h.Ua, l = h.value);
	      return k + l;
	    });
	    f && (a = bi(a, g));
	    e && (a = Yh(a));
	    return a = a.replace(fi, function (h, k, l, m) {
	      return '[dir="' + l + '"] ' + k + m + ", " + k + '[dir="' + l + '"]' + m;
	    });
	  };

	  function ei(a, b, c, d) {
	    var e = a.indexOf("::slotted");
	    0 <= a.indexOf(":host") ? a = gi(a, d) : 0 !== e && (a = c ? hi(a, c) : a);
	    c = !1;
	    0 <= e && (b = "", c = !0);

	    if (c) {
	      var f = !0;
	      c && (a = a.replace(ii, function (g, h) {
	        return " > " + h;
	      }));
	    }

	    return {
	      value: a,
	      Ua: b,
	      stop: f
	    };
	  }

	  function hi(a, b) {
	    a = a.split(/(\[.+?\])/);

	    for (var c = [], d = 0; d < a.length; d++) {
	      if (1 === d % 2) c.push(a[d]);else {
	        var e = a[d];
	        if ("" !== e || d !== a.length - 1) e = e.split(":"), e[0] += b, c.push(e.join(":"));
	      }
	    }

	    return c.join("");
	  }

	  function gi(a, b) {
	    var c = a.match(ji);
	    return (c = c && c[2].trim() || "") ? c[0].match(ki) ? a.replace(ji, function (d, e, f) {
	      return b + f;
	    }) : c.split(ki)[0] === b ? c : "should_not_match" : a.replace(":host", b);
	  }

	  function li(a) {
	    ":root" === a.selector && (a.selector = "html");
	  }

	  Nh.prototype.i = function (a) {
	    return a.match(":host") ? "" : a.match("::slotted") ? this.h(a, ":not(.style-scope)") : hi(a.trim(), ":not(.style-scope)");
	  };

	  ea.Object.defineProperties(Nh.prototype, {
	    g: {
	      configurable: !0,
	      enumerable: !0,
	      get: function get() {
	        return "style-scope";
	      }
	    }
	  });
	  var Zh = /:(nth[-\w]+)\(([^)]+)\)/,
	      di = /(^|[\s>+~]+)((?:\[.+?\]|[^\s>+~=[])+)/g,
	      ki = /[[.:#*]/,
	      ci = /^(::slotted)/,
	      ji = /(:host)(?:\(((?:\([^)(]*\)|[^)(]*)+?)\))/,
	      ii = /(?:::slotted)(?:\(((?:\([^)(]*\)|[^)(]*)+?)\))/,
	      fi = /(.*):dir\((?:(ltr|rtl))\)(.*)/,
	      ai = /:(?:matches|any|-(?:webkit|moz)-any)/,
	      Qh = new Nh();

	  function mi(a, b, c, d, e) {
	    this.M = a || null;
	    this.h = b || null;
	    this.za = c || [];
	    this.K = null;
	    this.cssBuild = e || "";
	    this.ha = d || "";
	    this.g = this.L = this.R = null;
	  }

	  function ni(a) {
	    return a ? a.__styleInfo : null;
	  }

	  function oi(a, b) {
	    return a.__styleInfo = b;
	  }

	  mi.prototype.i = function () {
	    return this.M;
	  };

	  mi.prototype._getStyleRules = mi.prototype.i;

	  function pi(a) {
	    var b = this.matches || this.matchesSelector || this.mozMatchesSelector || this.msMatchesSelector || this.oMatchesSelector || this.webkitMatchesSelector;
	    return b && b.call(this, a);
	  }

	  var qi = /:host\s*>\s*/,
	      ri = navigator.userAgent.match("Trident");

	  function si() {}

	  function ti(a) {
	    var b = {},
	        c = [],
	        d = 0;
	    xh(a, function (f) {
	      ui(f);
	      f.index = d++;
	      f = f.D.cssText;

	      for (var g; g = rh.exec(f);) {
	        var h = g[1];
	        ":" !== g[2] && (b[h] = !0);
	      }
	    }, function (f) {
	      c.push(f);
	    });
	    a.h = c;
	    a = [];

	    for (var e in b) {
	      a.push(e);
	    }

	    return a;
	  }

	  function ui(a) {
	    if (!a.D) {
	      var b = {},
	          c = {};
	      vi(a, c) && (b.P = c, a.rules = null);
	      b.cssText = a.parsedCssText.replace(uh, "").replace(ph, "");
	      a.D = b;
	    }
	  }

	  function vi(a, b) {
	    var c = a.D;

	    if (c) {
	      if (c.P) return Object.assign(b, c.P), !0;
	    } else {
	      c = a.parsedCssText;

	      for (var d; a = ph.exec(c);) {
	        d = (a[2] || a[3]).trim();
	        if ("inherit" !== d || "unset" !== d) b[a[1].trim()] = d;
	        d = !0;
	      }

	      return d;
	    }
	  }

	  function wi(a, b, c) {
	    b && (b = 0 <= b.indexOf(";") ? xi(a, b, c) : Gh(b, function (d, e, f, g) {
	      if (!e) return d + g;
	      (e = wi(a, c[e], c)) && "initial" !== e ? "apply-shim-inherit" === e && (e = "inherit") : e = wi(a, c[f] || f, c) || f;
	      return d + (e || "") + g;
	    }));
	    return b && b.trim() || "";
	  }

	  function xi(a, b, c) {
	    b = b.split(";");

	    for (var d = 0, e, f; d < b.length; d++) {
	      if (e = b[d]) {
	        qh.lastIndex = 0;
	        if (f = qh.exec(e)) e = wi(a, c[f[1]], c);else if (f = e.indexOf(":"), -1 !== f) {
	          var g = e.substring(f);
	          g = g.trim();
	          g = wi(a, g, c) || g;
	          e = e.substring(0, f) + g;
	        }
	        b[d] = e && e.lastIndexOf(";") === e.length - 1 ? e.slice(0, -1) : e || "";
	      }
	    }

	    return b.join(";");
	  }

	  function yi(a, b) {
	    var c = {},
	        d = [];
	    xh(a, function (e) {
	      e.D || ui(e);
	      var f = e.F || e.parsedSelector;
	      b && e.D.P && f && pi.call(b, f) && (vi(e, c), e = e.index, f = parseInt(e / 32, 10), d[f] = (d[f] || 0) | 1 << e % 32);
	    }, null, !0);
	    return {
	      P: c,
	      key: d
	    };
	  }

	  function zi(a, b, c, d) {
	    b.D || ui(b);

	    if (b.D.P) {
	      var e = Jh(a);
	      a = e.is;
	      e = e.ha;
	      e = a ? Wh(a, e) : "html";
	      var f = b.parsedSelector;
	      var g = !!f.match(qi) || "html" === e && -1 < f.indexOf("html");
	      var h = 0 === f.indexOf(":host") && !g;
	      "shady" === c && (g = f === e + " > *." + e || -1 !== f.indexOf("html"), h = !g && 0 === f.indexOf(e));
	      if (g || h) c = e, h && (b.F || (b.F = Xh(Qh, b, Qh.h, a ? "." + a : "", e)), c = b.F || e), g && "html" === e && (c = b.F || b.O), d({
	        Ba: c,
	        ab: h,
	        qb: g
	      });
	    }
	  }

	  function Ai(a, b, c) {
	    var d = {},
	        e = {};
	    xh(b, function (f) {
	      zi(a, f, c, function (g) {
	        pi.call(a._element || a, g.Ba) && (g.ab ? vi(f, d) : vi(f, e));
	      });
	    }, null, !0);
	    return {
	      hb: e,
	      Za: d
	    };
	  }

	  function Bi(a, b, c, d) {
	    var e = Jh(b),
	        f = Wh(e.is, e.ha),
	        g = new RegExp("(?:^|[^.#[:])" + (b.extends ? "\\" + f.slice(0, -1) + "\\]" : f) + "($|[.:[\\s>+~])"),
	        h = ni(b);
	    e = h.M;
	    h = h.cssBuild;
	    var k = Ci(e, d);
	    return Uh(b, e, function (l) {
	      var m = "";
	      l.D || ui(l);
	      l.D.cssText && (m = xi(a, l.D.cssText, c));
	      l.cssText = m;

	      if (!V && !zh(l) && l.cssText) {
	        var q = m = l.cssText;
	        null == l.Ia && (l.Ia = sh.test(m));
	        if (l.Ia) if (null == l.pa) {
	          l.pa = [];

	          for (var H in k) {
	            q = k[H], q = q(m), m !== q && (m = q, l.pa.push(H));
	          }
	        } else {
	          for (H = 0; H < l.pa.length; ++H) {
	            q = k[l.pa[H]], m = q(m);
	          }

	          q = m;
	        }
	        l.cssText = q;
	        l.F = l.F || l.selector;
	        m = "." + d;
	        H = Kh(l.F);
	        q = 0;

	        for (var C = H.length, t = void 0; q < C && (t = H[q]); q++) {
	          H[q] = t.match(g) ? t.replace(f, m) : m + " " + t;
	        }

	        l.selector = H.join(",");
	      }
	    }, h);
	  }

	  function Ci(a, b) {
	    a = a.h;
	    var c = {};
	    if (!V && a) for (var d = 0, e = a[d]; d < a.length; e = a[++d]) {
	      var f = e,
	          g = b;
	      f.u = new RegExp("\\b" + f.keyframesName + "(?!\\B|-)", "g");
	      f.g = f.keyframesName + "-" + g;
	      f.F = f.F || f.selector;
	      f.selector = f.F.replace(f.keyframesName, f.g);
	      c[e.keyframesName] = Di(e);
	    }
	    return c;
	  }

	  function Di(a) {
	    return function (b) {
	      return b.replace(a.u, a.g);
	    };
	  }

	  function Ei(a, b) {
	    var c = Fi,
	        d = yh(a);
	    a.textContent = wh(d, function (e) {
	      var f = e.cssText = e.parsedCssText;
	      e.D && e.D.cssText && (f = f.replace(hh, "").replace(ih, ""), e.cssText = xi(c, f, b));
	    });
	  }

	  ea.Object.defineProperties(si.prototype, {
	    g: {
	      configurable: !0,
	      enumerable: !0,
	      get: function get() {
	        return "x-scope";
	      }
	    }
	  });
	  var Fi = new si();
	  var Gi = {};

	  function Ji() {
	    this.cache = {};
	  }

	  Ji.prototype.store = function (a, b, c, d) {
	    var e = this.cache[a] || [];
	    e.push({
	      P: b,
	      styleElement: c,
	      L: d
	    });
	    100 < e.length && e.shift();
	    this.cache[a] = e;
	  };

	  function Ki() {}

	  var Li = new RegExp(Qh.g + "\\s*([^\\s]*)");

	  function Mi(a) {
	    return (a = (a.classList && a.classList.value ? a.classList.value : a.getAttribute("class") || "").match(Li)) ? a[1] : "";
	  }

	  function Ni(a) {
	    var b = Ih(a).getRootNode();
	    return b === a || b === a.ownerDocument ? "" : (a = b.host) ? Jh(a).is : "";
	  }

	  function Oi(a) {
	    for (var b = 0; b < a.length; b++) {
	      var c = a[b];
	      if (c.target !== document.documentElement && c.target !== document.head) for (var d = 0; d < c.addedNodes.length; d++) {
	        var e = c.addedNodes[d];

	        if (e.nodeType === Node.ELEMENT_NODE) {
	          var f = e.getRootNode(),
	              g = Mi(e);
	          if (g && f === e.ownerDocument && ("style" !== e.localName && "template" !== e.localName || "" === Lh(e))) Th(e, g);else if (f instanceof ShadowRoot) for (f = Ni(e), f !== g && Sh(e, g, f), e = window.ShadyDOM.nativeMethods.querySelectorAll.call(e, ":not(." + Qh.g + ")"), g = 0; g < e.length; g++) {
	            f = e[g];
	            var h = Ni(f);
	            h && Rh(f, h);
	          }
	        }
	      }
	    }
	  }

	  if (!(V || window.ShadyDOM && window.ShadyDOM.handlesDynamicScoping)) {
	    var Pi = new MutationObserver(Oi),
	        Qi = function Qi(a) {
	      Pi.observe(a, {
	        childList: !0,
	        subtree: !0
	      });
	    };

	    if (window.customElements && !window.customElements.polyfillWrapFlushCallback) Qi(document);else {
	      var Ri = function Ri() {
	        Qi(document.body);
	      };

	      window.HTMLImports ? window.HTMLImports.whenReady(Ri) : requestAnimationFrame(function () {
	        if ("loading" === document.readyState) {
	          var a = function a() {
	            Ri();
	            document.removeEventListener("readystatechange", a);
	          };

	          document.addEventListener("readystatechange", a);
	        } else Ri();
	      });
	    }

	    Ki = function Ki() {
	      Oi(Pi.takeRecords());
	    };
	  }
	  var Si = {};
	  var Ti = Promise.resolve();

	  function Ui(a) {
	    if (a = Si[a]) a._applyShimCurrentVersion = a._applyShimCurrentVersion || 0, a._applyShimValidatingVersion = a._applyShimValidatingVersion || 0, a._applyShimNextVersion = (a._applyShimNextVersion || 0) + 1;
	  }

	  function Vi(a) {
	    return a._applyShimCurrentVersion === a._applyShimNextVersion;
	  }

	  function Wi(a) {
	    a._applyShimValidatingVersion = a._applyShimNextVersion;
	    a._validating || (a._validating = !0, Ti.then(function () {
	      a._applyShimCurrentVersion = a._applyShimNextVersion;
	      a._validating = !1;
	    }));
	  }
	  var Xi = {},
	      Yi = new Ji();

	  function Y() {
	    this.da = {};
	    this.i = document.documentElement;
	    var a = new Vg();
	    a.rules = [];
	    this.u = oi(this.i, new mi(a));
	    this.O = !1;
	    this.g = this.h = null;
	  }

	  v = Y.prototype;

	  v.flush = function () {
	    Ki();
	  };

	  v.Xa = function (a) {
	    return yh(a);
	  };

	  v.lb = function (a) {
	    return wh(a);
	  };

	  v.prepareTemplate = function (a, b, c) {
	    this.prepareTemplateDom(a, b);
	    this.prepareTemplateStyles(a, b, c);
	  };

	  v.prepareTemplateStyles = function (a, b, c) {
	    if (!a._prepared && !oh) {
	      V || Gi[b] || (Gi[b] = Eh(b));
	      a._prepared = !0;
	      a.name = b;
	      a.extends = c;
	      Si[b] = a;
	      var d = Lh(a),
	          e = Mh(d);
	      c = {
	        is: b,
	        extends: c
	      };

	      for (var f = [], g = a.content.querySelectorAll("style"), h = 0; h < g.length; h++) {
	        var k = g[h];

	        if (k.hasAttribute("shady-unscoped")) {
	          if (!V) {
	            var l = k.textContent;

	            if (!vh.has(l)) {
	              vh.add(l);
	              var m = document.createElement("style");
	              m.setAttribute("shady-unscoped", "");
	              m.textContent = l;
	              document.head.appendChild(m);
	            }

	            k.parentNode.removeChild(k);
	          }
	        } else f.push(k.textContent), k.parentNode.removeChild(k);
	      }

	      f = f.join("").trim() + (Xi[b] || "");
	      Zi(this);

	      if (!e) {
	        if (g = !d) g = qh.test(f) || ph.test(f), qh.lastIndex = 0, ph.lastIndex = 0;
	        h = Wg(f);
	        g && X && this.h && this.h.transformRules(h, b);
	        a._styleAst = h;
	      }

	      g = [];
	      X || (g = ti(a._styleAst));
	      if (!g.length || X) h = V ? a.content : null, b = Gi[b] || null, d = Uh(c, a._styleAst, null, d, e ? f : ""), d = d.length ? Ah(d, c.is, h, b) : null, a._style = d;
	      a.g = g;
	    }
	  };

	  v.fb = function (a, b) {
	    Xi[b] = a.join(" ");
	  };

	  v.prepareTemplateDom = function (a, b) {
	    if (!oh) {
	      var c = Lh(a);
	      V || "shady" === c || a._domPrepared || (a._domPrepared = !0, Oh(a.content, b));
	    }
	  };

	  function $i(a) {
	    var b = Jh(a),
	        c = b.is;
	    b = b.ha;
	    var d = Gi[c] || null,
	        e = Si[c];

	    if (e) {
	      c = e._styleAst;
	      var f = e.g;
	      e = Lh(e);
	      b = new mi(c, d, f, b, e);
	      oi(a, b);
	      return b;
	    }
	  }

	  function aj(a) {
	    !a.g && window.ShadyCSS && window.ShadyCSS.CustomStyleInterface && (a.g = window.ShadyCSS.CustomStyleInterface, a.g.transformCallback = function (b) {
	      a.Ma(b);
	    }, a.g.validateCallback = function () {
	      requestAnimationFrame(function () {
	        (a.g.enqueued || a.O) && a.flushCustomStyles();
	      });
	    });
	  }

	  function Zi(a) {
	    if (!a.h && window.ShadyCSS && window.ShadyCSS.ApplyShim) {
	      a.h = window.ShadyCSS.ApplyShim;
	      a.h.invalidCallback = Ui;
	      var b = !0;
	    } else b = !1;

	    aj(a);
	    return b;
	  }

	  v.flushCustomStyles = function () {
	    if (!oh) {
	      var a = Zi(this);

	      if (this.g) {
	        var b = this.g.processStyles();

	        if ((a || this.g.enqueued) && !Mh(this.u.cssBuild)) {
	          if (X) {
	            if (!this.u.cssBuild) for (a = 0; a < b.length; a++) {
	              var c = this.g.getStyleForCustomStyle(b[a]);

	              if (c && X && this.h) {
	                var d = yh(c);
	                Zi(this);
	                this.h.transformRules(d);
	                c.textContent = wh(d);
	              }
	            }
	          } else {
	            bj(this, b);
	            cj(this, this.i, this.u);

	            for (a = 0; a < b.length; a++) {
	              (c = this.g.getStyleForCustomStyle(b[a])) && Ei(c, this.u.R);
	            }

	            this.O && this.styleDocument();
	          }

	          this.g.enqueued = !1;
	        }
	      }
	    }
	  };

	  function bj(a, b) {
	    b = b.map(function (c) {
	      return a.g.getStyleForCustomStyle(c);
	    }).filter(function (c) {
	      return !!c;
	    });
	    b.sort(function (c, d) {
	      c = d.compareDocumentPosition(c);
	      return c & Node.DOCUMENT_POSITION_FOLLOWING ? 1 : c & Node.DOCUMENT_POSITION_PRECEDING ? -1 : 0;
	    });
	    a.u.M.rules = b.map(function (c) {
	      return yh(c);
	    });
	  }

	  v.styleElement = function (a, b) {
	    if (oh) {
	      if (b) {
	        ni(a) || oi(a, new mi(null));
	        var c = ni(a);
	        c.K = c.K || {};
	        Object.assign(c.K, b);
	        dj(this, a, c);
	      }
	    } else if (c = ni(a) || $i(a)) if (a !== this.i && (this.O = !0), b && (c.K = c.K || {}, Object.assign(c.K, b)), X) dj(this, a, c);else if (this.flush(), cj(this, a, c), c.za && c.za.length) {
	      b = Jh(a).is;
	      var d;

	      a: {
	        if (d = Yi.cache[b]) for (var e = d.length - 1; 0 <= e; e--) {
	          var f = d[e];

	          b: {
	            var g = c.za;

	            for (var h = 0; h < g.length; h++) {
	              var k = g[h];

	              if (f.P[k] !== c.R[k]) {
	                g = !1;
	                break b;
	              }
	            }

	            g = !0;
	          }

	          if (g) {
	            d = f;
	            break a;
	          }
	        }
	        d = void 0;
	      }

	      g = d ? d.styleElement : null;
	      e = c.L;
	      (f = d && d.L) || (f = this.da[b] = (this.da[b] || 0) + 1, f = b + "-" + f);
	      c.L = f;
	      f = c.L;
	      h = Fi;
	      h = g ? g.textContent || "" : Bi(h, a, c.R, f);
	      k = ni(a);
	      var l = k.g;
	      l && !V && l !== g && (l._useCount--, 0 >= l._useCount && l.parentNode && l.parentNode.removeChild(l));
	      V ? k.g ? (k.g.textContent = h, g = k.g) : h && (g = Ah(h, f, a.shadowRoot, k.h)) : g ? g.parentNode || (ri && -1 < h.indexOf("@media") && (g.textContent = h), Ch(g, null, k.h)) : h && (g = Ah(h, f, null, k.h));
	      g && (g._useCount = g._useCount || 0, k.g != g && g._useCount++, k.g = g);
	      f = g;
	      V || (g = c.L, k = h = a.getAttribute("class") || "", e && (k = h.replace(new RegExp("\\s*x-scope\\s*" + e + "\\s*", "g"), " ")), k += (k ? " " : "") + "x-scope " + g, h !== k && Hh(a, k));
	      d || Yi.store(b, c.R, f, c.L);
	    }
	  };

	  function dj(a, b, c) {
	    var d = Jh(b).is;

	    if (c.K) {
	      var e = c.K,
	          f;

	      for (f in e) {
	        null === f ? b.style.removeProperty(f) : b.style.setProperty(f, e[f]);
	      }
	    }

	    e = Si[d];

	    if (!(!e && b !== a.i || e && "" !== Lh(e)) && e && e._style && !Vi(e)) {
	      if (Vi(e) || e._applyShimValidatingVersion !== e._applyShimNextVersion) Zi(a), a.h && a.h.transformRules(e._styleAst, d), e._style.textContent = Uh(b, c.M), Wi(e);
	      V && (a = b.shadowRoot) && (a = a.querySelector("style")) && (a.textContent = Uh(b, c.M));
	      c.M = e._styleAst;
	    }
	  }

	  function ej(a, b) {
	    return (b = Ih(b).getRootNode().host) ? ni(b) || $i(b) ? b : ej(a, b) : a.i;
	  }

	  function cj(a, b, c) {
	    var d = ej(a, b),
	        e = ni(d),
	        f = e.R;
	    d === a.i || f || (cj(a, d, e), f = e.R);
	    a = Object.create(f || null);
	    d = Ai(b, c.M, c.cssBuild);
	    b = yi(e.M, b).P;
	    Object.assign(a, d.Za, b, d.hb);
	    b = c.K;

	    for (var g in b) {
	      if ((e = b[g]) || 0 === e) a[g] = e;
	    }

	    g = Fi;
	    b = Object.getOwnPropertyNames(a);

	    for (e = 0; e < b.length; e++) {
	      d = b[e], a[d] = wi(g, a[d], a);
	    }

	    c.R = a;
	  }

	  v.styleDocument = function (a) {
	    this.styleSubtree(this.i, a);
	  };

	  v.styleSubtree = function (a, b) {
	    var c = Ih(a),
	        d = c.shadowRoot,
	        e = a === this.i;
	    (d || e) && this.styleElement(a, b);
	    if (a = e ? c : d) for (a = Array.from(a.querySelectorAll("*")).filter(function (f) {
	      return Ih(f).shadowRoot;
	    }), b = 0; b < a.length; b++) {
	      this.styleSubtree(a[b]);
	    }
	  };

	  v.Ma = function (a) {
	    var b = this,
	        c = Lh(a);
	    c !== this.u.cssBuild && (this.u.cssBuild = c);

	    if (!Mh(c)) {
	      var d = yh(a);
	      xh(d, function (e) {
	        if (V) li(e);else {
	          var f = Qh;
	          e.selector = e.parsedSelector;
	          li(e);
	          e.selector = e.F = Xh(f, e, f.i, void 0, void 0);
	        }
	        X && "" === c && (Zi(b), b.h && b.h.transformRule(e));
	      });
	      X ? a.textContent = wh(d) : this.u.M.rules.push(d);
	    }
	  };

	  v.getComputedStyleValue = function (a, b) {
	    var c;
	    X || (c = (ni(a) || ni(ej(this, a))).R[b]);
	    return (c = c || window.getComputedStyle(a).getPropertyValue(b)) ? c.trim() : "";
	  };

	  v.kb = function (a, b) {
	    var c = Ih(a).getRootNode();
	    b = b ? ("string" === typeof b ? b : String(b)).split(/\s/) : [];
	    c = c.host && c.host.localName;

	    if (!c) {
	      var d = a.getAttribute("class");

	      if (d) {
	        d = d.split(/\s/);

	        for (var e = 0; e < d.length; e++) {
	          if (d[e] === Qh.g) {
	            c = d[e + 1];
	            break;
	          }
	        }
	      }
	    }

	    c && b.push(Qh.g, c);
	    X || (c = ni(a)) && c.L && b.push(Fi.g, c.L);
	    Hh(a, b.join(" "));
	  };

	  v.Ta = function (a) {
	    return ni(a);
	  };

	  v.jb = function (a, b) {
	    Rh(a, b);
	  };

	  v.mb = function (a, b) {
	    Rh(a, b, !0);
	  };

	  v.ib = function (a) {
	    return Ni(a);
	  };

	  v.Va = function (a) {
	    return Mi(a);
	  };

	  Y.prototype.flush = Y.prototype.flush;
	  Y.prototype.prepareTemplate = Y.prototype.prepareTemplate;
	  Y.prototype.styleElement = Y.prototype.styleElement;
	  Y.prototype.styleDocument = Y.prototype.styleDocument;
	  Y.prototype.styleSubtree = Y.prototype.styleSubtree;
	  Y.prototype.getComputedStyleValue = Y.prototype.getComputedStyleValue;
	  Y.prototype.setElementClass = Y.prototype.kb;
	  Y.prototype._styleInfoForNode = Y.prototype.Ta;
	  Y.prototype.transformCustomStyleForDocument = Y.prototype.Ma;
	  Y.prototype.getStyleAst = Y.prototype.Xa;
	  Y.prototype.styleAstToString = Y.prototype.lb;
	  Y.prototype.flushCustomStyles = Y.prototype.flushCustomStyles;
	  Y.prototype.scopeNode = Y.prototype.jb;
	  Y.prototype.unscopeNode = Y.prototype.mb;
	  Y.prototype.scopeForNode = Y.prototype.ib;
	  Y.prototype.currentScopeForNode = Y.prototype.Va;
	  Y.prototype.prepareAdoptedCssText = Y.prototype.fb;
	  Object.defineProperties(Y.prototype, {
	    nativeShadow: {
	      get: function get() {
	        return V;
	      }
	    },
	    nativeCss: {
	      get: function get() {
	        return X;
	      }
	    }
	  });
	  var Z = new Y(),
	      fj,
	      gj;
	  window.ShadyCSS && (fj = window.ShadyCSS.ApplyShim, gj = window.ShadyCSS.CustomStyleInterface);
	  window.ShadyCSS = {
	    ScopingShim: Z,
	    prepareTemplate: function prepareTemplate(a, b, c) {
	      Z.flushCustomStyles();
	      Z.prepareTemplate(a, b, c);
	    },
	    prepareTemplateDom: function prepareTemplateDom(a, b) {
	      Z.prepareTemplateDom(a, b);
	    },
	    prepareTemplateStyles: function prepareTemplateStyles(a, b, c) {
	      Z.flushCustomStyles();
	      Z.prepareTemplateStyles(a, b, c);
	    },
	    styleSubtree: function styleSubtree(a, b) {
	      Z.flushCustomStyles();
	      Z.styleSubtree(a, b);
	    },
	    styleElement: function styleElement(a) {
	      Z.flushCustomStyles();
	      Z.styleElement(a);
	    },
	    styleDocument: function styleDocument(a) {
	      Z.flushCustomStyles();
	      Z.styleDocument(a);
	    },
	    flushCustomStyles: function flushCustomStyles() {
	      Z.flushCustomStyles();
	    },
	    getComputedStyleValue: function getComputedStyleValue(a, b) {
	      return Z.getComputedStyleValue(a, b);
	    },
	    nativeCss: X,
	    nativeShadow: V,
	    cssBuild: nh,
	    disableRuntime: oh
	  };
	  fj && (window.ShadyCSS.ApplyShim = fj);
	  gj && (window.ShadyCSS.CustomStyleInterface = gj);

	  (function (a) {
	    function b(t) {
	      "" == t && (f.call(this), this.m = !0);
	      return t.toLowerCase();
	    }

	    function c(t) {
	      var F = t.charCodeAt(0);
	      return 32 < F && 127 > F && -1 == [34, 35, 60, 62, 63, 96].indexOf(F) ? t : encodeURIComponent(t);
	    }

	    function d(t) {
	      var F = t.charCodeAt(0);
	      return 32 < F && 127 > F && -1 == [34, 35, 60, 62, 96].indexOf(F) ? t : encodeURIComponent(t);
	    }

	    function e(t, F, E) {
	      function M(fa) {
	      }

	      var y = F || "scheme start",
	          W = 0,
	          w = "",
	          ta = !1,
	          ha = !1;

	      a: for (; (void 0 != t[W - 1] || 0 == W) && !this.m;) {
	        var n = t[W];

	        switch (y) {
	          case "scheme start":
	            if (n && q.test(n)) w += n.toLowerCase(), y = "scheme";else if (F) {
	              break a;
	            } else {
	              w = "";
	              y = "no scheme";
	              continue;
	            }
	            break;

	          case "scheme":
	            if (n && H.test(n)) w += n.toLowerCase();else if (":" == n) {
	              this.l = w;
	              w = "";
	              if (F) break a;
	              void 0 !== l[this.l] && (this.G = !0);
	              y = "file" == this.l ? "relative" : this.G && E && E.l == this.l ? "relative or authority" : this.G ? "authority first slash" : "scheme data";
	            } else if (F) {
	              break a;
	            } else {
	              w = "";
	              W = 0;
	              y = "no scheme";
	              continue;
	            }
	            break;

	          case "scheme data":
	            "?" == n ? (this.A = "?", y = "query") : "#" == n ? (this.C = "#", y = "fragment") : void 0 != n && "\t" != n && "\n" != n && "\r" != n && (this.va += c(n));
	            break;

	          case "no scheme":
	            if (E && void 0 !== l[E.l]) {
	              y = "relative";
	              continue;
	            } else f.call(this), this.m = !0;

	            break;

	          case "relative or authority":
	            if ("/" == n && "/" == t[W + 1]) y = "authority ignore slashes";else {
	              y = "relative";
	              continue;
	            }
	            break;

	          case "relative":
	            this.G = !0;
	            "file" != this.l && (this.l = E.l);

	            if (void 0 == n) {
	              this.o = E.o;
	              this.v = E.v;
	              this.s = E.s.slice();
	              this.A = E.A;
	              this.B = E.B;
	              this.j = E.j;
	              break a;
	            } else if ("/" == n || "\\" == n) y = "relative slash";else if ("?" == n) this.o = E.o, this.v = E.v, this.s = E.s.slice(), this.A = "?", this.B = E.B, this.j = E.j, y = "query";else if ("#" == n) this.o = E.o, this.v = E.v, this.s = E.s.slice(), this.A = E.A, this.C = "#", this.B = E.B, this.j = E.j, y = "fragment";else {
	              y = t[W + 1];
	              var J = t[W + 2];
	              if ("file" != this.l || !q.test(n) || ":" != y && "|" != y || void 0 != J && "/" != J && "\\" != J && "?" != J && "#" != J) this.o = E.o, this.v = E.v, this.B = E.B, this.j = E.j, this.s = E.s.slice(), this.s.pop();
	              y = "relative path";
	              continue;
	            }

	            break;

	          case "relative slash":
	            if ("/" == n || "\\" == n) y = "file" == this.l ? "file host" : "authority ignore slashes";else {
	              "file" != this.l && (this.o = E.o, this.v = E.v, this.B = E.B, this.j = E.j);
	              y = "relative path";
	              continue;
	            }
	            break;

	          case "authority first slash":
	            if ("/" == n) y = "authority second slash";else {
	              y = "authority ignore slashes";
	              continue;
	            }
	            break;

	          case "authority second slash":
	            y = "authority ignore slashes";

	            if ("/" != n) {
	              continue;
	            }

	            break;

	          case "authority ignore slashes":
	            if ("/" != n && "\\" != n) {
	              y = "authority";
	              continue;
	            }

	            break;

	          case "authority":
	            if ("@" == n) {
	              ta && (w += "%40");
	              ta = !0;

	              for (n = 0; n < w.length; n++) {
	                J = w[n], "\t" == J || "\n" == J || "\r" == J ? M() : ":" == J && null === this.j ? this.j = "" : (J = c(J), null !== this.j ? this.j += J : this.B += J);
	              }

	              w = "";
	            } else if (void 0 == n || "/" == n || "\\" == n || "?" == n || "#" == n) {
	              W -= w.length;
	              w = "";
	              y = "host";
	              continue;
	            } else w += n;

	            break;

	          case "file host":
	            if (void 0 == n || "/" == n || "\\" == n || "?" == n || "#" == n) {
	              2 != w.length || !q.test(w[0]) || ":" != w[1] && "|" != w[1] ? (0 != w.length && (this.o = b.call(this, w), w = ""), y = "relative path start") : y = "relative path";
	              continue;
	            } else "\t" == n || "\n" == n || "\r" == n ? M() : w += n;

	            break;

	          case "host":
	          case "hostname":
	            if (":" != n || ha) {
	              if (void 0 == n || "/" == n || "\\" == n || "?" == n || "#" == n) {
	                this.o = b.call(this, w);
	                w = "";
	                y = "relative path start";
	                if (F) break a;
	                continue;
	              } else "\t" != n && "\n" != n && "\r" != n ? ("[" == n ? ha = !0 : "]" == n && (ha = !1), w += n) : M();
	            } else if (this.o = b.call(this, w), w = "", y = "port", "hostname" == F) break a;
	            break;

	          case "port":
	            if (/[0-9]/.test(n)) w += n;else if (void 0 == n || "/" == n || "\\" == n || "?" == n || "#" == n || F) {
	              "" != w && (w = parseInt(w, 10), w != l[this.l] && (this.v = w + ""), w = "");
	              if (F) break a;
	              y = "relative path start";
	              continue;
	            } else "\t" == n || "\n" == n || "\r" == n ? M() : (f.call(this), this.m = !0);
	            break;

	          case "relative path start":
	            y = "relative path";
	            if ("/" != n && "\\" != n) continue;
	            break;

	          case "relative path":
	            if (void 0 != n && "/" != n && "\\" != n && (F || "?" != n && "#" != n)) "\t" != n && "\n" != n && "\r" != n && (w += c(n));else {
	              if (J = m[w.toLowerCase()]) w = J;
	              ".." == w ? (this.s.pop(), "/" != n && "\\" != n && this.s.push("")) : "." == w && "/" != n && "\\" != n ? this.s.push("") : "." != w && ("file" == this.l && 0 == this.s.length && 2 == w.length && q.test(w[0]) && "|" == w[1] && (w = w[0] + ":"), this.s.push(w));
	              w = "";
	              "?" == n ? (this.A = "?", y = "query") : "#" == n && (this.C = "#", y = "fragment");
	            }
	            break;

	          case "query":
	            F || "#" != n ? void 0 != n && "\t" != n && "\n" != n && "\r" != n && (this.A += d(n)) : (this.C = "#", y = "fragment");
	            break;

	          case "fragment":
	            void 0 != n && "\t" != n && "\n" != n && "\r" != n && (this.C += n);
	        }

	        W++;
	      }
	    }

	    function f() {
	      this.B = this.va = this.l = "";
	      this.j = null;
	      this.v = this.o = "";
	      this.s = [];
	      this.C = this.A = "";
	      this.G = this.m = !1;
	    }

	    function g(t, F) {
	      void 0 === F || F instanceof g || (F = new g(String(F)));
	      this.g = t;
	      f.call(this);
	      e.call(this, this.g.replace(/^[ \t\r\n\f]+|[ \t\r\n\f]+$/g, ""), null, F);
	    }

	    var h = !1;

	    try {
	      var k = new URL("b", "http://a");
	      k.pathname = "c%20d";
	      h = "http://a/c%20d" === k.href;
	    } catch (t) {}

	    if (!h) {
	      var l = Object.create(null);
	      l.ftp = 21;
	      l.file = 0;
	      l.gopher = 70;
	      l.http = 80;
	      l.https = 443;
	      l.ws = 80;
	      l.wss = 443;
	      var m = Object.create(null);
	      m["%2e"] = ".";
	      m[".%2e"] = "..";
	      m["%2e."] = "..";
	      m["%2e%2e"] = "..";
	      var q = /[a-zA-Z]/,
	          H = /[a-zA-Z0-9+\-.]/;
	      g.prototype = {
	        toString: function toString() {
	          return this.href;
	        },

	        get href() {
	          if (this.m) return this.g;
	          var t = "";
	          if ("" != this.B || null != this.j) t = this.B + (null != this.j ? ":" + this.j : "") + "@";
	          return this.protocol + (this.G ? "//" + t + this.host : "") + this.pathname + this.A + this.C;
	        },

	        set href(t) {
	          f.call(this);
	          e.call(this, t);
	        },

	        get protocol() {
	          return this.l + ":";
	        },

	        set protocol(t) {
	          this.m || e.call(this, t + ":", "scheme start");
	        },

	        get host() {
	          return this.m ? "" : this.v ? this.o + ":" + this.v : this.o;
	        },

	        set host(t) {
	          !this.m && this.G && e.call(this, t, "host");
	        },

	        get hostname() {
	          return this.o;
	        },

	        set hostname(t) {
	          !this.m && this.G && e.call(this, t, "hostname");
	        },

	        get port() {
	          return this.v;
	        },

	        set port(t) {
	          !this.m && this.G && e.call(this, t, "port");
	        },

	        get pathname() {
	          return this.m ? "" : this.G ? "/" + this.s.join("/") : this.va;
	        },

	        set pathname(t) {
	          !this.m && this.G && (this.s = [], e.call(this, t, "relative path start"));
	        },

	        get search() {
	          return this.m || !this.A || "?" == this.A ? "" : this.A;
	        },

	        set search(t) {
	          !this.m && this.G && (this.A = "?", "?" == t[0] && (t = t.slice(1)), e.call(this, t, "query"));
	        },

	        get hash() {
	          return this.m || !this.C || "#" == this.C ? "" : this.C;
	        },

	        set hash(t) {
	          this.m || (t ? (this.C = "#", "#" == t[0] && (t = t.slice(1)), e.call(this, t, "fragment")) : this.C = "");
	        },

	        get origin() {
	          var t;
	          if (this.m || !this.l) return "";

	          switch (this.l) {
	            case "data":
	            case "file":
	            case "javascript":
	            case "mailto":
	              return "null";
	          }

	          return (t = this.host) ? this.l + "://" + t : "";
	        }

	      };
	      var C = a.URL;
	      C && (g.createObjectURL = function (t) {
	        return C.createObjectURL.apply(C, arguments);
	      }, g.revokeObjectURL = function (t) {
	        C.revokeObjectURL(t);
	      });
	      a.URL = g;
	    }
	  })(window);
	  /*
	  Copyright (c) 2018 The Polymer Project Authors. All rights reserved.
	  This code may only be used under the BSD style license found at http://polymer.github.io/LICENSE.txt
	  The complete set of authors may be found at http://polymer.github.io/AUTHORS.txt
	  The complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt
	  Code distributed by Google as part of the polymer project is also
	  subject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt
	  */


	  var hj = window.customElements,
	      ij = !1,
	      jj = null;
	  hj.polyfillWrapFlushCallback && hj.polyfillWrapFlushCallback(function (a) {
	    jj = a;
	    ij && a();
	  });

	  function kj() {
	    window.HTMLTemplateElement.bootstrap && window.HTMLTemplateElement.bootstrap(window.document);
	    jj && jj();
	    ij = !0;
	    window.WebComponents.ready = !0;
	    document.dispatchEvent(new CustomEvent("WebComponentsReady", {
	      bubbles: !0
	    }));
	  }

	  "complete" !== document.readyState ? (window.addEventListener("load", kj), window.addEventListener("DOMContentLoaded", function () {
	    window.removeEventListener("load", kj);
	    kj();
	  })) : kj();
	}).call(commonjsGlobal);

	!function (i) {
	  "function" == typeof define && define.amd ? define(i) : i();
	}(function () {

	  var i;
	  i = function i() {
	    var i, n;
	    i = function i() {
	      /**
	                          * @license
	                          * Copyright 2017 Google LLC
	                          * SPDX-License-Identifier: BSD-3-Clause
	                          */
	      var i,
	          n = "__scoped";
	      null !== (i = globalThis.reactiveElementPolyfillSupport) && void 0 !== i || (globalThis.reactiveElementPolyfillSupport = function (i) {
	        var o = i.ReactiveElement;

	        if (void 0 !== window.ShadyCSS && (!window.ShadyCSS.nativeShadow || window.ShadyCSS.ApplyShim)) {
	          var t = o.prototype;
	          window.ShadyDOM && window.ShadyDOM.inUse && !0 === window.ShadyDOM.noPatch && window.ShadyDOM.patchElementProto(t);
	          var d = t.createRenderRoot;

	          t.createRenderRoot = function () {
	            var i,
	                o,
	                t,
	                e = this.localName;
	            if (window.ShadyCSS.nativeShadow) return d.call(this);

	            if (!this.constructor.hasOwnProperty(n)) {
	              this.constructor[n] = !0;
	              var u = this.constructor.elementStyles.map(function (i) {
	                return i instanceof CSSStyleSheet ? Array.from(i.cssRules).reduce(function (i, n) {
	                  return i + n.cssText;
	                }, "") : i.cssText;
	              });
	              null === (o = null === (i = window.ShadyCSS) || void 0 === i ? void 0 : i.ScopingShim) || void 0 === o || o.prepareAdoptedCssText(u, e), void 0 === this.constructor._$AJ && window.ShadyCSS.prepareTemplateStyles(document.createElement("template"), e);
	            }

	            return null !== (t = this.shadowRoot) && void 0 !== t ? t : this.attachShadow(this.constructor.shadowRootOptions);
	          };

	          var e = t.connectedCallback;

	          t.connectedCallback = function () {
	            e.call(this), this.hasUpdated && window.ShadyCSS.styleElement(this);
	          };

	          var u = t._$AE;

	          t._$AE = function (i) {
	            this.hasUpdated || window.ShadyCSS.styleElement(this), u.call(this, i);
	          };
	        }
	      });
	    }, "function" == typeof define && define.amd ? define(i) : i(), function (i) {
	      "function" == typeof define && define.amd ? define(i) : i();
	    }(function () {
	      /**
	                          * @license
	                          * Copyright 2017 Google LLC
	                          * SPDX-License-Identifier: BSD-3-Clause
	                          */
	      var i,
	          n = new Set(),
	          o = new Map();
	      null !== (i = globalThis.litHtmlPolyfillSupport) && void 0 !== i || (globalThis.litHtmlPolyfillSupport = function (i, t) {
	        if (void 0 !== window.ShadyCSS && (!window.ShadyCSS.nativeShadow || window.ShadyCSS.ApplyShim)) {
	          var d = function d(i) {
	            return void 0 !== i && !n.has(i);
	          },
	              e = function e(i) {
	            var n = o.get(i);
	            return void 0 === n && o.set(i, n = []), n;
	          },
	              u = new Map(),
	              v = i.createElement;

	          i.createElement = function (n, o) {
	            var t = v.call(i, n, o),
	                u = null == o ? void 0 : o.scope;

	            if (void 0 !== u && (window.ShadyCSS.nativeShadow || window.ShadyCSS.prepareTemplateDom(t, u), d(u))) {
	              var f = e(u),
	                  r = t.content.querySelectorAll("style");
	              f.push.apply(f, Array.from(r).map(function (i) {
	                var n;
	                return null === (n = i.parentNode) || void 0 === n || n.removeChild(i), i.textContent;
	              }));
	            }

	            return t;
	          };

	          var f = document.createDocumentFragment(),
	              r = document.createComment(""),
	              w = t.prototype,
	              l = w._$AI;
	          w._$AI = function (i, t) {
	            var u, v, w;
	            void 0 === t && (t = this);
	            var s = this._$AA.parentNode,
	                a = null === (u = this.options) || void 0 === u ? void 0 : u.scope;

	            if (s instanceof ShadowRoot && d(a)) {
	              var h = this._$AA,
	                  c = this._$AB;
	              f.appendChild(r), this._$AA = r, this._$AB = null, l.call(this, i, t);
	              var y = (null === (v = i) || void 0 === v ? void 0 : v._$litType$) ? this._$AH._$AD.el : document.createElement("template");

	              if (function (i, t) {
	                var d,
	                    u = e(i),
	                    v = 0 !== u.length;
	                v && ((d = document.createElement("style")).textContent = u.join("\n"), t.content.appendChild(d)), n.add(i), o.delete(i), window.ShadyCSS.prepareTemplateStyles(t, i), v && window.ShadyCSS.nativeShadow && null !== (d = t.content.querySelector("style")) && t.content.appendChild(d);
	              }(a, y), f.removeChild(r), null === (w = window.ShadyCSS) || void 0 === w ? void 0 : w.nativeShadow) {
	                var p = y.content.querySelector("style");
	                null !== p && f.appendChild(p.cloneNode(!0));
	              }

	              s.insertBefore(f, c), this._$AA = h, this._$AB = c;
	            } else l.call(this, i, t);
	          }, w._$AC = function (n) {
	            var o,
	                t = null === (o = this.options) || void 0 === o ? void 0 : o.scope,
	                d = u.get(t);
	            void 0 === d && u.set(t, d = new Map());
	            var e = d.get(n.strings);
	            return void 0 === e && d.set(n.strings, e = new i(n, this.options)), e;
	          };
	        }
	      });
	    }), null !== (n = globalThis.litElementPolyfillSupport) && void 0 !== n || (globalThis.litElementPolyfillSupport = function (i) {
	      var n = i.LitElement;

	      if (void 0 !== window.ShadyCSS && (!window.ShadyCSS.nativeShadow || window.ShadyCSS.ApplyShim)) {
	        n._$AJ = !0;
	        var o = n.prototype,
	            t = o.createRenderRoot;

	        o.createRenderRoot = function () {
	          return this.renderOptions.scope = this.localName, t.call(this);
	        };
	      }
	    });
	  }, "function" == typeof define && define.amd ? define(i) : i();
	});

	var button = {exports: {}};

	var eventHandler = {exports: {}};

	(function (module, exports) {
	  (function (global, factory) {
	    module.exports = factory() ;
	  })(commonjsGlobal, function () {
	    /**
	     * --------------------------------------------------------------------------
	     * Bootstrap (v5.1.3): util/index.js
	     * Licensed under MIT (https://github.com/twbs/bootstrap/blob/main/LICENSE)
	     * --------------------------------------------------------------------------
	     */

	    var getjQuery = function getjQuery() {
	      var _window = window,
	          jQuery = _window.jQuery;

	      if (jQuery && !document.body.hasAttribute('data-bs-no-jquery')) {
	        return jQuery;
	      }

	      return null;
	    };
	    /**
	     * --------------------------------------------------------------------------
	     * Bootstrap (v5.1.3): dom/event-handler.js
	     * Licensed under MIT (https://github.com/twbs/bootstrap/blob/main/LICENSE)
	     * --------------------------------------------------------------------------
	     */

	    /**
	     * ------------------------------------------------------------------------
	     * Constants
	     * ------------------------------------------------------------------------
	     */


	    var namespaceRegex = /[^.]*(?=\..*)\.|.*/;
	    var stripNameRegex = /\..*/;
	    var stripUidRegex = /::\d+$/;
	    var eventRegistry = {}; // Events storage

	    var uidEvent = 1;
	    var customEvents = {
	      mouseenter: 'mouseover',
	      mouseleave: 'mouseout'
	    };
	    var customEventsRegex = /^(mouseenter|mouseleave)/i;
	    var nativeEvents = new Set(['click', 'dblclick', 'mouseup', 'mousedown', 'contextmenu', 'mousewheel', 'DOMMouseScroll', 'mouseover', 'mouseout', 'mousemove', 'selectstart', 'selectend', 'keydown', 'keypress', 'keyup', 'orientationchange', 'touchstart', 'touchmove', 'touchend', 'touchcancel', 'pointerdown', 'pointermove', 'pointerup', 'pointerleave', 'pointercancel', 'gesturestart', 'gesturechange', 'gestureend', 'focus', 'blur', 'change', 'reset', 'select', 'submit', 'focusin', 'focusout', 'load', 'unload', 'beforeunload', 'resize', 'move', 'DOMContentLoaded', 'readystatechange', 'error', 'abort', 'scroll']);
	    /**
	     * ------------------------------------------------------------------------
	     * Private methods
	     * ------------------------------------------------------------------------
	     */

	    function getUidEvent(element, uid) {
	      return uid && "".concat(uid, "::").concat(uidEvent++) || element.uidEvent || uidEvent++;
	    }

	    function getEvent(element) {
	      var uid = getUidEvent(element);
	      element.uidEvent = uid;
	      eventRegistry[uid] = eventRegistry[uid] || {};
	      return eventRegistry[uid];
	    }

	    function bootstrapHandler(element, fn) {
	      return function handler(event) {
	        event.delegateTarget = element;

	        if (handler.oneOff) {
	          EventHandler.off(element, event.type, fn);
	        }

	        return fn.apply(element, [event]);
	      };
	    }

	    function bootstrapDelegationHandler(element, selector, fn) {
	      return function handler(event) {
	        var domElements = element.querySelectorAll(selector);

	        for (var target = event.target; target && target !== this; target = target.parentNode) {
	          for (var i = domElements.length; i--;) {
	            if (domElements[i] === target) {
	              event.delegateTarget = target;

	              if (handler.oneOff) {
	                EventHandler.off(element, event.type, selector, fn);
	              }

	              return fn.apply(target, [event]);
	            }
	          }
	        } // To please ESLint


	        return null;
	      };
	    }

	    function findHandler(events, handler) {
	      var delegationSelector = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;
	      var uidEventList = Object.keys(events);

	      for (var i = 0, len = uidEventList.length; i < len; i++) {
	        var event = events[uidEventList[i]];

	        if (event.originalHandler === handler && event.delegationSelector === delegationSelector) {
	          return event;
	        }
	      }

	      return null;
	    }

	    function normalizeParams(originalTypeEvent, handler, delegationFn) {
	      var delegation = typeof handler === 'string';
	      var originalHandler = delegation ? delegationFn : handler;
	      var typeEvent = getTypeEvent(originalTypeEvent);
	      var isNative = nativeEvents.has(typeEvent);

	      if (!isNative) {
	        typeEvent = originalTypeEvent;
	      }

	      return [delegation, originalHandler, typeEvent];
	    }

	    function addHandler(element, originalTypeEvent, handler, delegationFn, oneOff) {
	      if (typeof originalTypeEvent !== 'string' || !element) {
	        return;
	      }

	      if (!handler) {
	        handler = delegationFn;
	        delegationFn = null;
	      } // in case of mouseenter or mouseleave wrap the handler within a function that checks for its DOM position
	      // this prevents the handler from being dispatched the same way as mouseover or mouseout does


	      if (customEventsRegex.test(originalTypeEvent)) {
	        var wrapFn = function wrapFn(fn) {
	          return function (event) {
	            if (!event.relatedTarget || event.relatedTarget !== event.delegateTarget && !event.delegateTarget.contains(event.relatedTarget)) {
	              return fn.call(this, event);
	            }
	          };
	        };

	        if (delegationFn) {
	          delegationFn = wrapFn(delegationFn);
	        } else {
	          handler = wrapFn(handler);
	        }
	      }

	      var _normalizeParams = normalizeParams(originalTypeEvent, handler, delegationFn),
	          _normalizeParams2 = _slicedToArray(_normalizeParams, 3),
	          delegation = _normalizeParams2[0],
	          originalHandler = _normalizeParams2[1],
	          typeEvent = _normalizeParams2[2];

	      var events = getEvent(element);
	      var handlers = events[typeEvent] || (events[typeEvent] = {});
	      var previousFn = findHandler(handlers, originalHandler, delegation ? handler : null);

	      if (previousFn) {
	        previousFn.oneOff = previousFn.oneOff && oneOff;
	        return;
	      }

	      var uid = getUidEvent(originalHandler, originalTypeEvent.replace(namespaceRegex, ''));
	      var fn = delegation ? bootstrapDelegationHandler(element, handler, delegationFn) : bootstrapHandler(element, handler);
	      fn.delegationSelector = delegation ? handler : null;
	      fn.originalHandler = originalHandler;
	      fn.oneOff = oneOff;
	      fn.uidEvent = uid;
	      handlers[uid] = fn;
	      element.addEventListener(typeEvent, fn, delegation);
	    }

	    function removeHandler(element, events, typeEvent, handler, delegationSelector) {
	      var fn = findHandler(events[typeEvent], handler, delegationSelector);

	      if (!fn) {
	        return;
	      }

	      element.removeEventListener(typeEvent, fn, Boolean(delegationSelector));
	      delete events[typeEvent][fn.uidEvent];
	    }

	    function removeNamespacedHandlers(element, events, typeEvent, namespace) {
	      var storeElementEvent = events[typeEvent] || {};
	      Object.keys(storeElementEvent).forEach(function (handlerKey) {
	        if (handlerKey.includes(namespace)) {
	          var event = storeElementEvent[handlerKey];
	          removeHandler(element, events, typeEvent, event.originalHandler, event.delegationSelector);
	        }
	      });
	    }

	    function getTypeEvent(event) {
	      // allow to get the native events from namespaced events ('click.bs.button' --> 'click')
	      event = event.replace(stripNameRegex, '');
	      return customEvents[event] || event;
	    }

	    var EventHandler = {
	      on: function on(element, event, handler, delegationFn) {
	        addHandler(element, event, handler, delegationFn, false);
	      },
	      one: function one(element, event, handler, delegationFn) {
	        addHandler(element, event, handler, delegationFn, true);
	      },
	      off: function off(element, originalTypeEvent, handler, delegationFn) {
	        if (typeof originalTypeEvent !== 'string' || !element) {
	          return;
	        }

	        var _normalizeParams3 = normalizeParams(originalTypeEvent, handler, delegationFn),
	            _normalizeParams4 = _slicedToArray(_normalizeParams3, 3),
	            delegation = _normalizeParams4[0],
	            originalHandler = _normalizeParams4[1],
	            typeEvent = _normalizeParams4[2];

	        var inNamespace = typeEvent !== originalTypeEvent;
	        var events = getEvent(element);
	        var isNamespace = originalTypeEvent.startsWith('.');

	        if (typeof originalHandler !== 'undefined') {
	          // Simplest case: handler is passed, remove that listener ONLY.
	          if (!events || !events[typeEvent]) {
	            return;
	          }

	          removeHandler(element, events, typeEvent, originalHandler, delegation ? handler : null);
	          return;
	        }

	        if (isNamespace) {
	          Object.keys(events).forEach(function (elementEvent) {
	            removeNamespacedHandlers(element, events, elementEvent, originalTypeEvent.slice(1));
	          });
	        }

	        var storeElementEvent = events[typeEvent] || {};
	        Object.keys(storeElementEvent).forEach(function (keyHandlers) {
	          var handlerKey = keyHandlers.replace(stripUidRegex, '');

	          if (!inNamespace || originalTypeEvent.includes(handlerKey)) {
	            var event = storeElementEvent[keyHandlers];
	            removeHandler(element, events, typeEvent, event.originalHandler, event.delegationSelector);
	          }
	        });
	      },
	      trigger: function trigger(element, event, args) {
	        if (typeof event !== 'string' || !element) {
	          return null;
	        }

	        var $ = getjQuery();
	        var typeEvent = getTypeEvent(event);
	        var inNamespace = event !== typeEvent;
	        var isNative = nativeEvents.has(typeEvent);
	        var jQueryEvent;
	        var bubbles = true;
	        var nativeDispatch = true;
	        var defaultPrevented = false;
	        var evt = null;

	        if (inNamespace && $) {
	          jQueryEvent = $.Event(event, args);
	          $(element).trigger(jQueryEvent);
	          bubbles = !jQueryEvent.isPropagationStopped();
	          nativeDispatch = !jQueryEvent.isImmediatePropagationStopped();
	          defaultPrevented = jQueryEvent.isDefaultPrevented();
	        }

	        if (isNative) {
	          evt = document.createEvent('HTMLEvents');
	          evt.initEvent(typeEvent, bubbles, true);
	        } else {
	          evt = new CustomEvent(event, {
	            bubbles: bubbles,
	            cancelable: true
	          });
	        } // merge custom information in our event


	        if (typeof args !== 'undefined') {
	          Object.keys(args).forEach(function (key) {
	            Object.defineProperty(evt, key, {
	              get: function get() {
	                return args[key];
	              }
	            });
	          });
	        }

	        if (defaultPrevented) {
	          evt.preventDefault();
	        }

	        if (nativeDispatch) {
	          element.dispatchEvent(evt);
	        }

	        if (evt.defaultPrevented && typeof jQueryEvent !== 'undefined') {
	          jQueryEvent.preventDefault();
	        }

	        return evt;
	      }
	    };
	    return EventHandler;
	  });
	})(eventHandler);

	var baseComponent = {exports: {}};

	var data = {exports: {}};

	/*!
	  * Bootstrap data.js v5.1.3 (https://getbootstrap.com/)
	  * Copyright 2011-2021 The Bootstrap Authors (https://github.com/twbs/bootstrap/graphs/contributors)
	  * Licensed under MIT (https://github.com/twbs/bootstrap/blob/main/LICENSE)
	  */

	(function (module, exports) {
	  (function (global, factory) {
	    module.exports = factory() ;
	  })(commonjsGlobal, function () {
	    /**
	     * --------------------------------------------------------------------------
	     * Bootstrap (v5.1.3): dom/data.js
	     * Licensed under MIT (https://github.com/twbs/bootstrap/blob/main/LICENSE)
	     * --------------------------------------------------------------------------
	     */

	    /**
	     * ------------------------------------------------------------------------
	     * Constants
	     * ------------------------------------------------------------------------
	     */

	    var elementMap = new Map();
	    var data = {
	      set: function set(element, key, instance) {
	        if (!elementMap.has(element)) {
	          elementMap.set(element, new Map());
	        }

	        var instanceMap = elementMap.get(element); // make it clear we only want one instance per element
	        // can be removed later when multiple key/instances are fine to be used

	        if (!instanceMap.has(key) && instanceMap.size !== 0) {
	          // eslint-disable-next-line no-console
	          console.error("Bootstrap doesn't allow more than one instance per element. Bound instance: ".concat(Array.from(instanceMap.keys())[0], "."));
	          return;
	        }

	        instanceMap.set(key, instance);
	      },
	      get: function get(element, key) {
	        if (elementMap.has(element)) {
	          return elementMap.get(element).get(key) || null;
	        }

	        return null;
	      },
	      remove: function remove(element, key) {
	        if (!elementMap.has(element)) {
	          return;
	        }

	        var instanceMap = elementMap.get(element);
	        instanceMap.delete(key); // free up element references if there are no instances left for an element

	        if (instanceMap.size === 0) {
	          elementMap.delete(element);
	        }
	      }
	    };
	    return data;
	  });
	})(data);

	(function (module, exports) {
	  (function (global, factory) {
	    module.exports = factory(data.exports, eventHandler.exports) ;
	  })(commonjsGlobal, function (Data, EventHandler) {

	    var _interopDefaultLegacy = function _interopDefaultLegacy(e) {
	      return e && _typeof(e) === 'object' && 'default' in e ? e : {
	        default: e
	      };
	    };

	    var Data__default = /*#__PURE__*/_interopDefaultLegacy(Data);

	    var EventHandler__default = /*#__PURE__*/_interopDefaultLegacy(EventHandler);
	    /**
	     * --------------------------------------------------------------------------
	     * Bootstrap (v5.1.3): util/index.js
	     * Licensed under MIT (https://github.com/twbs/bootstrap/blob/main/LICENSE)
	     * --------------------------------------------------------------------------
	     */


	    var MILLISECONDS_MULTIPLIER = 1000;
	    var TRANSITION_END = 'transitionend'; // Shoutout AngusCroll (https://goo.gl/pxwQGp)

	    var getTransitionDurationFromElement = function getTransitionDurationFromElement(element) {
	      if (!element) {
	        return 0;
	      } // Get transition-duration of the element


	      var _window$getComputedSt = window.getComputedStyle(element),
	          transitionDuration = _window$getComputedSt.transitionDuration,
	          transitionDelay = _window$getComputedSt.transitionDelay;

	      var floatTransitionDuration = Number.parseFloat(transitionDuration);
	      var floatTransitionDelay = Number.parseFloat(transitionDelay); // Return 0 if element or transition duration is not found

	      if (!floatTransitionDuration && !floatTransitionDelay) {
	        return 0;
	      } // If multiple durations are defined, take the first


	      transitionDuration = transitionDuration.split(',')[0];
	      transitionDelay = transitionDelay.split(',')[0];
	      return (Number.parseFloat(transitionDuration) + Number.parseFloat(transitionDelay)) * MILLISECONDS_MULTIPLIER;
	    };

	    var triggerTransitionEnd = function triggerTransitionEnd(element) {
	      element.dispatchEvent(new Event(TRANSITION_END));
	    };

	    var isElement = function isElement(obj) {
	      if (!obj || _typeof(obj) !== 'object') {
	        return false;
	      }

	      if (typeof obj.jquery !== 'undefined') {
	        obj = obj[0];
	      }

	      return typeof obj.nodeType !== 'undefined';
	    };

	    var getElement = function getElement(obj) {
	      if (isElement(obj)) {
	        // it's a jQuery object or a node element
	        return obj.jquery ? obj[0] : obj;
	      }

	      if (typeof obj === 'string' && obj.length > 0) {
	        return document.querySelector(obj);
	      }

	      return null;
	    };

	    var execute = function execute(callback) {
	      if (typeof callback === 'function') {
	        callback();
	      }
	    };

	    var executeAfterTransition = function executeAfterTransition(callback, transitionElement) {
	      var waitForTransition = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;

	      if (!waitForTransition) {
	        execute(callback);
	        return;
	      }

	      var durationPadding = 5;
	      var emulatedDuration = getTransitionDurationFromElement(transitionElement) + durationPadding;
	      var called = false;

	      var handler = function handler(_ref) {
	        var target = _ref.target;

	        if (target !== transitionElement) {
	          return;
	        }

	        called = true;
	        transitionElement.removeEventListener(TRANSITION_END, handler);
	        execute(callback);
	      };

	      transitionElement.addEventListener(TRANSITION_END, handler);
	      setTimeout(function () {
	        if (!called) {
	          triggerTransitionEnd(transitionElement);
	        }
	      }, emulatedDuration);
	    };
	    /**
	     * --------------------------------------------------------------------------
	     * Bootstrap (v5.1.3): base-component.js
	     * Licensed under MIT (https://github.com/twbs/bootstrap/blob/main/LICENSE)
	     * --------------------------------------------------------------------------
	     */

	    /**
	     * ------------------------------------------------------------------------
	     * Constants
	     * ------------------------------------------------------------------------
	     */


	    var VERSION = '5.1.3';

	    var BaseComponent = /*#__PURE__*/function () {
	      function BaseComponent(element) {
	        _classCallCheck(this, BaseComponent);

	        element = getElement(element);

	        if (!element) {
	          return;
	        }

	        this._element = element;
	        Data__default.default.set(this._element, this.constructor.DATA_KEY, this);
	      }

	      _createClass(BaseComponent, [{
	        key: "dispose",
	        value: function dispose() {
	          var _this = this;

	          Data__default.default.remove(this._element, this.constructor.DATA_KEY);
	          EventHandler__default.default.off(this._element, this.constructor.EVENT_KEY);
	          Object.getOwnPropertyNames(this).forEach(function (propertyName) {
	            _this[propertyName] = null;
	          });
	        }
	      }, {
	        key: "_queueCallback",
	        value: function _queueCallback(callback, element) {
	          var isAnimated = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;
	          executeAfterTransition(callback, element, isAnimated);
	        }
	        /** Static */

	      }], [{
	        key: "getInstance",
	        value: function getInstance(element) {
	          return Data__default.default.get(getElement(element), this.DATA_KEY);
	        }
	      }, {
	        key: "getOrCreateInstance",
	        value: function getOrCreateInstance(element) {
	          var config = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
	          return this.getInstance(element) || new this(element, _typeof(config) === 'object' ? config : null);
	        }
	      }, {
	        key: "VERSION",
	        get: function get() {
	          return VERSION;
	        }
	      }, {
	        key: "NAME",
	        get: function get() {
	          throw new Error('You have to implement the static method "NAME", for each component!');
	        }
	      }, {
	        key: "DATA_KEY",
	        get: function get() {
	          return "bs.".concat(this.NAME);
	        }
	      }, {
	        key: "EVENT_KEY",
	        get: function get() {
	          return ".".concat(this.DATA_KEY);
	        }
	      }]);

	      return BaseComponent;
	    }();

	    return BaseComponent;
	  });
	})(baseComponent);

	(function (module, exports) {
	  (function (global, factory) {
	    module.exports = factory(eventHandler.exports, baseComponent.exports) ;
	  })(commonjsGlobal, function (EventHandler, BaseComponent) {

	    var _interopDefaultLegacy = function _interopDefaultLegacy(e) {
	      return e && _typeof(e) === 'object' && 'default' in e ? e : {
	        default: e
	      };
	    };

	    var EventHandler__default = /*#__PURE__*/_interopDefaultLegacy(EventHandler);

	    var BaseComponent__default = /*#__PURE__*/_interopDefaultLegacy(BaseComponent);
	    /**
	     * --------------------------------------------------------------------------
	     * Bootstrap (v5.1.3): util/index.js
	     * Licensed under MIT (https://github.com/twbs/bootstrap/blob/main/LICENSE)
	     * --------------------------------------------------------------------------
	     */


	    var getjQuery = function getjQuery() {
	      var _window = window,
	          jQuery = _window.jQuery;

	      if (jQuery && !document.body.hasAttribute('data-bs-no-jquery')) {
	        return jQuery;
	      }

	      return null;
	    };

	    var DOMContentLoadedCallbacks = [];

	    var onDOMContentLoaded = function onDOMContentLoaded(callback) {
	      if (document.readyState === 'loading') {
	        // add listener on the first call when the document is in loading state
	        if (!DOMContentLoadedCallbacks.length) {
	          document.addEventListener('DOMContentLoaded', function () {
	            DOMContentLoadedCallbacks.forEach(function (callback) {
	              return callback();
	            });
	          });
	        }

	        DOMContentLoadedCallbacks.push(callback);
	      } else {
	        callback();
	      }
	    };

	    var defineJQueryPlugin = function defineJQueryPlugin(plugin) {
	      onDOMContentLoaded(function () {
	        var $ = getjQuery();
	        /* istanbul ignore if */

	        if ($) {
	          var name = plugin.NAME;
	          var JQUERY_NO_CONFLICT = $.fn[name];
	          $.fn[name] = plugin.jQueryInterface;
	          $.fn[name].Constructor = plugin;

	          $.fn[name].noConflict = function () {
	            $.fn[name] = JQUERY_NO_CONFLICT;
	            return plugin.jQueryInterface;
	          };
	        }
	      });
	    };
	    /**
	     * --------------------------------------------------------------------------
	     * Bootstrap (v5.1.3): button.js
	     * Licensed under MIT (https://github.com/twbs/bootstrap/blob/main/LICENSE)
	     * --------------------------------------------------------------------------
	     */

	    /**
	     * ------------------------------------------------------------------------
	     * Constants
	     * ------------------------------------------------------------------------
	     */


	    var NAME = 'button';
	    var DATA_KEY = 'bs.button';
	    var EVENT_KEY = ".".concat(DATA_KEY);
	    var DATA_API_KEY = '.data-api';
	    var CLASS_NAME_ACTIVE = 'active';
	    var SELECTOR_DATA_TOGGLE = '[data-bs-toggle="button"]';
	    var EVENT_CLICK_DATA_API = "click".concat(EVENT_KEY).concat(DATA_API_KEY);
	    /**
	     * ------------------------------------------------------------------------
	     * Class Definition
	     * ------------------------------------------------------------------------
	     */

	    var Button = /*#__PURE__*/function (_BaseComponent__defau) {
	      _inherits(Button, _BaseComponent__defau);

	      var _super = _createSuper(Button);

	      function Button() {
	        _classCallCheck(this, Button);

	        return _super.apply(this, arguments);
	      }

	      _createClass(Button, [{
	        key: "toggle",
	        value: // Public
	        function toggle() {
	          // Toggle class and sync the `aria-pressed` attribute with the return value of the `.toggle()` method
	          this._element.setAttribute('aria-pressed', this._element.classList.toggle(CLASS_NAME_ACTIVE));
	        } // Static

	      }], [{
	        key: "NAME",
	        get: // Getters
	        function get() {
	          return NAME;
	        }
	      }, {
	        key: "jQueryInterface",
	        value: function jQueryInterface(config) {
	          return this.each(function () {
	            var data = Button.getOrCreateInstance(this);

	            if (config === 'toggle') {
	              data[config]();
	            }
	          });
	        }
	      }]);

	      return Button;
	    }(BaseComponent__default.default);
	    /**
	     * ------------------------------------------------------------------------
	     * Data Api implementation
	     * ------------------------------------------------------------------------
	     */


	    EventHandler__default.default.on(document, EVENT_CLICK_DATA_API, SELECTOR_DATA_TOGGLE, function (event) {
	      event.preventDefault();
	      var button = event.target.closest(SELECTOR_DATA_TOGGLE);
	      var data = Button.getOrCreateInstance(button);
	      data.toggle();
	    });
	    /**
	     * ------------------------------------------------------------------------
	     * jQuery
	     * ------------------------------------------------------------------------
	     * add .Button to jQuery only if jQuery is present
	     */

	    defineJQueryPlugin(Button);
	    return Button;
	  });
	})(button);

	var carousel = {exports: {}};

	var manipulator = {exports: {}};

	/*!
	  * Bootstrap manipulator.js v5.1.3 (https://getbootstrap.com/)
	  * Copyright 2011-2021 The Bootstrap Authors (https://github.com/twbs/bootstrap/graphs/contributors)
	  * Licensed under MIT (https://github.com/twbs/bootstrap/blob/main/LICENSE)
	  */

	(function (module, exports) {
	  (function (global, factory) {
	    module.exports = factory() ;
	  })(commonjsGlobal, function () {
	    /**
	     * --------------------------------------------------------------------------
	     * Bootstrap (v5.1.3): dom/manipulator.js
	     * Licensed under MIT (https://github.com/twbs/bootstrap/blob/main/LICENSE)
	     * --------------------------------------------------------------------------
	     */

	    function normalizeData(val) {
	      if (val === 'true') {
	        return true;
	      }

	      if (val === 'false') {
	        return false;
	      }

	      if (val === Number(val).toString()) {
	        return Number(val);
	      }

	      if (val === '' || val === 'null') {
	        return null;
	      }

	      return val;
	    }

	    function normalizeDataKey(key) {
	      return key.replace(/[A-Z]/g, function (chr) {
	        return "-".concat(chr.toLowerCase());
	      });
	    }

	    var Manipulator = {
	      setDataAttribute: function setDataAttribute(element, key, value) {
	        element.setAttribute("data-bs-".concat(normalizeDataKey(key)), value);
	      },
	      removeDataAttribute: function removeDataAttribute(element, key) {
	        element.removeAttribute("data-bs-".concat(normalizeDataKey(key)));
	      },
	      getDataAttributes: function getDataAttributes(element) {
	        if (!element) {
	          return {};
	        }

	        var attributes = {};
	        Object.keys(element.dataset).filter(function (key) {
	          return key.startsWith('bs');
	        }).forEach(function (key) {
	          var pureKey = key.replace(/^bs/, '');
	          pureKey = pureKey.charAt(0).toLowerCase() + pureKey.slice(1, pureKey.length);
	          attributes[pureKey] = normalizeData(element.dataset[key]);
	        });
	        return attributes;
	      },
	      getDataAttribute: function getDataAttribute(element, key) {
	        return normalizeData(element.getAttribute("data-bs-".concat(normalizeDataKey(key))));
	      },
	      offset: function offset(element) {
	        var rect = element.getBoundingClientRect();
	        return {
	          top: rect.top + window.pageYOffset,
	          left: rect.left + window.pageXOffset
	        };
	      },
	      position: function position(element) {
	        return {
	          top: element.offsetTop,
	          left: element.offsetLeft
	        };
	      }
	    };
	    return Manipulator;
	  });
	})(manipulator);

	var selectorEngine = {exports: {}};

	(function (module, exports) {
	  (function (global, factory) {
	    module.exports = factory() ;
	  })(commonjsGlobal, function () {
	    /**
	     * --------------------------------------------------------------------------
	     * Bootstrap (v5.1.3): util/index.js
	     * Licensed under MIT (https://github.com/twbs/bootstrap/blob/main/LICENSE)
	     * --------------------------------------------------------------------------
	     */

	    var isElement = function isElement(obj) {
	      if (!obj || _typeof(obj) !== 'object') {
	        return false;
	      }

	      if (typeof obj.jquery !== 'undefined') {
	        obj = obj[0];
	      }

	      return typeof obj.nodeType !== 'undefined';
	    };

	    var isVisible = function isVisible(element) {
	      if (!isElement(element) || element.getClientRects().length === 0) {
	        return false;
	      }

	      return getComputedStyle(element).getPropertyValue('visibility') === 'visible';
	    };

	    var isDisabled = function isDisabled(element) {
	      if (!element || element.nodeType !== Node.ELEMENT_NODE) {
	        return true;
	      }

	      if (element.classList.contains('disabled')) {
	        return true;
	      }

	      if (typeof element.disabled !== 'undefined') {
	        return element.disabled;
	      }

	      return element.hasAttribute('disabled') && element.getAttribute('disabled') !== 'false';
	    };
	    /**
	     * --------------------------------------------------------------------------
	     * Bootstrap (v5.1.3): dom/selector-engine.js
	     * Licensed under MIT (https://github.com/twbs/bootstrap/blob/main/LICENSE)
	     * --------------------------------------------------------------------------
	     */


	    var NODE_TEXT = 3;
	    var SelectorEngine = {
	      find: function find(selector) {
	        var _ref;

	        var element = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : document.documentElement;
	        return (_ref = []).concat.apply(_ref, _toConsumableArray(Element.prototype.querySelectorAll.call(element, selector)));
	      },
	      findOne: function findOne(selector) {
	        var element = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : document.documentElement;
	        return Element.prototype.querySelector.call(element, selector);
	      },
	      children: function children(element, selector) {
	        var _ref2;

	        return (_ref2 = []).concat.apply(_ref2, _toConsumableArray(element.children)).filter(function (child) {
	          return child.matches(selector);
	        });
	      },
	      parents: function parents(element, selector) {
	        var parents = [];
	        var ancestor = element.parentNode;

	        while (ancestor && ancestor.nodeType === Node.ELEMENT_NODE && ancestor.nodeType !== NODE_TEXT) {
	          if (ancestor.matches(selector)) {
	            parents.push(ancestor);
	          }

	          ancestor = ancestor.parentNode;
	        }

	        return parents;
	      },
	      prev: function prev(element, selector) {
	        var previous = element.previousElementSibling;

	        while (previous) {
	          if (previous.matches(selector)) {
	            return [previous];
	          }

	          previous = previous.previousElementSibling;
	        }

	        return [];
	      },
	      next: function next(element, selector) {
	        var next = element.nextElementSibling;

	        while (next) {
	          if (next.matches(selector)) {
	            return [next];
	          }

	          next = next.nextElementSibling;
	        }

	        return [];
	      },
	      focusableChildren: function focusableChildren(element) {
	        var focusables = ['a', 'button', 'input', 'textarea', 'select', 'details', '[tabindex]', '[contenteditable="true"]'].map(function (selector) {
	          return "".concat(selector, ":not([tabindex^=\"-\"])");
	        }).join(', ');
	        return this.find(focusables, element).filter(function (el) {
	          return !isDisabled(el) && isVisible(el);
	        });
	      }
	    };
	    return SelectorEngine;
	  });
	})(selectorEngine);

	(function (module, exports) {
	  (function (global, factory) {
	    module.exports = factory(eventHandler.exports, manipulator.exports, selectorEngine.exports, baseComponent.exports) ;
	  })(commonjsGlobal, function (EventHandler, Manipulator, SelectorEngine, BaseComponent) {

	    var _KEY_TO_DIRECTION;

	    var _interopDefaultLegacy = function _interopDefaultLegacy(e) {
	      return e && _typeof(e) === 'object' && 'default' in e ? e : {
	        default: e
	      };
	    };

	    var EventHandler__default = /*#__PURE__*/_interopDefaultLegacy(EventHandler);

	    var Manipulator__default = /*#__PURE__*/_interopDefaultLegacy(Manipulator);

	    var SelectorEngine__default = /*#__PURE__*/_interopDefaultLegacy(SelectorEngine);

	    var BaseComponent__default = /*#__PURE__*/_interopDefaultLegacy(BaseComponent);
	    /**
	     * --------------------------------------------------------------------------
	     * Bootstrap (v5.1.3): util/index.js
	     * Licensed under MIT (https://github.com/twbs/bootstrap/blob/main/LICENSE)
	     * --------------------------------------------------------------------------
	     */


	    var TRANSITION_END = 'transitionend'; // Shoutout AngusCroll (https://goo.gl/pxwQGp)

	    var toType = function toType(obj) {
	      if (obj === null || obj === undefined) {
	        return "".concat(obj);
	      }

	      return {}.toString.call(obj).match(/\s([a-z]+)/i)[1].toLowerCase();
	    };

	    var getSelector = function getSelector(element) {
	      var selector = element.getAttribute('data-bs-target');

	      if (!selector || selector === '#') {
	        var hrefAttr = element.getAttribute('href'); // The only valid content that could double as a selector are IDs or classes,
	        // so everything starting with `#` or `.`. If a "real" URL is used as the selector,
	        // `document.querySelector` will rightfully complain it is invalid.
	        // See https://github.com/twbs/bootstrap/issues/32273

	        if (!hrefAttr || !hrefAttr.includes('#') && !hrefAttr.startsWith('.')) {
	          return null;
	        } // Just in case some CMS puts out a full URL with the anchor appended


	        if (hrefAttr.includes('#') && !hrefAttr.startsWith('#')) {
	          hrefAttr = "#".concat(hrefAttr.split('#')[1]);
	        }

	        selector = hrefAttr && hrefAttr !== '#' ? hrefAttr.trim() : null;
	      }

	      return selector;
	    };

	    var getElementFromSelector = function getElementFromSelector(element) {
	      var selector = getSelector(element);
	      return selector ? document.querySelector(selector) : null;
	    };

	    var triggerTransitionEnd = function triggerTransitionEnd(element) {
	      element.dispatchEvent(new Event(TRANSITION_END));
	    };

	    var isElement = function isElement(obj) {
	      if (!obj || _typeof(obj) !== 'object') {
	        return false;
	      }

	      if (typeof obj.jquery !== 'undefined') {
	        obj = obj[0];
	      }

	      return typeof obj.nodeType !== 'undefined';
	    };

	    var typeCheckConfig = function typeCheckConfig(componentName, config, configTypes) {
	      Object.keys(configTypes).forEach(function (property) {
	        var expectedTypes = configTypes[property];
	        var value = config[property];
	        var valueType = value && isElement(value) ? 'element' : toType(value);

	        if (!new RegExp(expectedTypes).test(valueType)) {
	          throw new TypeError("".concat(componentName.toUpperCase(), ": Option \"").concat(property, "\" provided type \"").concat(valueType, "\" but expected type \"").concat(expectedTypes, "\"."));
	        }
	      });
	    };

	    var isVisible = function isVisible(element) {
	      if (!isElement(element) || element.getClientRects().length === 0) {
	        return false;
	      }

	      return getComputedStyle(element).getPropertyValue('visibility') === 'visible';
	    };
	    /**
	     * Trick to restart an element's animation
	     *
	     * @param {HTMLElement} element
	     * @return void
	     *
	     * @see https://www.charistheo.io/blog/2021/02/restart-a-css-animation-with-javascript/#restarting-a-css-animation
	     */


	    var reflow = function reflow(element) {
	      // eslint-disable-next-line no-unused-expressions
	      element.offsetHeight;
	    };

	    var getjQuery = function getjQuery() {
	      var _window = window,
	          jQuery = _window.jQuery;

	      if (jQuery && !document.body.hasAttribute('data-bs-no-jquery')) {
	        return jQuery;
	      }

	      return null;
	    };

	    var DOMContentLoadedCallbacks = [];

	    var onDOMContentLoaded = function onDOMContentLoaded(callback) {
	      if (document.readyState === 'loading') {
	        // add listener on the first call when the document is in loading state
	        if (!DOMContentLoadedCallbacks.length) {
	          document.addEventListener('DOMContentLoaded', function () {
	            DOMContentLoadedCallbacks.forEach(function (callback) {
	              return callback();
	            });
	          });
	        }

	        DOMContentLoadedCallbacks.push(callback);
	      } else {
	        callback();
	      }
	    };

	    var isRTL = function isRTL() {
	      return document.documentElement.dir === 'rtl';
	    };

	    var defineJQueryPlugin = function defineJQueryPlugin(plugin) {
	      onDOMContentLoaded(function () {
	        var $ = getjQuery();
	        /* istanbul ignore if */

	        if ($) {
	          var name = plugin.NAME;
	          var JQUERY_NO_CONFLICT = $.fn[name];
	          $.fn[name] = plugin.jQueryInterface;
	          $.fn[name].Constructor = plugin;

	          $.fn[name].noConflict = function () {
	            $.fn[name] = JQUERY_NO_CONFLICT;
	            return plugin.jQueryInterface;
	          };
	        }
	      });
	    };
	    /**
	     * Return the previous/next element of a list.
	     *
	     * @param {array} list    The list of elements
	     * @param activeElement   The active element
	     * @param shouldGetNext   Choose to get next or previous element
	     * @param isCycleAllowed
	     * @return {Element|elem} The proper element
	     */


	    var getNextActiveElement = function getNextActiveElement(list, activeElement, shouldGetNext, isCycleAllowed) {
	      var index = list.indexOf(activeElement); // if the element does not exist in the list return an element depending on the direction and if cycle is allowed

	      if (index === -1) {
	        return list[!shouldGetNext && isCycleAllowed ? list.length - 1 : 0];
	      }

	      var listLength = list.length;
	      index += shouldGetNext ? 1 : -1;

	      if (isCycleAllowed) {
	        index = (index + listLength) % listLength;
	      }

	      return list[Math.max(0, Math.min(index, listLength - 1))];
	    };
	    /**
	     * --------------------------------------------------------------------------
	     * Bootstrap (v5.1.3): carousel.js
	     * Licensed under MIT (https://github.com/twbs/bootstrap/blob/main/LICENSE)
	     * --------------------------------------------------------------------------
	     */

	    /**
	     * ------------------------------------------------------------------------
	     * Constants
	     * ------------------------------------------------------------------------
	     */


	    var NAME = 'carousel';
	    var DATA_KEY = 'bs.carousel';
	    var EVENT_KEY = ".".concat(DATA_KEY);
	    var DATA_API_KEY = '.data-api';
	    var ARROW_LEFT_KEY = 'ArrowLeft';
	    var ARROW_RIGHT_KEY = 'ArrowRight';
	    var TOUCHEVENT_COMPAT_WAIT = 500; // Time for mouse compat events to fire after touch

	    var SWIPE_THRESHOLD = 40;
	    var Default = {
	      interval: 5000,
	      keyboard: true,
	      slide: false,
	      pause: 'hover',
	      wrap: true,
	      touch: true
	    };
	    var DefaultType = {
	      interval: '(number|boolean)',
	      keyboard: 'boolean',
	      slide: '(boolean|string)',
	      pause: '(string|boolean)',
	      wrap: 'boolean',
	      touch: 'boolean'
	    };
	    var ORDER_NEXT = 'next';
	    var ORDER_PREV = 'prev';
	    var DIRECTION_LEFT = 'left';
	    var DIRECTION_RIGHT = 'right';
	    var KEY_TO_DIRECTION = (_KEY_TO_DIRECTION = {}, _defineProperty(_KEY_TO_DIRECTION, ARROW_LEFT_KEY, DIRECTION_RIGHT), _defineProperty(_KEY_TO_DIRECTION, ARROW_RIGHT_KEY, DIRECTION_LEFT), _KEY_TO_DIRECTION);
	    var EVENT_SLIDE = "slide".concat(EVENT_KEY);
	    var EVENT_SLID = "slid".concat(EVENT_KEY);
	    var EVENT_KEYDOWN = "keydown".concat(EVENT_KEY);
	    var EVENT_MOUSEENTER = "mouseenter".concat(EVENT_KEY);
	    var EVENT_MOUSELEAVE = "mouseleave".concat(EVENT_KEY);
	    var EVENT_TOUCHSTART = "touchstart".concat(EVENT_KEY);
	    var EVENT_TOUCHMOVE = "touchmove".concat(EVENT_KEY);
	    var EVENT_TOUCHEND = "touchend".concat(EVENT_KEY);
	    var EVENT_POINTERDOWN = "pointerdown".concat(EVENT_KEY);
	    var EVENT_POINTERUP = "pointerup".concat(EVENT_KEY);
	    var EVENT_DRAG_START = "dragstart".concat(EVENT_KEY);
	    var EVENT_LOAD_DATA_API = "load".concat(EVENT_KEY).concat(DATA_API_KEY);
	    var EVENT_CLICK_DATA_API = "click".concat(EVENT_KEY).concat(DATA_API_KEY);
	    var CLASS_NAME_CAROUSEL = 'carousel';
	    var CLASS_NAME_ACTIVE = 'active';
	    var CLASS_NAME_SLIDE = 'slide';
	    var CLASS_NAME_END = 'carousel-item-end';
	    var CLASS_NAME_START = 'carousel-item-start';
	    var CLASS_NAME_NEXT = 'carousel-item-next';
	    var CLASS_NAME_PREV = 'carousel-item-prev';
	    var CLASS_NAME_POINTER_EVENT = 'pointer-event';
	    var SELECTOR_ACTIVE = '.active';
	    var SELECTOR_ACTIVE_ITEM = '.active.carousel-item';
	    var SELECTOR_ITEM = '.carousel-item';
	    var SELECTOR_ITEM_IMG = '.carousel-item img';
	    var SELECTOR_NEXT_PREV = '.carousel-item-next, .carousel-item-prev';
	    var SELECTOR_INDICATORS = '.carousel-indicators';
	    var SELECTOR_INDICATOR = '[data-bs-target]';
	    var SELECTOR_DATA_SLIDE = '[data-bs-slide], [data-bs-slide-to]';
	    var SELECTOR_DATA_RIDE = '[data-bs-ride="carousel"]';
	    var POINTER_TYPE_TOUCH = 'touch';
	    var POINTER_TYPE_PEN = 'pen';
	    /**
	     * ------------------------------------------------------------------------
	     * Class Definition
	     * ------------------------------------------------------------------------
	     */

	    var Carousel = /*#__PURE__*/function (_BaseComponent__defau) {
	      _inherits(Carousel, _BaseComponent__defau);

	      var _super = _createSuper(Carousel);

	      function Carousel(element, config) {
	        var _this;

	        _classCallCheck(this, Carousel);

	        _this = _super.call(this, element);
	        _this._items = null;
	        _this._interval = null;
	        _this._activeElement = null;
	        _this._isPaused = false;
	        _this._isSliding = false;
	        _this.touchTimeout = null;
	        _this.touchStartX = 0;
	        _this.touchDeltaX = 0;
	        _this._config = _this._getConfig(config);
	        _this._indicatorsElement = SelectorEngine__default.default.findOne(SELECTOR_INDICATORS, _this._element);
	        _this._touchSupported = 'ontouchstart' in document.documentElement || navigator.maxTouchPoints > 0;
	        _this._pointerEvent = Boolean(window.PointerEvent);

	        _this._addEventListeners();

	        return _this;
	      } // Getters


	      _createClass(Carousel, [{
	        key: "next",
	        value: // Public
	        function next() {
	          this._slide(ORDER_NEXT);
	        }
	      }, {
	        key: "nextWhenVisible",
	        value: function nextWhenVisible() {
	          // Don't call next when the page isn't visible
	          // or the carousel or its parent isn't visible
	          if (!document.hidden && isVisible(this._element)) {
	            this.next();
	          }
	        }
	      }, {
	        key: "prev",
	        value: function prev() {
	          this._slide(ORDER_PREV);
	        }
	      }, {
	        key: "pause",
	        value: function pause(event) {
	          if (!event) {
	            this._isPaused = true;
	          }

	          if (SelectorEngine__default.default.findOne(SELECTOR_NEXT_PREV, this._element)) {
	            triggerTransitionEnd(this._element);
	            this.cycle(true);
	          }

	          clearInterval(this._interval);
	          this._interval = null;
	        }
	      }, {
	        key: "cycle",
	        value: function cycle(event) {
	          if (!event) {
	            this._isPaused = false;
	          }

	          if (this._interval) {
	            clearInterval(this._interval);
	            this._interval = null;
	          }

	          if (this._config && this._config.interval && !this._isPaused) {
	            this._updateInterval();

	            this._interval = setInterval((document.visibilityState ? this.nextWhenVisible : this.next).bind(this), this._config.interval);
	          }
	        }
	      }, {
	        key: "to",
	        value: function to(index) {
	          var _this2 = this;

	          this._activeElement = SelectorEngine__default.default.findOne(SELECTOR_ACTIVE_ITEM, this._element);

	          var activeIndex = this._getItemIndex(this._activeElement);

	          if (index > this._items.length - 1 || index < 0) {
	            return;
	          }

	          if (this._isSliding) {
	            EventHandler__default.default.one(this._element, EVENT_SLID, function () {
	              return _this2.to(index);
	            });
	            return;
	          }

	          if (activeIndex === index) {
	            this.pause();
	            this.cycle();
	            return;
	          }

	          var order = index > activeIndex ? ORDER_NEXT : ORDER_PREV;

	          this._slide(order, this._items[index]);
	        } // Private

	      }, {
	        key: "_getConfig",
	        value: function _getConfig(config) {
	          config = _objectSpread2(_objectSpread2(_objectSpread2({}, Default), Manipulator__default.default.getDataAttributes(this._element)), _typeof(config) === 'object' ? config : {});
	          typeCheckConfig(NAME, config, DefaultType);
	          return config;
	        }
	      }, {
	        key: "_handleSwipe",
	        value: function _handleSwipe() {
	          var absDeltax = Math.abs(this.touchDeltaX);

	          if (absDeltax <= SWIPE_THRESHOLD) {
	            return;
	          }

	          var direction = absDeltax / this.touchDeltaX;
	          this.touchDeltaX = 0;

	          if (!direction) {
	            return;
	          }

	          this._slide(direction > 0 ? DIRECTION_RIGHT : DIRECTION_LEFT);
	        }
	      }, {
	        key: "_addEventListeners",
	        value: function _addEventListeners() {
	          var _this3 = this;

	          if (this._config.keyboard) {
	            EventHandler__default.default.on(this._element, EVENT_KEYDOWN, function (event) {
	              return _this3._keydown(event);
	            });
	          }

	          if (this._config.pause === 'hover') {
	            EventHandler__default.default.on(this._element, EVENT_MOUSEENTER, function (event) {
	              return _this3.pause(event);
	            });
	            EventHandler__default.default.on(this._element, EVENT_MOUSELEAVE, function (event) {
	              return _this3.cycle(event);
	            });
	          }

	          if (this._config.touch && this._touchSupported) {
	            this._addTouchEventListeners();
	          }
	        }
	      }, {
	        key: "_addTouchEventListeners",
	        value: function _addTouchEventListeners() {
	          var _this4 = this;

	          var hasPointerPenTouch = function hasPointerPenTouch(event) {
	            return _this4._pointerEvent && (event.pointerType === POINTER_TYPE_PEN || event.pointerType === POINTER_TYPE_TOUCH);
	          };

	          var start = function start(event) {
	            if (hasPointerPenTouch(event)) {
	              _this4.touchStartX = event.clientX;
	            } else if (!_this4._pointerEvent) {
	              _this4.touchStartX = event.touches[0].clientX;
	            }
	          };

	          var move = function move(event) {
	            // ensure swiping with one touch and not pinching
	            _this4.touchDeltaX = event.touches && event.touches.length > 1 ? 0 : event.touches[0].clientX - _this4.touchStartX;
	          };

	          var end = function end(event) {
	            if (hasPointerPenTouch(event)) {
	              _this4.touchDeltaX = event.clientX - _this4.touchStartX;
	            }

	            _this4._handleSwipe();

	            if (_this4._config.pause === 'hover') {
	              // If it's a touch-enabled device, mouseenter/leave are fired as
	              // part of the mouse compatibility events on first tap - the carousel
	              // would stop cycling until user tapped out of it;
	              // here, we listen for touchend, explicitly pause the carousel
	              // (as if it's the second time we tap on it, mouseenter compat event
	              // is NOT fired) and after a timeout (to allow for mouse compatibility
	              // events to fire) we explicitly restart cycling
	              _this4.pause();

	              if (_this4.touchTimeout) {
	                clearTimeout(_this4.touchTimeout);
	              }

	              _this4.touchTimeout = setTimeout(function (event) {
	                return _this4.cycle(event);
	              }, TOUCHEVENT_COMPAT_WAIT + _this4._config.interval);
	            }
	          };

	          SelectorEngine__default.default.find(SELECTOR_ITEM_IMG, this._element).forEach(function (itemImg) {
	            EventHandler__default.default.on(itemImg, EVENT_DRAG_START, function (event) {
	              return event.preventDefault();
	            });
	          });

	          if (this._pointerEvent) {
	            EventHandler__default.default.on(this._element, EVENT_POINTERDOWN, function (event) {
	              return start(event);
	            });
	            EventHandler__default.default.on(this._element, EVENT_POINTERUP, function (event) {
	              return end(event);
	            });

	            this._element.classList.add(CLASS_NAME_POINTER_EVENT);
	          } else {
	            EventHandler__default.default.on(this._element, EVENT_TOUCHSTART, function (event) {
	              return start(event);
	            });
	            EventHandler__default.default.on(this._element, EVENT_TOUCHMOVE, function (event) {
	              return move(event);
	            });
	            EventHandler__default.default.on(this._element, EVENT_TOUCHEND, function (event) {
	              return end(event);
	            });
	          }
	        }
	      }, {
	        key: "_keydown",
	        value: function _keydown(event) {
	          if (/input|textarea/i.test(event.target.tagName)) {
	            return;
	          }

	          var direction = KEY_TO_DIRECTION[event.key];

	          if (direction) {
	            event.preventDefault();

	            this._slide(direction);
	          }
	        }
	      }, {
	        key: "_getItemIndex",
	        value: function _getItemIndex(element) {
	          this._items = element && element.parentNode ? SelectorEngine__default.default.find(SELECTOR_ITEM, element.parentNode) : [];
	          return this._items.indexOf(element);
	        }
	      }, {
	        key: "_getItemByOrder",
	        value: function _getItemByOrder(order, activeElement) {
	          var isNext = order === ORDER_NEXT;
	          return getNextActiveElement(this._items, activeElement, isNext, this._config.wrap);
	        }
	      }, {
	        key: "_triggerSlideEvent",
	        value: function _triggerSlideEvent(relatedTarget, eventDirectionName) {
	          var targetIndex = this._getItemIndex(relatedTarget);

	          var fromIndex = this._getItemIndex(SelectorEngine__default.default.findOne(SELECTOR_ACTIVE_ITEM, this._element));

	          return EventHandler__default.default.trigger(this._element, EVENT_SLIDE, {
	            relatedTarget: relatedTarget,
	            direction: eventDirectionName,
	            from: fromIndex,
	            to: targetIndex
	          });
	        }
	      }, {
	        key: "_setActiveIndicatorElement",
	        value: function _setActiveIndicatorElement(element) {
	          if (this._indicatorsElement) {
	            var activeIndicator = SelectorEngine__default.default.findOne(SELECTOR_ACTIVE, this._indicatorsElement);
	            activeIndicator.classList.remove(CLASS_NAME_ACTIVE);
	            activeIndicator.removeAttribute('aria-current');
	            var indicators = SelectorEngine__default.default.find(SELECTOR_INDICATOR, this._indicatorsElement);

	            for (var i = 0; i < indicators.length; i++) {
	              if (Number.parseInt(indicators[i].getAttribute('data-bs-slide-to'), 10) === this._getItemIndex(element)) {
	                indicators[i].classList.add(CLASS_NAME_ACTIVE);
	                indicators[i].setAttribute('aria-current', 'true');
	                break;
	              }
	            }
	          }
	        }
	      }, {
	        key: "_updateInterval",
	        value: function _updateInterval() {
	          var element = this._activeElement || SelectorEngine__default.default.findOne(SELECTOR_ACTIVE_ITEM, this._element);

	          if (!element) {
	            return;
	          }

	          var elementInterval = Number.parseInt(element.getAttribute('data-bs-interval'), 10);

	          if (elementInterval) {
	            this._config.defaultInterval = this._config.defaultInterval || this._config.interval;
	            this._config.interval = elementInterval;
	          } else {
	            this._config.interval = this._config.defaultInterval || this._config.interval;
	          }
	        }
	      }, {
	        key: "_slide",
	        value: function _slide(directionOrOrder, element) {
	          var _this5 = this;

	          var order = this._directionToOrder(directionOrOrder);

	          var activeElement = SelectorEngine__default.default.findOne(SELECTOR_ACTIVE_ITEM, this._element);

	          var activeElementIndex = this._getItemIndex(activeElement);

	          var nextElement = element || this._getItemByOrder(order, activeElement);

	          var nextElementIndex = this._getItemIndex(nextElement);

	          var isCycling = Boolean(this._interval);
	          var isNext = order === ORDER_NEXT;
	          var directionalClassName = isNext ? CLASS_NAME_START : CLASS_NAME_END;
	          var orderClassName = isNext ? CLASS_NAME_NEXT : CLASS_NAME_PREV;

	          var eventDirectionName = this._orderToDirection(order);

	          if (nextElement && nextElement.classList.contains(CLASS_NAME_ACTIVE)) {
	            this._isSliding = false;
	            return;
	          }

	          if (this._isSliding) {
	            return;
	          }

	          var slideEvent = this._triggerSlideEvent(nextElement, eventDirectionName);

	          if (slideEvent.defaultPrevented) {
	            return;
	          }

	          if (!activeElement || !nextElement) {
	            // Some weirdness is happening, so we bail
	            return;
	          }

	          this._isSliding = true;

	          if (isCycling) {
	            this.pause();
	          }

	          this._setActiveIndicatorElement(nextElement);

	          this._activeElement = nextElement;

	          var triggerSlidEvent = function triggerSlidEvent() {
	            EventHandler__default.default.trigger(_this5._element, EVENT_SLID, {
	              relatedTarget: nextElement,
	              direction: eventDirectionName,
	              from: activeElementIndex,
	              to: nextElementIndex
	            });
	          };

	          if (this._element.classList.contains(CLASS_NAME_SLIDE)) {
	            nextElement.classList.add(orderClassName);
	            reflow(nextElement);
	            activeElement.classList.add(directionalClassName);
	            nextElement.classList.add(directionalClassName);

	            var completeCallBack = function completeCallBack() {
	              nextElement.classList.remove(directionalClassName, orderClassName);
	              nextElement.classList.add(CLASS_NAME_ACTIVE);
	              activeElement.classList.remove(CLASS_NAME_ACTIVE, orderClassName, directionalClassName);
	              _this5._isSliding = false;
	              setTimeout(triggerSlidEvent, 0);
	            };

	            this._queueCallback(completeCallBack, activeElement, true);
	          } else {
	            activeElement.classList.remove(CLASS_NAME_ACTIVE);
	            nextElement.classList.add(CLASS_NAME_ACTIVE);
	            this._isSliding = false;
	            triggerSlidEvent();
	          }

	          if (isCycling) {
	            this.cycle();
	          }
	        }
	      }, {
	        key: "_directionToOrder",
	        value: function _directionToOrder(direction) {
	          if (![DIRECTION_RIGHT, DIRECTION_LEFT].includes(direction)) {
	            return direction;
	          }

	          if (isRTL()) {
	            return direction === DIRECTION_LEFT ? ORDER_PREV : ORDER_NEXT;
	          }

	          return direction === DIRECTION_LEFT ? ORDER_NEXT : ORDER_PREV;
	        }
	      }, {
	        key: "_orderToDirection",
	        value: function _orderToDirection(order) {
	          if (![ORDER_NEXT, ORDER_PREV].includes(order)) {
	            return order;
	          }

	          if (isRTL()) {
	            return order === ORDER_PREV ? DIRECTION_LEFT : DIRECTION_RIGHT;
	          }

	          return order === ORDER_PREV ? DIRECTION_RIGHT : DIRECTION_LEFT;
	        } // Static

	      }], [{
	        key: "Default",
	        get: function get() {
	          return Default;
	        }
	      }, {
	        key: "NAME",
	        get: function get() {
	          return NAME;
	        }
	      }, {
	        key: "carouselInterface",
	        value: function carouselInterface(element, config) {
	          var data = Carousel.getOrCreateInstance(element, config);
	          var _config = data._config;

	          if (_typeof(config) === 'object') {
	            _config = _objectSpread2(_objectSpread2({}, _config), config);
	          }

	          var action = typeof config === 'string' ? config : _config.slide;

	          if (typeof config === 'number') {
	            data.to(config);
	          } else if (typeof action === 'string') {
	            if (typeof data[action] === 'undefined') {
	              throw new TypeError("No method named \"".concat(action, "\""));
	            }

	            data[action]();
	          } else if (_config.interval && _config.ride) {
	            data.pause();
	            data.cycle();
	          }
	        }
	      }, {
	        key: "jQueryInterface",
	        value: function jQueryInterface(config) {
	          return this.each(function () {
	            Carousel.carouselInterface(this, config);
	          });
	        }
	      }, {
	        key: "dataApiClickHandler",
	        value: function dataApiClickHandler(event) {
	          var target = getElementFromSelector(this);

	          if (!target || !target.classList.contains(CLASS_NAME_CAROUSEL)) {
	            return;
	          }

	          var config = _objectSpread2(_objectSpread2({}, Manipulator__default.default.getDataAttributes(target)), Manipulator__default.default.getDataAttributes(this));

	          var slideIndex = this.getAttribute('data-bs-slide-to');

	          if (slideIndex) {
	            config.interval = false;
	          }

	          Carousel.carouselInterface(target, config);

	          if (slideIndex) {
	            Carousel.getInstance(target).to(slideIndex);
	          }

	          event.preventDefault();
	        }
	      }]);

	      return Carousel;
	    }(BaseComponent__default.default);
	    /**
	     * ------------------------------------------------------------------------
	     * Data Api implementation
	     * ------------------------------------------------------------------------
	     */


	    EventHandler__default.default.on(document, EVENT_CLICK_DATA_API, SELECTOR_DATA_SLIDE, Carousel.dataApiClickHandler);
	    EventHandler__default.default.on(window, EVENT_LOAD_DATA_API, function () {
	      var carousels = SelectorEngine__default.default.find(SELECTOR_DATA_RIDE);

	      for (var i = 0, len = carousels.length; i < len; i++) {
	        Carousel.carouselInterface(carousels[i], Carousel.getInstance(carousels[i]));
	      }
	    });
	    /**
	     * ------------------------------------------------------------------------
	     * jQuery
	     * ------------------------------------------------------------------------
	     * add .Carousel to jQuery only if jQuery is present
	     */

	    defineJQueryPlugin(Carousel);
	    return Carousel;
	  });
	})(carousel);

	var collapse = {exports: {}};

	(function (module, exports) {
	  (function (global, factory) {
	    module.exports = factory(data.exports, eventHandler.exports, manipulator.exports, selectorEngine.exports, baseComponent.exports) ;
	  })(commonjsGlobal, function (Data, EventHandler, Manipulator, SelectorEngine, BaseComponent) {

	    var _interopDefaultLegacy = function _interopDefaultLegacy(e) {
	      return e && _typeof(e) === 'object' && 'default' in e ? e : {
	        default: e
	      };
	    };

	    var Data__default = /*#__PURE__*/_interopDefaultLegacy(Data);

	    var EventHandler__default = /*#__PURE__*/_interopDefaultLegacy(EventHandler);

	    var Manipulator__default = /*#__PURE__*/_interopDefaultLegacy(Manipulator);

	    var SelectorEngine__default = /*#__PURE__*/_interopDefaultLegacy(SelectorEngine);

	    var BaseComponent__default = /*#__PURE__*/_interopDefaultLegacy(BaseComponent);
	    /**
	     * --------------------------------------------------------------------------
	     * Bootstrap (v5.1.3): util/index.js
	     * Licensed under MIT (https://github.com/twbs/bootstrap/blob/main/LICENSE)
	     * --------------------------------------------------------------------------
	     */


	    var toType = function toType(obj) {
	      if (obj === null || obj === undefined) {
	        return "".concat(obj);
	      }

	      return {}.toString.call(obj).match(/\s([a-z]+)/i)[1].toLowerCase();
	    };

	    var getSelector = function getSelector(element) {
	      var selector = element.getAttribute('data-bs-target');

	      if (!selector || selector === '#') {
	        var hrefAttr = element.getAttribute('href'); // The only valid content that could double as a selector are IDs or classes,
	        // so everything starting with `#` or `.`. If a "real" URL is used as the selector,
	        // `document.querySelector` will rightfully complain it is invalid.
	        // See https://github.com/twbs/bootstrap/issues/32273

	        if (!hrefAttr || !hrefAttr.includes('#') && !hrefAttr.startsWith('.')) {
	          return null;
	        } // Just in case some CMS puts out a full URL with the anchor appended


	        if (hrefAttr.includes('#') && !hrefAttr.startsWith('#')) {
	          hrefAttr = "#".concat(hrefAttr.split('#')[1]);
	        }

	        selector = hrefAttr && hrefAttr !== '#' ? hrefAttr.trim() : null;
	      }

	      return selector;
	    };

	    var getSelectorFromElement = function getSelectorFromElement(element) {
	      var selector = getSelector(element);

	      if (selector) {
	        return document.querySelector(selector) ? selector : null;
	      }

	      return null;
	    };

	    var getElementFromSelector = function getElementFromSelector(element) {
	      var selector = getSelector(element);
	      return selector ? document.querySelector(selector) : null;
	    };

	    var isElement = function isElement(obj) {
	      if (!obj || _typeof(obj) !== 'object') {
	        return false;
	      }

	      if (typeof obj.jquery !== 'undefined') {
	        obj = obj[0];
	      }

	      return typeof obj.nodeType !== 'undefined';
	    };

	    var getElement = function getElement(obj) {
	      if (isElement(obj)) {
	        // it's a jQuery object or a node element
	        return obj.jquery ? obj[0] : obj;
	      }

	      if (typeof obj === 'string' && obj.length > 0) {
	        return document.querySelector(obj);
	      }

	      return null;
	    };

	    var typeCheckConfig = function typeCheckConfig(componentName, config, configTypes) {
	      Object.keys(configTypes).forEach(function (property) {
	        var expectedTypes = configTypes[property];
	        var value = config[property];
	        var valueType = value && isElement(value) ? 'element' : toType(value);

	        if (!new RegExp(expectedTypes).test(valueType)) {
	          throw new TypeError("".concat(componentName.toUpperCase(), ": Option \"").concat(property, "\" provided type \"").concat(valueType, "\" but expected type \"").concat(expectedTypes, "\"."));
	        }
	      });
	    };
	    /**
	     * Trick to restart an element's animation
	     *
	     * @param {HTMLElement} element
	     * @return void
	     *
	     * @see https://www.charistheo.io/blog/2021/02/restart-a-css-animation-with-javascript/#restarting-a-css-animation
	     */


	    var reflow = function reflow(element) {
	      // eslint-disable-next-line no-unused-expressions
	      element.offsetHeight;
	    };

	    var getjQuery = function getjQuery() {
	      var _window = window,
	          jQuery = _window.jQuery;

	      if (jQuery && !document.body.hasAttribute('data-bs-no-jquery')) {
	        return jQuery;
	      }

	      return null;
	    };

	    var DOMContentLoadedCallbacks = [];

	    var onDOMContentLoaded = function onDOMContentLoaded(callback) {
	      if (document.readyState === 'loading') {
	        // add listener on the first call when the document is in loading state
	        if (!DOMContentLoadedCallbacks.length) {
	          document.addEventListener('DOMContentLoaded', function () {
	            DOMContentLoadedCallbacks.forEach(function (callback) {
	              return callback();
	            });
	          });
	        }

	        DOMContentLoadedCallbacks.push(callback);
	      } else {
	        callback();
	      }
	    };

	    var defineJQueryPlugin = function defineJQueryPlugin(plugin) {
	      onDOMContentLoaded(function () {
	        var $ = getjQuery();
	        /* istanbul ignore if */

	        if ($) {
	          var name = plugin.NAME;
	          var JQUERY_NO_CONFLICT = $.fn[name];
	          $.fn[name] = plugin.jQueryInterface;
	          $.fn[name].Constructor = plugin;

	          $.fn[name].noConflict = function () {
	            $.fn[name] = JQUERY_NO_CONFLICT;
	            return plugin.jQueryInterface;
	          };
	        }
	      });
	    };
	    /**
	     * --------------------------------------------------------------------------
	     * Bootstrap (v5.1.3): collapse.js
	     * Licensed under MIT (https://github.com/twbs/bootstrap/blob/main/LICENSE)
	     * --------------------------------------------------------------------------
	     */

	    /**
	     * ------------------------------------------------------------------------
	     * Constants
	     * ------------------------------------------------------------------------
	     */


	    var NAME = 'collapse';
	    var DATA_KEY = 'bs.collapse';
	    var EVENT_KEY = ".".concat(DATA_KEY);
	    var DATA_API_KEY = '.data-api';
	    var Default = {
	      toggle: true,
	      parent: null
	    };
	    var DefaultType = {
	      toggle: 'boolean',
	      parent: '(null|element)'
	    };
	    var EVENT_SHOW = "show".concat(EVENT_KEY);
	    var EVENT_SHOWN = "shown".concat(EVENT_KEY);
	    var EVENT_HIDE = "hide".concat(EVENT_KEY);
	    var EVENT_HIDDEN = "hidden".concat(EVENT_KEY);
	    var EVENT_CLICK_DATA_API = "click".concat(EVENT_KEY).concat(DATA_API_KEY);
	    var CLASS_NAME_SHOW = 'show';
	    var CLASS_NAME_COLLAPSE = 'collapse';
	    var CLASS_NAME_COLLAPSING = 'collapsing';
	    var CLASS_NAME_COLLAPSED = 'collapsed';
	    var CLASS_NAME_DEEPER_CHILDREN = ":scope .".concat(CLASS_NAME_COLLAPSE, " .").concat(CLASS_NAME_COLLAPSE);
	    var CLASS_NAME_HORIZONTAL = 'collapse-horizontal';
	    var WIDTH = 'width';
	    var HEIGHT = 'height';
	    var SELECTOR_ACTIVES = '.collapse.show, .collapse.collapsing';
	    var SELECTOR_DATA_TOGGLE = '[data-bs-toggle="collapse"]';
	    /**
	     * ------------------------------------------------------------------------
	     * Class Definition
	     * ------------------------------------------------------------------------
	     */

	    var Collapse = /*#__PURE__*/function (_BaseComponent__defau) {
	      _inherits(Collapse, _BaseComponent__defau);

	      var _super = _createSuper(Collapse);

	      function Collapse(element, config) {
	        var _this;

	        _classCallCheck(this, Collapse);

	        _this = _super.call(this, element);
	        _this._isTransitioning = false;
	        _this._config = _this._getConfig(config);
	        _this._triggerArray = [];
	        var toggleList = SelectorEngine__default.default.find(SELECTOR_DATA_TOGGLE);

	        for (var i = 0, len = toggleList.length; i < len; i++) {
	          var elem = toggleList[i];
	          var selector = getSelectorFromElement(elem);
	          var filterElement = SelectorEngine__default.default.find(selector).filter(function (foundElem) {
	            return foundElem === _this._element;
	          });

	          if (selector !== null && filterElement.length) {
	            _this._selector = selector;

	            _this._triggerArray.push(elem);
	          }
	        }

	        _this._initializeChildren();

	        if (!_this._config.parent) {
	          _this._addAriaAndCollapsedClass(_this._triggerArray, _this._isShown());
	        }

	        if (_this._config.toggle) {
	          _this.toggle();
	        }

	        return _this;
	      } // Getters


	      _createClass(Collapse, [{
	        key: "toggle",
	        value: // Public
	        function toggle() {
	          if (this._isShown()) {
	            this.hide();
	          } else {
	            this.show();
	          }
	        }
	      }, {
	        key: "show",
	        value: function show() {
	          var _this2 = this;

	          if (this._isTransitioning || this._isShown()) {
	            return;
	          }

	          var actives = [];
	          var activesData;

	          if (this._config.parent) {
	            var children = SelectorEngine__default.default.find(CLASS_NAME_DEEPER_CHILDREN, this._config.parent);
	            actives = SelectorEngine__default.default.find(SELECTOR_ACTIVES, this._config.parent).filter(function (elem) {
	              return !children.includes(elem);
	            }); // remove children if greater depth
	          }

	          var container = SelectorEngine__default.default.findOne(this._selector);

	          if (actives.length) {
	            var tempActiveData = actives.find(function (elem) {
	              return container !== elem;
	            });
	            activesData = tempActiveData ? Collapse.getInstance(tempActiveData) : null;

	            if (activesData && activesData._isTransitioning) {
	              return;
	            }
	          }

	          var startEvent = EventHandler__default.default.trigger(this._element, EVENT_SHOW);

	          if (startEvent.defaultPrevented) {
	            return;
	          }

	          actives.forEach(function (elemActive) {
	            if (container !== elemActive) {
	              Collapse.getOrCreateInstance(elemActive, {
	                toggle: false
	              }).hide();
	            }

	            if (!activesData) {
	              Data__default.default.set(elemActive, DATA_KEY, null);
	            }
	          });

	          var dimension = this._getDimension();

	          this._element.classList.remove(CLASS_NAME_COLLAPSE);

	          this._element.classList.add(CLASS_NAME_COLLAPSING);

	          this._element.style[dimension] = 0;

	          this._addAriaAndCollapsedClass(this._triggerArray, true);

	          this._isTransitioning = true;

	          var complete = function complete() {
	            _this2._isTransitioning = false;

	            _this2._element.classList.remove(CLASS_NAME_COLLAPSING);

	            _this2._element.classList.add(CLASS_NAME_COLLAPSE, CLASS_NAME_SHOW);

	            _this2._element.style[dimension] = '';
	            EventHandler__default.default.trigger(_this2._element, EVENT_SHOWN);
	          };

	          var capitalizedDimension = dimension[0].toUpperCase() + dimension.slice(1);
	          var scrollSize = "scroll".concat(capitalizedDimension);

	          this._queueCallback(complete, this._element, true);

	          this._element.style[dimension] = "".concat(this._element[scrollSize], "px");
	        }
	      }, {
	        key: "hide",
	        value: function hide() {
	          var _this3 = this;

	          if (this._isTransitioning || !this._isShown()) {
	            return;
	          }

	          var startEvent = EventHandler__default.default.trigger(this._element, EVENT_HIDE);

	          if (startEvent.defaultPrevented) {
	            return;
	          }

	          var dimension = this._getDimension();

	          this._element.style[dimension] = "".concat(this._element.getBoundingClientRect()[dimension], "px");
	          reflow(this._element);

	          this._element.classList.add(CLASS_NAME_COLLAPSING);

	          this._element.classList.remove(CLASS_NAME_COLLAPSE, CLASS_NAME_SHOW);

	          var triggerArrayLength = this._triggerArray.length;

	          for (var i = 0; i < triggerArrayLength; i++) {
	            var trigger = this._triggerArray[i];
	            var elem = getElementFromSelector(trigger);

	            if (elem && !this._isShown(elem)) {
	              this._addAriaAndCollapsedClass([trigger], false);
	            }
	          }

	          this._isTransitioning = true;

	          var complete = function complete() {
	            _this3._isTransitioning = false;

	            _this3._element.classList.remove(CLASS_NAME_COLLAPSING);

	            _this3._element.classList.add(CLASS_NAME_COLLAPSE);

	            EventHandler__default.default.trigger(_this3._element, EVENT_HIDDEN);
	          };

	          this._element.style[dimension] = '';

	          this._queueCallback(complete, this._element, true);
	        }
	      }, {
	        key: "_isShown",
	        value: function _isShown() {
	          var element = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this._element;
	          return element.classList.contains(CLASS_NAME_SHOW);
	        } // Private

	      }, {
	        key: "_getConfig",
	        value: function _getConfig(config) {
	          config = _objectSpread2(_objectSpread2(_objectSpread2({}, Default), Manipulator__default.default.getDataAttributes(this._element)), config);
	          config.toggle = Boolean(config.toggle); // Coerce string values

	          config.parent = getElement(config.parent);
	          typeCheckConfig(NAME, config, DefaultType);
	          return config;
	        }
	      }, {
	        key: "_getDimension",
	        value: function _getDimension() {
	          return this._element.classList.contains(CLASS_NAME_HORIZONTAL) ? WIDTH : HEIGHT;
	        }
	      }, {
	        key: "_initializeChildren",
	        value: function _initializeChildren() {
	          var _this4 = this;

	          if (!this._config.parent) {
	            return;
	          }

	          var children = SelectorEngine__default.default.find(CLASS_NAME_DEEPER_CHILDREN, this._config.parent);
	          SelectorEngine__default.default.find(SELECTOR_DATA_TOGGLE, this._config.parent).filter(function (elem) {
	            return !children.includes(elem);
	          }).forEach(function (element) {
	            var selected = getElementFromSelector(element);

	            if (selected) {
	              _this4._addAriaAndCollapsedClass([element], _this4._isShown(selected));
	            }
	          });
	        }
	      }, {
	        key: "_addAriaAndCollapsedClass",
	        value: function _addAriaAndCollapsedClass(triggerArray, isOpen) {
	          if (!triggerArray.length) {
	            return;
	          }

	          triggerArray.forEach(function (elem) {
	            if (isOpen) {
	              elem.classList.remove(CLASS_NAME_COLLAPSED);
	            } else {
	              elem.classList.add(CLASS_NAME_COLLAPSED);
	            }

	            elem.setAttribute('aria-expanded', isOpen);
	          });
	        } // Static

	      }], [{
	        key: "Default",
	        get: function get() {
	          return Default;
	        }
	      }, {
	        key: "NAME",
	        get: function get() {
	          return NAME;
	        }
	      }, {
	        key: "jQueryInterface",
	        value: function jQueryInterface(config) {
	          return this.each(function () {
	            var _config = {};

	            if (typeof config === 'string' && /show|hide/.test(config)) {
	              _config.toggle = false;
	            }

	            var data = Collapse.getOrCreateInstance(this, _config);

	            if (typeof config === 'string') {
	              if (typeof data[config] === 'undefined') {
	                throw new TypeError("No method named \"".concat(config, "\""));
	              }

	              data[config]();
	            }
	          });
	        }
	      }]);

	      return Collapse;
	    }(BaseComponent__default.default);
	    /**
	     * ------------------------------------------------------------------------
	     * Data Api implementation
	     * ------------------------------------------------------------------------
	     */


	    EventHandler__default.default.on(document, EVENT_CLICK_DATA_API, SELECTOR_DATA_TOGGLE, function (event) {
	      // preventDefault only for <a> elements (which change the URL) not inside the collapsible element
	      if (event.target.tagName === 'A' || event.delegateTarget && event.delegateTarget.tagName === 'A') {
	        event.preventDefault();
	      }

	      var selector = getSelectorFromElement(this);
	      var selectorElements = SelectorEngine__default.default.find(selector);
	      selectorElements.forEach(function (element) {
	        Collapse.getOrCreateInstance(element, {
	          toggle: false
	        }).toggle();
	      });
	    });
	    /**
	     * ------------------------------------------------------------------------
	     * jQuery
	     * ------------------------------------------------------------------------
	     * add .Collapse to jQuery only if jQuery is present
	     */

	    defineJQueryPlugin(Collapse);
	    return Collapse;
	  });
	})(collapse);

	/**
	 * @license
	 * Copyright 2019 Google LLC
	 * SPDX-License-Identifier: BSD-3-Clause
	 */
	var t$1 = window.ShadowRoot && (void 0 === window.ShadyCSS || window.ShadyCSS.nativeShadow) && "adoptedStyleSheets" in Document.prototype && "replace" in CSSStyleSheet.prototype,
	    e$2 = Symbol(),
	    n$3 = new Map();

	var s$3 = /*#__PURE__*/function () {
	  function s(t, n) {
	    _classCallCheck(this, s);

	    if (this._$cssResult$ = !0, n !== e$2) throw Error("CSSResult is not constructable. Use `unsafeCSS` or `css` instead.");
	    this.cssText = t;
	  }

	  _createClass(s, [{
	    key: "styleSheet",
	    get: function get() {
	      var e = n$3.get(this.cssText);
	      return t$1 && void 0 === e && (n$3.set(this.cssText, e = new CSSStyleSheet()), e.replaceSync(this.cssText)), e;
	    }
	  }, {
	    key: "toString",
	    value: function toString() {
	      return this.cssText;
	    }
	  }]);

	  return s;
	}();

	var o$3 = function o(t) {
	  return new s$3("string" == typeof t ? t : t + "", e$2);
	},
	    r$2 = function r(t) {
	  for (var _len = arguments.length, n = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
	    n[_key - 1] = arguments[_key];
	  }

	  var o = 1 === t.length ? t[0] : n.reduce(function (e, n, s) {
	    return e + function (t) {
	      if (!0 === t._$cssResult$) return t.cssText;
	      if ("number" == typeof t) return t;
	      throw Error("Value passed to 'css' function must be a 'css' function result: " + t + ". Use 'unsafeCSS' to pass non-literal values, but take care to ensure page security.");
	    }(n) + t[s + 1];
	  }, t[0]);
	  return new s$3(o, e$2);
	},
	    i$1 = function i(e, n) {
	  t$1 ? e.adoptedStyleSheets = n.map(function (t) {
	    return t instanceof CSSStyleSheet ? t : t.styleSheet;
	  }) : n.forEach(function (t) {
	    var n = document.createElement("style"),
	        s = window.litNonce;
	    void 0 !== s && n.setAttribute("nonce", s), n.textContent = t.cssText, e.appendChild(n);
	  });
	},
	    S$1 = t$1 ? function (t) {
	  return t;
	} : function (t) {
	  return t instanceof CSSStyleSheet ? function (t) {
	    var e = "";

	    var _iterator = _createForOfIteratorHelper(t.cssRules),
	        _step;

	    try {
	      for (_iterator.s(); !(_step = _iterator.n()).done;) {
	        var _n = _step.value;
	        e += _n.cssText;
	      }
	    } catch (err) {
	      _iterator.e(err);
	    } finally {
	      _iterator.f();
	    }

	    return o$3(e);
	  }(t) : t;
	};

	/**
	 * @license
	 * Copyright 2017 Google LLC
	 * SPDX-License-Identifier: BSD-3-Clause
	 */

	var s$2;

	var e$1 = window.trustedTypes,
	    r$1 = e$1 ? e$1.emptyScript : "",
	    h$1 = window.reactiveElementPolyfillSupport,
	    o$2 = {
	  toAttribute: function toAttribute(t, i) {
	    switch (i) {
	      case Boolean:
	        t = t ? r$1 : null;
	        break;

	      case Object:
	      case Array:
	        t = null == t ? t : JSON.stringify(t);
	    }

	    return t;
	  },
	  fromAttribute: function fromAttribute(t, i) {
	    var s = t;

	    switch (i) {
	      case Boolean:
	        s = null !== t;
	        break;

	      case Number:
	        s = null === t ? null : Number(t);
	        break;

	      case Object:
	      case Array:
	        try {
	          s = JSON.parse(t);
	        } catch (t) {
	          s = null;
	        }

	    }

	    return s;
	  }
	},
	    n$2 = function n(t, i) {
	  return i !== t && (i == i || t == t);
	},
	    l$3 = {
	  attribute: !0,
	  type: String,
	  converter: o$2,
	  reflect: !1,
	  hasChanged: n$2
	};

	var a$1 = /*#__PURE__*/function (_HTMLElement) {
	  _inherits(a, _HTMLElement);

	  var _super = _createSuper(a);

	  function a() {
	    var _this;

	    _classCallCheck(this, a);

	    _this = _super.call(this), _this._$Et = new Map(), _this.isUpdatePending = !1, _this.hasUpdated = !1, _this._$Ei = null, _this.o();
	    return _this;
	  }

	  _createClass(a, [{
	    key: "o",
	    value: function o() {
	      var _this2 = this;

	      var t;
	      this._$Ep = new Promise(function (t) {
	        return _this2.enableUpdating = t;
	      }), this._$AL = new Map(), this._$Em(), this.requestUpdate(), null === (t = this.constructor.l) || void 0 === t || t.forEach(function (t) {
	        return t(_this2);
	      });
	    }
	  }, {
	    key: "addController",
	    value: function addController(t) {
	      var i, s;
	      (null !== (i = this._$Eg) && void 0 !== i ? i : this._$Eg = []).push(t), void 0 !== this.renderRoot && this.isConnected && (null === (s = t.hostConnected) || void 0 === s || s.call(t));
	    }
	  }, {
	    key: "removeController",
	    value: function removeController(t) {
	      var i;
	      null === (i = this._$Eg) || void 0 === i || i.splice(this._$Eg.indexOf(t) >>> 0, 1);
	    }
	  }, {
	    key: "_$Em",
	    value: function _$Em() {
	      var _this3 = this;

	      this.constructor.elementProperties.forEach(function (t, i) {
	        _this3.hasOwnProperty(i) && (_this3._$Et.set(i, _this3[i]), delete _this3[i]);
	      });
	    }
	  }, {
	    key: "createRenderRoot",
	    value: function createRenderRoot() {
	      var t;
	      var s = null !== (t = this.shadowRoot) && void 0 !== t ? t : this.attachShadow(this.constructor.shadowRootOptions);
	      return i$1(s, this.constructor.elementStyles), s;
	    }
	  }, {
	    key: "connectedCallback",
	    value: function connectedCallback() {
	      var t;
	      void 0 === this.renderRoot && (this.renderRoot = this.createRenderRoot()), this.enableUpdating(!0), null === (t = this._$Eg) || void 0 === t || t.forEach(function (t) {
	        var i;
	        return null === (i = t.hostConnected) || void 0 === i ? void 0 : i.call(t);
	      });
	    }
	  }, {
	    key: "enableUpdating",
	    value: function enableUpdating(t) {}
	  }, {
	    key: "disconnectedCallback",
	    value: function disconnectedCallback() {
	      var t;
	      null === (t = this._$Eg) || void 0 === t || t.forEach(function (t) {
	        var i;
	        return null === (i = t.hostDisconnected) || void 0 === i ? void 0 : i.call(t);
	      });
	    }
	  }, {
	    key: "attributeChangedCallback",
	    value: function attributeChangedCallback(t, i, s) {
	      this._$AK(t, s);
	    }
	  }, {
	    key: "_$ES",
	    value: function _$ES(t, i) {
	      var s = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : l$3;
	      var e, r;

	      var h = this.constructor._$Eh(t, s);

	      if (void 0 !== h && !0 === s.reflect) {
	        var _n = (null !== (r = null === (e = s.converter) || void 0 === e ? void 0 : e.toAttribute) && void 0 !== r ? r : o$2.toAttribute)(i, s.type);

	        this._$Ei = t, null == _n ? this.removeAttribute(h) : this.setAttribute(h, _n), this._$Ei = null;
	      }
	    }
	  }, {
	    key: "_$AK",
	    value: function _$AK(t, i) {
	      var s, e, r;

	      var h = this.constructor,
	          n = h._$Eu.get(t);

	      if (void 0 !== n && this._$Ei !== n) {
	        var _t = h.getPropertyOptions(n),
	            _l = _t.converter,
	            _a2 = null !== (r = null !== (e = null === (s = _l) || void 0 === s ? void 0 : s.fromAttribute) && void 0 !== e ? e : "function" == typeof _l ? _l : null) && void 0 !== r ? r : o$2.fromAttribute;

	        this._$Ei = n, this[n] = _a2(i, _t.type), this._$Ei = null;
	      }
	    }
	  }, {
	    key: "requestUpdate",
	    value: function requestUpdate(t, i, s) {
	      var e = !0;
	      void 0 !== t && (((s = s || this.constructor.getPropertyOptions(t)).hasChanged || n$2)(this[t], i) ? (this._$AL.has(t) || this._$AL.set(t, i), !0 === s.reflect && this._$Ei !== t && (void 0 === this._$E_ && (this._$E_ = new Map()), this._$E_.set(t, s))) : e = !1), !this.isUpdatePending && e && (this._$Ep = this._$EC());
	    }
	  }, {
	    key: "_$EC",
	    value: function () {
	      var _$EC2 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee() {
	        var t;
	        return regeneratorRuntime.wrap(function _callee$(_context) {
	          while (1) {
	            switch (_context.prev = _context.next) {
	              case 0:
	                this.isUpdatePending = !0;
	                _context.prev = 1;
	                _context.next = 4;
	                return this._$Ep;

	              case 4:
	                _context.next = 9;
	                break;

	              case 6:
	                _context.prev = 6;
	                _context.t0 = _context["catch"](1);
	                Promise.reject(_context.t0);

	              case 9:
	                t = this.scheduleUpdate();
	                _context.t1 = null != t;

	                if (!_context.t1) {
	                  _context.next = 14;
	                  break;
	                }

	                _context.next = 14;
	                return t;

	              case 14:
	                return _context.abrupt("return", !this.isUpdatePending);

	              case 15:
	              case "end":
	                return _context.stop();
	            }
	          }
	        }, _callee, this, [[1, 6]]);
	      }));

	      function _$EC() {
	        return _$EC2.apply(this, arguments);
	      }

	      return _$EC;
	    }()
	  }, {
	    key: "scheduleUpdate",
	    value: function scheduleUpdate() {
	      return this.performUpdate();
	    }
	  }, {
	    key: "performUpdate",
	    value: function performUpdate() {
	      var _this4 = this;

	      var t;
	      if (!this.isUpdatePending) return;
	      this.hasUpdated, this._$Et && (this._$Et.forEach(function (t, i) {
	        return _this4[i] = t;
	      }), this._$Et = void 0);
	      var i = !1;
	      var s = this._$AL;

	      try {
	        i = this.shouldUpdate(s), i ? (this.willUpdate(s), null === (t = this._$Eg) || void 0 === t || t.forEach(function (t) {
	          var i;
	          return null === (i = t.hostUpdate) || void 0 === i ? void 0 : i.call(t);
	        }), this.update(s)) : this._$EU();
	      } catch (t) {
	        throw i = !1, this._$EU(), t;
	      }

	      i && this._$AE(s);
	    }
	  }, {
	    key: "willUpdate",
	    value: function willUpdate(t) {}
	  }, {
	    key: "_$AE",
	    value: function _$AE(t) {
	      var i;
	      null === (i = this._$Eg) || void 0 === i || i.forEach(function (t) {
	        var i;
	        return null === (i = t.hostUpdated) || void 0 === i ? void 0 : i.call(t);
	      }), this.hasUpdated || (this.hasUpdated = !0, this.firstUpdated(t)), this.updated(t);
	    }
	  }, {
	    key: "_$EU",
	    value: function _$EU() {
	      this._$AL = new Map(), this.isUpdatePending = !1;
	    }
	  }, {
	    key: "updateComplete",
	    get: function get() {
	      return this.getUpdateComplete();
	    }
	  }, {
	    key: "getUpdateComplete",
	    value: function getUpdateComplete() {
	      return this._$Ep;
	    }
	  }, {
	    key: "shouldUpdate",
	    value: function shouldUpdate(t) {
	      return !0;
	    }
	  }, {
	    key: "update",
	    value: function update(t) {
	      var _this5 = this;

	      void 0 !== this._$E_ && (this._$E_.forEach(function (t, i) {
	        return _this5._$ES(i, _this5[i], t);
	      }), this._$E_ = void 0), this._$EU();
	    }
	  }, {
	    key: "updated",
	    value: function updated(t) {}
	  }, {
	    key: "firstUpdated",
	    value: function firstUpdated(t) {}
	  }], [{
	    key: "addInitializer",
	    value: function addInitializer(t) {
	      var i;
	      null !== (i = this.l) && void 0 !== i || (this.l = []), this.l.push(t);
	    }
	  }, {
	    key: "observedAttributes",
	    get: function get() {
	      var _this6 = this;

	      this.finalize();
	      var t = [];
	      return this.elementProperties.forEach(function (i, s) {
	        var e = _this6._$Eh(s, i);

	        void 0 !== e && (_this6._$Eu.set(e, s), t.push(e));
	      }), t;
	    }
	  }, {
	    key: "createProperty",
	    value: function createProperty(t) {
	      var i = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : l$3;

	      if (i.state && (i.attribute = !1), this.finalize(), this.elementProperties.set(t, i), !i.noAccessor && !this.prototype.hasOwnProperty(t)) {
	        var _s = "symbol" == _typeof(t) ? Symbol() : "__" + t,
	            _e = this.getPropertyDescriptor(t, _s, i);

	        void 0 !== _e && Object.defineProperty(this.prototype, t, _e);
	      }
	    }
	  }, {
	    key: "getPropertyDescriptor",
	    value: function getPropertyDescriptor(t, i, s) {
	      return {
	        get: function get() {
	          return this[i];
	        },
	        set: function set(e) {
	          var r = this[t];
	          this[i] = e, this.requestUpdate(t, r, s);
	        },
	        configurable: !0,
	        enumerable: !0
	      };
	    }
	  }, {
	    key: "getPropertyOptions",
	    value: function getPropertyOptions(t) {
	      return this.elementProperties.get(t) || l$3;
	    }
	  }, {
	    key: "finalize",
	    value: function finalize() {
	      if (this.hasOwnProperty("finalized")) return !1;
	      this.finalized = !0;
	      var t = Object.getPrototypeOf(this);

	      if (t.finalize(), this.elementProperties = new Map(t.elementProperties), this._$Eu = new Map(), this.hasOwnProperty("properties")) {
	        var _t2 = this.properties,
	            _i = [].concat(_toConsumableArray(Object.getOwnPropertyNames(_t2)), _toConsumableArray(Object.getOwnPropertySymbols(_t2)));

	        var _iterator = _createForOfIteratorHelper(_i),
	            _step;

	        try {
	          for (_iterator.s(); !(_step = _iterator.n()).done;) {
	            var _s2 = _step.value;
	            this.createProperty(_s2, _t2[_s2]);
	          }
	        } catch (err) {
	          _iterator.e(err);
	        } finally {
	          _iterator.f();
	        }
	      }

	      return this.elementStyles = this.finalizeStyles(this.styles), !0;
	    }
	  }, {
	    key: "finalizeStyles",
	    value: function finalizeStyles(i) {
	      var s = [];

	      if (Array.isArray(i)) {
	        var _e2 = new Set(i.flat(1 / 0).reverse());

	        var _iterator2 = _createForOfIteratorHelper(_e2),
	            _step2;

	        try {
	          for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {
	            var _i2 = _step2.value;
	            s.unshift(S$1(_i2));
	          }
	        } catch (err) {
	          _iterator2.e(err);
	        } finally {
	          _iterator2.f();
	        }
	      } else void 0 !== i && s.push(S$1(i));

	      return s;
	    }
	  }, {
	    key: "_$Eh",
	    value: function _$Eh(t, i) {
	      var s = i.attribute;
	      return !1 === s ? void 0 : "string" == typeof s ? s : "string" == typeof t ? t.toLowerCase() : void 0;
	    }
	  }]);

	  return a;
	}( /*#__PURE__*/_wrapNativeSuper(HTMLElement));

	a$1.finalized = !0, a$1.elementProperties = new Map(), a$1.elementStyles = [], a$1.shadowRootOptions = {
	  mode: "open"
	}, null == h$1 || h$1({
	  ReactiveElement: a$1
	}), (null !== (s$2 = globalThis.reactiveElementVersions) && void 0 !== s$2 ? s$2 : globalThis.reactiveElementVersions = []).push("1.1.2");

	/**
	 * @license
	 * Copyright 2017 Google LLC
	 * SPDX-License-Identifier: BSD-3-Clause
	 */
	var t;

	var i = globalThis.trustedTypes,
	    s$1 = i ? i.createPolicy("lit-html", {
	  createHTML: function createHTML(t) {
	    return t;
	  }
	}) : void 0,
	    e = "lit$".concat((Math.random() + "").slice(9), "$"),
	    o$1 = "?" + e,
	    n$1 = "<".concat(o$1, ">"),
	    l$2 = document,
	    h = function h() {
	  var t = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : "";
	  return l$2.createComment(t);
	},
	    r = function r(t) {
	  return null === t || "object" != _typeof(t) && "function" != typeof t;
	},
	    d = Array.isArray,
	    u = function u(t) {
	  var i;
	  return d(t) || "function" == typeof (null === (i = t) || void 0 === i ? void 0 : i[Symbol.iterator]);
	},
	    c = /<(?:(!--|\/[^a-zA-Z])|(\/?[a-zA-Z][^>\s]*)|(\/?$))/g,
	    v = /-->/g,
	    a = />/g,
	    f = />|[ 	\n\r](?:([^\s"'>=/]+)([ 	\n\r]*=[ 	\n\r]*(?:[^ 	\n\r"'`<>=]|("|')|))|$)/g,
	    _ = /'/g,
	    m = /"/g,
	    g = /^(?:script|style|textarea)$/i,
	    p = function p(t) {
	  return function (i) {
	    for (var _len = arguments.length, s = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
	      s[_key - 1] = arguments[_key];
	    }

	    return {
	      _$litType$: t,
	      strings: i,
	      values: s
	    };
	  };
	},
	    $ = p(1),
	    y$1 = p(2),
	    b = Symbol.for("lit-noChange"),
	    w = Symbol.for("lit-nothing"),
	    T = new WeakMap(),
	    x$1 = function x(t, i, s) {
	  var e, o;
	  var n = null !== (e = null == s ? void 0 : s.renderBefore) && void 0 !== e ? e : i;
	  var l = n._$litPart$;

	  if (void 0 === l) {
	    var _t = null !== (o = null == s ? void 0 : s.renderBefore) && void 0 !== o ? o : null;

	    n._$litPart$ = l = new N(i.insertBefore(h(), _t), _t, void 0, null != s ? s : {});
	  }

	  return l._$AI(t), l;
	},
	    A = l$2.createTreeWalker(l$2, 129, null, !1),
	    C = function C(t, i) {
	  var o = t.length - 1,
	      l = [];
	  var h,
	      r = 2 === i ? "<svg>" : "",
	      d = c;

	  for (var _i = 0; _i < o; _i++) {
	    var _s = t[_i];

	    var _o = void 0,
	        _u = void 0,
	        _p = -1,
	        _$ = 0;

	    for (; _$ < _s.length && (d.lastIndex = _$, _u = d.exec(_s), null !== _u);) {
	      _$ = d.lastIndex, d === c ? "!--" === _u[1] ? d = v : void 0 !== _u[1] ? d = a : void 0 !== _u[2] ? (g.test(_u[2]) && (h = RegExp("</" + _u[2], "g")), d = f) : void 0 !== _u[3] && (d = f) : d === f ? ">" === _u[0] ? (d = null != h ? h : c, _p = -1) : void 0 === _u[1] ? _p = -2 : (_p = d.lastIndex - _u[2].length, _o = _u[1], d = void 0 === _u[3] ? f : '"' === _u[3] ? m : _) : d === m || d === _ ? d = f : d === v || d === a ? d = c : (d = f, h = void 0);
	    }

	    var _y = d === f && t[_i + 1].startsWith("/>") ? " " : "";

	    r += d === c ? _s + n$1 : _p >= 0 ? (l.push(_o), _s.slice(0, _p) + "$lit$" + _s.slice(_p) + e + _y) : _s + e + (-2 === _p ? (l.push(void 0), _i) : _y);
	  }

	  var u = r + (t[o] || "<?>") + (2 === i ? "</svg>" : "");
	  if (!Array.isArray(t) || !t.hasOwnProperty("raw")) throw Error("invalid template strings array");
	  return [void 0 !== s$1 ? s$1.createHTML(u) : u, l];
	};

	var E = /*#__PURE__*/function () {
	  function E(_ref, n) {
	    var t = _ref.strings,
	        s = _ref._$litType$;

	    _classCallCheck(this, E);

	    var l;
	    this.parts = [];
	    var r = 0,
	        d = 0;

	    var u = t.length - 1,
	        c = this.parts,
	        _C = C(t, s),
	        _C2 = _slicedToArray(_C, 2),
	        v = _C2[0],
	        a = _C2[1];

	    if (this.el = E.createElement(v, n), A.currentNode = this.el.content, 2 === s) {
	      var _t2 = this.el.content,
	          _i2 = _t2.firstChild;
	      _i2.remove(), _t2.append.apply(_t2, _toConsumableArray(_i2.childNodes));
	    }

	    for (; null !== (l = A.nextNode()) && c.length < u;) {
	      if (1 === l.nodeType) {
	        if (l.hasAttributes()) {
	          var _t3 = [];

	          var _iterator = _createForOfIteratorHelper(l.getAttributeNames()),
	              _step;

	          try {
	            for (_iterator.s(); !(_step = _iterator.n()).done;) {
	              var _i5 = _step.value;

	              if (_i5.endsWith("$lit$") || _i5.startsWith(e)) {
	                var _s2 = a[d++];

	                if (_t3.push(_i5), void 0 !== _s2) {
	                  var _t5 = l.getAttribute(_s2.toLowerCase() + "$lit$").split(e),
	                      _i6 = /([.?@])?(.*)/.exec(_s2);

	                  c.push({
	                    type: 1,
	                    index: r,
	                    name: _i6[2],
	                    strings: _t5,
	                    ctor: "." === _i6[1] ? M : "?" === _i6[1] ? H : "@" === _i6[1] ? I : S
	                  });
	                } else c.push({
	                  type: 6,
	                  index: r
	                });
	              }
	            }
	          } catch (err) {
	            _iterator.e(err);
	          } finally {
	            _iterator.f();
	          }

	          for (var _i3 = 0, _t4 = _t3; _i3 < _t4.length; _i3++) {
	            var _i4 = _t4[_i3];
	            l.removeAttribute(_i4);
	          }
	        }

	        if (g.test(l.tagName)) {
	          var _t6 = l.textContent.split(e),
	              _s3 = _t6.length - 1;

	          if (_s3 > 0) {
	            l.textContent = i ? i.emptyScript : "";

	            for (var _i7 = 0; _i7 < _s3; _i7++) {
	              l.append(_t6[_i7], h()), A.nextNode(), c.push({
	                type: 2,
	                index: ++r
	              });
	            }

	            l.append(_t6[_s3], h());
	          }
	        }
	      } else if (8 === l.nodeType) if (l.data === o$1) c.push({
	        type: 2,
	        index: r
	      });else {
	        var _t7 = -1;

	        for (; -1 !== (_t7 = l.data.indexOf(e, _t7 + 1));) {
	          c.push({
	            type: 7,
	            index: r
	          }), _t7 += e.length - 1;
	        }
	      }

	      r++;
	    }
	  }

	  _createClass(E, null, [{
	    key: "createElement",
	    value: function createElement(t, i) {
	      var s = l$2.createElement("template");
	      return s.innerHTML = t, s;
	    }
	  }]);

	  return E;
	}();

	function P(t, i) {
	  var s = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : t;
	  var e = arguments.length > 3 ? arguments[3] : undefined;
	  var o, n, l, h;
	  if (i === b) return i;
	  var d = void 0 !== e ? null === (o = s._$Cl) || void 0 === o ? void 0 : o[e] : s._$Cu;
	  var u = r(i) ? void 0 : i._$litDirective$;
	  return (null == d ? void 0 : d.constructor) !== u && (null === (n = null == d ? void 0 : d._$AO) || void 0 === n || n.call(d, !1), void 0 === u ? d = void 0 : (d = new u(t), d._$AT(t, s, e)), void 0 !== e ? (null !== (l = (h = s)._$Cl) && void 0 !== l ? l : h._$Cl = [])[e] = d : s._$Cu = d), void 0 !== d && (i = P(t, d._$AS(t, i.values), d, e)), i;
	}

	var V = /*#__PURE__*/function () {
	  function V(t, i) {
	    _classCallCheck(this, V);

	    this.v = [], this._$AN = void 0, this._$AD = t, this._$AM = i;
	  }

	  _createClass(V, [{
	    key: "parentNode",
	    get: function get() {
	      return this._$AM.parentNode;
	    }
	  }, {
	    key: "_$AU",
	    get: function get() {
	      return this._$AM._$AU;
	    }
	  }, {
	    key: "p",
	    value: function p(t) {
	      var i;
	      var _this$_$AD = this._$AD,
	          s = _this$_$AD.el.content,
	          e = _this$_$AD.parts,
	          o = (null !== (i = null == t ? void 0 : t.creationScope) && void 0 !== i ? i : l$2).importNode(s, !0);
	      A.currentNode = o;
	      var n = A.nextNode(),
	          h = 0,
	          r = 0,
	          d = e[0];

	      for (; void 0 !== d;) {
	        if (h === d.index) {
	          var _i8 = void 0;

	          2 === d.type ? _i8 = new N(n, n.nextSibling, this, t) : 1 === d.type ? _i8 = new d.ctor(n, d.name, d.strings, this, t) : 6 === d.type && (_i8 = new L(n, this, t)), this.v.push(_i8), d = e[++r];
	        }

	        h !== (null == d ? void 0 : d.index) && (n = A.nextNode(), h++);
	      }

	      return o;
	    }
	  }, {
	    key: "m",
	    value: function m(t) {
	      var i = 0;

	      var _iterator2 = _createForOfIteratorHelper(this.v),
	          _step2;

	      try {
	        for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {
	          var _s4 = _step2.value;
	          void 0 !== _s4 && (void 0 !== _s4.strings ? (_s4._$AI(t, _s4, i), i += _s4.strings.length - 2) : _s4._$AI(t[i])), i++;
	        }
	      } catch (err) {
	        _iterator2.e(err);
	      } finally {
	        _iterator2.f();
	      }
	    }
	  }]);

	  return V;
	}();

	var N = /*#__PURE__*/function () {
	  function N(t, i, s, e) {
	    _classCallCheck(this, N);

	    var o;
	    this.type = 2, this._$AH = w, this._$AN = void 0, this._$AA = t, this._$AB = i, this._$AM = s, this.options = e, this._$Cg = null === (o = null == e ? void 0 : e.isConnected) || void 0 === o || o;
	  }

	  _createClass(N, [{
	    key: "_$AU",
	    get: function get() {
	      var t, i;
	      return null !== (i = null === (t = this._$AM) || void 0 === t ? void 0 : t._$AU) && void 0 !== i ? i : this._$Cg;
	    }
	  }, {
	    key: "parentNode",
	    get: function get() {
	      var t = this._$AA.parentNode;
	      var i = this._$AM;
	      return void 0 !== i && 11 === t.nodeType && (t = i.parentNode), t;
	    }
	  }, {
	    key: "startNode",
	    get: function get() {
	      return this._$AA;
	    }
	  }, {
	    key: "endNode",
	    get: function get() {
	      return this._$AB;
	    }
	  }, {
	    key: "_$AI",
	    value: function _$AI(t) {
	      var i = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this;
	      t = P(this, t, i), r(t) ? t === w || null == t || "" === t ? (this._$AH !== w && this._$AR(), this._$AH = w) : t !== this._$AH && t !== b && this.$(t) : void 0 !== t._$litType$ ? this.T(t) : void 0 !== t.nodeType ? this.S(t) : u(t) ? this.A(t) : this.$(t);
	    }
	  }, {
	    key: "M",
	    value: function M(t) {
	      var i = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this._$AB;
	      return this._$AA.parentNode.insertBefore(t, i);
	    }
	  }, {
	    key: "S",
	    value: function S(t) {
	      this._$AH !== t && (this._$AR(), this._$AH = this.M(t));
	    }
	  }, {
	    key: "$",
	    value: function $(t) {
	      this._$AH !== w && r(this._$AH) ? this._$AA.nextSibling.data = t : this.S(l$2.createTextNode(t)), this._$AH = t;
	    }
	  }, {
	    key: "T",
	    value: function T(t) {
	      var i;
	      var s = t.values,
	          e = t._$litType$,
	          o = "number" == typeof e ? this._$AC(t) : (void 0 === e.el && (e.el = E.createElement(e.h, this.options)), e);
	      if ((null === (i = this._$AH) || void 0 === i ? void 0 : i._$AD) === o) this._$AH.m(s);else {
	        var _t8 = new V(o, this),
	            _i9 = _t8.p(this.options);

	        _t8.m(s), this.S(_i9), this._$AH = _t8;
	      }
	    }
	  }, {
	    key: "_$AC",
	    value: function _$AC(t) {
	      var i = T.get(t.strings);
	      return void 0 === i && T.set(t.strings, i = new E(t)), i;
	    }
	  }, {
	    key: "A",
	    value: function A(t) {
	      d(this._$AH) || (this._$AH = [], this._$AR());
	      var i = this._$AH;
	      var s,
	          e = 0;

	      var _iterator3 = _createForOfIteratorHelper(t),
	          _step3;

	      try {
	        for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {
	          var _o2 = _step3.value;
	          e === i.length ? i.push(s = new N(this.M(h()), this.M(h()), this, this.options)) : s = i[e], s._$AI(_o2), e++;
	        }
	      } catch (err) {
	        _iterator3.e(err);
	      } finally {
	        _iterator3.f();
	      }

	      e < i.length && (this._$AR(s && s._$AB.nextSibling, e), i.length = e);
	    }
	  }, {
	    key: "_$AR",
	    value: function _$AR() {
	      var t = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this._$AA.nextSibling;
	      var i = arguments.length > 1 ? arguments[1] : undefined;
	      var s;

	      for (null === (s = this._$AP) || void 0 === s || s.call(this, !1, !0, i); t && t !== this._$AB;) {
	        var _i10 = t.nextSibling;
	        t.remove(), t = _i10;
	      }
	    }
	  }, {
	    key: "setConnected",
	    value: function setConnected(t) {
	      var i;
	      void 0 === this._$AM && (this._$Cg = t, null === (i = this._$AP) || void 0 === i || i.call(this, t));
	    }
	  }]);

	  return N;
	}();

	var S = /*#__PURE__*/function () {
	  function S(t, i, s, e, o) {
	    _classCallCheck(this, S);

	    this.type = 1, this._$AH = w, this._$AN = void 0, this.element = t, this.name = i, this._$AM = e, this.options = o, s.length > 2 || "" !== s[0] || "" !== s[1] ? (this._$AH = Array(s.length - 1).fill(new String()), this.strings = s) : this._$AH = w;
	  }

	  _createClass(S, [{
	    key: "tagName",
	    get: function get() {
	      return this.element.tagName;
	    }
	  }, {
	    key: "_$AU",
	    get: function get() {
	      return this._$AM._$AU;
	    }
	  }, {
	    key: "_$AI",
	    value: function _$AI(t) {
	      var i = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this;
	      var s = arguments.length > 2 ? arguments[2] : undefined;
	      var e = arguments.length > 3 ? arguments[3] : undefined;
	      var o = this.strings;
	      var n = !1;
	      if (void 0 === o) t = P(this, t, i, 0), n = !r(t) || t !== this._$AH && t !== b, n && (this._$AH = t);else {
	        var _e = t;

	        var _l, _h;

	        for (t = o[0], _l = 0; _l < o.length - 1; _l++) {
	          _h = P(this, _e[s + _l], i, _l), _h === b && (_h = this._$AH[_l]), n || (n = !r(_h) || _h !== this._$AH[_l]), _h === w ? t = w : t !== w && (t += (null != _h ? _h : "") + o[_l + 1]), this._$AH[_l] = _h;
	        }
	      }
	      n && !e && this.k(t);
	    }
	  }, {
	    key: "k",
	    value: function k(t) {
	      t === w ? this.element.removeAttribute(this.name) : this.element.setAttribute(this.name, null != t ? t : "");
	    }
	  }]);

	  return S;
	}();

	var M = /*#__PURE__*/function (_S) {
	  _inherits(M, _S);

	  var _super = _createSuper(M);

	  function M() {
	    var _this;

	    _classCallCheck(this, M);

	    _this = _super.apply(this, arguments), _this.type = 3;
	    return _this;
	  }

	  _createClass(M, [{
	    key: "k",
	    value: function k(t) {
	      this.element[this.name] = t === w ? void 0 : t;
	    }
	  }]);

	  return M;
	}(S);

	var _k = i ? i.emptyScript : "";

	var H = /*#__PURE__*/function (_S2) {
	  _inherits(H, _S2);

	  var _super2 = _createSuper(H);

	  function H() {
	    var _this2;

	    _classCallCheck(this, H);

	    _this2 = _super2.apply(this, arguments), _this2.type = 4;
	    return _this2;
	  }

	  _createClass(H, [{
	    key: "k",
	    value: function k(t) {
	      t && t !== w ? this.element.setAttribute(this.name, _k) : this.element.removeAttribute(this.name);
	    }
	  }]);

	  return H;
	}(S);

	var I = /*#__PURE__*/function (_S3) {
	  _inherits(I, _S3);

	  var _super3 = _createSuper(I);

	  function I(t, i, s, e, o) {
	    var _this3;

	    _classCallCheck(this, I);

	    _this3 = _super3.call(this, t, i, s, e, o), _this3.type = 5;
	    return _this3;
	  }

	  _createClass(I, [{
	    key: "_$AI",
	    value: function _$AI(t) {
	      var i = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this;
	      var s;
	      if ((t = null !== (s = P(this, t, i, 0)) && void 0 !== s ? s : w) === b) return;
	      var e = this._$AH,
	          o = t === w && e !== w || t.capture !== e.capture || t.once !== e.once || t.passive !== e.passive,
	          n = t !== w && (e === w || o);
	      o && this.element.removeEventListener(this.name, this, e), n && this.element.addEventListener(this.name, this, t), this._$AH = t;
	    }
	  }, {
	    key: "handleEvent",
	    value: function handleEvent(t) {
	      var i, s;
	      "function" == typeof this._$AH ? this._$AH.call(null !== (s = null === (i = this.options) || void 0 === i ? void 0 : i.host) && void 0 !== s ? s : this.element, t) : this._$AH.handleEvent(t);
	    }
	  }]);

	  return I;
	}(S);

	var L = /*#__PURE__*/function () {
	  function L(t, i, s) {
	    _classCallCheck(this, L);

	    this.element = t, this.type = 6, this._$AN = void 0, this._$AM = i, this.options = s;
	  }

	  _createClass(L, [{
	    key: "_$AU",
	    get: function get() {
	      return this._$AM._$AU;
	    }
	  }, {
	    key: "_$AI",
	    value: function _$AI(t) {
	      P(this, t);
	    }
	  }]);

	  return L;
	}();

	var z = window.litHtmlPolyfillSupport;
	null == z || z(E, N), (null !== (t = globalThis.litHtmlVersions) && void 0 !== t ? t : globalThis.litHtmlVersions = []).push("2.1.1");

	/**
	 * @license
	 * Copyright 2017 Google LLC
	 * SPDX-License-Identifier: BSD-3-Clause
	 */

	var l$1, o;

	var s = /*#__PURE__*/function (_t) {
	  _inherits(s, _t);

	  var _super = _createSuper(s);

	  function s() {
	    var _this;

	    _classCallCheck(this, s);

	    _this = _super.apply(this, arguments), _this.renderOptions = {
	      host: _assertThisInitialized(_this)
	    }, _this._$Dt = void 0;
	    return _this;
	  }

	  _createClass(s, [{
	    key: "createRenderRoot",
	    value: function createRenderRoot() {
	      var t, e;

	      var i = _get(_getPrototypeOf(s.prototype), "createRenderRoot", this).call(this);

	      return null !== (t = (e = this.renderOptions).renderBefore) && void 0 !== t || (e.renderBefore = i.firstChild), i;
	    }
	  }, {
	    key: "update",
	    value: function update(t) {
	      var i = this.render();
	      this.hasUpdated || (this.renderOptions.isConnected = this.isConnected), _get(_getPrototypeOf(s.prototype), "update", this).call(this, t), this._$Dt = x$1(i, this.renderRoot, this.renderOptions);
	    }
	  }, {
	    key: "connectedCallback",
	    value: function connectedCallback() {
	      var t;
	      _get(_getPrototypeOf(s.prototype), "connectedCallback", this).call(this), null === (t = this._$Dt) || void 0 === t || t.setConnected(!0);
	    }
	  }, {
	    key: "disconnectedCallback",
	    value: function disconnectedCallback() {
	      var t;
	      _get(_getPrototypeOf(s.prototype), "disconnectedCallback", this).call(this), null === (t = this._$Dt) || void 0 === t || t.setConnected(!1);
	    }
	  }, {
	    key: "render",
	    value: function render() {
	      return b;
	    }
	  }]);

	  return s;
	}(a$1);

	s.finalized = !0, s._$litElement$ = !0, null === (l$1 = globalThis.litElementHydrateSupport) || void 0 === l$1 || l$1.call(globalThis, {
	  LitElement: s
	});
	var n = globalThis.litElementPolyfillSupport;
	null == n || n({
	  LitElement: s
	});
	(null !== (o = globalThis.litElementVersions) && void 0 !== o ? o : globalThis.litElementVersions = []).push("3.1.1");

	function ascending$2(a, b) {
	  return a == null || b == null ? NaN : a < b ? -1 : a > b ? 1 : a >= b ? 0 : NaN;
	}

	function bisector(f) {
	  var delta = f;
	  var compare1 = f;
	  var compare2 = f;

	  if (f.length !== 2) {
	    delta = function delta(d, x) {
	      return f(d) - x;
	    };

	    compare1 = ascending$2;

	    compare2 = function compare2(d, x) {
	      return ascending$2(f(d), x);
	    };
	  }

	  function left(a, x) {
	    var lo = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;
	    var hi = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : a.length;

	    if (lo < hi) {
	      if (compare1(x, x) !== 0) return hi;

	      do {
	        var mid = lo + hi >>> 1;
	        if (compare2(a[mid], x) < 0) lo = mid + 1;else hi = mid;
	      } while (lo < hi);
	    }

	    return lo;
	  }

	  function right(a, x) {
	    var lo = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;
	    var hi = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : a.length;

	    if (lo < hi) {
	      if (compare1(x, x) !== 0) return hi;

	      do {
	        var mid = lo + hi >>> 1;
	        if (compare2(a[mid], x) <= 0) lo = mid + 1;else hi = mid;
	      } while (lo < hi);
	    }

	    return lo;
	  }

	  function center(a, x) {
	    var lo = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;
	    var hi = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : a.length;
	    var i = left(a, x, lo, hi - 1);
	    return i > lo && delta(a[i - 1], x) > -delta(a[i], x) ? i - 1 : i;
	  }

	  return {
	    left: left,
	    center: center,
	    right: right
	  };
	}

	function number$2(x) {
	  return x === null ? NaN : +x;
	}

	var ascendingBisect = bisector(ascending$2);
	var bisectRight = ascendingBisect.right;
	bisector(number$2).center;
	var bisect = bisectRight;

	function count(values, valueof) {
	  var count = 0;

	  if (valueof === undefined) {
	    var _iterator = _createForOfIteratorHelper(values),
	        _step;

	    try {
	      for (_iterator.s(); !(_step = _iterator.n()).done;) {
	        var value = _step.value;

	        if (value != null && (value = +value) >= value) {
	          ++count;
	        }
	      }
	    } catch (err) {
	      _iterator.e(err);
	    } finally {
	      _iterator.f();
	    }
	  } else {
	    var index = -1;

	    var _iterator2 = _createForOfIteratorHelper(values),
	        _step2;

	    try {
	      for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {
	        var _value = _step2.value;

	        if ((_value = valueof(_value, ++index, values)) != null && (_value = +_value) >= _value) {
	          ++count;
	        }
	      }
	    } catch (err) {
	      _iterator2.e(err);
	    } finally {
	      _iterator2.f();
	    }
	  }

	  return count;
	}

	function extent(values, valueof) {
	  var min;
	  var max;

	  if (valueof === undefined) {
	    var _iterator = _createForOfIteratorHelper(values),
	        _step;

	    try {
	      for (_iterator.s(); !(_step = _iterator.n()).done;) {
	        var value = _step.value;

	        if (value != null) {
	          if (min === undefined) {
	            if (value >= value) min = max = value;
	          } else {
	            if (min > value) min = value;
	            if (max < value) max = value;
	          }
	        }
	      }
	    } catch (err) {
	      _iterator.e(err);
	    } finally {
	      _iterator.f();
	    }
	  } else {
	    var index = -1;

	    var _iterator2 = _createForOfIteratorHelper(values),
	        _step2;

	    try {
	      for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {
	        var _value = _step2.value;

	        if ((_value = valueof(_value, ++index, values)) != null) {
	          if (min === undefined) {
	            if (_value >= _value) min = max = _value;
	          } else {
	            if (min > _value) min = _value;
	            if (max < _value) max = _value;
	          }
	        }
	      }
	    } catch (err) {
	      _iterator2.e(err);
	    } finally {
	      _iterator2.f();
	    }
	  }

	  return [min, max];
	}

	// https://github.com/python/cpython/blob/a74eea238f5baba15797e2e8b570d153bc8690a7/Modules/mathmodule.c#L1423
	var Adder = /*#__PURE__*/function () {
	  function Adder() {
	    _classCallCheck(this, Adder);

	    this._partials = new Float64Array(32);
	    this._n = 0;
	  }

	  _createClass(Adder, [{
	    key: "add",
	    value: function add(x) {
	      var p = this._partials;
	      var i = 0;

	      for (var j = 0; j < this._n && j < 32; j++) {
	        var y = p[j],
	            hi = x + y,
	            lo = Math.abs(x) < Math.abs(y) ? x - (hi - y) : y - (hi - x);
	        if (lo) p[i++] = lo;
	        x = hi;
	      }

	      p[i] = x;
	      this._n = i + 1;
	      return this;
	    }
	  }, {
	    key: "valueOf",
	    value: function valueOf() {
	      var p = this._partials;
	      var n = this._n,
	          x,
	          y,
	          lo,
	          hi = 0;

	      if (n > 0) {
	        hi = p[--n];

	        while (n > 0) {
	          x = hi;
	          y = p[--n];
	          hi = x + y;
	          lo = y - (hi - x);
	          if (lo) break;
	        }

	        if (n > 0 && (lo < 0 && p[n - 1] < 0 || lo > 0 && p[n - 1] > 0)) {
	          y = lo * 2;
	          x = hi + y;
	          if (y == x - hi) hi = x;
	        }
	      }

	      return hi;
	    }
	  }]);

	  return Adder;
	}();

	function identity$7(x) {
	  return x;
	}

	var array$3 = Array.prototype;
	var slice$1 = array$3.slice;

	function constant$5(x) {
	  return function () {
	    return x;
	  };
	}

	var e10 = Math.sqrt(50),
	    e5 = Math.sqrt(10),
	    e2 = Math.sqrt(2);
	function ticks(start, stop, count) {
	  var reverse,
	      i = -1,
	      n,
	      ticks,
	      step;
	  stop = +stop, start = +start, count = +count;
	  if (start === stop && count > 0) return [start];
	  if (reverse = stop < start) n = start, start = stop, stop = n;
	  if ((step = tickIncrement(start, stop, count)) === 0 || !isFinite(step)) return [];

	  if (step > 0) {
	    var r0 = Math.round(start / step),
	        r1 = Math.round(stop / step);
	    if (r0 * step < start) ++r0;
	    if (r1 * step > stop) --r1;
	    ticks = new Array(n = r1 - r0 + 1);

	    while (++i < n) {
	      ticks[i] = (r0 + i) * step;
	    }
	  } else {
	    step = -step;

	    var _r = Math.round(start * step),
	        _r2 = Math.round(stop * step);

	    if (_r / step < start) ++_r;
	    if (_r2 / step > stop) --_r2;
	    ticks = new Array(n = _r2 - _r + 1);

	    while (++i < n) {
	      ticks[i] = (_r + i) / step;
	    }
	  }

	  if (reverse) ticks.reverse();
	  return ticks;
	}
	function tickIncrement(start, stop, count) {
	  var step = (stop - start) / Math.max(0, count),
	      power = Math.floor(Math.log(step) / Math.LN10),
	      error = step / Math.pow(10, power);
	  return power >= 0 ? (error >= e10 ? 10 : error >= e5 ? 5 : error >= e2 ? 2 : 1) * Math.pow(10, power) : -Math.pow(10, -power) / (error >= e10 ? 10 : error >= e5 ? 5 : error >= e2 ? 2 : 1);
	}
	function tickStep(start, stop, count) {
	  var step0 = Math.abs(stop - start) / Math.max(0, count),
	      step1 = Math.pow(10, Math.floor(Math.log(step0) / Math.LN10)),
	      error = step0 / step1;
	  if (error >= e10) step1 *= 10;else if (error >= e5) step1 *= 5;else if (error >= e2) step1 *= 2;
	  return stop < start ? -step1 : step1;
	}

	function nice(start, stop, count) {
	  var prestep;

	  while (true) {
	    var step = tickIncrement(start, stop, count);

	    if (step === prestep || step === 0 || !isFinite(step)) {
	      return [start, stop];
	    } else if (step > 0) {
	      start = Math.floor(start / step) * step;
	      stop = Math.ceil(stop / step) * step;
	    } else if (step < 0) {
	      start = Math.ceil(start * step) / step;
	      stop = Math.floor(stop * step) / step;
	    }

	    prestep = step;
	  }
	}

	function thresholdSturges(values) {
	  return Math.ceil(Math.log(count(values)) / Math.LN2) + 1;
	}

	function bin() {
	  var value = identity$7,
	      domain = extent,
	      threshold = thresholdSturges;

	  function histogram(data) {
	    if (!Array.isArray(data)) data = Array.from(data);
	    var i,
	        n = data.length,
	        x,
	        values = new Array(n);

	    for (i = 0; i < n; ++i) {
	      values[i] = value(data[i], i, data);
	    }

	    var xz = domain(values),
	        x0 = xz[0],
	        x1 = xz[1],
	        tz = threshold(values, x0, x1); // Convert number of thresholds into uniform thresholds, and nice the
	    // default domain accordingly.

	    if (!Array.isArray(tz)) {
	      var max = x1,
	          tn = +tz;

	      if (domain === extent) {
	        var _nice = nice(x0, x1, tn);

	        var _nice2 = _slicedToArray(_nice, 2);

	        x0 = _nice2[0];
	        x1 = _nice2[1];
	      }

	      tz = ticks(x0, x1, tn); // If the last threshold is coincident with the domain’s upper bound, the
	      // last bin will be zero-width. If the default domain is used, and this
	      // last threshold is coincident with the maximum input value, we can
	      // extend the niced upper bound by one tick to ensure uniform bin widths;
	      // otherwise, we simply remove the last threshold. Note that we don’t
	      // coerce values or the domain to numbers, and thus must be careful to
	      // compare order (>=) rather than strict equality (===)!

	      if (tz[tz.length - 1] >= x1) {
	        if (max >= x1 && domain === extent) {
	          var step = tickIncrement(x0, x1, tn);

	          if (isFinite(step)) {
	            if (step > 0) {
	              x1 = (Math.floor(x1 / step) + 1) * step;
	            } else if (step < 0) {
	              x1 = (Math.ceil(x1 * -step) + 1) / -step;
	            }
	          }
	        } else {
	          tz.pop();
	        }
	      }
	    } // Remove any thresholds outside the domain.


	    var m = tz.length;

	    while (tz[0] <= x0) {
	      tz.shift(), --m;
	    }

	    while (tz[m - 1] > x1) {
	      tz.pop(), --m;
	    }

	    var bins = new Array(m + 1),
	        bin; // Initialize bins.

	    for (i = 0; i <= m; ++i) {
	      bin = bins[i] = [];
	      bin.x0 = i > 0 ? tz[i - 1] : x0;
	      bin.x1 = i < m ? tz[i] : x1;
	    } // Assign data to bins by value, ignoring any outside the domain.


	    for (i = 0; i < n; ++i) {
	      x = values[i];

	      if (x != null && x0 <= x && x <= x1) {
	        bins[bisect(tz, x, 0, m)].push(data[i]);
	      }
	    }

	    return bins;
	  }

	  histogram.value = function (_) {
	    return arguments.length ? (value = typeof _ === "function" ? _ : constant$5(_), histogram) : value;
	  };

	  histogram.domain = function (_) {
	    return arguments.length ? (domain = typeof _ === "function" ? _ : constant$5([_[0], _[1]]), histogram) : domain;
	  };

	  histogram.thresholds = function (_) {
	    return arguments.length ? (threshold = typeof _ === "function" ? _ : Array.isArray(_) ? constant$5(slice$1.call(_)) : constant$5(_), histogram) : threshold;
	  };

	  return histogram;
	}

	var _marked$1 = /*#__PURE__*/regeneratorRuntime.mark(flatten);

	function flatten(arrays) {
	  var _iterator, _step, array;

	  return regeneratorRuntime.wrap(function flatten$(_context) {
	    while (1) {
	      switch (_context.prev = _context.next) {
	        case 0:
	          _iterator = _createForOfIteratorHelper(arrays);
	          _context.prev = 1;

	          _iterator.s();

	        case 3:
	          if ((_step = _iterator.n()).done) {
	            _context.next = 8;
	            break;
	          }

	          array = _step.value;
	          return _context.delegateYield(array, "t0", 6);

	        case 6:
	          _context.next = 3;
	          break;

	        case 8:
	          _context.next = 13;
	          break;

	        case 10:
	          _context.prev = 10;
	          _context.t1 = _context["catch"](1);

	          _iterator.e(_context.t1);

	        case 13:
	          _context.prev = 13;

	          _iterator.f();

	          return _context.finish(13);

	        case 16:
	        case "end":
	          return _context.stop();
	      }
	    }
	  }, _marked$1, null, [[1, 10, 13, 16]]);
	}

	function merge(arrays) {
	  return Array.from(flatten(arrays));
	}

	function range(start, stop, step) {
	  start = +start, stop = +stop, step = (n = arguments.length) < 2 ? (stop = start, start = 0, 1) : n < 3 ? 1 : +step;
	  var i = -1,
	      n = Math.max(0, Math.ceil((stop - start) / step)) | 0,
	      range = new Array(n);

	  while (++i < n) {
	    range[i] = start + i * step;
	  }

	  return range;
	}

	function identity$6 (x) {
	  return x;
	}

	var top = 1,
	    right = 2,
	    bottom = 3,
	    left = 4,
	    epsilon$3 = 1e-6;

	function translateX(x) {
	  return "translate(" + x + ",0)";
	}

	function translateY(y) {
	  return "translate(0," + y + ")";
	}

	function number$1(scale) {
	  return function (d) {
	    return +scale(d);
	  };
	}

	function center(scale, offset) {
	  offset = Math.max(0, scale.bandwidth() - offset * 2) / 2;
	  if (scale.round()) offset = Math.round(offset);
	  return function (d) {
	    return +scale(d) + offset;
	  };
	}

	function entering() {
	  return !this.__axis;
	}

	function axis(orient, scale) {
	  var tickArguments = [],
	      tickValues = null,
	      tickFormat = null,
	      tickSizeInner = 6,
	      tickSizeOuter = 6,
	      tickPadding = 3,
	      offset = typeof window !== "undefined" && window.devicePixelRatio > 1 ? 0 : 0.5,
	      k = orient === top || orient === left ? -1 : 1,
	      x = orient === left || orient === right ? "x" : "y",
	      transform = orient === top || orient === bottom ? translateX : translateY;

	  function axis(context) {
	    var values = tickValues == null ? scale.ticks ? scale.ticks.apply(scale, tickArguments) : scale.domain() : tickValues,
	        format = tickFormat == null ? scale.tickFormat ? scale.tickFormat.apply(scale, tickArguments) : identity$6 : tickFormat,
	        spacing = Math.max(tickSizeInner, 0) + tickPadding,
	        range = scale.range(),
	        range0 = +range[0] + offset,
	        range1 = +range[range.length - 1] + offset,
	        position = (scale.bandwidth ? center : number$1)(scale.copy(), offset),
	        selection = context.selection ? context.selection() : context,
	        path = selection.selectAll(".domain").data([null]),
	        tick = selection.selectAll(".tick").data(values, scale).order(),
	        tickExit = tick.exit(),
	        tickEnter = tick.enter().append("g").attr("class", "tick"),
	        line = tick.select("line"),
	        text = tick.select("text");
	    path = path.merge(path.enter().insert("path", ".tick").attr("class", "domain").attr("stroke", "currentColor"));
	    tick = tick.merge(tickEnter);
	    line = line.merge(tickEnter.append("line").attr("stroke", "currentColor").attr(x + "2", k * tickSizeInner));
	    text = text.merge(tickEnter.append("text").attr("fill", "currentColor").attr(x, k * spacing).attr("dy", orient === top ? "0em" : orient === bottom ? "0.71em" : "0.32em"));

	    if (context !== selection) {
	      path = path.transition(context);
	      tick = tick.transition(context);
	      line = line.transition(context);
	      text = text.transition(context);
	      tickExit = tickExit.transition(context).attr("opacity", epsilon$3).attr("transform", function (d) {
	        return isFinite(d = position(d)) ? transform(d + offset) : this.getAttribute("transform");
	      });
	      tickEnter.attr("opacity", epsilon$3).attr("transform", function (d) {
	        var p = this.parentNode.__axis;
	        return transform((p && isFinite(p = p(d)) ? p : position(d)) + offset);
	      });
	    }

	    tickExit.remove();
	    path.attr("d", orient === left || orient === right ? tickSizeOuter ? "M" + k * tickSizeOuter + "," + range0 + "H" + offset + "V" + range1 + "H" + k * tickSizeOuter : "M" + offset + "," + range0 + "V" + range1 : tickSizeOuter ? "M" + range0 + "," + k * tickSizeOuter + "V" + offset + "H" + range1 + "V" + k * tickSizeOuter : "M" + range0 + "," + offset + "H" + range1);
	    tick.attr("opacity", 1).attr("transform", function (d) {
	      return transform(position(d) + offset);
	    });
	    line.attr(x + "2", k * tickSizeInner);
	    text.attr(x, k * spacing).text(format);
	    selection.filter(entering).attr("fill", "none").attr("font-size", 10).attr("font-family", "sans-serif").attr("text-anchor", orient === right ? "start" : orient === left ? "end" : "middle");
	    selection.each(function () {
	      this.__axis = position;
	    });
	  }

	  axis.scale = function (_) {
	    return arguments.length ? (scale = _, axis) : scale;
	  };

	  axis.ticks = function () {
	    return tickArguments = Array.from(arguments), axis;
	  };

	  axis.tickArguments = function (_) {
	    return arguments.length ? (tickArguments = _ == null ? [] : Array.from(_), axis) : tickArguments.slice();
	  };

	  axis.tickValues = function (_) {
	    return arguments.length ? (tickValues = _ == null ? null : Array.from(_), axis) : tickValues && tickValues.slice();
	  };

	  axis.tickFormat = function (_) {
	    return arguments.length ? (tickFormat = _, axis) : tickFormat;
	  };

	  axis.tickSize = function (_) {
	    return arguments.length ? (tickSizeInner = tickSizeOuter = +_, axis) : tickSizeInner;
	  };

	  axis.tickSizeInner = function (_) {
	    return arguments.length ? (tickSizeInner = +_, axis) : tickSizeInner;
	  };

	  axis.tickSizeOuter = function (_) {
	    return arguments.length ? (tickSizeOuter = +_, axis) : tickSizeOuter;
	  };

	  axis.tickPadding = function (_) {
	    return arguments.length ? (tickPadding = +_, axis) : tickPadding;
	  };

	  axis.offset = function (_) {
	    return arguments.length ? (offset = +_, axis) : offset;
	  };

	  return axis;
	}
	function axisRight(scale) {
	  return axis(right, scale);
	}
	function axisBottom(scale) {
	  return axis(bottom, scale);
	}
	function axisLeft(scale) {
	  return axis(left, scale);
	}

	var noop$2 = {
	  value: function value() {}
	};

	function dispatch() {
	  for (var i = 0, n = arguments.length, _ = {}, t; i < n; ++i) {
	    if (!(t = arguments[i] + "") || t in _ || /[\s.]/.test(t)) throw new Error("illegal type: " + t);
	    _[t] = [];
	  }

	  return new Dispatch(_);
	}

	function Dispatch(_) {
	  this._ = _;
	}

	function parseTypenames$1(typenames, types) {
	  return typenames.trim().split(/^|\s+/).map(function (t) {
	    var name = "",
	        i = t.indexOf(".");
	    if (i >= 0) name = t.slice(i + 1), t = t.slice(0, i);
	    if (t && !types.hasOwnProperty(t)) throw new Error("unknown type: " + t);
	    return {
	      type: t,
	      name: name
	    };
	  });
	}

	Dispatch.prototype = dispatch.prototype = {
	  constructor: Dispatch,
	  on: function on(typename, callback) {
	    var _ = this._,
	        T = parseTypenames$1(typename + "", _),
	        t,
	        i = -1,
	        n = T.length; // If no callback was specified, return the callback of the given type and name.

	    if (arguments.length < 2) {
	      while (++i < n) {
	        if ((t = (typename = T[i]).type) && (t = get$1(_[t], typename.name))) return t;
	      }

	      return;
	    } // If a type was specified, set the callback for the given type and name.
	    // Otherwise, if a null callback was specified, remove callbacks of the given name.


	    if (callback != null && typeof callback !== "function") throw new Error("invalid callback: " + callback);

	    while (++i < n) {
	      if (t = (typename = T[i]).type) _[t] = set$1(_[t], typename.name, callback);else if (callback == null) for (t in _) {
	        _[t] = set$1(_[t], typename.name, null);
	      }
	    }

	    return this;
	  },
	  copy: function copy() {
	    var copy = {},
	        _ = this._;

	    for (var t in _) {
	      copy[t] = _[t].slice();
	    }

	    return new Dispatch(copy);
	  },
	  call: function call(type, that) {
	    if ((n = arguments.length - 2) > 0) for (var args = new Array(n), i = 0, n, t; i < n; ++i) {
	      args[i] = arguments[i + 2];
	    }
	    if (!this._.hasOwnProperty(type)) throw new Error("unknown type: " + type);

	    for (t = this._[type], i = 0, n = t.length; i < n; ++i) {
	      t[i].value.apply(that, args);
	    }
	  },
	  apply: function apply(type, that, args) {
	    if (!this._.hasOwnProperty(type)) throw new Error("unknown type: " + type);

	    for (var t = this._[type], i = 0, n = t.length; i < n; ++i) {
	      t[i].value.apply(that, args);
	    }
	  }
	};

	function get$1(type, name) {
	  for (var i = 0, n = type.length, c; i < n; ++i) {
	    if ((c = type[i]).name === name) {
	      return c.value;
	    }
	  }
	}

	function set$1(type, name, callback) {
	  for (var i = 0, n = type.length; i < n; ++i) {
	    if (type[i].name === name) {
	      type[i] = noop$2, type = type.slice(0, i).concat(type.slice(i + 1));
	      break;
	    }
	  }

	  if (callback != null) type.push({
	    name: name,
	    value: callback
	  });
	  return type;
	}

	var xhtml = "http://www.w3.org/1999/xhtml";
	var namespaces = {
	  svg: "http://www.w3.org/2000/svg",
	  xhtml: xhtml,
	  xlink: "http://www.w3.org/1999/xlink",
	  xml: "http://www.w3.org/XML/1998/namespace",
	  xmlns: "http://www.w3.org/2000/xmlns/"
	};

	function namespace (name) {
	  var prefix = name += "",
	      i = prefix.indexOf(":");
	  if (i >= 0 && (prefix = name.slice(0, i)) !== "xmlns") name = name.slice(i + 1);
	  return namespaces.hasOwnProperty(prefix) ? {
	    space: namespaces[prefix],
	    local: name
	  } : name; // eslint-disable-line no-prototype-builtins
	}

	function creatorInherit(name) {
	  return function () {
	    var document = this.ownerDocument,
	        uri = this.namespaceURI;
	    return uri === xhtml && document.documentElement.namespaceURI === xhtml ? document.createElement(name) : document.createElementNS(uri, name);
	  };
	}

	function creatorFixed(fullname) {
	  return function () {
	    return this.ownerDocument.createElementNS(fullname.space, fullname.local);
	  };
	}

	function creator (name) {
	  var fullname = namespace(name);
	  return (fullname.local ? creatorFixed : creatorInherit)(fullname);
	}

	function none() {}

	function selector (selector) {
	  return selector == null ? none : function () {
	    return this.querySelector(selector);
	  };
	}

	function selection_select (select) {
	  if (typeof select !== "function") select = selector(select);

	  for (var groups = this._groups, m = groups.length, subgroups = new Array(m), j = 0; j < m; ++j) {
	    for (var group = groups[j], n = group.length, subgroup = subgroups[j] = new Array(n), node, subnode, i = 0; i < n; ++i) {
	      if ((node = group[i]) && (subnode = select.call(node, node.__data__, i, group))) {
	        if ("__data__" in node) subnode.__data__ = node.__data__;
	        subgroup[i] = subnode;
	      }
	    }
	  }

	  return new Selection$1(subgroups, this._parents);
	}

	// Given something array like (or null), returns something that is strictly an
	// array. This is used to ensure that array-like objects passed to d3.selectAll
	// or selection.selectAll are converted into proper arrays when creating a
	// selection; we don’t ever want to create a selection backed by a live
	// HTMLCollection or NodeList. However, note that selection.selectAll will use a
	// static NodeList as a group, since it safely derived from querySelectorAll.
	function array$2(x) {
	  return x == null ? [] : Array.isArray(x) ? x : Array.from(x);
	}

	function empty() {
	  return [];
	}

	function selectorAll (selector) {
	  return selector == null ? empty : function () {
	    return this.querySelectorAll(selector);
	  };
	}

	function arrayAll(select) {
	  return function () {
	    return array$2(select.apply(this, arguments));
	  };
	}

	function selection_selectAll (select) {
	  if (typeof select === "function") select = arrayAll(select);else select = selectorAll(select);

	  for (var groups = this._groups, m = groups.length, subgroups = [], parents = [], j = 0; j < m; ++j) {
	    for (var group = groups[j], n = group.length, node, i = 0; i < n; ++i) {
	      if (node = group[i]) {
	        subgroups.push(select.call(node, node.__data__, i, group));
	        parents.push(node);
	      }
	    }
	  }

	  return new Selection$1(subgroups, parents);
	}

	function matcher (selector) {
	  return function () {
	    return this.matches(selector);
	  };
	}
	function childMatcher(selector) {
	  return function (node) {
	    return node.matches(selector);
	  };
	}

	var find = Array.prototype.find;

	function childFind(match) {
	  return function () {
	    return find.call(this.children, match);
	  };
	}

	function childFirst() {
	  return this.firstElementChild;
	}

	function selection_selectChild (match) {
	  return this.select(match == null ? childFirst : childFind(typeof match === "function" ? match : childMatcher(match)));
	}

	var filter = Array.prototype.filter;

	function children() {
	  return Array.from(this.children);
	}

	function childrenFilter(match) {
	  return function () {
	    return filter.call(this.children, match);
	  };
	}

	function selection_selectChildren (match) {
	  return this.selectAll(match == null ? children : childrenFilter(typeof match === "function" ? match : childMatcher(match)));
	}

	function selection_filter (match) {
	  if (typeof match !== "function") match = matcher(match);

	  for (var groups = this._groups, m = groups.length, subgroups = new Array(m), j = 0; j < m; ++j) {
	    for (var group = groups[j], n = group.length, subgroup = subgroups[j] = [], node, i = 0; i < n; ++i) {
	      if ((node = group[i]) && match.call(node, node.__data__, i, group)) {
	        subgroup.push(node);
	      }
	    }
	  }

	  return new Selection$1(subgroups, this._parents);
	}

	function sparse (update) {
	  return new Array(update.length);
	}

	function selection_enter () {
	  return new Selection$1(this._enter || this._groups.map(sparse), this._parents);
	}
	function EnterNode(parent, datum) {
	  this.ownerDocument = parent.ownerDocument;
	  this.namespaceURI = parent.namespaceURI;
	  this._next = null;
	  this._parent = parent;
	  this.__data__ = datum;
	}
	EnterNode.prototype = {
	  constructor: EnterNode,
	  appendChild: function appendChild(child) {
	    return this._parent.insertBefore(child, this._next);
	  },
	  insertBefore: function insertBefore(child, next) {
	    return this._parent.insertBefore(child, next);
	  },
	  querySelector: function querySelector(selector) {
	    return this._parent.querySelector(selector);
	  },
	  querySelectorAll: function querySelectorAll(selector) {
	    return this._parent.querySelectorAll(selector);
	  }
	};

	function constant$4 (x) {
	  return function () {
	    return x;
	  };
	}

	function bindIndex(parent, group, enter, update, exit, data) {
	  var i = 0,
	      node,
	      groupLength = group.length,
	      dataLength = data.length; // Put any non-null nodes that fit into update.
	  // Put any null nodes into enter.
	  // Put any remaining data into enter.

	  for (; i < dataLength; ++i) {
	    if (node = group[i]) {
	      node.__data__ = data[i];
	      update[i] = node;
	    } else {
	      enter[i] = new EnterNode(parent, data[i]);
	    }
	  } // Put any non-null nodes that don’t fit into exit.


	  for (; i < groupLength; ++i) {
	    if (node = group[i]) {
	      exit[i] = node;
	    }
	  }
	}

	function bindKey(parent, group, enter, update, exit, data, key) {
	  var i,
	      node,
	      nodeByKeyValue = new Map(),
	      groupLength = group.length,
	      dataLength = data.length,
	      keyValues = new Array(groupLength),
	      keyValue; // Compute the key for each node.
	  // If multiple nodes have the same key, the duplicates are added to exit.

	  for (i = 0; i < groupLength; ++i) {
	    if (node = group[i]) {
	      keyValues[i] = keyValue = key.call(node, node.__data__, i, group) + "";

	      if (nodeByKeyValue.has(keyValue)) {
	        exit[i] = node;
	      } else {
	        nodeByKeyValue.set(keyValue, node);
	      }
	    }
	  } // Compute the key for each datum.
	  // If there a node associated with this key, join and add it to update.
	  // If there is not (or the key is a duplicate), add it to enter.


	  for (i = 0; i < dataLength; ++i) {
	    keyValue = key.call(parent, data[i], i, data) + "";

	    if (node = nodeByKeyValue.get(keyValue)) {
	      update[i] = node;
	      node.__data__ = data[i];
	      nodeByKeyValue.delete(keyValue);
	    } else {
	      enter[i] = new EnterNode(parent, data[i]);
	    }
	  } // Add any remaining nodes that were not bound to data to exit.


	  for (i = 0; i < groupLength; ++i) {
	    if ((node = group[i]) && nodeByKeyValue.get(keyValues[i]) === node) {
	      exit[i] = node;
	    }
	  }
	}

	function datum(node) {
	  return node.__data__;
	}

	function selection_data (value, key) {
	  if (!arguments.length) return Array.from(this, datum);
	  var bind = key ? bindKey : bindIndex,
	      parents = this._parents,
	      groups = this._groups;
	  if (typeof value !== "function") value = constant$4(value);

	  for (var m = groups.length, update = new Array(m), enter = new Array(m), exit = new Array(m), j = 0; j < m; ++j) {
	    var parent = parents[j],
	        group = groups[j],
	        groupLength = group.length,
	        data = arraylike(value.call(parent, parent && parent.__data__, j, parents)),
	        dataLength = data.length,
	        enterGroup = enter[j] = new Array(dataLength),
	        updateGroup = update[j] = new Array(dataLength),
	        exitGroup = exit[j] = new Array(groupLength);
	    bind(parent, group, enterGroup, updateGroup, exitGroup, data, key); // Now connect the enter nodes to their following update node, such that
	    // appendChild can insert the materialized enter node before this node,
	    // rather than at the end of the parent node.

	    for (var i0 = 0, i1 = 0, previous, next; i0 < dataLength; ++i0) {
	      if (previous = enterGroup[i0]) {
	        if (i0 >= i1) i1 = i0 + 1;

	        while (!(next = updateGroup[i1]) && ++i1 < dataLength) {
	        }

	        previous._next = next || null;
	      }
	    }
	  }

	  update = new Selection$1(update, parents);
	  update._enter = enter;
	  update._exit = exit;
	  return update;
	} // Given some data, this returns an array-like view of it: an object that
	// exposes a length property and allows numeric indexing. Note that unlike
	// selectAll, this isn’t worried about “live” collections because the resulting
	// array will only be used briefly while data is being bound. (It is possible to
	// cause the data to change while iterating by using a key function, but please
	// don’t; we’d rather avoid a gratuitous copy.)

	function arraylike(data) {
	  return _typeof(data) === "object" && "length" in data ? data // Array, TypedArray, NodeList, array-like
	  : Array.from(data); // Map, Set, iterable, string, or anything else
	}

	function selection_exit () {
	  return new Selection$1(this._exit || this._groups.map(sparse), this._parents);
	}

	function selection_join (onenter, onupdate, onexit) {
	  var enter = this.enter(),
	      update = this,
	      exit = this.exit();

	  if (typeof onenter === "function") {
	    enter = onenter(enter);
	    if (enter) enter = enter.selection();
	  } else {
	    enter = enter.append(onenter + "");
	  }

	  if (onupdate != null) {
	    update = onupdate(update);
	    if (update) update = update.selection();
	  }

	  if (onexit == null) exit.remove();else onexit(exit);
	  return enter && update ? enter.merge(update).order() : update;
	}

	function selection_merge (context) {
	  var selection = context.selection ? context.selection() : context;

	  for (var groups0 = this._groups, groups1 = selection._groups, m0 = groups0.length, m1 = groups1.length, m = Math.min(m0, m1), merges = new Array(m0), j = 0; j < m; ++j) {
	    for (var group0 = groups0[j], group1 = groups1[j], n = group0.length, merge = merges[j] = new Array(n), node, i = 0; i < n; ++i) {
	      if (node = group0[i] || group1[i]) {
	        merge[i] = node;
	      }
	    }
	  }

	  for (; j < m0; ++j) {
	    merges[j] = groups0[j];
	  }

	  return new Selection$1(merges, this._parents);
	}

	function selection_order () {
	  for (var groups = this._groups, j = -1, m = groups.length; ++j < m;) {
	    for (var group = groups[j], i = group.length - 1, next = group[i], node; --i >= 0;) {
	      if (node = group[i]) {
	        if (next && node.compareDocumentPosition(next) ^ 4) next.parentNode.insertBefore(node, next);
	        next = node;
	      }
	    }
	  }

	  return this;
	}

	function selection_sort (compare) {
	  if (!compare) compare = ascending$1;

	  function compareNode(a, b) {
	    return a && b ? compare(a.__data__, b.__data__) : !a - !b;
	  }

	  for (var groups = this._groups, m = groups.length, sortgroups = new Array(m), j = 0; j < m; ++j) {
	    for (var group = groups[j], n = group.length, sortgroup = sortgroups[j] = new Array(n), node, i = 0; i < n; ++i) {
	      if (node = group[i]) {
	        sortgroup[i] = node;
	      }
	    }

	    sortgroup.sort(compareNode);
	  }

	  return new Selection$1(sortgroups, this._parents).order();
	}

	function ascending$1(a, b) {
	  return a < b ? -1 : a > b ? 1 : a >= b ? 0 : NaN;
	}

	function selection_call () {
	  var callback = arguments[0];
	  arguments[0] = this;
	  callback.apply(null, arguments);
	  return this;
	}

	function selection_nodes () {
	  return Array.from(this);
	}

	function selection_node () {
	  for (var groups = this._groups, j = 0, m = groups.length; j < m; ++j) {
	    for (var group = groups[j], i = 0, n = group.length; i < n; ++i) {
	      var node = group[i];
	      if (node) return node;
	    }
	  }

	  return null;
	}

	function selection_size () {
	  var size = 0;

	  var _iterator = _createForOfIteratorHelper(this),
	      _step;

	  try {
	    for (_iterator.s(); !(_step = _iterator.n()).done;) {
	      var node = _step.value;
	      ++size;
	    } // eslint-disable-line no-unused-vars

	  } catch (err) {
	    _iterator.e(err);
	  } finally {
	    _iterator.f();
	  }

	  return size;
	}

	function selection_empty () {
	  return !this.node();
	}

	function selection_each (callback) {
	  for (var groups = this._groups, j = 0, m = groups.length; j < m; ++j) {
	    for (var group = groups[j], i = 0, n = group.length, node; i < n; ++i) {
	      if (node = group[i]) callback.call(node, node.__data__, i, group);
	    }
	  }

	  return this;
	}

	function attrRemove$1(name) {
	  return function () {
	    this.removeAttribute(name);
	  };
	}

	function attrRemoveNS$1(fullname) {
	  return function () {
	    this.removeAttributeNS(fullname.space, fullname.local);
	  };
	}

	function attrConstant$1(name, value) {
	  return function () {
	    this.setAttribute(name, value);
	  };
	}

	function attrConstantNS$1(fullname, value) {
	  return function () {
	    this.setAttributeNS(fullname.space, fullname.local, value);
	  };
	}

	function attrFunction$1(name, value) {
	  return function () {
	    var v = value.apply(this, arguments);
	    if (v == null) this.removeAttribute(name);else this.setAttribute(name, v);
	  };
	}

	function attrFunctionNS$1(fullname, value) {
	  return function () {
	    var v = value.apply(this, arguments);
	    if (v == null) this.removeAttributeNS(fullname.space, fullname.local);else this.setAttributeNS(fullname.space, fullname.local, v);
	  };
	}

	function selection_attr (name, value) {
	  var fullname = namespace(name);

	  if (arguments.length < 2) {
	    var node = this.node();
	    return fullname.local ? node.getAttributeNS(fullname.space, fullname.local) : node.getAttribute(fullname);
	  }

	  return this.each((value == null ? fullname.local ? attrRemoveNS$1 : attrRemove$1 : typeof value === "function" ? fullname.local ? attrFunctionNS$1 : attrFunction$1 : fullname.local ? attrConstantNS$1 : attrConstant$1)(fullname, value));
	}

	function defaultView (node) {
	  return node.ownerDocument && node.ownerDocument.defaultView // node is a Node
	  || node.document && node // node is a Window
	  || node.defaultView; // node is a Document
	}

	function styleRemove$1(name) {
	  return function () {
	    this.style.removeProperty(name);
	  };
	}

	function styleConstant$1(name, value, priority) {
	  return function () {
	    this.style.setProperty(name, value, priority);
	  };
	}

	function styleFunction$1(name, value, priority) {
	  return function () {
	    var v = value.apply(this, arguments);
	    if (v == null) this.style.removeProperty(name);else this.style.setProperty(name, v, priority);
	  };
	}

	function selection_style (name, value, priority) {
	  return arguments.length > 1 ? this.each((value == null ? styleRemove$1 : typeof value === "function" ? styleFunction$1 : styleConstant$1)(name, value, priority == null ? "" : priority)) : styleValue(this.node(), name);
	}
	function styleValue(node, name) {
	  return node.style.getPropertyValue(name) || defaultView(node).getComputedStyle(node, null).getPropertyValue(name);
	}

	function propertyRemove(name) {
	  return function () {
	    delete this[name];
	  };
	}

	function propertyConstant(name, value) {
	  return function () {
	    this[name] = value;
	  };
	}

	function propertyFunction(name, value) {
	  return function () {
	    var v = value.apply(this, arguments);
	    if (v == null) delete this[name];else this[name] = v;
	  };
	}

	function selection_property (name, value) {
	  return arguments.length > 1 ? this.each((value == null ? propertyRemove : typeof value === "function" ? propertyFunction : propertyConstant)(name, value)) : this.node()[name];
	}

	function classArray(string) {
	  return string.trim().split(/^|\s+/);
	}

	function classList(node) {
	  return node.classList || new ClassList(node);
	}

	function ClassList(node) {
	  this._node = node;
	  this._names = classArray(node.getAttribute("class") || "");
	}

	ClassList.prototype = {
	  add: function add(name) {
	    var i = this._names.indexOf(name);

	    if (i < 0) {
	      this._names.push(name);

	      this._node.setAttribute("class", this._names.join(" "));
	    }
	  },
	  remove: function remove(name) {
	    var i = this._names.indexOf(name);

	    if (i >= 0) {
	      this._names.splice(i, 1);

	      this._node.setAttribute("class", this._names.join(" "));
	    }
	  },
	  contains: function contains(name) {
	    return this._names.indexOf(name) >= 0;
	  }
	};

	function classedAdd(node, names) {
	  var list = classList(node),
	      i = -1,
	      n = names.length;

	  while (++i < n) {
	    list.add(names[i]);
	  }
	}

	function classedRemove(node, names) {
	  var list = classList(node),
	      i = -1,
	      n = names.length;

	  while (++i < n) {
	    list.remove(names[i]);
	  }
	}

	function classedTrue(names) {
	  return function () {
	    classedAdd(this, names);
	  };
	}

	function classedFalse(names) {
	  return function () {
	    classedRemove(this, names);
	  };
	}

	function classedFunction(names, value) {
	  return function () {
	    (value.apply(this, arguments) ? classedAdd : classedRemove)(this, names);
	  };
	}

	function selection_classed (name, value) {
	  var names = classArray(name + "");

	  if (arguments.length < 2) {
	    var list = classList(this.node()),
	        i = -1,
	        n = names.length;

	    while (++i < n) {
	      if (!list.contains(names[i])) return false;
	    }

	    return true;
	  }

	  return this.each((typeof value === "function" ? classedFunction : value ? classedTrue : classedFalse)(names, value));
	}

	function textRemove() {
	  this.textContent = "";
	}

	function textConstant$1(value) {
	  return function () {
	    this.textContent = value;
	  };
	}

	function textFunction$1(value) {
	  return function () {
	    var v = value.apply(this, arguments);
	    this.textContent = v == null ? "" : v;
	  };
	}

	function selection_text (value) {
	  return arguments.length ? this.each(value == null ? textRemove : (typeof value === "function" ? textFunction$1 : textConstant$1)(value)) : this.node().textContent;
	}

	function htmlRemove() {
	  this.innerHTML = "";
	}

	function htmlConstant(value) {
	  return function () {
	    this.innerHTML = value;
	  };
	}

	function htmlFunction(value) {
	  return function () {
	    var v = value.apply(this, arguments);
	    this.innerHTML = v == null ? "" : v;
	  };
	}

	function selection_html (value) {
	  return arguments.length ? this.each(value == null ? htmlRemove : (typeof value === "function" ? htmlFunction : htmlConstant)(value)) : this.node().innerHTML;
	}

	function raise() {
	  if (this.nextSibling) this.parentNode.appendChild(this);
	}

	function selection_raise () {
	  return this.each(raise);
	}

	function lower() {
	  if (this.previousSibling) this.parentNode.insertBefore(this, this.parentNode.firstChild);
	}

	function selection_lower () {
	  return this.each(lower);
	}

	function selection_append (name) {
	  var create = typeof name === "function" ? name : creator(name);
	  return this.select(function () {
	    return this.appendChild(create.apply(this, arguments));
	  });
	}

	function constantNull() {
	  return null;
	}

	function selection_insert (name, before) {
	  var create = typeof name === "function" ? name : creator(name),
	      select = before == null ? constantNull : typeof before === "function" ? before : selector(before);
	  return this.select(function () {
	    return this.insertBefore(create.apply(this, arguments), select.apply(this, arguments) || null);
	  });
	}

	function remove() {
	  var parent = this.parentNode;
	  if (parent) parent.removeChild(this);
	}

	function selection_remove () {
	  return this.each(remove);
	}

	function selection_cloneShallow() {
	  var clone = this.cloneNode(false),
	      parent = this.parentNode;
	  return parent ? parent.insertBefore(clone, this.nextSibling) : clone;
	}

	function selection_cloneDeep() {
	  var clone = this.cloneNode(true),
	      parent = this.parentNode;
	  return parent ? parent.insertBefore(clone, this.nextSibling) : clone;
	}

	function selection_clone (deep) {
	  return this.select(deep ? selection_cloneDeep : selection_cloneShallow);
	}

	function selection_datum (value) {
	  return arguments.length ? this.property("__data__", value) : this.node().__data__;
	}

	function contextListener(listener) {
	  return function (event) {
	    listener.call(this, event, this.__data__);
	  };
	}

	function parseTypenames(typenames) {
	  return typenames.trim().split(/^|\s+/).map(function (t) {
	    var name = "",
	        i = t.indexOf(".");
	    if (i >= 0) name = t.slice(i + 1), t = t.slice(0, i);
	    return {
	      type: t,
	      name: name
	    };
	  });
	}

	function onRemove(typename) {
	  return function () {
	    var on = this.__on;
	    if (!on) return;

	    for (var j = 0, i = -1, m = on.length, o; j < m; ++j) {
	      if (o = on[j], (!typename.type || o.type === typename.type) && o.name === typename.name) {
	        this.removeEventListener(o.type, o.listener, o.options);
	      } else {
	        on[++i] = o;
	      }
	    }

	    if (++i) on.length = i;else delete this.__on;
	  };
	}

	function onAdd(typename, value, options) {
	  return function () {
	    var on = this.__on,
	        o,
	        listener = contextListener(value);
	    if (on) for (var j = 0, m = on.length; j < m; ++j) {
	      if ((o = on[j]).type === typename.type && o.name === typename.name) {
	        this.removeEventListener(o.type, o.listener, o.options);
	        this.addEventListener(o.type, o.listener = listener, o.options = options);
	        o.value = value;
	        return;
	      }
	    }
	    this.addEventListener(typename.type, listener, options);
	    o = {
	      type: typename.type,
	      name: typename.name,
	      value: value,
	      listener: listener,
	      options: options
	    };
	    if (!on) this.__on = [o];else on.push(o);
	  };
	}

	function selection_on (typename, value, options) {
	  var typenames = parseTypenames(typename + ""),
	      i,
	      n = typenames.length,
	      t;

	  if (arguments.length < 2) {
	    var on = this.node().__on;

	    if (on) for (var j = 0, m = on.length, o; j < m; ++j) {
	      for (i = 0, o = on[j]; i < n; ++i) {
	        if ((t = typenames[i]).type === o.type && t.name === o.name) {
	          return o.value;
	        }
	      }
	    }
	    return;
	  }

	  on = value ? onAdd : onRemove;

	  for (i = 0; i < n; ++i) {
	    this.each(on(typenames[i], value, options));
	  }

	  return this;
	}

	function dispatchEvent(node, type, params) {
	  var window = defaultView(node),
	      event = window.CustomEvent;

	  if (typeof event === "function") {
	    event = new event(type, params);
	  } else {
	    event = window.document.createEvent("Event");
	    if (params) event.initEvent(type, params.bubbles, params.cancelable), event.detail = params.detail;else event.initEvent(type, false, false);
	  }

	  node.dispatchEvent(event);
	}

	function dispatchConstant(type, params) {
	  return function () {
	    return dispatchEvent(this, type, params);
	  };
	}

	function dispatchFunction(type, params) {
	  return function () {
	    return dispatchEvent(this, type, params.apply(this, arguments));
	  };
	}

	function selection_dispatch (type, params) {
	  return this.each((typeof params === "function" ? dispatchFunction : dispatchConstant)(type, params));
	}

	var _marked = /*#__PURE__*/regeneratorRuntime.mark(_callee);

	function _callee() {
	  var groups, j, m, group, i, n, node;
	  return regeneratorRuntime.wrap(function _callee$(_context) {
	    while (1) {
	      switch (_context.prev = _context.next) {
	        case 0:
	          groups = this._groups, j = 0, m = groups.length;

	        case 1:
	          if (!(j < m)) {
	            _context.next = 13;
	            break;
	          }

	          group = groups[j], i = 0, n = group.length;

	        case 3:
	          if (!(i < n)) {
	            _context.next = 10;
	            break;
	          }

	          if (!(node = group[i])) {
	            _context.next = 7;
	            break;
	          }

	          _context.next = 7;
	          return node;

	        case 7:
	          ++i;
	          _context.next = 3;
	          break;

	        case 10:
	          ++j;
	          _context.next = 1;
	          break;

	        case 13:
	        case "end":
	          return _context.stop();
	      }
	    }
	  }, _marked, this);
	}

	var root = [null];
	function Selection$1(groups, parents) {
	  this._groups = groups;
	  this._parents = parents;
	}

	function selection() {
	  return new Selection$1([[document.documentElement]], root);
	}

	function selection_selection() {
	  return this;
	}

	Selection$1.prototype = selection.prototype = _defineProperty({
	  constructor: Selection$1,
	  select: selection_select,
	  selectAll: selection_selectAll,
	  selectChild: selection_selectChild,
	  selectChildren: selection_selectChildren,
	  filter: selection_filter,
	  data: selection_data,
	  enter: selection_enter,
	  exit: selection_exit,
	  join: selection_join,
	  merge: selection_merge,
	  selection: selection_selection,
	  order: selection_order,
	  sort: selection_sort,
	  call: selection_call,
	  nodes: selection_nodes,
	  node: selection_node,
	  size: selection_size,
	  empty: selection_empty,
	  each: selection_each,
	  attr: selection_attr,
	  style: selection_style,
	  property: selection_property,
	  classed: selection_classed,
	  text: selection_text,
	  html: selection_html,
	  raise: selection_raise,
	  lower: selection_lower,
	  append: selection_append,
	  insert: selection_insert,
	  remove: selection_remove,
	  clone: selection_clone,
	  datum: selection_datum,
	  on: selection_on,
	  dispatch: selection_dispatch
	}, Symbol.iterator, _callee);

	function select (selector) {
	  return typeof selector === "string" ? new Selection$1([[document.querySelector(selector)]], [document.documentElement]) : new Selection$1([[selector]], root);
	}

	function sourceEvent (event) {
	  var sourceEvent;

	  while (sourceEvent = event.sourceEvent) {
	    event = sourceEvent;
	  }

	  return event;
	}

	function pointer (event, node) {
	  event = sourceEvent(event);
	  if (node === undefined) node = event.currentTarget;

	  if (node) {
	    var svg = node.ownerSVGElement || node;

	    if (svg.createSVGPoint) {
	      var point = svg.createSVGPoint();
	      point.x = event.clientX, point.y = event.clientY;
	      point = point.matrixTransform(node.getScreenCTM().inverse());
	      return [point.x, point.y];
	    }

	    if (node.getBoundingClientRect) {
	      var rect = node.getBoundingClientRect();
	      return [event.clientX - rect.left - node.clientLeft, event.clientY - rect.top - node.clientTop];
	    }
	  }

	  return [event.pageX, event.pageY];
	}

	// These are typically used in conjunction with noevent to ensure that we can
	// preventDefault on the event.
	var nonpassive = {
	  passive: false
	};
	var nonpassivecapture = {
	  capture: true,
	  passive: false
	};
	function nopropagation(event) {
	  event.stopImmediatePropagation();
	}
	function noevent (event) {
	  event.preventDefault();
	  event.stopImmediatePropagation();
	}

	function dragDisable (view) {
	  var root = view.document.documentElement,
	      selection = select(view).on("dragstart.drag", noevent, nonpassivecapture);

	  if ("onselectstart" in root) {
	    selection.on("selectstart.drag", noevent, nonpassivecapture);
	  } else {
	    root.__noselect = root.style.MozUserSelect;
	    root.style.MozUserSelect = "none";
	  }
	}
	function yesdrag(view, noclick) {
	  var root = view.document.documentElement,
	      selection = select(view).on("dragstart.drag", null);

	  if (noclick) {
	    selection.on("click.drag", noevent, nonpassivecapture);
	    setTimeout(function () {
	      selection.on("click.drag", null);
	    }, 0);
	  }

	  if ("onselectstart" in root) {
	    selection.on("selectstart.drag", null);
	  } else {
	    root.style.MozUserSelect = root.__noselect;
	    delete root.__noselect;
	  }
	}

	var constant$3 = (function (x) {
	  return function () {
	    return x;
	  };
	});

	function DragEvent(type, _ref) {
	  var sourceEvent = _ref.sourceEvent,
	      subject = _ref.subject,
	      target = _ref.target,
	      identifier = _ref.identifier,
	      active = _ref.active,
	      x = _ref.x,
	      y = _ref.y,
	      dx = _ref.dx,
	      dy = _ref.dy,
	      dispatch = _ref.dispatch;
	  Object.defineProperties(this, {
	    type: {
	      value: type,
	      enumerable: true,
	      configurable: true
	    },
	    sourceEvent: {
	      value: sourceEvent,
	      enumerable: true,
	      configurable: true
	    },
	    subject: {
	      value: subject,
	      enumerable: true,
	      configurable: true
	    },
	    target: {
	      value: target,
	      enumerable: true,
	      configurable: true
	    },
	    identifier: {
	      value: identifier,
	      enumerable: true,
	      configurable: true
	    },
	    active: {
	      value: active,
	      enumerable: true,
	      configurable: true
	    },
	    x: {
	      value: x,
	      enumerable: true,
	      configurable: true
	    },
	    y: {
	      value: y,
	      enumerable: true,
	      configurable: true
	    },
	    dx: {
	      value: dx,
	      enumerable: true,
	      configurable: true
	    },
	    dy: {
	      value: dy,
	      enumerable: true,
	      configurable: true
	    },
	    _: {
	      value: dispatch
	    }
	  });
	}

	DragEvent.prototype.on = function () {
	  var value = this._.on.apply(this._, arguments);

	  return value === this._ ? this : value;
	};

	function defaultFilter(event) {
	  return !event.ctrlKey && !event.button;
	}

	function defaultContainer() {
	  return this.parentNode;
	}

	function defaultSubject(event, d) {
	  return d == null ? {
	    x: event.x,
	    y: event.y
	  } : d;
	}

	function defaultTouchable() {
	  return navigator.maxTouchPoints || "ontouchstart" in this;
	}

	function drag () {
	  var filter = defaultFilter,
	      container = defaultContainer,
	      subject = defaultSubject,
	      touchable = defaultTouchable,
	      gestures = {},
	      listeners = dispatch("start", "drag", "end"),
	      active = 0,
	      mousedownx,
	      mousedowny,
	      mousemoving,
	      touchending,
	      clickDistance2 = 0;

	  function drag(selection) {
	    selection.on("mousedown.drag", mousedowned).filter(touchable).on("touchstart.drag", touchstarted).on("touchmove.drag", touchmoved, nonpassive).on("touchend.drag touchcancel.drag", touchended).style("touch-action", "none").style("-webkit-tap-highlight-color", "rgba(0,0,0,0)");
	  }

	  function mousedowned(event, d) {
	    if (touchending || !filter.call(this, event, d)) return;
	    var gesture = beforestart(this, container.call(this, event, d), event, d, "mouse");
	    if (!gesture) return;
	    select(event.view).on("mousemove.drag", mousemoved, nonpassivecapture).on("mouseup.drag", mouseupped, nonpassivecapture);
	    dragDisable(event.view);
	    nopropagation(event);
	    mousemoving = false;
	    mousedownx = event.clientX;
	    mousedowny = event.clientY;
	    gesture("start", event);
	  }

	  function mousemoved(event) {
	    noevent(event);

	    if (!mousemoving) {
	      var dx = event.clientX - mousedownx,
	          dy = event.clientY - mousedowny;
	      mousemoving = dx * dx + dy * dy > clickDistance2;
	    }

	    gestures.mouse("drag", event);
	  }

	  function mouseupped(event) {
	    select(event.view).on("mousemove.drag mouseup.drag", null);
	    yesdrag(event.view, mousemoving);
	    noevent(event);
	    gestures.mouse("end", event);
	  }

	  function touchstarted(event, d) {
	    if (!filter.call(this, event, d)) return;
	    var touches = event.changedTouches,
	        c = container.call(this, event, d),
	        n = touches.length,
	        i,
	        gesture;

	    for (i = 0; i < n; ++i) {
	      if (gesture = beforestart(this, c, event, d, touches[i].identifier, touches[i])) {
	        nopropagation(event);
	        gesture("start", event, touches[i]);
	      }
	    }
	  }

	  function touchmoved(event) {
	    var touches = event.changedTouches,
	        n = touches.length,
	        i,
	        gesture;

	    for (i = 0; i < n; ++i) {
	      if (gesture = gestures[touches[i].identifier]) {
	        noevent(event);
	        gesture("drag", event, touches[i]);
	      }
	    }
	  }

	  function touchended(event) {
	    var touches = event.changedTouches,
	        n = touches.length,
	        i,
	        gesture;
	    if (touchending) clearTimeout(touchending);
	    touchending = setTimeout(function () {
	      touchending = null;
	    }, 500); // Ghost clicks are delayed!

	    for (i = 0; i < n; ++i) {
	      if (gesture = gestures[touches[i].identifier]) {
	        nopropagation(event);
	        gesture("end", event, touches[i]);
	      }
	    }
	  }

	  function beforestart(that, container, event, d, identifier, touch) {
	    var dispatch = listeners.copy(),
	        p = pointer(touch || event, container),
	        dx,
	        dy,
	        s;
	    if ((s = subject.call(that, new DragEvent("beforestart", {
	      sourceEvent: event,
	      target: drag,
	      identifier: identifier,
	      active: active,
	      x: p[0],
	      y: p[1],
	      dx: 0,
	      dy: 0,
	      dispatch: dispatch
	    }), d)) == null) return;
	    dx = s.x - p[0] || 0;
	    dy = s.y - p[1] || 0;
	    return function gesture(type, event, touch) {
	      var p0 = p,
	          n;

	      switch (type) {
	        case "start":
	          gestures[identifier] = gesture, n = active++;
	          break;

	        case "end":
	          delete gestures[identifier], --active;
	        // falls through

	        case "drag":
	          p = pointer(touch || event, container), n = active;
	          break;
	      }

	      dispatch.call(type, that, new DragEvent(type, {
	        sourceEvent: event,
	        subject: s,
	        target: drag,
	        identifier: identifier,
	        active: n,
	        x: p[0] + dx,
	        y: p[1] + dy,
	        dx: p[0] - p0[0],
	        dy: p[1] - p0[1],
	        dispatch: dispatch
	      }), d);
	    };
	  }

	  drag.filter = function (_) {
	    return arguments.length ? (filter = typeof _ === "function" ? _ : constant$3(!!_), drag) : filter;
	  };

	  drag.container = function (_) {
	    return arguments.length ? (container = typeof _ === "function" ? _ : constant$3(_), drag) : container;
	  };

	  drag.subject = function (_) {
	    return arguments.length ? (subject = typeof _ === "function" ? _ : constant$3(_), drag) : subject;
	  };

	  drag.touchable = function (_) {
	    return arguments.length ? (touchable = typeof _ === "function" ? _ : constant$3(!!_), drag) : touchable;
	  };

	  drag.on = function () {
	    var value = listeners.on.apply(listeners, arguments);
	    return value === listeners ? drag : value;
	  };

	  drag.clickDistance = function (_) {
	    return arguments.length ? (clickDistance2 = (_ = +_) * _, drag) : Math.sqrt(clickDistance2);
	  };

	  return drag;
	}

	function define$1 (constructor, factory, prototype) {
	  constructor.prototype = factory.prototype = prototype;
	  prototype.constructor = constructor;
	}
	function extend(parent, definition) {
	  var prototype = Object.create(parent.prototype);

	  for (var key in definition) {
	    prototype[key] = definition[key];
	  }

	  return prototype;
	}

	function Color() {}
	var _darker = 0.7;

	var _brighter = 1 / _darker;
	var reI = "\\s*([+-]?\\d+)\\s*",
	    reN = "\\s*([+-]?\\d*\\.?\\d+(?:[eE][+-]?\\d+)?)\\s*",
	    reP = "\\s*([+-]?\\d*\\.?\\d+(?:[eE][+-]?\\d+)?)%\\s*",
	    reHex = /^#([0-9a-f]{3,8})$/,
	    reRgbInteger = new RegExp("^rgb\\(" + [reI, reI, reI] + "\\)$"),
	    reRgbPercent = new RegExp("^rgb\\(" + [reP, reP, reP] + "\\)$"),
	    reRgbaInteger = new RegExp("^rgba\\(" + [reI, reI, reI, reN] + "\\)$"),
	    reRgbaPercent = new RegExp("^rgba\\(" + [reP, reP, reP, reN] + "\\)$"),
	    reHslPercent = new RegExp("^hsl\\(" + [reN, reP, reP] + "\\)$"),
	    reHslaPercent = new RegExp("^hsla\\(" + [reN, reP, reP, reN] + "\\)$");
	var named = {
	  aliceblue: 0xf0f8ff,
	  antiquewhite: 0xfaebd7,
	  aqua: 0x00ffff,
	  aquamarine: 0x7fffd4,
	  azure: 0xf0ffff,
	  beige: 0xf5f5dc,
	  bisque: 0xffe4c4,
	  black: 0x000000,
	  blanchedalmond: 0xffebcd,
	  blue: 0x0000ff,
	  blueviolet: 0x8a2be2,
	  brown: 0xa52a2a,
	  burlywood: 0xdeb887,
	  cadetblue: 0x5f9ea0,
	  chartreuse: 0x7fff00,
	  chocolate: 0xd2691e,
	  coral: 0xff7f50,
	  cornflowerblue: 0x6495ed,
	  cornsilk: 0xfff8dc,
	  crimson: 0xdc143c,
	  cyan: 0x00ffff,
	  darkblue: 0x00008b,
	  darkcyan: 0x008b8b,
	  darkgoldenrod: 0xb8860b,
	  darkgray: 0xa9a9a9,
	  darkgreen: 0x006400,
	  darkgrey: 0xa9a9a9,
	  darkkhaki: 0xbdb76b,
	  darkmagenta: 0x8b008b,
	  darkolivegreen: 0x556b2f,
	  darkorange: 0xff8c00,
	  darkorchid: 0x9932cc,
	  darkred: 0x8b0000,
	  darksalmon: 0xe9967a,
	  darkseagreen: 0x8fbc8f,
	  darkslateblue: 0x483d8b,
	  darkslategray: 0x2f4f4f,
	  darkslategrey: 0x2f4f4f,
	  darkturquoise: 0x00ced1,
	  darkviolet: 0x9400d3,
	  deeppink: 0xff1493,
	  deepskyblue: 0x00bfff,
	  dimgray: 0x696969,
	  dimgrey: 0x696969,
	  dodgerblue: 0x1e90ff,
	  firebrick: 0xb22222,
	  floralwhite: 0xfffaf0,
	  forestgreen: 0x228b22,
	  fuchsia: 0xff00ff,
	  gainsboro: 0xdcdcdc,
	  ghostwhite: 0xf8f8ff,
	  gold: 0xffd700,
	  goldenrod: 0xdaa520,
	  gray: 0x808080,
	  green: 0x008000,
	  greenyellow: 0xadff2f,
	  grey: 0x808080,
	  honeydew: 0xf0fff0,
	  hotpink: 0xff69b4,
	  indianred: 0xcd5c5c,
	  indigo: 0x4b0082,
	  ivory: 0xfffff0,
	  khaki: 0xf0e68c,
	  lavender: 0xe6e6fa,
	  lavenderblush: 0xfff0f5,
	  lawngreen: 0x7cfc00,
	  lemonchiffon: 0xfffacd,
	  lightblue: 0xadd8e6,
	  lightcoral: 0xf08080,
	  lightcyan: 0xe0ffff,
	  lightgoldenrodyellow: 0xfafad2,
	  lightgray: 0xd3d3d3,
	  lightgreen: 0x90ee90,
	  lightgrey: 0xd3d3d3,
	  lightpink: 0xffb6c1,
	  lightsalmon: 0xffa07a,
	  lightseagreen: 0x20b2aa,
	  lightskyblue: 0x87cefa,
	  lightslategray: 0x778899,
	  lightslategrey: 0x778899,
	  lightsteelblue: 0xb0c4de,
	  lightyellow: 0xffffe0,
	  lime: 0x00ff00,
	  limegreen: 0x32cd32,
	  linen: 0xfaf0e6,
	  magenta: 0xff00ff,
	  maroon: 0x800000,
	  mediumaquamarine: 0x66cdaa,
	  mediumblue: 0x0000cd,
	  mediumorchid: 0xba55d3,
	  mediumpurple: 0x9370db,
	  mediumseagreen: 0x3cb371,
	  mediumslateblue: 0x7b68ee,
	  mediumspringgreen: 0x00fa9a,
	  mediumturquoise: 0x48d1cc,
	  mediumvioletred: 0xc71585,
	  midnightblue: 0x191970,
	  mintcream: 0xf5fffa,
	  mistyrose: 0xffe4e1,
	  moccasin: 0xffe4b5,
	  navajowhite: 0xffdead,
	  navy: 0x000080,
	  oldlace: 0xfdf5e6,
	  olive: 0x808000,
	  olivedrab: 0x6b8e23,
	  orange: 0xffa500,
	  orangered: 0xff4500,
	  orchid: 0xda70d6,
	  palegoldenrod: 0xeee8aa,
	  palegreen: 0x98fb98,
	  paleturquoise: 0xafeeee,
	  palevioletred: 0xdb7093,
	  papayawhip: 0xffefd5,
	  peachpuff: 0xffdab9,
	  peru: 0xcd853f,
	  pink: 0xffc0cb,
	  plum: 0xdda0dd,
	  powderblue: 0xb0e0e6,
	  purple: 0x800080,
	  rebeccapurple: 0x663399,
	  red: 0xff0000,
	  rosybrown: 0xbc8f8f,
	  royalblue: 0x4169e1,
	  saddlebrown: 0x8b4513,
	  salmon: 0xfa8072,
	  sandybrown: 0xf4a460,
	  seagreen: 0x2e8b57,
	  seashell: 0xfff5ee,
	  sienna: 0xa0522d,
	  silver: 0xc0c0c0,
	  skyblue: 0x87ceeb,
	  slateblue: 0x6a5acd,
	  slategray: 0x708090,
	  slategrey: 0x708090,
	  snow: 0xfffafa,
	  springgreen: 0x00ff7f,
	  steelblue: 0x4682b4,
	  tan: 0xd2b48c,
	  teal: 0x008080,
	  thistle: 0xd8bfd8,
	  tomato: 0xff6347,
	  turquoise: 0x40e0d0,
	  violet: 0xee82ee,
	  wheat: 0xf5deb3,
	  white: 0xffffff,
	  whitesmoke: 0xf5f5f5,
	  yellow: 0xffff00,
	  yellowgreen: 0x9acd32
	};
	define$1(Color, color, {
	  copy: function copy(channels) {
	    return Object.assign(new this.constructor(), this, channels);
	  },
	  displayable: function displayable() {
	    return this.rgb().displayable();
	  },
	  hex: color_formatHex,
	  // Deprecated! Use color.formatHex.
	  formatHex: color_formatHex,
	  formatHsl: color_formatHsl,
	  formatRgb: color_formatRgb,
	  toString: color_formatRgb
	});

	function color_formatHex() {
	  return this.rgb().formatHex();
	}

	function color_formatHsl() {
	  return hslConvert(this).formatHsl();
	}

	function color_formatRgb() {
	  return this.rgb().formatRgb();
	}

	function color(format) {
	  var m, l;
	  format = (format + "").trim().toLowerCase();
	  return (m = reHex.exec(format)) ? (l = m[1].length, m = parseInt(m[1], 16), l === 6 ? rgbn(m) // #ff0000
	  : l === 3 ? new Rgb(m >> 8 & 0xf | m >> 4 & 0xf0, m >> 4 & 0xf | m & 0xf0, (m & 0xf) << 4 | m & 0xf, 1) // #f00
	  : l === 8 ? rgba(m >> 24 & 0xff, m >> 16 & 0xff, m >> 8 & 0xff, (m & 0xff) / 0xff) // #ff000000
	  : l === 4 ? rgba(m >> 12 & 0xf | m >> 8 & 0xf0, m >> 8 & 0xf | m >> 4 & 0xf0, m >> 4 & 0xf | m & 0xf0, ((m & 0xf) << 4 | m & 0xf) / 0xff) // #f000
	  : null // invalid hex
	  ) : (m = reRgbInteger.exec(format)) ? new Rgb(m[1], m[2], m[3], 1) // rgb(255, 0, 0)
	  : (m = reRgbPercent.exec(format)) ? new Rgb(m[1] * 255 / 100, m[2] * 255 / 100, m[3] * 255 / 100, 1) // rgb(100%, 0%, 0%)
	  : (m = reRgbaInteger.exec(format)) ? rgba(m[1], m[2], m[3], m[4]) // rgba(255, 0, 0, 1)
	  : (m = reRgbaPercent.exec(format)) ? rgba(m[1] * 255 / 100, m[2] * 255 / 100, m[3] * 255 / 100, m[4]) // rgb(100%, 0%, 0%, 1)
	  : (m = reHslPercent.exec(format)) ? hsla(m[1], m[2] / 100, m[3] / 100, 1) // hsl(120, 50%, 50%)
	  : (m = reHslaPercent.exec(format)) ? hsla(m[1], m[2] / 100, m[3] / 100, m[4]) // hsla(120, 50%, 50%, 1)
	  : named.hasOwnProperty(format) ? rgbn(named[format]) // eslint-disable-line no-prototype-builtins
	  : format === "transparent" ? new Rgb(NaN, NaN, NaN, 0) : null;
	}

	function rgbn(n) {
	  return new Rgb(n >> 16 & 0xff, n >> 8 & 0xff, n & 0xff, 1);
	}

	function rgba(r, g, b, a) {
	  if (a <= 0) r = g = b = NaN;
	  return new Rgb(r, g, b, a);
	}

	function rgbConvert(o) {
	  if (!(o instanceof Color)) o = color(o);
	  if (!o) return new Rgb();
	  o = o.rgb();
	  return new Rgb(o.r, o.g, o.b, o.opacity);
	}
	function rgb(r, g, b, opacity) {
	  return arguments.length === 1 ? rgbConvert(r) : new Rgb(r, g, b, opacity == null ? 1 : opacity);
	}
	function Rgb(r, g, b, opacity) {
	  this.r = +r;
	  this.g = +g;
	  this.b = +b;
	  this.opacity = +opacity;
	}
	define$1(Rgb, rgb, extend(Color, {
	  brighter: function brighter(k) {
	    k = k == null ? _brighter : Math.pow(_brighter, k);
	    return new Rgb(this.r * k, this.g * k, this.b * k, this.opacity);
	  },
	  darker: function darker(k) {
	    k = k == null ? _darker : Math.pow(_darker, k);
	    return new Rgb(this.r * k, this.g * k, this.b * k, this.opacity);
	  },
	  rgb: function rgb() {
	    return this;
	  },
	  displayable: function displayable() {
	    return -0.5 <= this.r && this.r < 255.5 && -0.5 <= this.g && this.g < 255.5 && -0.5 <= this.b && this.b < 255.5 && 0 <= this.opacity && this.opacity <= 1;
	  },
	  hex: rgb_formatHex,
	  // Deprecated! Use color.formatHex.
	  formatHex: rgb_formatHex,
	  formatRgb: rgb_formatRgb,
	  toString: rgb_formatRgb
	}));

	function rgb_formatHex() {
	  return "#" + hex(this.r) + hex(this.g) + hex(this.b);
	}

	function rgb_formatRgb() {
	  var a = this.opacity;
	  a = isNaN(a) ? 1 : Math.max(0, Math.min(1, a));
	  return (a === 1 ? "rgb(" : "rgba(") + Math.max(0, Math.min(255, Math.round(this.r) || 0)) + ", " + Math.max(0, Math.min(255, Math.round(this.g) || 0)) + ", " + Math.max(0, Math.min(255, Math.round(this.b) || 0)) + (a === 1 ? ")" : ", " + a + ")");
	}

	function hex(value) {
	  value = Math.max(0, Math.min(255, Math.round(value) || 0));
	  return (value < 16 ? "0" : "") + value.toString(16);
	}

	function hsla(h, s, l, a) {
	  if (a <= 0) h = s = l = NaN;else if (l <= 0 || l >= 1) h = s = NaN;else if (s <= 0) h = NaN;
	  return new Hsl(h, s, l, a);
	}

	function hslConvert(o) {
	  if (o instanceof Hsl) return new Hsl(o.h, o.s, o.l, o.opacity);
	  if (!(o instanceof Color)) o = color(o);
	  if (!o) return new Hsl();
	  if (o instanceof Hsl) return o;
	  o = o.rgb();
	  var r = o.r / 255,
	      g = o.g / 255,
	      b = o.b / 255,
	      min = Math.min(r, g, b),
	      max = Math.max(r, g, b),
	      h = NaN,
	      s = max - min,
	      l = (max + min) / 2;

	  if (s) {
	    if (r === max) h = (g - b) / s + (g < b) * 6;else if (g === max) h = (b - r) / s + 2;else h = (r - g) / s + 4;
	    s /= l < 0.5 ? max + min : 2 - max - min;
	    h *= 60;
	  } else {
	    s = l > 0 && l < 1 ? 0 : h;
	  }

	  return new Hsl(h, s, l, o.opacity);
	}
	function hsl(h, s, l, opacity) {
	  return arguments.length === 1 ? hslConvert(h) : new Hsl(h, s, l, opacity == null ? 1 : opacity);
	}

	function Hsl(h, s, l, opacity) {
	  this.h = +h;
	  this.s = +s;
	  this.l = +l;
	  this.opacity = +opacity;
	}

	define$1(Hsl, hsl, extend(Color, {
	  brighter: function brighter(k) {
	    k = k == null ? _brighter : Math.pow(_brighter, k);
	    return new Hsl(this.h, this.s, this.l * k, this.opacity);
	  },
	  darker: function darker(k) {
	    k = k == null ? _darker : Math.pow(_darker, k);
	    return new Hsl(this.h, this.s, this.l * k, this.opacity);
	  },
	  rgb: function rgb() {
	    var h = this.h % 360 + (this.h < 0) * 360,
	        s = isNaN(h) || isNaN(this.s) ? 0 : this.s,
	        l = this.l,
	        m2 = l + (l < 0.5 ? l : 1 - l) * s,
	        m1 = 2 * l - m2;
	    return new Rgb(hsl2rgb(h >= 240 ? h - 240 : h + 120, m1, m2), hsl2rgb(h, m1, m2), hsl2rgb(h < 120 ? h + 240 : h - 120, m1, m2), this.opacity);
	  },
	  displayable: function displayable() {
	    return (0 <= this.s && this.s <= 1 || isNaN(this.s)) && 0 <= this.l && this.l <= 1 && 0 <= this.opacity && this.opacity <= 1;
	  },
	  formatHsl: function formatHsl() {
	    var a = this.opacity;
	    a = isNaN(a) ? 1 : Math.max(0, Math.min(1, a));
	    return (a === 1 ? "hsl(" : "hsla(") + (this.h || 0) + ", " + (this.s || 0) * 100 + "%, " + (this.l || 0) * 100 + "%" + (a === 1 ? ")" : ", " + a + ")");
	  }
	}));
	/* From FvD 13.37, CSS Color Module Level 3 */

	function hsl2rgb(h, m1, m2) {
	  return (h < 60 ? m1 + (m2 - m1) * h / 60 : h < 180 ? m2 : h < 240 ? m1 + (m2 - m1) * (240 - h) / 60 : m1) * 255;
	}

	var constant$2 = (function (x) {
	  return function () {
	    return x;
	  };
	});

	function linear$2(a, d) {
	  return function (t) {
	    return a + t * d;
	  };
	}

	function exponential(a, b, y) {
	  return a = Math.pow(a, y), b = Math.pow(b, y) - a, y = 1 / y, function (t) {
	    return Math.pow(a + t * b, y);
	  };
	}
	function gamma(y) {
	  return (y = +y) === 1 ? nogamma : function (a, b) {
	    return b - a ? exponential(a, b, y) : constant$2(isNaN(a) ? b : a);
	  };
	}
	function nogamma(a, b) {
	  var d = b - a;
	  return d ? linear$2(a, d) : constant$2(isNaN(a) ? b : a);
	}

	var interpolateRgb = (function rgbGamma(y) {
	  var color = gamma(y);

	  function rgb$1(start, end) {
	    var r = color((start = rgb(start)).r, (end = rgb(end)).r),
	        g = color(start.g, end.g),
	        b = color(start.b, end.b),
	        opacity = nogamma(start.opacity, end.opacity);
	    return function (t) {
	      start.r = r(t);
	      start.g = g(t);
	      start.b = b(t);
	      start.opacity = opacity(t);
	      return start + "";
	    };
	  }

	  rgb$1.gamma = rgbGamma;
	  return rgb$1;
	})(1);

	function numberArray (a, b) {
	  if (!b) b = [];
	  var n = a ? Math.min(b.length, a.length) : 0,
	      c = b.slice(),
	      i;
	  return function (t) {
	    for (i = 0; i < n; ++i) {
	      c[i] = a[i] * (1 - t) + b[i] * t;
	    }

	    return c;
	  };
	}
	function isNumberArray(x) {
	  return ArrayBuffer.isView(x) && !(x instanceof DataView);
	}

	function genericArray(a, b) {
	  var nb = b ? b.length : 0,
	      na = a ? Math.min(nb, a.length) : 0,
	      x = new Array(na),
	      c = new Array(nb),
	      i;

	  for (i = 0; i < na; ++i) {
	    x[i] = interpolate$1(a[i], b[i]);
	  }

	  for (; i < nb; ++i) {
	    c[i] = b[i];
	  }

	  return function (t) {
	    for (i = 0; i < na; ++i) {
	      c[i] = x[i](t);
	    }

	    return c;
	  };
	}

	function date (a, b) {
	  var d = new Date();
	  return a = +a, b = +b, function (t) {
	    return d.setTime(a * (1 - t) + b * t), d;
	  };
	}

	function interpolateNumber (a, b) {
	  return a = +a, b = +b, function (t) {
	    return a * (1 - t) + b * t;
	  };
	}

	function object (a, b) {
	  var i = {},
	      c = {},
	      k;
	  if (a === null || _typeof(a) !== "object") a = {};
	  if (b === null || _typeof(b) !== "object") b = {};

	  for (k in b) {
	    if (k in a) {
	      i[k] = interpolate$1(a[k], b[k]);
	    } else {
	      c[k] = b[k];
	    }
	  }

	  return function (t) {
	    for (k in i) {
	      c[k] = i[k](t);
	    }

	    return c;
	  };
	}

	var reA = /[-+]?(?:\d+\.?\d*|\.?\d+)(?:[eE][-+]?\d+)?/g,
	    reB = new RegExp(reA.source, "g");

	function zero(b) {
	  return function () {
	    return b;
	  };
	}

	function one(b) {
	  return function (t) {
	    return b(t) + "";
	  };
	}

	function interpolateString (a, b) {
	  var bi = reA.lastIndex = reB.lastIndex = 0,
	      // scan index for next number in b
	  am,
	      // current match in a
	  bm,
	      // current match in b
	  bs,
	      // string preceding current number in b, if any
	  i = -1,
	      // index in s
	  s = [],
	      // string constants and placeholders
	  q = []; // number interpolators
	  // Coerce inputs to strings.

	  a = a + "", b = b + ""; // Interpolate pairs of numbers in a & b.

	  while ((am = reA.exec(a)) && (bm = reB.exec(b))) {
	    if ((bs = bm.index) > bi) {
	      // a string precedes the next number in b
	      bs = b.slice(bi, bs);
	      if (s[i]) s[i] += bs; // coalesce with previous string
	      else s[++i] = bs;
	    }

	    if ((am = am[0]) === (bm = bm[0])) {
	      // numbers in a & b match
	      if (s[i]) s[i] += bm; // coalesce with previous string
	      else s[++i] = bm;
	    } else {
	      // interpolate non-matching numbers
	      s[++i] = null;
	      q.push({
	        i: i,
	        x: interpolateNumber(am, bm)
	      });
	    }

	    bi = reB.lastIndex;
	  } // Add remains of b.


	  if (bi < b.length) {
	    bs = b.slice(bi);
	    if (s[i]) s[i] += bs; // coalesce with previous string
	    else s[++i] = bs;
	  } // Special optimization for only a single match.
	  // Otherwise, interpolate each of the numbers and rejoin the string.


	  return s.length < 2 ? q[0] ? one(q[0].x) : zero(b) : (b = q.length, function (t) {
	    for (var i = 0, o; i < b; ++i) {
	      s[(o = q[i]).i] = o.x(t);
	    }

	    return s.join("");
	  });
	}

	function interpolate$1 (a, b) {
	  var t = _typeof(b),
	      c;

	  return b == null || t === "boolean" ? constant$2(b) : (t === "number" ? interpolateNumber : t === "string" ? (c = color(b)) ? (b = c, interpolateRgb) : interpolateString : b instanceof color ? interpolateRgb : b instanceof Date ? date : isNumberArray(b) ? numberArray : Array.isArray(b) ? genericArray : typeof b.valueOf !== "function" && typeof b.toString !== "function" || isNaN(b) ? object : interpolateNumber)(a, b);
	}

	function interpolateRound (a, b) {
	  return a = +a, b = +b, function (t) {
	    return Math.round(a * (1 - t) + b * t);
	  };
	}

	var degrees$1 = 180 / Math.PI;
	var identity$5 = {
	  translateX: 0,
	  translateY: 0,
	  rotate: 0,
	  skewX: 0,
	  scaleX: 1,
	  scaleY: 1
	};
	function decompose (a, b, c, d, e, f) {
	  var scaleX, scaleY, skewX;
	  if (scaleX = Math.sqrt(a * a + b * b)) a /= scaleX, b /= scaleX;
	  if (skewX = a * c + b * d) c -= a * skewX, d -= b * skewX;
	  if (scaleY = Math.sqrt(c * c + d * d)) c /= scaleY, d /= scaleY, skewX /= scaleY;
	  if (a * d < b * c) a = -a, b = -b, skewX = -skewX, scaleX = -scaleX;
	  return {
	    translateX: e,
	    translateY: f,
	    rotate: Math.atan2(b, a) * degrees$1,
	    skewX: Math.atan(skewX) * degrees$1,
	    scaleX: scaleX,
	    scaleY: scaleY
	  };
	}

	var svgNode;
	/* eslint-disable no-undef */

	function parseCss(value) {
	  var m = new (typeof DOMMatrix === "function" ? DOMMatrix : WebKitCSSMatrix)(value + "");
	  return m.isIdentity ? identity$5 : decompose(m.a, m.b, m.c, m.d, m.e, m.f);
	}
	function parseSvg(value) {
	  if (value == null) return identity$5;
	  if (!svgNode) svgNode = document.createElementNS("http://www.w3.org/2000/svg", "g");
	  svgNode.setAttribute("transform", value);
	  if (!(value = svgNode.transform.baseVal.consolidate())) return identity$5;
	  value = value.matrix;
	  return decompose(value.a, value.b, value.c, value.d, value.e, value.f);
	}

	function interpolateTransform(parse, pxComma, pxParen, degParen) {
	  function pop(s) {
	    return s.length ? s.pop() + " " : "";
	  }

	  function translate(xa, ya, xb, yb, s, q) {
	    if (xa !== xb || ya !== yb) {
	      var i = s.push("translate(", null, pxComma, null, pxParen);
	      q.push({
	        i: i - 4,
	        x: interpolateNumber(xa, xb)
	      }, {
	        i: i - 2,
	        x: interpolateNumber(ya, yb)
	      });
	    } else if (xb || yb) {
	      s.push("translate(" + xb + pxComma + yb + pxParen);
	    }
	  }

	  function rotate(a, b, s, q) {
	    if (a !== b) {
	      if (a - b > 180) b += 360;else if (b - a > 180) a += 360; // shortest path

	      q.push({
	        i: s.push(pop(s) + "rotate(", null, degParen) - 2,
	        x: interpolateNumber(a, b)
	      });
	    } else if (b) {
	      s.push(pop(s) + "rotate(" + b + degParen);
	    }
	  }

	  function skewX(a, b, s, q) {
	    if (a !== b) {
	      q.push({
	        i: s.push(pop(s) + "skewX(", null, degParen) - 2,
	        x: interpolateNumber(a, b)
	      });
	    } else if (b) {
	      s.push(pop(s) + "skewX(" + b + degParen);
	    }
	  }

	  function scale(xa, ya, xb, yb, s, q) {
	    if (xa !== xb || ya !== yb) {
	      var i = s.push(pop(s) + "scale(", null, ",", null, ")");
	      q.push({
	        i: i - 4,
	        x: interpolateNumber(xa, xb)
	      }, {
	        i: i - 2,
	        x: interpolateNumber(ya, yb)
	      });
	    } else if (xb !== 1 || yb !== 1) {
	      s.push(pop(s) + "scale(" + xb + "," + yb + ")");
	    }
	  }

	  return function (a, b) {
	    var s = [],
	        // string constants and placeholders
	    q = []; // number interpolators

	    a = parse(a), b = parse(b);
	    translate(a.translateX, a.translateY, b.translateX, b.translateY, s, q);
	    rotate(a.rotate, b.rotate, s, q);
	    skewX(a.skewX, b.skewX, s, q);
	    scale(a.scaleX, a.scaleY, b.scaleX, b.scaleY, s, q);
	    a = b = null; // gc

	    return function (t) {
	      var i = -1,
	          n = q.length,
	          o;

	      while (++i < n) {
	        s[(o = q[i]).i] = o.x(t);
	      }

	      return s.join("");
	    };
	  };
	}

	var interpolateTransformCss = interpolateTransform(parseCss, "px, ", "px)", "deg)");
	var interpolateTransformSvg = interpolateTransform(parseSvg, ", ", ")", ")");

	var frame = 0,
	    // is an animation frame pending?
	timeout$1 = 0,
	    // is a timeout pending?
	interval$1 = 0,
	    // are any timers active?
	pokeDelay = 1000,
	    // how frequently we check for clock skew
	taskHead,
	    taskTail,
	    clockLast = 0,
	    clockNow = 0,
	    clockSkew = 0,
	    clock = (typeof performance === "undefined" ? "undefined" : _typeof(performance)) === "object" && performance.now ? performance : Date,
	    setFrame = (typeof window === "undefined" ? "undefined" : _typeof(window)) === "object" && window.requestAnimationFrame ? window.requestAnimationFrame.bind(window) : function (f) {
	  setTimeout(f, 17);
	};
	function now() {
	  return clockNow || (setFrame(clearNow), clockNow = clock.now() + clockSkew);
	}

	function clearNow() {
	  clockNow = 0;
	}

	function Timer() {
	  this._call = this._time = this._next = null;
	}
	Timer.prototype = timer.prototype = {
	  constructor: Timer,
	  restart: function restart(callback, delay, time) {
	    if (typeof callback !== "function") throw new TypeError("callback is not a function");
	    time = (time == null ? now() : +time) + (delay == null ? 0 : +delay);

	    if (!this._next && taskTail !== this) {
	      if (taskTail) taskTail._next = this;else taskHead = this;
	      taskTail = this;
	    }

	    this._call = callback;
	    this._time = time;
	    sleep();
	  },
	  stop: function stop() {
	    if (this._call) {
	      this._call = null;
	      this._time = Infinity;
	      sleep();
	    }
	  }
	};
	function timer(callback, delay, time) {
	  var t = new Timer();
	  t.restart(callback, delay, time);
	  return t;
	}
	function timerFlush() {
	  now(); // Get the current time, if not already set.

	  ++frame; // Pretend we’ve set an alarm, if we haven’t already.

	  var t = taskHead,
	      e;

	  while (t) {
	    if ((e = clockNow - t._time) >= 0) t._call.call(undefined, e);
	    t = t._next;
	  }

	  --frame;
	}

	function wake() {
	  clockNow = (clockLast = clock.now()) + clockSkew;
	  frame = timeout$1 = 0;

	  try {
	    timerFlush();
	  } finally {
	    frame = 0;
	    nap();
	    clockNow = 0;
	  }
	}

	function poke() {
	  var now = clock.now(),
	      delay = now - clockLast;
	  if (delay > pokeDelay) clockSkew -= delay, clockLast = now;
	}

	function nap() {
	  var t0,
	      t1 = taskHead,
	      t2,
	      time = Infinity;

	  while (t1) {
	    if (t1._call) {
	      if (time > t1._time) time = t1._time;
	      t0 = t1, t1 = t1._next;
	    } else {
	      t2 = t1._next, t1._next = null;
	      t1 = t0 ? t0._next = t2 : taskHead = t2;
	    }
	  }

	  taskTail = t0;
	  sleep(time);
	}

	function sleep(time) {
	  if (frame) return; // Soonest alarm already set, or will be.

	  if (timeout$1) timeout$1 = clearTimeout(timeout$1);
	  var delay = time - clockNow; // Strictly less than if we recomputed clockNow.

	  if (delay > 24) {
	    if (time < Infinity) timeout$1 = setTimeout(wake, time - clock.now() - clockSkew);
	    if (interval$1) interval$1 = clearInterval(interval$1);
	  } else {
	    if (!interval$1) clockLast = clock.now(), interval$1 = setInterval(poke, pokeDelay);
	    frame = 1, setFrame(wake);
	  }
	}

	function timeout (callback, delay, time) {
	  var t = new Timer();
	  delay = delay == null ? 0 : +delay;
	  t.restart(function (elapsed) {
	    t.stop();
	    callback(elapsed + delay);
	  }, delay, time);
	  return t;
	}

	function interval (callback, delay, time) {
	  var t = new Timer(),
	      total = delay;
	  if (delay == null) return t.restart(callback, delay, time), t;
	  t._restart = t.restart;

	  t.restart = function (callback, delay, time) {
	    delay = +delay, time = time == null ? now() : +time;

	    t._restart(function tick(elapsed) {
	      elapsed += total;

	      t._restart(tick, total += delay, time);

	      callback(elapsed);
	    }, delay, time);
	  };

	  t.restart(callback, delay, time);
	  return t;
	}

	var emptyOn = dispatch("start", "end", "cancel", "interrupt");
	var emptyTween = [];
	var CREATED = 0;
	var SCHEDULED = 1;
	var STARTING = 2;
	var STARTED = 3;
	var RUNNING = 4;
	var ENDING = 5;
	var ENDED = 6;
	function schedule (node, name, id, index, group, timing) {
	  var schedules = node.__transition;
	  if (!schedules) node.__transition = {};else if (id in schedules) return;
	  create(node, id, {
	    name: name,
	    index: index,
	    // For context during callback.
	    group: group,
	    // For context during callback.
	    on: emptyOn,
	    tween: emptyTween,
	    time: timing.time,
	    delay: timing.delay,
	    duration: timing.duration,
	    ease: timing.ease,
	    timer: null,
	    state: CREATED
	  });
	}
	function init(node, id) {
	  var schedule = get(node, id);
	  if (schedule.state > CREATED) throw new Error("too late; already scheduled");
	  return schedule;
	}
	function set(node, id) {
	  var schedule = get(node, id);
	  if (schedule.state > STARTED) throw new Error("too late; already running");
	  return schedule;
	}
	function get(node, id) {
	  var schedule = node.__transition;
	  if (!schedule || !(schedule = schedule[id])) throw new Error("transition not found");
	  return schedule;
	}

	function create(node, id, self) {
	  var schedules = node.__transition,
	      tween; // Initialize the self timer when the transition is created.
	  // Note the actual delay is not known until the first callback!

	  schedules[id] = self;
	  self.timer = timer(schedule, 0, self.time);

	  function schedule(elapsed) {
	    self.state = SCHEDULED;
	    self.timer.restart(start, self.delay, self.time); // If the elapsed delay is less than our first sleep, start immediately.

	    if (self.delay <= elapsed) start(elapsed - self.delay);
	  }

	  function start(elapsed) {
	    var i, j, n, o; // If the state is not SCHEDULED, then we previously errored on start.

	    if (self.state !== SCHEDULED) return stop();

	    for (i in schedules) {
	      o = schedules[i];
	      if (o.name !== self.name) continue; // While this element already has a starting transition during this frame,
	      // defer starting an interrupting transition until that transition has a
	      // chance to tick (and possibly end); see d3/d3-transition#54!

	      if (o.state === STARTED) return timeout(start); // Interrupt the active transition, if any.

	      if (o.state === RUNNING) {
	        o.state = ENDED;
	        o.timer.stop();
	        o.on.call("interrupt", node, node.__data__, o.index, o.group);
	        delete schedules[i];
	      } // Cancel any pre-empted transitions.
	      else if (+i < id) {
	        o.state = ENDED;
	        o.timer.stop();
	        o.on.call("cancel", node, node.__data__, o.index, o.group);
	        delete schedules[i];
	      }
	    } // Defer the first tick to end of the current frame; see d3/d3#1576.
	    // Note the transition may be canceled after start and before the first tick!
	    // Note this must be scheduled before the start event; see d3/d3-transition#16!
	    // Assuming this is successful, subsequent callbacks go straight to tick.


	    timeout(function () {
	      if (self.state === STARTED) {
	        self.state = RUNNING;
	        self.timer.restart(tick, self.delay, self.time);
	        tick(elapsed);
	      }
	    }); // Dispatch the start event.
	    // Note this must be done before the tween are initialized.

	    self.state = STARTING;
	    self.on.call("start", node, node.__data__, self.index, self.group);
	    if (self.state !== STARTING) return; // interrupted

	    self.state = STARTED; // Initialize the tween, deleting null tween.

	    tween = new Array(n = self.tween.length);

	    for (i = 0, j = -1; i < n; ++i) {
	      if (o = self.tween[i].value.call(node, node.__data__, self.index, self.group)) {
	        tween[++j] = o;
	      }
	    }

	    tween.length = j + 1;
	  }

	  function tick(elapsed) {
	    var t = elapsed < self.duration ? self.ease.call(null, elapsed / self.duration) : (self.timer.restart(stop), self.state = ENDING, 1),
	        i = -1,
	        n = tween.length;

	    while (++i < n) {
	      tween[i].call(node, t);
	    } // Dispatch the end event.


	    if (self.state === ENDING) {
	      self.on.call("end", node, node.__data__, self.index, self.group);
	      stop();
	    }
	  }

	  function stop() {
	    self.state = ENDED;
	    self.timer.stop();
	    delete schedules[id];

	    for (var i in schedules) {
	      return;
	    } // eslint-disable-line no-unused-vars


	    delete node.__transition;
	  }
	}

	function interrupt (node, name) {
	  var schedules = node.__transition,
	      schedule,
	      active,
	      empty = true,
	      i;
	  if (!schedules) return;
	  name = name == null ? null : name + "";

	  for (i in schedules) {
	    if ((schedule = schedules[i]).name !== name) {
	      empty = false;
	      continue;
	    }

	    active = schedule.state > STARTING && schedule.state < ENDING;
	    schedule.state = ENDED;
	    schedule.timer.stop();
	    schedule.on.call(active ? "interrupt" : "cancel", node, node.__data__, schedule.index, schedule.group);
	    delete schedules[i];
	  }

	  if (empty) delete node.__transition;
	}

	function selection_interrupt (name) {
	  return this.each(function () {
	    interrupt(this, name);
	  });
	}

	function tweenRemove(id, name) {
	  var tween0, tween1;
	  return function () {
	    var schedule = set(this, id),
	        tween = schedule.tween; // If this node shared tween with the previous node,
	    // just assign the updated shared tween and we’re done!
	    // Otherwise, copy-on-write.

	    if (tween !== tween0) {
	      tween1 = tween0 = tween;

	      for (var i = 0, n = tween1.length; i < n; ++i) {
	        if (tween1[i].name === name) {
	          tween1 = tween1.slice();
	          tween1.splice(i, 1);
	          break;
	        }
	      }
	    }

	    schedule.tween = tween1;
	  };
	}

	function tweenFunction(id, name, value) {
	  var tween0, tween1;
	  if (typeof value !== "function") throw new Error();
	  return function () {
	    var schedule = set(this, id),
	        tween = schedule.tween; // If this node shared tween with the previous node,
	    // just assign the updated shared tween and we’re done!
	    // Otherwise, copy-on-write.

	    if (tween !== tween0) {
	      tween1 = (tween0 = tween).slice();

	      for (var t = {
	        name: name,
	        value: value
	      }, i = 0, n = tween1.length; i < n; ++i) {
	        if (tween1[i].name === name) {
	          tween1[i] = t;
	          break;
	        }
	      }

	      if (i === n) tween1.push(t);
	    }

	    schedule.tween = tween1;
	  };
	}

	function transition_tween (name, value) {
	  var id = this._id;
	  name += "";

	  if (arguments.length < 2) {
	    var tween = get(this.node(), id).tween;

	    for (var i = 0, n = tween.length, t; i < n; ++i) {
	      if ((t = tween[i]).name === name) {
	        return t.value;
	      }
	    }

	    return null;
	  }

	  return this.each((value == null ? tweenRemove : tweenFunction)(id, name, value));
	}
	function tweenValue(transition, name, value) {
	  var id = transition._id;
	  transition.each(function () {
	    var schedule = set(this, id);
	    (schedule.value || (schedule.value = {}))[name] = value.apply(this, arguments);
	  });
	  return function (node) {
	    return get(node, id).value[name];
	  };
	}

	function interpolate (a, b) {
	  var c;
	  return (typeof b === "number" ? interpolateNumber : b instanceof color ? interpolateRgb : (c = color(b)) ? (b = c, interpolateRgb) : interpolateString)(a, b);
	}

	function attrRemove(name) {
	  return function () {
	    this.removeAttribute(name);
	  };
	}

	function attrRemoveNS(fullname) {
	  return function () {
	    this.removeAttributeNS(fullname.space, fullname.local);
	  };
	}

	function attrConstant(name, interpolate, value1) {
	  var string00,
	      string1 = value1 + "",
	      interpolate0;
	  return function () {
	    var string0 = this.getAttribute(name);
	    return string0 === string1 ? null : string0 === string00 ? interpolate0 : interpolate0 = interpolate(string00 = string0, value1);
	  };
	}

	function attrConstantNS(fullname, interpolate, value1) {
	  var string00,
	      string1 = value1 + "",
	      interpolate0;
	  return function () {
	    var string0 = this.getAttributeNS(fullname.space, fullname.local);
	    return string0 === string1 ? null : string0 === string00 ? interpolate0 : interpolate0 = interpolate(string00 = string0, value1);
	  };
	}

	function attrFunction(name, interpolate, value) {
	  var string00, string10, interpolate0;
	  return function () {
	    var string0,
	        value1 = value(this),
	        string1;
	    if (value1 == null) return void this.removeAttribute(name);
	    string0 = this.getAttribute(name);
	    string1 = value1 + "";
	    return string0 === string1 ? null : string0 === string00 && string1 === string10 ? interpolate0 : (string10 = string1, interpolate0 = interpolate(string00 = string0, value1));
	  };
	}

	function attrFunctionNS(fullname, interpolate, value) {
	  var string00, string10, interpolate0;
	  return function () {
	    var string0,
	        value1 = value(this),
	        string1;
	    if (value1 == null) return void this.removeAttributeNS(fullname.space, fullname.local);
	    string0 = this.getAttributeNS(fullname.space, fullname.local);
	    string1 = value1 + "";
	    return string0 === string1 ? null : string0 === string00 && string1 === string10 ? interpolate0 : (string10 = string1, interpolate0 = interpolate(string00 = string0, value1));
	  };
	}

	function transition_attr (name, value) {
	  var fullname = namespace(name),
	      i = fullname === "transform" ? interpolateTransformSvg : interpolate;
	  return this.attrTween(name, typeof value === "function" ? (fullname.local ? attrFunctionNS : attrFunction)(fullname, i, tweenValue(this, "attr." + name, value)) : value == null ? (fullname.local ? attrRemoveNS : attrRemove)(fullname) : (fullname.local ? attrConstantNS : attrConstant)(fullname, i, value));
	}

	function attrInterpolate(name, i) {
	  return function (t) {
	    this.setAttribute(name, i.call(this, t));
	  };
	}

	function attrInterpolateNS(fullname, i) {
	  return function (t) {
	    this.setAttributeNS(fullname.space, fullname.local, i.call(this, t));
	  };
	}

	function attrTweenNS(fullname, value) {
	  var t0, i0;

	  function tween() {
	    var i = value.apply(this, arguments);
	    if (i !== i0) t0 = (i0 = i) && attrInterpolateNS(fullname, i);
	    return t0;
	  }

	  tween._value = value;
	  return tween;
	}

	function attrTween(name, value) {
	  var t0, i0;

	  function tween() {
	    var i = value.apply(this, arguments);
	    if (i !== i0) t0 = (i0 = i) && attrInterpolate(name, i);
	    return t0;
	  }

	  tween._value = value;
	  return tween;
	}

	function transition_attrTween (name, value) {
	  var key = "attr." + name;
	  if (arguments.length < 2) return (key = this.tween(key)) && key._value;
	  if (value == null) return this.tween(key, null);
	  if (typeof value !== "function") throw new Error();
	  var fullname = namespace(name);
	  return this.tween(key, (fullname.local ? attrTweenNS : attrTween)(fullname, value));
	}

	function delayFunction(id, value) {
	  return function () {
	    init(this, id).delay = +value.apply(this, arguments);
	  };
	}

	function delayConstant(id, value) {
	  return value = +value, function () {
	    init(this, id).delay = value;
	  };
	}

	function transition_delay (value) {
	  var id = this._id;
	  return arguments.length ? this.each((typeof value === "function" ? delayFunction : delayConstant)(id, value)) : get(this.node(), id).delay;
	}

	function durationFunction(id, value) {
	  return function () {
	    set(this, id).duration = +value.apply(this, arguments);
	  };
	}

	function durationConstant(id, value) {
	  return value = +value, function () {
	    set(this, id).duration = value;
	  };
	}

	function transition_duration (value) {
	  var id = this._id;
	  return arguments.length ? this.each((typeof value === "function" ? durationFunction : durationConstant)(id, value)) : get(this.node(), id).duration;
	}

	function easeConstant(id, value) {
	  if (typeof value !== "function") throw new Error();
	  return function () {
	    set(this, id).ease = value;
	  };
	}

	function transition_ease (value) {
	  var id = this._id;
	  return arguments.length ? this.each(easeConstant(id, value)) : get(this.node(), id).ease;
	}

	function easeVarying(id, value) {
	  return function () {
	    var v = value.apply(this, arguments);
	    if (typeof v !== "function") throw new Error();
	    set(this, id).ease = v;
	  };
	}

	function transition_easeVarying (value) {
	  if (typeof value !== "function") throw new Error();
	  return this.each(easeVarying(this._id, value));
	}

	function transition_filter (match) {
	  if (typeof match !== "function") match = matcher(match);

	  for (var groups = this._groups, m = groups.length, subgroups = new Array(m), j = 0; j < m; ++j) {
	    for (var group = groups[j], n = group.length, subgroup = subgroups[j] = [], node, i = 0; i < n; ++i) {
	      if ((node = group[i]) && match.call(node, node.__data__, i, group)) {
	        subgroup.push(node);
	      }
	    }
	  }

	  return new Transition(subgroups, this._parents, this._name, this._id);
	}

	function transition_merge (transition) {
	  if (transition._id !== this._id) throw new Error();

	  for (var groups0 = this._groups, groups1 = transition._groups, m0 = groups0.length, m1 = groups1.length, m = Math.min(m0, m1), merges = new Array(m0), j = 0; j < m; ++j) {
	    for (var group0 = groups0[j], group1 = groups1[j], n = group0.length, merge = merges[j] = new Array(n), node, i = 0; i < n; ++i) {
	      if (node = group0[i] || group1[i]) {
	        merge[i] = node;
	      }
	    }
	  }

	  for (; j < m0; ++j) {
	    merges[j] = groups0[j];
	  }

	  return new Transition(merges, this._parents, this._name, this._id);
	}

	function start(name) {
	  return (name + "").trim().split(/^|\s+/).every(function (t) {
	    var i = t.indexOf(".");
	    if (i >= 0) t = t.slice(0, i);
	    return !t || t === "start";
	  });
	}

	function onFunction(id, name, listener) {
	  var on0,
	      on1,
	      sit = start(name) ? init : set;
	  return function () {
	    var schedule = sit(this, id),
	        on = schedule.on; // If this node shared a dispatch with the previous node,
	    // just assign the updated shared dispatch and we’re done!
	    // Otherwise, copy-on-write.

	    if (on !== on0) (on1 = (on0 = on).copy()).on(name, listener);
	    schedule.on = on1;
	  };
	}

	function transition_on (name, listener) {
	  var id = this._id;
	  return arguments.length < 2 ? get(this.node(), id).on.on(name) : this.each(onFunction(id, name, listener));
	}

	function removeFunction(id) {
	  return function () {
	    var parent = this.parentNode;

	    for (var i in this.__transition) {
	      if (+i !== id) return;
	    }

	    if (parent) parent.removeChild(this);
	  };
	}

	function transition_remove () {
	  return this.on("end.remove", removeFunction(this._id));
	}

	function transition_select (select) {
	  var name = this._name,
	      id = this._id;
	  if (typeof select !== "function") select = selector(select);

	  for (var groups = this._groups, m = groups.length, subgroups = new Array(m), j = 0; j < m; ++j) {
	    for (var group = groups[j], n = group.length, subgroup = subgroups[j] = new Array(n), node, subnode, i = 0; i < n; ++i) {
	      if ((node = group[i]) && (subnode = select.call(node, node.__data__, i, group))) {
	        if ("__data__" in node) subnode.__data__ = node.__data__;
	        subgroup[i] = subnode;
	        schedule(subgroup[i], name, id, i, subgroup, get(node, id));
	      }
	    }
	  }

	  return new Transition(subgroups, this._parents, name, id);
	}

	function transition_selectAll (select) {
	  var name = this._name,
	      id = this._id;
	  if (typeof select !== "function") select = selectorAll(select);

	  for (var groups = this._groups, m = groups.length, subgroups = [], parents = [], j = 0; j < m; ++j) {
	    for (var group = groups[j], n = group.length, node, i = 0; i < n; ++i) {
	      if (node = group[i]) {
	        for (var children = select.call(node, node.__data__, i, group), child, inherit = get(node, id), k = 0, l = children.length; k < l; ++k) {
	          if (child = children[k]) {
	            schedule(child, name, id, k, children, inherit);
	          }
	        }

	        subgroups.push(children);
	        parents.push(node);
	      }
	    }
	  }

	  return new Transition(subgroups, parents, name, id);
	}

	var Selection = selection.prototype.constructor;
	function transition_selection () {
	  return new Selection(this._groups, this._parents);
	}

	function styleNull(name, interpolate) {
	  var string00, string10, interpolate0;
	  return function () {
	    var string0 = styleValue(this, name),
	        string1 = (this.style.removeProperty(name), styleValue(this, name));
	    return string0 === string1 ? null : string0 === string00 && string1 === string10 ? interpolate0 : interpolate0 = interpolate(string00 = string0, string10 = string1);
	  };
	}

	function styleRemove(name) {
	  return function () {
	    this.style.removeProperty(name);
	  };
	}

	function styleConstant(name, interpolate, value1) {
	  var string00,
	      string1 = value1 + "",
	      interpolate0;
	  return function () {
	    var string0 = styleValue(this, name);
	    return string0 === string1 ? null : string0 === string00 ? interpolate0 : interpolate0 = interpolate(string00 = string0, value1);
	  };
	}

	function styleFunction(name, interpolate, value) {
	  var string00, string10, interpolate0;
	  return function () {
	    var string0 = styleValue(this, name),
	        value1 = value(this),
	        string1 = value1 + "";
	    if (value1 == null) string1 = value1 = (this.style.removeProperty(name), styleValue(this, name));
	    return string0 === string1 ? null : string0 === string00 && string1 === string10 ? interpolate0 : (string10 = string1, interpolate0 = interpolate(string00 = string0, value1));
	  };
	}

	function styleMaybeRemove(id, name) {
	  var on0,
	      on1,
	      listener0,
	      key = "style." + name,
	      event = "end." + key,
	      remove;
	  return function () {
	    var schedule = set(this, id),
	        on = schedule.on,
	        listener = schedule.value[key] == null ? remove || (remove = styleRemove(name)) : undefined; // If this node shared a dispatch with the previous node,
	    // just assign the updated shared dispatch and we’re done!
	    // Otherwise, copy-on-write.

	    if (on !== on0 || listener0 !== listener) (on1 = (on0 = on).copy()).on(event, listener0 = listener);
	    schedule.on = on1;
	  };
	}

	function transition_style (name, value, priority) {
	  var i = (name += "") === "transform" ? interpolateTransformCss : interpolate;
	  return value == null ? this.styleTween(name, styleNull(name, i)).on("end.style." + name, styleRemove(name)) : typeof value === "function" ? this.styleTween(name, styleFunction(name, i, tweenValue(this, "style." + name, value))).each(styleMaybeRemove(this._id, name)) : this.styleTween(name, styleConstant(name, i, value), priority).on("end.style." + name, null);
	}

	function styleInterpolate(name, i, priority) {
	  return function (t) {
	    this.style.setProperty(name, i.call(this, t), priority);
	  };
	}

	function styleTween(name, value, priority) {
	  var t, i0;

	  function tween() {
	    var i = value.apply(this, arguments);
	    if (i !== i0) t = (i0 = i) && styleInterpolate(name, i, priority);
	    return t;
	  }

	  tween._value = value;
	  return tween;
	}

	function transition_styleTween (name, value, priority) {
	  var key = "style." + (name += "");
	  if (arguments.length < 2) return (key = this.tween(key)) && key._value;
	  if (value == null) return this.tween(key, null);
	  if (typeof value !== "function") throw new Error();
	  return this.tween(key, styleTween(name, value, priority == null ? "" : priority));
	}

	function textConstant(value) {
	  return function () {
	    this.textContent = value;
	  };
	}

	function textFunction(value) {
	  return function () {
	    var value1 = value(this);
	    this.textContent = value1 == null ? "" : value1;
	  };
	}

	function transition_text (value) {
	  return this.tween("text", typeof value === "function" ? textFunction(tweenValue(this, "text", value)) : textConstant(value == null ? "" : value + ""));
	}

	function textInterpolate(i) {
	  return function (t) {
	    this.textContent = i.call(this, t);
	  };
	}

	function textTween(value) {
	  var t0, i0;

	  function tween() {
	    var i = value.apply(this, arguments);
	    if (i !== i0) t0 = (i0 = i) && textInterpolate(i);
	    return t0;
	  }

	  tween._value = value;
	  return tween;
	}

	function transition_textTween (value) {
	  var key = "text";
	  if (arguments.length < 1) return (key = this.tween(key)) && key._value;
	  if (value == null) return this.tween(key, null);
	  if (typeof value !== "function") throw new Error();
	  return this.tween(key, textTween(value));
	}

	function transition_transition () {
	  var name = this._name,
	      id0 = this._id,
	      id1 = newId();

	  for (var groups = this._groups, m = groups.length, j = 0; j < m; ++j) {
	    for (var group = groups[j], n = group.length, node, i = 0; i < n; ++i) {
	      if (node = group[i]) {
	        var inherit = get(node, id0);
	        schedule(node, name, id1, i, group, {
	          time: inherit.time + inherit.delay + inherit.duration,
	          delay: 0,
	          duration: inherit.duration,
	          ease: inherit.ease
	        });
	      }
	    }
	  }

	  return new Transition(groups, this._parents, name, id1);
	}

	function transition_end () {
	  var on0,
	      on1,
	      that = this,
	      id = that._id,
	      size = that.size();
	  return new Promise(function (resolve, reject) {
	    var cancel = {
	      value: reject
	    },
	        end = {
	      value: function value() {
	        if (--size === 0) resolve();
	      }
	    };
	    that.each(function () {
	      var schedule = set(this, id),
	          on = schedule.on; // If this node shared a dispatch with the previous node,
	      // just assign the updated shared dispatch and we’re done!
	      // Otherwise, copy-on-write.

	      if (on !== on0) {
	        on1 = (on0 = on).copy();

	        on1._.cancel.push(cancel);

	        on1._.interrupt.push(cancel);

	        on1._.end.push(end);
	      }

	      schedule.on = on1;
	    }); // The selection was empty, resolve end immediately

	    if (size === 0) resolve();
	  });
	}

	var id = 0;
	function Transition(groups, parents, name, id) {
	  this._groups = groups;
	  this._parents = parents;
	  this._name = name;
	  this._id = id;
	}
	function newId() {
	  return ++id;
	}
	var selection_prototype = selection.prototype;
	Transition.prototype = _defineProperty({
	  constructor: Transition,
	  select: transition_select,
	  selectAll: transition_selectAll,
	  selectChild: selection_prototype.selectChild,
	  selectChildren: selection_prototype.selectChildren,
	  filter: transition_filter,
	  merge: transition_merge,
	  selection: transition_selection,
	  transition: transition_transition,
	  call: selection_prototype.call,
	  nodes: selection_prototype.nodes,
	  node: selection_prototype.node,
	  size: selection_prototype.size,
	  empty: selection_prototype.empty,
	  each: selection_prototype.each,
	  on: transition_on,
	  attr: transition_attr,
	  attrTween: transition_attrTween,
	  style: transition_style,
	  styleTween: transition_styleTween,
	  text: transition_text,
	  textTween: transition_textTween,
	  remove: transition_remove,
	  tween: transition_tween,
	  delay: transition_delay,
	  duration: transition_duration,
	  ease: transition_ease,
	  easeVarying: transition_easeVarying,
	  end: transition_end
	}, Symbol.iterator, selection_prototype[Symbol.iterator]);

	var linear$1 = function linear(t) {
	  return +t;
	};

	function cubicIn(t) {
	  return t * t * t;
	}
	function cubicOut(t) {
	  return --t * t * t + 1;
	}
	function cubicInOut(t) {
	  return ((t *= 2) <= 1 ? t * t * t : (t -= 2) * t * t + 2) / 2;
	}

	var defaultTiming = {
	  time: null,
	  // Set on use.
	  delay: 0,
	  duration: 250,
	  ease: cubicInOut
	};

	function inherit(node, id) {
	  var timing;

	  while (!(timing = node.__transition) || !(timing = timing[id])) {
	    if (!(node = node.parentNode)) {
	      throw new Error("transition ".concat(id, " not found"));
	    }
	  }

	  return timing;
	}

	function selection_transition (name) {
	  var id, timing;

	  if (name instanceof Transition) {
	    id = name._id, name = name._name;
	  } else {
	    id = newId(), (timing = defaultTiming).time = now(), name = name == null ? null : name + "";
	  }

	  for (var groups = this._groups, m = groups.length, j = 0; j < m; ++j) {
	    for (var group = groups[j], n = group.length, node, i = 0; i < n; ++i) {
	      if (node = group[i]) {
	        schedule(node, name, id, i, group, timing || inherit(node, id));
	      }
	    }
	  }

	  return new Transition(groups, this._parents, name, id);
	}

	selection.prototype.interrupt = selection_interrupt;
	selection.prototype.transition = selection_transition;

	var pi$2 = Math.PI,
	    tau$2 = 2 * pi$2,
	    epsilon$2 = 1e-6,
	    tauEpsilon = tau$2 - epsilon$2;

	function Path() {
	  this._x0 = this._y0 = // start of current subpath
	  this._x1 = this._y1 = null; // end of current subpath

	  this._ = "";
	}

	function path() {
	  return new Path();
	}

	Path.prototype = path.prototype = {
	  constructor: Path,
	  moveTo: function moveTo(x, y) {
	    this._ += "M" + (this._x0 = this._x1 = +x) + "," + (this._y0 = this._y1 = +y);
	  },
	  closePath: function closePath() {
	    if (this._x1 !== null) {
	      this._x1 = this._x0, this._y1 = this._y0;
	      this._ += "Z";
	    }
	  },
	  lineTo: function lineTo(x, y) {
	    this._ += "L" + (this._x1 = +x) + "," + (this._y1 = +y);
	  },
	  quadraticCurveTo: function quadraticCurveTo(x1, y1, x, y) {
	    this._ += "Q" + +x1 + "," + +y1 + "," + (this._x1 = +x) + "," + (this._y1 = +y);
	  },
	  bezierCurveTo: function bezierCurveTo(x1, y1, x2, y2, x, y) {
	    this._ += "C" + +x1 + "," + +y1 + "," + +x2 + "," + +y2 + "," + (this._x1 = +x) + "," + (this._y1 = +y);
	  },
	  arcTo: function arcTo(x1, y1, x2, y2, r) {
	    x1 = +x1, y1 = +y1, x2 = +x2, y2 = +y2, r = +r;
	    var x0 = this._x1,
	        y0 = this._y1,
	        x21 = x2 - x1,
	        y21 = y2 - y1,
	        x01 = x0 - x1,
	        y01 = y0 - y1,
	        l01_2 = x01 * x01 + y01 * y01; // Is the radius negative? Error.

	    if (r < 0) throw new Error("negative radius: " + r); // Is this path empty? Move to (x1,y1).

	    if (this._x1 === null) {
	      this._ += "M" + (this._x1 = x1) + "," + (this._y1 = y1);
	    } // Or, is (x1,y1) coincident with (x0,y0)? Do nothing.
	    else if (!(l01_2 > epsilon$2)) ; // Or, are (x0,y0), (x1,y1) and (x2,y2) collinear?
	    // Equivalently, is (x1,y1) coincident with (x2,y2)?
	    // Or, is the radius zero? Line to (x1,y1).
	    else if (!(Math.abs(y01 * x21 - y21 * x01) > epsilon$2) || !r) {
	      this._ += "L" + (this._x1 = x1) + "," + (this._y1 = y1);
	    } // Otherwise, draw an arc!
	    else {
	      var x20 = x2 - x0,
	          y20 = y2 - y0,
	          l21_2 = x21 * x21 + y21 * y21,
	          l20_2 = x20 * x20 + y20 * y20,
	          l21 = Math.sqrt(l21_2),
	          l01 = Math.sqrt(l01_2),
	          l = r * Math.tan((pi$2 - Math.acos((l21_2 + l01_2 - l20_2) / (2 * l21 * l01))) / 2),
	          t01 = l / l01,
	          t21 = l / l21; // If the start tangent is not coincident with (x0,y0), line to.

	      if (Math.abs(t01 - 1) > epsilon$2) {
	        this._ += "L" + (x1 + t01 * x01) + "," + (y1 + t01 * y01);
	      }

	      this._ += "A" + r + "," + r + ",0,0," + +(y01 * x20 > x01 * y20) + "," + (this._x1 = x1 + t21 * x21) + "," + (this._y1 = y1 + t21 * y21);
	    }
	  },
	  arc: function arc(x, y, r, a0, a1, ccw) {
	    x = +x, y = +y, r = +r, ccw = !!ccw;
	    var dx = r * Math.cos(a0),
	        dy = r * Math.sin(a0),
	        x0 = x + dx,
	        y0 = y + dy,
	        cw = 1 ^ ccw,
	        da = ccw ? a0 - a1 : a1 - a0; // Is the radius negative? Error.

	    if (r < 0) throw new Error("negative radius: " + r); // Is this path empty? Move to (x0,y0).

	    if (this._x1 === null) {
	      this._ += "M" + x0 + "," + y0;
	    } // Or, is (x0,y0) not coincident with the previous point? Line to (x0,y0).
	    else if (Math.abs(this._x1 - x0) > epsilon$2 || Math.abs(this._y1 - y0) > epsilon$2) {
	      this._ += "L" + x0 + "," + y0;
	    } // Is this arc empty? We’re done.


	    if (!r) return; // Does the angle go the wrong way? Flip the direction.

	    if (da < 0) da = da % tau$2 + tau$2; // Is this a complete circle? Draw two arcs to complete the circle.

	    if (da > tauEpsilon) {
	      this._ += "A" + r + "," + r + ",0,1," + cw + "," + (x - dx) + "," + (y - dy) + "A" + r + "," + r + ",0,1," + cw + "," + (this._x1 = x0) + "," + (this._y1 = y0);
	    } // Is this arc non-empty? Draw an arc!
	    else if (da > epsilon$2) {
	      this._ += "A" + r + "," + r + ",0," + +(da >= pi$2) + "," + cw + "," + (this._x1 = x + r * Math.cos(a1)) + "," + (this._y1 = y + r * Math.sin(a1));
	    }
	  },
	  rect: function rect(x, y, w, h) {
	    this._ += "M" + (this._x0 = this._x1 = +x) + "," + (this._y0 = this._y1 = +y) + "h" + +w + "v" + +h + "h" + -w + "Z";
	  },
	  toString: function toString() {
	    return this._;
	  }
	};

	var array$1 = Array.prototype;
	var slice = array$1.slice;

	function ascending (a, b) {
	  return a - b;
	}

	function area (ring) {
	  var i = 0,
	      n = ring.length,
	      area = ring[n - 1][1] * ring[0][0] - ring[n - 1][0] * ring[0][1];

	  while (++i < n) {
	    area += ring[i - 1][1] * ring[i][0] - ring[i - 1][0] * ring[i][1];
	  }

	  return area;
	}

	var constant$1 = (function (x) {
	  return function () {
	    return x;
	  };
	});

	function contains (ring, hole) {
	  var i = -1,
	      n = hole.length,
	      c;

	  while (++i < n) {
	    if (c = ringContains(ring, hole[i])) return c;
	  }

	  return 0;
	}

	function ringContains(ring, point) {
	  var x = point[0],
	      y = point[1],
	      contains = -1;

	  for (var i = 0, n = ring.length, j = n - 1; i < n; j = i++) {
	    var pi = ring[i],
	        xi = pi[0],
	        yi = pi[1],
	        pj = ring[j],
	        xj = pj[0],
	        yj = pj[1];
	    if (segmentContains(pi, pj, point)) return 0;
	    if (yi > y !== yj > y && x < (xj - xi) * (y - yi) / (yj - yi) + xi) contains = -contains;
	  }

	  return contains;
	}

	function segmentContains(a, b, c) {
	  var i;
	  return collinear(a, b, c) && within(a[i = +(a[0] === b[0])], c[i], b[i]);
	}

	function collinear(a, b, c) {
	  return (b[0] - a[0]) * (c[1] - a[1]) === (c[0] - a[0]) * (b[1] - a[1]);
	}

	function within(p, q, r) {
	  return p <= q && q <= r || r <= q && q <= p;
	}

	function noop$1 () {}

	var cases = [[], [[[1.0, 1.5], [0.5, 1.0]]], [[[1.5, 1.0], [1.0, 1.5]]], [[[1.5, 1.0], [0.5, 1.0]]], [[[1.0, 0.5], [1.5, 1.0]]], [[[1.0, 1.5], [0.5, 1.0]], [[1.0, 0.5], [1.5, 1.0]]], [[[1.0, 0.5], [1.0, 1.5]]], [[[1.0, 0.5], [0.5, 1.0]]], [[[0.5, 1.0], [1.0, 0.5]]], [[[1.0, 1.5], [1.0, 0.5]]], [[[0.5, 1.0], [1.0, 0.5]], [[1.5, 1.0], [1.0, 1.5]]], [[[1.5, 1.0], [1.0, 0.5]]], [[[0.5, 1.0], [1.5, 1.0]]], [[[1.0, 1.5], [1.5, 1.0]]], [[[0.5, 1.0], [1.0, 1.5]]], []];
	function contours () {
	  var dx = 1,
	      dy = 1,
	      threshold = thresholdSturges,
	      smooth = smoothLinear;

	  function contours(values) {
	    var tz = threshold(values); // Convert number of thresholds into uniform thresholds.

	    if (!Array.isArray(tz)) {
	      var e = extent(values),
	          ts = tickStep(e[0], e[1], tz);
	      tz = ticks(Math.floor(e[0] / ts) * ts, Math.floor(e[1] / ts - 1) * ts, tz);
	    } else {
	      tz = tz.slice().sort(ascending);
	    }

	    return tz.map(function (value) {
	      return contour(values, value);
	    });
	  } // Accumulate, smooth contour rings, assign holes to exterior rings.
	  // Based on https://github.com/mbostock/shapefile/blob/v0.6.2/shp/polygon.js


	  function contour(values, value) {
	    var polygons = [],
	        holes = [];
	    isorings(values, value, function (ring) {
	      smooth(ring, values, value);
	      if (area(ring) > 0) polygons.push([ring]);else holes.push(ring);
	    });
	    holes.forEach(function (hole) {
	      for (var i = 0, n = polygons.length, polygon; i < n; ++i) {
	        if (contains((polygon = polygons[i])[0], hole) !== -1) {
	          polygon.push(hole);
	          return;
	        }
	      }
	    });
	    return {
	      type: "MultiPolygon",
	      value: value,
	      coordinates: polygons
	    };
	  } // Marching squares with isolines stitched into rings.
	  // Based on https://github.com/topojson/topojson-client/blob/v3.0.0/src/stitch.js


	  function isorings(values, value, callback) {
	    var fragmentByStart = new Array(),
	        fragmentByEnd = new Array(),
	        x,
	        y,
	        t0,
	        t1,
	        t2,
	        t3; // Special case for the first row (y = -1, t2 = t3 = 0).

	    x = y = -1;
	    t1 = values[0] >= value;
	    cases[t1 << 1].forEach(stitch);

	    while (++x < dx - 1) {
	      t0 = t1, t1 = values[x + 1] >= value;
	      cases[t0 | t1 << 1].forEach(stitch);
	    }

	    cases[t1 << 0].forEach(stitch); // General case for the intermediate rows.

	    while (++y < dy - 1) {
	      x = -1;
	      t1 = values[y * dx + dx] >= value;
	      t2 = values[y * dx] >= value;
	      cases[t1 << 1 | t2 << 2].forEach(stitch);

	      while (++x < dx - 1) {
	        t0 = t1, t1 = values[y * dx + dx + x + 1] >= value;
	        t3 = t2, t2 = values[y * dx + x + 1] >= value;
	        cases[t0 | t1 << 1 | t2 << 2 | t3 << 3].forEach(stitch);
	      }

	      cases[t1 | t2 << 3].forEach(stitch);
	    } // Special case for the last row (y = dy - 1, t0 = t1 = 0).


	    x = -1;
	    t2 = values[y * dx] >= value;
	    cases[t2 << 2].forEach(stitch);

	    while (++x < dx - 1) {
	      t3 = t2, t2 = values[y * dx + x + 1] >= value;
	      cases[t2 << 2 | t3 << 3].forEach(stitch);
	    }

	    cases[t2 << 3].forEach(stitch);

	    function stitch(line) {
	      var start = [line[0][0] + x, line[0][1] + y],
	          end = [line[1][0] + x, line[1][1] + y],
	          startIndex = index(start),
	          endIndex = index(end),
	          f,
	          g;

	      if (f = fragmentByEnd[startIndex]) {
	        if (g = fragmentByStart[endIndex]) {
	          delete fragmentByEnd[f.end];
	          delete fragmentByStart[g.start];

	          if (f === g) {
	            f.ring.push(end);
	            callback(f.ring);
	          } else {
	            fragmentByStart[f.start] = fragmentByEnd[g.end] = {
	              start: f.start,
	              end: g.end,
	              ring: f.ring.concat(g.ring)
	            };
	          }
	        } else {
	          delete fragmentByEnd[f.end];
	          f.ring.push(end);
	          fragmentByEnd[f.end = endIndex] = f;
	        }
	      } else if (f = fragmentByStart[endIndex]) {
	        if (g = fragmentByEnd[startIndex]) {
	          delete fragmentByStart[f.start];
	          delete fragmentByEnd[g.end];

	          if (f === g) {
	            f.ring.push(end);
	            callback(f.ring);
	          } else {
	            fragmentByStart[g.start] = fragmentByEnd[f.end] = {
	              start: g.start,
	              end: f.end,
	              ring: g.ring.concat(f.ring)
	            };
	          }
	        } else {
	          delete fragmentByStart[f.start];
	          f.ring.unshift(start);
	          fragmentByStart[f.start = startIndex] = f;
	        }
	      } else {
	        fragmentByStart[startIndex] = fragmentByEnd[endIndex] = {
	          start: startIndex,
	          end: endIndex,
	          ring: [start, end]
	        };
	      }
	    }
	  }

	  function index(point) {
	    return point[0] * 2 + point[1] * (dx + 1) * 4;
	  }

	  function smoothLinear(ring, values, value) {
	    ring.forEach(function (point) {
	      var x = point[0],
	          y = point[1],
	          xt = x | 0,
	          yt = y | 0,
	          v0,
	          v1 = values[yt * dx + xt];

	      if (x > 0 && x < dx && xt === x) {
	        v0 = values[yt * dx + xt - 1];
	        point[0] = x + (value - v0) / (v1 - v0) - 0.5;
	      }

	      if (y > 0 && y < dy && yt === y) {
	        v0 = values[(yt - 1) * dx + xt];
	        point[1] = y + (value - v0) / (v1 - v0) - 0.5;
	      }
	    });
	  }

	  contours.contour = contour;

	  contours.size = function (_) {
	    if (!arguments.length) return [dx, dy];

	    var _0 = Math.floor(_[0]),
	        _1 = Math.floor(_[1]);

	    if (!(_0 >= 0 && _1 >= 0)) throw new Error("invalid size");
	    return dx = _0, dy = _1, contours;
	  };

	  contours.thresholds = function (_) {
	    return arguments.length ? (threshold = typeof _ === "function" ? _ : Array.isArray(_) ? constant$1(slice.call(_)) : constant$1(_), contours) : threshold;
	  };

	  contours.smooth = function (_) {
	    return arguments.length ? (smooth = _ ? smoothLinear : noop$1, contours) : smooth === smoothLinear;
	  };

	  return contours;
	}

	function formatDecimal (x) {
	  return Math.abs(x = Math.round(x)) >= 1e21 ? x.toLocaleString("en").replace(/,/g, "") : x.toString(10);
	} // Computes the decimal coefficient and exponent of the specified number x with
	// significant digits p, where x is positive and p is in [1, 21] or undefined.
	// For example, formatDecimalParts(1.23) returns ["123", 0].

	function formatDecimalParts(x, p) {
	  if ((i = (x = p ? x.toExponential(p - 1) : x.toExponential()).indexOf("e")) < 0) return null; // NaN, ±Infinity

	  var i,
	      coefficient = x.slice(0, i); // The string returned by toExponential either has the form \d\.\d+e[-+]\d+
	  // (e.g., 1.2e+3) or the form \de[-+]\d+ (e.g., 1e+3).

	  return [coefficient.length > 1 ? coefficient[0] + coefficient.slice(2) : coefficient, +x.slice(i + 1)];
	}

	function exponent (x) {
	  return x = formatDecimalParts(Math.abs(x)), x ? x[1] : NaN;
	}

	function formatGroup (grouping, thousands) {
	  return function (value, width) {
	    var i = value.length,
	        t = [],
	        j = 0,
	        g = grouping[0],
	        length = 0;

	    while (i > 0 && g > 0) {
	      if (length + g + 1 > width) g = Math.max(1, width - length);
	      t.push(value.substring(i -= g, i + g));
	      if ((length += g + 1) > width) break;
	      g = grouping[j = (j + 1) % grouping.length];
	    }

	    return t.reverse().join(thousands);
	  };
	}

	function formatNumerals (numerals) {
	  return function (value) {
	    return value.replace(/[0-9]/g, function (i) {
	      return numerals[+i];
	    });
	  };
	}

	// [[fill]align][sign][symbol][0][width][,][.precision][~][type]
	var re = /^(?:(.)?([<>=^]))?([+\-( ])?([$#])?(0)?(\d+)?(,)?(\.\d+)?(~)?([a-z%])?$/i;
	function formatSpecifier(specifier) {
	  if (!(match = re.exec(specifier))) throw new Error("invalid format: " + specifier);
	  var match;
	  return new FormatSpecifier({
	    fill: match[1],
	    align: match[2],
	    sign: match[3],
	    symbol: match[4],
	    zero: match[5],
	    width: match[6],
	    comma: match[7],
	    precision: match[8] && match[8].slice(1),
	    trim: match[9],
	    type: match[10]
	  });
	}
	formatSpecifier.prototype = FormatSpecifier.prototype; // instanceof

	function FormatSpecifier(specifier) {
	  this.fill = specifier.fill === undefined ? " " : specifier.fill + "";
	  this.align = specifier.align === undefined ? ">" : specifier.align + "";
	  this.sign = specifier.sign === undefined ? "-" : specifier.sign + "";
	  this.symbol = specifier.symbol === undefined ? "" : specifier.symbol + "";
	  this.zero = !!specifier.zero;
	  this.width = specifier.width === undefined ? undefined : +specifier.width;
	  this.comma = !!specifier.comma;
	  this.precision = specifier.precision === undefined ? undefined : +specifier.precision;
	  this.trim = !!specifier.trim;
	  this.type = specifier.type === undefined ? "" : specifier.type + "";
	}

	FormatSpecifier.prototype.toString = function () {
	  return this.fill + this.align + this.sign + this.symbol + (this.zero ? "0" : "") + (this.width === undefined ? "" : Math.max(1, this.width | 0)) + (this.comma ? "," : "") + (this.precision === undefined ? "" : "." + Math.max(0, this.precision | 0)) + (this.trim ? "~" : "") + this.type;
	};

	// Trims insignificant zeros, e.g., replaces 1.2000k with 1.2k.
	function formatTrim (s) {
	  out: for (var n = s.length, i = 1, i0 = -1, i1; i < n; ++i) {
	    switch (s[i]) {
	      case ".":
	        i0 = i1 = i;
	        break;

	      case "0":
	        if (i0 === 0) i0 = i;
	        i1 = i;
	        break;

	      default:
	        if (!+s[i]) break out;
	        if (i0 > 0) i0 = 0;
	        break;
	    }
	  }

	  return i0 > 0 ? s.slice(0, i0) + s.slice(i1 + 1) : s;
	}

	var prefixExponent;
	function formatPrefixAuto (x, p) {
	  var d = formatDecimalParts(x, p);
	  if (!d) return x + "";
	  var coefficient = d[0],
	      exponent = d[1],
	      i = exponent - (prefixExponent = Math.max(-8, Math.min(8, Math.floor(exponent / 3))) * 3) + 1,
	      n = coefficient.length;
	  return i === n ? coefficient : i > n ? coefficient + new Array(i - n + 1).join("0") : i > 0 ? coefficient.slice(0, i) + "." + coefficient.slice(i) : "0." + new Array(1 - i).join("0") + formatDecimalParts(x, Math.max(0, p + i - 1))[0]; // less than 1y!
	}

	function formatRounded (x, p) {
	  var d = formatDecimalParts(x, p);
	  if (!d) return x + "";
	  var coefficient = d[0],
	      exponent = d[1];
	  return exponent < 0 ? "0." + new Array(-exponent).join("0") + coefficient : coefficient.length > exponent + 1 ? coefficient.slice(0, exponent + 1) + "." + coefficient.slice(exponent + 1) : coefficient + new Array(exponent - coefficient.length + 2).join("0");
	}

	var formatTypes = {
	  "%": function _(x, p) {
	    return (x * 100).toFixed(p);
	  },
	  "b": function b(x) {
	    return Math.round(x).toString(2);
	  },
	  "c": function c(x) {
	    return x + "";
	  },
	  "d": formatDecimal,
	  "e": function e(x, p) {
	    return x.toExponential(p);
	  },
	  "f": function f(x, p) {
	    return x.toFixed(p);
	  },
	  "g": function g(x, p) {
	    return x.toPrecision(p);
	  },
	  "o": function o(x) {
	    return Math.round(x).toString(8);
	  },
	  "p": function p(x, _p) {
	    return formatRounded(x * 100, _p);
	  },
	  "r": formatRounded,
	  "s": formatPrefixAuto,
	  "X": function X(x) {
	    return Math.round(x).toString(16).toUpperCase();
	  },
	  "x": function x(_x) {
	    return Math.round(_x).toString(16);
	  }
	};

	function identity$4 (x) {
	  return x;
	}

	var map = Array.prototype.map,
	    prefixes = ["y", "z", "a", "f", "p", "n", "µ", "m", "", "k", "M", "G", "T", "P", "E", "Z", "Y"];
	function formatLocale (locale) {
	  var group = locale.grouping === undefined || locale.thousands === undefined ? identity$4 : formatGroup(map.call(locale.grouping, Number), locale.thousands + ""),
	      currencyPrefix = locale.currency === undefined ? "" : locale.currency[0] + "",
	      currencySuffix = locale.currency === undefined ? "" : locale.currency[1] + "",
	      decimal = locale.decimal === undefined ? "." : locale.decimal + "",
	      numerals = locale.numerals === undefined ? identity$4 : formatNumerals(map.call(locale.numerals, String)),
	      percent = locale.percent === undefined ? "%" : locale.percent + "",
	      minus = locale.minus === undefined ? "−" : locale.minus + "",
	      nan = locale.nan === undefined ? "NaN" : locale.nan + "";

	  function newFormat(specifier) {
	    specifier = formatSpecifier(specifier);
	    var fill = specifier.fill,
	        align = specifier.align,
	        sign = specifier.sign,
	        symbol = specifier.symbol,
	        zero = specifier.zero,
	        width = specifier.width,
	        comma = specifier.comma,
	        precision = specifier.precision,
	        trim = specifier.trim,
	        type = specifier.type; // The "n" type is an alias for ",g".

	    if (type === "n") comma = true, type = "g"; // The "" type, and any invalid type, is an alias for ".12~g".
	    else if (!formatTypes[type]) precision === undefined && (precision = 12), trim = true, type = "g"; // If zero fill is specified, padding goes after sign and before digits.

	    if (zero || fill === "0" && align === "=") zero = true, fill = "0", align = "="; // Compute the prefix and suffix.
	    // For SI-prefix, the suffix is lazily computed.

	    var prefix = symbol === "$" ? currencyPrefix : symbol === "#" && /[boxX]/.test(type) ? "0" + type.toLowerCase() : "",
	        suffix = symbol === "$" ? currencySuffix : /[%p]/.test(type) ? percent : ""; // What format function should we use?
	    // Is this an integer type?
	    // Can this type generate exponential notation?

	    var formatType = formatTypes[type],
	        maybeSuffix = /[defgprs%]/.test(type); // Set the default precision if not specified,
	    // or clamp the specified precision to the supported range.
	    // For significant precision, it must be in [1, 21].
	    // For fixed precision, it must be in [0, 20].

	    precision = precision === undefined ? 6 : /[gprs]/.test(type) ? Math.max(1, Math.min(21, precision)) : Math.max(0, Math.min(20, precision));

	    function format(value) {
	      var valuePrefix = prefix,
	          valueSuffix = suffix,
	          i,
	          n,
	          c;

	      if (type === "c") {
	        valueSuffix = formatType(value) + valueSuffix;
	        value = "";
	      } else {
	        value = +value; // Determine the sign. -0 is not less than 0, but 1 / -0 is!

	        var valueNegative = value < 0 || 1 / value < 0; // Perform the initial formatting.

	        value = isNaN(value) ? nan : formatType(Math.abs(value), precision); // Trim insignificant zeros.

	        if (trim) value = formatTrim(value); // If a negative value rounds to zero after formatting, and no explicit positive sign is requested, hide the sign.

	        if (valueNegative && +value === 0 && sign !== "+") valueNegative = false; // Compute the prefix and suffix.

	        valuePrefix = (valueNegative ? sign === "(" ? sign : minus : sign === "-" || sign === "(" ? "" : sign) + valuePrefix;
	        valueSuffix = (type === "s" ? prefixes[8 + prefixExponent / 3] : "") + valueSuffix + (valueNegative && sign === "(" ? ")" : ""); // Break the formatted value into the integer “value” part that can be
	        // grouped, and fractional or exponential “suffix” part that is not.

	        if (maybeSuffix) {
	          i = -1, n = value.length;

	          while (++i < n) {
	            if (c = value.charCodeAt(i), 48 > c || c > 57) {
	              valueSuffix = (c === 46 ? decimal + value.slice(i + 1) : value.slice(i)) + valueSuffix;
	              value = value.slice(0, i);
	              break;
	            }
	          }
	        }
	      } // If the fill character is not "0", grouping is applied before padding.


	      if (comma && !zero) value = group(value, Infinity); // Compute the padding.

	      var length = valuePrefix.length + value.length + valueSuffix.length,
	          padding = length < width ? new Array(width - length + 1).join(fill) : ""; // If the fill character is "0", grouping is applied after padding.

	      if (comma && zero) value = group(padding + value, padding.length ? width - valueSuffix.length : Infinity), padding = ""; // Reconstruct the final output based on the desired alignment.

	      switch (align) {
	        case "<":
	          value = valuePrefix + value + valueSuffix + padding;
	          break;

	        case "=":
	          value = valuePrefix + padding + value + valueSuffix;
	          break;

	        case "^":
	          value = padding.slice(0, length = padding.length >> 1) + valuePrefix + value + valueSuffix + padding.slice(length);
	          break;

	        default:
	          value = padding + valuePrefix + value + valueSuffix;
	          break;
	      }

	      return numerals(value);
	    }

	    format.toString = function () {
	      return specifier + "";
	    };

	    return format;
	  }

	  function formatPrefix(specifier, value) {
	    var f = newFormat((specifier = formatSpecifier(specifier), specifier.type = "f", specifier)),
	        e = Math.max(-8, Math.min(8, Math.floor(exponent(value) / 3))) * 3,
	        k = Math.pow(10, -e),
	        prefix = prefixes[8 + e / 3];
	    return function (value) {
	      return f(k * value) + prefix;
	    };
	  }

	  return {
	    format: newFormat,
	    formatPrefix: formatPrefix
	  };
	}

	var locale;
	var format;
	var formatPrefix;
	defaultLocale({
	  thousands: ",",
	  grouping: [3],
	  currency: ["$", ""]
	});
	function defaultLocale(definition) {
	  locale = formatLocale(definition);
	  format = locale.format;
	  formatPrefix = locale.formatPrefix;
	  return locale;
	}

	function precisionFixed (step) {
	  return Math.max(0, -exponent(Math.abs(step)));
	}

	function precisionPrefix (step, value) {
	  return Math.max(0, Math.max(-8, Math.min(8, Math.floor(exponent(value) / 3))) * 3 - exponent(Math.abs(step)));
	}

	function precisionRound (step, max) {
	  step = Math.abs(step), max = Math.abs(max) - step;
	  return Math.max(0, exponent(max) - exponent(step)) + 1;
	}

	var epsilon$1 = 1e-6;
	var pi$1 = Math.PI;
	var tau$1 = pi$1 * 2;
	var degrees = 180 / pi$1;
	var radians = pi$1 / 180;
	var abs$1 = Math.abs;
	var cos$1 = Math.cos;
	var sin$1 = Math.sin;
	var sqrt$1 = Math.sqrt;

	function noop() {}

	function streamGeometry(geometry, stream) {
	  if (geometry && streamGeometryType.hasOwnProperty(geometry.type)) {
	    streamGeometryType[geometry.type](geometry, stream);
	  }
	}

	var streamObjectType = {
	  Feature: function Feature(object, stream) {
	    streamGeometry(object.geometry, stream);
	  },
	  FeatureCollection: function FeatureCollection(object, stream) {
	    var features = object.features,
	        i = -1,
	        n = features.length;

	    while (++i < n) {
	      streamGeometry(features[i].geometry, stream);
	    }
	  }
	};
	var streamGeometryType = {
	  Sphere: function Sphere(object, stream) {
	    stream.sphere();
	  },
	  Point: function Point(object, stream) {
	    object = object.coordinates;
	    stream.point(object[0], object[1], object[2]);
	  },
	  MultiPoint: function MultiPoint(object, stream) {
	    var coordinates = object.coordinates,
	        i = -1,
	        n = coordinates.length;

	    while (++i < n) {
	      object = coordinates[i], stream.point(object[0], object[1], object[2]);
	    }
	  },
	  LineString: function LineString(object, stream) {
	    streamLine(object.coordinates, stream, 0);
	  },
	  MultiLineString: function MultiLineString(object, stream) {
	    var coordinates = object.coordinates,
	        i = -1,
	        n = coordinates.length;

	    while (++i < n) {
	      streamLine(coordinates[i], stream, 0);
	    }
	  },
	  Polygon: function Polygon(object, stream) {
	    streamPolygon(object.coordinates, stream);
	  },
	  MultiPolygon: function MultiPolygon(object, stream) {
	    var coordinates = object.coordinates,
	        i = -1,
	        n = coordinates.length;

	    while (++i < n) {
	      streamPolygon(coordinates[i], stream);
	    }
	  },
	  GeometryCollection: function GeometryCollection(object, stream) {
	    var geometries = object.geometries,
	        i = -1,
	        n = geometries.length;

	    while (++i < n) {
	      streamGeometry(geometries[i], stream);
	    }
	  }
	};

	function streamLine(coordinates, stream, closed) {
	  var i = -1,
	      n = coordinates.length - closed,
	      coordinate;
	  stream.lineStart();

	  while (++i < n) {
	    coordinate = coordinates[i], stream.point(coordinate[0], coordinate[1], coordinate[2]);
	  }

	  stream.lineEnd();
	}

	function streamPolygon(coordinates, stream) {
	  var i = -1,
	      n = coordinates.length;
	  stream.polygonStart();

	  while (++i < n) {
	    streamLine(coordinates[i], stream, 1);
	  }

	  stream.polygonEnd();
	}

	function geoStream (object, stream) {
	  if (object && streamObjectType.hasOwnProperty(object.type)) {
	    streamObjectType[object.type](object, stream);
	  } else {
	    streamGeometry(object, stream);
	  }
	}

	function clipBuffer () {
	  var lines = [],
	      line;
	  return {
	    point: function point(x, y, m) {
	      line.push([x, y, m]);
	    },
	    lineStart: function lineStart() {
	      lines.push(line = []);
	    },
	    lineEnd: noop,
	    rejoin: function rejoin() {
	      if (lines.length > 1) lines.push(lines.pop().concat(lines.shift()));
	    },
	    result: function result() {
	      var result = lines;
	      lines = [];
	      line = null;
	      return result;
	    }
	  };
	}

	function pointEqual (a, b) {
	  return abs$1(a[0] - b[0]) < epsilon$1 && abs$1(a[1] - b[1]) < epsilon$1;
	}

	function Intersection(point, points, other, entry) {
	  this.x = point;
	  this.z = points;
	  this.o = other; // another intersection

	  this.e = entry; // is an entry?

	  this.v = false; // visited

	  this.n = this.p = null; // next & previous
	} // A generalized polygon clipping algorithm: given a polygon that has been cut
	// into its visible line segments, and rejoins the segments by interpolating
	// along the clip edge.


	function clipRejoin (segments, compareIntersection, startInside, interpolate, stream) {
	  var subject = [],
	      clip = [],
	      i,
	      n;
	  segments.forEach(function (segment) {
	    if ((n = segment.length - 1) <= 0) return;
	    var n,
	        p0 = segment[0],
	        p1 = segment[n],
	        x;

	    if (pointEqual(p0, p1)) {
	      if (!p0[2] && !p1[2]) {
	        stream.lineStart();

	        for (i = 0; i < n; ++i) {
	          stream.point((p0 = segment[i])[0], p0[1]);
	        }

	        stream.lineEnd();
	        return;
	      } // handle degenerate cases by moving the point


	      p1[0] += 2 * epsilon$1;
	    }

	    subject.push(x = new Intersection(p0, segment, null, true));
	    clip.push(x.o = new Intersection(p0, null, x, false));
	    subject.push(x = new Intersection(p1, segment, null, false));
	    clip.push(x.o = new Intersection(p1, null, x, true));
	  });
	  if (!subject.length) return;
	  clip.sort(compareIntersection);
	  link(subject);
	  link(clip);

	  for (i = 0, n = clip.length; i < n; ++i) {
	    clip[i].e = startInside = !startInside;
	  }

	  var start = subject[0],
	      points,
	      point;

	  while (1) {
	    // Find first unvisited intersection.
	    var current = start,
	        isSubject = true;

	    while (current.v) {
	      if ((current = current.n) === start) return;
	    }

	    points = current.z;
	    stream.lineStart();

	    do {
	      current.v = current.o.v = true;

	      if (current.e) {
	        if (isSubject) {
	          for (i = 0, n = points.length; i < n; ++i) {
	            stream.point((point = points[i])[0], point[1]);
	          }
	        } else {
	          interpolate(current.x, current.n.x, 1, stream);
	        }

	        current = current.n;
	      } else {
	        if (isSubject) {
	          points = current.p.z;

	          for (i = points.length - 1; i >= 0; --i) {
	            stream.point((point = points[i])[0], point[1]);
	          }
	        } else {
	          interpolate(current.x, current.p.x, -1, stream);
	        }

	        current = current.p;
	      }

	      current = current.o;
	      points = current.z;
	      isSubject = !isSubject;
	    } while (!current.v);

	    stream.lineEnd();
	  }
	}

	function link(array) {
	  if (!(n = array.length)) return;
	  var n,
	      i = 0,
	      a = array[0],
	      b;

	  while (++i < n) {
	    a.n = b = array[i];
	    b.p = a;
	    a = b;
	  }

	  a.n = b = array[0];
	  b.p = a;
	}

	function clipLine (a, b, x0, y0, x1, y1) {
	  var ax = a[0],
	      ay = a[1],
	      bx = b[0],
	      by = b[1],
	      t0 = 0,
	      t1 = 1,
	      dx = bx - ax,
	      dy = by - ay,
	      r;
	  r = x0 - ax;
	  if (!dx && r > 0) return;
	  r /= dx;

	  if (dx < 0) {
	    if (r < t0) return;
	    if (r < t1) t1 = r;
	  } else if (dx > 0) {
	    if (r > t1) return;
	    if (r > t0) t0 = r;
	  }

	  r = x1 - ax;
	  if (!dx && r < 0) return;
	  r /= dx;

	  if (dx < 0) {
	    if (r > t1) return;
	    if (r > t0) t0 = r;
	  } else if (dx > 0) {
	    if (r < t0) return;
	    if (r < t1) t1 = r;
	  }

	  r = y0 - ay;
	  if (!dy && r > 0) return;
	  r /= dy;

	  if (dy < 0) {
	    if (r < t0) return;
	    if (r < t1) t1 = r;
	  } else if (dy > 0) {
	    if (r > t1) return;
	    if (r > t0) t0 = r;
	  }

	  r = y1 - ay;
	  if (!dy && r < 0) return;
	  r /= dy;

	  if (dy < 0) {
	    if (r > t1) return;
	    if (r > t0) t0 = r;
	  } else if (dy > 0) {
	    if (r < t0) return;
	    if (r < t1) t1 = r;
	  }

	  if (t0 > 0) a[0] = ax + t0 * dx, a[1] = ay + t0 * dy;
	  if (t1 < 1) b[0] = ax + t1 * dx, b[1] = ay + t1 * dy;
	  return true;
	}

	var clipMax = 1e9,
	    clipMin = -clipMax; // TODO Use d3-polygon’s polygonContains here for the ring check?
	// TODO Eliminate duplicate buffering in clipBuffer and polygon.push?

	function clipRectangle(x0, y0, x1, y1) {
	  function visible(x, y) {
	    return x0 <= x && x <= x1 && y0 <= y && y <= y1;
	  }

	  function interpolate(from, to, direction, stream) {
	    var a = 0,
	        a1 = 0;

	    if (from == null || (a = corner(from, direction)) !== (a1 = corner(to, direction)) || comparePoint(from, to) < 0 ^ direction > 0) {
	      do {
	        stream.point(a === 0 || a === 3 ? x0 : x1, a > 1 ? y1 : y0);
	      } while ((a = (a + direction + 4) % 4) !== a1);
	    } else {
	      stream.point(to[0], to[1]);
	    }
	  }

	  function corner(p, direction) {
	    return abs$1(p[0] - x0) < epsilon$1 ? direction > 0 ? 0 : 3 : abs$1(p[0] - x1) < epsilon$1 ? direction > 0 ? 2 : 1 : abs$1(p[1] - y0) < epsilon$1 ? direction > 0 ? 1 : 0 : direction > 0 ? 3 : 2; // abs(p[1] - y1) < epsilon
	  }

	  function compareIntersection(a, b) {
	    return comparePoint(a.x, b.x);
	  }

	  function comparePoint(a, b) {
	    var ca = corner(a, 1),
	        cb = corner(b, 1);
	    return ca !== cb ? ca - cb : ca === 0 ? b[1] - a[1] : ca === 1 ? a[0] - b[0] : ca === 2 ? a[1] - b[1] : b[0] - a[0];
	  }

	  return function (stream) {
	    var activeStream = stream,
	        bufferStream = clipBuffer(),
	        segments,
	        polygon,
	        ring,
	        x__,
	        y__,
	        v__,
	        // first point
	    x_,
	        y_,
	        v_,
	        // previous point
	    first,
	        clean;
	    var clipStream = {
	      point: point,
	      lineStart: lineStart,
	      lineEnd: lineEnd,
	      polygonStart: polygonStart,
	      polygonEnd: polygonEnd
	    };

	    function point(x, y) {
	      if (visible(x, y)) activeStream.point(x, y);
	    }

	    function polygonInside() {
	      var winding = 0;

	      for (var i = 0, n = polygon.length; i < n; ++i) {
	        for (var ring = polygon[i], j = 1, m = ring.length, point = ring[0], a0, a1, b0 = point[0], b1 = point[1]; j < m; ++j) {
	          a0 = b0, a1 = b1, point = ring[j], b0 = point[0], b1 = point[1];

	          if (a1 <= y1) {
	            if (b1 > y1 && (b0 - a0) * (y1 - a1) > (b1 - a1) * (x0 - a0)) ++winding;
	          } else {
	            if (b1 <= y1 && (b0 - a0) * (y1 - a1) < (b1 - a1) * (x0 - a0)) --winding;
	          }
	        }
	      }

	      return winding;
	    } // Buffer geometry within a polygon and then clip it en masse.


	    function polygonStart() {
	      activeStream = bufferStream, segments = [], polygon = [], clean = true;
	    }

	    function polygonEnd() {
	      var startInside = polygonInside(),
	          cleanInside = clean && startInside,
	          visible = (segments = merge(segments)).length;

	      if (cleanInside || visible) {
	        stream.polygonStart();

	        if (cleanInside) {
	          stream.lineStart();
	          interpolate(null, null, 1, stream);
	          stream.lineEnd();
	        }

	        if (visible) {
	          clipRejoin(segments, compareIntersection, startInside, interpolate, stream);
	        }

	        stream.polygonEnd();
	      }

	      activeStream = stream, segments = polygon = ring = null;
	    }

	    function lineStart() {
	      clipStream.point = linePoint;
	      if (polygon) polygon.push(ring = []);
	      first = true;
	      v_ = false;
	      x_ = y_ = NaN;
	    } // TODO rather than special-case polygons, simply handle them separately.
	    // Ideally, coincident intersection points should be jittered to avoid
	    // clipping issues.


	    function lineEnd() {
	      if (segments) {
	        linePoint(x__, y__);
	        if (v__ && v_) bufferStream.rejoin();
	        segments.push(bufferStream.result());
	      }

	      clipStream.point = point;
	      if (v_) activeStream.lineEnd();
	    }

	    function linePoint(x, y) {
	      var v = visible(x, y);
	      if (polygon) ring.push([x, y]);

	      if (first) {
	        x__ = x, y__ = y, v__ = v;
	        first = false;

	        if (v) {
	          activeStream.lineStart();
	          activeStream.point(x, y);
	        }
	      } else {
	        if (v && v_) activeStream.point(x, y);else {
	          var a = [x_ = Math.max(clipMin, Math.min(clipMax, x_)), y_ = Math.max(clipMin, Math.min(clipMax, y_))],
	              b = [x = Math.max(clipMin, Math.min(clipMax, x)), y = Math.max(clipMin, Math.min(clipMax, y))];

	          if (clipLine(a, b, x0, y0, x1, y1)) {
	            if (!v_) {
	              activeStream.lineStart();
	              activeStream.point(a[0], a[1]);
	            }

	            activeStream.point(b[0], b[1]);
	            if (!v) activeStream.lineEnd();
	            clean = false;
	          } else if (v) {
	            activeStream.lineStart();
	            activeStream.point(x, y);
	            clean = false;
	          }
	        }
	      }

	      x_ = x, y_ = y, v_ = v;
	    }

	    return clipStream;
	  };
	}

	var identity$3 = (function (x) {
	  return x;
	});

	var areaSum = new Adder(),
	    areaRingSum = new Adder(),
	    x00$2,
	    y00$2,
	    x0$3,
	    y0$3;
	var areaStream = {
	  point: noop,
	  lineStart: noop,
	  lineEnd: noop,
	  polygonStart: function polygonStart() {
	    areaStream.lineStart = areaRingStart;
	    areaStream.lineEnd = areaRingEnd;
	  },
	  polygonEnd: function polygonEnd() {
	    areaStream.lineStart = areaStream.lineEnd = areaStream.point = noop;
	    areaSum.add(abs$1(areaRingSum));
	    areaRingSum = new Adder();
	  },
	  result: function result() {
	    var area = areaSum / 2;
	    areaSum = new Adder();
	    return area;
	  }
	};

	function areaRingStart() {
	  areaStream.point = areaPointFirst;
	}

	function areaPointFirst(x, y) {
	  areaStream.point = areaPoint;
	  x00$2 = x0$3 = x, y00$2 = y0$3 = y;
	}

	function areaPoint(x, y) {
	  areaRingSum.add(y0$3 * x - x0$3 * y);
	  x0$3 = x, y0$3 = y;
	}

	function areaRingEnd() {
	  areaPoint(x00$2, y00$2);
	}

	var pathArea = areaStream;

	var x0$2 = Infinity,
	    y0$2 = x0$2,
	    x1 = -x0$2,
	    y1 = x1;
	var boundsStream = {
	  point: boundsPoint,
	  lineStart: noop,
	  lineEnd: noop,
	  polygonStart: noop,
	  polygonEnd: noop,
	  result: function result() {
	    var bounds = [[x0$2, y0$2], [x1, y1]];
	    x1 = y1 = -(y0$2 = x0$2 = Infinity);
	    return bounds;
	  }
	};

	function boundsPoint(x, y) {
	  if (x < x0$2) x0$2 = x;
	  if (x > x1) x1 = x;
	  if (y < y0$2) y0$2 = y;
	  if (y > y1) y1 = y;
	}

	var boundsStream$1 = boundsStream;

	var X0 = 0,
	    Y0 = 0,
	    Z0 = 0,
	    X1 = 0,
	    Y1 = 0,
	    Z1 = 0,
	    X2 = 0,
	    Y2 = 0,
	    Z2 = 0,
	    x00$1,
	    y00$1,
	    x0$1,
	    y0$1;
	var centroidStream = {
	  point: centroidPoint,
	  lineStart: centroidLineStart,
	  lineEnd: centroidLineEnd,
	  polygonStart: function polygonStart() {
	    centroidStream.lineStart = centroidRingStart;
	    centroidStream.lineEnd = centroidRingEnd;
	  },
	  polygonEnd: function polygonEnd() {
	    centroidStream.point = centroidPoint;
	    centroidStream.lineStart = centroidLineStart;
	    centroidStream.lineEnd = centroidLineEnd;
	  },
	  result: function result() {
	    var centroid = Z2 ? [X2 / Z2, Y2 / Z2] : Z1 ? [X1 / Z1, Y1 / Z1] : Z0 ? [X0 / Z0, Y0 / Z0] : [NaN, NaN];
	    X0 = Y0 = Z0 = X1 = Y1 = Z1 = X2 = Y2 = Z2 = 0;
	    return centroid;
	  }
	};

	function centroidPoint(x, y) {
	  X0 += x;
	  Y0 += y;
	  ++Z0;
	}

	function centroidLineStart() {
	  centroidStream.point = centroidPointFirstLine;
	}

	function centroidPointFirstLine(x, y) {
	  centroidStream.point = centroidPointLine;
	  centroidPoint(x0$1 = x, y0$1 = y);
	}

	function centroidPointLine(x, y) {
	  var dx = x - x0$1,
	      dy = y - y0$1,
	      z = sqrt$1(dx * dx + dy * dy);
	  X1 += z * (x0$1 + x) / 2;
	  Y1 += z * (y0$1 + y) / 2;
	  Z1 += z;
	  centroidPoint(x0$1 = x, y0$1 = y);
	}

	function centroidLineEnd() {
	  centroidStream.point = centroidPoint;
	}

	function centroidRingStart() {
	  centroidStream.point = centroidPointFirstRing;
	}

	function centroidRingEnd() {
	  centroidPointRing(x00$1, y00$1);
	}

	function centroidPointFirstRing(x, y) {
	  centroidStream.point = centroidPointRing;
	  centroidPoint(x00$1 = x0$1 = x, y00$1 = y0$1 = y);
	}

	function centroidPointRing(x, y) {
	  var dx = x - x0$1,
	      dy = y - y0$1,
	      z = sqrt$1(dx * dx + dy * dy);
	  X1 += z * (x0$1 + x) / 2;
	  Y1 += z * (y0$1 + y) / 2;
	  Z1 += z;
	  z = y0$1 * x - x0$1 * y;
	  X2 += z * (x0$1 + x);
	  Y2 += z * (y0$1 + y);
	  Z2 += z * 3;
	  centroidPoint(x0$1 = x, y0$1 = y);
	}

	var pathCentroid = centroidStream;

	function PathContext(context) {
	  this._context = context;
	}
	PathContext.prototype = {
	  _radius: 4.5,
	  pointRadius: function pointRadius(_) {
	    return this._radius = _, this;
	  },
	  polygonStart: function polygonStart() {
	    this._line = 0;
	  },
	  polygonEnd: function polygonEnd() {
	    this._line = NaN;
	  },
	  lineStart: function lineStart() {
	    this._point = 0;
	  },
	  lineEnd: function lineEnd() {
	    if (this._line === 0) this._context.closePath();
	    this._point = NaN;
	  },
	  point: function point(x, y) {
	    switch (this._point) {
	      case 0:
	        {
	          this._context.moveTo(x, y);

	          this._point = 1;
	          break;
	        }

	      case 1:
	        {
	          this._context.lineTo(x, y);

	          break;
	        }

	      default:
	        {
	          this._context.moveTo(x + this._radius, y);

	          this._context.arc(x, y, this._radius, 0, tau$1);

	          break;
	        }
	    }
	  },
	  result: noop
	};

	var lengthSum = new Adder(),
	    lengthRing,
	    x00,
	    y00,
	    x0,
	    y0;
	var lengthStream = {
	  point: noop,
	  lineStart: function lineStart() {
	    lengthStream.point = lengthPointFirst;
	  },
	  lineEnd: function lineEnd() {
	    if (lengthRing) lengthPoint(x00, y00);
	    lengthStream.point = noop;
	  },
	  polygonStart: function polygonStart() {
	    lengthRing = true;
	  },
	  polygonEnd: function polygonEnd() {
	    lengthRing = null;
	  },
	  result: function result() {
	    var length = +lengthSum;
	    lengthSum = new Adder();
	    return length;
	  }
	};

	function lengthPointFirst(x, y) {
	  lengthStream.point = lengthPoint;
	  x00 = x0 = x, y00 = y0 = y;
	}

	function lengthPoint(x, y) {
	  x0 -= x, y0 -= y;
	  lengthSum.add(sqrt$1(x0 * x0 + y0 * y0));
	  x0 = x, y0 = y;
	}

	var pathMeasure = lengthStream;

	function PathString() {
	  this._string = [];
	}
	PathString.prototype = {
	  _radius: 4.5,
	  _circle: circle(4.5),
	  pointRadius: function pointRadius(_) {
	    if ((_ = +_) !== this._radius) this._radius = _, this._circle = null;
	    return this;
	  },
	  polygonStart: function polygonStart() {
	    this._line = 0;
	  },
	  polygonEnd: function polygonEnd() {
	    this._line = NaN;
	  },
	  lineStart: function lineStart() {
	    this._point = 0;
	  },
	  lineEnd: function lineEnd() {
	    if (this._line === 0) this._string.push("Z");
	    this._point = NaN;
	  },
	  point: function point(x, y) {
	    switch (this._point) {
	      case 0:
	        {
	          this._string.push("M", x, ",", y);

	          this._point = 1;
	          break;
	        }

	      case 1:
	        {
	          this._string.push("L", x, ",", y);

	          break;
	        }

	      default:
	        {
	          if (this._circle == null) this._circle = circle(this._radius);

	          this._string.push("M", x, ",", y, this._circle);

	          break;
	        }
	    }
	  },
	  result: function result() {
	    if (this._string.length) {
	      var result = this._string.join("");

	      this._string = [];
	      return result;
	    } else {
	      return null;
	    }
	  }
	};

	function circle(radius) {
	  return "m0," + radius + "a" + radius + "," + radius + " 0 1,1 0," + -2 * radius + "a" + radius + "," + radius + " 0 1,1 0," + 2 * radius + "z";
	}

	function index (projection, context) {
	  var pointRadius = 4.5,
	      projectionStream,
	      contextStream;

	  function path(object) {
	    if (object) {
	      if (typeof pointRadius === "function") contextStream.pointRadius(+pointRadius.apply(this, arguments));
	      geoStream(object, projectionStream(contextStream));
	    }

	    return contextStream.result();
	  }

	  path.area = function (object) {
	    geoStream(object, projectionStream(pathArea));
	    return pathArea.result();
	  };

	  path.measure = function (object) {
	    geoStream(object, projectionStream(pathMeasure));
	    return pathMeasure.result();
	  };

	  path.bounds = function (object) {
	    geoStream(object, projectionStream(boundsStream$1));
	    return boundsStream$1.result();
	  };

	  path.centroid = function (object) {
	    geoStream(object, projectionStream(pathCentroid));
	    return pathCentroid.result();
	  };

	  path.projection = function (_) {
	    return arguments.length ? (projectionStream = _ == null ? (projection = null, identity$3) : (projection = _).stream, path) : projection;
	  };

	  path.context = function (_) {
	    if (!arguments.length) return context;
	    contextStream = _ == null ? (context = null, new PathString()) : new PathContext(context = _);
	    if (typeof pointRadius !== "function") contextStream.pointRadius(pointRadius);
	    return path;
	  };

	  path.pointRadius = function (_) {
	    if (!arguments.length) return pointRadius;
	    pointRadius = typeof _ === "function" ? _ : (contextStream.pointRadius(+_), +_);
	    return path;
	  };

	  return path.projection(projection).context(context);
	}

	function transformer$1(methods) {
	  return function (stream) {
	    var s = new TransformStream();

	    for (var key in methods) {
	      s[key] = methods[key];
	    }

	    s.stream = stream;
	    return s;
	  };
	}

	function TransformStream() {}

	TransformStream.prototype = {
	  constructor: TransformStream,
	  point: function point(x, y) {
	    this.stream.point(x, y);
	  },
	  sphere: function sphere() {
	    this.stream.sphere();
	  },
	  lineStart: function lineStart() {
	    this.stream.lineStart();
	  },
	  lineEnd: function lineEnd() {
	    this.stream.lineEnd();
	  },
	  polygonStart: function polygonStart() {
	    this.stream.polygonStart();
	  },
	  polygonEnd: function polygonEnd() {
	    this.stream.polygonEnd();
	  }
	};

	function fit(projection, fitBounds, object) {
	  var clip = projection.clipExtent && projection.clipExtent();
	  projection.scale(150).translate([0, 0]);
	  if (clip != null) projection.clipExtent(null);
	  geoStream(object, projection.stream(boundsStream$1));
	  fitBounds(boundsStream$1.result());
	  if (clip != null) projection.clipExtent(clip);
	  return projection;
	}

	function fitExtent(projection, extent, object) {
	  return fit(projection, function (b) {
	    var w = extent[1][0] - extent[0][0],
	        h = extent[1][1] - extent[0][1],
	        k = Math.min(w / (b[1][0] - b[0][0]), h / (b[1][1] - b[0][1])),
	        x = +extent[0][0] + (w - k * (b[1][0] + b[0][0])) / 2,
	        y = +extent[0][1] + (h - k * (b[1][1] + b[0][1])) / 2;
	    projection.scale(150 * k).translate([x, y]);
	  }, object);
	}
	function fitSize(projection, size, object) {
	  return fitExtent(projection, [[0, 0], size], object);
	}
	function fitWidth(projection, width, object) {
	  return fit(projection, function (b) {
	    var w = +width,
	        k = w / (b[1][0] - b[0][0]),
	        x = (w - k * (b[1][0] + b[0][0])) / 2,
	        y = -k * b[0][1];
	    projection.scale(150 * k).translate([x, y]);
	  }, object);
	}
	function fitHeight(projection, height, object) {
	  return fit(projection, function (b) {
	    var h = +height,
	        k = h / (b[1][1] - b[0][1]),
	        x = -k * b[0][0],
	        y = (h - k * (b[1][1] + b[0][1])) / 2;
	    projection.scale(150 * k).translate([x, y]);
	  }, object);
	}

	function identity$2 () {
	  var k = 1,
	      tx = 0,
	      ty = 0,
	      sx = 1,
	      sy = 1,
	      // scale, translate and reflect
	  alpha = 0,
	      ca,
	      sa,
	      // angle
	  x0 = null,
	      y0,
	      x1,
	      y1,
	      // clip extent
	  kx = 1,
	      ky = 1,
	      transform = transformer$1({
	    point: function point(x, y) {
	      var p = projection([x, y]);
	      this.stream.point(p[0], p[1]);
	    }
	  }),
	      postclip = identity$3,
	      cache,
	      cacheStream;

	  function reset() {
	    kx = k * sx;
	    ky = k * sy;
	    cache = cacheStream = null;
	    return projection;
	  }

	  function projection(p) {
	    var x = p[0] * kx,
	        y = p[1] * ky;

	    if (alpha) {
	      var t = y * ca - x * sa;
	      x = x * ca + y * sa;
	      y = t;
	    }

	    return [x + tx, y + ty];
	  }

	  projection.invert = function (p) {
	    var x = p[0] - tx,
	        y = p[1] - ty;

	    if (alpha) {
	      var t = y * ca + x * sa;
	      x = x * ca - y * sa;
	      y = t;
	    }

	    return [x / kx, y / ky];
	  };

	  projection.stream = function (stream) {
	    return cache && cacheStream === stream ? cache : cache = transform(postclip(cacheStream = stream));
	  };

	  projection.postclip = function (_) {
	    return arguments.length ? (postclip = _, x0 = y0 = x1 = y1 = null, reset()) : postclip;
	  };

	  projection.clipExtent = function (_) {
	    return arguments.length ? (postclip = _ == null ? (x0 = y0 = x1 = y1 = null, identity$3) : clipRectangle(x0 = +_[0][0], y0 = +_[0][1], x1 = +_[1][0], y1 = +_[1][1]), reset()) : x0 == null ? null : [[x0, y0], [x1, y1]];
	  };

	  projection.scale = function (_) {
	    return arguments.length ? (k = +_, reset()) : k;
	  };

	  projection.translate = function (_) {
	    return arguments.length ? (tx = +_[0], ty = +_[1], reset()) : [tx, ty];
	  };

	  projection.angle = function (_) {
	    return arguments.length ? (alpha = _ % 360 * radians, sa = sin$1(alpha), ca = cos$1(alpha), reset()) : alpha * degrees;
	  };

	  projection.reflectX = function (_) {
	    return arguments.length ? (sx = _ ? -1 : 1, reset()) : sx < 0;
	  };

	  projection.reflectY = function (_) {
	    return arguments.length ? (sy = _ ? -1 : 1, reset()) : sy < 0;
	  };

	  projection.fitExtent = function (extent, object) {
	    return fitExtent(projection, extent, object);
	  };

	  projection.fitSize = function (size, object) {
	    return fitSize(projection, size, object);
	  };

	  projection.fitWidth = function (width, object) {
	    return fitWidth(projection, width, object);
	  };

	  projection.fitHeight = function (height, object) {
	    return fitHeight(projection, height, object);
	  };

	  return projection;
	}

	function initRange(domain, range) {
	  switch (arguments.length) {
	    case 0:
	      break;

	    case 1:
	      this.range(domain);
	      break;

	    default:
	      this.range(range).domain(domain);
	      break;
	  }

	  return this;
	}

	function constants(x) {
	  return function () {
	    return x;
	  };
	}

	function number(x) {
	  return +x;
	}

	var unit = [0, 1];
	function identity$1(x) {
	  return x;
	}

	function normalize(a, b) {
	  return (b -= a = +a) ? function (x) {
	    return (x - a) / b;
	  } : constants(isNaN(b) ? NaN : 0.5);
	}

	function clamper(a, b) {
	  var t;
	  if (a > b) t = a, a = b, b = t;
	  return function (x) {
	    return Math.max(a, Math.min(b, x));
	  };
	} // normalize(a, b)(x) takes a domain value x in [a,b] and returns the corresponding parameter t in [0,1].
	// interpolate(a, b)(t) takes a parameter t in [0,1] and returns the corresponding range value x in [a,b].


	function bimap(domain, range, interpolate) {
	  var d0 = domain[0],
	      d1 = domain[1],
	      r0 = range[0],
	      r1 = range[1];
	  if (d1 < d0) d0 = normalize(d1, d0), r0 = interpolate(r1, r0);else d0 = normalize(d0, d1), r0 = interpolate(r0, r1);
	  return function (x) {
	    return r0(d0(x));
	  };
	}

	function polymap(domain, range, interpolate) {
	  var j = Math.min(domain.length, range.length) - 1,
	      d = new Array(j),
	      r = new Array(j),
	      i = -1; // Reverse descending domains.

	  if (domain[j] < domain[0]) {
	    domain = domain.slice().reverse();
	    range = range.slice().reverse();
	  }

	  while (++i < j) {
	    d[i] = normalize(domain[i], domain[i + 1]);
	    r[i] = interpolate(range[i], range[i + 1]);
	  }

	  return function (x) {
	    var i = bisect(domain, x, 1, j) - 1;
	    return r[i](d[i](x));
	  };
	}

	function copy(source, target) {
	  return target.domain(source.domain()).range(source.range()).interpolate(source.interpolate()).clamp(source.clamp()).unknown(source.unknown());
	}
	function transformer() {
	  var domain = unit,
	      range = unit,
	      interpolate = interpolate$1,
	      transform,
	      untransform,
	      unknown,
	      clamp = identity$1,
	      piecewise,
	      output,
	      input;

	  function rescale() {
	    var n = Math.min(domain.length, range.length);
	    if (clamp !== identity$1) clamp = clamper(domain[0], domain[n - 1]);
	    piecewise = n > 2 ? polymap : bimap;
	    output = input = null;
	    return scale;
	  }

	  function scale(x) {
	    return x == null || isNaN(x = +x) ? unknown : (output || (output = piecewise(domain.map(transform), range, interpolate)))(transform(clamp(x)));
	  }

	  scale.invert = function (y) {
	    return clamp(untransform((input || (input = piecewise(range, domain.map(transform), interpolateNumber)))(y)));
	  };

	  scale.domain = function (_) {
	    return arguments.length ? (domain = Array.from(_, number), rescale()) : domain.slice();
	  };

	  scale.range = function (_) {
	    return arguments.length ? (range = Array.from(_), rescale()) : range.slice();
	  };

	  scale.rangeRound = function (_) {
	    return range = Array.from(_), interpolate = interpolateRound, rescale();
	  };

	  scale.clamp = function (_) {
	    return arguments.length ? (clamp = _ ? true : identity$1, rescale()) : clamp !== identity$1;
	  };

	  scale.interpolate = function (_) {
	    return arguments.length ? (interpolate = _, rescale()) : interpolate;
	  };

	  scale.unknown = function (_) {
	    return arguments.length ? (unknown = _, scale) : unknown;
	  };

	  return function (t, u) {
	    transform = t, untransform = u;
	    return rescale();
	  };
	}
	function continuous() {
	  return transformer()(identity$1, identity$1);
	}

	function tickFormat(start, stop, count, specifier) {
	  var step = tickStep(start, stop, count),
	      precision;
	  specifier = formatSpecifier(specifier == null ? ",f" : specifier);

	  switch (specifier.type) {
	    case "s":
	      {
	        var value = Math.max(Math.abs(start), Math.abs(stop));
	        if (specifier.precision == null && !isNaN(precision = precisionPrefix(step, value))) specifier.precision = precision;
	        return formatPrefix(specifier, value);
	      }

	    case "":
	    case "e":
	    case "g":
	    case "p":
	    case "r":
	      {
	        if (specifier.precision == null && !isNaN(precision = precisionRound(step, Math.max(Math.abs(start), Math.abs(stop))))) specifier.precision = precision - (specifier.type === "e");
	        break;
	      }

	    case "f":
	    case "%":
	      {
	        if (specifier.precision == null && !isNaN(precision = precisionFixed(step))) specifier.precision = precision - (specifier.type === "%") * 2;
	        break;
	      }
	  }

	  return format(specifier);
	}

	function linearish(scale) {
	  var domain = scale.domain;

	  scale.ticks = function (count) {
	    var d = domain();
	    return ticks(d[0], d[d.length - 1], count == null ? 10 : count);
	  };

	  scale.tickFormat = function (count, specifier) {
	    var d = domain();
	    return tickFormat(d[0], d[d.length - 1], count == null ? 10 : count, specifier);
	  };

	  scale.nice = function (count) {
	    if (count == null) count = 10;
	    var d = domain();
	    var i0 = 0;
	    var i1 = d.length - 1;
	    var start = d[i0];
	    var stop = d[i1];
	    var prestep;
	    var step;
	    var maxIter = 10;

	    if (stop < start) {
	      step = start, start = stop, stop = step;
	      step = i0, i0 = i1, i1 = step;
	    }

	    while (maxIter-- > 0) {
	      step = tickIncrement(start, stop, count);

	      if (step === prestep) {
	        d[i0] = start;
	        d[i1] = stop;
	        return domain(d);
	      } else if (step > 0) {
	        start = Math.floor(start / step) * step;
	        stop = Math.ceil(stop / step) * step;
	      } else if (step < 0) {
	        start = Math.ceil(start * step) / step;
	        stop = Math.floor(stop * step) / step;
	      } else {
	        break;
	      }

	      prestep = step;
	    }

	    return scale;
	  };

	  return scale;
	}
	function linear() {
	  var scale = continuous();

	  scale.copy = function () {
	    return copy(scale, linear());
	  };

	  initRange.apply(scale, arguments);
	  return linearish(scale);
	}

	function colors (specifier) {
	  var n = specifier.length / 6 | 0,
	      colors = new Array(n),
	      i = 0;

	  while (i < n) {
	    colors[i] = "#" + specifier.slice(i * 6, ++i * 6);
	  }

	  return colors;
	}

	var Set1 = colors("e41a1c377eb84daf4a984ea3ff7f00ffff33a65628f781bf999999");

	function constant (x) {
	  return function constant() {
	    return x;
	  };
	}

	var abs = Math.abs;
	var atan2 = Math.atan2;
	var cos = Math.cos;
	var max = Math.max;
	var min = Math.min;
	var sin = Math.sin;
	var sqrt = Math.sqrt;
	var epsilon = 1e-12;
	var pi = Math.PI;
	var halfPi = pi / 2;
	var tau = 2 * pi;
	function acos(x) {
	  return x > 1 ? 0 : x < -1 ? pi : Math.acos(x);
	}
	function asin(x) {
	  return x >= 1 ? halfPi : x <= -1 ? -halfPi : Math.asin(x);
	}

	function arcInnerRadius(d) {
	  return d.innerRadius;
	}

	function arcOuterRadius(d) {
	  return d.outerRadius;
	}

	function arcStartAngle(d) {
	  return d.startAngle;
	}

	function arcEndAngle(d) {
	  return d.endAngle;
	}

	function arcPadAngle(d) {
	  return d && d.padAngle; // Note: optional!
	}

	function intersect(x0, y0, x1, y1, x2, y2, x3, y3) {
	  var x10 = x1 - x0,
	      y10 = y1 - y0,
	      x32 = x3 - x2,
	      y32 = y3 - y2,
	      t = y32 * x10 - x32 * y10;
	  if (t * t < epsilon) return;
	  t = (x32 * (y0 - y2) - y32 * (x0 - x2)) / t;
	  return [x0 + t * x10, y0 + t * y10];
	} // Compute perpendicular offset line of length rc.
	// http://mathworld.wolfram.com/Circle-LineIntersection.html


	function cornerTangents(x0, y0, x1, y1, r1, rc, cw) {
	  var x01 = x0 - x1,
	      y01 = y0 - y1,
	      lo = (cw ? rc : -rc) / sqrt(x01 * x01 + y01 * y01),
	      ox = lo * y01,
	      oy = -lo * x01,
	      x11 = x0 + ox,
	      y11 = y0 + oy,
	      x10 = x1 + ox,
	      y10 = y1 + oy,
	      x00 = (x11 + x10) / 2,
	      y00 = (y11 + y10) / 2,
	      dx = x10 - x11,
	      dy = y10 - y11,
	      d2 = dx * dx + dy * dy,
	      r = r1 - rc,
	      D = x11 * y10 - x10 * y11,
	      d = (dy < 0 ? -1 : 1) * sqrt(max(0, r * r * d2 - D * D)),
	      cx0 = (D * dy - dx * d) / d2,
	      cy0 = (-D * dx - dy * d) / d2,
	      cx1 = (D * dy + dx * d) / d2,
	      cy1 = (-D * dx + dy * d) / d2,
	      dx0 = cx0 - x00,
	      dy0 = cy0 - y00,
	      dx1 = cx1 - x00,
	      dy1 = cy1 - y00; // Pick the closer of the two intersection points.
	  // TODO Is there a faster way to determine which intersection to use?

	  if (dx0 * dx0 + dy0 * dy0 > dx1 * dx1 + dy1 * dy1) cx0 = cx1, cy0 = cy1;
	  return {
	    cx: cx0,
	    cy: cy0,
	    x01: -ox,
	    y01: -oy,
	    x11: cx0 * (r1 / r - 1),
	    y11: cy0 * (r1 / r - 1)
	  };
	}

	function arc () {
	  var innerRadius = arcInnerRadius,
	      outerRadius = arcOuterRadius,
	      cornerRadius = constant(0),
	      padRadius = null,
	      startAngle = arcStartAngle,
	      endAngle = arcEndAngle,
	      padAngle = arcPadAngle,
	      context = null;

	  function arc() {
	    var buffer,
	        r,
	        r0 = +innerRadius.apply(this, arguments),
	        r1 = +outerRadius.apply(this, arguments),
	        a0 = startAngle.apply(this, arguments) - halfPi,
	        a1 = endAngle.apply(this, arguments) - halfPi,
	        da = abs(a1 - a0),
	        cw = a1 > a0;
	    if (!context) context = buffer = path(); // Ensure that the outer radius is always larger than the inner radius.

	    if (r1 < r0) r = r1, r1 = r0, r0 = r; // Is it a point?

	    if (!(r1 > epsilon)) context.moveTo(0, 0); // Or is it a circle or annulus?
	    else if (da > tau - epsilon) {
	      context.moveTo(r1 * cos(a0), r1 * sin(a0));
	      context.arc(0, 0, r1, a0, a1, !cw);

	      if (r0 > epsilon) {
	        context.moveTo(r0 * cos(a1), r0 * sin(a1));
	        context.arc(0, 0, r0, a1, a0, cw);
	      }
	    } // Or is it a circular or annular sector?
	    else {
	      var a01 = a0,
	          a11 = a1,
	          a00 = a0,
	          a10 = a1,
	          da0 = da,
	          da1 = da,
	          ap = padAngle.apply(this, arguments) / 2,
	          rp = ap > epsilon && (padRadius ? +padRadius.apply(this, arguments) : sqrt(r0 * r0 + r1 * r1)),
	          rc = min(abs(r1 - r0) / 2, +cornerRadius.apply(this, arguments)),
	          rc0 = rc,
	          rc1 = rc,
	          t0,
	          t1; // Apply padding? Note that since r1 ≥ r0, da1 ≥ da0.

	      if (rp > epsilon) {
	        var p0 = asin(rp / r0 * sin(ap)),
	            p1 = asin(rp / r1 * sin(ap));
	        if ((da0 -= p0 * 2) > epsilon) p0 *= cw ? 1 : -1, a00 += p0, a10 -= p0;else da0 = 0, a00 = a10 = (a0 + a1) / 2;
	        if ((da1 -= p1 * 2) > epsilon) p1 *= cw ? 1 : -1, a01 += p1, a11 -= p1;else da1 = 0, a01 = a11 = (a0 + a1) / 2;
	      }

	      var x01 = r1 * cos(a01),
	          y01 = r1 * sin(a01),
	          x10 = r0 * cos(a10),
	          y10 = r0 * sin(a10); // Apply rounded corners?

	      if (rc > epsilon) {
	        var x11 = r1 * cos(a11),
	            y11 = r1 * sin(a11),
	            x00 = r0 * cos(a00),
	            y00 = r0 * sin(a00),
	            oc; // Restrict the corner radius according to the sector angle.

	        if (da < pi && (oc = intersect(x01, y01, x00, y00, x11, y11, x10, y10))) {
	          var ax = x01 - oc[0],
	              ay = y01 - oc[1],
	              bx = x11 - oc[0],
	              by = y11 - oc[1],
	              kc = 1 / sin(acos((ax * bx + ay * by) / (sqrt(ax * ax + ay * ay) * sqrt(bx * bx + by * by))) / 2),
	              lc = sqrt(oc[0] * oc[0] + oc[1] * oc[1]);
	          rc0 = min(rc, (r0 - lc) / (kc - 1));
	          rc1 = min(rc, (r1 - lc) / (kc + 1));
	        }
	      } // Is the sector collapsed to a line?


	      if (!(da1 > epsilon)) context.moveTo(x01, y01); // Does the sector’s outer ring have rounded corners?
	      else if (rc1 > epsilon) {
	        t0 = cornerTangents(x00, y00, x01, y01, r1, rc1, cw);
	        t1 = cornerTangents(x11, y11, x10, y10, r1, rc1, cw);
	        context.moveTo(t0.cx + t0.x01, t0.cy + t0.y01); // Have the corners merged?

	        if (rc1 < rc) context.arc(t0.cx, t0.cy, rc1, atan2(t0.y01, t0.x01), atan2(t1.y01, t1.x01), !cw); // Otherwise, draw the two corners and the ring.
	        else {
	          context.arc(t0.cx, t0.cy, rc1, atan2(t0.y01, t0.x01), atan2(t0.y11, t0.x11), !cw);
	          context.arc(0, 0, r1, atan2(t0.cy + t0.y11, t0.cx + t0.x11), atan2(t1.cy + t1.y11, t1.cx + t1.x11), !cw);
	          context.arc(t1.cx, t1.cy, rc1, atan2(t1.y11, t1.x11), atan2(t1.y01, t1.x01), !cw);
	        }
	      } // Or is the outer ring just a circular arc?
	      else context.moveTo(x01, y01), context.arc(0, 0, r1, a01, a11, !cw); // Is there no inner ring, and it’s a circular sector?
	      // Or perhaps it’s an annular sector collapsed due to padding?

	      if (!(r0 > epsilon) || !(da0 > epsilon)) context.lineTo(x10, y10); // Does the sector’s inner ring (or point) have rounded corners?
	      else if (rc0 > epsilon) {
	        t0 = cornerTangents(x10, y10, x11, y11, r0, -rc0, cw);
	        t1 = cornerTangents(x01, y01, x00, y00, r0, -rc0, cw);
	        context.lineTo(t0.cx + t0.x01, t0.cy + t0.y01); // Have the corners merged?

	        if (rc0 < rc) context.arc(t0.cx, t0.cy, rc0, atan2(t0.y01, t0.x01), atan2(t1.y01, t1.x01), !cw); // Otherwise, draw the two corners and the ring.
	        else {
	          context.arc(t0.cx, t0.cy, rc0, atan2(t0.y01, t0.x01), atan2(t0.y11, t0.x11), !cw);
	          context.arc(0, 0, r0, atan2(t0.cy + t0.y11, t0.cx + t0.x11), atan2(t1.cy + t1.y11, t1.cx + t1.x11), cw);
	          context.arc(t1.cx, t1.cy, rc0, atan2(t1.y11, t1.x11), atan2(t1.y01, t1.x01), !cw);
	        }
	      } // Or is the inner ring just a circular arc?
	      else context.arc(0, 0, r0, a10, a00, cw);
	    }
	    context.closePath();
	    if (buffer) return context = null, buffer + "" || null;
	  }

	  arc.centroid = function () {
	    var r = (+innerRadius.apply(this, arguments) + +outerRadius.apply(this, arguments)) / 2,
	        a = (+startAngle.apply(this, arguments) + +endAngle.apply(this, arguments)) / 2 - pi / 2;
	    return [cos(a) * r, sin(a) * r];
	  };

	  arc.innerRadius = function (_) {
	    return arguments.length ? (innerRadius = typeof _ === "function" ? _ : constant(+_), arc) : innerRadius;
	  };

	  arc.outerRadius = function (_) {
	    return arguments.length ? (outerRadius = typeof _ === "function" ? _ : constant(+_), arc) : outerRadius;
	  };

	  arc.cornerRadius = function (_) {
	    return arguments.length ? (cornerRadius = typeof _ === "function" ? _ : constant(+_), arc) : cornerRadius;
	  };

	  arc.padRadius = function (_) {
	    return arguments.length ? (padRadius = _ == null ? null : typeof _ === "function" ? _ : constant(+_), arc) : padRadius;
	  };

	  arc.startAngle = function (_) {
	    return arguments.length ? (startAngle = typeof _ === "function" ? _ : constant(+_), arc) : startAngle;
	  };

	  arc.endAngle = function (_) {
	    return arguments.length ? (endAngle = typeof _ === "function" ? _ : constant(+_), arc) : endAngle;
	  };

	  arc.padAngle = function (_) {
	    return arguments.length ? (padAngle = typeof _ === "function" ? _ : constant(+_), arc) : padAngle;
	  };

	  arc.context = function (_) {
	    return arguments.length ? (context = _ == null ? null : _, arc) : context;
	  };

	  return arc;
	}

	function array (x) {
	  return _typeof(x) === "object" && "length" in x ? x // Array, TypedArray, NodeList, array-like
	  : Array.from(x); // Map, Set, iterable, string, or anything else
	}

	function Linear(context) {
	  this._context = context;
	}

	Linear.prototype = {
	  areaStart: function areaStart() {
	    this._line = 0;
	  },
	  areaEnd: function areaEnd() {
	    this._line = NaN;
	  },
	  lineStart: function lineStart() {
	    this._point = 0;
	  },
	  lineEnd: function lineEnd() {
	    if (this._line || this._line !== 0 && this._point === 1) this._context.closePath();
	    this._line = 1 - this._line;
	  },
	  point: function point(x, y) {
	    x = +x, y = +y;

	    switch (this._point) {
	      case 0:
	        this._point = 1;
	        this._line ? this._context.lineTo(x, y) : this._context.moveTo(x, y);
	        break;

	      case 1:
	        this._point = 2;
	      // falls through

	      default:
	        this._context.lineTo(x, y);

	        break;
	    }
	  }
	};
	function curveLinear (context) {
	  return new Linear(context);
	}

	function x(p) {
	  return p[0];
	}
	function y(p) {
	  return p[1];
	}

	function line (x$1, y$1) {
	  var defined = constant(true),
	      context = null,
	      curve = curveLinear,
	      output = null;
	  x$1 = typeof x$1 === "function" ? x$1 : x$1 === undefined ? x : constant(x$1);
	  y$1 = typeof y$1 === "function" ? y$1 : y$1 === undefined ? y : constant(y$1);

	  function line(data) {
	    var i,
	        n = (data = array(data)).length,
	        d,
	        defined0 = false,
	        buffer;
	    if (context == null) output = curve(buffer = path());

	    for (i = 0; i <= n; ++i) {
	      if (!(i < n && defined(d = data[i], i, data)) === defined0) {
	        if (defined0 = !defined0) output.lineStart();else output.lineEnd();
	      }

	      if (defined0) output.point(+x$1(d, i, data), +y$1(d, i, data));
	    }

	    if (buffer) return output = null, buffer + "" || null;
	  }

	  line.x = function (_) {
	    return arguments.length ? (x$1 = typeof _ === "function" ? _ : constant(+_), line) : x$1;
	  };

	  line.y = function (_) {
	    return arguments.length ? (y$1 = typeof _ === "function" ? _ : constant(+_), line) : y$1;
	  };

	  line.defined = function (_) {
	    return arguments.length ? (defined = typeof _ === "function" ? _ : constant(!!_), line) : defined;
	  };

	  line.curve = function (_) {
	    return arguments.length ? (curve = _, context != null && (output = curve(context)), line) : curve;
	  };

	  line.context = function (_) {
	    return arguments.length ? (_ == null ? context = output = null : output = curve(context = _), line) : context;
	  };

	  return line;
	}

	function descending (a, b) {
	  return b < a ? -1 : b > a ? 1 : b >= a ? 0 : NaN;
	}

	function identity (d) {
	  return d;
	}

	function pie () {
	  var value = identity,
	      sortValues = descending,
	      sort = null,
	      startAngle = constant(0),
	      endAngle = constant(tau),
	      padAngle = constant(0);

	  function pie(data) {
	    var i,
	        n = (data = array(data)).length,
	        j,
	        k,
	        sum = 0,
	        index = new Array(n),
	        arcs = new Array(n),
	        a0 = +startAngle.apply(this, arguments),
	        da = Math.min(tau, Math.max(-tau, endAngle.apply(this, arguments) - a0)),
	        a1,
	        p = Math.min(Math.abs(da) / n, padAngle.apply(this, arguments)),
	        pa = p * (da < 0 ? -1 : 1),
	        v;

	    for (i = 0; i < n; ++i) {
	      if ((v = arcs[index[i] = i] = +value(data[i], i, data)) > 0) {
	        sum += v;
	      }
	    } // Optionally sort the arcs by previously-computed values or by data.


	    if (sortValues != null) index.sort(function (i, j) {
	      return sortValues(arcs[i], arcs[j]);
	    });else if (sort != null) index.sort(function (i, j) {
	      return sort(data[i], data[j]);
	    }); // Compute the arcs! They are stored in the original data's order.

	    for (i = 0, k = sum ? (da - n * pa) / sum : 0; i < n; ++i, a0 = a1) {
	      j = index[i], v = arcs[j], a1 = a0 + (v > 0 ? v * k : 0) + pa, arcs[j] = {
	        data: data[j],
	        index: i,
	        value: v,
	        startAngle: a0,
	        endAngle: a1,
	        padAngle: p
	      };
	    }

	    return arcs;
	  }

	  pie.value = function (_) {
	    return arguments.length ? (value = typeof _ === "function" ? _ : constant(+_), pie) : value;
	  };

	  pie.sortValues = function (_) {
	    return arguments.length ? (sortValues = _, sort = null, pie) : sortValues;
	  };

	  pie.sort = function (_) {
	    return arguments.length ? (sort = _, sortValues = null, pie) : sort;
	  };

	  pie.startAngle = function (_) {
	    return arguments.length ? (startAngle = typeof _ === "function" ? _ : constant(+_), pie) : startAngle;
	  };

	  pie.endAngle = function (_) {
	    return arguments.length ? (endAngle = typeof _ === "function" ? _ : constant(+_), pie) : endAngle;
	  };

	  pie.padAngle = function (_) {
	    return arguments.length ? (padAngle = typeof _ === "function" ? _ : constant(+_), pie) : padAngle;
	  };

	  return pie;
	}

	var _templateObject$i, _templateObject2$g, _templateObject3$2, _templateObject4$2, _templateObject5$2, _templateObject6$1, _templateObject7$1, _templateObject8$1, _templateObject9$1;
	/*
	  DecidableElement Base Class - Not intended for instantiation!
	  <decidable-element>
	*/

	var DecidableElement = /*#__PURE__*/function (_LitElement) {
	  _inherits(DecidableElement, _LitElement);

	  var _super = _createSuper(DecidableElement);

	  function DecidableElement() {
	    var _this;

	    _classCallCheck(this, DecidableElement);

	    _this = _super.call(this);
	    _this.uniqueId = "decidable-".concat(DecidableElement.uniqueId);
	    return _this;
	  }

	  _createClass(DecidableElement, [{
	    key: "getComputedStyleValue",
	    value: function getComputedStyleValue(property) {
	      // HACK: IE11 requires use of polyfill interface to get custom property value in Javascript
	      if (window.ShadyCSS) {
	        return window.ShadyCSS.getComputedStyleValue(this, property);
	      }

	      return getComputedStyle(this).getPropertyValue(property);
	    }
	  }, {
	    key: "firstUpdated",
	    value: function firstUpdated(changedProperties) {
	      _get(_getPrototypeOf(DecidableElement.prototype), "firstUpdated", this).call(this, changedProperties); // Use focus highlighting if keyboard is used at all


	      select(this.renderRoot.host).classed('keyboard', true).on('mousemove.keyboard touchstart.keyboard', function (event) {
	        var element = event.currentTarget;
	        select(element.renderRoot.host).classed('keyboard', false).on('mousemove.keyboard touchstart.keyboard', null);
	      }).on('keydown.keyboard', function (event) {
	        var element = event.currentTarget;
	        select(element.renderRoot.host).classed('keyboard', true).on('keydown.keyboard mousemove.keyboard touchstart.keyboard', null);
	      });
	    }
	  }], [{
	    key: "uniqueId",
	    get: // HACK: Create a unique ID for each DecidableElement
	    // This is needed because Edge/IE11 don't have real Shadow DOM, so IDs leak
	    // out of elements and collide if there is more than one of an element on a
	    // page. Known issue for checkbox/switches and the id/for pattern on <input>
	    // and <label>
	    function get() {
	      DecidableElement.ID += 1;
	      return DecidableElement.ID;
	    }
	  }, {
	    key: "greys",
	    get: function get() {
	      var grey = '#999999';
	      var greys = {};
	      greys.white = '#ffffff';
	      greys.light75 = interpolateRgb(grey, '#ffffff')(0.75);
	      greys.light50 = interpolateRgb(grey, '#ffffff')(0.5);
	      greys.light25 = interpolateRgb(grey, '#ffffff')(0.25);
	      greys.grey = grey;
	      greys.dark25 = interpolateRgb(grey, '#000000')(0.25);
	      greys.dark50 = interpolateRgb(grey, '#000000')(0.5);
	      greys.dark75 = interpolateRgb(grey, '#000000')(0.75);
	      greys.black = '#000000';
	      return greys;
	    }
	  }, {
	    key: "shadows",
	    get: function get() {
	      // Material Design elevation styles
	      // References:
	      //   https://github.com/material-components/material-components-web/tree/master/packages/mdc-elevation
	      //   https://codepen.io/hanger/pen/yOGvQp

	      /* eslint-disable key-spacing, object-curly-newline */
	      return {
	        elevations: [0, 2, 4, 8, 16],
	        baselineColor: '#000000',
	        baselineColorString: '0, 0, 0',
	        inverseBaselineColor: '#FFFFFF',
	        inverseBaselineColorString: '255, 255, 255',
	        opacityUmbra: 0.2,
	        opacityPenumbra: 0.14,
	        opacityAmbient: 0.12,
	        opacityBoost: 0.2,
	        mapUmbra: {
	          // $mdc-elevation-umbra-map
	          0: {
	            x: 0,
	            y: 0,
	            b: 0,
	            s: 0
	          },
	          // offset-x, offset-y, blur-radius, spread-radius
	          2: {
	            x: 0,
	            y: 3,
	            b: 1,
	            s: -2
	          },
	          4: {
	            x: 0,
	            y: 2,
	            b: 4,
	            s: -1
	          },
	          8: {
	            x: 0,
	            y: 5,
	            b: 5,
	            s: -3
	          },
	          16: {
	            x: 0,
	            y: 8,
	            b: 10,
	            s: -5
	          }
	        },
	        mapPenumbra: {
	          // $mdc-elevation-penumbra-map
	          0: {
	            x: 0,
	            y: 0,
	            b: 0,
	            s: 0
	          },
	          // offset-x, offset-y, blur-radius, spread-radius
	          2: {
	            x: 0,
	            y: 2,
	            b: 2,
	            s: 0
	          },
	          4: {
	            x: 0,
	            y: 4,
	            b: 5,
	            s: 0
	          },
	          8: {
	            x: 0,
	            y: 8,
	            b: 10,
	            s: 1
	          },
	          16: {
	            x: 0,
	            y: 16,
	            b: 24,
	            s: 2
	          }
	        },
	        mapAmbient: {
	          // $mdc-elevation-ambient-map
	          0: {
	            x: 0,
	            y: 0,
	            b: 0,
	            s: 0
	          },
	          // offset-x, offset-y, blur-radius, spread-radius
	          2: {
	            x: 0,
	            y: 1,
	            b: 5,
	            s: 0
	          },
	          4: {
	            x: 0,
	            y: 1,
	            b: 10,
	            s: 0
	          },
	          8: {
	            x: 0,
	            y: 3,
	            b: 14,
	            s: 2
	          },
	          16: {
	            x: 0,
	            y: 6,
	            b: 30,
	            s: 5
	          }
	        }
	      };
	      /* eslint-enable key-spacing, object-curly-newline */
	    }
	  }, {
	    key: "cssBoxShadow",
	    value: function cssBoxShadow(elevation) {
	      var rotate = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;
	      var inverse = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;
	      var umbraO = this.shadows.opacityUmbra + this.shadows.opacityBoost;
	      var penumbraO = this.shadows.opacityPenumbra + this.shadows.opacityBoost;
	      var ambientO = this.shadows.opacityAmbient + this.shadows.opacityBoost;
	      var umbraC = inverse ? "rgba(".concat(this.shadows.inverseBaselineColorString, ", ").concat(umbraO, ")") : "rgba(".concat(this.shadows.baselineColorString, ", ").concat(umbraO, ")");
	      var penumbraC = inverse ? "rgba(".concat(this.shadows.inverseBaselineColorString, ", ").concat(penumbraO, ")") : "rgba(".concat(this.shadows.baselineColorString, ", ").concat(penumbraO, ")");
	      var ambientC = inverse ? "rgba(".concat(this.shadows.inverseBaselineColorString, ", ").concat(ambientO, ")") : "rgba(".concat(this.shadows.baselineColorString, ", ").concat(ambientO, ")");
	      var umbraM = this.shadows.mapUmbra[elevation];
	      var penumbraM = this.shadows.mapPenumbra[elevation];
	      var ambientM = this.shadows.mapAmbient[elevation];
	      var umbraS = rotate ? "".concat(-umbraM.y, "px ").concat(umbraM.y / 2, "px ").concat(umbraM.b, "px ").concat(umbraM.s, "px") : "".concat(umbraM.y / 2, "px ").concat(umbraM.y, "px ").concat(umbraM.b, "px ").concat(umbraM.s, "px");
	      var penumbraS = rotate ? "".concat(-penumbraM.y, "px ").concat(penumbraM.y / 2, "px ").concat(penumbraM.b, "px ").concat(penumbraM.s, "px") : "".concat(penumbraM.y / 2, "px ").concat(penumbraM.y, "px ").concat(penumbraM.b, "px ").concat(penumbraM.s, "px");
	      var ambientS = rotate ? "".concat(-ambientM.y, "px ").concat(ambientM.y / 2, "px ").concat(ambientM.b, "px ").concat(ambientM.s, "px") : "".concat(ambientM.y / 2, "px ").concat(ambientM.y, "px ").concat(ambientM.b, "px ").concat(ambientM.s, "px");
	      return "".concat(umbraS, " ").concat(umbraC, ", ").concat(penumbraS, " ").concat(penumbraC, ", ").concat(ambientS, " ").concat(ambientC);
	    }
	  }, {
	    key: "svgFilters",
	    get: function get() {
	      var shadows = DecidableElement.shadows; // eslint-disable-line prefer-destructuring

	      var erodeRadius = 1;
	      var filters = shadows.elevations.map(function (z) {
	        return y$1(_templateObject$i || (_templateObject$i = _taggedTemplateLiteral(["\n        <filter id=", " x=\"-250%\" y=\"-250%\" width=\"600%\" height=\"600%\">\n          <feComponentTransfer in=\"SourceAlpha\" result=\"solid\">\n            <feFuncA  type=\"table\" tableValues=\"0 1 1\"/>\n          </feComponentTransfer>\n          <feOffset in=\"solid\" result=\"offU\" dx=", " dy=", " />\n          <feOffset in=\"solid\" result=\"offP\" dx=", " dy=", " />\n          <feOffset in=\"solid\" result=\"offA\" dx=", " dy=", " />\n          ", "\n          ", "\n          ", "\n          <feGaussianBlur in=", " result=\"blurU\" stdDeviation=", " />\n          <feGaussianBlur in=", " result=\"blurP\" stdDeviation=", " />\n          <feGaussianBlur in=", " result=\"blurA\" stdDeviation=", " />\n          <feFlood in=\"SourceGraphic\" result=\"opU\" flood-color=", " flood-opacity=", " />\n          <feFlood in=\"SourceGraphic\" result=\"opP\" flood-color=", " flood-opacity=", " />\n          <feFlood in=\"SourceGraphic\" result=\"opA\" flood-color=", " flood-opacity=", " />\n          <feComposite in=\"opU\" in2=\"blurU\" result=\"shU\" operator=\"in\" />\n          <feComposite in=\"opP\" in2=\"blurP\" result=\"shP\" operator=\"in\" />\n          <feComposite in=\"opA\" in2=\"blurA\" result=\"shA\" operator=\"in\" />\n          <!-- HACK Edge: Using a dynamic value for erode radius stops Edge from corrupting the \"radius\" value! -->\n          <feMorphology in=\"solid\" result=\"smaller\" operator=\"erode\" radius=", " />\n          <feComposite in=\"shU\" in2=\"smaller\" result=\"finalU\" operator=\"out\" />\n          <feComposite in=\"shP\" in2=\"smaller\" result=\"finalP\" operator=\"out\" />\n          <feComposite in=\"shA\" in2=\"smaller\" result=\"finalA\" operator=\"out\" />\n          <feMerge>\n            <feMergeNode in=\"finalU\" />\n            <feMergeNode in=\"finalP\" />\n            <feMergeNode in=\"finalA\" />\n            <feMergeNode in=\"SourceGraphic\" />\n          </feMerge>\n        </filter>"])), "shadow-".concat(z), shadows.mapUmbra[z].y / 2, shadows.mapUmbra[z].y, shadows.mapPenumbra[z].y / 2, shadows.mapPenumbra[z].y, shadows.mapAmbient[z].y / 2, shadows.mapAmbient[z].y, shadows.mapUmbra[z].s === 0 ? y$1(_templateObject2$g || (_templateObject2$g = _taggedTemplateLiteral([""]))) : y$1(_templateObject3$2 || (_templateObject3$2 = _taggedTemplateLiteral(["<feMorphology in=\"offU\" result=\"spreadU\" operator=", " radius=", " />"])), shadows.mapUmbra[z].s > 0 ? 'dilate' : 'erode', Math.abs(shadows.mapUmbra[z].s)), shadows.mapPenumbra[z].s === 0 ? y$1(_templateObject4$2 || (_templateObject4$2 = _taggedTemplateLiteral([""]))) : y$1(_templateObject5$2 || (_templateObject5$2 = _taggedTemplateLiteral(["<feMorphology in=\"offP\" result=\"spreadP\" operator=", " radius=", " />"])), shadows.mapPenumbra[z].s > 0 ? 'dilate' : 'erode', Math.abs(shadows.mapPenumbra[z].s)), shadows.mapAmbient[z].s === 0 ? y$1(_templateObject6$1 || (_templateObject6$1 = _taggedTemplateLiteral([""]))) : y$1(_templateObject7$1 || (_templateObject7$1 = _taggedTemplateLiteral(["<feMorphology in=\"offA\" result=\"spreadA\" operator=", " radius=", " />"])), shadows.mapAmbient[z].s > 0 ? 'dilate' : 'erode', Math.abs(shadows.mapAmbient[z].s)), shadows.mapUmbra[z].s === 0 ? 'offU' : 'spreadU', shadows.mapUmbra[z].b / 2, shadows.mapPenumbra[z].s === 0 ? 'offP' : 'spreadP', shadows.mapPenumbra[z].b / 2, shadows.mapAmbient[z].s === 0 ? 'offA' : 'spreadA', shadows.mapAmbient[z].b / 2, shadows.baselineColor, shadows.opacityUmbra + shadows.opacityBoost, shadows.baselineColor, shadows.opacityPenumbra + shadows.opacityBoost, shadows.baselineColor, shadows.opacityAmbient + shadows.opacityBoost, erodeRadius);
	      });
	      return y$1(_templateObject8$1 || (_templateObject8$1 = _taggedTemplateLiteral(["\n      <svg class=\"defs\">\n        <defs>\n          ", "\n        </defs>\n      </svg>\n    "])), filters);
	    }
	  }, {
	    key: "styles",
	    get: function get() {
	      return r$2(_templateObject9$1 || (_templateObject9$1 = _taggedTemplateLiteral(["\n      :host {\n        ---shadow-0: var(--shadow-0, ", ");\n        ---shadow-2: var(--shadow-2, ", ");\n        ---shadow-4: var(--shadow-4, ", ");\n        ---shadow-8: var(--shadow-8, ", ");\n\n        ---color-background: var(--color-background, ", ");\n        ---color-border: var(--color-border, ", ");\n        ---color-text: var(--color-text, ", ");\n        ---color-text-inverse: var(--color-text-inverse, ", ");\n        ---color-link: var(--color-link, ", ");\n        ---color-element-background: var(--color-element-background, ", ");\n        ---color-element-disabled: var(--color-element-disabled, ", ");\n        ---color-element-enabled: var(--color-element-enabled, ", ");\n        ---color-element-selected: var(--color-element-selected, ", ");\n        ---color-element-border: var(--color-element-border, ", ");\n        ---color-element-emphasis: var(--color-element-emphasis, ", ");\n\n        ---font-family-base: var(--font-family-base, \"Source Sans\", sans-serif);\n        ---font-family-math: var(--font-family-math, \"Source Serif\", serif);\n\n        ---transition-duration: var(--transition-duration, 500ms);\n\n        font-family: var(---font-family-base);\n      }\n\n      :host,\n      :host *,\n      :host *::before,\n      :host *::after {\n        box-sizing: border-box;\n      }\n\n      .math-greek {\n        font-family: var(---font-family-math);\n        font-style: normal;\n      }\n\n      .math-num {\n        font-family: var(---font-family-base);\n        font-style: normal;\n      }\n\n      .math-var {\n        font-family: var(---font-family-math);\n        font-style: italic;\n      }\n\n      .defs {\n        display: block;\n\n        width: 0;\n        height: 0;\n      }\n    "])), o$3(this.cssBoxShadow(0)), o$3(this.cssBoxShadow(2)), o$3(this.cssBoxShadow(4)), o$3(this.cssBoxShadow(8)), o$3(this.greys.white), o$3(this.greys.light75), o$3(this.greys.dark75), o$3(this.greys.white), o$3(this.greys.dark25), o$3(this.greys.light75), o$3(this.greys.light50), o$3(this.greys.grey), o$3(this.greys.dark25), o$3(this.greys.dark50), o$3(this.greys.dark75));
	    }
	  }]);

	  return DecidableElement;
	}(s); // Static property of DecidableElement!
	DecidableElement.ID = 0;

	var _templateObject$h, _templateObject2$f;

	var DecidableButton = /*#__PURE__*/function (_DecidableElement) {
	  _inherits(DecidableButton, _DecidableElement);

	  var _super = _createSuper(DecidableButton);

	  function DecidableButton() {
	    var _this;

	    _classCallCheck(this, DecidableButton);

	    _this = _super.call(this); // Attributes

	    _this.disabled = false;
	    return _this;
	  }

	  _createClass(DecidableButton, [{
	    key: "render",
	    value: function render() {
	      return $(_templateObject$h || (_templateObject$h = _taggedTemplateLiteral(["\n      <button ?disabled=", ">\n        <slot></slot>\n      </button>\n    "])), this.disabled);
	    }
	  }], [{
	    key: "properties",
	    get: function get() {
	      return {
	        disabled: {
	          attribute: 'disabled',
	          type: Boolean,
	          reflect: true
	        }
	      };
	    }
	  }, {
	    key: "styles",
	    get: function get() {
	      return [_get(_getPrototypeOf(DecidableButton), "styles", this), r$2(_templateObject2$f || (_templateObject2$f = _taggedTemplateLiteral(["\n        :host {\n          margin: 0.25rem;\n        }\n\n        button {\n          width: 100%;\n          height: 100%;\n          padding: 0.375rem 0.75rem;\n\n          font-family: var(---font-family-base);\n          font-size: 1.125rem;\n          line-height: 1.5;\n          color: var(---color-text-inverse);\n\n          border: 0;\n          border-radius: 0.25rem;\n          outline: none;\n        }\n\n        button:disabled {\n          background-color: var(--decidable-button-background-color, var(---color-element-disabled));\n          outline: none;\n          box-shadow: none;\n        }\n\n        button:enabled {\n          cursor: pointer;\n\n          background-color: var(--decidable-button-background-color, var(---color-element-enabled));\n          outline: none;\n          box-shadow: var(---shadow-2);\n        }\n\n        button:enabled:hover {\n          outline: none;\n          box-shadow: var(---shadow-4);\n        }\n\n        button:enabled:active {\n          outline: none;\n          box-shadow: var(---shadow-8);\n        }\n\n        :host(.keyboard) button:enabled:focus {\n          outline: none;\n          box-shadow: var(---shadow-4);\n        }\n\n        :host(.keyboard) button:enabled:focus:active {\n          outline: none;\n          box-shadow: var(---shadow-8);\n        }\n      "])))];
	    }
	  }]);

	  return DecidableButton;
	}(DecidableElement);
	customElements.define('decidable-button', DecidableButton);

	/**
	 * @license
	 * Copyright 2018 Google LLC
	 * SPDX-License-Identifier: BSD-3-Clause
	 */

	var l = function l(_l) {
	  return null != _l ? _l : w;
	};

	var _templateObject$g, _templateObject2$e;

	var DecidableSlider = /*#__PURE__*/function (_DecidableElement) {
	  _inherits(DecidableSlider, _DecidableElement);

	  var _super = _createSuper(DecidableSlider);

	  function DecidableSlider() {
	    var _this;

	    _classCallCheck(this, DecidableSlider);

	    _this = _super.call(this); // Attributes

	    _this.disabled = false;
	    _this.max = undefined;
	    _this.min = undefined;
	    _this.step = undefined;
	    _this.value = undefined;
	    return _this;
	  }

	  _createClass(DecidableSlider, [{
	    key: "changed",
	    value: function changed(event) {
	      this.value = event.target.value;
	      this.dispatchEvent(new CustomEvent('change', {
	        detail: {
	          value: this.value
	        },
	        bubbles: true
	      }));
	    }
	  }, {
	    key: "inputted",
	    value: function inputted(event) {
	      this.value = event.target.value;
	    }
	  }, {
	    key: "render",
	    value: function render() {
	      return $(_templateObject$g || (_templateObject$g = _taggedTemplateLiteral(["\n      <label for=", ">\n        <slot></slot>\n      </label>\n      <div class=\"range\">\n        <input type=\"range\" id=", " min=", " max=", " step=", " .value=", " @change=", " @input=", ">\n      </div>\n      <decidable-spinner min=", " max=", " step=", " .value=", " @input=", "></decidable-spinner>\n    "])), "".concat(this.uniqueId, "-slider"), "".concat(this.uniqueId, "-slider"), l(this.min), l(this.max), l(this.step), this.value, this.changed.bind(this), this.inputted.bind(this), l(this.min), l(this.max), l(this.step), this.value, this.inputted.bind(this));
	    }
	  }], [{
	    key: "properties",
	    get: function get() {
	      return {
	        disabled: {
	          attribute: 'disabled',
	          type: Boolean,
	          reflect: true
	        },
	        max: {
	          attribute: 'max',
	          type: Number,
	          reflect: true
	        },
	        min: {
	          attribute: 'min',
	          type: Number,
	          reflect: true
	        },
	        step: {
	          attribute: 'step',
	          type: Number,
	          reflect: true
	        },
	        value: {
	          attribute: 'value',
	          type: Number,
	          reflect: true
	        }
	      };
	    }
	  }, {
	    key: "styles",
	    get: function get() {
	      return [_get(_getPrototypeOf(DecidableSlider), "styles", this), r$2(_templateObject2$e || (_templateObject2$e = _taggedTemplateLiteral(["\n        :host {\n          ---shadow-2-rotate: var(--shadow-2-rotate, ", ");\n          ---shadow-4-rotate: var(--shadow-4-rotate, ", ");\n          ---shadow-8-rotate: var(--shadow-8-rotate, ", ");\n\n          display: flex;\n\n          flex-direction: column;\n\n          align-items: center;\n          justify-content: center;\n        }\n\n        label {\n          margin: 0.25rem 0.25rem 0;\n        }\n\n        .range {\n          display: inline-block;\n\n          width: 3.5rem;\n          height: 4.75rem;\n          margin: 0 0.25rem 0.25rem;\n        }\n\n        decidable-spinner {\n          --decidable-spinner-input-width: 3.5rem;\n\n          margin: 0 0.25rem 0.25rem;\n        }\n\n        /* Adapted from http://danielstern.ca/range.css/#/ */\n        /* Overall */\n        input[type=range] {\n          width: 4.75rem;\n          height: 3.5rem;\n          padding: 0;\n          margin: 0;\n\n          background-color: unset;\n\n          transform: rotate(-90deg);\n          transform-origin: 2.375rem 2.375rem;\n\n          /* stylelint-disable-next-line property-no-vendor-prefix */\n          -webkit-appearance: none;\n        }\n\n        input[type=range]:enabled {\n          cursor: ns-resize;\n        }\n\n        input[type=range]:focus {\n          outline: none;\n        }\n\n        /* stylelint-disable-next-line no-descending-specificity */ /* stylelint ERROR */\n        input[type=range]::-ms-tooltip {\n          display: none;\n        }\n\n        /* Track */\n        /* stylelint-disable-next-line no-descending-specificity */ /* stylelint ERROR */\n        input[type=range]::-webkit-slider-runnable-track {\n          width: 100%;\n          height: 4px;\n\n          background: var(---color-element-disabled);\n          border: 0;\n          border-radius: 2px;\n          box-shadow: none;\n        }\n\n        input[type=range]:focus::-webkit-slider-runnable-track {\n          background: var(---color-element-disabled);\n        }\n\n        /* stylelint-disable-next-line no-descending-specificity */ /* stylelint ERROR */\n        input[type=range]::-moz-range-track {\n          width: 100%;\n          height: 4px;\n\n          background: var(---color-element-disabled);\n          border: 0;\n          border-radius: 2px;\n          box-shadow: none;\n        }\n\n        /* stylelint-disable-next-line no-descending-specificity */ /* stylelint ERROR */\n        input[type=range]::-ms-track {\n          width: 100%;\n          height: 4px;\n\n          color: transparent;\n\n          background: transparent;\n          border-color: transparent;\n        }\n\n        /* stylelint-disable-next-line no-descending-specificity */ /* stylelint ERROR */\n        input[type=range]::-ms-fill-lower {\n          background: #cccccc;\n          /* background: var(---color-element-disabled); */\n          border: 0;\n          border-radius: 2px;\n          box-shadow: none;\n        }\n\n        /* stylelint-disable-next-line no-descending-specificity */ /* stylelint ERROR */\n        input[type=range]::-ms-fill-upper {\n          background: #cccccc;\n          /* background: var(---color-element-disabled); */\n          border: 0;\n          border-radius: 2px;\n          box-shadow: none;\n        }\n\n        /* stylelint-disable-next-line no-descending-specificity */ /* stylelint ERROR */\n        input[type=range]:focus::-ms-fill-lower {\n          background: var(---color-element-disabled);\n        }\n\n        /* stylelint-disable-next-line no-descending-specificity */ /* stylelint ERROR */\n        input[type=range]:focus::-ms-fill-upper {\n          background: var(---color-element-disabled);\n        }\n\n        /* Thumb */\n        /* stylelint-disable-next-line no-descending-specificity */ /* stylelint ERROR */\n        input[type=range]::-webkit-slider-thumb {\n          width: 10px;\n          height: 20px;\n          margin-top: -8px;\n\n          border: 0;\n          border-radius: 4px;\n\n          /* stylelint-disable-next-line property-no-vendor-prefix */\n          -webkit-appearance: none;\n        }\n\n        input[type=range]:disabled::-webkit-slider-thumb {\n          background: var(---color-element-disabled);\n          box-shadow: none;\n        }\n\n        input[type=range]:enabled::-webkit-slider-thumb {\n          background: var(---color-element-enabled);\n          box-shadow: var(---shadow-2-rotate);\n        }\n\n        input[type=range]:enabled:hover::-webkit-slider-thumb {\n          box-shadow: var(---shadow-4-rotate);\n        }\n\n        input[type=range]:enabled:active::-webkit-slider-thumb {\n          box-shadow: var(---shadow-8-rotate);\n        }\n\n        :host(.keyboard) input[type=range]:enabled:focus::-webkit-slider-thumb {\n          box-shadow: var(---shadow-4-rotate);\n        }\n\n        :host(.keyboard) input[type=range]:focus:active::-webkit-slider-thumb {\n          box-shadow: var(---shadow-8-rotate);\n        }\n\n        /* stylelint-disable-next-line no-descending-specificity */ /* stylelint ERROR */\n        input[type=range]::-moz-range-thumb {\n          width: 10px;\n          height: 20px;\n\n          border: 0;\n          border-radius: 4px;\n        }\n\n        /* stylelint-disable-next-line no-descending-specificity */ /* stylelint ERROR */\n        input[type=range]:disabled::-moz-range-thumb {\n          background: var(---color-element-disabled);\n          box-shadow: none;\n        }\n\n        /* stylelint-disable-next-line no-descending-specificity */ /* stylelint ERROR */\n        input[type=range]:enabled::-moz-range-thumb {\n          background: var(---color-element-enabled);\n          box-shadow: var(---shadow-2-rotate);\n        }\n\n        /* stylelint-disable-next-line no-descending-specificity */ /* stylelint ERROR */\n        input[type=range]:enabled:hover::-moz-range-thumb {\n          box-shadow: var(---shadow-4-rotate);\n        }\n\n        /* stylelint-disable-next-line no-descending-specificity */ /* stylelint ERROR */\n        input[type=range]:enabled:active::-moz-range-thumb {\n          box-shadow: var(---shadow-8-rotate);\n        }\n\n        :host(.keyboard) input[type=range]:enabled:focus::-moz-range-thumb {\n          box-shadow: var(---shadow-4-rotate);\n        }\n\n        :host(.keyboard) input[type=range]:enabled:focus:active::-moz-range-thumb {\n          box-shadow: var(---shadow-8-rotate);\n        }\n\n        /* stylelint-disable-next-line no-descending-specificity */ /* stylelint ERROR */\n        input[type=range]::-ms-thumb {\n          width: 10px;\n          height: 20px;\n          margin-top: 0;\n\n          background: #999999;\n          /* background: var(---color-element-enabled); */\n          border: 0;\n          border-radius: 4px;\n          box-shadow: var(---shadow-2-rotate);\n        }\n\n        /* stylelint-disable-next-line no-descending-specificity */ /* stylelint ERROR */\n        input[type=range]:disabled::-ms-thumb {\n          background: var(---color-element-disabled);\n          box-shadow: none;\n        }\n\n        /* stylelint-disable-next-line no-descending-specificity */ /* stylelint ERROR */\n        input[type=range]:enabled::-ms-thumb {\n          background: var(---color-element-enabled);\n          box-shadow: var(---shadow-2-rotate);\n        }\n\n        /* stylelint-disable-next-line no-descending-specificity */ /* stylelint ERROR */\n        input[type=range]:enabled:hover::-ms-thumb {\n          box-shadow: var(---shadow-4-rotate);\n        }\n\n        /* stylelint-disable-next-line no-descending-specificity */ /* stylelint ERROR */\n        input[type=range]:enabled:active::-ms-thumb {\n          box-shadow: var(---shadow-8-rotate);\n        }\n\n        /* stylelint-disable-next-line no-descending-specificity */ /* stylelint ERROR */\n        :host(.keyboard) input[type=range]:enabled:focus::-ms-thumb {\n          box-shadow: var(---shadow-4-rotate);\n        }\n\n        :host(.keyboard) input[type=range]:enabled:focus:active::-ms-thumb {\n          box-shadow: var(---shadow-8-rotate);\n        }\n      "])), o$3(this.cssBoxShadow(2, true, false)), o$3(this.cssBoxShadow(4, true, false)), o$3(this.cssBoxShadow(8, true, false)))];
	    }
	  }]);

	  return DecidableSlider;
	}(DecidableElement);
	customElements.define('decidable-slider', DecidableSlider);

	var _templateObject$f, _templateObject2$d;

	var DecidableSpinner = /*#__PURE__*/function (_DecidableElement) {
	  _inherits(DecidableSpinner, _DecidableElement);

	  var _super = _createSuper(DecidableSpinner);

	  function DecidableSpinner() {
	    var _this;

	    _classCallCheck(this, DecidableSpinner);

	    _this = _super.call(this); // Attributes

	    _this.disabled = false;
	    _this.max = undefined;
	    _this.min = undefined;
	    _this.step = undefined;
	    _this.value = undefined;
	    return _this;
	  }

	  _createClass(DecidableSpinner, [{
	    key: "inputted",
	    value: function inputted(event) {
	      this.value = event.target.value;
	    }
	  }, {
	    key: "render",
	    value: function render() {
	      return $(_templateObject$f || (_templateObject$f = _taggedTemplateLiteral(["\n      <label>\n        <slot></slot>\n        <input ?disabled=", " type=\"number\" min=", " max=", " step=", " .value=", " @input=", ">\n      </label>\n    "])), this.disabled, l(this.min), l(this.max), l(this.step), this.value, this.inputted.bind(this));
	    }
	  }], [{
	    key: "properties",
	    get: function get() {
	      return {
	        disabled: {
	          attribute: 'disabled',
	          type: Boolean,
	          reflect: true
	        },
	        max: {
	          attribute: 'max',
	          type: Number,
	          reflect: true
	        },
	        min: {
	          attribute: 'min',
	          type: Number,
	          reflect: true
	        },
	        step: {
	          attribute: 'step',
	          type: Number,
	          reflect: true
	        },
	        value: {
	          attribute: 'value',
	          type: Number,
	          reflect: true
	        }
	      };
	    }
	  }, {
	    key: "styles",
	    get: function get() {
	      return [_get(_getPrototypeOf(DecidableSpinner), "styles", this), r$2(_templateObject2$d || (_templateObject2$d = _taggedTemplateLiteral(["\n        :host {\n          ---decidable-spinner-font-size: var(--decidable-spinner-font-size, 1.125rem);\n          ---decidable-spinner-input-width: var(--decidable-spinner-input-width, 4rem);\n          ---decidable-spinner-prefix: var(--decidable-spinner-prefix, \"\");\n\n          display: block;\n        }\n\n        label {\n          position: relative;\n          display: flex;\n\n          flex-direction: column;\n\n          align-items: center;\n\n          margin: 0;\n\n          font-size: 0.75rem;\n        }\n\n        label::before {\n          position: absolute;\n          bottom: 1px;\n          left: calc(50% - var(---decidable-spinner-input-width) / 2 + 0.25rem);\n\n          font-size: var(---decidable-spinner-font-size);\n          line-height: normal;\n\n          content: var(---decidable-spinner-prefix);\n        }\n\n        input[type=number] {\n          width: var(---decidable-spinner-input-width);\n\n          font-family: var(---font-family-base);\n          font-size: var(---decidable-spinner-font-size);\n          color: inherit;\n          text-align: right;\n\n          background: none;\n          border: 0;\n          border-radius: 0;\n          outline: none;\n          box-shadow: var(---shadow-2);\n\n          -webkit-appearance: none; /* stylelint-disable-line property-no-vendor-prefix */\n        }\n\n        input[type=number]:hover {\n          box-shadow: var(---shadow-4);\n        }\n\n        input[type=number]:focus,\n        input[type=number]:active {\n          box-shadow: var(---shadow-8);\n        }\n\n        input[type=number]:disabled {\n          color: var(---color-text);\n\n          border: 0;\n          box-shadow: none;\n\n          /* HACK: Use correct text color in Safari */\n          -webkit-opacity: 1;\n          /* HACK: Hide spinners in disabled input for Firefox and Safari */\n          -moz-appearance: textfield; /* stylelint-disable-line property-no-vendor-prefix */\n          /* HACK: Use correct text color in Safari */\n          -webkit-text-fill-color: var(---color-text);\n        }\n\n        /* HACK: Hide spinners in disabled input for Firefox and Safari */\n        input[type=number]:disabled::-webkit-outer-spin-button,\n        input[type=number]:disabled::-webkit-inner-spin-button {\n          margin: 0;\n          -webkit-appearance: none; /* stylelint-disable-line property-no-vendor-prefix */\n        }\n      "])))];
	    }
	  }]);

	  return DecidableSpinner;
	}(DecidableElement);
	customElements.define('decidable-spinner', DecidableSpinner);

	var _templateObject$e, _templateObject2$c;

	var DecidableSwitch = /*#__PURE__*/function (_DecidableElement) {
	  _inherits(DecidableSwitch, _DecidableElement);

	  var _super = _createSuper(DecidableSwitch);

	  function DecidableSwitch() {
	    var _this;

	    _classCallCheck(this, DecidableSwitch);

	    _this = _super.call(this); // Attributes

	    _this.checked = false;
	    _this.disabled = false;
	    return _this;
	  }

	  _createClass(DecidableSwitch, [{
	    key: "changed",
	    value: function changed(event) {
	      this.checked = event.target.checked;
	      this.dispatchEvent(new CustomEvent('change', {
	        detail: {
	          checked: this.checked
	        },
	        bubbles: true
	      }));
	    }
	  }, {
	    key: "render",
	    value: function render() {
	      return $(_templateObject$e || (_templateObject$e = _taggedTemplateLiteral(["\n      <input type=\"checkbox\" id=", " ?checked=", " ?disabled=", " @change=", ">\n      <label for=", ">\n        <slot name=\"off-label\"></slot>\n      </label>\n      <label for=", ">\n        <slot></slot>\n      </label>\n    "])), "".concat(this.uniqueId, "-checkbox"), this.checked, this.disabled, this.changed.bind(this), "".concat(this.uniqueId, "-checkbox"), "".concat(this.uniqueId, "-checkbox"));
	    }
	  }], [{
	    key: "properties",
	    get: function get() {
	      return {
	        checked: {
	          attribute: 'checked',
	          type: Boolean,
	          reflect: true
	        },
	        disabled: {
	          attribute: 'disabled',
	          type: Boolean,
	          reflect: true
	        }
	      };
	    }
	  }, {
	    key: "styles",
	    get: function get() {
	      return [_get(_getPrototypeOf(DecidableSwitch), "styles", this), r$2(_templateObject2$c || (_templateObject2$c = _taggedTemplateLiteral(["\n        :host {\n          display: flex;\n\n          flex-direction: column;\n\n          align-items: center;\n          justify-content: center;\n        }\n\n        /* Adapted from https://codepen.io/guuslieben/pen/YyPRVP */\n        input[type=checkbox] {\n          /* visuallyhidden: https://github.com/h5bp/html5-boilerplate/blob/master/dist/doc/css.md */\n          position: absolute;\n\n          width: 1px;\n          height: 1px;\n          padding: 0;\n          margin: -1px;\n          overflow: hidden;\n          clip: rect(0 0 0 0);\n\n          white-space: nowrap;\n\n          border: 0;\n          clip-path: inset(100%); /* May cause a performance issue: https://github.com/h5bp/html5-boilerplate/issues/2021 */\n        }\n\n        input[type=checkbox] + label {\n          order: 1;\n\n          margin: 0 0.25rem 0.25rem;\n\n          font-weight: 400;\n        }\n\n        input[type=checkbox] + label + label {\n          position: relative;\n\n          min-width: 24px;\n          padding: 0 0 36px;\n          margin: 0.25rem 0.25rem 0;\n\n          font-weight: 400;\n\n          outline: none;\n        }\n\n        input[type=checkbox] + label + label::before,\n        input[type=checkbox] + label + label::after {\n          position: absolute;\n\n          left: 50%;\n\n          margin: 0;\n\n          content: \"\";\n\n          outline: 0;\n\n          transition: all var(---transition-duration) ease;\n          transform: translate(-50%, 0);\n        }\n\n        input[type=checkbox] + label + label::before {\n          bottom: 1px;\n\n          width: 8px;\n          height: 34px;\n\n          background-color: var(---color-element-disabled);\n          border-radius: 4px;\n        }\n\n        input[type=checkbox] + label + label::after {\n          bottom: 0;\n\n          width: 18px;\n          height: 18px;\n\n          background-color: var(---color-element-enabled);\n          border-radius: 50%;\n          box-shadow: var(---shadow-2);\n        }\n\n        input[type=checkbox]:checked + label + label::after {\n          transform: translate(-50%, -100%);\n        }\n\n        input[type=checkbox]:disabled + label + label::after {\n          background-color: var(---color-element-disabled);\n          box-shadow: none;\n        }\n\n        input[type=checkbox]:enabled + label,\n        input[type=checkbox]:enabled + label + label {\n          cursor: pointer;\n        }\n\n        input[type=checkbox]:enabled + label:hover + label::after,\n        input[type=checkbox]:enabled + label + label:hover::after {\n          box-shadow: var(---shadow-4);\n        }\n\n        input[type=checkbox]:enabled + label:active + label::after,\n        input[type=checkbox]:enabled + label + label:active::after {\n          box-shadow: var(---shadow-8);\n        }\n\n        /* stylelint-disable-next-line selector-max-compound-selectors */\n        :host(.keyboard) input[type=checkbox]:enabled:focus + label + label::after {\n          box-shadow: var(---shadow-4);\n        }\n\n        /* stylelint-disable-next-line selector-max-compound-selectors */\n        :host(.keyboard) input[type=checkbox]:enabled:focus + label + label:active::after,\n        :host(.keyboard) input[type=checkbox]:enabled:focus:active + label + label::after {\n          box-shadow: var(---shadow-8);\n        }\n      "])))];
	    }
	  }]);

	  return DecidableSwitch;
	}(DecidableElement);
	customElements.define('decidable-switch', DecidableSwitch);

	var _templateObject$d, _templateObject2$b;

	var DecidableToggle = /*#__PURE__*/function (_DecidableElement) {
	  _inherits(DecidableToggle, _DecidableElement);

	  var _super = _createSuper(DecidableToggle);

	  function DecidableToggle() {
	    var _this;

	    _classCallCheck(this, DecidableToggle);

	    _this = _super.call(this); // Attributes

	    _this.disabled = false;
	    return _this;
	  }

	  _createClass(DecidableToggle, [{
	    key: "render",
	    value: function render() {
	      return $(_templateObject$d || (_templateObject$d = _taggedTemplateLiteral(["\n      <fieldset ?disabled=", ">\n        <legend><slot name=\"label\"></slot></legend>\n        <slot></slot>\n      </fieldset>\n    "])), this.disabled);
	    }
	  }], [{
	    key: "properties",
	    get: function get() {
	      return {
	        disabled: {
	          attribute: 'disabled',
	          type: Boolean,
	          reflect: true
	        }
	      };
	    }
	  }, {
	    key: "styles",
	    get: function get() {
	      return [_get(_getPrototypeOf(DecidableToggle), "styles", this), r$2(_templateObject2$b || (_templateObject2$b = _taggedTemplateLiteral(["\n        fieldset {\n          display: flex;\n\n          flex-direction: column;\n\n          align-items: stretch;\n          justify-content: center;\n\n          margin: 0.25rem;\n\n          border: 0;\n        }\n\n        legend {\n          text-align: center;\n        }\n      "])))];
	    }
	  }]);

	  return DecidableToggle;
	}(DecidableElement);
	customElements.define('decidable-toggle', DecidableToggle);

	var _templateObject$c, _templateObject2$a;

	var DecidableToggleOption = /*#__PURE__*/function (_DecidableElement) {
	  _inherits(DecidableToggleOption, _DecidableElement);

	  var _super = _createSuper(DecidableToggleOption);

	  function DecidableToggleOption() {
	    var _this;

	    _classCallCheck(this, DecidableToggleOption);

	    _this = _super.call(this); // Attributes

	    _this.checked = false;
	    _this.disabled = false;
	    _this.name = undefined;
	    _this.value = undefined;
	    return _this;
	  }

	  _createClass(DecidableToggleOption, [{
	    key: "changed",
	    value: function changed(event) {
	      this.checked = event.target.checked;
	      this.dispatchEvent(new CustomEvent('change', {
	        detail: {
	          checked: this.checked,
	          value: this.value
	        },
	        bubbles: true
	      }));
	    }
	  }, {
	    key: "render",
	    value: function render() {
	      return $(_templateObject$c || (_templateObject$c = _taggedTemplateLiteral(["\n      <input type=\"radio\" id=", " name=", " value=", " .checked=", " @change=", ">\n      <label for=", ">\n        <slot></slot>\n      </label>\n    "])), "".concat(this.uniqueId, "-radio"), this.name, this.value, this.checked, this.changed.bind(this), "".concat(this.uniqueId, "-radio"));
	    }
	  }], [{
	    key: "properties",
	    get: function get() {
	      return {
	        checked: {
	          attribute: 'checked',
	          type: Boolean,
	          reflect: true
	        },
	        disabled: {
	          attribute: 'disabled',
	          type: Boolean,
	          reflect: true
	        },
	        name: {
	          attribute: 'name',
	          type: String,
	          reflect: true
	        },
	        value: {
	          attribute: 'value',
	          type: String,
	          reflect: true
	        }
	      };
	    }
	  }, {
	    key: "styles",
	    get: function get() {
	      return [_get(_getPrototypeOf(DecidableToggleOption), "styles", this), r$2(_templateObject2$a || (_templateObject2$a = _taggedTemplateLiteral(["\n        :host {\n          display: flex;\n        }\n\n        input[type=radio] {\n          /* visuallyhidden: https://github.com/h5bp/html5-boilerplate/blob/master/dist/doc/css.md */\n          position: absolute;\n\n          width: 1px;\n          height: 1px;\n          padding: 0;\n          margin: -1px;\n          overflow: hidden;\n          clip: rect(0 0 0 0);\n\n          white-space: nowrap;\n\n          border: 0;\n          clip-path: inset(100%); /* May cause a performance issue: https://github.com/h5bp/html5-boilerplate/issues/2021 */\n        }\n\n        input[type=radio] + label {\n          width: 100%;\n          padding: 0.375rem 0.75rem;\n\n          font-family: var(---font-family-base);\n          font-size: 1.125rem;\n          line-height: 1.5;\n          color: var(---color-text-inverse);\n          text-align: center;\n\n          cursor: pointer;\n\n          background-color: var(---color-element-enabled);\n          border: 0;\n          border-radius: 0;\n          outline: none;\n\n          box-shadow: var(---shadow-2);\n        }\n\n        input[type=radio]:checked + label {\n          background-color: var(---color-element-selected);\n          outline: none;\n          box-shadow: var(---shadow-2);\n        }\n\n        input[type=radio] + label:hover {\n          z-index: 1;\n\n          outline: none;\n          box-shadow: var(---shadow-4);\n        }\n\n        input[type=radio] + label:active {\n          z-index: 2;\n\n          outline: none;\n          box-shadow: var(---shadow-8);\n        }\n\n        :host(:first-of-type) input[type=radio] + label {\n          border-top-left-radius: 0.25rem;\n          border-top-right-radius: 0.25rem;\n        }\n\n        :host(:last-of-type) input[type=radio] + label {\n          border-bottom-right-radius: 0.25rem;\n          border-bottom-left-radius: 0.25rem;\n        }\n\n        :host(.keyboard) input[type=radio]:focus + label {\n          z-index: 1;\n\n          outline: none;\n          box-shadow: var(---shadow-4);\n        }\n\n        :host(.keyboard) input[type=radio]:focus:checked + label {\n          z-index: 1;\n\n          background-color: var(---color-element-selected);\n          outline: none;\n          box-shadow: var(---shadow-4);\n        }\n\n        :host(.keyboard) input[type=radio]:focus + label:active {\n          z-index: 2;\n\n          outline: none;\n          box-shadow: var(---shadow-8);\n        }\n      "])))];
	    }
	  }]);

	  return DecidableToggleOption;
	}(DecidableElement);
	customElements.define('decidable-toggle-option', DecidableToggleOption);

	/*
	  Attribute: Space-separated sequence of strings
	  Property: Set of strings
	*/
	var DecidableConverterSet = {
	  fromAttribute: function fromAttribute(value) {
	    return new Set(value.split(/\s+/));
	  },
	  toAttribute: function toAttribute(value) {
	    return value.size ? _toConsumableArray(value).join(' ') : null;
	  }
	};

	var _templateObject$b;
	/*
	  SDTElement Base Class - Not intended for instantiation!
	  <sdt-element>
	*/

	var SDTElement = /*#__PURE__*/function (_DecidableElement) {
	  _inherits(SDTElement, _DecidableElement);

	  var _super = _createSuper(SDTElement);

	  function SDTElement() {
	    var _this;

	    _classCallCheck(this, SDTElement);

	    _this = _super.call(this);
	    _this.interactive = false;
	    return _this;
	  }

	  _createClass(SDTElement, null, [{
	    key: "properties",
	    get: function get() {
	      return {
	        interactive: {
	          attribute: 'interactive',
	          type: Boolean,
	          reflect: true
	        }
	      };
	    }
	  }, {
	    key: "colors",
	    get: function get() {
	      return {
	        h: Set1[2],
	        m: Set1[4],
	        fa: Set1[1],
	        cr: Set1[0],
	        hr: Set1[5],
	        far: Set1[3],
	        acc: Set1[8],
	        d: Set1[7],
	        c: Set1[6],
	        s: '#4545d0',
	        present: '#f032e6',
	        absent: '#10dbc9',
	        correct: '#ffffff',
	        error: '#000000',
	        nr: '#cccccc'
	      };
	    }
	  }, {
	    key: "lights",
	    get: function get() {
	      return Object.keys(SDTElement.colors).reduce(function (acc, cur) {
	        acc[cur] = interpolateRgb(SDTElement.colors[cur], '#ffffff')(0.5);
	        return acc;
	      }, {});
	    }
	  }, {
	    key: "darks",
	    get: function get() {
	      return Object.keys(SDTElement.colors).reduce(function (acc, cur) {
	        acc[cur] = interpolateRgb(SDTElement.colors[cur], '#000000')(0.5);
	        return acc;
	      }, {});
	    }
	  }, {
	    key: "styles",
	    get: function get() {
	      return [_get(_getPrototypeOf(SDTElement), "styles", this), r$2(_templateObject$b || (_templateObject$b = _taggedTemplateLiteral(["\n        :host {\n          ---color-h: var(--color-h, ", ");\n          ---color-m: var(--color-m, ", ");\n          ---color-fa: var(--color-fa, ", ");\n          ---color-cr: var(--color-cr, ", ");\n          ---color-hr: var(--color-hr, ", ");\n          ---color-far: var(--color-far, ", ");\n          ---color-acc: var(--color-acc, ", ");\n          ---color-d: var(--color-d, ", ");\n          ---color-c: var(--color-c, ", ");\n          ---color-s: var(--color-s, ", ");\n          ---color-present: var(--color-present, ", ");\n          ---color-absent: var(--color-absent, ", ");\n          ---color-correct: var(--color-correct, ", ");\n          ---color-error: var(--color-error, ", ");\n          ---color-nr: var(--color-nr, ", ");\n\n          ---color-h-light: var(--color-h-light, ", ");\n          ---color-m-light: var(--color-m-light, ", ");\n          ---color-fa-light: var(--color-fa-light, ", ");\n          ---color-cr-light: var(--color-cr-light, ", ");\n          ---color-hr-light: var(--color-hr-light, ", ");\n          ---color-far-light: var(--color-far-light, ", ");\n          ---color-acc-light: var(--color-acc-light, ", ");\n          ---color-d-light: var(--color-d-light, ", ");\n          ---color-c-light: var(--color-c-light, ", ");\n          ---color-s-light: var(--color-s-light, ", ");\n          ---color-present-light: var(--color-present-light, ", ");\n          ---color-absent-light: var(--color-absent-light, ", ");\n          ---color-correct-light: var(--color-correct-light, ", ");\n          ---color-error-light: var(--color-error-light, ", ");\n          ---color-nr-light: var(--color-nr-light, ", ");\n\n          ---color-h-dark: var(--color-h-dark, ", ");\n          ---color-m-dark: var(--color-m-dark, ", ");\n          ---color-fa-dark: var(--color-fa-dark, ", ");\n          ---color-cr-dark: var(--color-cr-dark, ", ");\n          ---color-hr-dark: var(--color-hr-dark, ", ");\n          ---color-far-dark: var(--color-far-dark, ", ");\n          ---color-acc-dark: var(--color-acc-dark, ", ");\n          ---color-d-dark: var(--color-d-dark, ", ");\n          ---color-c-dark: var(--color-c-dark, ", ");\n          ---color-s-dark: var(--color-s-dark, ", ");\n          ---color-present-dark: var(--color-present-dark, ", ");\n          ---color-absent-dark: var(--color-absent-dark, ", ");\n          ---color-correct-dark: var(--color-correct-dark, ", ");\n          ---color-error-dark: var(--color-error-dark, ", ");\n          ---color-nr-dark: var(--color-nr-dark, ", ");\n        }\n      "])), o$3(this.colors.h), o$3(this.colors.m), o$3(this.colors.fa), o$3(this.colors.cr), o$3(this.colors.hr), o$3(this.colors.far), o$3(this.colors.acc), o$3(this.colors.d), o$3(this.colors.c), o$3(this.colors.s), o$3(this.colors.present), o$3(this.colors.absent), o$3(this.colors.correct), o$3(this.colors.error), o$3(this.colors.nr), o$3(this.lights.h), o$3(this.lights.m), o$3(this.lights.fa), o$3(this.lights.cr), o$3(this.lights.hr), o$3(this.lights.far), o$3(this.lights.acc), o$3(this.lights.d), o$3(this.lights.c), o$3(this.lights.s), o$3(this.lights.present), o$3(this.lights.absent), o$3(this.lights.correct), o$3(this.lights.error), o$3(this.lights.nr), o$3(this.darks.h), o$3(this.darks.m), o$3(this.darks.fa), o$3(this.darks.cr), o$3(this.darks.hr), o$3(this.darks.far), o$3(this.darks.acc), o$3(this.darks.d), o$3(this.darks.c), o$3(this.darks.s), o$3(this.darks.present), o$3(this.darks.absent), o$3(this.darks.correct), o$3(this.darks.error), o$3(this.darks.nr))];
	    }
	  }]);

	  return SDTElement;
	}(DecidableElement);

	var _templateObject$a, _templateObject2$9;
	/*
	  RDKTask element
	  <rdk-task>

	  Attributes:
	  Dots; Coherence;
	  # Direction, Speed, Lifetime
	*/

	var RDKTask = /*#__PURE__*/function (_SDTElement) {
	  _inherits(RDKTask, _SDTElement);

	  var _super = _createSuper(RDKTask);

	  function RDKTask() {
	    var _this;

	    _classCallCheck(this, RDKTask);

	    _this = _super.call(this); // Attributes

	    _this.coherence = 0.5; // Proportion of dots moving coherently

	    _this.count = 100; // Number of dots

	    _this.probability = 0.5; // Probability of signal (as opposed to noise)

	    _this.duration = 2000; // Duration of stimulus in milliseconds

	    _this.wait = 2000; // Duration of wait period for response in milliseconds

	    _this.iti = 2000; // Duration of inter-trial interval in milliseconds

	    _this.trials = 5; // Number of trials per block

	    _this.running = false; // Currently executing block of trials
	    // Properties

	    _this.direction = -1; // Direction of current trial in degrees

	    _this.lifetime = 400; // Lifetime of each dot in milliseconds

	    _this.speed = 50; // Rate of dot movement in pixels per second

	    _this.width = NaN; // Width of component in pixels

	    _this.height = NaN; // Height of component in pixels

	    _this.rem = NaN; // Pixels per rem for component
	    // Private

	    _this.firstUpdate = true;
	    _this.COHERENT = 0; // "Constant" for index to coherent dots

	    _this.RANDOM = 1; // "Constant" for index to random dots

	    _this.dots = [[], []]; // Array of array of dots

	    _this.trial = 0; // Count of current trial

	    _this.states = ['resetted', 'iti', 'stimulus', 'wait', 'ended']; // Possible states of task

	    _this.state = 'resetted'; // Current state of task

	    _this.baseTime = 0; // Real time, in milliseconds, that the current block started

	    _this.pauseTime = 0; // Real time, in milliseconds, that block was paused at

	    _this.startTime = 0; // Virtual time, in milliseconds, that current stage of trial started

	    _this.lastTime = 0; // Virtual time, in milliseconds, of the most recent frame

	    _this.currentDirection = undefined; // Direction in degrees for current trial

	    _this.signals = ['present', 'absent']; // Possible trial types

	    _this.signal = undefined; // Current trial type

	    _this.runner = undefined; // D3 Interval for frame timing

	    _this.xScale = undefined; // D3 Scale for x-axis

	    _this.yScale = undefined; // D3 Scale for y-axis

	    return _this;
	  }

	  _createClass(RDKTask, [{
	    key: "render",
	    value: function render() {
	      // eslint-disable-line class-methods-use-this
	      return $(_templateObject$a || (_templateObject$a = _taggedTemplateLiteral([""])));
	    }
	  }, {
	    key: "getDimensions",
	    value: function getDimensions() {
	      this.width = parseFloat(this.getComputedStyleValue('width'), 10);
	      this.height = parseFloat(this.getComputedStyleValue('height'), 10);
	      this.rem = parseFloat(getComputedStyle(document.documentElement).getPropertyValue('font-size'), 10); // console.log(`rdk-task: width = ${this.width}, height = ${this.height}, rem = ${this.rem}`);
	    }
	  }, {
	    key: "connectedCallback",
	    value: function connectedCallback() {
	      _get(_getPrototypeOf(RDKTask.prototype), "connectedCallback", this).call(this);

	      window.addEventListener('resize', this.getDimensions.bind(this));
	    }
	  }, {
	    key: "disconnectedCallback",
	    value: function disconnectedCallback() {
	      window.removeEventListener('resize', this.getDimensions.bind(this));

	      _get(_getPrototypeOf(RDKTask.prototype), "disconnectedCallback", this).call(this);
	    }
	  }, {
	    key: "firstUpdated",
	    value: function firstUpdated(changedProperties) {
	      _get(_getPrototypeOf(RDKTask.prototype), "firstUpdated", this).call(this, changedProperties); // Get the width and height after initial render/update has occurred
	      // HACK Edge: Edge doesn't have width/height until after a 0ms timeout


	      window.setTimeout(this.getDimensions.bind(this), 0);
	    }
	  }, {
	    key: "update",
	    value: function update(changedProperties) {
	      var _this2 = this;

	      _get(_getPrototypeOf(RDKTask.prototype), "update", this).call(this, changedProperties); // Bail out if we can't get the width/height/rem


	      if (Number.isNaN(this.width) || Number.isNaN(this.height) || Number.isNaN(this.rem)) {
	        return;
	      }

	      var elementWidth = this.width;
	      var elementHeight = this.height;
	      var elementSize = Math.min(elementWidth, elementHeight);
	      var margin = {
	        top: 0.25 * this.rem,
	        bottom: 0.25 * this.rem,
	        left: 0.25 * this.rem,
	        right: 0.25 * this.rem
	      };
	      var height = elementSize - (margin.top + margin.bottom);
	      var width = elementSize - (margin.left + margin.right); // X Scale

	      this.xScale = linear().domain([-1, 1]).range([0, width]); // Y Scale

	      this.yScale = linear().domain([1, -1]).range([0, height]); // Svg
	      //  DATA-JOIN

	      var svgUpdate = select(this.renderRoot).selectAll('.main').data([{
	        width: this.width,
	        height: this.height,
	        rem: this.rem
	      }]); //  ENTER

	      var svgEnter = svgUpdate.enter().append('svg').classed('main', true); //  MERGE

	      var svgMerge = svgEnter.merge(svgUpdate).attr('viewBox', "0 0 ".concat(elementSize, " ").concat(elementSize)); // Clippath
	      //  ENTER

	      svgEnter.append('clipPath').attr('id', 'clip-rdk-task').append('circle'); //  MERGE

	      svgMerge.select('clipPath circle').attr('cx', this.xScale(0)).attr('cy', this.yScale(0)).attr('r', this.xScale(1) - this.xScale(0)); // Plot
	      //  ENTER

	      var plotEnter = svgEnter.append('g').classed('plot', true); //  MERGE

	      var plotMerge = svgMerge.select('.plot').attr('transform', "translate(".concat(margin.left, ", ").concat(margin.top, ")")); // Underlayer
	      //  ENTER

	      var underlayerEnter = plotEnter.append('g').classed('underlayer', true); // MERGE

	      var underlayerMerge = plotMerge.select('.underlayer'); // Background
	      //  ENTER

	      underlayerEnter.append('circle').classed('background', true); //  MERGE

	      underlayerMerge.select('.background').attr('cx', this.xScale(0)).attr('cy', this.yScale(0)).attr('r', this.xScale(1) - this.xScale(0)); // Content
	      //  ENTER

	      plotEnter.append('g').classed('content', true).attr('clip-path', 'url(#clip-rdk-task)'); //  MERGE

	      var contentMerge = plotMerge.select('.content'); // Dot Groups
	      //  DATA-JOIN

	      var dotsUpdate = contentMerge.selectAll('.dots').data([[], []]); //  ENTER

	      dotsUpdate.enter().append('g').classed('dots', true).classed('coherent', function (datum, index) {
	        return index === _this2.COHERENT;
	      }).classed('random', function (datum, index) {
	        return index === _this2.RANDOM;
	      }); // Overlayer
	      //  ENTER

	      var overlayerEnter = plotEnter.append('g').classed('overlayer', true); // MERGE

	      var overlayerMerge = plotMerge.select('.overlayer'); // Outline
	      //  ENTER

	      overlayerEnter.append('circle').classed('outline', true); //  MERGE

	      overlayerMerge.select('.outline').attr('cx', this.xScale(0)).attr('cy', this.yScale(0)).attr('r', this.xScale(1) - this.yScale(0)); // Start or stop trial block

	      if (this.firstUpdate || changedProperties.has('running')) {
	        if (this.running) {
	          // (Re)Start
	          if (this.pauseTime) {
	            // Shift timeline forward as if paused time never happened
	            this.baseTime += now() - this.pauseTime;
	            this.pauseTime = 0;
	          }

	          this.runner = interval(this.run.bind(this), 20); // FIXME??
	        } else if (this.runner !== undefined) {
	          // Pause
	          this.runner.stop();
	          this.pauseTime = now();
	        }
	      }

	      this.firstUpdate = false;
	    }
	  }, {
	    key: "reset",
	    value: function reset() {
	      this.runner.stop();
	      this.running = false;
	      this.trial = 0;
	      this.state = 'resetted';
	      this.baseTime = 0;
	      this.pauseTime = 0;
	      this.startTime = 0;
	      this.lastTime = 0;
	      this.signal = undefined;
	      this.currentDirection = undefined;
	      var dotsUpdate = select(this.renderRoot).select('.content').selectAll('.dots').data([[], []]);
	      var dotUpdate = dotsUpdate.selectAll('.dot').data(function (datum) {
	        return datum;
	      });
	      dotUpdate.exit().remove();
	      var fixationUpdate = select(this.renderRoot).select('.content').selectAll('.fixation').data([]);
	      fixationUpdate.exit().remove();
	      var queryUpdate = select(this.renderRoot).select('.content').selectAll('.query').data([]);
	      queryUpdate.exit().remove();
	    }
	  }, {
	    key: "run",
	    value: function
	      /* elapsed */
	    run() {
	      var realTime = now();
	      var currentTime = this.baseTime ? realTime - this.baseTime : 0;
	      var elapsedTime = this.baseTime ? currentTime - this.startTime : 0;
	      var frameTime = this.baseTime ? currentTime - this.lastTime : 0;
	      this.lastTime = currentTime;
	      var newTrial = false;

	      if (this.state === 'resetted') {
	        // Start block with an ITI
	        this.state = 'iti';
	        this.baseTime = realTime;
	        this.startTime = 0;
	        this.dispatchEvent(new CustomEvent('rdk-block-start', {
	          detail: {
	            trials: this.trials
	          },
	          bubbles: true
	        }));
	      } else if (this.state === 'iti' && elapsedTime >= this.iti) {
	        // Start new trial with a stimulus
	        newTrial = true;
	        this.trial += 1;
	        this.state = 'stimulus';
	        this.startTime = currentTime;
	        this.signal = Math.random() < this.probability ? 'present' : 'absent';
	        this.currentDirection = this.signal === 'absent' ? undefined : this.direction >= 0 ? this.direction : Math.random() * 360;
	        this.dispatchEvent(new CustomEvent('rdk-trial-start', {
	          detail: {
	            trials: this.trials,
	            duration: this.duration,
	            wait: this.wait,
	            iti: this.iti,
	            trial: this.trial,
	            signal: this.signal
	          },
	          bubbles: true
	        }));
	      } else if (this.state === 'stimulus' && elapsedTime >= this.duration) {
	        // Stimulus is over, now wait
	        this.state = 'wait';
	        this.startTime = currentTime;
	        this.dispatchEvent(new CustomEvent('rdk-trial-middle', {
	          detail: {
	            trials: this.trials,
	            duration: this.duration,
	            wait: this.wait,
	            iti: this.iti,
	            trial: this.trial,
	            signal: this.signal
	          },
	          bubbles: true
	        }));
	      } else if (this.state === 'wait' && elapsedTime >= this.wait) {
	        // Wait is over, end of trial
	        this.dispatchEvent(new CustomEvent('rdk-trial-end', {
	          detail: {
	            trials: this.trials,
	            duration: this.duration,
	            wait: this.wait,
	            iti: this.iti,
	            trial: this.trial,
	            signal: this.signal
	          },
	          bubbles: true
	        }));

	        if (this.trial >= this.trials) {
	          // End of block
	          this.runner.stop();
	          this.running = false;
	          this.state = 'ended';
	          this.baseTime = 0;
	          this.pauseTime = 0;
	          this.startTime = 0;
	          this.lastTime = 0;
	          this.signal = undefined;
	          this.currentDirection = undefined;
	          this.dispatchEvent(new CustomEvent('rdk-block-end', {
	            detail: {
	              trials: this.trial
	            },
	            bubbles: true
	          }));
	        } else {
	          // ITI
	          this.state = 'iti';
	          this.startTime = currentTime;
	        }
	      } // Dots


	      if (this.state === 'stimulus') {
	        this.dots[this.COHERENT].length = this.signal === 'present' ? Math.round(this.count * this.coherence) : 0;
	        this.dots[this.RANDOM].length = this.signal === 'present' ? this.count - this.dots[this.COHERENT].length : this.count;

	        for (var t = 0; t < this.dots.length; t += 1) {
	          for (var i = 0; i < this.dots[t].length; i += 1) {
	            var newDot = this.dots[t][i] === undefined;

	            if (newDot) {
	              this.dots[t][i] = {};
	            }

	            var dot = this.dots[t][i];

	            if (newTrial || newDot) {
	              dot.direction = t === this.RANDOM ? Math.random() * 360 : this.currentDirection;
	              dot.birth = currentTime - Math.floor(Math.random() * this.lifetime);
	              var angle = Math.random() * 2 * Math.PI;
	              var radius = Math.sqrt(Math.random());
	              dot.x = this.xScale(radius * Math.cos(angle));
	              dot.y = this.yScale(radius * Math.sin(angle));
	            } else if (currentTime > dot.birth + this.lifetime) {
	              // Dot has died, so rebirth
	              dot.birth += this.lifetime;
	              dot.direction = t === this.RANDOM ? Math.random() * 360 : this.currentDirection;

	              var _angle = Math.random() * 2 * Math.PI;

	              var _radius = Math.sqrt(Math.random());

	              dot.x = this.xScale(_radius * Math.cos(_angle));
	              dot.y = this.yScale(_radius * Math.sin(_angle));
	            } else {
	              if (t === this.COHERENT) {
	                dot.direction = this.currentDirection;
	              }

	              var directionR = dot.direction * (Math.PI / 180);
	              dot.dx = this.speed * (frameTime / 1000) * Math.cos(directionR);
	              dot.dy = this.speed * (frameTime / 1000) * Math.sin(directionR); // Update position

	              dot.x += dot.dx;
	              dot.y += dot.dy; // Calculate squared distance from center

	              var distance2 = Math.pow(dot.x - this.xScale(0), 2) + Math.pow(dot.y - this.yScale(0), 2);
	              var radius2 = Math.pow(this.xScale(1) - this.xScale(0), 2);

	              if (distance2 > radius2) {
	                // Dot has exited so move to other side
	                dot.x = -(dot.x - this.xScale(0)) + this.xScale(0);
	                dot.y = -(dot.y - this.yScale(0)) + this.yScale(0);
	              }
	            }
	          }
	        }
	      } // Fixation
	      //  DATA-JOIN


	      var fixationUpdate = select(this.renderRoot).select('.content').selectAll('.fixation').data(this.state === 'iti' ? [true] : []); //  ENTER

	      var fixationEnter = fixationUpdate.enter().append('g').classed('fixation', true);
	      fixationEnter.append('line').attr('x1', this.xScale(-0.1)).attr('y1', this.xScale(0)).attr('x2', this.xScale(0.1)).attr('y2', this.xScale(0));
	      fixationEnter.append('line').attr('x1', this.xScale(0)).attr('y1', this.xScale(-0.1)).attr('x2', this.xScale(0)).attr('y2', this.xScale(0.1)); //  EXIT

	      fixationUpdate.exit().remove(); // Dots
	      //  DATA-JOIN

	      var dotsUpdate = select(this.renderRoot).select('.content').selectAll('.dots').data(this.state === 'stimulus' ? this.dots : [[], []]);
	      var dotUpdate = dotsUpdate.selectAll('.dot').data(function (datum) {
	        return datum;
	      }); //  ENTER

	      var dotEnter = dotUpdate.enter().append('circle').classed('dot', true).attr('r', 2);
	      /* HACK: Firefox does not support CSS SVG Geometry Properties */
	      //  MERGE

	      dotEnter.merge(dotUpdate).attr('cx', function (datum) {
	        return datum.x;
	      }).attr('cy', function (datum) {
	        return datum.y;
	      }); //  EXIT

	      dotUpdate.exit().remove(); // Query
	      //  DATA-JOIN

	      var queryUpdate = select(this.renderRoot).select('.content').selectAll('.query').data(this.state === 'wait' ? [true] : []); //  ENTER

	      var queryEnter = queryUpdate.enter().append('g').classed('query', true);
	      queryEnter.append('text').attr('x', this.xScale(0)).attr('y', this.xScale(0)).attr('text-anchor', 'middle').attr('alignment-baseline', 'middle').text('?'); //  EXIT

	      queryUpdate.exit().remove();
	    }
	  }], [{
	    key: "properties",
	    get: function get() {
	      return {
	        coherence: {
	          attribute: 'coherence',
	          type: Number,
	          reflect: true
	        },
	        count: {
	          attribute: 'count',
	          type: Number,
	          reflect: true
	        },
	        probability: {
	          attribute: 'probability',
	          type: Number,
	          reflect: true
	        },
	        duration: {
	          attribute: 'duration',
	          type: Number,
	          reflect: true
	        },
	        wait: {
	          attribute: 'wait',
	          type: Number,
	          reflect: true
	        },
	        iti: {
	          attribute: 'iti',
	          type: Number,
	          reflect: true
	        },
	        trials: {
	          attribute: 'trials',
	          type: Number,
	          reflect: true
	        },
	        running: {
	          attribute: 'running',
	          type: Boolean,
	          reflect: true
	        },
	        direction: {
	          attribute: false,
	          type: Number,
	          reflect: false
	        },
	        lifetime: {
	          attribute: false,
	          type: Number,
	          reflect: false
	        },
	        speed: {
	          attribute: false,
	          type: Number,
	          reflect: false
	        },
	        width: {
	          attribute: false,
	          type: Number,
	          reflect: false
	        },
	        height: {
	          attribute: false,
	          type: Number,
	          reflect: false
	        },
	        rem: {
	          attribute: false,
	          type: Number,
	          reflect: false
	        }
	      };
	    }
	  }, {
	    key: "styles",
	    get: function get() {
	      return [_get(_getPrototypeOf(RDKTask), "styles", this), r$2(_templateObject2$9 || (_templateObject2$9 = _taggedTemplateLiteral(["\n        :host {\n          display: inline-block;\n\n          width: 10rem;\n          height: 10rem;\n        }\n\n        .main {\n          width: 100%;\n          height: 100%;\n        }\n\n        .background {\n          fill: var(---color-element-disabled);\n          stroke: none;\n        }\n\n        .outline {\n          fill: none;\n          stroke: var(---color-element-emphasis);\n          stroke-width: 2px;\n        }\n\n        .dot {\n          /* r: 2px; HACK: Firefox does not support CSS SVG Geometry Properties */\n        }\n\n        .dots.coherent {\n          fill: var(---color-background);\n        }\n\n        .dots.random {\n          fill: var(---color-background);\n        }\n\n        .fixation {\n          stroke: var(---color-text);\n          stroke-width: 2px;\n        }\n\n        .query {\n          font-size: 1.75rem;\n          font-weight: 600;\n        }\n      "])))];
	    }
	  }]);

	  return RDKTask;
	}(SDTElement);
	customElements.define('rdk-task', RDKTask);

	var jstat = {exports: {}};

	(function (module, exports) {
	  (function (window, factory) {
	    {
	      module.exports = factory();
	    }
	  })(commonjsGlobal, function () {
	    var jStat = function (Math, undefined$1) {
	      // For quick reference.
	      var concat = Array.prototype.concat;
	      var slice = Array.prototype.slice;
	      var toString = Object.prototype.toString; // Calculate correction for IEEE error
	      // TODO: This calculation can be improved.

	      function calcRdx(n, m) {
	        var val = n > m ? n : m;
	        return Math.pow(10, 17 - ~~(Math.log(val > 0 ? val : -val) * Math.LOG10E));
	      }

	      var isArray = Array.isArray || function isArray(arg) {
	        return toString.call(arg) === '[object Array]';
	      };

	      function isFunction(arg) {
	        return toString.call(arg) === '[object Function]';
	      }

	      function isNumber(num) {
	        return typeof num === 'number' ? num - num === 0 : false;
	      } // Converts the jStat matrix to vector.


	      function toVector(arr) {
	        return concat.apply([], arr);
	      } // The one and only jStat constructor.


	      function jStat() {
	        return new jStat._init(arguments);
	      } // TODO: Remove after all references in src files have been removed.


	      jStat.fn = jStat.prototype; // By separating the initializer from the constructor it's easier to handle
	      // always returning a new instance whether "new" was used or not.

	      jStat._init = function _init(args) {
	        // If first argument is an array, must be vector or matrix.
	        if (isArray(args[0])) {
	          // Check if matrix.
	          if (isArray(args[0][0])) {
	            // See if a mapping function was also passed.
	            if (isFunction(args[1])) args[0] = jStat.map(args[0], args[1]); // Iterate over each is faster than this.push.apply(this, args[0].

	            for (var i = 0; i < args[0].length; i++) {
	              this[i] = args[0][i];
	            }

	            this.length = args[0].length; // Otherwise must be a vector.
	          } else {
	            this[0] = isFunction(args[1]) ? jStat.map(args[0], args[1]) : args[0];
	            this.length = 1;
	          } // If first argument is number, assume creation of sequence.

	        } else if (isNumber(args[0])) {
	          this[0] = jStat.seq.apply(null, args);
	          this.length = 1; // Handle case when jStat object is passed to jStat.
	        } else if (args[0] instanceof jStat) {
	          // Duplicate the object and pass it back.
	          return jStat(args[0].toArray()); // Unexpected argument value, return empty jStat object.
	          // TODO: This is strange behavior. Shouldn't this throw or some such to let
	          // the user know they had bad arguments?
	        } else {
	          this[0] = [];
	          this.length = 1;
	        }

	        return this;
	      };

	      jStat._init.prototype = jStat.prototype;
	      jStat._init.constructor = jStat; // Utility functions.
	      // TODO: for internal use only?

	      jStat.utils = {
	        calcRdx: calcRdx,
	        isArray: isArray,
	        isFunction: isFunction,
	        isNumber: isNumber,
	        toVector: toVector
	      };
	      jStat._random_fn = Math.random;

	      jStat.setRandom = function setRandom(fn) {
	        if (typeof fn !== 'function') throw new TypeError('fn is not a function');
	        jStat._random_fn = fn;
	      }; // Easily extend the jStat object.
	      // TODO: is this seriously necessary?


	      jStat.extend = function extend(obj) {
	        var i, j;

	        if (arguments.length === 1) {
	          for (j in obj) {
	            jStat[j] = obj[j];
	          }

	          return this;
	        }

	        for (i = 1; i < arguments.length; i++) {
	          for (j in arguments[i]) {
	            obj[j] = arguments[i][j];
	          }
	        }

	        return obj;
	      }; // Returns the number of rows in the matrix.


	      jStat.rows = function rows(arr) {
	        return arr.length || 1;
	      }; // Returns the number of columns in the matrix.


	      jStat.cols = function cols(arr) {
	        return arr[0].length || 1;
	      }; // Returns the dimensions of the object { rows: i, cols: j }


	      jStat.dimensions = function dimensions(arr) {
	        return {
	          rows: jStat.rows(arr),
	          cols: jStat.cols(arr)
	        };
	      }; // Returns a specified row as a vector or return a sub matrix by pick some rows


	      jStat.row = function row(arr, index) {
	        if (isArray(index)) {
	          return index.map(function (i) {
	            return jStat.row(arr, i);
	          });
	        }

	        return arr[index];
	      }; // return row as array
	      // rowa([[1,2],[3,4]],0) -> [1,2]


	      jStat.rowa = function rowa(arr, i) {
	        return jStat.row(arr, i);
	      }; // Returns the specified column as a vector or return a sub matrix by pick some
	      // columns


	      jStat.col = function col(arr, index) {
	        if (isArray(index)) {
	          var submat = jStat.arange(arr.length).map(function () {
	            return new Array(index.length);
	          });
	          index.forEach(function (ind, i) {
	            jStat.arange(arr.length).forEach(function (j) {
	              submat[j][i] = arr[j][ind];
	            });
	          });
	          return submat;
	        }

	        var column = new Array(arr.length);

	        for (var i = 0; i < arr.length; i++) {
	          column[i] = [arr[i][index]];
	        }

	        return column;
	      }; // return column as array
	      // cola([[1,2],[3,4]],0) -> [1,3]


	      jStat.cola = function cola(arr, i) {
	        return jStat.col(arr, i).map(function (a) {
	          return a[0];
	        });
	      }; // Returns the diagonal of the matrix


	      jStat.diag = function diag(arr) {
	        var nrow = jStat.rows(arr);
	        var res = new Array(nrow);

	        for (var row = 0; row < nrow; row++) {
	          res[row] = [arr[row][row]];
	        }

	        return res;
	      }; // Returns the anti-diagonal of the matrix


	      jStat.antidiag = function antidiag(arr) {
	        var nrow = jStat.rows(arr) - 1;
	        var res = new Array(nrow);

	        for (var i = 0; nrow >= 0; nrow--, i++) {
	          res[i] = [arr[i][nrow]];
	        }

	        return res;
	      }; // Transpose a matrix or array.


	      jStat.transpose = function transpose(arr) {
	        var obj = [];
	        var objArr, rows, cols, j, i; // Make sure arr is in matrix format.

	        if (!isArray(arr[0])) arr = [arr];
	        rows = arr.length;
	        cols = arr[0].length;

	        for (i = 0; i < cols; i++) {
	          objArr = new Array(rows);

	          for (j = 0; j < rows; j++) {
	            objArr[j] = arr[j][i];
	          }

	          obj.push(objArr);
	        } // If obj is vector, return only single array.


	        return obj.length === 1 ? obj[0] : obj;
	      }; // Map a function to an array or array of arrays.
	      // "toAlter" is an internal variable.


	      jStat.map = function map(arr, func, toAlter) {
	        var row, nrow, ncol, res, col;
	        if (!isArray(arr[0])) arr = [arr];
	        nrow = arr.length;
	        ncol = arr[0].length;
	        res = toAlter ? arr : new Array(nrow);

	        for (row = 0; row < nrow; row++) {
	          // if the row doesn't exist, create it
	          if (!res[row]) res[row] = new Array(ncol);

	          for (col = 0; col < ncol; col++) {
	            res[row][col] = func(arr[row][col], row, col);
	          }
	        }

	        return res.length === 1 ? res[0] : res;
	      }; // Cumulatively combine the elements of an array or array of arrays using a function.


	      jStat.cumreduce = function cumreduce(arr, func, toAlter) {
	        var row, nrow, ncol, res, col;
	        if (!isArray(arr[0])) arr = [arr];
	        nrow = arr.length;
	        ncol = arr[0].length;
	        res = toAlter ? arr : new Array(nrow);

	        for (row = 0; row < nrow; row++) {
	          // if the row doesn't exist, create it
	          if (!res[row]) res[row] = new Array(ncol);
	          if (ncol > 0) res[row][0] = arr[row][0];

	          for (col = 1; col < ncol; col++) {
	            res[row][col] = func(res[row][col - 1], arr[row][col]);
	          }
	        }

	        return res.length === 1 ? res[0] : res;
	      }; // Destructively alter an array.


	      jStat.alter = function alter(arr, func) {
	        return jStat.map(arr, func, true);
	      }; // Generate a rows x cols matrix according to the supplied function.


	      jStat.create = function create(rows, cols, func) {
	        var res = new Array(rows);
	        var i, j;

	        if (isFunction(cols)) {
	          func = cols;
	          cols = rows;
	        }

	        for (i = 0; i < rows; i++) {
	          res[i] = new Array(cols);

	          for (j = 0; j < cols; j++) {
	            res[i][j] = func(i, j);
	          }
	        }

	        return res;
	      };

	      function retZero() {
	        return 0;
	      } // Generate a rows x cols matrix of zeros.


	      jStat.zeros = function zeros(rows, cols) {
	        if (!isNumber(cols)) cols = rows;
	        return jStat.create(rows, cols, retZero);
	      };

	      function retOne() {
	        return 1;
	      } // Generate a rows x cols matrix of ones.


	      jStat.ones = function ones(rows, cols) {
	        if (!isNumber(cols)) cols = rows;
	        return jStat.create(rows, cols, retOne);
	      }; // Generate a rows x cols matrix of uniformly random numbers.


	      jStat.rand = function rand(rows, cols) {
	        if (!isNumber(cols)) cols = rows;
	        return jStat.create(rows, cols, jStat._random_fn);
	      };

	      function retIdent(i, j) {
	        return i === j ? 1 : 0;
	      } // Generate an identity matrix of size row x cols.


	      jStat.identity = function identity(rows, cols) {
	        if (!isNumber(cols)) cols = rows;
	        return jStat.create(rows, cols, retIdent);
	      }; // Tests whether a matrix is symmetric


	      jStat.symmetric = function symmetric(arr) {
	        var size = arr.length;
	        var row, col;
	        if (arr.length !== arr[0].length) return false;

	        for (row = 0; row < size; row++) {
	          for (col = 0; col < size; col++) {
	            if (arr[col][row] !== arr[row][col]) return false;
	          }
	        }

	        return true;
	      }; // Set all values to zero.


	      jStat.clear = function clear(arr) {
	        return jStat.alter(arr, retZero);
	      }; // Generate sequence.


	      jStat.seq = function seq(min, max, length, func) {
	        if (!isFunction(func)) func = false;
	        var arr = [];
	        var hival = calcRdx(min, max);
	        var step = (max * hival - min * hival) / ((length - 1) * hival);
	        var current = min;
	        var cnt; // Current is assigned using a technique to compensate for IEEE error.
	        // TODO: Needs better implementation.

	        for (cnt = 0; current <= max && cnt < length; cnt++, current = (min * hival + step * hival * cnt) / hival) {
	          arr.push(func ? func(current, cnt) : current);
	        }

	        return arr;
	      }; // arange(5) -> [0,1,2,3,4]
	      // arange(1,5) -> [1,2,3,4]
	      // arange(5,1,-1) -> [5,4,3,2]


	      jStat.arange = function arange(start, end, step) {
	        var rl = [];
	        var i;
	        step = step || 1;

	        if (end === undefined$1) {
	          end = start;
	          start = 0;
	        }

	        if (start === end || step === 0) {
	          return [];
	        }

	        if (start < end && step < 0) {
	          return [];
	        }

	        if (start > end && step > 0) {
	          return [];
	        }

	        if (step > 0) {
	          for (i = start; i < end; i += step) {
	            rl.push(i);
	          }
	        } else {
	          for (i = start; i > end; i += step) {
	            rl.push(i);
	          }
	        }

	        return rl;
	      }; // A=[[1,2,3],[4,5,6],[7,8,9]]
	      // slice(A,{row:{end:2},col:{start:1}}) -> [[2,3],[5,6]]
	      // slice(A,1,{start:1}) -> [5,6]
	      // as numpy code A[:2,1:]


	      jStat.slice = function () {
	        function _slice(list, start, end, step) {
	          // note it's not equal to range.map mode it's a bug
	          var i;
	          var rl = [];
	          var length = list.length;

	          if (start === undefined$1 && end === undefined$1 && step === undefined$1) {
	            return jStat.copy(list);
	          }

	          start = start || 0;
	          end = end || list.length;
	          start = start >= 0 ? start : length + start;
	          end = end >= 0 ? end : length + end;
	          step = step || 1;

	          if (start === end || step === 0) {
	            return [];
	          }

	          if (start < end && step < 0) {
	            return [];
	          }

	          if (start > end && step > 0) {
	            return [];
	          }

	          if (step > 0) {
	            for (i = start; i < end; i += step) {
	              rl.push(list[i]);
	            }
	          } else {
	            for (i = start; i > end; i += step) {
	              rl.push(list[i]);
	            }
	          }

	          return rl;
	        }

	        function slice(list, rcSlice) {
	          var colSlice, rowSlice;
	          rcSlice = rcSlice || {};

	          if (isNumber(rcSlice.row)) {
	            if (isNumber(rcSlice.col)) return list[rcSlice.row][rcSlice.col];
	            var row = jStat.rowa(list, rcSlice.row);
	            colSlice = rcSlice.col || {};
	            return _slice(row, colSlice.start, colSlice.end, colSlice.step);
	          }

	          if (isNumber(rcSlice.col)) {
	            var col = jStat.cola(list, rcSlice.col);
	            rowSlice = rcSlice.row || {};
	            return _slice(col, rowSlice.start, rowSlice.end, rowSlice.step);
	          }

	          rowSlice = rcSlice.row || {};
	          colSlice = rcSlice.col || {};

	          var rows = _slice(list, rowSlice.start, rowSlice.end, rowSlice.step);

	          return rows.map(function (row) {
	            return _slice(row, colSlice.start, colSlice.end, colSlice.step);
	          });
	        }

	        return slice;
	      }(); // A=[[1,2,3],[4,5,6],[7,8,9]]
	      // sliceAssign(A,{row:{start:1},col:{start:1}},[[0,0],[0,0]])
	      // A=[[1,2,3],[4,0,0],[7,0,0]]


	      jStat.sliceAssign = function sliceAssign(A, rcSlice, B) {
	        var nl, ml;

	        if (isNumber(rcSlice.row)) {
	          if (isNumber(rcSlice.col)) return A[rcSlice.row][rcSlice.col] = B;
	          rcSlice.col = rcSlice.col || {};
	          rcSlice.col.start = rcSlice.col.start || 0;
	          rcSlice.col.end = rcSlice.col.end || A[0].length;
	          rcSlice.col.step = rcSlice.col.step || 1;
	          nl = jStat.arange(rcSlice.col.start, Math.min(A.length, rcSlice.col.end), rcSlice.col.step);
	          var m = rcSlice.row;
	          nl.forEach(function (n, i) {
	            A[m][n] = B[i];
	          });
	          return A;
	        }

	        if (isNumber(rcSlice.col)) {
	          rcSlice.row = rcSlice.row || {};
	          rcSlice.row.start = rcSlice.row.start || 0;
	          rcSlice.row.end = rcSlice.row.end || A.length;
	          rcSlice.row.step = rcSlice.row.step || 1;
	          ml = jStat.arange(rcSlice.row.start, Math.min(A[0].length, rcSlice.row.end), rcSlice.row.step);
	          var n = rcSlice.col;
	          ml.forEach(function (m, j) {
	            A[m][n] = B[j];
	          });
	          return A;
	        }

	        if (B[0].length === undefined$1) {
	          B = [B];
	        }

	        rcSlice.row.start = rcSlice.row.start || 0;
	        rcSlice.row.end = rcSlice.row.end || A.length;
	        rcSlice.row.step = rcSlice.row.step || 1;
	        rcSlice.col.start = rcSlice.col.start || 0;
	        rcSlice.col.end = rcSlice.col.end || A[0].length;
	        rcSlice.col.step = rcSlice.col.step || 1;
	        ml = jStat.arange(rcSlice.row.start, Math.min(A.length, rcSlice.row.end), rcSlice.row.step);
	        nl = jStat.arange(rcSlice.col.start, Math.min(A[0].length, rcSlice.col.end), rcSlice.col.step);
	        ml.forEach(function (m, i) {
	          nl.forEach(function (n, j) {
	            A[m][n] = B[i][j];
	          });
	        });
	        return A;
	      }; // [1,2,3] ->
	      // [[1,0,0],[0,2,0],[0,0,3]]


	      jStat.diagonal = function diagonal(diagArray) {
	        var mat = jStat.zeros(diagArray.length, diagArray.length);
	        diagArray.forEach(function (t, i) {
	          mat[i][i] = t;
	        });
	        return mat;
	      }; // return copy of A


	      jStat.copy = function copy(A) {
	        return A.map(function (row) {
	          if (isNumber(row)) return row;
	          return row.map(function (t) {
	            return t;
	          });
	        });
	      }; // TODO: Go over this entire implementation. Seems a tragic waste of resources
	      // doing all this work. Instead, and while ugly, use new Function() to generate
	      // a custom function for each static method.
	      // Quick reference.


	      var jProto = jStat.prototype; // Default length.

	      jProto.length = 0; // For internal use only.
	      // TODO: Check if they're actually used, and if they are then rename them
	      // to _*

	      jProto.push = Array.prototype.push;
	      jProto.sort = Array.prototype.sort;
	      jProto.splice = Array.prototype.splice;
	      jProto.slice = Array.prototype.slice; // Return a clean array.

	      jProto.toArray = function toArray() {
	        return this.length > 1 ? slice.call(this) : slice.call(this)[0];
	      }; // Map a function to a matrix or vector.


	      jProto.map = function map(func, toAlter) {
	        return jStat(jStat.map(this, func, toAlter));
	      }; // Cumulatively combine the elements of a matrix or vector using a function.


	      jProto.cumreduce = function cumreduce(func, toAlter) {
	        return jStat(jStat.cumreduce(this, func, toAlter));
	      }; // Destructively alter an array.


	      jProto.alter = function alter(func) {
	        jStat.alter(this, func);
	        return this;
	      }; // Extend prototype with methods that have no argument.


	      (function (funcs) {
	        for (var i = 0; i < funcs.length; i++) {
	          (function (passfunc) {
	            jProto[passfunc] = function (func) {
	              var self = this,
	                  results; // Check for callback.

	              if (func) {
	                setTimeout(function () {
	                  func.call(self, jProto[passfunc].call(self));
	                });
	                return this;
	              }

	              results = jStat[passfunc](this);
	              return isArray(results) ? jStat(results) : results;
	            };
	          })(funcs[i]);
	        }
	      })('transpose clear symmetric rows cols dimensions diag antidiag'.split(' ')); // Extend prototype with methods that have one argument.


	      (function (funcs) {
	        for (var i = 0; i < funcs.length; i++) {
	          (function (passfunc) {
	            jProto[passfunc] = function (index, func) {
	              var self = this; // check for callback

	              if (func) {
	                setTimeout(function () {
	                  func.call(self, jProto[passfunc].call(self, index));
	                });
	                return this;
	              }

	              return jStat(jStat[passfunc](this, index));
	            };
	          })(funcs[i]);
	        }
	      })('row col'.split(' ')); // Extend prototype with simple shortcut methods.


	      (function (funcs) {
	        for (var i = 0; i < funcs.length; i++) {
	          (function (passfunc) {
	            jProto[passfunc] = function () {
	              return jStat(jStat[passfunc].apply(null, arguments));
	            };
	          })(funcs[i]);
	        }
	      })('create zeros ones rand identity'.split(' ')); // Exposing jStat.


	      return jStat;
	    }(Math);

	    (function (jStat, Math) {
	      var isFunction = jStat.utils.isFunction; // Ascending functions for sort

	      function ascNum(a, b) {
	        return a - b;
	      }

	      function clip(arg, min, max) {
	        return Math.max(min, Math.min(arg, max));
	      } // sum of an array


	      jStat.sum = function sum(arr) {
	        var sum = 0;
	        var i = arr.length;

	        while (--i >= 0) {
	          sum += arr[i];
	        }

	        return sum;
	      }; // sum squared


	      jStat.sumsqrd = function sumsqrd(arr) {
	        var sum = 0;
	        var i = arr.length;

	        while (--i >= 0) {
	          sum += arr[i] * arr[i];
	        }

	        return sum;
	      }; // sum of squared errors of prediction (SSE)


	      jStat.sumsqerr = function sumsqerr(arr) {
	        var mean = jStat.mean(arr);
	        var sum = 0;
	        var i = arr.length;
	        var tmp;

	        while (--i >= 0) {
	          tmp = arr[i] - mean;
	          sum += tmp * tmp;
	        }

	        return sum;
	      }; // sum of an array in each row


	      jStat.sumrow = function sumrow(arr) {
	        var sum = 0;
	        var i = arr.length;

	        while (--i >= 0) {
	          sum += arr[i];
	        }

	        return sum;
	      }; // product of an array


	      jStat.product = function product(arr) {
	        var prod = 1;
	        var i = arr.length;

	        while (--i >= 0) {
	          prod *= arr[i];
	        }

	        return prod;
	      }; // minimum value of an array


	      jStat.min = function min(arr) {
	        var low = arr[0];
	        var i = 0;

	        while (++i < arr.length) {
	          if (arr[i] < low) low = arr[i];
	        }

	        return low;
	      }; // maximum value of an array


	      jStat.max = function max(arr) {
	        var high = arr[0];
	        var i = 0;

	        while (++i < arr.length) {
	          if (arr[i] > high) high = arr[i];
	        }

	        return high;
	      }; // unique values of an array


	      jStat.unique = function unique(arr) {
	        var hash = {},
	            _arr = [];

	        for (var i = 0; i < arr.length; i++) {
	          if (!hash[arr[i]]) {
	            hash[arr[i]] = true;

	            _arr.push(arr[i]);
	          }
	        }

	        return _arr;
	      }; // mean value of an array


	      jStat.mean = function mean(arr) {
	        return jStat.sum(arr) / arr.length;
	      }; // mean squared error (MSE)


	      jStat.meansqerr = function meansqerr(arr) {
	        return jStat.sumsqerr(arr) / arr.length;
	      }; // geometric mean of an array


	      jStat.geomean = function geomean(arr) {
	        return Math.pow(jStat.product(arr), 1 / arr.length);
	      }; // median of an array


	      jStat.median = function median(arr) {
	        var arrlen = arr.length;

	        var _arr = arr.slice().sort(ascNum); // check if array is even or odd, then return the appropriate


	        return !(arrlen & 1) ? (_arr[arrlen / 2 - 1] + _arr[arrlen / 2]) / 2 : _arr[arrlen / 2 | 0];
	      }; // cumulative sum of an array


	      jStat.cumsum = function cumsum(arr) {
	        return jStat.cumreduce(arr, function (a, b) {
	          return a + b;
	        });
	      }; // cumulative product of an array


	      jStat.cumprod = function cumprod(arr) {
	        return jStat.cumreduce(arr, function (a, b) {
	          return a * b;
	        });
	      }; // successive differences of a sequence


	      jStat.diff = function diff(arr) {
	        var diffs = [];
	        var arrLen = arr.length;
	        var i;

	        for (i = 1; i < arrLen; i++) {
	          diffs.push(arr[i] - arr[i - 1]);
	        }

	        return diffs;
	      }; // ranks of an array


	      jStat.rank = function (arr) {
	        var i;
	        var distinctNumbers = [];
	        var numberCounts = {};

	        for (i = 0; i < arr.length; i++) {
	          var number = arr[i];

	          if (numberCounts[number]) {
	            numberCounts[number]++;
	          } else {
	            numberCounts[number] = 1;
	            distinctNumbers.push(number);
	          }
	        }

	        var sortedDistinctNumbers = distinctNumbers.sort(ascNum);
	        var numberRanks = {};
	        var currentRank = 1;

	        for (i = 0; i < sortedDistinctNumbers.length; i++) {
	          var number = sortedDistinctNumbers[i];
	          var count = numberCounts[number];
	          var first = currentRank;
	          var last = currentRank + count - 1;
	          var rank = (first + last) / 2;
	          numberRanks[number] = rank;
	          currentRank += count;
	        }

	        return arr.map(function (number) {
	          return numberRanks[number];
	        });
	      }; // mode of an array
	      // if there are multiple modes of an array, return all of them
	      // is this the appropriate way of handling it?


	      jStat.mode = function mode(arr) {
	        var arrLen = arr.length;

	        var _arr = arr.slice().sort(ascNum);

	        var count = 1;
	        var maxCount = 0;
	        var numMaxCount = 0;
	        var mode_arr = [];
	        var i;

	        for (i = 0; i < arrLen; i++) {
	          if (_arr[i] === _arr[i + 1]) {
	            count++;
	          } else {
	            if (count > maxCount) {
	              mode_arr = [_arr[i]];
	              maxCount = count;
	              numMaxCount = 0;
	            } // are there multiple max counts
	            else if (count === maxCount) {
	              mode_arr.push(_arr[i]);
	              numMaxCount++;
	            } // resetting count for new value in array


	            count = 1;
	          }
	        }

	        return numMaxCount === 0 ? mode_arr[0] : mode_arr;
	      }; // range of an array


	      jStat.range = function range(arr) {
	        return jStat.max(arr) - jStat.min(arr);
	      }; // variance of an array
	      // flag = true indicates sample instead of population


	      jStat.variance = function variance(arr, flag) {
	        return jStat.sumsqerr(arr) / (arr.length - (flag ? 1 : 0));
	      }; // pooled variance of an array of arrays


	      jStat.pooledvariance = function pooledvariance(arr) {
	        var sumsqerr = arr.reduce(function (a, samples) {
	          return a + jStat.sumsqerr(samples);
	        }, 0);
	        var count = arr.reduce(function (a, samples) {
	          return a + samples.length;
	        }, 0);
	        return sumsqerr / (count - arr.length);
	      }; // deviation of an array


	      jStat.deviation = function (arr) {
	        var mean = jStat.mean(arr);
	        var arrlen = arr.length;
	        var dev = new Array(arrlen);

	        for (var i = 0; i < arrlen; i++) {
	          dev[i] = arr[i] - mean;
	        }

	        return dev;
	      }; // standard deviation of an array
	      // flag = true indicates sample instead of population


	      jStat.stdev = function stdev(arr, flag) {
	        return Math.sqrt(jStat.variance(arr, flag));
	      }; // pooled standard deviation of an array of arrays


	      jStat.pooledstdev = function pooledstdev(arr) {
	        return Math.sqrt(jStat.pooledvariance(arr));
	      }; // mean deviation (mean absolute deviation) of an array


	      jStat.meandev = function meandev(arr) {
	        var mean = jStat.mean(arr);
	        var a = [];

	        for (var i = arr.length - 1; i >= 0; i--) {
	          a.push(Math.abs(arr[i] - mean));
	        }

	        return jStat.mean(a);
	      }; // median deviation (median absolute deviation) of an array


	      jStat.meddev = function meddev(arr) {
	        var median = jStat.median(arr);
	        var a = [];

	        for (var i = arr.length - 1; i >= 0; i--) {
	          a.push(Math.abs(arr[i] - median));
	        }

	        return jStat.median(a);
	      }; // coefficient of variation


	      jStat.coeffvar = function coeffvar(arr) {
	        return jStat.stdev(arr) / jStat.mean(arr);
	      }; // quartiles of an array


	      jStat.quartiles = function quartiles(arr) {
	        var arrlen = arr.length;

	        var _arr = arr.slice().sort(ascNum);

	        return [_arr[Math.round(arrlen / 4) - 1], _arr[Math.round(arrlen / 2) - 1], _arr[Math.round(arrlen * 3 / 4) - 1]];
	      }; // Arbitary quantiles of an array. Direct port of the scipy.stats
	      // implementation by Pierre GF Gerard-Marchant.


	      jStat.quantiles = function quantiles(arr, quantilesArray, alphap, betap) {
	        var sortedArray = arr.slice().sort(ascNum);
	        var quantileVals = [quantilesArray.length];
	        var n = arr.length;
	        var i, p, m, aleph, k, gamma;
	        if (typeof alphap === 'undefined') alphap = 3 / 8;
	        if (typeof betap === 'undefined') betap = 3 / 8;

	        for (i = 0; i < quantilesArray.length; i++) {
	          p = quantilesArray[i];
	          m = alphap + p * (1 - alphap - betap);
	          aleph = n * p + m;
	          k = Math.floor(clip(aleph, 1, n - 1));
	          gamma = clip(aleph - k, 0, 1);
	          quantileVals[i] = (1 - gamma) * sortedArray[k - 1] + gamma * sortedArray[k];
	        }

	        return quantileVals;
	      }; // Return the k-th percentile of values in a range, where k is in the range 0..1, inclusive.
	      // Passing true for the exclusive parameter excludes both endpoints of the range.


	      jStat.percentile = function percentile(arr, k, exclusive) {
	        var _arr = arr.slice().sort(ascNum);

	        var realIndex = k * (_arr.length + (exclusive ? 1 : -1)) + (exclusive ? 0 : 1);
	        var index = parseInt(realIndex);
	        var frac = realIndex - index;

	        if (index + 1 < _arr.length) {
	          return _arr[index - 1] + frac * (_arr[index] - _arr[index - 1]);
	        } else {
	          return _arr[index - 1];
	        }
	      }; // The percentile rank of score in a given array. Returns the percentage
	      // of all values in the input array that are less than (kind='strict') or
	      // less or equal than (kind='weak') score. Default is weak.


	      jStat.percentileOfScore = function percentileOfScore(arr, score, kind) {
	        var counter = 0;
	        var len = arr.length;
	        var strict = false;
	        var value, i;
	        if (kind === 'strict') strict = true;

	        for (i = 0; i < len; i++) {
	          value = arr[i];

	          if (strict && value < score || !strict && value <= score) {
	            counter++;
	          }
	        }

	        return counter / len;
	      }; // Histogram (bin count) data


	      jStat.histogram = function histogram(arr, binCnt) {
	        binCnt = binCnt || 4;
	        var first = jStat.min(arr);
	        var binWidth = (jStat.max(arr) - first) / binCnt;
	        var len = arr.length;
	        var bins = [];
	        var i;

	        for (i = 0; i < binCnt; i++) {
	          bins[i] = 0;
	        }

	        for (i = 0; i < len; i++) {
	          bins[Math.min(Math.floor((arr[i] - first) / binWidth), binCnt - 1)] += 1;
	        }

	        return bins;
	      }; // covariance of two arrays


	      jStat.covariance = function covariance(arr1, arr2) {
	        var u = jStat.mean(arr1);
	        var v = jStat.mean(arr2);
	        var arr1Len = arr1.length;
	        var sq_dev = new Array(arr1Len);
	        var i;

	        for (i = 0; i < arr1Len; i++) {
	          sq_dev[i] = (arr1[i] - u) * (arr2[i] - v);
	        }

	        return jStat.sum(sq_dev) / (arr1Len - 1);
	      }; // (pearson's) population correlation coefficient, rho


	      jStat.corrcoeff = function corrcoeff(arr1, arr2) {
	        return jStat.covariance(arr1, arr2) / jStat.stdev(arr1, 1) / jStat.stdev(arr2, 1);
	      }; // (spearman's) rank correlation coefficient, sp


	      jStat.spearmancoeff = function (arr1, arr2) {
	        arr1 = jStat.rank(arr1);
	        arr2 = jStat.rank(arr2); //return pearson's correlation of the ranks:

	        return jStat.corrcoeff(arr1, arr2);
	      }; // statistical standardized moments (general form of skew/kurt)


	      jStat.stanMoment = function stanMoment(arr, n) {
	        var mu = jStat.mean(arr);
	        var sigma = jStat.stdev(arr);
	        var len = arr.length;
	        var skewSum = 0;

	        for (var i = 0; i < len; i++) {
	          skewSum += Math.pow((arr[i] - mu) / sigma, n);
	        }

	        return skewSum / arr.length;
	      }; // (pearson's) moment coefficient of skewness


	      jStat.skewness = function skewness(arr) {
	        return jStat.stanMoment(arr, 3);
	      }; // (pearson's) (excess) kurtosis


	      jStat.kurtosis = function kurtosis(arr) {
	        return jStat.stanMoment(arr, 4) - 3;
	      };

	      var jProto = jStat.prototype; // Extend jProto with method for calculating cumulative sums and products.
	      // This differs from the similar extension below as cumsum and cumprod should
	      // not be run again in the case fullbool === true.
	      // If a matrix is passed, automatically assume operation should be done on the
	      // columns.

	      (function (funcs) {
	        for (var i = 0; i < funcs.length; i++) {
	          (function (passfunc) {
	            // If a matrix is passed, automatically assume operation should be done on
	            // the columns.
	            jProto[passfunc] = function (fullbool, func) {
	              var arr = [];
	              var i = 0;
	              var tmpthis = this; // Assignment reassignation depending on how parameters were passed in.

	              if (isFunction(fullbool)) {
	                func = fullbool;
	                fullbool = false;
	              } // Check if a callback was passed with the function.


	              if (func) {
	                setTimeout(function () {
	                  func.call(tmpthis, jProto[passfunc].call(tmpthis, fullbool));
	                });
	                return this;
	              } // Check if matrix and run calculations.


	              if (this.length > 1) {
	                tmpthis = fullbool === true ? this : this.transpose();

	                for (; i < tmpthis.length; i++) {
	                  arr[i] = jStat[passfunc](tmpthis[i]);
	                }

	                return arr;
	              } // Pass fullbool if only vector, not a matrix. for variance and stdev.


	              return jStat[passfunc](this[0], fullbool);
	            };
	          })(funcs[i]);
	        }
	      })('cumsum cumprod'.split(' ')); // Extend jProto with methods which don't require arguments and work on columns.


	      (function (funcs) {
	        for (var i = 0; i < funcs.length; i++) {
	          (function (passfunc) {
	            // If a matrix is passed, automatically assume operation should be done on
	            // the columns.
	            jProto[passfunc] = function (fullbool, func) {
	              var arr = [];
	              var i = 0;
	              var tmpthis = this; // Assignment reassignation depending on how parameters were passed in.

	              if (isFunction(fullbool)) {
	                func = fullbool;
	                fullbool = false;
	              } // Check if a callback was passed with the function.


	              if (func) {
	                setTimeout(function () {
	                  func.call(tmpthis, jProto[passfunc].call(tmpthis, fullbool));
	                });
	                return this;
	              } // Check if matrix and run calculations.


	              if (this.length > 1) {
	                if (passfunc !== 'sumrow') tmpthis = fullbool === true ? this : this.transpose();

	                for (; i < tmpthis.length; i++) {
	                  arr[i] = jStat[passfunc](tmpthis[i]);
	                }

	                return fullbool === true ? jStat[passfunc](jStat.utils.toVector(arr)) : arr;
	              } // Pass fullbool if only vector, not a matrix. for variance and stdev.


	              return jStat[passfunc](this[0], fullbool);
	            };
	          })(funcs[i]);
	        }
	      })(('sum sumsqrd sumsqerr sumrow product min max unique mean meansqerr ' + 'geomean median diff rank mode range variance deviation stdev meandev ' + 'meddev coeffvar quartiles histogram skewness kurtosis').split(' ')); // Extend jProto with functions that take arguments. Operations on matrices are
	      // done on columns.


	      (function (funcs) {
	        for (var i = 0; i < funcs.length; i++) {
	          (function (passfunc) {
	            jProto[passfunc] = function () {
	              var arr = [];
	              var i = 0;
	              var tmpthis = this;
	              var args = Array.prototype.slice.call(arguments);
	              var callbackFunction; // If the last argument is a function, we assume it's a callback; we
	              // strip the callback out and call the function again.

	              if (isFunction(args[args.length - 1])) {
	                callbackFunction = args[args.length - 1];
	                var argsToPass = args.slice(0, args.length - 1);
	                setTimeout(function () {
	                  callbackFunction.call(tmpthis, jProto[passfunc].apply(tmpthis, argsToPass));
	                });
	                return this; // Otherwise we curry the function args and call normally.
	              } else {
	                callbackFunction = undefined;

	                var curriedFunction = function curriedFunction(vector) {
	                  return jStat[passfunc].apply(tmpthis, [vector].concat(args));
	                };
	              } // If this is a matrix, run column-by-column.


	              if (this.length > 1) {
	                tmpthis = tmpthis.transpose();

	                for (; i < tmpthis.length; i++) {
	                  arr[i] = curriedFunction(tmpthis[i]);
	                }

	                return arr;
	              } // Otherwise run on the vector.


	              return curriedFunction(this[0]);
	            };
	          })(funcs[i]);
	        }
	      })('quantiles percentileOfScore'.split(' '));
	    })(jStat, Math); // Special functions //


	    (function (jStat, Math) {
	      // Log-gamma function
	      jStat.gammaln = function gammaln(x) {
	        var j = 0;
	        var cof = [76.18009172947146, -86.50532032941677, 24.01409824083091, -1.231739572450155, 0.1208650973866179e-2, -0.5395239384953e-5];
	        var ser = 1.000000000190015;
	        var xx, y, tmp;
	        tmp = (y = xx = x) + 5.5;
	        tmp -= (xx + 0.5) * Math.log(tmp);

	        for (; j < 6; j++) {
	          ser += cof[j] / ++y;
	        }

	        return Math.log(2.5066282746310005 * ser / xx) - tmp;
	      };
	      /*
	       * log-gamma function to support poisson distribution sampling. The
	       * algorithm comes from SPECFUN by Shanjie Zhang and Jianming Jin and their
	       * book "Computation of Special Functions", 1996, John Wiley & Sons, Inc.
	       */


	      jStat.loggam = function loggam(x) {
	        var x0, x2, xp, gl, gl0;
	        var k, n;
	        var a = [8.333333333333333e-02, -2.777777777777778e-03, 7.936507936507937e-04, -5.952380952380952e-04, 8.417508417508418e-04, -1.917526917526918e-03, 6.410256410256410e-03, -2.955065359477124e-02, 1.796443723688307e-01, -1.39243221690590e+00];
	        x0 = x;
	        n = 0;

	        if (x == 1.0 || x == 2.0) {
	          return 0.0;
	        }

	        if (x <= 7.0) {
	          n = Math.floor(7 - x);
	          x0 = x + n;
	        }

	        x2 = 1.0 / (x0 * x0);
	        xp = 2 * Math.PI;
	        gl0 = a[9];

	        for (k = 8; k >= 0; k--) {
	          gl0 *= x2;
	          gl0 += a[k];
	        }

	        gl = gl0 / x0 + 0.5 * Math.log(xp) + (x0 - 0.5) * Math.log(x0) - x0;

	        if (x <= 7.0) {
	          for (k = 1; k <= n; k++) {
	            gl -= Math.log(x0 - 1.0);
	            x0 -= 1.0;
	          }
	        }

	        return gl;
	      }; // gamma of x


	      jStat.gammafn = function gammafn(x) {
	        var p = [-1.716185138865495, 24.76565080557592, -379.80425647094563, 629.3311553128184, 866.9662027904133, -31451.272968848367, -36144.413418691176, 66456.14382024054];
	        var q = [-30.8402300119739, 315.35062697960416, -1015.1563674902192, -3107.771671572311, 22538.118420980151, 4755.8462775278811, -134659.9598649693, -115132.2596755535];
	        var fact = false;
	        var n = 0;
	        var xden = 0;
	        var xnum = 0;
	        var y = x;
	        var i, z, yi, res;

	        if (x > 171.6243769536076) {
	          return Infinity;
	        }

	        if (y <= 0) {
	          res = y % 1 + 3.6e-16;

	          if (res) {
	            fact = (!(y & 1) ? 1 : -1) * Math.PI / Math.sin(Math.PI * res);
	            y = 1 - y;
	          } else {
	            return Infinity;
	          }
	        }

	        yi = y;

	        if (y < 1) {
	          z = y++;
	        } else {
	          z = (y -= n = (y | 0) - 1) - 1;
	        }

	        for (i = 0; i < 8; ++i) {
	          xnum = (xnum + p[i]) * z;
	          xden = xden * z + q[i];
	        }

	        res = xnum / xden + 1;

	        if (yi < y) {
	          res /= yi;
	        } else if (yi > y) {
	          for (i = 0; i < n; ++i) {
	            res *= y;
	            y++;
	          }
	        }

	        if (fact) {
	          res = fact / res;
	        }

	        return res;
	      }; // lower incomplete gamma function, which is usually typeset with a
	      // lower-case greek gamma as the function symbol


	      jStat.gammap = function gammap(a, x) {
	        return jStat.lowRegGamma(a, x) * jStat.gammafn(a);
	      }; // The lower regularized incomplete gamma function, usually written P(a,x)


	      jStat.lowRegGamma = function lowRegGamma(a, x) {
	        var aln = jStat.gammaln(a);
	        var ap = a;
	        var sum = 1 / a;
	        var del = sum;
	        var b = x + 1 - a;
	        var c = 1 / 1.0e-30;
	        var d = 1 / b;
	        var h = d;
	        var i = 1; // calculate maximum number of itterations required for a

	        var ITMAX = -~(Math.log(a >= 1 ? a : 1 / a) * 8.5 + a * 0.4 + 17);
	        var an;

	        if (x < 0 || a <= 0) {
	          return NaN;
	        } else if (x < a + 1) {
	          for (; i <= ITMAX; i++) {
	            sum += del *= x / ++ap;
	          }

	          return sum * Math.exp(-x + a * Math.log(x) - aln);
	        }

	        for (; i <= ITMAX; i++) {
	          an = -i * (i - a);
	          b += 2;
	          d = an * d + b;
	          c = b + an / c;
	          d = 1 / d;
	          h *= d * c;
	        }

	        return 1 - h * Math.exp(-x + a * Math.log(x) - aln);
	      }; // natural log factorial of n


	      jStat.factorialln = function factorialln(n) {
	        return n < 0 ? NaN : jStat.gammaln(n + 1);
	      }; // factorial of n


	      jStat.factorial = function factorial(n) {
	        return n < 0 ? NaN : jStat.gammafn(n + 1);
	      }; // combinations of n, m


	      jStat.combination = function combination(n, m) {
	        // make sure n or m don't exceed the upper limit of usable values
	        return n > 170 || m > 170 ? Math.exp(jStat.combinationln(n, m)) : jStat.factorial(n) / jStat.factorial(m) / jStat.factorial(n - m);
	      };

	      jStat.combinationln = function combinationln(n, m) {
	        return jStat.factorialln(n) - jStat.factorialln(m) - jStat.factorialln(n - m);
	      }; // permutations of n, m


	      jStat.permutation = function permutation(n, m) {
	        return jStat.factorial(n) / jStat.factorial(n - m);
	      }; // beta function


	      jStat.betafn = function betafn(x, y) {
	        // ensure arguments are positive
	        if (x <= 0 || y <= 0) return undefined; // make sure x + y doesn't exceed the upper limit of usable values

	        return x + y > 170 ? Math.exp(jStat.betaln(x, y)) : jStat.gammafn(x) * jStat.gammafn(y) / jStat.gammafn(x + y);
	      }; // natural logarithm of beta function


	      jStat.betaln = function betaln(x, y) {
	        return jStat.gammaln(x) + jStat.gammaln(y) - jStat.gammaln(x + y);
	      }; // Evaluates the continued fraction for incomplete beta function by modified
	      // Lentz's method.


	      jStat.betacf = function betacf(x, a, b) {
	        var fpmin = 1e-30;
	        var m = 1;
	        var qab = a + b;
	        var qap = a + 1;
	        var qam = a - 1;
	        var c = 1;
	        var d = 1 - qab * x / qap;
	        var m2, aa, del, h; // These q's will be used in factors that occur in the coefficients

	        if (Math.abs(d) < fpmin) d = fpmin;
	        d = 1 / d;
	        h = d;

	        for (; m <= 100; m++) {
	          m2 = 2 * m;
	          aa = m * (b - m) * x / ((qam + m2) * (a + m2)); // One step (the even one) of the recurrence

	          d = 1 + aa * d;
	          if (Math.abs(d) < fpmin) d = fpmin;
	          c = 1 + aa / c;
	          if (Math.abs(c) < fpmin) c = fpmin;
	          d = 1 / d;
	          h *= d * c;
	          aa = -(a + m) * (qab + m) * x / ((a + m2) * (qap + m2)); // Next step of the recurrence (the odd one)

	          d = 1 + aa * d;
	          if (Math.abs(d) < fpmin) d = fpmin;
	          c = 1 + aa / c;
	          if (Math.abs(c) < fpmin) c = fpmin;
	          d = 1 / d;
	          del = d * c;
	          h *= del;
	          if (Math.abs(del - 1.0) < 3e-7) break;
	        }

	        return h;
	      }; // Returns the inverse of the lower regularized inomplete gamma function


	      jStat.gammapinv = function gammapinv(p, a) {
	        var j = 0;
	        var a1 = a - 1;
	        var EPS = 1e-8;
	        var gln = jStat.gammaln(a);
	        var x, err, t, u, pp, lna1, afac;
	        if (p >= 1) return Math.max(100, a + 100 * Math.sqrt(a));
	        if (p <= 0) return 0;

	        if (a > 1) {
	          lna1 = Math.log(a1);
	          afac = Math.exp(a1 * (lna1 - 1) - gln);
	          pp = p < 0.5 ? p : 1 - p;
	          t = Math.sqrt(-2 * Math.log(pp));
	          x = (2.30753 + t * 0.27061) / (1 + t * (0.99229 + t * 0.04481)) - t;
	          if (p < 0.5) x = -x;
	          x = Math.max(1e-3, a * Math.pow(1 - 1 / (9 * a) - x / (3 * Math.sqrt(a)), 3));
	        } else {
	          t = 1 - a * (0.253 + a * 0.12);
	          if (p < t) x = Math.pow(p / t, 1 / a);else x = 1 - Math.log(1 - (p - t) / (1 - t));
	        }

	        for (; j < 12; j++) {
	          if (x <= 0) return 0;
	          err = jStat.lowRegGamma(a, x) - p;
	          if (a > 1) t = afac * Math.exp(-(x - a1) + a1 * (Math.log(x) - lna1));else t = Math.exp(-x + a1 * Math.log(x) - gln);
	          u = err / t;
	          x -= t = u / (1 - 0.5 * Math.min(1, u * ((a - 1) / x - 1)));
	          if (x <= 0) x = 0.5 * (x + t);
	          if (Math.abs(t) < EPS * x) break;
	        }

	        return x;
	      }; // Returns the error function erf(x)


	      jStat.erf = function erf(x) {
	        var cof = [-1.3026537197817094, 6.4196979235649026e-1, 1.9476473204185836e-2, -9.561514786808631e-3, -9.46595344482036e-4, 3.66839497852761e-4, 4.2523324806907e-5, -2.0278578112534e-5, -1.624290004647e-6, 1.303655835580e-6, 1.5626441722e-8, -8.5238095915e-8, 6.529054439e-9, 5.059343495e-9, -9.91364156e-10, -2.27365122e-10, 9.6467911e-11, 2.394038e-12, -6.886027e-12, 8.94487e-13, 3.13092e-13, -1.12708e-13, 3.81e-16, 7.106e-15, -1.523e-15, -9.4e-17, 1.21e-16, -2.8e-17];
	        var j = cof.length - 1;
	        var isneg = false;
	        var d = 0;
	        var dd = 0;
	        var t, ty, tmp, res;

	        if (x < 0) {
	          x = -x;
	          isneg = true;
	        }

	        t = 2 / (2 + x);
	        ty = 4 * t - 2;

	        for (; j > 0; j--) {
	          tmp = d;
	          d = ty * d - dd + cof[j];
	          dd = tmp;
	        }

	        res = t * Math.exp(-x * x + 0.5 * (cof[0] + ty * d) - dd);
	        return isneg ? res - 1 : 1 - res;
	      }; // Returns the complmentary error function erfc(x)


	      jStat.erfc = function erfc(x) {
	        return 1 - jStat.erf(x);
	      }; // Returns the inverse of the complementary error function


	      jStat.erfcinv = function erfcinv(p) {
	        var j = 0;
	        var x, err, t, pp;
	        if (p >= 2) return -100;
	        if (p <= 0) return 100;
	        pp = p < 1 ? p : 2 - p;
	        t = Math.sqrt(-2 * Math.log(pp / 2));
	        x = -0.70711 * ((2.30753 + t * 0.27061) / (1 + t * (0.99229 + t * 0.04481)) - t);

	        for (; j < 2; j++) {
	          err = jStat.erfc(x) - pp;
	          x += err / (1.12837916709551257 * Math.exp(-x * x) - x * err);
	        }

	        return p < 1 ? x : -x;
	      }; // Returns the inverse of the incomplete beta function


	      jStat.ibetainv = function ibetainv(p, a, b) {
	        var EPS = 1e-8;
	        var a1 = a - 1;
	        var b1 = b - 1;
	        var j = 0;
	        var lna, lnb, pp, t, u, err, x, al, h, w, afac;
	        if (p <= 0) return 0;
	        if (p >= 1) return 1;

	        if (a >= 1 && b >= 1) {
	          pp = p < 0.5 ? p : 1 - p;
	          t = Math.sqrt(-2 * Math.log(pp));
	          x = (2.30753 + t * 0.27061) / (1 + t * (0.99229 + t * 0.04481)) - t;
	          if (p < 0.5) x = -x;
	          al = (x * x - 3) / 6;
	          h = 2 / (1 / (2 * a - 1) + 1 / (2 * b - 1));
	          w = x * Math.sqrt(al + h) / h - (1 / (2 * b - 1) - 1 / (2 * a - 1)) * (al + 5 / 6 - 2 / (3 * h));
	          x = a / (a + b * Math.exp(2 * w));
	        } else {
	          lna = Math.log(a / (a + b));
	          lnb = Math.log(b / (a + b));
	          t = Math.exp(a * lna) / a;
	          u = Math.exp(b * lnb) / b;
	          w = t + u;
	          if (p < t / w) x = Math.pow(a * w * p, 1 / a);else x = 1 - Math.pow(b * w * (1 - p), 1 / b);
	        }

	        afac = -jStat.gammaln(a) - jStat.gammaln(b) + jStat.gammaln(a + b);

	        for (; j < 10; j++) {
	          if (x === 0 || x === 1) return x;
	          err = jStat.ibeta(x, a, b) - p;
	          t = Math.exp(a1 * Math.log(x) + b1 * Math.log(1 - x) + afac);
	          u = err / t;
	          x -= t = u / (1 - 0.5 * Math.min(1, u * (a1 / x - b1 / (1 - x))));
	          if (x <= 0) x = 0.5 * (x + t);
	          if (x >= 1) x = 0.5 * (x + t + 1);
	          if (Math.abs(t) < EPS * x && j > 0) break;
	        }

	        return x;
	      }; // Returns the incomplete beta function I_x(a,b)


	      jStat.ibeta = function ibeta(x, a, b) {
	        // Factors in front of the continued fraction.
	        var bt = x === 0 || x === 1 ? 0 : Math.exp(jStat.gammaln(a + b) - jStat.gammaln(a) - jStat.gammaln(b) + a * Math.log(x) + b * Math.log(1 - x));
	        if (x < 0 || x > 1) return false;
	        if (x < (a + 1) / (a + b + 2)) // Use continued fraction directly.
	          return bt * jStat.betacf(x, a, b) / a; // else use continued fraction after making the symmetry transformation.

	        return 1 - bt * jStat.betacf(1 - x, b, a) / b;
	      }; // Returns a normal deviate (mu=0, sigma=1).
	      // If n and m are specified it returns a object of normal deviates.


	      jStat.randn = function randn(n, m) {
	        var u, v, x, y, q;
	        if (!m) m = n;
	        if (n) return jStat.create(n, m, function () {
	          return jStat.randn();
	        });

	        do {
	          u = jStat._random_fn();
	          v = 1.7156 * (jStat._random_fn() - 0.5);
	          x = u - 0.449871;
	          y = Math.abs(v) + 0.386595;
	          q = x * x + y * (0.19600 * y - 0.25472 * x);
	        } while (q > 0.27597 && (q > 0.27846 || v * v > -4 * Math.log(u) * u * u));

	        return v / u;
	      }; // Returns a gamma deviate by the method of Marsaglia and Tsang.


	      jStat.randg = function randg(shape, n, m) {
	        var oalph = shape;
	        var a1, a2, u, v, x, mat;
	        if (!m) m = n;
	        if (!shape) shape = 1;

	        if (n) {
	          mat = jStat.zeros(n, m);
	          mat.alter(function () {
	            return jStat.randg(shape);
	          });
	          return mat;
	        }

	        if (shape < 1) shape += 1;
	        a1 = shape - 1 / 3;
	        a2 = 1 / Math.sqrt(9 * a1);

	        do {
	          do {
	            x = jStat.randn();
	            v = 1 + a2 * x;
	          } while (v <= 0);

	          v = v * v * v;
	          u = jStat._random_fn();
	        } while (u > 1 - 0.331 * Math.pow(x, 4) && Math.log(u) > 0.5 * x * x + a1 * (1 - v + Math.log(v))); // alpha > 1


	        if (shape == oalph) return a1 * v; // alpha < 1

	        do {
	          u = jStat._random_fn();
	        } while (u === 0);

	        return Math.pow(u, 1 / oalph) * a1 * v;
	      }; // making use of static methods on the instance


	      (function (funcs) {
	        for (var i = 0; i < funcs.length; i++) {
	          (function (passfunc) {
	            jStat.fn[passfunc] = function () {
	              return jStat(jStat.map(this, function (value) {
	                return jStat[passfunc](value);
	              }));
	            };
	          })(funcs[i]);
	        }
	      })('gammaln gammafn factorial factorialln'.split(' '));

	      (function (funcs) {
	        for (var i = 0; i < funcs.length; i++) {
	          (function (passfunc) {
	            jStat.fn[passfunc] = function () {
	              return jStat(jStat[passfunc].apply(null, arguments));
	            };
	          })(funcs[i]);
	        }
	      })('randn'.split(' '));
	    })(jStat, Math);

	    (function (jStat, Math) {
	      // generate all distribution instance methods
	      (function (list) {
	        for (var i = 0; i < list.length; i++) {
	          (function (func) {
	            // distribution instance method
	            jStat[func] = function f(a, b, c) {
	              if (!(this instanceof f)) return new f(a, b, c);
	              this._a = a;
	              this._b = b;
	              this._c = c;
	              return this;
	            }; // distribution method to be used on a jStat instance


	            jStat.fn[func] = function (a, b, c) {
	              var newthis = jStat[func](a, b, c);
	              newthis.data = this;
	              return newthis;
	            }; // sample instance method


	            jStat[func].prototype.sample = function (arr) {
	              var a = this._a;
	              var b = this._b;
	              var c = this._c;
	              if (arr) return jStat.alter(arr, function () {
	                return jStat[func].sample(a, b, c);
	              });else return jStat[func].sample(a, b, c);
	            }; // generate the pdf, cdf and inv instance methods


	            (function (vals) {
	              for (var i = 0; i < vals.length; i++) {
	                (function (fnfunc) {
	                  jStat[func].prototype[fnfunc] = function (x) {
	                    var a = this._a;
	                    var b = this._b;
	                    var c = this._c;
	                    if (!x && x !== 0) x = this.data;

	                    if (typeof x !== 'number') {
	                      return jStat.fn.map.call(x, function (x) {
	                        return jStat[func][fnfunc](x, a, b, c);
	                      });
	                    }

	                    return jStat[func][fnfunc](x, a, b, c);
	                  };
	                })(vals[i]);
	              }
	            })('pdf cdf inv'.split(' ')); // generate the mean, median, mode and variance instance methods


	            (function (vals) {
	              for (var i = 0; i < vals.length; i++) {
	                (function (fnfunc) {
	                  jStat[func].prototype[fnfunc] = function () {
	                    return jStat[func][fnfunc](this._a, this._b, this._c);
	                  };
	                })(vals[i]);
	              }
	            })('mean median mode variance'.split(' '));
	          })(list[i]);
	        }
	      })(('beta centralF cauchy chisquare exponential gamma invgamma kumaraswamy ' + 'laplace lognormal noncentralt normal pareto studentt weibull uniform ' + 'binomial negbin hypgeom poisson triangular tukey arcsine').split(' ')); // extend beta function with static methods


	      jStat.extend(jStat.beta, {
	        pdf: function pdf(x, alpha, beta) {
	          // PDF is zero outside the support
	          if (x > 1 || x < 0) return 0; // PDF is one for the uniform case

	          if (alpha == 1 && beta == 1) return 1;

	          if (alpha < 512 && beta < 512) {
	            return Math.pow(x, alpha - 1) * Math.pow(1 - x, beta - 1) / jStat.betafn(alpha, beta);
	          } else {
	            return Math.exp((alpha - 1) * Math.log(x) + (beta - 1) * Math.log(1 - x) - jStat.betaln(alpha, beta));
	          }
	        },
	        cdf: function cdf(x, alpha, beta) {
	          return x > 1 || x < 0 ? (x > 1) * 1 : jStat.ibeta(x, alpha, beta);
	        },
	        inv: function inv(x, alpha, beta) {
	          return jStat.ibetainv(x, alpha, beta);
	        },
	        mean: function mean(alpha, beta) {
	          return alpha / (alpha + beta);
	        },
	        median: function median(alpha, beta) {
	          return jStat.ibetainv(0.5, alpha, beta);
	        },
	        mode: function mode(alpha, beta) {
	          return (alpha - 1) / (alpha + beta - 2);
	        },
	        // return a random sample
	        sample: function sample(alpha, beta) {
	          var u = jStat.randg(alpha);
	          return u / (u + jStat.randg(beta));
	        },
	        variance: function variance(alpha, beta) {
	          return alpha * beta / (Math.pow(alpha + beta, 2) * (alpha + beta + 1));
	        }
	      }); // extend F function with static methods

	      jStat.extend(jStat.centralF, {
	        // This implementation of the pdf function avoids float overflow
	        // See the way that R calculates this value:
	        // https://svn.r-project.org/R/trunk/src/nmath/df.c
	        pdf: function pdf(x, df1, df2) {
	          var p, q, f;
	          if (x < 0) return 0;

	          if (df1 <= 2) {
	            if (x === 0 && df1 < 2) {
	              return Infinity;
	            }

	            if (x === 0 && df1 === 2) {
	              return 1;
	            }

	            return 1 / jStat.betafn(df1 / 2, df2 / 2) * Math.pow(df1 / df2, df1 / 2) * Math.pow(x, df1 / 2 - 1) * Math.pow(1 + df1 / df2 * x, -(df1 + df2) / 2);
	          }

	          p = df1 * x / (df2 + x * df1);
	          q = df2 / (df2 + x * df1);
	          f = df1 * q / 2.0;
	          return f * jStat.binomial.pdf((df1 - 2) / 2, (df1 + df2 - 2) / 2, p);
	        },
	        cdf: function cdf(x, df1, df2) {
	          if (x < 0) return 0;
	          return jStat.ibeta(df1 * x / (df1 * x + df2), df1 / 2, df2 / 2);
	        },
	        inv: function inv(x, df1, df2) {
	          return df2 / (df1 * (1 / jStat.ibetainv(x, df1 / 2, df2 / 2) - 1));
	        },
	        mean: function mean(df1, df2) {
	          return df2 > 2 ? df2 / (df2 - 2) : undefined;
	        },
	        mode: function mode(df1, df2) {
	          return df1 > 2 ? df2 * (df1 - 2) / (df1 * (df2 + 2)) : undefined;
	        },
	        // return a random sample
	        sample: function sample(df1, df2) {
	          var x1 = jStat.randg(df1 / 2) * 2;
	          var x2 = jStat.randg(df2 / 2) * 2;
	          return x1 / df1 / (x2 / df2);
	        },
	        variance: function variance(df1, df2) {
	          if (df2 <= 4) return undefined;
	          return 2 * df2 * df2 * (df1 + df2 - 2) / (df1 * (df2 - 2) * (df2 - 2) * (df2 - 4));
	        }
	      }); // extend cauchy function with static methods

	      jStat.extend(jStat.cauchy, {
	        pdf: function pdf(x, local, scale) {
	          if (scale < 0) {
	            return 0;
	          }

	          return scale / (Math.pow(x - local, 2) + Math.pow(scale, 2)) / Math.PI;
	        },
	        cdf: function cdf(x, local, scale) {
	          return Math.atan((x - local) / scale) / Math.PI + 0.5;
	        },
	        inv: function inv(p, local, scale) {
	          return local + scale * Math.tan(Math.PI * (p - 0.5));
	        },
	        median: function median(local
	        /*, scale*/
	        ) {
	          return local;
	        },
	        mode: function mode(local
	        /*, scale*/
	        ) {
	          return local;
	        },
	        sample: function sample(local, scale) {
	          return jStat.randn() * Math.sqrt(1 / (2 * jStat.randg(0.5))) * scale + local;
	        }
	      }); // extend chisquare function with static methods

	      jStat.extend(jStat.chisquare, {
	        pdf: function pdf(x, dof) {
	          if (x < 0) return 0;
	          return x === 0 && dof === 2 ? 0.5 : Math.exp((dof / 2 - 1) * Math.log(x) - x / 2 - dof / 2 * Math.log(2) - jStat.gammaln(dof / 2));
	        },
	        cdf: function cdf(x, dof) {
	          if (x < 0) return 0;
	          return jStat.lowRegGamma(dof / 2, x / 2);
	        },
	        inv: function inv(p, dof) {
	          return 2 * jStat.gammapinv(p, 0.5 * dof);
	        },
	        mean: function mean(dof) {
	          return dof;
	        },
	        // TODO: this is an approximation (is there a better way?)
	        median: function median(dof) {
	          return dof * Math.pow(1 - 2 / (9 * dof), 3);
	        },
	        mode: function mode(dof) {
	          return dof - 2 > 0 ? dof - 2 : 0;
	        },
	        sample: function sample(dof) {
	          return jStat.randg(dof / 2) * 2;
	        },
	        variance: function variance(dof) {
	          return 2 * dof;
	        }
	      }); // extend exponential function with static methods

	      jStat.extend(jStat.exponential, {
	        pdf: function pdf(x, rate) {
	          return x < 0 ? 0 : rate * Math.exp(-rate * x);
	        },
	        cdf: function cdf(x, rate) {
	          return x < 0 ? 0 : 1 - Math.exp(-rate * x);
	        },
	        inv: function inv(p, rate) {
	          return -Math.log(1 - p) / rate;
	        },
	        mean: function mean(rate) {
	          return 1 / rate;
	        },
	        median: function median(rate) {
	          return 1 / rate * Math.log(2);
	        },
	        mode: function
	          /*rate*/
	        mode() {
	          return 0;
	        },
	        sample: function sample(rate) {
	          return -1 / rate * Math.log(jStat._random_fn());
	        },
	        variance: function variance(rate) {
	          return Math.pow(rate, -2);
	        }
	      }); // extend gamma function with static methods

	      jStat.extend(jStat.gamma, {
	        pdf: function pdf(x, shape, scale) {
	          if (x < 0) return 0;
	          return x === 0 && shape === 1 ? 1 / scale : Math.exp((shape - 1) * Math.log(x) - x / scale - jStat.gammaln(shape) - shape * Math.log(scale));
	        },
	        cdf: function cdf(x, shape, scale) {
	          if (x < 0) return 0;
	          return jStat.lowRegGamma(shape, x / scale);
	        },
	        inv: function inv(p, shape, scale) {
	          return jStat.gammapinv(p, shape) * scale;
	        },
	        mean: function mean(shape, scale) {
	          return shape * scale;
	        },
	        mode: function mode(shape, scale) {
	          if (shape > 1) return (shape - 1) * scale;
	          return undefined;
	        },
	        sample: function sample(shape, scale) {
	          return jStat.randg(shape) * scale;
	        },
	        variance: function variance(shape, scale) {
	          return shape * scale * scale;
	        }
	      }); // extend inverse gamma function with static methods

	      jStat.extend(jStat.invgamma, {
	        pdf: function pdf(x, shape, scale) {
	          if (x <= 0) return 0;
	          return Math.exp(-(shape + 1) * Math.log(x) - scale / x - jStat.gammaln(shape) + shape * Math.log(scale));
	        },
	        cdf: function cdf(x, shape, scale) {
	          if (x <= 0) return 0;
	          return 1 - jStat.lowRegGamma(shape, scale / x);
	        },
	        inv: function inv(p, shape, scale) {
	          return scale / jStat.gammapinv(1 - p, shape);
	        },
	        mean: function mean(shape, scale) {
	          return shape > 1 ? scale / (shape - 1) : undefined;
	        },
	        mode: function mode(shape, scale) {
	          return scale / (shape + 1);
	        },
	        sample: function sample(shape, scale) {
	          return scale / jStat.randg(shape);
	        },
	        variance: function variance(shape, scale) {
	          if (shape <= 2) return undefined;
	          return scale * scale / ((shape - 1) * (shape - 1) * (shape - 2));
	        }
	      }); // extend kumaraswamy function with static methods

	      jStat.extend(jStat.kumaraswamy, {
	        pdf: function pdf(x, alpha, beta) {
	          if (x === 0 && alpha === 1) return beta;else if (x === 1 && beta === 1) return alpha;
	          return Math.exp(Math.log(alpha) + Math.log(beta) + (alpha - 1) * Math.log(x) + (beta - 1) * Math.log(1 - Math.pow(x, alpha)));
	        },
	        cdf: function cdf(x, alpha, beta) {
	          if (x < 0) return 0;else if (x > 1) return 1;
	          return 1 - Math.pow(1 - Math.pow(x, alpha), beta);
	        },
	        inv: function inv(p, alpha, beta) {
	          return Math.pow(1 - Math.pow(1 - p, 1 / beta), 1 / alpha);
	        },
	        mean: function mean(alpha, beta) {
	          return beta * jStat.gammafn(1 + 1 / alpha) * jStat.gammafn(beta) / jStat.gammafn(1 + 1 / alpha + beta);
	        },
	        median: function median(alpha, beta) {
	          return Math.pow(1 - Math.pow(2, -1 / beta), 1 / alpha);
	        },
	        mode: function mode(alpha, beta) {
	          if (!(alpha >= 1 && beta >= 1 && alpha !== 1 && beta !== 1)) return undefined;
	          return Math.pow((alpha - 1) / (alpha * beta - 1), 1 / alpha);
	        },
	        variance: function
	          /*alpha, beta*/
	        variance() {
	          throw new Error('variance not yet implemented'); // TODO: complete this
	        }
	      }); // extend lognormal function with static methods

	      jStat.extend(jStat.lognormal, {
	        pdf: function pdf(x, mu, sigma) {
	          if (x <= 0) return 0;
	          return Math.exp(-Math.log(x) - 0.5 * Math.log(2 * Math.PI) - Math.log(sigma) - Math.pow(Math.log(x) - mu, 2) / (2 * sigma * sigma));
	        },
	        cdf: function cdf(x, mu, sigma) {
	          if (x < 0) return 0;
	          return 0.5 + 0.5 * jStat.erf((Math.log(x) - mu) / Math.sqrt(2 * sigma * sigma));
	        },
	        inv: function inv(p, mu, sigma) {
	          return Math.exp(-1.41421356237309505 * sigma * jStat.erfcinv(2 * p) + mu);
	        },
	        mean: function mean(mu, sigma) {
	          return Math.exp(mu + sigma * sigma / 2);
	        },
	        median: function median(mu
	        /*, sigma*/
	        ) {
	          return Math.exp(mu);
	        },
	        mode: function mode(mu, sigma) {
	          return Math.exp(mu - sigma * sigma);
	        },
	        sample: function sample(mu, sigma) {
	          return Math.exp(jStat.randn() * sigma + mu);
	        },
	        variance: function variance(mu, sigma) {
	          return (Math.exp(sigma * sigma) - 1) * Math.exp(2 * mu + sigma * sigma);
	        }
	      }); // extend noncentralt function with static methods

	      jStat.extend(jStat.noncentralt, {
	        pdf: function pdf(x, dof, ncp) {
	          var tol = 1e-14;
	          if (Math.abs(ncp) < tol) // ncp approx 0; use student-t
	            return jStat.studentt.pdf(x, dof);

	          if (Math.abs(x) < tol) {
	            // different formula for x == 0
	            return Math.exp(jStat.gammaln((dof + 1) / 2) - ncp * ncp / 2 - 0.5 * Math.log(Math.PI * dof) - jStat.gammaln(dof / 2));
	          } // formula for x != 0


	          return dof / x * (jStat.noncentralt.cdf(x * Math.sqrt(1 + 2 / dof), dof + 2, ncp) - jStat.noncentralt.cdf(x, dof, ncp));
	        },
	        cdf: function cdf(x, dof, ncp) {
	          var tol = 1e-14;
	          var min_iterations = 200;
	          if (Math.abs(ncp) < tol) // ncp approx 0; use student-t
	            return jStat.studentt.cdf(x, dof); // turn negative x into positive and flip result afterwards

	          var flip = false;

	          if (x < 0) {
	            flip = true;
	            ncp = -ncp;
	          }

	          var prob = jStat.normal.cdf(-ncp, 0, 1);
	          var value = tol + 1; // use value at last two steps to determine convergence

	          var lastvalue = value;
	          var y = x * x / (x * x + dof);
	          var j = 0;
	          var p = Math.exp(-ncp * ncp / 2);
	          var q = Math.exp(-ncp * ncp / 2 - 0.5 * Math.log(2) - jStat.gammaln(3 / 2)) * ncp;

	          while (j < min_iterations || lastvalue > tol || value > tol) {
	            lastvalue = value;

	            if (j > 0) {
	              p *= ncp * ncp / (2 * j);
	              q *= ncp * ncp / (2 * (j + 1 / 2));
	            }

	            value = p * jStat.beta.cdf(y, j + 0.5, dof / 2) + q * jStat.beta.cdf(y, j + 1, dof / 2);
	            prob += 0.5 * value;
	            j++;
	          }

	          return flip ? 1 - prob : prob;
	        }
	      }); // extend normal function with static methods

	      jStat.extend(jStat.normal, {
	        pdf: function pdf(x, mean, std) {
	          return Math.exp(-0.5 * Math.log(2 * Math.PI) - Math.log(std) - Math.pow(x - mean, 2) / (2 * std * std));
	        },
	        cdf: function cdf(x, mean, std) {
	          return 0.5 * (1 + jStat.erf((x - mean) / Math.sqrt(2 * std * std)));
	        },
	        inv: function inv(p, mean, std) {
	          return -1.41421356237309505 * std * jStat.erfcinv(2 * p) + mean;
	        },
	        mean: function mean(_mean
	        /*, std*/
	        ) {
	          return _mean;
	        },
	        median: function median(mean
	        /*, std*/
	        ) {
	          return mean;
	        },
	        mode: function mode(mean
	        /*, std*/
	        ) {
	          return mean;
	        },
	        sample: function sample(mean, std) {
	          return jStat.randn() * std + mean;
	        },
	        variance: function variance(mean, std) {
	          return std * std;
	        }
	      }); // extend pareto function with static methods

	      jStat.extend(jStat.pareto, {
	        pdf: function pdf(x, scale, shape) {
	          if (x < scale) return 0;
	          return shape * Math.pow(scale, shape) / Math.pow(x, shape + 1);
	        },
	        cdf: function cdf(x, scale, shape) {
	          if (x < scale) return 0;
	          return 1 - Math.pow(scale / x, shape);
	        },
	        inv: function inv(p, scale, shape) {
	          return scale / Math.pow(1 - p, 1 / shape);
	        },
	        mean: function mean(scale, shape) {
	          if (shape <= 1) return undefined;
	          return shape * Math.pow(scale, shape) / (shape - 1);
	        },
	        median: function median(scale, shape) {
	          return scale * (shape * Math.SQRT2);
	        },
	        mode: function mode(scale
	        /*, shape*/
	        ) {
	          return scale;
	        },
	        variance: function variance(scale, shape) {
	          if (shape <= 2) return undefined;
	          return scale * scale * shape / (Math.pow(shape - 1, 2) * (shape - 2));
	        }
	      }); // extend studentt function with static methods

	      jStat.extend(jStat.studentt, {
	        pdf: function pdf(x, dof) {
	          dof = dof > 1e100 ? 1e100 : dof;
	          return 1 / (Math.sqrt(dof) * jStat.betafn(0.5, dof / 2)) * Math.pow(1 + x * x / dof, -((dof + 1) / 2));
	        },
	        cdf: function cdf(x, dof) {
	          var dof2 = dof / 2;
	          return jStat.ibeta((x + Math.sqrt(x * x + dof)) / (2 * Math.sqrt(x * x + dof)), dof2, dof2);
	        },
	        inv: function inv(p, dof) {
	          var x = jStat.ibetainv(2 * Math.min(p, 1 - p), 0.5 * dof, 0.5);
	          x = Math.sqrt(dof * (1 - x) / x);
	          return p > 0.5 ? x : -x;
	        },
	        mean: function mean(dof) {
	          return dof > 1 ? 0 : undefined;
	        },
	        median: function
	          /*dof*/
	        median() {
	          return 0;
	        },
	        mode: function
	          /*dof*/
	        mode() {
	          return 0;
	        },
	        sample: function sample(dof) {
	          return jStat.randn() * Math.sqrt(dof / (2 * jStat.randg(dof / 2)));
	        },
	        variance: function variance(dof) {
	          return dof > 2 ? dof / (dof - 2) : dof > 1 ? Infinity : undefined;
	        }
	      }); // extend weibull function with static methods

	      jStat.extend(jStat.weibull, {
	        pdf: function pdf(x, scale, shape) {
	          if (x < 0 || scale < 0 || shape < 0) return 0;
	          return shape / scale * Math.pow(x / scale, shape - 1) * Math.exp(-Math.pow(x / scale, shape));
	        },
	        cdf: function cdf(x, scale, shape) {
	          return x < 0 ? 0 : 1 - Math.exp(-Math.pow(x / scale, shape));
	        },
	        inv: function inv(p, scale, shape) {
	          return scale * Math.pow(-Math.log(1 - p), 1 / shape);
	        },
	        mean: function mean(scale, shape) {
	          return scale * jStat.gammafn(1 + 1 / shape);
	        },
	        median: function median(scale, shape) {
	          return scale * Math.pow(Math.log(2), 1 / shape);
	        },
	        mode: function mode(scale, shape) {
	          if (shape <= 1) return 0;
	          return scale * Math.pow((shape - 1) / shape, 1 / shape);
	        },
	        sample: function sample(scale, shape) {
	          return scale * Math.pow(-Math.log(jStat._random_fn()), 1 / shape);
	        },
	        variance: function variance(scale, shape) {
	          return scale * scale * jStat.gammafn(1 + 2 / shape) - Math.pow(jStat.weibull.mean(scale, shape), 2);
	        }
	      }); // extend uniform function with static methods

	      jStat.extend(jStat.uniform, {
	        pdf: function pdf(x, a, b) {
	          return x < a || x > b ? 0 : 1 / (b - a);
	        },
	        cdf: function cdf(x, a, b) {
	          if (x < a) return 0;else if (x < b) return (x - a) / (b - a);
	          return 1;
	        },
	        inv: function inv(p, a, b) {
	          return a + p * (b - a);
	        },
	        mean: function mean(a, b) {
	          return 0.5 * (a + b);
	        },
	        median: function median(a, b) {
	          return jStat.mean(a, b);
	        },
	        mode: function
	          /*a, b*/
	        mode() {
	          throw new Error('mode is not yet implemented');
	        },
	        sample: function sample(a, b) {
	          return a / 2 + b / 2 + (b / 2 - a / 2) * (2 * jStat._random_fn() - 1);
	        },
	        variance: function variance(a, b) {
	          return Math.pow(b - a, 2) / 12;
	        }
	      }); // Got this from http://www.math.ucla.edu/~tom/distributions/binomial.html

	      function betinc(x, a, b, eps) {
	        var a0 = 0;
	        var b0 = 1;
	        var a1 = 1;
	        var b1 = 1;
	        var m9 = 0;
	        var a2 = 0;
	        var c9;

	        while (Math.abs((a1 - a2) / a1) > eps) {
	          a2 = a1;
	          c9 = -(a + m9) * (a + b + m9) * x / (a + 2 * m9) / (a + 2 * m9 + 1);
	          a0 = a1 + c9 * a0;
	          b0 = b1 + c9 * b0;
	          m9 = m9 + 1;
	          c9 = m9 * (b - m9) * x / (a + 2 * m9 - 1) / (a + 2 * m9);
	          a1 = a0 + c9 * a1;
	          b1 = b0 + c9 * b1;
	          a0 = a0 / b1;
	          b0 = b0 / b1;
	          a1 = a1 / b1;
	          b1 = 1;
	        }

	        return a1 / a;
	      } // extend uniform function with static methods


	      jStat.extend(jStat.binomial, {
	        pdf: function pdf(k, n, p) {
	          return p === 0 || p === 1 ? n * p === k ? 1 : 0 : jStat.combination(n, k) * Math.pow(p, k) * Math.pow(1 - p, n - k);
	        },
	        cdf: function cdf(x, n, p) {
	          var betacdf;
	          var eps = 1e-10;
	          if (x < 0) return 0;
	          if (x >= n) return 1;
	          if (p < 0 || p > 1 || n <= 0) return NaN;
	          x = Math.floor(x);
	          var z = p;
	          var a = x + 1;
	          var b = n - x;
	          var s = a + b;
	          var bt = Math.exp(jStat.gammaln(s) - jStat.gammaln(b) - jStat.gammaln(a) + a * Math.log(z) + b * Math.log(1 - z));
	          if (z < (a + 1) / (s + 2)) betacdf = bt * betinc(z, a, b, eps);else betacdf = 1 - bt * betinc(1 - z, b, a, eps);
	          return Math.round((1 - betacdf) * (1 / eps)) / (1 / eps);
	        }
	      }); // extend uniform function with static methods

	      jStat.extend(jStat.negbin, {
	        pdf: function pdf(k, r, p) {
	          if (k !== k >>> 0) return false;
	          if (k < 0) return 0;
	          return jStat.combination(k + r - 1, r - 1) * Math.pow(1 - p, k) * Math.pow(p, r);
	        },
	        cdf: function cdf(x, r, p) {
	          var sum = 0,
	              k = 0;
	          if (x < 0) return 0;

	          for (; k <= x; k++) {
	            sum += jStat.negbin.pdf(k, r, p);
	          }

	          return sum;
	        }
	      }); // extend uniform function with static methods

	      jStat.extend(jStat.hypgeom, {
	        pdf: function pdf(k, N, m, n) {
	          // Hypergeometric PDF.
	          // A simplification of the CDF algorithm below.
	          // k = number of successes drawn
	          // N = population size
	          // m = number of successes in population
	          // n = number of items drawn from population
	          if (k !== k | 0) {
	            return false;
	          } else if (k < 0 || k < m - (N - n)) {
	            // It's impossible to have this few successes drawn.
	            return 0;
	          } else if (k > n || k > m) {
	            // It's impossible to have this many successes drawn.
	            return 0;
	          } else if (m * 2 > N) {
	            // More than half the population is successes.
	            if (n * 2 > N) {
	              // More than half the population is sampled.
	              return jStat.hypgeom.pdf(N - m - n + k, N, N - m, N - n);
	            } else {
	              // Half or less of the population is sampled.
	              return jStat.hypgeom.pdf(n - k, N, N - m, n);
	            }
	          } else if (n * 2 > N) {
	            // Half or less is successes.
	            return jStat.hypgeom.pdf(m - k, N, m, N - n);
	          } else if (m < n) {
	            // We want to have the number of things sampled to be less than the
	            // successes available. So swap the definitions of successful and sampled.
	            return jStat.hypgeom.pdf(k, N, n, m);
	          } else {
	            // If we get here, half or less of the population was sampled, half or
	            // less of it was successes, and we had fewer sampled things than
	            // successes. Now we can do this complicated iterative algorithm in an
	            // efficient way.
	            // The basic premise of the algorithm is that we partially normalize our
	            // intermediate product to keep it in a numerically good region, and then
	            // finish the normalization at the end.
	            // This variable holds the scaled probability of the current number of
	            // successes.
	            var scaledPDF = 1; // This keeps track of how much we have normalized.

	            var samplesDone = 0;

	            for (var i = 0; i < k; i++) {
	              // For every possible number of successes up to that observed...
	              while (scaledPDF > 1 && samplesDone < n) {
	                // Intermediate result is growing too big. Apply some of the
	                // normalization to shrink everything.
	                scaledPDF *= 1 - m / (N - samplesDone); // Say we've normalized by this sample already.

	                samplesDone++;
	              } // Work out the partially-normalized hypergeometric PDF for the next
	              // number of successes


	              scaledPDF *= (n - i) * (m - i) / ((i + 1) * (N - m - n + i + 1));
	            }

	            for (; samplesDone < n; samplesDone++) {
	              // Apply all the rest of the normalization
	              scaledPDF *= 1 - m / (N - samplesDone);
	            } // Bound answer sanely before returning.


	            return Math.min(1, Math.max(0, scaledPDF));
	          }
	        },
	        cdf: function cdf(x, N, m, n) {
	          // Hypergeometric CDF.
	          // This algorithm is due to Prof. Thomas S. Ferguson, <tom@math.ucla.edu>,
	          // and comes from his hypergeometric test calculator at
	          // <http://www.math.ucla.edu/~tom/distributions/Hypergeometric.html>.
	          // x = number of successes drawn
	          // N = population size
	          // m = number of successes in population
	          // n = number of items drawn from population
	          if (x < 0 || x < m - (N - n)) {
	            // It's impossible to have this few successes drawn or fewer.
	            return 0;
	          } else if (x >= n || x >= m) {
	            // We will always have this many successes or fewer.
	            return 1;
	          } else if (m * 2 > N) {
	            // More than half the population is successes.
	            if (n * 2 > N) {
	              // More than half the population is sampled.
	              return jStat.hypgeom.cdf(N - m - n + x, N, N - m, N - n);
	            } else {
	              // Half or less of the population is sampled.
	              return 1 - jStat.hypgeom.cdf(n - x - 1, N, N - m, n);
	            }
	          } else if (n * 2 > N) {
	            // Half or less is successes.
	            return 1 - jStat.hypgeom.cdf(m - x - 1, N, m, N - n);
	          } else if (m < n) {
	            // We want to have the number of things sampled to be less than the
	            // successes available. So swap the definitions of successful and sampled.
	            return jStat.hypgeom.cdf(x, N, n, m);
	          } else {
	            // If we get here, half or less of the population was sampled, half or
	            // less of it was successes, and we had fewer sampled things than
	            // successes. Now we can do this complicated iterative algorithm in an
	            // efficient way.
	            // The basic premise of the algorithm is that we partially normalize our
	            // intermediate sum to keep it in a numerically good region, and then
	            // finish the normalization at the end.
	            // Holds the intermediate, scaled total CDF.
	            var scaledCDF = 1; // This variable holds the scaled probability of the current number of
	            // successes.

	            var scaledPDF = 1; // This keeps track of how much we have normalized.

	            var samplesDone = 0;

	            for (var i = 0; i < x; i++) {
	              // For every possible number of successes up to that observed...
	              while (scaledCDF > 1 && samplesDone < n) {
	                // Intermediate result is growing too big. Apply some of the
	                // normalization to shrink everything.
	                var factor = 1 - m / (N - samplesDone);
	                scaledPDF *= factor;
	                scaledCDF *= factor; // Say we've normalized by this sample already.

	                samplesDone++;
	              } // Work out the partially-normalized hypergeometric PDF for the next
	              // number of successes


	              scaledPDF *= (n - i) * (m - i) / ((i + 1) * (N - m - n + i + 1)); // Add to the CDF answer.

	              scaledCDF += scaledPDF;
	            }

	            for (; samplesDone < n; samplesDone++) {
	              // Apply all the rest of the normalization
	              scaledCDF *= 1 - m / (N - samplesDone);
	            } // Bound answer sanely before returning.


	            return Math.min(1, Math.max(0, scaledCDF));
	          }
	        }
	      }); // extend uniform function with static methods

	      jStat.extend(jStat.poisson, {
	        pdf: function pdf(k, l) {
	          if (l < 0 || k % 1 !== 0 || k < 0) {
	            return 0;
	          }

	          return Math.pow(l, k) * Math.exp(-l) / jStat.factorial(k);
	        },
	        cdf: function cdf(x, l) {
	          var sumarr = [],
	              k = 0;
	          if (x < 0) return 0;

	          for (; k <= x; k++) {
	            sumarr.push(jStat.poisson.pdf(k, l));
	          }

	          return jStat.sum(sumarr);
	        },
	        mean: function mean(l) {
	          return l;
	        },
	        variance: function variance(l) {
	          return l;
	        },
	        sampleSmall: function sampleSmall(l) {
	          var p = 1,
	              k = 0,
	              L = Math.exp(-l);

	          do {
	            k++;
	            p *= jStat._random_fn();
	          } while (p > L);

	          return k - 1;
	        },
	        sampleLarge: function sampleLarge(l) {
	          var lam = l;
	          var k;
	          var U, V, slam, loglam, a, b, invalpha, vr, us;
	          slam = Math.sqrt(lam);
	          loglam = Math.log(lam);
	          b = 0.931 + 2.53 * slam;
	          a = -0.059 + 0.02483 * b;
	          invalpha = 1.1239 + 1.1328 / (b - 3.4);
	          vr = 0.9277 - 3.6224 / (b - 2);

	          while (1) {
	            U = Math.random() - 0.5;
	            V = Math.random();
	            us = 0.5 - Math.abs(U);
	            k = Math.floor((2 * a / us + b) * U + lam + 0.43);

	            if (us >= 0.07 && V <= vr) {
	              return k;
	            }

	            if (k < 0 || us < 0.013 && V > us) {
	              continue;
	            }
	            /* log(V) == log(0.0) ok here */

	            /* if U==0.0 so that us==0.0, log is ok since always returns */


	            if (Math.log(V) + Math.log(invalpha) - Math.log(a / (us * us) + b) <= -lam + k * loglam - jStat.loggam(k + 1)) {
	              return k;
	            }
	          }
	        },
	        sample: function sample(l) {
	          if (l < 10) return this.sampleSmall(l);else return this.sampleLarge(l);
	        }
	      }); // extend triangular function with static methods

	      jStat.extend(jStat.triangular, {
	        pdf: function pdf(x, a, b, c) {
	          if (b <= a || c < a || c > b) {
	            return NaN;
	          } else {
	            if (x < a || x > b) {
	              return 0;
	            } else if (x < c) {
	              return 2 * (x - a) / ((b - a) * (c - a));
	            } else if (x === c) {
	              return 2 / (b - a);
	            } else {
	              // x > c
	              return 2 * (b - x) / ((b - a) * (b - c));
	            }
	          }
	        },
	        cdf: function cdf(x, a, b, c) {
	          if (b <= a || c < a || c > b) return NaN;
	          if (x <= a) return 0;else if (x >= b) return 1;
	          if (x <= c) return Math.pow(x - a, 2) / ((b - a) * (c - a));else // x > c
	            return 1 - Math.pow(b - x, 2) / ((b - a) * (b - c));
	        },
	        inv: function inv(p, a, b, c) {
	          if (b <= a || c < a || c > b) {
	            return NaN;
	          } else {
	            if (p <= (c - a) / (b - a)) {
	              return a + (b - a) * Math.sqrt(p * ((c - a) / (b - a)));
	            } else {
	              // p > ((c - a) / (b - a))
	              return a + (b - a) * (1 - Math.sqrt((1 - p) * (1 - (c - a) / (b - a))));
	            }
	          }
	        },
	        mean: function mean(a, b, c) {
	          return (a + b + c) / 3;
	        },
	        median: function median(a, b, c) {
	          if (c <= (a + b) / 2) {
	            return b - Math.sqrt((b - a) * (b - c)) / Math.sqrt(2);
	          } else if (c > (a + b) / 2) {
	            return a + Math.sqrt((b - a) * (c - a)) / Math.sqrt(2);
	          }
	        },
	        mode: function mode(a, b, c) {
	          return c;
	        },
	        sample: function sample(a, b, c) {
	          var u = jStat._random_fn();

	          if (u < (c - a) / (b - a)) return a + Math.sqrt(u * (b - a) * (c - a));
	          return b - Math.sqrt((1 - u) * (b - a) * (b - c));
	        },
	        variance: function variance(a, b, c) {
	          return (a * a + b * b + c * c - a * b - a * c - b * c) / 18;
	        }
	      }); // extend arcsine function with static methods

	      jStat.extend(jStat.arcsine, {
	        pdf: function pdf(x, a, b) {
	          if (b <= a) return NaN;
	          return x <= a || x >= b ? 0 : 2 / Math.PI * Math.pow(Math.pow(b - a, 2) - Math.pow(2 * x - a - b, 2), -0.5);
	        },
	        cdf: function cdf(x, a, b) {
	          if (x < a) return 0;else if (x < b) return 2 / Math.PI * Math.asin(Math.sqrt((x - a) / (b - a)));
	          return 1;
	        },
	        inv: function inv(p, a, b) {
	          return a + (0.5 - 0.5 * Math.cos(Math.PI * p)) * (b - a);
	        },
	        mean: function mean(a, b) {
	          if (b <= a) return NaN;
	          return (a + b) / 2;
	        },
	        median: function median(a, b) {
	          if (b <= a) return NaN;
	          return (a + b) / 2;
	        },
	        mode: function
	          /*a, b*/
	        mode() {
	          throw new Error('mode is not yet implemented');
	        },
	        sample: function sample(a, b) {
	          return (a + b) / 2 + (b - a) / 2 * Math.sin(2 * Math.PI * jStat.uniform.sample(0, 1));
	        },
	        variance: function variance(a, b) {
	          if (b <= a) return NaN;
	          return Math.pow(b - a, 2) / 8;
	        }
	      });

	      function laplaceSign(x) {
	        return x / Math.abs(x);
	      }

	      jStat.extend(jStat.laplace, {
	        pdf: function pdf(x, mu, b) {
	          return b <= 0 ? 0 : Math.exp(-Math.abs(x - mu) / b) / (2 * b);
	        },
	        cdf: function cdf(x, mu, b) {
	          if (b <= 0) {
	            return 0;
	          }

	          if (x < mu) {
	            return 0.5 * Math.exp((x - mu) / b);
	          } else {
	            return 1 - 0.5 * Math.exp(-(x - mu) / b);
	          }
	        },
	        mean: function mean(mu
	        /*, b*/
	        ) {
	          return mu;
	        },
	        median: function median(mu
	        /*, b*/
	        ) {
	          return mu;
	        },
	        mode: function mode(mu
	        /*, b*/
	        ) {
	          return mu;
	        },
	        variance: function variance(mu, b) {
	          return 2 * b * b;
	        },
	        sample: function sample(mu, b) {
	          var u = jStat._random_fn() - 0.5;
	          return mu - b * laplaceSign(u) * Math.log(1 - 2 * Math.abs(u));
	        }
	      });

	      function tukeyWprob(w, rr, cc) {
	        var nleg = 12;
	        var ihalf = 6;
	        var C1 = -30;
	        var C2 = -50;
	        var C3 = 60;
	        var bb = 8;
	        var wlar = 3;
	        var wincr1 = 2;
	        var wincr2 = 3;
	        var xleg = [0.981560634246719250690549090149, 0.904117256370474856678465866119, 0.769902674194304687036893833213, 0.587317954286617447296702418941, 0.367831498998180193752691536644, 0.125233408511468915472441369464];
	        var aleg = [0.047175336386511827194615961485, 0.106939325995318430960254718194, 0.160078328543346226334652529543, 0.203167426723065921749064455810, 0.233492536538354808760849898925, 0.249147045813402785000562436043];
	        var qsqz = w * 0.5; // if w >= 16 then the integral lower bound (occurs for c=20)
	        // is 0.99999999999995 so return a value of 1.

	        if (qsqz >= bb) return 1.0; // find (f(w/2) - 1) ^ cc
	        // (first term in integral of hartley's form).

	        var pr_w = 2 * jStat.normal.cdf(qsqz, 0, 1, 1, 0) - 1; // erf(qsqz / M_SQRT2)
	        // if pr_w ^ cc < 2e-22 then set pr_w = 0

	        if (pr_w >= Math.exp(C2 / cc)) pr_w = Math.pow(pr_w, cc);else pr_w = 0.0; // if w is large then the second component of the
	        // integral is small, so fewer intervals are needed.

	        var wincr;
	        if (w > wlar) wincr = wincr1;else wincr = wincr2; // find the integral of second term of hartley's form
	        // for the integral of the range for equal-length
	        // intervals using legendre quadrature.  limits of
	        // integration are from (w/2, 8).  two or three
	        // equal-length intervals are used.
	        // blb and bub are lower and upper limits of integration.

	        var blb = qsqz;
	        var binc = (bb - qsqz) / wincr;
	        var bub = blb + binc;
	        var einsum = 0.0; // integrate over each interval

	        var cc1 = cc - 1.0;

	        for (var wi = 1; wi <= wincr; wi++) {
	          var elsum = 0.0;
	          var a = 0.5 * (bub + blb); // legendre quadrature with order = nleg

	          var b = 0.5 * (bub - blb);

	          for (var jj = 1; jj <= nleg; jj++) {
	            var j, xx;

	            if (ihalf < jj) {
	              j = nleg - jj + 1;
	              xx = xleg[j - 1];
	            } else {
	              j = jj;
	              xx = -xleg[j - 1];
	            }

	            var c = b * xx;
	            var ac = a + c; // if exp(-qexpo/2) < 9e-14,
	            // then doesn't contribute to integral

	            var qexpo = ac * ac;
	            if (qexpo > C3) break;
	            var pplus = 2 * jStat.normal.cdf(ac, 0, 1, 1, 0);
	            var pminus = 2 * jStat.normal.cdf(ac, w, 1, 1, 0); // if rinsum ^ (cc-1) < 9e-14,
	            // then doesn't contribute to integral

	            var rinsum = pplus * 0.5 - pminus * 0.5;

	            if (rinsum >= Math.exp(C1 / cc1)) {
	              rinsum = aleg[j - 1] * Math.exp(-(0.5 * qexpo)) * Math.pow(rinsum, cc1);
	              elsum += rinsum;
	            }
	          }

	          elsum *= 2.0 * b * cc / Math.sqrt(2 * Math.PI);
	          einsum += elsum;
	          blb = bub;
	          bub += binc;
	        } // if pr_w ^ rr < 9e-14, then return 0


	        pr_w += einsum;
	        if (pr_w <= Math.exp(C1 / rr)) return 0;
	        pr_w = Math.pow(pr_w, rr);
	        if (pr_w >= 1) // 1 was iMax was eps
	          return 1;
	        return pr_w;
	      }

	      function tukeyQinv(p, c, v) {
	        var p0 = 0.322232421088;
	        var q0 = 0.993484626060e-01;
	        var p1 = -1.0;
	        var q1 = 0.588581570495;
	        var p2 = -0.342242088547;
	        var q2 = 0.531103462366;
	        var p3 = -0.204231210125;
	        var q3 = 0.103537752850;
	        var p4 = -0.453642210148e-04;
	        var q4 = 0.38560700634e-02;
	        var c1 = 0.8832;
	        var c2 = 0.2368;
	        var c3 = 1.214;
	        var c4 = 1.208;
	        var c5 = 1.4142;
	        var vmax = 120.0;
	        var ps = 0.5 - 0.5 * p;
	        var yi = Math.sqrt(Math.log(1.0 / (ps * ps)));
	        var t = yi + ((((yi * p4 + p3) * yi + p2) * yi + p1) * yi + p0) / ((((yi * q4 + q3) * yi + q2) * yi + q1) * yi + q0);
	        if (v < vmax) t += (t * t * t + t) / v / 4.0;
	        var q = c1 - c2 * t;
	        if (v < vmax) q += -c3 / v + c4 * t / v;
	        return t * (q * Math.log(c - 1.0) + c5);
	      }

	      jStat.extend(jStat.tukey, {
	        cdf: function cdf(q, nmeans, df) {
	          // Identical implementation as the R ptukey() function as of commit 68947
	          var rr = 1;
	          var cc = nmeans;
	          var nlegq = 16;
	          var ihalfq = 8;
	          var eps1 = -30.0;
	          var eps2 = 1.0e-14;
	          var dhaf = 100.0;
	          var dquar = 800.0;
	          var deigh = 5000.0;
	          var dlarg = 25000.0;
	          var ulen1 = 1.0;
	          var ulen2 = 0.5;
	          var ulen3 = 0.25;
	          var ulen4 = 0.125;
	          var xlegq = [0.989400934991649932596154173450, 0.944575023073232576077988415535, 0.865631202387831743880467897712, 0.755404408355003033895101194847, 0.617876244402643748446671764049, 0.458016777657227386342419442984, 0.281603550779258913230460501460, 0.950125098376374401853193354250e-1];
	          var alegq = [0.271524594117540948517805724560e-1, 0.622535239386478928628438369944e-1, 0.951585116824927848099251076022e-1, 0.124628971255533872052476282192, 0.149595988816576732081501730547, 0.169156519395002538189312079030, 0.182603415044923588866763667969, 0.189450610455068496285396723208];
	          if (q <= 0) return 0; // df must be > 1
	          // there must be at least two values

	          if (df < 2 || rr < 1 || cc < 2) return NaN;
	          if (!Number.isFinite(q)) return 1;
	          if (df > dlarg) return tukeyWprob(q, rr, cc); // calculate leading constant

	          var f2 = df * 0.5;
	          var f2lf = f2 * Math.log(df) - df * Math.log(2) - jStat.gammaln(f2);
	          var f21 = f2 - 1.0; // integral is divided into unit, half-unit, quarter-unit, or
	          // eighth-unit length intervals depending on the value of the
	          // degrees of freedom.

	          var ff4 = df * 0.25;
	          var ulen;
	          if (df <= dhaf) ulen = ulen1;else if (df <= dquar) ulen = ulen2;else if (df <= deigh) ulen = ulen3;else ulen = ulen4;
	          f2lf += Math.log(ulen); // integrate over each subinterval

	          var ans = 0.0;

	          for (var i = 1; i <= 50; i++) {
	            var otsum = 0.0; // legendre quadrature with order = nlegq
	            // nodes (stored in xlegq) are symmetric around zero.

	            var twa1 = (2 * i - 1) * ulen;

	            for (var jj = 1; jj <= nlegq; jj++) {
	              var j, t1;

	              if (ihalfq < jj) {
	                j = jj - ihalfq - 1;
	                t1 = f2lf + f21 * Math.log(twa1 + xlegq[j] * ulen) - (xlegq[j] * ulen + twa1) * ff4;
	              } else {
	                j = jj - 1;
	                t1 = f2lf + f21 * Math.log(twa1 - xlegq[j] * ulen) + (xlegq[j] * ulen - twa1) * ff4;
	              } // if exp(t1) < 9e-14, then doesn't contribute to integral


	              var qsqz;

	              if (t1 >= eps1) {
	                if (ihalfq < jj) {
	                  qsqz = q * Math.sqrt((xlegq[j] * ulen + twa1) * 0.5);
	                } else {
	                  qsqz = q * Math.sqrt((-(xlegq[j] * ulen) + twa1) * 0.5);
	                } // call wprob to find integral of range portion


	                var wprb = tukeyWprob(qsqz, rr, cc);
	                var rotsum = wprb * alegq[j] * Math.exp(t1);
	                otsum += rotsum;
	              } // end legendre integral for interval i
	              // L200:

	            } // if integral for interval i < 1e-14, then stop.
	            // However, in order to avoid small area under left tail,
	            // at least  1 / ulen  intervals are calculated.


	            if (i * ulen >= 1.0 && otsum <= eps2) break; // end of interval i
	            // L330:

	            ans += otsum;
	          }

	          if (otsum > eps2) {
	            // not converged
	            throw new Error('tukey.cdf failed to converge');
	          }

	          if (ans > 1) ans = 1;
	          return ans;
	        },
	        inv: function inv(p, nmeans, df) {
	          // Identical implementation as the R qtukey() function as of commit 68947
	          var rr = 1;
	          var cc = nmeans;
	          var eps = 0.0001;
	          var maxiter = 50; // df must be > 1 ; there must be at least two values

	          if (df < 2 || rr < 1 || cc < 2) return NaN;
	          if (p < 0 || p > 1) return NaN;
	          if (p === 0) return 0;
	          if (p === 1) return Infinity; // Initial value

	          var x0 = tukeyQinv(p, cc, df); // Find prob(value < x0)

	          var valx0 = jStat.tukey.cdf(x0, nmeans, df) - p; // Find the second iterate and prob(value < x1).
	          // If the first iterate has probability value
	          // exceeding p then second iterate is 1 less than
	          // first iterate; otherwise it is 1 greater.

	          var x1;
	          if (valx0 > 0.0) x1 = Math.max(0.0, x0 - 1.0);else x1 = x0 + 1.0;
	          var valx1 = jStat.tukey.cdf(x1, nmeans, df) - p; // Find new iterate

	          var ans;

	          for (var iter = 1; iter < maxiter; iter++) {
	            ans = x1 - valx1 * (x1 - x0) / (valx1 - valx0);
	            valx0 = valx1; // New iterate must be >= 0

	            x0 = x1;

	            if (ans < 0.0) {
	              ans = 0.0;
	              valx1 = -p;
	            } // Find prob(value < new iterate)


	            valx1 = jStat.tukey.cdf(ans, nmeans, df) - p;
	            x1 = ans; // If the difference between two successive
	            // iterates is less than eps, stop

	            var xabs = Math.abs(x1 - x0);
	            if (xabs < eps) return ans;
	          }

	          throw new Error('tukey.inv failed to converge');
	        }
	      });
	    })(jStat, Math);
	    /* Provides functions for the solution of linear system of equations, integration, extrapolation,
	     * interpolation, eigenvalue problems, differential equations and PCA analysis. */


	    (function (jStat, Math) {
	      var push = Array.prototype.push;
	      var isArray = jStat.utils.isArray;

	      function isUsable(arg) {
	        return isArray(arg) || arg instanceof jStat;
	      }

	      jStat.extend({
	        // add a vector/matrix to a vector/matrix or scalar
	        add: function add(arr, arg) {
	          // check if arg is a vector or scalar
	          if (isUsable(arg)) {
	            if (!isUsable(arg[0])) arg = [arg];
	            return jStat.map(arr, function (value, row, col) {
	              return value + arg[row][col];
	            });
	          }

	          return jStat.map(arr, function (value) {
	            return value + arg;
	          });
	        },
	        // subtract a vector or scalar from the vector
	        subtract: function subtract(arr, arg) {
	          // check if arg is a vector or scalar
	          if (isUsable(arg)) {
	            if (!isUsable(arg[0])) arg = [arg];
	            return jStat.map(arr, function (value, row, col) {
	              return value - arg[row][col] || 0;
	            });
	          }

	          return jStat.map(arr, function (value) {
	            return value - arg;
	          });
	        },
	        // matrix division
	        divide: function divide(arr, arg) {
	          if (isUsable(arg)) {
	            if (!isUsable(arg[0])) arg = [arg];
	            return jStat.multiply(arr, jStat.inv(arg));
	          }

	          return jStat.map(arr, function (value) {
	            return value / arg;
	          });
	        },
	        // matrix multiplication
	        multiply: function multiply(arr, arg) {
	          var row, col, nrescols, sum, nrow, ncol, res, rescols; // eg: arr = 2 arg = 3 -> 6 for res[0][0] statement closure

	          if (arr.length === undefined && arg.length === undefined) {
	            return arr * arg;
	          }

	          nrow = arr.length, ncol = arr[0].length, res = jStat.zeros(nrow, nrescols = isUsable(arg) ? arg[0].length : ncol), rescols = 0;

	          if (isUsable(arg)) {
	            for (; rescols < nrescols; rescols++) {
	              for (row = 0; row < nrow; row++) {
	                sum = 0;

	                for (col = 0; col < ncol; col++) {
	                  sum += arr[row][col] * arg[col][rescols];
	                }

	                res[row][rescols] = sum;
	              }
	            }

	            return nrow === 1 && rescols === 1 ? res[0][0] : res;
	          }

	          return jStat.map(arr, function (value) {
	            return value * arg;
	          });
	        },
	        // outer([1,2,3],[4,5,6])
	        // ===
	        // [[1],[2],[3]] times [[4,5,6]]
	        // ->
	        // [[4,5,6],[8,10,12],[12,15,18]]
	        outer: function outer(A, B) {
	          return jStat.multiply(A.map(function (t) {
	            return [t];
	          }), [B]);
	        },
	        // Returns the dot product of two matricies
	        dot: function dot(arr, arg) {
	          if (!isUsable(arr[0])) arr = [arr];
	          if (!isUsable(arg[0])) arg = [arg]; // convert column to row vector

	          var left = arr[0].length === 1 && arr.length !== 1 ? jStat.transpose(arr) : arr,
	              right = arg[0].length === 1 && arg.length !== 1 ? jStat.transpose(arg) : arg,
	              res = [],
	              row = 0,
	              nrow = left.length,
	              ncol = left[0].length,
	              sum,
	              col;

	          for (; row < nrow; row++) {
	            res[row] = [];
	            sum = 0;

	            for (col = 0; col < ncol; col++) {
	              sum += left[row][col] * right[row][col];
	            }

	            res[row] = sum;
	          }

	          return res.length === 1 ? res[0] : res;
	        },
	        // raise every element by a scalar
	        pow: function pow(arr, arg) {
	          return jStat.map(arr, function (value) {
	            return Math.pow(value, arg);
	          });
	        },
	        // exponentiate every element
	        exp: function exp(arr) {
	          return jStat.map(arr, function (value) {
	            return Math.exp(value);
	          });
	        },
	        // generate the natural log of every element
	        log: function exp(arr) {
	          return jStat.map(arr, function (value) {
	            return Math.log(value);
	          });
	        },
	        // generate the absolute values of the vector
	        abs: function abs(arr) {
	          return jStat.map(arr, function (value) {
	            return Math.abs(value);
	          });
	        },
	        // computes the p-norm of the vector
	        // In the case that a matrix is passed, uses the first row as the vector
	        norm: function norm(arr, p) {
	          var nnorm = 0,
	              i = 0; // check the p-value of the norm, and set for most common case

	          if (isNaN(p)) p = 2; // check if multi-dimensional array, and make vector correction

	          if (isUsable(arr[0])) arr = arr[0]; // vector norm

	          for (; i < arr.length; i++) {
	            nnorm += Math.pow(Math.abs(arr[i]), p);
	          }

	          return Math.pow(nnorm, 1 / p);
	        },
	        // computes the angle between two vectors in rads
	        // In case a matrix is passed, this uses the first row as the vector
	        angle: function angle(arr, arg) {
	          return Math.acos(jStat.dot(arr, arg) / (jStat.norm(arr) * jStat.norm(arg)));
	        },
	        // augment one matrix by another
	        // Note: this function returns a matrix, not a jStat object
	        aug: function aug(a, b) {
	          var newarr = [];
	          var i;

	          for (i = 0; i < a.length; i++) {
	            newarr.push(a[i].slice());
	          }

	          for (i = 0; i < newarr.length; i++) {
	            push.apply(newarr[i], b[i]);
	          }

	          return newarr;
	        },
	        // The inv() function calculates the inverse of a matrix
	        // Create the inverse by augmenting the matrix by the identity matrix of the
	        // appropriate size, and then use G-J elimination on the augmented matrix.
	        inv: function inv(a) {
	          var rows = a.length;
	          var cols = a[0].length;
	          var b = jStat.identity(rows, cols);
	          var c = jStat.gauss_jordan(a, b);
	          var result = [];
	          var i = 0;
	          var j; //We need to copy the inverse portion to a new matrix to rid G-J artifacts

	          for (; i < rows; i++) {
	            result[i] = [];

	            for (j = cols; j < c[0].length; j++) {
	              result[i][j - cols] = c[i][j];
	            }
	          }

	          return result;
	        },
	        // calculate the determinant of a matrix
	        det: function det(a) {
	          var alen = a.length,
	              alend = alen * 2,
	              vals = new Array(alend),
	              rowshift = alen - 1,
	              colshift = alend - 1,
	              mrow = rowshift - alen + 1,
	              mcol = colshift,
	              i = 0,
	              result = 0,
	              j; // check for special 2x2 case

	          if (alen === 2) {
	            return a[0][0] * a[1][1] - a[0][1] * a[1][0];
	          }

	          for (; i < alend; i++) {
	            vals[i] = 1;
	          }

	          for (i = 0; i < alen; i++) {
	            for (j = 0; j < alen; j++) {
	              vals[mrow < 0 ? mrow + alen : mrow] *= a[i][j];
	              vals[mcol < alen ? mcol + alen : mcol] *= a[i][j];
	              mrow++;
	              mcol--;
	            }

	            mrow = --rowshift - alen + 1;
	            mcol = --colshift;
	          }

	          for (i = 0; i < alen; i++) {
	            result += vals[i];
	          }

	          for (; i < alend; i++) {
	            result -= vals[i];
	          }

	          return result;
	        },
	        gauss_elimination: function gauss_elimination(a, b) {
	          var i = 0,
	              j = 0,
	              n = a.length,
	              m = a[0].length,
	              factor = 1,
	              sum = 0,
	              x = [],
	              maug,
	              pivot,
	              temp,
	              k;
	          a = jStat.aug(a, b);
	          maug = a[0].length;

	          for (i = 0; i < n; i++) {
	            pivot = a[i][i];
	            j = i;

	            for (k = i + 1; k < m; k++) {
	              if (pivot < Math.abs(a[k][i])) {
	                pivot = a[k][i];
	                j = k;
	              }
	            }

	            if (j != i) {
	              for (k = 0; k < maug; k++) {
	                temp = a[i][k];
	                a[i][k] = a[j][k];
	                a[j][k] = temp;
	              }
	            }

	            for (j = i + 1; j < n; j++) {
	              factor = a[j][i] / a[i][i];

	              for (k = i; k < maug; k++) {
	                a[j][k] = a[j][k] - factor * a[i][k];
	              }
	            }
	          }

	          for (i = n - 1; i >= 0; i--) {
	            sum = 0;

	            for (j = i + 1; j <= n - 1; j++) {
	              sum = sum + x[j] * a[i][j];
	            }

	            x[i] = (a[i][maug - 1] - sum) / a[i][i];
	          }

	          return x;
	        },
	        gauss_jordan: function gauss_jordan(a, b) {
	          var m = jStat.aug(a, b);
	          var h = m.length;
	          var w = m[0].length;
	          var c = 0;
	          var x, y, y2; // find max pivot

	          for (y = 0; y < h; y++) {
	            var maxrow = y;

	            for (y2 = y + 1; y2 < h; y2++) {
	              if (Math.abs(m[y2][y]) > Math.abs(m[maxrow][y])) maxrow = y2;
	            }

	            var tmp = m[y];
	            m[y] = m[maxrow];
	            m[maxrow] = tmp;

	            for (y2 = y + 1; y2 < h; y2++) {
	              c = m[y2][y] / m[y][y];

	              for (x = y; x < w; x++) {
	                m[y2][x] -= m[y][x] * c;
	              }
	            }
	          } // backsubstitute


	          for (y = h - 1; y >= 0; y--) {
	            c = m[y][y];

	            for (y2 = 0; y2 < y; y2++) {
	              for (x = w - 1; x > y - 1; x--) {
	                m[y2][x] -= m[y][x] * m[y2][y] / c;
	              }
	            }

	            m[y][y] /= c;

	            for (x = h; x < w; x++) {
	              m[y][x] /= c;
	            }
	          }

	          return m;
	        },
	        // solve equation
	        // Ax=b
	        // A is upper triangular matrix
	        // A=[[1,2,3],[0,4,5],[0,6,7]]
	        // b=[1,2,3]
	        // triaUpSolve(A,b) // -> [2.666,0.1666,1.666]
	        // if you use matrix style
	        // A=[[1,2,3],[0,4,5],[0,6,7]]
	        // b=[[1],[2],[3]]
	        // will return [[2.666],[0.1666],[1.666]]
	        triaUpSolve: function triaUpSolve(A, b) {
	          var size = A[0].length;
	          var x = jStat.zeros(1, size)[0];
	          var parts;
	          var matrix_mode = false;

	          if (b[0].length != undefined) {
	            b = b.map(function (i) {
	              return i[0];
	            });
	            matrix_mode = true;
	          }

	          jStat.arange(size - 1, -1, -1).forEach(function (i) {
	            parts = jStat.arange(i + 1, size).map(function (j) {
	              return x[j] * A[i][j];
	            });
	            x[i] = (b[i] - jStat.sum(parts)) / A[i][i];
	          });
	          if (matrix_mode) return x.map(function (i) {
	            return [i];
	          });
	          return x;
	        },
	        triaLowSolve: function triaLowSolve(A, b) {
	          // like to triaUpSolve but A is lower triangular matrix
	          var size = A[0].length;
	          var x = jStat.zeros(1, size)[0];
	          var parts;
	          var matrix_mode = false;

	          if (b[0].length != undefined) {
	            b = b.map(function (i) {
	              return i[0];
	            });
	            matrix_mode = true;
	          }

	          jStat.arange(size).forEach(function (i) {
	            parts = jStat.arange(i).map(function (j) {
	              return A[i][j] * x[j];
	            });
	            x[i] = (b[i] - jStat.sum(parts)) / A[i][i];
	          });
	          if (matrix_mode) return x.map(function (i) {
	            return [i];
	          });
	          return x;
	        },
	        // A -> [L,U]
	        // A=LU
	        // L is lower triangular matrix
	        // U is upper triangular matrix
	        lu: function lu(A) {
	          var size = A.length; //var L=jStat.diagonal(jStat.ones(1,size)[0]);

	          var L = jStat.identity(size);
	          var R = jStat.zeros(A.length, A[0].length);
	          var parts;
	          jStat.arange(size).forEach(function (t) {
	            R[0][t] = A[0][t];
	          });
	          jStat.arange(1, size).forEach(function (l) {
	            jStat.arange(l).forEach(function (i) {
	              parts = jStat.arange(i).map(function (jj) {
	                return L[l][jj] * R[jj][i];
	              });
	              L[l][i] = (A[l][i] - jStat.sum(parts)) / R[i][i];
	            });
	            jStat.arange(l, size).forEach(function (j) {
	              parts = jStat.arange(l).map(function (jj) {
	                return L[l][jj] * R[jj][j];
	              });
	              R[l][j] = A[parts.length][j] - jStat.sum(parts);
	            });
	          });
	          return [L, R];
	        },
	        // A -> T
	        // A=TT'
	        // T is lower triangular matrix
	        cholesky: function cholesky(A) {
	          var size = A.length;
	          var T = jStat.zeros(A.length, A[0].length);
	          var parts;
	          jStat.arange(size).forEach(function (i) {
	            parts = jStat.arange(i).map(function (t) {
	              return Math.pow(T[i][t], 2);
	            });
	            T[i][i] = Math.sqrt(A[i][i] - jStat.sum(parts));
	            jStat.arange(i + 1, size).forEach(function (j) {
	              parts = jStat.arange(i).map(function (t) {
	                return T[i][t] * T[j][t];
	              });
	              T[j][i] = (A[i][j] - jStat.sum(parts)) / T[i][i];
	            });
	          });
	          return T;
	        },
	        gauss_jacobi: function gauss_jacobi(a, b, x, r) {
	          var i = 0;
	          var j = 0;
	          var n = a.length;
	          var l = [];
	          var u = [];
	          var d = [];
	          var xv, c, h, xk;

	          for (; i < n; i++) {
	            l[i] = [];
	            u[i] = [];
	            d[i] = [];

	            for (j = 0; j < n; j++) {
	              if (i > j) {
	                l[i][j] = a[i][j];
	                u[i][j] = d[i][j] = 0;
	              } else if (i < j) {
	                u[i][j] = a[i][j];
	                l[i][j] = d[i][j] = 0;
	              } else {
	                d[i][j] = a[i][j];
	                l[i][j] = u[i][j] = 0;
	              }
	            }
	          }

	          h = jStat.multiply(jStat.multiply(jStat.inv(d), jStat.add(l, u)), -1);
	          c = jStat.multiply(jStat.inv(d), b);
	          xv = x;
	          xk = jStat.add(jStat.multiply(h, x), c);
	          i = 2;

	          while (Math.abs(jStat.norm(jStat.subtract(xk, xv))) > r) {
	            xv = xk;
	            xk = jStat.add(jStat.multiply(h, xv), c);
	            i++;
	          }

	          return xk;
	        },
	        gauss_seidel: function gauss_seidel(a, b, x, r) {
	          var i = 0;
	          var n = a.length;
	          var l = [];
	          var u = [];
	          var d = [];
	          var j, xv, c, h, xk;

	          for (; i < n; i++) {
	            l[i] = [];
	            u[i] = [];
	            d[i] = [];

	            for (j = 0; j < n; j++) {
	              if (i > j) {
	                l[i][j] = a[i][j];
	                u[i][j] = d[i][j] = 0;
	              } else if (i < j) {
	                u[i][j] = a[i][j];
	                l[i][j] = d[i][j] = 0;
	              } else {
	                d[i][j] = a[i][j];
	                l[i][j] = u[i][j] = 0;
	              }
	            }
	          }

	          h = jStat.multiply(jStat.multiply(jStat.inv(jStat.add(d, l)), u), -1);
	          c = jStat.multiply(jStat.inv(jStat.add(d, l)), b);
	          xv = x;
	          xk = jStat.add(jStat.multiply(h, x), c);
	          i = 2;

	          while (Math.abs(jStat.norm(jStat.subtract(xk, xv))) > r) {
	            xv = xk;
	            xk = jStat.add(jStat.multiply(h, xv), c);
	            i = i + 1;
	          }

	          return xk;
	        },
	        SOR: function SOR(a, b, x, r, w) {
	          var i = 0;
	          var n = a.length;
	          var l = [];
	          var u = [];
	          var d = [];
	          var j, xv, c, h, xk;

	          for (; i < n; i++) {
	            l[i] = [];
	            u[i] = [];
	            d[i] = [];

	            for (j = 0; j < n; j++) {
	              if (i > j) {
	                l[i][j] = a[i][j];
	                u[i][j] = d[i][j] = 0;
	              } else if (i < j) {
	                u[i][j] = a[i][j];
	                l[i][j] = d[i][j] = 0;
	              } else {
	                d[i][j] = a[i][j];
	                l[i][j] = u[i][j] = 0;
	              }
	            }
	          }

	          h = jStat.multiply(jStat.inv(jStat.add(d, jStat.multiply(l, w))), jStat.subtract(jStat.multiply(d, 1 - w), jStat.multiply(u, w)));
	          c = jStat.multiply(jStat.multiply(jStat.inv(jStat.add(d, jStat.multiply(l, w))), b), w);
	          xv = x;
	          xk = jStat.add(jStat.multiply(h, x), c);
	          i = 2;

	          while (Math.abs(jStat.norm(jStat.subtract(xk, xv))) > r) {
	            xv = xk;
	            xk = jStat.add(jStat.multiply(h, xv), c);
	            i++;
	          }

	          return xk;
	        },
	        householder: function householder(a) {
	          var m = a.length;
	          var n = a[0].length;
	          var i = 0;
	          var w = [];
	          var p = [];
	          var alpha, r, k, j, factor;

	          for (; i < m - 1; i++) {
	            alpha = 0;

	            for (j = i + 1; j < n; j++) {
	              alpha += a[j][i] * a[j][i];
	            }

	            factor = a[i + 1][i] > 0 ? -1 : 1;
	            alpha = factor * Math.sqrt(alpha);
	            r = Math.sqrt((alpha * alpha - a[i + 1][i] * alpha) / 2);
	            w = jStat.zeros(m, 1);
	            w[i + 1][0] = (a[i + 1][i] - alpha) / (2 * r);

	            for (k = i + 2; k < m; k++) {
	              w[k][0] = a[k][i] / (2 * r);
	            }

	            p = jStat.subtract(jStat.identity(m, n), jStat.multiply(jStat.multiply(w, jStat.transpose(w)), 2));
	            a = jStat.multiply(p, jStat.multiply(a, p));
	          }

	          return a;
	        },
	        // A -> [Q,R]
	        // Q is orthogonal matrix
	        // R is upper triangular
	        QR: function () {
	          // x -> Q
	          // find a orthogonal matrix Q st.
	          // Qx=y
	          // y is [||x||,0,0,...]
	          // quick ref
	          var sum = jStat.sum;
	          var range = jStat.arange;

	          function qr2(x) {
	            // quick impletation
	            // https://www.stat.wisc.edu/~larget/math496/qr.html
	            var n = x.length;
	            var p = x[0].length;
	            var r = jStat.zeros(p, p);
	            x = jStat.copy(x);
	            var i, j, k;

	            for (j = 0; j < p; j++) {
	              r[j][j] = Math.sqrt(sum(range(n).map(function (i) {
	                return x[i][j] * x[i][j];
	              })));

	              for (i = 0; i < n; i++) {
	                x[i][j] = x[i][j] / r[j][j];
	              }

	              for (k = j + 1; k < p; k++) {
	                r[j][k] = sum(range(n).map(function (i) {
	                  return x[i][j] * x[i][k];
	                }));

	                for (i = 0; i < n; i++) {
	                  x[i][k] = x[i][k] - x[i][j] * r[j][k];
	                }
	              }
	            }

	            return [x, r];
	          }

	          return qr2;
	        }(),
	        lstsq: function () {
	          // solve least squard problem for Ax=b as QR decomposition way if b is
	          // [[b1],[b2],[b3]] form will return [[x1],[x2],[x3]] array form solution
	          // else b is [b1,b2,b3] form will return [x1,x2,x3] array form solution
	          function R_I(A) {
	            A = jStat.copy(A);
	            var size = A.length;
	            var I = jStat.identity(size);
	            jStat.arange(size - 1, -1, -1).forEach(function (i) {
	              jStat.sliceAssign(I, {
	                row: i
	              }, jStat.divide(jStat.slice(I, {
	                row: i
	              }), A[i][i]));
	              jStat.sliceAssign(A, {
	                row: i
	              }, jStat.divide(jStat.slice(A, {
	                row: i
	              }), A[i][i]));
	              jStat.arange(i).forEach(function (j) {
	                var c = jStat.multiply(A[j][i], -1);
	                var Aj = jStat.slice(A, {
	                  row: j
	                });
	                var cAi = jStat.multiply(jStat.slice(A, {
	                  row: i
	                }), c);
	                jStat.sliceAssign(A, {
	                  row: j
	                }, jStat.add(Aj, cAi));
	                var Ij = jStat.slice(I, {
	                  row: j
	                });
	                var cIi = jStat.multiply(jStat.slice(I, {
	                  row: i
	                }), c);
	                jStat.sliceAssign(I, {
	                  row: j
	                }, jStat.add(Ij, cIi));
	              });
	            });
	            return I;
	          }

	          function qr_solve(A, b) {
	            var array_mode = false;

	            if (b[0].length === undefined) {
	              // [c1,c2,c3] mode
	              b = b.map(function (x) {
	                return [x];
	              });
	              array_mode = true;
	            }

	            var QR = jStat.QR(A);
	            var Q = QR[0];
	            var R = QR[1];
	            var attrs = A[0].length;
	            var Q1 = jStat.slice(Q, {
	              col: {
	                end: attrs
	              }
	            });
	            var R1 = jStat.slice(R, {
	              row: {
	                end: attrs
	              }
	            });
	            var RI = R_I(R1);
	            var Q2 = jStat.transpose(Q1);

	            if (Q2[0].length === undefined) {
	              Q2 = [Q2]; // The confusing jStat.multifly implementation threat nature process again.
	            }

	            var x = jStat.multiply(jStat.multiply(RI, Q2), b);

	            if (x.length === undefined) {
	              x = [[x]]; // The confusing jStat.multifly implementation threat nature process again.
	            }

	            if (array_mode) return x.map(function (i) {
	              return i[0];
	            });
	            return x;
	          }

	          return qr_solve;
	        }(),
	        jacobi: function jacobi(a) {
	          var condition = 1;
	          var n = a.length;
	          var e = jStat.identity(n, n);
	          var ev = [];
	          var b, i, j, p, q, maxim, theta, s; // condition === 1 only if tolerance is not reached

	          while (condition === 1) {
	            maxim = a[0][1];
	            p = 0;
	            q = 1;

	            for (i = 0; i < n; i++) {
	              for (j = 0; j < n; j++) {
	                if (i != j) {
	                  if (maxim < Math.abs(a[i][j])) {
	                    maxim = Math.abs(a[i][j]);
	                    p = i;
	                    q = j;
	                  }
	                }
	              }
	            }

	            if (a[p][p] === a[q][q]) theta = a[p][q] > 0 ? Math.PI / 4 : -Math.PI / 4;else theta = Math.atan(2 * a[p][q] / (a[p][p] - a[q][q])) / 2;
	            s = jStat.identity(n, n);
	            s[p][p] = Math.cos(theta);
	            s[p][q] = -Math.sin(theta);
	            s[q][p] = Math.sin(theta);
	            s[q][q] = Math.cos(theta); // eigen vector matrix

	            e = jStat.multiply(e, s);
	            b = jStat.multiply(jStat.multiply(jStat.inv(s), a), s);
	            a = b;
	            condition = 0;

	            for (i = 1; i < n; i++) {
	              for (j = 1; j < n; j++) {
	                if (i != j && Math.abs(a[i][j]) > 0.001) {
	                  condition = 1;
	                }
	              }
	            }
	          }

	          for (i = 0; i < n; i++) {
	            ev.push(a[i][i]);
	          } //returns both the eigenvalue and eigenmatrix


	          return [e, ev];
	        },
	        rungekutta: function rungekutta(f, h, p, t_j, u_j, order) {
	          var k1, k2, u_j1, k3, k4;

	          if (order === 2) {
	            while (t_j <= p) {
	              k1 = h * f(t_j, u_j);
	              k2 = h * f(t_j + h, u_j + k1);
	              u_j1 = u_j + (k1 + k2) / 2;
	              u_j = u_j1;
	              t_j = t_j + h;
	            }
	          }

	          if (order === 4) {
	            while (t_j <= p) {
	              k1 = h * f(t_j, u_j);
	              k2 = h * f(t_j + h / 2, u_j + k1 / 2);
	              k3 = h * f(t_j + h / 2, u_j + k2 / 2);
	              k4 = h * f(t_j + h, u_j + k3);
	              u_j1 = u_j + (k1 + 2 * k2 + 2 * k3 + k4) / 6;
	              u_j = u_j1;
	              t_j = t_j + h;
	            }
	          }

	          return u_j;
	        },
	        romberg: function romberg(f, a, b, order) {
	          var i = 0;
	          var h = (b - a) / 2;
	          var x = [];
	          var h1 = [];
	          var g = [];
	          var m, a1, j, k, I;

	          while (i < order / 2) {
	            I = f(a);

	            for (j = a, k = 0; j <= b; j = j + h, k++) {
	              x[k] = j;
	            }

	            m = x.length;

	            for (j = 1; j < m - 1; j++) {
	              I += (j % 2 !== 0 ? 4 : 2) * f(x[j]);
	            }

	            I = h / 3 * (I + f(b));
	            g[i] = I;
	            h /= 2;
	            i++;
	          }

	          a1 = g.length;
	          m = 1;

	          while (a1 !== 1) {
	            for (j = 0; j < a1 - 1; j++) {
	              h1[j] = (Math.pow(4, m) * g[j + 1] - g[j]) / (Math.pow(4, m) - 1);
	            }

	            a1 = h1.length;
	            g = h1;
	            h1 = [];
	            m++;
	          }

	          return g;
	        },
	        richardson: function richardson(X, f, x, h) {
	          function pos(X, x) {
	            var i = 0;
	            var n = X.length;
	            var p;

	            for (; i < n; i++) {
	              if (X[i] === x) p = i;
	            }

	            return p;
	          }

	          var h_min = Math.abs(x - X[pos(X, x) + 1]);
	          var i = 0;
	          var g = [];
	          var h1 = [];
	          var y1, y2, m, a, j;

	          while (h >= h_min) {
	            y1 = pos(X, x + h);
	            y2 = pos(X, x);
	            g[i] = (f[y1] - 2 * f[y2] + f[2 * y2 - y1]) / (h * h);
	            h /= 2;
	            i++;
	          }

	          a = g.length;
	          m = 1;

	          while (a != 1) {
	            for (j = 0; j < a - 1; j++) {
	              h1[j] = (Math.pow(4, m) * g[j + 1] - g[j]) / (Math.pow(4, m) - 1);
	            }

	            a = h1.length;
	            g = h1;
	            h1 = [];
	            m++;
	          }

	          return g;
	        },
	        simpson: function simpson(f, a, b, n) {
	          var h = (b - a) / n;
	          var I = f(a);
	          var x = [];
	          var j = a;
	          var k = 0;
	          var i = 1;
	          var m;

	          for (; j <= b; j = j + h, k++) {
	            x[k] = j;
	          }

	          m = x.length;

	          for (; i < m - 1; i++) {
	            I += (i % 2 !== 0 ? 4 : 2) * f(x[i]);
	          }

	          return h / 3 * (I + f(b));
	        },
	        hermite: function hermite(X, F, dF, value) {
	          var n = X.length;
	          var p = 0;
	          var i = 0;
	          var l = [];
	          var dl = [];
	          var A = [];
	          var B = [];
	          var j;

	          for (; i < n; i++) {
	            l[i] = 1;

	            for (j = 0; j < n; j++) {
	              if (i != j) l[i] *= (value - X[j]) / (X[i] - X[j]);
	            }

	            dl[i] = 0;

	            for (j = 0; j < n; j++) {
	              if (i != j) dl[i] += 1 / (X[i] - X[j]);
	            }

	            A[i] = (1 - 2 * (value - X[i]) * dl[i]) * (l[i] * l[i]);
	            B[i] = (value - X[i]) * (l[i] * l[i]);
	            p += A[i] * F[i] + B[i] * dF[i];
	          }

	          return p;
	        },
	        lagrange: function lagrange(X, F, value) {
	          var p = 0;
	          var i = 0;
	          var j, l;
	          var n = X.length;

	          for (; i < n; i++) {
	            l = F[i];

	            for (j = 0; j < n; j++) {
	              // calculating the lagrange polynomial L_i
	              if (i != j) l *= (value - X[j]) / (X[i] - X[j]);
	            } // adding the lagrange polynomials found above


	            p += l;
	          }

	          return p;
	        },
	        cubic_spline: function cubic_spline(X, F, value) {
	          var n = X.length;
	          var i = 0,
	              j;
	          var A = [];
	          var B = [];
	          var alpha = [];
	          var c = [];
	          var h = [];
	          var b = [];
	          var d = [];

	          for (; i < n - 1; i++) {
	            h[i] = X[i + 1] - X[i];
	          }

	          alpha[0] = 0;

	          for (i = 1; i < n - 1; i++) {
	            alpha[i] = 3 / h[i] * (F[i + 1] - F[i]) - 3 / h[i - 1] * (F[i] - F[i - 1]);
	          }

	          for (i = 1; i < n - 1; i++) {
	            A[i] = [];
	            B[i] = [];
	            A[i][i - 1] = h[i - 1];
	            A[i][i] = 2 * (h[i - 1] + h[i]);
	            A[i][i + 1] = h[i];
	            B[i][0] = alpha[i];
	          }

	          c = jStat.multiply(jStat.inv(A), B);

	          for (j = 0; j < n - 1; j++) {
	            b[j] = (F[j + 1] - F[j]) / h[j] - h[j] * (c[j + 1][0] + 2 * c[j][0]) / 3;
	            d[j] = (c[j + 1][0] - c[j][0]) / (3 * h[j]);
	          }

	          for (j = 0; j < n; j++) {
	            if (X[j] > value) break;
	          }

	          j -= 1;
	          return F[j] + (value - X[j]) * b[j] + jStat.sq(value - X[j]) * c[j] + (value - X[j]) * jStat.sq(value - X[j]) * d[j];
	        },
	        gauss_quadrature: function gauss_quadrature() {
	          throw new Error('gauss_quadrature not yet implemented');
	        },
	        PCA: function PCA(X) {
	          var m = X.length;
	          var n = X[0].length;
	          var i = 0;
	          var j, temp1;
	          var u = [];
	          var D = [];
	          var result = [];
	          var temp2 = [];
	          var Y = [];
	          var Bt = [];
	          var B = [];
	          var C = [];
	          var V = [];
	          var Vt = [];

	          for (i = 0; i < m; i++) {
	            u[i] = jStat.sum(X[i]) / n;
	          }

	          for (i = 0; i < n; i++) {
	            B[i] = [];

	            for (j = 0; j < m; j++) {
	              B[i][j] = X[j][i] - u[j];
	            }
	          }

	          B = jStat.transpose(B);

	          for (i = 0; i < m; i++) {
	            C[i] = [];

	            for (j = 0; j < m; j++) {
	              C[i][j] = jStat.dot([B[i]], [B[j]]) / (n - 1);
	            }
	          }

	          result = jStat.jacobi(C);
	          V = result[0];
	          D = result[1];
	          Vt = jStat.transpose(V);

	          for (i = 0; i < D.length; i++) {
	            for (j = i; j < D.length; j++) {
	              if (D[i] < D[j]) {
	                temp1 = D[i];
	                D[i] = D[j];
	                D[j] = temp1;
	                temp2 = Vt[i];
	                Vt[i] = Vt[j];
	                Vt[j] = temp2;
	              }
	            }
	          }

	          Bt = jStat.transpose(B);

	          for (i = 0; i < m; i++) {
	            Y[i] = [];

	            for (j = 0; j < Bt.length; j++) {
	              Y[i][j] = jStat.dot([Vt[i]], [Bt[j]]);
	            }
	          }

	          return [X, D, Vt, Y];
	        }
	      }); // extend jStat.fn with methods that require one argument

	      (function (funcs) {
	        for (var i = 0; i < funcs.length; i++) {
	          (function (passfunc) {
	            jStat.fn[passfunc] = function (arg, func) {
	              var tmpthis = this; // check for callback

	              if (func) {
	                setTimeout(function () {
	                  func.call(tmpthis, jStat.fn[passfunc].call(tmpthis, arg));
	                }, 15);
	                return this;
	              }

	              if (typeof jStat[passfunc](this, arg) === 'number') return jStat[passfunc](this, arg);else return jStat(jStat[passfunc](this, arg));
	            };
	          })(funcs[i]);
	        }
	      })('add divide multiply subtract dot pow exp log abs norm angle'.split(' '));
	    })(jStat, Math);

	    (function (jStat, Math) {
	      var slice = [].slice;
	      var isNumber = jStat.utils.isNumber;
	      var isArray = jStat.utils.isArray; // flag==true denotes use of sample standard deviation
	      // Z Statistics

	      jStat.extend({
	        // 2 different parameter lists:
	        // (value, mean, sd)
	        // (value, array, flag)
	        zscore: function zscore() {
	          var args = slice.call(arguments);

	          if (isNumber(args[1])) {
	            return (args[0] - args[1]) / args[2];
	          }

	          return (args[0] - jStat.mean(args[1])) / jStat.stdev(args[1], args[2]);
	        },
	        // 3 different paramter lists:
	        // (value, mean, sd, sides)
	        // (zscore, sides)
	        // (value, array, sides, flag)
	        ztest: function ztest() {
	          var args = slice.call(arguments);
	          var z;

	          if (isArray(args[1])) {
	            // (value, array, sides, flag)
	            z = jStat.zscore(args[0], args[1], args[3]);
	            return args[2] === 1 ? jStat.normal.cdf(-Math.abs(z), 0, 1) : jStat.normal.cdf(-Math.abs(z), 0, 1) * 2;
	          } else {
	            if (args.length > 2) {
	              // (value, mean, sd, sides)
	              z = jStat.zscore(args[0], args[1], args[2]);
	              return args[3] === 1 ? jStat.normal.cdf(-Math.abs(z), 0, 1) : jStat.normal.cdf(-Math.abs(z), 0, 1) * 2;
	            } else {
	              // (zscore, sides)
	              z = args[0];
	              return args[1] === 1 ? jStat.normal.cdf(-Math.abs(z), 0, 1) : jStat.normal.cdf(-Math.abs(z), 0, 1) * 2;
	            }
	          }
	        }
	      });
	      jStat.extend(jStat.fn, {
	        zscore: function zscore(value, flag) {
	          return (value - this.mean()) / this.stdev(flag);
	        },
	        ztest: function ztest(value, sides, flag) {
	          var zscore = Math.abs(this.zscore(value, flag));
	          return sides === 1 ? jStat.normal.cdf(-zscore, 0, 1) : jStat.normal.cdf(-zscore, 0, 1) * 2;
	        }
	      }); // T Statistics

	      jStat.extend({
	        // 2 parameter lists
	        // (value, mean, sd, n)
	        // (value, array)
	        tscore: function tscore() {
	          var args = slice.call(arguments);
	          return args.length === 4 ? (args[0] - args[1]) / (args[2] / Math.sqrt(args[3])) : (args[0] - jStat.mean(args[1])) / (jStat.stdev(args[1], true) / Math.sqrt(args[1].length));
	        },
	        // 3 different paramter lists:
	        // (value, mean, sd, n, sides)
	        // (tscore, n, sides)
	        // (value, array, sides)
	        ttest: function ttest() {
	          var args = slice.call(arguments);
	          var tscore;

	          if (args.length === 5) {
	            tscore = Math.abs(jStat.tscore(args[0], args[1], args[2], args[3]));
	            return args[4] === 1 ? jStat.studentt.cdf(-tscore, args[3] - 1) : jStat.studentt.cdf(-tscore, args[3] - 1) * 2;
	          }

	          if (isNumber(args[1])) {
	            tscore = Math.abs(args[0]);
	            return args[2] == 1 ? jStat.studentt.cdf(-tscore, args[1] - 1) : jStat.studentt.cdf(-tscore, args[1] - 1) * 2;
	          }

	          tscore = Math.abs(jStat.tscore(args[0], args[1]));
	          return args[2] == 1 ? jStat.studentt.cdf(-tscore, args[1].length - 1) : jStat.studentt.cdf(-tscore, args[1].length - 1) * 2;
	        }
	      });
	      jStat.extend(jStat.fn, {
	        tscore: function tscore(value) {
	          return (value - this.mean()) / (this.stdev(true) / Math.sqrt(this.cols()));
	        },
	        ttest: function ttest(value, sides) {
	          return sides === 1 ? 1 - jStat.studentt.cdf(Math.abs(this.tscore(value)), this.cols() - 1) : jStat.studentt.cdf(-Math.abs(this.tscore(value)), this.cols() - 1) * 2;
	        }
	      }); // F Statistics

	      jStat.extend({
	        // Paramter list is as follows:
	        // (array1, array2, array3, ...)
	        // or it is an array of arrays
	        // array of arrays conversion
	        anovafscore: function anovafscore() {
	          var args = slice.call(arguments),
	              expVar,
	              sample,
	              sampMean,
	              sampSampMean,
	              tmpargs,
	              unexpVar,
	              i,
	              j;

	          if (args.length === 1) {
	            tmpargs = new Array(args[0].length);

	            for (i = 0; i < args[0].length; i++) {
	              tmpargs[i] = args[0][i];
	            }

	            args = tmpargs;
	          } // Builds sample array


	          sample = new Array();

	          for (i = 0; i < args.length; i++) {
	            sample = sample.concat(args[i]);
	          }

	          sampMean = jStat.mean(sample); // Computes the explained variance

	          expVar = 0;

	          for (i = 0; i < args.length; i++) {
	            expVar = expVar + args[i].length * Math.pow(jStat.mean(args[i]) - sampMean, 2);
	          }

	          expVar /= args.length - 1; // Computes unexplained variance

	          unexpVar = 0;

	          for (i = 0; i < args.length; i++) {
	            sampSampMean = jStat.mean(args[i]);

	            for (j = 0; j < args[i].length; j++) {
	              unexpVar += Math.pow(args[i][j] - sampSampMean, 2);
	            }
	          }

	          unexpVar /= sample.length - args.length;
	          return expVar / unexpVar;
	        },
	        // 2 different paramter setups
	        // (array1, array2, array3, ...)
	        // (anovafscore, df1, df2)
	        anovaftest: function anovaftest() {
	          var args = slice.call(arguments),
	              df1,
	              df2,
	              n,
	              i;

	          if (isNumber(args[0])) {
	            return 1 - jStat.centralF.cdf(args[0], args[1], args[2]);
	          }

	          var anovafscore = jStat.anovafscore(args);
	          df1 = args.length - 1;
	          n = 0;

	          for (i = 0; i < args.length; i++) {
	            n = n + args[i].length;
	          }

	          df2 = n - df1 - 1;
	          return 1 - jStat.centralF.cdf(anovafscore, df1, df2);
	        },
	        ftest: function ftest(fscore, df1, df2) {
	          return 1 - jStat.centralF.cdf(fscore, df1, df2);
	        }
	      });
	      jStat.extend(jStat.fn, {
	        anovafscore: function anovafscore() {
	          return jStat.anovafscore(this.toArray());
	        },
	        anovaftes: function anovaftes() {
	          var n = 0;
	          var i;

	          for (i = 0; i < this.length; i++) {
	            n = n + this[i].length;
	          }

	          return jStat.ftest(this.anovafscore(), this.length - 1, n - this.length);
	        }
	      }); // Tukey's range test

	      jStat.extend({
	        // 2 parameter lists
	        // (mean1, mean2, n1, n2, sd)
	        // (array1, array2, sd)
	        qscore: function qscore() {
	          var args = slice.call(arguments);
	          var mean1, mean2, n1, n2, sd;

	          if (isNumber(args[0])) {
	            mean1 = args[0];
	            mean2 = args[1];
	            n1 = args[2];
	            n2 = args[3];
	            sd = args[4];
	          } else {
	            mean1 = jStat.mean(args[0]);
	            mean2 = jStat.mean(args[1]);
	            n1 = args[0].length;
	            n2 = args[1].length;
	            sd = args[2];
	          }

	          return Math.abs(mean1 - mean2) / (sd * Math.sqrt((1 / n1 + 1 / n2) / 2));
	        },
	        // 3 different parameter lists:
	        // (qscore, n, k)
	        // (mean1, mean2, n1, n2, sd, n, k)
	        // (array1, array2, sd, n, k)
	        qtest: function qtest() {
	          var args = slice.call(arguments);
	          var qscore;

	          if (args.length === 3) {
	            qscore = args[0];
	            args = args.slice(1);
	          } else if (args.length === 7) {
	            qscore = jStat.qscore(args[0], args[1], args[2], args[3], args[4]);
	            args = args.slice(5);
	          } else {
	            qscore = jStat.qscore(args[0], args[1], args[2]);
	            args = args.slice(3);
	          }

	          var n = args[0];
	          var k = args[1];
	          return 1 - jStat.tukey.cdf(qscore, k, n - k);
	        },
	        tukeyhsd: function tukeyhsd(arrays) {
	          var sd = jStat.pooledstdev(arrays);
	          var means = arrays.map(function (arr) {
	            return jStat.mean(arr);
	          });
	          var n = arrays.reduce(function (n, arr) {
	            return n + arr.length;
	          }, 0);
	          var results = [];

	          for (var i = 0; i < arrays.length; ++i) {
	            for (var j = i + 1; j < arrays.length; ++j) {
	              var p = jStat.qtest(means[i], means[j], arrays[i].length, arrays[j].length, sd, n, arrays.length);
	              results.push([[i, j], p]);
	            }
	          }

	          return results;
	        }
	      }); // Error Bounds

	      jStat.extend({
	        // 2 different parameter setups
	        // (value, alpha, sd, n)
	        // (value, alpha, array)
	        normalci: function normalci() {
	          var args = slice.call(arguments),
	              ans = new Array(2),
	              change;

	          if (args.length === 4) {
	            change = Math.abs(jStat.normal.inv(args[1] / 2, 0, 1) * args[2] / Math.sqrt(args[3]));
	          } else {
	            change = Math.abs(jStat.normal.inv(args[1] / 2, 0, 1) * jStat.stdev(args[2]) / Math.sqrt(args[2].length));
	          }

	          ans[0] = args[0] - change;
	          ans[1] = args[0] + change;
	          return ans;
	        },
	        // 2 different parameter setups
	        // (value, alpha, sd, n)
	        // (value, alpha, array)
	        tci: function tci() {
	          var args = slice.call(arguments),
	              ans = new Array(2),
	              change;

	          if (args.length === 4) {
	            change = Math.abs(jStat.studentt.inv(args[1] / 2, args[3] - 1) * args[2] / Math.sqrt(args[3]));
	          } else {
	            change = Math.abs(jStat.studentt.inv(args[1] / 2, args[2].length - 1) * jStat.stdev(args[2], true) / Math.sqrt(args[2].length));
	          }

	          ans[0] = args[0] - change;
	          ans[1] = args[0] + change;
	          return ans;
	        },
	        significant: function significant(pvalue, alpha) {
	          return pvalue < alpha;
	        }
	      });
	      jStat.extend(jStat.fn, {
	        normalci: function normalci(value, alpha) {
	          return jStat.normalci(value, alpha, this.toArray());
	        },
	        tci: function tci(value, alpha) {
	          return jStat.tci(value, alpha, this.toArray());
	        }
	      }); // internal method for calculating the z-score for a difference of proportions test

	      function differenceOfProportions(p1, n1, p2, n2) {
	        if (p1 > 1 || p2 > 1 || p1 <= 0 || p2 <= 0) {
	          throw new Error("Proportions should be greater than 0 and less than 1");
	        }

	        var pooled = (p1 * n1 + p2 * n2) / (n1 + n2);
	        var se = Math.sqrt(pooled * (1 - pooled) * (1 / n1 + 1 / n2));
	        return (p1 - p2) / se;
	      } // Difference of Proportions


	      jStat.extend(jStat.fn, {
	        oneSidedDifferenceOfProportions: function oneSidedDifferenceOfProportions(p1, n1, p2, n2) {
	          var z = differenceOfProportions(p1, n1, p2, n2);
	          return jStat.ztest(z, 1);
	        },
	        twoSidedDifferenceOfProportions: function twoSidedDifferenceOfProportions(p1, n1, p2, n2) {
	          var z = differenceOfProportions(p1, n1, p2, n2);
	          return jStat.ztest(z, 2);
	        }
	      });
	    })(jStat, Math);

	    jStat.models = function () {
	      function sub_regress(exog) {
	        var var_count = exog[0].length;
	        var modelList = jStat.arange(var_count).map(function (endog_index) {
	          var exog_index = jStat.arange(var_count).filter(function (i) {
	            return i !== endog_index;
	          });
	          return ols(jStat.col(exog, endog_index).map(function (x) {
	            return x[0];
	          }), jStat.col(exog, exog_index));
	        });
	        return modelList;
	      } // do OLS model regress
	      // exog have include const columns ,it will not generate it .In fact, exog is
	      // "design matrix" look at
	      //https://en.wikipedia.org/wiki/Design_matrix


	      function ols(endog, exog) {
	        var nobs = endog.length;
	        var df_model = exog[0].length - 1;
	        var df_resid = nobs - df_model - 1;
	        var coef = jStat.lstsq(exog, endog);
	        var predict = jStat.multiply(exog, coef.map(function (x) {
	          return [x];
	        })).map(function (p) {
	          return p[0];
	        });
	        var resid = jStat.subtract(endog, predict);
	        var ybar = jStat.mean(endog); // constant cause problem
	        // var SST = jStat.sum(endog.map(function(y) {
	        //   return Math.pow(y-ybar,2);
	        // }));

	        var SSE = jStat.sum(predict.map(function (f) {
	          return Math.pow(f - ybar, 2);
	        }));
	        var SSR = jStat.sum(endog.map(function (y, i) {
	          return Math.pow(y - predict[i], 2);
	        }));
	        var SST = SSE + SSR;
	        var R2 = SSE / SST;
	        return {
	          exog: exog,
	          endog: endog,
	          nobs: nobs,
	          df_model: df_model,
	          df_resid: df_resid,
	          coef: coef,
	          predict: predict,
	          resid: resid,
	          ybar: ybar,
	          SST: SST,
	          SSE: SSE,
	          SSR: SSR,
	          R2: R2
	        };
	      } // H0: b_I=0
	      // H1: b_I!=0


	      function t_test(model) {
	        var subModelList = sub_regress(model.exog); //var sigmaHat=jStat.stdev(model.resid);

	        var sigmaHat = Math.sqrt(model.SSR / model.df_resid);
	        var seBetaHat = subModelList.map(function (mod) {
	          var SST = mod.SST;
	          var R2 = mod.R2;
	          return sigmaHat / Math.sqrt(SST * (1 - R2));
	        });
	        var tStatistic = model.coef.map(function (coef, i) {
	          return (coef - 0) / seBetaHat[i];
	        });
	        var pValue = tStatistic.map(function (t) {
	          var leftppf = jStat.studentt.cdf(t, model.df_resid);
	          return (leftppf > 0.5 ? 1 - leftppf : leftppf) * 2;
	        });
	        var c = jStat.studentt.inv(0.975, model.df_resid);
	        var interval95 = model.coef.map(function (coef, i) {
	          var d = c * seBetaHat[i];
	          return [coef - d, coef + d];
	        });
	        return {
	          se: seBetaHat,
	          t: tStatistic,
	          p: pValue,
	          sigmaHat: sigmaHat,
	          interval95: interval95
	        };
	      }

	      function F_test(model) {
	        var F_statistic = model.R2 / model.df_model / ((1 - model.R2) / model.df_resid);

	        var fcdf = function fcdf(x, n1, n2) {
	          return jStat.beta.cdf(x / (n2 / n1 + x), n1 / 2, n2 / 2);
	        };

	        var pvalue = 1 - fcdf(F_statistic, model.df_model, model.df_resid);
	        return {
	          F_statistic: F_statistic,
	          pvalue: pvalue
	        };
	      }

	      function ols_wrap(endog, exog) {
	        var model = ols(endog, exog);
	        var ttest = t_test(model);
	        var ftest = F_test(model); // Provide the Wherry / Ezekiel / McNemar / Cohen Adjusted R^2
	        // Which matches the 'adjusted R^2' provided by R's lm package

	        var adjust_R2 = 1 - (1 - model.R2) * ((model.nobs - 1) / model.df_resid);
	        model.t = ttest;
	        model.f = ftest;
	        model.adjust_R2 = adjust_R2;
	        return model;
	      }

	      return {
	        ols: ols_wrap
	      };
	    }(); //To regress, simply build X matrix
	    //(append column of 1's) using
	    //buildxmatrix and build the Y
	    //matrix using buildymatrix
	    //(simply the transpose)
	    //and run regress.
	    //Regressions


	    jStat.extend({
	      buildxmatrix: function buildxmatrix() {
	        //Parameters will be passed in as such
	        //(array1,array2,array3,...)
	        //as (x1,x2,x3,...)
	        //needs to be (1,x1,x2,x3,...)
	        var matrixRows = new Array(arguments.length);

	        for (var i = 0; i < arguments.length; i++) {
	          var array = [1];
	          matrixRows[i] = array.concat(arguments[i]);
	        }

	        return jStat(matrixRows);
	      },
	      builddxmatrix: function builddxmatrix() {
	        //Paramters will be passed in as such
	        //([array1,array2,...]
	        var matrixRows = new Array(arguments[0].length);

	        for (var i = 0; i < arguments[0].length; i++) {
	          var array = [1];
	          matrixRows[i] = array.concat(arguments[0][i]);
	        }

	        return jStat(matrixRows);
	      },
	      buildjxmatrix: function buildjxmatrix(jMat) {
	        //Builds from jStat Matrix
	        var pass = new Array(jMat.length);

	        for (var i = 0; i < jMat.length; i++) {
	          pass[i] = jMat[i];
	        }

	        return jStat.builddxmatrix(pass);
	      },
	      buildymatrix: function buildymatrix(array) {
	        return jStat(array).transpose();
	      },
	      buildjymatrix: function buildjymatrix(jMat) {
	        return jMat.transpose();
	      },
	      matrixmult: function matrixmult(A, B) {
	        var i, j, k, result, sum;

	        if (A.cols() == B.rows()) {
	          if (B.rows() > 1) {
	            result = [];

	            for (i = 0; i < A.rows(); i++) {
	              result[i] = [];

	              for (j = 0; j < B.cols(); j++) {
	                sum = 0;

	                for (k = 0; k < A.cols(); k++) {
	                  sum += A.toArray()[i][k] * B.toArray()[k][j];
	                }

	                result[i][j] = sum;
	              }
	            }

	            return jStat(result);
	          }

	          result = [];

	          for (i = 0; i < A.rows(); i++) {
	            result[i] = [];

	            for (j = 0; j < B.cols(); j++) {
	              sum = 0;

	              for (k = 0; k < A.cols(); k++) {
	                sum += A.toArray()[i][k] * B.toArray()[j];
	              }

	              result[i][j] = sum;
	            }
	          }

	          return jStat(result);
	        }
	      },
	      //regress and regresst to be fixed
	      regress: function regress(jMatX, jMatY) {
	        //print("regressin!");
	        //print(jMatX.toArray());
	        var innerinv = jStat.xtranspxinv(jMatX); //print(innerinv);

	        var xtransp = jMatX.transpose();
	        var next = jStat.matrixmult(jStat(innerinv), xtransp);
	        return jStat.matrixmult(next, jMatY);
	      },
	      regresst: function regresst(jMatX, jMatY, sides) {
	        var beta = jStat.regress(jMatX, jMatY);
	        var compile = {};
	        compile.anova = {};
	        var jMatYBar = jStat.jMatYBar(jMatX, beta);
	        compile.yBar = jMatYBar;
	        var yAverage = jMatY.mean();
	        compile.anova.residuals = jStat.residuals(jMatY, jMatYBar);
	        compile.anova.ssr = jStat.ssr(jMatYBar, yAverage);
	        compile.anova.msr = compile.anova.ssr / (jMatX[0].length - 1);
	        compile.anova.sse = jStat.sse(jMatY, jMatYBar);
	        compile.anova.mse = compile.anova.sse / (jMatY.length - (jMatX[0].length - 1) - 1);
	        compile.anova.sst = jStat.sst(jMatY, yAverage);
	        compile.anova.mst = compile.anova.sst / (jMatY.length - 1);
	        compile.anova.r2 = 1 - compile.anova.sse / compile.anova.sst;
	        if (compile.anova.r2 < 0) compile.anova.r2 = 0;
	        compile.anova.fratio = compile.anova.msr / compile.anova.mse;
	        compile.anova.pvalue = jStat.anovaftest(compile.anova.fratio, jMatX[0].length - 1, jMatY.length - (jMatX[0].length - 1) - 1);
	        compile.anova.rmse = Math.sqrt(compile.anova.mse);
	        compile.anova.r2adj = 1 - compile.anova.mse / compile.anova.mst;
	        if (compile.anova.r2adj < 0) compile.anova.r2adj = 0;
	        compile.stats = new Array(jMatX[0].length);
	        var covar = jStat.xtranspxinv(jMatX);
	        var sds, ts, ps;

	        for (var i = 0; i < beta.length; i++) {
	          sds = Math.sqrt(compile.anova.mse * Math.abs(covar[i][i]));
	          ts = Math.abs(beta[i] / sds);
	          ps = jStat.ttest(ts, jMatY.length - jMatX[0].length - 1, sides);
	          compile.stats[i] = [beta[i], sds, ts, ps];
	        }

	        compile.regress = beta;
	        return compile;
	      },
	      xtranspx: function xtranspx(jMatX) {
	        return jStat.matrixmult(jMatX.transpose(), jMatX);
	      },
	      xtranspxinv: function xtranspxinv(jMatX) {
	        var inner = jStat.matrixmult(jMatX.transpose(), jMatX);
	        var innerinv = jStat.inv(inner);
	        return innerinv;
	      },
	      jMatYBar: function jMatYBar(jMatX, beta) {
	        var yBar = jStat.matrixmult(jMatX, beta);
	        return new jStat(yBar);
	      },
	      residuals: function residuals(jMatY, jMatYBar) {
	        return jStat.matrixsubtract(jMatY, jMatYBar);
	      },
	      ssr: function ssr(jMatYBar, yAverage) {
	        var ssr = 0;

	        for (var i = 0; i < jMatYBar.length; i++) {
	          ssr += Math.pow(jMatYBar[i] - yAverage, 2);
	        }

	        return ssr;
	      },
	      sse: function sse(jMatY, jMatYBar) {
	        var sse = 0;

	        for (var i = 0; i < jMatY.length; i++) {
	          sse += Math.pow(jMatY[i] - jMatYBar[i], 2);
	        }

	        return sse;
	      },
	      sst: function sst(jMatY, yAverage) {
	        var sst = 0;

	        for (var i = 0; i < jMatY.length; i++) {
	          sst += Math.pow(jMatY[i] - yAverage, 2);
	        }

	        return sst;
	      },
	      matrixsubtract: function matrixsubtract(A, B) {
	        var ans = new Array(A.length);

	        for (var i = 0; i < A.length; i++) {
	          ans[i] = new Array(A[i].length);

	          for (var j = 0; j < A[i].length; j++) {
	            ans[i][j] = A[i][j] - B[i][j];
	          }
	        }

	        return jStat(ans);
	      }
	    }); // Make it compatible with previous version.

	    jStat.jStat = jStat;
	    return jStat;
	  });
	})(jstat);

	/*
	  SDTMath Static Class - Not intended for instantiation!

	  Variables:
	    H = hits
	    M = misses
	    FA = false alarms
	    CR = correct rejections
	    HR = hit rate
	    FAR = false alarm rate
	    ACC = accuracy
	    PPV = positive predictive value
	    FOMR = false omission rate (used FOMR to avoid keyword FOR!)
	    d = sensitivity (d' for equal variance, d_a for unequal variance)
	    c = response bias (c for equal variance, c_a for unequal variance)
	    s = standard deviation of signal distribution, with standard deviation of noise distribution = 1
	    muN = mean of noise distribution
	    muS = mean of signal distribution
	    l = lambda, threshold location, with l = 0 indicating no response bias
	    h = height of signal distribution

	  Equations (* = unequal variance):
	    HR = H / (H + M)
	    FAR = FA / (FA + CR)
	    ACC = (H + CR) / (H + M + FA + CR)
	    ACC = (HR + (1 - FAR)) / 2
	    PPV = H / (H + FA)
	    FOMR = M / (M + CR)

	    d' = Z^-1(HR) - Z^-1(FAR)
	    *d' = (2 / (s^2 + 1))^(1/2) * (s * Z^-1(HR) - Z^-1(FAR))

	    c = -(Z^-1(HR) + Z^-1(FAR))/2
	    *c = (2 / (s^2 + 1))^(1/2) * (s / s + 1) * -(Z^-1(HR) + Z^-1(FAR))

	    HR = Z(d'/2 - c)
	    *HR = Z(((s^2 + 1) / 2)^(1/2) * (d' / (s + 1) - c / s))

	    FAR = Z(-d'/2 - c)
	    *FAR = Z(((s^2 + 1) / 2)^(1/2) * -(d' / (s + 1) + c))

	    HR = Z(d' + Z^-1(FAR))
	    *HR = Z(((s^2 + 1) / 2)^(1/2) * d' + Z^-1(FAR) / s)

	    HR = Z(-2c - Z^-1(FAR))
	    *HR = Z(-((s^2 + 1) / 2)^(1/2) * ((s + 1) / s) * c - Z^-1(FAR))

	    muN = -d'/2
	    *muN = -((s^2 + 1) / 2)^(1/2) * (1 / (s + 1)) * d'

	    d' = -2 * muN
	    *d' = -(2 / (s^2 + 1))^(1/2) * (s + 1) * muN

	    muS = d'/2
	    *muS = ((s^2 + 1) / 2)^(1/2) * (s / (s + 1)) * d'

	    d' = 2 * muS
	    *d' = (2 / (s^2 + 1))^(1/2) * ((s + 1) / s) * muS

	    l = c
	    l = ((s^2 + 1) / 2)^(1/2) * c

	    c = l
	    c = (2 / (s^2 + 1))^(1/2) * l

	    h = 1 / (s * (2 * pi)^(1/2))
	    s = 1 / (h * (2 * pi)^(1/2))
	*/

	var SDTMath = /*#__PURE__*/function () {
	  function SDTMath() {
	    _classCallCheck(this, SDTMath);
	  }

	  _createClass(SDTMath, null, [{
	    key: "hM2Hr",
	    value: function hM2Hr(h, m) {
	      if (h === 0 && m === 0) {
	        return 0;
	      }

	      return h / (h + m);
	    }
	  }, {
	    key: "faCr2Far",
	    value: function faCr2Far(fa, cr) {
	      if (fa === 0 && cr === 0) {
	        return 0;
	      }

	      return fa / (fa + cr);
	    }
	  }, {
	    key: "hMFaCr2Acc",
	    value: function hMFaCr2Acc(h, m, fa, cr) {
	      if (h === 0 && m === 0 && fa === 0 && cr === 0) {
	        return 0;
	      }

	      return (h + cr) / (h + m + fa + cr);
	    }
	  }, {
	    key: "hrFar2Acc",
	    value: function hrFar2Acc(hr, far) {
	      return (hr + (1 - far)) / 2;
	    }
	  }, {
	    key: "hFa2Ppv",
	    value: function hFa2Ppv(h, fa) {
	      if (h === 0 && fa === 0) {
	        return 0;
	      }

	      return h / (h + fa);
	    }
	  }, {
	    key: "mCr2Fomr",
	    value: function mCr2Fomr(m, cr) {
	      if (m === 0 && cr === 0) {
	        return 0;
	      }

	      return m / (m + cr);
	    }
	  }, {
	    key: "hrFar2D",
	    value: function hrFar2D(hr, far) {
	      var s = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 1;
	      if (s === 1) return jstat.exports.normal.inv(hr, 0, 1) - jstat.exports.normal.inv(far, 0, 1);
	      return Math.sqrt(2 / (s * s + 1)) * (s * jstat.exports.normal.inv(hr, 0, 1) - jstat.exports.normal.inv(far, 0, 1));
	    }
	  }, {
	    key: "hrFar2C",
	    value: function hrFar2C(hr, far) {
	      var s = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 1;
	      if (s === 1) return -(jstat.exports.normal.inv(hr, 0, 1) + jstat.exports.normal.inv(far, 0, 1)) / 2;
	      return Math.sqrt(2 / (s * s + 1)) * (s / (s + 1)) * -(jstat.exports.normal.inv(hr, 0, 1) + jstat.exports.normal.inv(far, 0, 1));
	    }
	  }, {
	    key: "dC2Hr",
	    value: function dC2Hr(d, c) {
	      var s = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 1;
	      if (s === 1) return jstat.exports.normal.cdf(d / 2 - c, 0, 1);
	      return jstat.exports.normal.cdf(Math.sqrt((s * s + 1) / 2) * (d / (1 + s) - c / s), 0, 1);
	    }
	  }, {
	    key: "dC2Far",
	    value: function dC2Far(d, c) {
	      var s = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 1;
	      if (s === 1) return jstat.exports.normal.cdf(-(d / 2 + c), 0, 1);
	      return jstat.exports.normal.cdf(Math.sqrt((s * s + 1) / 2) * -(d / (1 + s) + c), 0, 1);
	    }
	  }, {
	    key: "dFar2Hr",
	    value: function dFar2Hr(d, far) {
	      var s = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 1;
	      if (s === 1) return jstat.exports.normal.cdf(d + jstat.exports.normal.inv(far, 0, 1), 0, 1);
	      return jstat.exports.normal.cdf((Math.sqrt((s * s + 1) / 2) * d + jstat.exports.normal.inv(far, 0, 1)) / s, 0, 1);
	    }
	  }, {
	    key: "cFar2Hr",
	    value: function cFar2Hr(c, far) {
	      var s = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 1;
	      if (s === 1) return jstat.exports.normal.cdf(-(2 * c) - jstat.exports.normal.inv(far, 0, 1), 0, 1);
	      return jstat.exports.normal.cdf(-Math.sqrt((s * s + 1) / 2) * ((s + 1) / s) * c - jstat.exports.normal.inv(far, 0, 1), 0, 1);
	    }
	  }, {
	    key: "d2MuN",
	    value: function d2MuN(d) {
	      var s = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 1;
	      if (s === 1) return -d / 2;
	      return -Math.sqrt((s * s + 1) / 2) * (1 / (s + 1)) * d;
	    }
	  }, {
	    key: "muN2D",
	    value: function muN2D(muN) {
	      var s = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 1;
	      if (s === 1) return -2 * muN;
	      return -Math.sqrt(2 / (s * s + 1)) * (s + 1) * muN;
	    }
	  }, {
	    key: "d2MuS",
	    value: function d2MuS(d) {
	      var s = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 1;
	      if (s === 1) return d / 2;
	      return Math.sqrt((s * s + 1) / 2) * (s / (s + 1)) * d;
	    }
	  }, {
	    key: "muS2D",
	    value: function muS2D(muS) {
	      var s = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 1;
	      if (s === 1) return 2 * muS;
	      return Math.sqrt(2 / (s * s + 1)) * ((s + 1) / s) * muS;
	    }
	  }, {
	    key: "c2L",
	    value: function c2L(c) {
	      var s = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 1;
	      if (s === 1) return c;
	      return Math.sqrt((s * s + 1) / 2) * c;
	    }
	  }, {
	    key: "l2C",
	    value: function l2C(l) {
	      var s = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 1;
	      if (s === 1) return l;
	      return Math.sqrt(2 / (s * s + 1)) * l;
	    }
	  }, {
	    key: "s2H",
	    value: function s2H() {
	      var s = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 1;
	      return 1 / (s * Math.sqrt(2 * Math.PI));
	    }
	  }, {
	    key: "h2S",
	    value: function h2S(h) {
	      return 1 / (h * Math.sqrt(2 * Math.PI));
	    }
	  }, {
	    key: "hr2Zhr",
	    value: function hr2Zhr(hr) {
	      return jstat.exports.normal.inv(hr, 0, 1);
	    }
	  }, {
	    key: "far2Zfar",
	    value: function far2Zfar(far) {
	      return jstat.exports.normal.inv(far, 0, 1);
	    }
	  }, {
	    key: "zhr2Hr",
	    value: function zhr2Hr(zhr) {
	      return jstat.exports.normal.cdf(zhr, 0, 1);
	    }
	  }, {
	    key: "zfar2Far",
	    value: function zfar2Far(zfar) {
	      return jstat.exports.normal.cdf(zfar, 0, 1);
	    }
	  }]);

	  return SDTMath;
	}();

	var _templateObject$9, _templateObject2$8;
	/*
	  ROCSpace element
	  <roc-space>

	  Attributes:
	    FAR; HR;
	    d'; C; zFAR; zHR

	    draggable: yes/no

	    scale: FAR/HR; zFAR/zHR; d'/C
	    grid: FAR/HR; zFAR/zHR; d'/C
	    isos: d'; C; FAR; HR

	  Styles:
	    ??
	*/

	var ROCSpace = /*#__PURE__*/function (_SDTElement) {
	  _inherits(ROCSpace, _SDTElement);

	  var _super = _createSuper(ROCSpace);

	  function ROCSpace() {
	    var _this;

	    _classCallCheck(this, ROCSpace);

	    _this = _super.call(this);
	    _this.firstUpdate = true;
	    _this.drag = false;
	    _this.sdt = false;
	    _this.contours = ['sensitivity', 'bias', 'accuracy'];
	    _this.contour = undefined;
	    _this.points = ['all', 'first', 'rest', 'none'];
	    _this.point = 'all';
	    _this.isoDs = ['all', 'first', 'rest', 'none'];
	    _this.isoD = 'first';
	    _this.isoCs = ['all', 'first', 'rest', 'none'];
	    _this.isoC = 'first';
	    _this.zRoc = false;
	    _this.far = 0.25;
	    _this.hr = 0.75;
	    _this.s = 1;
	    _this.label = '';
	    _this.locations = [{
	      name: 'default',
	      far: _this.far,
	      hr: _this.hr,
	      s: _this.s,
	      label: ''
	    }];
	    _this.pointArray = [];
	    _this.isoDArray = [];
	    _this.isoCArray = [];
	    _this.width = NaN;
	    _this.height = NaN;
	    _this.rem = NaN;

	    _this.alignState();

	    return _this;
	  }

	  _createClass(ROCSpace, [{
	    key: "alignState",
	    value: function alignState() {
	      var _this2 = this;

	      this.locations[0].hr = this.hr;
	      this.locations[0].far = this.far;
	      this.locations[0].s = this.s;
	      this.locations[0].label = this.label;
	      this.d = SDTMath.hrFar2D(this.hr, this.far, this.s);
	      this.c = SDTMath.hrFar2C(this.hr, this.far, this.s);
	      this.pointArray = [];
	      this.isoDArray = [];
	      this.isoCArray = [];
	      this.locations.forEach(function (item, index) {
	        item.d = SDTMath.hrFar2D(item.hr, item.far, item.s);
	        item.c = SDTMath.hrFar2C(item.hr, item.far, item.s);

	        if (index === 0 && (_this2.point === 'first' || _this2.point === 'all')) {
	          _this2.pointArray.push(item);
	        } else if (index > 0 && (_this2.point === 'rest' || _this2.point === 'all')) {
	          _this2.pointArray.push(item);
	        }

	        if (index === 0 && (_this2.isoD === 'first' || _this2.isoD === 'all')) {
	          _this2.isoDArray.push(item);
	        } else if (index > 0 && (_this2.isoD === 'rest' || _this2.isoD === 'all')) {
	          _this2.isoDArray.push(item);
	        }

	        if (index === 0 && (_this2.isoC === 'first' || _this2.isoC === 'all')) {
	          _this2.isoCArray.push(item);
	        } else if (index > 0 && (_this2.isoC === 'rest' || _this2.isoC === 'all')) {
	          _this2.isoCArray.push(item);
	        }
	      });
	    }
	  }, {
	    key: "set",
	    value: function set(hr, far) {
	      var name = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 'default';
	      var label = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : '';
	      var s = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : 1;

	      if (name === 'default') {
	        this.hr = hr;
	        this.far = far;
	        this.s = s;
	        this.label = label;
	      }

	      var location = this.locations.find(function (item) {
	        return item.name === name;
	      });

	      if (location === undefined) {
	        this.locations.push({
	          name: name,
	          far: far,
	          hr: hr,
	          s: s,
	          label: label
	        });
	      } else {
	        location.hr = hr;
	        location.far = far;
	        location.s = s;
	        location.label = label;
	      }

	      this.requestUpdate();
	    }
	  }, {
	    key: "setWithSDT",
	    value: function setWithSDT(d, c) {
	      var name = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 'default';
	      var label = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : '';
	      var s = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : 1;

	      if (name === 'default') {
	        this.hr = SDTMath.dC2Hr(d, c, s);
	        this.far = SDTMath.dC2Far(d, c, s);
	        this.s = s;
	        this.label = label;
	      }

	      var location = this.locations.find(function (item) {
	        return item.name === name;
	      });

	      if (location === undefined) {
	        this.locations.push({
	          name: name,
	          far: SDTMath.dC2Far(d, c, s),
	          hr: SDTMath.dC2Hr(d, c, s),
	          s: s,
	          label: label
	        });
	      } else {
	        location.hr = SDTMath.dC2Hr(d, c, s);
	        location.far = SDTMath.dC2Far(d, c, s);
	        location.s = s;
	        location.label = label;
	      }

	      this.sdt = true;
	      this.requestUpdate();
	    }
	  }, {
	    key: "render",
	    value: function render() {
	      // eslint-disable-line class-methods-use-this
	      return $(_templateObject$9 || (_templateObject$9 = _taggedTemplateLiteral(["\n      ", "\n    "])), SDTElement.svgFilters);
	    }
	  }, {
	    key: "getDimensions",
	    value: function getDimensions() {
	      this.width = parseFloat(this.getComputedStyleValue('width'), 10);
	      this.height = parseFloat(this.getComputedStyleValue('height'), 10);
	      this.rem = parseFloat(getComputedStyle(document.documentElement).getPropertyValue('font-size'), 10); // console.log(`roc-space: width = ${this.width}, height = ${this.height}, rem = ${this.rem}`);
	    }
	  }, {
	    key: "connectedCallback",
	    value: function connectedCallback() {
	      _get(_getPrototypeOf(ROCSpace.prototype), "connectedCallback", this).call(this);

	      window.addEventListener('resize', this.getDimensions.bind(this));
	    }
	  }, {
	    key: "disconnectedCallback",
	    value: function disconnectedCallback() {
	      window.removeEventListener('resize', this.getDimensions.bind(this));

	      _get(_getPrototypeOf(ROCSpace.prototype), "disconnectedCallback", this).call(this);
	    }
	  }, {
	    key: "firstUpdated",
	    value: function firstUpdated(changedProperties) {
	      _get(_getPrototypeOf(ROCSpace.prototype), "firstUpdated", this).call(this, changedProperties); // Get the width and height after initial render/update has occurred
	      // HACK Edge: Edge doesn't have width/height until after a 0ms timeout


	      window.setTimeout(this.getDimensions.bind(this), 0);
	    }
	  }, {
	    key: "update",
	    value: function update(changedProperties) {
	      var _this3 = this;

	      _get(_getPrototypeOf(ROCSpace.prototype), "update", this).call(this, changedProperties);

	      this.alignState(); // Bail out if we can't get the width/height/rem

	      if (Number.isNaN(this.width) || Number.isNaN(this.height) || Number.isNaN(this.rem)) {
	        return;
	      }

	      var elementWidth = this.width;
	      var elementHeight = this.height;
	      var elementSize = Math.min(elementWidth, elementHeight);
	      var margin = {
	        top: 2 * this.rem,
	        bottom: 3 * this.rem,
	        left: 3 * this.rem,
	        right: 2 * this.rem
	      };
	      var height = elementSize - (margin.top + margin.bottom);
	      var width = elementSize - (margin.left + margin.right);
	      var transitionDuration = parseInt(this.getComputedStyleValue('---transition-duration'), 10); // X Scale

	      var xScale = linear().domain(this.zRoc ? [-3, 3] : [0, 1]) // zFAR or FAR
	      .range([0, width]);
	      this.xScale = xScale; // Y Scale

	      var yScale = linear().domain(this.zRoc ? [3, -3] : [1, 0]) // zHR or HR
	      .range([0, height]);
	      this.yScale = yScale; // Drag behavior

	      var drag$1 = drag().subject(function (event, datum) {
	        return {
	          x: _this3.xScale(_this3.zRoc ? SDTMath.far2Zfar(datum.far) : datum.far),
	          y: _this3.yScale(_this3.zRoc ? SDTMath.hr2Zhr(datum.hr) : datum.hr)
	        };
	      }).on('start', function (event) {
	        var element = event.currentTarget;
	        select(element).classed('dragging', true);
	      }).on('drag', function (event, datum) {
	        _this3.drag = true;
	        var far = _this3.zRoc ? SDTMath.zfar2Far(_this3.xScale.invert(event.x)) : _this3.xScale.invert(event.x);
	        var hr = _this3.zRoc ? SDTMath.zhr2Hr(_this3.yScale.invert(event.y)) : _this3.yScale.invert(event.y); // Clamp FAR and HR to ROC Space

	        datum.far = far < 0.001 ? 0.001 : far > 0.999 ? 0.999 : far;
	        datum.hr = hr <= 0.001 ? 0.001 : hr >= 0.999 ? 0.999 : hr; // console.log(`roc-space.drag: far = ${datum.far}, hr = ${datum.hr}`);

	        if (datum.name === 'default') {
	          _this3.far = datum.far;
	          _this3.hr = datum.hr;
	        }

	        _this3.alignState();

	        _this3.requestUpdate();

	        _this3.dispatchEvent(new CustomEvent('roc-point-change', {
	          detail: {
	            name: datum.name,
	            far: datum.far,
	            hr: datum.hr,
	            d: datum.d,
	            c: datum.c,
	            s: datum.s,
	            label: datum.label
	          },
	          bubbles: true
	        }));
	      }).on('end', function (event) {
	        var element = event.currentTarget;
	        select(element).classed('dragging', false);
	      }); // Line for FAR/HR Space

	      var line$1 = line().x(function (datum) {
	        return xScale(_this3.zRoc ? SDTMath.far2Zfar(datum.far) : datum.far);
	      }).y(function (datum) {
	        return yScale(_this3.zRoc ? SDTMath.hr2Zhr(datum.hr) : datum.hr);
	      }); // Svg
	      //  DATA-JOIN

	      var svgUpdate = select(this.renderRoot).selectAll('.main').data([{
	        width: this.width,
	        height: this.height,
	        rem: this.rem
	      }]); //  ENTER

	      var svgEnter = svgUpdate.enter().append('svg').classed('main', true); //  MERGE

	      var svgMerge = svgEnter.merge(svgUpdate).attr('viewBox', "0 0 ".concat(elementSize, " ").concat(elementSize)); // Plot
	      //  ENTER

	      var plotEnter = svgEnter.append('g').classed('plot', true); //  MERGE

	      var plotMerge = svgMerge.select('.plot').attr('transform', "translate(".concat(margin.left, ", ").concat(margin.top, ")")); // Clippath
	      //  ENTER

	      plotEnter.append('clipPath').attr('id', 'clip-roc-space').append('rect'); //  MERGE

	      plotMerge.select('clipPath rect').attr('height', height + 1).attr('width', width + 1); // Underlayer
	      //  ENTER

	      var underlayerEnter = plotEnter.append('g').classed('underlayer', true); // MERGE

	      var underlayerMerge = plotMerge.select('.underlayer'); // Background
	      //  ENTER

	      underlayerEnter.append('rect').classed('background', true); //  MERGE

	      underlayerMerge.select('.background').attr('height', height).attr('width', width); // Contour Plotting
	      //  Handles: Bias, Sensitivity, & Accuracy

	      if (this.firstUpdate || changedProperties.has('contour') || changedProperties.has('zRoc') || changedProperties.has('width') || changedProperties.has('height') || changedProperties.has('rem') || changedProperties.has('s')) {
	        if (this.contour !== undefined) {
	          // Contour Plot
	          var n = 100; // Resolution

	          var contourValues = [];

	          for (var j = 0.5, k = 0; j < n; j += 1) {
	            for (var i = 0.5; i < n; i += 1, k += 1) {
	              var hr = this.zRoc ? SDTMath.zhr2Hr(i / n * 6 - 3) : i / n;
	              var far = this.zRoc ? SDTMath.zfar2Far((1 - j / n) * 6 - 3) : 1 - j / n;
	              contourValues[k] = this.contour === 'bias' ? SDTMath.hrFar2C(hr, far, this.s) : this.contour === 'sensitivity' ? SDTMath.hrFar2D(hr, far, this.s) : this.contour === 'accuracy' ? SDTMath.hrFar2Acc(hr, far) : null;
	            }
	          }

	          var contourThresholds = this.contour === 'bias' ? range(-3, 3, 0.25) : this.contour === 'sensitivity' ? range(-6, 6, 0.5) : this.contour === 'accuracy' ? range(0, 1, 0.05) : null;
	          var contours$1 = contours().size([n, n]).thresholds(contourThresholds);
	          var contourColorStart = this.getComputedStyleValue(this.contour === 'bias' ? '---color-element-background' : this.contour === 'sensitivity' ? '---color-d' : this.contour === 'accuracy' ? '---color-acc-dark' : null);
	          var contourColorEnd = this.getComputedStyleValue(this.contour === 'bias' ? '---color-c' : this.contour === 'sensitivity' ? '---color-element-background' : this.contour === 'accuracy' ? '---color-element-background' : null);
	          var contourColor = linear().domain(extent(contourThresholds)).interpolate(function () {
	            return interpolateRgb(contourColorStart, contourColorEnd);
	          }); //  DATA-JOIN

	          var contourPlotUpdate = underlayerMerge.selectAll('.plot-contour').data([this.contour]); //  ENTER

	          var contourPlotEnter = contourPlotUpdate.enter().append('g').classed('plot-contour', true); //  MERGE

	          var contourPlotMerge = contourPlotEnter.merge(contourPlotUpdate); // Contour Plot Contours
	          //  DATA-JOIN

	          var contoursUpdate = contourPlotMerge.selectAll('.contour').data(contours$1(contourValues)); //  ENTER

	          var contoursEnter = contoursUpdate.enter().append('path').classed('contour', true); //  MERGE

	          contoursEnter.merge(contoursUpdate).transition().duration(transitionDuration * 2) // Extra long transition!
	          .ease(cubicOut).attr('d', index(identity$2().scale(width / n))) // ????
	          .attr('fill', function (datum) {
	            return contourColor(datum.value);
	          }); //  EXIT

	          contoursUpdate.exit().remove(); // Contour Title
	          //  DATA-JOIN

	          var contourTitleUpdate = underlayerMerge.selectAll('.title-contour').data([this.contour]); //  ENTER

	          var contourTitleEnter = contourTitleUpdate.enter().append('text').classed('title-contour', true).attr('text-anchor', 'middle'); //  MERGE

	          contourTitleEnter.merge(contourTitleUpdate).classed('math-var', this.contour === 'bias' || this.contour === 'sensitivity').attr('transform', this.contour === 'bias' ? "translate(".concat(width + 1.25 * this.rem, ", ").concat(this.rem, ")") : this.contour === 'sensitivity' ? "translate(".concat(width + 1.25 * this.rem, ", ").concat(this.rem, ")") : this.contour === 'accuracy' ? "translate(".concat(width + 1.125 * this.rem, ", ").concat(this.rem, ")") : null).text(this.contour === 'bias' ? 'c' : this.contour === 'sensitivity' ? 'd′' : this.contour === 'accuracy' ? 'Acc' : null); // Contour Legend

	          var l = 100;
	          var contourLegendValues = []; // new Array(4 * l);

	          for (var _i = 0.5, _k = 0; _i < l; _i += 1, _k += 4) {
	            contourLegendValues[_k] = this.contour === 'bias' ? -(_i / n * 6 - 3) : this.contour === 'sensitivity' ? _i / n * 12 - 6 : this.contour === 'accuracy' ? _i / n : null;
	            contourLegendValues[_k + 1] = contourLegendValues[_k];
	            contourLegendValues[_k + 2] = contourLegendValues[_k];
	            contourLegendValues[_k + 3] = contourLegendValues[_k];
	          }

	          var legendContours = contours().size([4, l]).thresholds(contourThresholds);
	          var legendScale = linear().domain(this.contour === 'bias' ? [3, -3] : this.contour === 'sensitivity' ? [6, -6] : this.contour === 'accuracy' ? [1, 0] : null).range([0, 10 * this.rem]); //  DATA-JOIN

	          var contourLegendUpdate = underlayerMerge.selectAll('.legend-contour').data([this.contour]); //  ENTER

	          var contourLegendEnter = contourLegendUpdate.enter().append('g').classed('legend-contour', true); //  MERGE

	          var contourLegendMerge = contourLegendEnter.merge(contourLegendUpdate).attr('transform', this.contour === 'bias' ? "translate(".concat(width + 1.25 * this.rem, ", ").concat(1.5 * this.rem, ")") : this.contour === 'sensitivity' ? "translate(".concat(width + 1.25 * this.rem, ", ").concat(1.5 * this.rem, ")") : this.contour === 'accuracy' ? "translate(".concat(width + 1.5 * this.rem, ", ").concat(1.5 * this.rem, ")") : null); //  EXIT

	          contourLegendUpdate.exit().remove(); // Contour Legend Axis
	          //  ENTER

	          contourLegendEnter.append('g').classed('axis-contour', true); //  MERGE

	          contourLegendMerge.select('.axis-contour').call(axisLeft(legendScale).ticks(7).tickSize(0)).attr('font-size', null).attr('font-family', null); // Contour Legend Contours
	          //  DATA-JOIN

	          var legendContoursUpdate = contourLegendMerge.selectAll('.contour').data(legendContours(contourLegendValues)); //  ENTER

	          var legendContoursEnter = legendContoursUpdate.enter().append('path').classed('contour', true); //  MERGE

	          legendContoursEnter.merge(legendContoursUpdate).attr('d', index(identity$2().scale(10 * this.rem / l))) // ????
	          .attr('fill', function (datum) {
	            return contourColor(datum.value);
	          }); //  EXIT

	          legendContoursUpdate.exit().remove();
	        } else {
	          // Contour Plot
	          //  DATA-JOIN
	          var _contourPlotUpdate = underlayerMerge.selectAll('.plot-contour').data([]); //  EXIT


	          _contourPlotUpdate.exit().remove(); // Contour Title
	          //  DATA-JOIN


	          var _contourTitleUpdate = underlayerMerge.selectAll('.title-contour').data([]); //  EXIT


	          _contourTitleUpdate.exit().remove(); // Contour Legend
	          //  DATA-JOIN


	          var _contourLegendUpdate = underlayerMerge.selectAll('.legend-contour').data([]); //  EXIT


	          _contourLegendUpdate.exit().remove();
	        }
	      } // X Axis
	      //  ENTER


	      underlayerEnter.append('g').classed('axis-x', true); //  MERGE

	      var axisXMerge = underlayerMerge.select('.axis-x').attr('transform', "translate(0, ".concat(height, ")"));
	      var axisXTransition = axisXMerge.transition().duration(transitionDuration * 2) // Extra long transition!
	      .ease(cubicOut).call(axisBottom(xScale)).attr('font-size', null).attr('font-family', null);
	      axisXTransition.selectAll('line, path').attr('stroke', null); // X Axis Title
	      //  ENTER

	      var titleXEnter = underlayerEnter.append('text').classed('title-x', true).attr('text-anchor', 'middle');
	      titleXEnter.append('tspan').classed('z math-var', true);
	      titleXEnter.append('tspan').classed('name', true); //  MERGE

	      var titleXMerge = underlayerMerge.select('.title-x').attr('transform', "translate(".concat(width / 2, ", ").concat(height + 2.25 * this.rem, ")"));
	      titleXMerge.select('tspan.z').text(this.zRoc ? 'z' : '');
	      titleXMerge.select('tspan.name').text(this.zRoc ? '(False Alarm Rate)' : 'False Alarm Rate'); // Y Axis
	      //  ENTER

	      underlayerEnter.append('g').classed('axis-y', true); // MERGE

	      var axisYTransition = underlayerMerge.select('.axis-y').transition().duration(transitionDuration * 2) // Extra long transition!
	      .ease(cubicOut).call(axisLeft(yScale)).attr('font-size', null).attr('font-family', null);
	      axisYTransition.selectAll('line, path').attr('stroke', null); // Y Axis Title
	      //  ENTER

	      var titleYEnter = underlayerEnter.append('text').classed('title-y', true).attr('text-anchor', 'middle');
	      titleYEnter.append('tspan').classed('z math-var', true);
	      titleYEnter.append('tspan').classed('name', true); //  MERGE

	      var titleYMerge = underlayerMerge.select('.title-y').attr('transform', "translate(".concat(-2 * this.rem, ", ").concat(height / 2, ")rotate(-90)"));
	      titleYMerge.select('tspan.z').text(this.zRoc ? 'z' : '');
	      titleYMerge.select('tspan.name').text(this.zRoc ? '(Hit Rate)' : 'Hit Rate'); // No-Information Line
	      //  ENTER

	      underlayerEnter.append('line').classed('diagonal', true); //  MERGE

	      underlayerMerge.select('.diagonal').attr('x1', this.zRoc ? xScale(-3) : xScale(0)).attr('y1', this.zRoc ? yScale(-3) : yScale(0)).attr('x2', this.zRoc ? xScale(3) : xScale(1)).attr('y2', this.zRoc ? yScale(3) : yScale(1)); // Content
	      //  ENTER

	      plotEnter.append('g').classed('content', true); //  MERGE

	      var contentMerge = plotMerge.select('.content'); // Iso-sensitivity Curve
	      //  DATA-JOIN

	      var isoDUpdate = contentMerge.selectAll('.curve-iso-d').data(this.isoDArray, function (datum) {
	        return datum.name;
	      }); //  ENTER

	      var isoDEnter = isoDUpdate.enter().append('path').classed('curve-iso-d', true).attr('clip-path', 'url(#clip-roc-space)'); //  MERGE

	      var isoDMerge = isoDEnter.merge(isoDUpdate);

	      if (this.firstUpdate || changedProperties.has('zRoc')) {
	        isoDMerge.transition().duration(this.drag ? 0 : transitionDuration * 2) // Extra long transition!
	        .ease(cubicOut).attr('d', function (datum) {
	          return line$1(range(xScale.range()[0], xScale.range()[1] + 1, 1).map(function (x) {
	            return {
	              far: _this3.zRoc ? SDTMath.zfar2Far(xScale.invert(x)) : xScale.invert(x),
	              hr: _this3.zRoc ? SDTMath.dFar2Hr(datum.d, SDTMath.zfar2Far(xScale.invert(x)), datum.s) : SDTMath.dFar2Hr(datum.d, xScale.invert(x), datum.s)
	            };
	          }));
	        });
	      } else if (this.sdt) {
	        isoDMerge.transition().duration(this.drag ? 0 : transitionDuration).ease(cubicOut).attrTween('d', function (datum, index, elements) {
	          var element = elements[index];
	          element.hr = undefined;
	          element.far = undefined;
	          var interpolateD = interpolate$1(element.d !== undefined ? element.d : datum.d, datum.d);
	          var interpolateS = interpolate$1(element.s !== undefined ? element.s : datum.s, datum.s);
	          return function (time) {
	            element.d = interpolateD(time);
	            element.s = interpolateS(time);
	            var isoD = range(xScale.range()[0], xScale.range()[1] + 1, 1).map(function (x) {
	              return {
	                far: _this3.zRoc ? SDTMath.zfar2Far(xScale.invert(x)) : xScale.invert(x),
	                hr: _this3.zRoc ? SDTMath.dFar2Hr(element.d, SDTMath.zfar2Far(xScale.invert(x)), element.s) : SDTMath.dFar2Hr(element.d, xScale.invert(x), element.s)
	              };
	            });
	            return line$1(isoD);
	          };
	        });
	      } else {
	        isoDMerge.transition().duration(this.drag ? 0 : transitionDuration).ease(cubicOut).attrTween('d', function (datum, index, elements) {
	          var element = elements[index];
	          element.d = undefined;
	          element.s = undefined;
	          var interpolateHr = interpolate$1(element.hr !== undefined ? element.hr : datum.hr, datum.hr);
	          var interpolateFar = interpolate$1(element.far !== undefined ? element.far : datum.far, datum.far);
	          return function (time) {
	            element.hr = interpolateHr(time);
	            element.far = interpolateFar(time);
	            var isoD = range(xScale.range()[0], xScale.range()[1] + 1, 1).map(function (x) {
	              return {
	                far: _this3.zRoc ? SDTMath.zfar2Far(xScale.invert(x)) : xScale.invert(x),
	                hr: _this3.zRoc ? SDTMath.dFar2Hr(SDTMath.hrFar2D(element.hr, element.far, datum.s), SDTMath.zfar2Far(xScale.invert(x)), datum.s) : SDTMath.dFar2Hr(SDTMath.hrFar2D(element.hr, element.far, datum.s), xScale.invert(x), datum.s)
	              };
	            });
	            return line$1(isoD);
	          };
	        });
	      } //  EXIT
	      // NOTE: Could add a transition here


	      isoDUpdate.exit().remove(); // Iso-bias Curve
	      //  DATA-JOIN

	      var isoCUpdate = contentMerge.selectAll('.curve-iso-c').data(this.isoCArray, function (datum) {
	        return datum.name;
	      }); //  ENTER

	      var isoCEnter = isoCUpdate.enter().append('path').classed('curve-iso-c', true).attr('clip-path', 'url(#clip-roc-space)'); //  MERGE

	      var isoCMerge = isoCEnter.merge(isoCUpdate);

	      if (this.firstUpdate || changedProperties.has('zRoc')) {
	        isoCMerge.transition().duration(this.drag ? 0 : transitionDuration * 2) // Extra long transition!
	        .ease(cubicOut).attr('d', function (datum) {
	          return line$1(range(xScale.range()[0], xScale.range()[1] + 1, 1).map(function (x) {
	            return {
	              far: _this3.zRoc ? SDTMath.zfar2Far(xScale.invert(x)) : xScale.invert(x),
	              hr: _this3.zRoc ? SDTMath.cFar2Hr(datum.c, SDTMath.zfar2Far(xScale.invert(x)), datum.s) : SDTMath.cFar2Hr(datum.c, xScale.invert(x), datum.s)
	            };
	          }));
	        });
	      } else if (this.sdt) {
	        isoCMerge.transition().duration(this.drag ? 0 : transitionDuration).ease(cubicOut).attrTween('d', function (datum, index, elements) {
	          var element = elements[index];
	          element.hr = undefined;
	          element.far = undefined;
	          var interpolateC = interpolate$1(element.c !== undefined ? element.c : datum.c, datum.c);
	          var interpolateS = interpolate$1(element.s !== undefined ? element.s : datum.s, datum.s);
	          return function (time) {
	            element.c = interpolateC(time);
	            element.s = interpolateS(time);
	            var isoC = range(xScale.range()[0], xScale.range()[1] + 1, 1).map(function (x) {
	              return {
	                far: _this3.zRoc ? SDTMath.zfar2Far(xScale.invert(x)) : xScale.invert(x),
	                hr: _this3.zRoc ? SDTMath.cFar2Hr(element.c, SDTMath.zfar2Far(xScale.invert(x)), element.s) : SDTMath.cFar2Hr(element.c, xScale.invert(x), element.s)
	              };
	            });
	            return line$1(isoC);
	          };
	        });
	      } else {
	        isoCMerge.transition().duration(this.drag ? 0 : transitionDuration).ease(cubicOut).attrTween('d', function (datum, index, elements) {
	          var element = elements[index];
	          element.c = undefined;
	          element.s = undefined;
	          var interpolateHr = interpolate$1(element.hr !== undefined ? element.hr : datum.hr, datum.hr);
	          var interpolateFar = interpolate$1(element.far !== undefined ? element.far : datum.far, datum.far);
	          return function (time) {
	            element.hr = interpolateHr(time);
	            element.far = interpolateFar(time);
	            var isoC = range(xScale.range()[0], xScale.range()[1] + 1, 1).map(function (x) {
	              return {
	                far: _this3.zRoc ? SDTMath.zfar2Far(xScale.invert(x)) : xScale.invert(x),
	                hr: _this3.zRoc ? SDTMath.cFar2Hr(SDTMath.hrFar2C(element.hr, element.far, datum.s), SDTMath.zfar2Far(xScale.invert(x)), datum.s) : SDTMath.cFar2Hr(SDTMath.hrFar2C(element.hr, element.far, datum.s), xScale.invert(x), datum.s)
	              };
	            });
	            return line$1(isoC);
	          };
	        });
	      } //  EXIT
	      // NOTE: Could add a transition here


	      isoCUpdate.exit().remove(); // Point
	      //  DATA-JOIN

	      var pointUpdate = contentMerge.selectAll('.point').data(this.pointArray, function (datum) {
	        return datum.name;
	      }); //  ENTER

	      var pointEnter = pointUpdate.enter().append('g').classed('point', true);
	      pointEnter.append('circle').classed('circle', true).attr('r', 6);
	      /* HACK: Firefox does not support CSS SVG Geometry Properties */

	      pointEnter.append('text').classed('label', true); //  MERGE

	      var pointMerge = pointEnter.merge(pointUpdate);
	      pointMerge.select('text').text(function (datum) {
	        return datum.label;
	      });

	      if (this.firstUpdate || changedProperties.has('interactive')) {
	        if (this.interactive) {
	          pointMerge.attr('tabindex', 0).classed('interactive', true).call(drag$1).on('keydown', function (event, datum) {
	            if (['ArrowUp', 'ArrowDown', 'ArrowRight', 'ArrowLeft'].includes(event.key)) {
	              var _hr = _this3.zRoc ? SDTMath.hr2Zhr(datum.hr) : datum.hr;

	              var _far = _this3.zRoc ? SDTMath.far2Zfar(datum.far) : datum.far;

	              switch (event.key) {
	                case 'ArrowUp':
	                  _hr += _this3.zRoc ? event.shiftKey ? 0.05 : 0.25 : event.shiftKey ? 0.01 : 0.05;
	                  break;

	                case 'ArrowDown':
	                  _hr -= _this3.zRoc ? event.shiftKey ? 0.05 : 0.25 : event.shiftKey ? 0.01 : 0.05;
	                  break;

	                case 'ArrowRight':
	                  _far += _this3.zRoc ? event.shiftKey ? 0.05 : 0.25 : event.shiftKey ? 0.01 : 0.05;
	                  break;

	                case 'ArrowLeft':
	                  _far -= _this3.zRoc ? event.shiftKey ? 0.05 : 0.25 : event.shiftKey ? 0.01 : 0.05;
	                  break;

	              }

	              _hr = _this3.zRoc ? SDTMath.zhr2Hr(_hr) : _hr;
	              _far = _this3.zRoc ? SDTMath.zfar2Far(_far) : _far; // Clamp FAR and HR to ROC Space

	              _hr = _hr < 0.001 ? 0.001 : _hr > 0.999 ? 0.999 : _hr;
	              _far = _far < 0.001 ? 0.001 : _far > 0.999 ? 0.999 : _far;

	              if (_hr !== datum.hr || _far !== datum.far) {
	                datum.hr = _hr;
	                datum.far = _far;

	                if (datum.name === 'default') {
	                  _this3.hr = datum.hr;
	                  _this3.far = datum.far;
	                }

	                _this3.alignState();

	                _this3.requestUpdate();

	                _this3.dispatchEvent(new CustomEvent('roc-point-change', {
	                  detail: {
	                    name: datum.name,
	                    far: datum.far,
	                    hr: datum.hr,
	                    d: datum.d,
	                    c: datum.c,
	                    s: datum.s,
	                    label: datum.label
	                  },
	                  bubbles: true
	                }));
	              }

	              event.preventDefault();
	            }
	          });
	        } else {
	          pointMerge.attr('tabindex', null).classed('interactive', false).on('drag', null).on('keydown', null);
	        }
	      }

	      if (this.firstUpdate || changedProperties.has('zRoc')) {
	        pointMerge.transition().duration(this.drag ? 0 : transitionDuration * 2) // Extra long transition!
	        .ease(cubicOut).attr('transform', function (datum, index, elements) {
	          var element = elements[index];
	          element.d = undefined;
	          element.c = undefined;
	          element.s = undefined;
	          return "translate(\n            ".concat(xScale(_this3.zRoc ? SDTMath.far2Zfar(datum.far) : datum.far), ",\n            ").concat(yScale(_this3.zRoc ? SDTMath.hr2Zhr(datum.hr) : datum.hr), "\n          )");
	        });
	      } else if (this.sdt) {
	        pointMerge.transition().duration(this.drag ? 0 : transitionDuration).ease(cubicOut).attrTween('transform', function (datum, index, elements) {
	          var element = elements[index];
	          var interpolateD = interpolate$1(element.d !== undefined ? element.d : datum.d, datum.d);
	          var interpolateC = interpolate$1(element.c !== undefined ? element.c : datum.c, datum.c);
	          var interpolateS = interpolate$1(element.s !== undefined ? element.s : datum.s, datum.s);
	          return function (time) {
	            element.d = interpolateD(time);
	            element.c = interpolateC(time);
	            element.s = interpolateS(time);
	            return "translate(\n              ".concat(xScale(_this3.zRoc ? SDTMath.far2Zfar(SDTMath.dC2Far(element.d, element.c, element.s)) : SDTMath.dC2Far(element.d, element.c, element.s)), ",\n              ").concat(yScale(_this3.zRoc ? SDTMath.hr2Zhr(SDTMath.dC2Hr(element.d, element.c, element.s)) : SDTMath.dC2Hr(element.d, element.c, element.s)), "\n            )");
	          };
	        });
	      } else {
	        pointMerge.transition().duration(this.drag ? 0 : transitionDuration).ease(cubicOut).attr('transform', function (datum, index, elements) {
	          var element = elements[index];
	          element.d = undefined;
	          element.c = undefined;
	          element.s = undefined;
	          return "translate(\n            ".concat(xScale(_this3.zRoc ? SDTMath.far2Zfar(datum.far) : datum.far), ",\n            ").concat(yScale(_this3.zRoc ? SDTMath.hr2Zhr(datum.hr) : datum.hr), "\n          )");
	        });
	      } //  EXIT
	      // NOTE: Could add a transition here


	      pointUpdate.exit().remove();
	      this.drag = false;
	      this.sdt = false;
	      this.firstUpdate = false;
	    }
	  }], [{
	    key: "properties",
	    get: function get() {
	      return {
	        contour: {
	          attribute: 'contour',
	          type: String,
	          reflect: true
	        },
	        point: {
	          attribute: 'point',
	          type: String,
	          reflect: true
	        },
	        isoD: {
	          attribute: 'iso-d',
	          type: String,
	          reflect: true
	        },
	        isoC: {
	          attribute: 'iso-c',
	          type: String,
	          reflect: true
	        },
	        zRoc: {
	          attribute: 'z-roc',
	          type: Boolean,
	          reflect: true
	        },
	        far: {
	          attribute: 'far',
	          type: Number,
	          reflect: true
	        },
	        hr: {
	          attribute: 'hr',
	          type: Number,
	          reflect: true
	        },
	        d: {
	          attribute: false,
	          type: Number,
	          reflect: false
	        },
	        c: {
	          attribute: false,
	          type: Number,
	          reflect: false
	        },
	        s: {
	          attribute: false,
	          type: Number,
	          reflect: false
	        },
	        width: {
	          attribute: false,
	          type: Number,
	          reflect: false
	        },
	        height: {
	          attribute: false,
	          type: Number,
	          reflect: false
	        },
	        rem: {
	          attribute: false,
	          type: Number,
	          reflect: false
	        }
	      };
	    }
	  }, {
	    key: "styles",
	    get: function get() {
	      return [_get(_getPrototypeOf(ROCSpace), "styles", this), r$2(_templateObject2$8 || (_templateObject2$8 = _taggedTemplateLiteral(["\n        :host {\n          display: inline-block;\n\n          width: 20rem;\n          height: 20rem;\n        }\n\n        .main {\n          width: 100%;\n          height: 100%;\n        }\n\n        .plot-contour,\n        .legend-contour .contour {\n          stroke: var(---color-background);\n          stroke-width: 0.5;\n        }\n\n        text {\n          /* stylelint-disable property-no-vendor-prefix */\n          -webkit-user-select: none;\n          -moz-user-select: none;\n          -ms-user-select: none;\n          user-select: none;\n        }\n\n        .point.interactive {\n          cursor: move;\n\n          filter: url(\"#shadow-2\");\n          outline: none;\n\n          /* HACK: This gets Safari to correctly apply the filter! */\n          /* https://github.com/emilbjorklund/svg-weirdness/issues/27 */\n          stroke: #000000;\n          stroke-opacity: 0;\n          stroke-width: 0;\n        }\n\n        /* Make a larger target for touch users */\n        @media (pointer: coarse) {\n          .point.interactive .circle {\n            stroke: #000000;\n            stroke-opacity: 0;\n            stroke-width: 12px;\n          }\n        }\n\n        .point.interactive:hover {\n          filter: url(\"#shadow-4\");\n\n          /* HACK: This gets Safari to correctly apply the filter! */\n          stroke: #ff0000;\n        }\n\n        .point.interactive:active {\n          filter: url(\"#shadow-8\");\n\n          /* HACK: This gets Safari to correctly apply the filter! */\n          stroke: #00ff00;\n        }\n\n        :host(.keyboard) .point.interactive:focus {\n          filter: url(\"#shadow-8\");\n\n          /* HACK: This gets Safari to correctly apply the filter! */\n          stroke: #0000ff;\n        }\n\n        .background {\n          fill: var(---color-element-background);\n          stroke: var(---color-element-border);\n          stroke-width: 1;\n          shape-rendering: crispEdges;\n        }\n\n        .title-x,\n        .title-y,\n        .title-contour {\n          font-weight: 600;\n\n          fill: currentColor;\n        }\n\n        .tick {\n          font-size: 0.75rem;\n        }\n\n        .axis-x path,\n        .axis-x line,\n        .axis-y path,\n        .axis-y line {\n          stroke: var(---color-element-border);\n        }\n\n        .axis-contour .domain {\n          stroke: none;\n        }\n\n        .diagonal {\n          stroke: var(---color-element-border);\n          stroke-dasharray: 4;\n          stroke-width: 1;\n        }\n\n        .curve-iso-d {\n          fill: none;\n          stroke: var(---color-d);\n          stroke-width: 2;\n        }\n\n        .curve-iso-c {\n          fill: none;\n          stroke: var(---color-c);\n          stroke-width: 2;\n        }\n\n        .point .circle {\n          fill: var(---color-element-emphasis);\n\n          /* r: 6; HACK: Firefox does not support CSS SVG Geometry Properties */\n        }\n\n        .point .label {\n          font-size: 0.75rem;\n\n          dominant-baseline: middle;\n          text-anchor: middle;\n\n          fill: var(---color-text-inverse);\n        }\n      "])))];
	    }
	  }]);

	  return ROCSpace;
	}(SDTElement);
	customElements.define('roc-space', ROCSpace);

	var _templateObject$8, _templateObject2$7;
	/*
	  SDTModel element
	  <sdt-model>

	  Attributes:
	    d'; C;
	    FAR; HR; zFAR; zHR;

	    draggable: d'; C;
	    highlight: H; M; CR; FA;

	    Styles:
	      ??
	*/

	var SDTModel = /*#__PURE__*/function (_SDTElement) {
	  _inherits(SDTModel, _SDTElement);

	  var _super = _createSuper(SDTModel);

	  function SDTModel() {
	    var _this;

	    _classCallCheck(this, SDTModel);

	    _this = _super.call(this); // Attributes

	    _this.colors = ['outcome', 'response', 'stimulus', 'none']; // Allowable values of 'color'

	    _this.color = 'outcome'; // How to color distributions and trials

	    _this.distributions = false; // Show distributions?

	    _this.threshold = false; // Show threshold?

	    _this.unequal = false; // Allow unequal variance?

	    _this.sensitivity = false; // Show d'?

	    _this.bias = false; // Show c?

	    _this.variance = false; // Show variance?

	    _this.histogram = false; // Show histogram?

	    _this.d = 1; // Sensitivity

	    _this.c = 0; // Bias

	    _this.s = 1; // Variance
	    // Properties

	    _this.binWidth = 0.25; // Histogram bin width in units of evidence

	    _this.signals = ['present', 'absent']; // Allowable values of trial.signal

	    _this.responses = ['present', 'absent']; // Allowable values of trial.response

	    _this.trials = []; // Array of simulated trials

	    _this.width = NaN; // Width of component in pixels

	    _this.height = NaN; // Height of component in pixels

	    _this.rem = NaN; // Pixels per rem for component
	    // Private

	    _this.muN = NaN; // Mean of noise distribution

	    _this.muS = NaN; // Mean of signal distribution

	    _this.l = NaN; // lambda (threshold location)

	    _this.hS = NaN; // Height of signal distribution

	    _this.binRange = [-3.0, 3.0]; // Range of histogram

	    _this.h = 0; // Hits

	    _this.m = 0; // Misses

	    _this.fa = 0; // False alarms

	    _this.cr = 0; // Correct rejections

	    _this.firstUpdate = true; // Are we waiting for the first update?

	    _this.drag = false; // Are we currently dragging?

	    _this.alignState();

	    return _this;
	  }

	  _createClass(SDTModel, [{
	    key: "reset",
	    value: function reset() {
	      this.trials = [];
	      this.h = 0;
	      this.m = 0;
	      this.fa = 0;
	      this.cr = 0;
	    }
	  }, {
	    key: "trial",
	    value: function trial(trialNumber, signal, duration, wait, iti) {
	      var trial = {};
	      trial.new = true;
	      trial.paused = false;
	      trial.trial = trialNumber;
	      trial.signal = signal;
	      trial.duration = duration;
	      trial.wait = wait;
	      trial.iti = iti;
	      trial.evidence = jstat.exports.normal.sample(0, 1);
	      this.alignTrial(trial);
	      this.trials.push(trial);
	      this.requestUpdate();
	    }
	  }, {
	    key: "alignTrial",
	    value: function alignTrial(trial) {
	      if (trial.signal === 'present') {
	        trial.trueEvidence = trial.evidence * this.s + this.muS;
	        trial.response = trial.trueEvidence > this.l ? 'present' : 'absent';
	        trial.outcome = trial.response === 'present' ? 'h' : 'm';
	      } else {
	        // trial.signal == 'absent'
	        trial.trueEvidence = trial.evidence + this.muN;
	        trial.response = trial.trueEvidence > this.l ? 'present' : 'absent';
	        trial.outcome = trial.response === 'present' ? 'fa' : 'cr';
	      }

	      if (!trial.new) this[trial.outcome] += 1;
	      return trial;
	    }
	  }, {
	    key: "alignState",
	    value: function alignState() {
	      this.far = SDTMath.dC2Far(this.d, this.c, this.s);
	      this.hr = SDTMath.dC2Hr(this.d, this.c, this.s);
	      this.muN = SDTMath.d2MuN(this.d, this.s);
	      this.muS = SDTMath.d2MuS(this.d, this.s);
	      this.l = SDTMath.c2L(this.c, this.s);
	      this.hS = SDTMath.s2H(this.s);
	      this.h = 0;
	      this.m = 0;
	      this.fa = 0;
	      this.cr = 0;

	      for (var i = 0; i < this.trials.length; i += 1) {
	        this.alignTrial(this.trials[i]);
	      }
	    }
	  }, {
	    key: "render",
	    value: function render() {
	      // eslint-disable-line class-methods-use-this
	      return $(_templateObject$8 || (_templateObject$8 = _taggedTemplateLiteral(["\n      ", "\n    "])), SDTElement.svgFilters);
	    }
	  }, {
	    key: "sendEvent",
	    value: function sendEvent() {
	      this.dispatchEvent(new CustomEvent('sdt-model-change', {
	        detail: {
	          d: this.d,
	          c: this.c,
	          s: this.s,
	          far: this.far,
	          hr: this.hr,
	          h: this.h,
	          m: this.m,
	          fa: this.fa,
	          cr: this.cr
	        },
	        bubbles: true
	      }));
	    }
	  }, {
	    key: "getDimensions",
	    value: function getDimensions() {
	      this.width = parseFloat(this.getComputedStyleValue('width'), 10);
	      this.height = parseFloat(this.getComputedStyleValue('height'), 10);
	      this.rem = parseFloat(getComputedStyle(document.documentElement).getPropertyValue('font-size'), 10); // console.log(`sdt-model: width = ${this.width}, height = ${this.height}, rem = ${this.rem}`);
	    }
	  }, {
	    key: "connectedCallback",
	    value: function connectedCallback() {
	      _get(_getPrototypeOf(SDTModel.prototype), "connectedCallback", this).call(this);

	      window.addEventListener('resize', this.getDimensions.bind(this));
	    }
	  }, {
	    key: "disconnectedCallback",
	    value: function disconnectedCallback() {
	      window.removeEventListener('resize', this.getDimensions.bind(this));

	      _get(_getPrototypeOf(SDTModel.prototype), "disconnectedCallback", this).call(this);
	    }
	  }, {
	    key: "firstUpdated",
	    value: function firstUpdated(changedProperties) {
	      _get(_getPrototypeOf(SDTModel.prototype), "firstUpdated", this).call(this, changedProperties); // Get the width and height after initial render/update has occurred
	      // HACK Edge: Edge doesn't have width/height until after a 0ms timeout


	      window.setTimeout(this.getDimensions.bind(this), 0);
	    }
	  }, {
	    key: "update",
	    value: function update(changedProperties) {
	      var _this2 = this;

	      _get(_getPrototypeOf(SDTModel.prototype), "update", this).call(this, changedProperties);

	      this.alignState(); // Bail out if we can't get the width/height

	      if (Number.isNaN(this.width) || Number.isNaN(this.height) || Number.isNaN(this.rem)) {
	        return;
	      }

	      var hostWidth = this.width;
	      var hostHeight = this.height;
	      var hostAspectRatio = hostWidth / hostHeight;
	      var elementAspectRatio = 1.8;
	      var elementWidth;
	      var elementHeight;

	      if (hostAspectRatio > elementAspectRatio) {
	        elementHeight = hostHeight;
	        elementWidth = elementHeight * elementAspectRatio;
	      } else {
	        elementWidth = hostWidth;
	        elementHeight = elementWidth / elementAspectRatio;
	      }

	      var margin = {
	        top: 2 * this.rem,
	        bottom: 3 * this.rem,
	        left: 3 * this.rem,
	        right: (this.histogram && this.distributions ? 3 : 0.75) * this.rem
	      };
	      var height = elementHeight - (margin.top + margin.bottom);
	      var width = elementWidth - (margin.left + margin.right);
	      var transitionDuration = parseInt(this.getComputedStyleValue('---transition-duration'), 10); // X Scale

	      var xScale = linear().domain([-3, 3]) // Evidence // FIX - no hardcoding
	      .range([0, width]); // Y Scale

	      var yScale = linear().domain([0.5, 0]) // Probability // FIX - no hardcoding
	      .range([0, height]); // 2nd Y Scale

	      var strokeWidth = 3; // FIX - no hardcoding

	      var binWidth = xScale(this.binWidth) - xScale(0);
	      var y2Scale = linear().domain([height / binWidth, 0]) // Number of Stimuli
	      .range([0, height]); // Threshold Drag behavior

	      var dragThreshold = drag().subject(function () {
	        return {
	          x: xScale(_this2.l),
	          y: 0
	        };
	      }).on('start', function (event) {
	        var element = event.currentTarget;
	        select(element).classed('dragging', true);
	      }).on('drag', function (event) {
	        _this2.drag = true;
	        var l = xScale.invert(event.x); // Clamp lambda to stay visible

	        l = l < xScale.domain()[0] ? xScale.domain()[0] : l > xScale.domain()[1] ? xScale.domain()[1] : l;
	        _this2.c = SDTMath.l2C(l, _this2.s);

	        _this2.alignState();

	        _this2.sendEvent();
	      }).on('end', function (event) {
	        var element = event.currentTarget;
	        select(element).classed('dragging', false);
	      }); // Noise Curve Drag behavior

	      var dragNoise = drag().subject(function () {
	        return {
	          x: xScale(_this2.muN),
	          y: 0
	        };
	      }).on('start', function (event) {
	        var element = event.currentTarget;
	        select(element).classed('dragging', true);
	      }).on('drag', function (event) {
	        _this2.drag = true;
	        var muN = xScale.invert(event.x); // Clamp Noise Curve to stay visible

	        muN = muN < xScale.domain()[0] ? xScale.domain()[0] : muN > xScale.domain()[1] ? xScale.domain()[1] : muN;
	        _this2.d = SDTMath.muN2D(muN, _this2.s);

	        _this2.alignState();

	        _this2.sendEvent();
	      }).on('end', function (event) {
	        var element = event.currentTarget;
	        select(element).classed('dragging', false);
	      }); // Signal+Noise Curve Drag behavior

	      var dragSignal = drag().subject(function () {
	        return {
	          x: xScale(_this2.muS),
	          y: yScale(_this2.hS)
	        };
	      }).on('start', function (event, datum) {
	        var element = event.currentTarget;
	        select(element).classed('dragging', true);
	        datum.startX = event.x;
	        datum.startY = event.y;
	        datum.startHS = _this2.hS;
	        datum.startMuS = _this2.muS;
	      }).on('drag', function (event, datum) {
	        _this2.drag = true;
	        var muS = _this2.muS; // eslint-disable-line prefer-destructuring

	        if (_this2.interactive) {
	          muS = xScale.invert(event.x); // Clamp Signal Curve to stay visible

	          muS = muS < xScale.domain()[0] ? xScale.domain()[0] : muS > xScale.domain()[1] ? xScale.domain()[1] : muS;
	        }

	        var hS = _this2.hS; // eslint-disable-line prefer-destructuring

	        if (_this2.unequal) {
	          hS = yScale.invert(event.y); // Clamp Signal Curve to stay visible

	          hS = hS < 0.01 ? 0.01 : hS > yScale.domain()[0] ? yScale.domain()[0] : hS;
	        }

	        if (_this2.interactive && _this2.unequal) {
	          // Use shift key as modifier for single dimension
	          if (event.sourceEvent.shiftKey) {
	            if (Math.abs(event.x - datum.startX) > Math.abs(event.y - datum.startY)) {
	              hS = datum.startHS;
	            } else {
	              muS = datum.startMuS;
	            }
	          }
	        }

	        if (_this2.unequal) {
	          _this2.s = SDTMath.h2S(hS);
	          _this2.c = SDTMath.l2C(_this2.l, _this2.s);
	        }

	        _this2.d = SDTMath.muS2D(muS, _this2.s);

	        _this2.alignState();

	        _this2.sendEvent();
	      }).on('end', function (event) {
	        var element = event.currentTarget;
	        select(element).classed('dragging', false);
	      }); // Line for Evidence/Probability Space

	      var line$1 = line().x(function (datum) {
	        return xScale(datum.e);
	      }).y(function (datum) {
	        return yScale(datum.p);
	      }); // Svg
	      //  DATA-JOIN

	      var svgUpdate = select(this.renderRoot).selectAll('.main').data([{
	        width: this.width,
	        height: this.height,
	        rem: this.rem
	      }]); // ENTER

	      var svgEnter = svgUpdate.enter().append('svg').classed('main', true); // MERGE

	      var svgMerge = svgEnter.merge(svgUpdate).attr('viewBox', "0 0 ".concat(elementWidth, " ").concat(elementHeight)); // Plot
	      //  ENTER

	      var plotEnter = svgEnter.append('g').classed('plot', true); //  MERGE

	      var plotMerge = svgMerge.select('.plot').attr('transform', "translate(".concat(margin.left, ", ").concat(margin.top, ")")); // Underlayer
	      //  ENTER

	      var underlayerEnter = plotEnter.append('g').classed('underlayer', true); // MERGE

	      var underlayerMerge = plotMerge.select('.underlayer'); // Background
	      //  ENTER

	      underlayerEnter.append('rect').classed('background', true); //  MERGE

	      underlayerMerge.select('.background').attr('height', height).attr('width', width); // X Axis
	      //  ENTER

	      underlayerEnter.append('g').classed('axis-x', true); //  MERGE

	      var axisXMerge = underlayerMerge.select('.axis-x').attr('transform', "translate(0, ".concat(height, ")")).call(axisBottom(xScale)).attr('font-size', null).attr('font-family', null);
	      axisXMerge.selectAll('line, path').attr('stroke', null); // X Axis Title
	      //  ENTER

	      underlayerEnter.append('text').classed('title-x', true).attr('text-anchor', 'middle').text('Evidence'); //  MERGE

	      underlayerMerge.select('.title-x').attr('transform', "translate(".concat(width / 2, ", ").concat(height + 2.25 * this.rem, ")")); // Y Axis
	      //  DATA-JOIN

	      var axisYUpdate = underlayerMerge.selectAll('.axis-y').data(this.distributions ? [{}] : []); //  ENTER

	      var axisYEnter = axisYUpdate.enter().append('g').classed('axis-y', true); //  MERGE

	      var axisYMerge = axisYEnter.merge(axisYUpdate).call(axisLeft(yScale).ticks(5)).attr('font-size', null).attr('font-family', null);
	      axisYMerge.selectAll('line, path').attr('stroke', null); //  EXIT

	      axisYUpdate.exit().remove(); // Y Axis Title
	      //  DATA-JOIN

	      var titleYUpdate = underlayerMerge.selectAll('.title-y').data(this.distributions ? [{}] : []); //  ENTER

	      var titleYEnter = titleYUpdate.enter().append('text').classed('title-y', true).attr('text-anchor', 'middle').text('Probability'); //  MERGE

	      titleYEnter.merge(titleYUpdate).attr('transform', "translate(".concat(-2 * this.rem, ", ").concat(height / 2, ")rotate(-90)")); //  EXIT

	      titleYUpdate.exit().remove(); // 2nd Y Axis
	      //  DATA-JOIN

	      var axisY2Update = underlayerMerge.selectAll('.axis-y2').data(this.histogram ? [{}] : []); //  ENTER

	      var axisY2Enter = axisY2Update.enter().append('g').classed('axis-y2', true); //  MERGE

	      var axisY2Merge = axisY2Enter.merge(axisY2Update).attr('transform', this.distributions ? "translate(".concat(width, ", 0)") : '').call(this.distributions ? axisRight(y2Scale).ticks(10) : axisLeft(y2Scale).ticks(10)).attr('font-size', null).attr('font-family', null);
	      axisY2Merge.selectAll('line, path').attr('stroke', null); //  EXIT

	      axisY2Update.exit().remove(); // 2nd Y Axis Title
	      //  DATA-JOIN

	      var titleY2Update = underlayerMerge.selectAll('.title-y2').data(this.histogram ? [{}] : []); //  ENTER

	      var titleY2Enter = titleY2Update.enter().append('text').classed('title-y2', true).attr('text-anchor', 'middle').text('Count'); //  MERGE

	      titleY2Enter.merge(titleY2Update).attr('transform', this.distributions ? "translate(".concat(width + 1.5 * this.rem, ", ").concat(height / 2, ")rotate(90)") : "translate(".concat(-1.5 * this.rem, ", ").concat(height / 2, ")rotate(-90)")); //  EXIT

	      titleY2Update.exit().remove(); // Plot Content

	      plotEnter.append('g').classed('content', true); //  MERGE

	      var contentMerge = plotMerge.select('.content'); // Noise & Signal + Noise Distributions
	      //  DATA-JOIN

	      var signalNoiseUpdate = contentMerge.selectAll('.signal-noise').data(this.distributions ? [{}] : []); //  ENTER

	      var signalNoiseEnter = signalNoiseUpdate.enter().append('g').classed('signal-noise', true); //  MERGE

	      var signalNoiseMerge = signalNoiseEnter.merge(signalNoiseUpdate); //  EXIT

	      signalNoiseUpdate.exit().remove(); // Noise Distribution
	      //  ENTER

	      var noiseEnter = signalNoiseEnter.append('g').classed('noise', true); //  MERGE

	      var noiseMerge = signalNoiseMerge.selectAll('.noise').attr('tabindex', this.interactive ? 0 : null).classed('interactive', this.interactive).on('keydown', this.interactive ? function (event) {
	        if (['ArrowRight', 'ArrowLeft'].includes(event.key)) {
	          var muN = _this2.muN; // eslint-disable-line prefer-destructuring

	          switch (event.key) {
	            case 'ArrowRight':
	              muN += event.shiftKey ? 0.01 : 0.1;
	              break;

	            case 'ArrowLeft':
	              muN -= event.shiftKey ? 0.01 : 0.1;
	              break;
	          } // Clamp C to visible extent


	          muN = muN < xScale.domain()[0] ? xScale.domain()[0] : muN > xScale.domain()[1] ? xScale.domain()[1] : muN;

	          if (muN !== _this2.muN) {
	            _this2.d = SDTMath.muN2D(muN, _this2.s);

	            _this2.alignState();

	            _this2.sendEvent();
	          }

	          event.preventDefault();
	        }
	      } : null);

	      if (this.firstUpdate || changedProperties.has('interactive')) {
	        if (this.interactive) {
	          noiseMerge.call(dragNoise);
	        } else {
	          noiseMerge.on('.drag', null);
	        }
	      } // CR Curve
	      //  ENTER


	      noiseEnter.append('path').classed('curve-cr', true); //  MERGE

	      noiseMerge.select('.curve-cr').transition().duration(this.drag ? 0 : transitionDuration).ease(cubicOut).attrTween('d', function (datum, index, elements) {
	        var element = elements[index];
	        var interpolateD = interpolate$1(element.d !== undefined ? element.d : _this2.d, _this2.d);
	        var interpolateC = interpolate$1(element.c !== undefined ? element.c : _this2.c, _this2.c);
	        var interpolateS = interpolate$1(element.s !== undefined ? element.s : _this2.s, _this2.s);
	        return function (time) {
	          element.d = interpolateD(time);
	          element.c = interpolateC(time);
	          element.s = interpolateS(time);
	          var correctRejections = range(xScale.domain()[0], SDTMath.c2L(element.c, element.s), 0.05).map(function (e) {
	            return {
	              e: e,
	              p: jstat.exports.normal.pdf(e, SDTMath.d2MuN(element.d, element.s), 1)
	            };
	          });
	          correctRejections.push({
	            e: SDTMath.c2L(element.c, element.s),
	            p: jstat.exports.normal.pdf(SDTMath.c2L(element.c, element.s), SDTMath.d2MuN(element.d, element.s), 1)
	          });
	          correctRejections.push({
	            e: SDTMath.c2L(element.c, element.s),
	            p: 0
	          });
	          correctRejections.push({
	            e: xScale.domain()[0],
	            p: 0
	          });
	          return line$1(correctRejections);
	        };
	      }); // FA Curve
	      //  ENTER

	      noiseEnter.append('path').classed('curve-fa', true); //  MERGE

	      noiseMerge.select('.curve-fa').transition().duration(this.drag ? 0 : transitionDuration).ease(cubicOut).attrTween('d', function (datum, index, elements) {
	        var element = elements[index];
	        var interpolateD = interpolate$1(element.d !== undefined ? element.d : _this2.d, _this2.d);
	        var interpolateC = interpolate$1(element.c !== undefined ? element.c : _this2.c, _this2.c);
	        var interpolateS = interpolate$1(element.s !== undefined ? element.s : _this2.s, _this2.s);
	        return function (time) {
	          element.d = interpolateD(time);
	          element.c = interpolateC(time);
	          element.s = interpolateS(time);
	          var falseAlarms = range(SDTMath.c2L(element.c, element.s), xScale.domain()[1], 0.05).map(function (e) {
	            return {
	              e: e,
	              p: jstat.exports.normal.pdf(e, SDTMath.d2MuN(element.d, element.s), 1)
	            };
	          });
	          falseAlarms.push({
	            e: xScale.domain()[1],
	            p: jstat.exports.normal.pdf(xScale.domain()[1], SDTMath.d2MuN(element.d, element.s), 1)
	          });
	          falseAlarms.push({
	            e: xScale.domain()[1],
	            p: 0
	          });
	          falseAlarms.push({
	            e: SDTMath.c2L(element.c, element.s),
	            p: 0
	          });
	          return line$1(falseAlarms);
	        };
	      }); // Noise Curve
	      //  ENTER

	      noiseEnter.append('path').classed('curve-noise', true); //  MERGE

	      noiseMerge.select('.curve-noise').transition().duration(this.drag ? 0 : transitionDuration).ease(cubicOut).attrTween('d', function (datum, index, elements) {
	        var element = elements[index];
	        var interpolateD = interpolate$1(element.d !== undefined ? element.d : _this2.d, _this2.d);
	        var interpolateS = interpolate$1(element.s !== undefined ? element.s : _this2.s, _this2.s);
	        return function (time) {
	          element.d = interpolateD(time);
	          element.s = interpolateS(time);
	          var noise = range(xScale.domain()[0], xScale.domain()[1], 0.05).map(function (e) {
	            return {
	              e: e,
	              p: jstat.exports.normal.pdf(e, SDTMath.d2MuN(element.d, element.s), 1)
	            };
	          });
	          noise.push({
	            e: xScale.domain()[1],
	            p: jstat.exports.normal.pdf(xScale.domain()[1], SDTMath.d2MuN(element.d, element.s), 1)
	          });
	          return line$1(noise);
	        };
	      }); // Signal + Noise Distribution
	      //  ENTER

	      var signalEnter = signalNoiseEnter.append('g').classed('signal', true); //  MERGE

	      var signalMerge = signalNoiseMerge.selectAll('.signal').attr('tabindex', this.interactive || this.unequal ? 0 : null).classed('interactive', this.interactive).classed('unequal', this.unequal).on('keydown.sensitivity', this.interactive ? function (event) {
	        if (['ArrowRight', 'ArrowLeft'].includes(event.key)) {
	          var muS = _this2.muS; // eslint-disable-line prefer-destructuring

	          switch (event.key) {
	            case 'ArrowRight':
	              muS += event.shiftKey ? 0.01 : 0.1;
	              break;

	            case 'ArrowLeft':
	              muS -= event.shiftKey ? 0.01 : 0.1;
	              break;
	          } // Clamp C to visible extent


	          muS = muS < xScale.domain()[0] ? xScale.domain()[0] : muS > xScale.domain()[1] ? xScale.domain()[1] : muS;

	          if (muS !== _this2.muS) {
	            _this2.d = SDTMath.muS2D(muS, _this2.s);

	            _this2.alignState();

	            _this2.sendEvent();
	          }

	          event.preventDefault();
	        }
	      } : null).on('keydown.variance', this.unequal ? function (event) {
	        if (['ArrowUp', 'ArrowDown'].includes(event.key)) {
	          var hS = _this2.hS; // eslint-disable-line prefer-destructuring

	          switch (event.key) {
	            case 'ArrowUp':
	              hS += event.shiftKey ? 0.002 : 0.02;
	              break;

	            case 'ArrowDown':
	              hS -= event.shiftKey ? 0.002 : 0.02;
	              break;
	          } // Clamp s so distribution stays visible


	          hS = hS < 0.01 ? 0.01 : hS > yScale.domain()[0] ? yScale.domain()[0] : hS;

	          if (hS !== _this2.hS) {
	            _this2.s = SDTMath.h2S(hS);
	            _this2.d = SDTMath.muN2D(_this2.muN, _this2.s);
	            _this2.c = SDTMath.l2C(_this2.l, _this2.s);

	            _this2.alignState();

	            _this2.sendEvent();
	          }

	          event.preventDefault();
	        }
	      } : null);

	      if (this.firstUpdate || changedProperties.has('interactive') || changedProperties.has('unequal')) {
	        if (this.interactive || this.unequal) {
	          signalMerge.call(dragSignal);
	        } else {
	          signalMerge.on('.drag', null);
	        }
	      } // M Curve
	      //  ENTER


	      signalEnter.append('path').classed('curve-m', true); //  MERGE

	      signalMerge.select('.curve-m').transition().duration(this.drag ? 0 : transitionDuration).ease(cubicOut).attrTween('d', function (datum, index, elements) {
	        var element = elements[index];
	        var interpolateD = interpolate$1(element.d !== undefined ? element.d : _this2.d, _this2.d);
	        var interpolateC = interpolate$1(element.c !== undefined ? element.c : _this2.c, _this2.c);
	        var interpolateS = interpolate$1(element.s !== undefined ? element.s : _this2.s, _this2.s);
	        return function (time) {
	          element.d = interpolateD(time);
	          element.c = interpolateC(time);
	          element.s = interpolateS(time);
	          var misses = range(xScale.domain()[0], SDTMath.c2L(element.c, element.s), 0.05).map(function (e) {
	            return {
	              e: e,
	              p: jstat.exports.normal.pdf(e, SDTMath.d2MuS(element.d, element.s), element.s)
	            };
	          });
	          misses.push({
	            e: SDTMath.c2L(element.c, element.s),
	            p: jstat.exports.normal.pdf(SDTMath.c2L(element.c, element.s), SDTMath.d2MuS(element.d, element.s), element.s)
	          });
	          misses.push({
	            e: SDTMath.c2L(element.c, element.s),
	            p: 0
	          });
	          misses.push({
	            e: xScale.domain()[0],
	            p: 0
	          });
	          return line$1(misses);
	        };
	      }); // H Curve
	      //  ENTER

	      signalEnter.append('path').classed('curve-h', true); //  MERGE

	      signalMerge.select('.curve-h').transition().duration(this.drag ? 0 : transitionDuration).ease(cubicOut).attrTween('d', function (datum, index, elements) {
	        var element = elements[index];
	        var interpolateD = interpolate$1(element.d !== undefined ? element.d : _this2.d, _this2.d);
	        var interpolateC = interpolate$1(element.c !== undefined ? element.c : _this2.c, _this2.c);
	        var interpolateS = interpolate$1(element.s !== undefined ? element.s : _this2.s, _this2.s);
	        return function (time) {
	          element.d = interpolateD(time);
	          element.c = interpolateC(time);
	          element.s = interpolateS(time);
	          var hits = range(SDTMath.c2L(element.c, element.s), xScale.domain()[1], 0.05).map(function (e) {
	            return {
	              e: e,
	              p: jstat.exports.normal.pdf(e, SDTMath.d2MuS(element.d, element.s), element.s)
	            };
	          });
	          hits.push({
	            e: xScale.domain()[1],
	            p: jstat.exports.normal.pdf(xScale.domain()[1], SDTMath.d2MuS(element.d, element.s), element.s)
	          });
	          hits.push({
	            e: xScale.domain()[1],
	            p: 0
	          });
	          hits.push({
	            e: SDTMath.c2L(element.c, element.s),
	            p: 0
	          });
	          return line$1(hits);
	        };
	      }); // Signal Curve
	      //  ENTER

	      signalEnter.append('path').classed('curve-signal', true); //  MERGE

	      signalMerge.select('.curve-signal').transition().duration(this.drag ? 0 : transitionDuration).ease(cubicOut).attrTween('d', function (datum, index, elements) {
	        var element = elements[index];
	        var interpolateD = interpolate$1(element.d !== undefined ? element.d : _this2.d, _this2.d);
	        var interpolateS = interpolate$1(element.s !== undefined ? element.s : _this2.s, _this2.s);
	        return function (time) {
	          element.d = interpolateD(time);
	          element.s = interpolateS(time);
	          var signal = range(xScale.domain()[0], xScale.domain()[1], 0.05).map(function (e) {
	            return {
	              e: e,
	              p: jstat.exports.normal.pdf(e, SDTMath.d2MuS(element.d, element.s), element.s)
	            };
	          });
	          signal.push({
	            e: xScale.domain()[1],
	            p: jstat.exports.normal.pdf(xScale.domain()[1], SDTMath.d2MuS(element.d, element.s), element.s)
	          });
	          return line$1(signal);
	        };
	      }); // d' Measure
	      //  DATA-JOIN

	      var dUpdate = contentMerge.selectAll('.measure-d').data(this.sensitivity ? [{}] : []); //  ENTER

	      var dEnter = dUpdate.enter().append('g').classed('measure-d', true);
	      dEnter.append('line').classed('line', true);
	      dEnter.append('line').classed('cap-left', true);
	      dEnter.append('line').classed('cap-right', true);
	      var dLabel = dEnter.append('text').classed('label', true);
	      dLabel.append('tspan').classed('d math-var', true).text('d′');
	      dLabel.append('tspan').classed('equals', true).text(' = ');
	      dLabel.append('tspan').classed('value', true); //  MERGE

	      var dMerge = dEnter.merge(dUpdate);
	      dMerge.select('.line').transition().duration(this.drag ? 0 : transitionDuration).ease(cubicOut).attr('x1', xScale(this.muN)).attr('y1', yScale(0.43)) // FIX - no hardcoding
	      .attr('x2', xScale(this.muS)).attr('y2', yScale(0.43)); // FIX - no hardcoding

	      dMerge.select('.cap-left').transition().duration(this.drag ? 0 : transitionDuration).ease(cubicOut).attr('x1', xScale(this.muN)).attr('y1', yScale(0.43) + 5) // FIX - no hardcoding
	      .attr('x2', xScale(this.muN)).attr('y2', yScale(0.43) - 5); // FIX - no hardcoding

	      dMerge.select('.cap-right').transition().duration(this.drag ? 0 : transitionDuration).ease(cubicOut).attr('x1', xScale(this.muS)).attr('y1', yScale(0.43) + 5) // FIX - no hardcoding
	      .attr('x2', xScale(this.muS)).attr('y2', yScale(0.43) - 5); // FIX - no hardcoding

	      var dLabelTransition = dMerge.select('.label').transition().duration(this.drag ? 0 : transitionDuration).ease(cubicOut).attr('x', xScale(this.muN > this.muS ? this.muN : this.muS) + 5).attr('y', yScale(0.43) + 3); // FIX - no hardcoding

	      dLabelTransition.select('.value').tween('text', function (datum, index, elements) {
	        var element = elements[index];
	        var interpolateD = interpolate$1(element.d !== undefined ? element.d : _this2.d, _this2.d);
	        return function (time) {
	          element.d = interpolateD(time);
	          select(element).text(+element.d.toFixed(3));
	        };
	      }); //  EXIT

	      dUpdate.exit().remove(); // c Measure
	      //  DATA-JOIN

	      var cUpdate = contentMerge.selectAll('.measure-c').data(this.bias ? [{}] : []); //  ENTER

	      var cEnter = cUpdate.enter().append('g').classed('measure-c', true);
	      cEnter.append('line').classed('line', true);
	      cEnter.append('line').classed('cap-zero', true);
	      var cLabel = cEnter.append('text').classed('label', true);
	      cLabel.append('tspan').classed('c math-var', true).text('c');
	      cLabel.append('tspan').classed('equals', true).text(' = ');
	      cLabel.append('tspan').classed('value', true); //  MERGE

	      var cMerge = cEnter.merge(cUpdate);
	      cMerge.select('.line').transition().duration(this.drag ? 0 : transitionDuration).ease(cubicOut).attr('x1', xScale(this.l)).attr('y1', yScale(0.47)) // FIX - no hardcoding
	      .attr('x2', xScale(0)).attr('y2', yScale(0.47)); // FIX - no hardcoding

	      cMerge.select('.cap-zero').transition().duration(this.drag ? 0 : transitionDuration).ease(cubicOut).attr('x1', xScale(0)).attr('y1', yScale(0.47) + 5) // FIX - no hardcoding
	      .attr('x2', xScale(0)).attr('y2', yScale(0.47) - 5); // FIX - no hardcoding

	      var cLabelTransition = cMerge.select('.label').transition().duration(this.drag ? 0 : transitionDuration).ease(cubicOut).attr('x', xScale(0) + (this.l < 0 ? 5 : -5)).attr('y', yScale(0.47) + 3) // FIX - no hardcoding
	      .attr('text-anchor', this.c < 0 ? 'start' : 'end');
	      cLabelTransition.select('.value').tween('text', function (datum, index, elements) {
	        var element = elements[index];
	        var interpolateC = interpolate$1(element.c !== undefined ? element.c : _this2.c, _this2.c);
	        return function (time) {
	          element.c = interpolateC(time);
	          select(element).text(+element.c.toFixed(3));
	        };
	      }); //  EXIT

	      cUpdate.exit().remove(); // s Measure
	      //  DATA-JOIN

	      var sUpdate = contentMerge.selectAll('.measure-s').data(this.variance ? [{}] : []); //  ENTER

	      var sEnter = sUpdate.enter().append('g').classed('measure-s', true);
	      sEnter.append('line').classed('line', true);
	      sEnter.append('line').classed('cap-left', true);
	      sEnter.append('line').classed('cap-right', true);
	      var sLabel = sEnter.append('text').classed('label', true);
	      sLabel.append('tspan').classed('s math-var', true).text('σ');
	      sLabel.append('tspan').classed('equals', true).text(' = ');
	      sLabel.append('tspan').classed('value', true); //  MERGE

	      var sMerge = sEnter.merge(sUpdate);
	      sMerge.select('.line').transition().duration(this.drag ? 0 : transitionDuration).ease(cubicOut).attr('x1', xScale(this.muS - this.s)).attr('y1', yScale(jstat.exports.normal.pdf(this.s, 0, this.s)) + 10 / this.s) // FIX - no hardcoding
	      .attr('x2', xScale(this.muS + this.s)).attr('y2', yScale(jstat.exports.normal.pdf(this.s, 0, this.s)) + 10 / this.s); // FIX - no hardcoding

	      sMerge.select('.cap-left').transition().duration(this.drag ? 0 : transitionDuration).ease(cubicOut).attr('x1', xScale(this.muS - this.s)).attr('y1', yScale(jstat.exports.normal.pdf(this.s, 0, this.s)) + 10 / this.s + 5) // FIX - no hardcoding
	      .attr('x2', xScale(this.muS - this.s)).attr('y2', yScale(jstat.exports.normal.pdf(this.s, 0, this.s)) + 10 / this.s - 5); // FIX - no hardcoding

	      sMerge.select('.cap-right').transition().duration(this.drag ? 0 : transitionDuration).ease(cubicOut).attr('x1', xScale(this.muS + this.s)).attr('y1', yScale(jstat.exports.normal.pdf(this.s, 0, this.s)) + 10 / this.s + 5) // FIX - no hardcoding
	      .attr('x2', xScale(this.muS + this.s)).attr('y2', yScale(jstat.exports.normal.pdf(this.s, 0, this.s)) + 10 / this.s - 5); // FIX - no hardcoding

	      var sLabelTransition = sMerge.select('.label').transition().duration(this.drag ? 0 : transitionDuration).ease(cubicOut).attr('x', xScale(this.muS)).attr('y', yScale(jstat.exports.normal.pdf(this.s, 0, this.s)) + 10 / this.s - 3); // FIX - no hardcoding

	      sLabelTransition.select('.value').tween('text', function (datum, index, elements) {
	        var element = elements[index];
	        var interpolateS = interpolate$1(element.s !== undefined ? element.s : _this2.s, _this2.s);
	        return function (time) {
	          element.s = interpolateS(time);
	          select(element).text(+element.s.toFixed(3));
	        };
	      }); //  EXIT

	      sUpdate.exit().remove(); // Threshold Line
	      //  DATA-JOIN

	      var thresholdUpdate = contentMerge.selectAll('.threshold').data(this.threshold ? [{}] : []); //  ENTER

	      var thresholdEnter = thresholdUpdate.enter().append('g').classed('threshold', true);
	      thresholdEnter.append('line').classed('line', true);
	      thresholdEnter.append('circle').classed('handle', true).attr('r', 6);
	      /* HACK: Firefox does not support CSS SVG Geometry Properties */
	      //  MERGE

	      var thresholdMerge = thresholdEnter.merge(thresholdUpdate).attr('tabindex', this.interactive ? 0 : null).classed('interactive', this.interactive);

	      if (this.firstUpdate || changedProperties.has('interactive')) {
	        if (this.interactive) {
	          thresholdMerge.call(dragThreshold).on('keydown', function (event) {
	            if (['ArrowRight', 'ArrowLeft'].includes(event.key)) {
	              var l = _this2.l; // eslint-disable-line prefer-destructuring

	              switch (event.key) {
	                case 'ArrowRight':
	                  l += event.shiftKey ? 0.01 : 0.1;
	                  break;

	                case 'ArrowLeft':
	                  l -= event.shiftKey ? 0.01 : 0.1;
	                  break;
	              } // Clamp C to visible extent


	              l = l < xScale.domain()[0] ? xScale.domain()[0] : l > xScale.domain()[1] ? xScale.domain()[1] : l;

	              if (l !== _this2.l) {
	                _this2.c = SDTMath.l2C(l, _this2.s);

	                _this2.alignState();

	                _this2.sendEvent();
	              }

	              event.preventDefault();
	            }
	          });
	        } else {
	          thresholdMerge.on('drag', null).on('keydown', null);
	        }
	      }

	      thresholdMerge.select('.line').transition().duration(this.drag ? 0 : transitionDuration).ease(cubicOut).attr('x1', xScale(this.l)).attr('y1', yScale(0)).attr('x2', xScale(this.l)).attr('y2', yScale(0.54));
	      thresholdMerge.select('.handle').transition().duration(this.drag ? 0 : transitionDuration).ease(cubicOut).attr('cx', xScale(this.l)).attr('cy', yScale(0.54)); //  EXIT

	      thresholdUpdate.exit().remove(); // Histogram
	      //  DATA-JOIN

	      var histogramUpdate = contentMerge.selectAll('.histogram').data(this.histogram ? [{}] : []); //  ENTER

	      var histogramEnter = histogramUpdate.enter().append('g').classed('histogram', true); //  MERGE

	      var histogramMerge = histogramEnter.merge(histogramUpdate); //  EXIT

	      histogramUpdate.exit().remove(); // Trials

	      if (this.histogram) {
	        var histogram = bin().value(function (datum) {
	          return datum.trueEvidence;
	        }).domain(xScale.domain()).thresholds(range(this.binRange[0], this.binRange[1], this.binWidth));
	        var hist = histogram(this.trials);
	        var binCountLeft = -1;
	        var binCountRight = -1;

	        for (var i = 0; i < hist.length; i += 1) {
	          for (var j = 0; j < hist[i].length; j += 1) {
	            hist[i][j].binValue = hist[i].x0;
	            hist[i][j].binCount = j;
	            if (i === 0) binCountLeft = j;
	            if (i === hist.length - 1) binCountRight = j;
	          }
	        } // Put out-of-range values in extreme left/right bins


	        for (var _i = 0; _i < this.trials.length; _i += 1) {
	          if (this.trials[_i].trueEvidence < this.binRange[0]) {
	            binCountLeft += 1;
	            this.trials[_i].binCount = binCountLeft;
	            this.trials[_i].binValue = hist[0].x0;
	          }

	          if (this.trials[_i].trueEvidence > this.binRange[1]) {
	            binCountRight += 1;
	            this.trials[_i].binCount = binCountRight;
	            this.trials[_i].binValue = hist[hist.length - 1].x0;
	          }
	        } //  DATA-JOIN


	        var trialUpdate = histogramMerge.selectAll('.trial').data(this.trials, function (datum) {
	          return datum.trial;
	        }); //  ENTER

	        var trialEnter = trialUpdate.enter().append('rect').attr('stroke-width', strokeWidth).attr('data-new-trial-ease-time', 0) // use 'data-trial-enter'
	        .attr('stroke', this.getComputedStyleValue('---color-acc')).attr('fill', this.getComputedStyleValue('---color-acc-light')); //  MERGE

	        var trialMerge = trialEnter.merge(trialUpdate).attr('class', function (datum) {
	          return "trial ".concat(datum.outcome);
	        }).attr('width', binWidth - strokeWidth).attr('height', binWidth - strokeWidth); //  MERGE - Active New Trials

	        var trialMergeNewActive = trialMerge.filter(function (datum) {
	          return datum.new && !datum.paused;
	        });

	        if (!trialMergeNewActive.empty()) {
	          var easeTime = trialMergeNewActive.attr('data-new-trial-ease-time');

	          var scaleIn = function scaleIn(time) {
	            return linear().domain([0, 1]).range([easeTime, 1])(time);
	          };

	          var scaleOutGenerator = function scaleOutGenerator(easeFunction) {
	            return function (time) {
	              return linear().domain([easeFunction(easeTime), 1]).range([0, 1])(easeFunction(time));
	            };
	          };

	          trialMergeNewActive.transition('new').duration(function (datum) {
	            return Math.floor((datum.duration * 0.75 + datum.wait * 0.25) * (1 - easeTime));
	          }).ease(scaleIn).attr('data-new-trial-ease-time', 1).attrTween('stroke', function (datum, index, elements) {
	            var element = elements[index];
	            var interpolator = interpolateRgb(element.getAttribute('stroke'), _this2.color === 'stimulus' ? datum.signal === 'present' ? _this2.getComputedStyleValue('---color-hr') : _this2.getComputedStyleValue('---color-far') : _this2.color === 'response' ? _this2.getComputedStyleValue("---color-".concat(datum.response)) : _this2.color === 'outcome' ? _this2.getComputedStyleValue("---color-".concat(datum.outcome)) : _this2.getComputedStyleValue('---color-acc'));
	            return function (time) {
	              return interpolator(scaleOutGenerator(cubicIn)(time));
	            };
	          }).attrTween('fill', function (datum, index, elements) {
	            var element = elements[index];
	            var interpolator = interpolateRgb(element.getAttribute('fill'), _this2.color === 'stimulus' ? datum.signal === 'present' ? _this2.getComputedStyleValue('---color-hr-light') : _this2.getComputedStyleValue('---color-far-light') : _this2.color === 'response' ? _this2.getComputedStyleValue("---color-".concat(datum.response, "-light")) : _this2.color === 'outcome' ? _this2.getComputedStyleValue("---color-".concat(datum.outcome, "-light")) : _this2.getComputedStyleValue('---color-acc-light'));
	            return function (time) {
	              return interpolator(scaleOutGenerator(cubicIn)(time));
	            };
	          }).attrTween('x', function (datum, index, elements) {
	            var element = elements[index];
	            var interpolator = interpolate$1(element.getAttribute('x'), xScale(datum.binValue) + strokeWidth / 2);
	            return function (time) {
	              return interpolator(scaleOutGenerator(cubicOut)(time));
	            };
	          }).attrTween('y', function (datum, index, elements) {
	            var element = elements[index];
	            var interpolator = interpolate$1(element.getAttribute('y'), yScale(0) + strokeWidth / 2 - (datum.binCount + 1) * binWidth);
	            return function (time) {
	              return interpolator(scaleOutGenerator(cubicIn)(time));
	            };
	          }).on('end', function (datum, index, elements) {
	            var element = elements[index];
	            element.removeAttribute('data-new-trial-ease-time');
	            datum.new = false;

	            _this2.alignTrial(datum);

	            _this2.dispatchEvent(new CustomEvent('sdt-response', {
	              detail: {
	                stimulus: datum.signal,
	                response: datum.response,
	                outcome: datum.outcome,
	                h: _this2.h,
	                m: _this2.m,
	                fa: _this2.fa,
	                cr: _this2.cr,
	                nr: 0
	              },
	              bubbles: true
	            }));
	          });
	        } // MERGE - Paused New Trials


	        var trialMergeNewPaused = trialMerge.filter(function (datum) {
	          return datum.new && datum.paused;
	        });

	        if (!trialMergeNewPaused.empty()) {
	          var _easeTime = trialMergeNewPaused.attr('data-new-trial-ease-time');

	          trialMergeNewPaused.transition().duration(transitionDuration).ease(cubicOut).attr('x', function (datum) {
	            var interpolator = interpolate$1(0, xScale(datum.binValue) + strokeWidth / 2);
	            return interpolator(cubicOut(_easeTime));
	          }).attr('y', function (datum) {
	            var interpolator = interpolate$1(0, yScale(0) + strokeWidth / 2 - (datum.binCount + 1) * binWidth);
	            return interpolator(cubicIn(_easeTime));
	          }).attr('stroke', function (datum) {
	            var interpolator = interpolateRgb(_this2.getComputedStyleValue('---color-acc'), _this2.color === 'stimulus' ? datum.signal === 'present' ? _this2.getComputedStyleValue('---color-hr') : _this2.getComputedStyleValue('---color-far') : _this2.color === 'response' ? _this2.getComputedStyleValue("---color-".concat(datum.response)) : _this2.color === 'outcome' ? _this2.getComputedStyleValue("---color-".concat(datum.outcome)) : _this2.getComputedStyleValue('---color-acc'));
	            return interpolator(cubicIn(_easeTime));
	          }).attr('fill', function (datum) {
	            var interpolator = interpolateRgb(_this2.getComputedStyleValue('---color-acc-light'), _this2.color === 'stimulus' ? datum.signal === 'present' ? _this2.getComputedStyleValue('---color-hr-light') : _this2.getComputedStyleValue('---color-far-light') : _this2.color === 'response' ? _this2.getComputedStyleValue("---color-".concat(datum.response, "-light")) : _this2.color === 'outcome' ? _this2.getComputedStyleValue("---color-".concat(datum.outcome, "-light")) : _this2.getComputedStyleValue('---color-acc-light'));
	            return interpolator(cubicIn(_easeTime));
	          });
	        } //  MERGE - Old Trials


	        trialMerge.filter(function (datum) {
	          return !datum.new;
	        }).transition().duration(transitionDuration).ease(cubicOut).attr('x', function (datum) {
	          return xScale(datum.binValue) + strokeWidth / 2;
	        }).attr('y', function (datum) {
	          return yScale(0) + strokeWidth / 2 - (datum.binCount + 1) * binWidth;
	        }).attr('stroke', function (datum) {
	          return _this2.color === 'stimulus' ? datum.signal === 'present' ? _this2.getComputedStyleValue('---color-hr') : _this2.getComputedStyleValue('---color-far') : _this2.color === 'response' ? _this2.getComputedStyleValue("---color-".concat(datum.response)) : _this2.color === 'outcome' ? _this2.getComputedStyleValue("---color-".concat(datum.outcome)) : _this2.getComputedStyleValue('---color-acc');
	        }).attr('fill', function (datum) {
	          return _this2.color === 'stimulus' ? datum.signal === 'present' ? _this2.getComputedStyleValue('---color-hr-light') : _this2.getComputedStyleValue('---color-far-light') : _this2.color === 'response' ? _this2.getComputedStyleValue("---color-".concat(datum.response, "-light")) : _this2.color === 'outcome' ? _this2.getComputedStyleValue("---color-".concat(datum.outcome, "-light")) : _this2.getComputedStyleValue('---color-acc-light');
	        }); //  EXIT

	        trialUpdate.exit().transition().duration(transitionDuration).ease(linear$1).attrTween('stroke', function (datum, index, elements) {
	          var element = elements[index];
	          var interpolator = interpolateRgb(element.getAttribute('stroke'), _this2.getComputedStyleValue('---color-acc'));
	          return function (time) {
	            return interpolator(cubicIn(time));
	          };
	        }).attrTween('fill', function (datum, index, elements) {
	          var element = elements[index];
	          var interpolator = interpolateRgb(element.getAttribute('fill'), _this2.getComputedStyleValue('---color-acc-light'));
	          return function (time) {
	            return interpolator(cubicIn(time));
	          };
	        }).attrTween('x', function (datum, index, elements) {
	          var element = elements[index];
	          var interpolator = interpolate$1(element.getAttribute('x'), 0);
	          return function (time) {
	            return interpolator(cubicIn(time));
	          };
	        }).attrTween('y', function (datum, index, elements) {
	          var element = elements[index];
	          var interpolator = interpolate$1(element.getAttribute('y'), 0);
	          return function (time) {
	            return interpolator(cubicOut(time));
	          };
	        }).remove();
	      } // Overlayer
	      //  ENTER


	      var overlayerEnter = plotEnter.append('g').classed('overlayer', true); // MERGE

	      var overlayerMerge = plotMerge.select('.overlayer'); // Background
	      //  ENTER

	      overlayerEnter.append('rect').classed('background', true); //  MERGE

	      overlayerMerge.select('.background').attr('height', height).attr('width', width);
	      this.drag = false;
	      this.firstUpdate = false;
	    } // Called to pause trial animations!

	  }, {
	    key: "pauseTrial",
	    value: function pauseTrial() {
	      var trialNew = select(this.renderRoot).select('.trial[data-new-trial-ease-time]');
	      trialNew.interrupt('new');
	      trialNew.datum(function (datum) {
	        datum.paused = true;
	        return datum;
	      });
	    } // Called to resume trial animations!

	  }, {
	    key: "resumeTrial",
	    value: function resumeTrial() {
	      var trialNew = select(this.renderRoot).select('.trial[data-new-trial-ease-time]');
	      trialNew.datum(function (datum) {
	        datum.paused = false;
	        return datum;
	      });
	      this.requestUpdate();
	    }
	  }], [{
	    key: "properties",
	    get: function get() {
	      return {
	        color: {
	          attribute: 'color',
	          type: String,
	          reflect: true
	        },
	        distributions: {
	          attribute: 'distributions',
	          type: Boolean,
	          reflect: true
	        },
	        threshold: {
	          attribute: 'threshold',
	          type: Boolean,
	          reflect: true
	        },
	        unequal: {
	          attribute: 'unequal',
	          type: Boolean,
	          reflect: true
	        },
	        sensitivity: {
	          attribute: 'sensitivity',
	          type: Boolean,
	          reflect: true
	        },
	        bias: {
	          attribute: 'bias',
	          type: Boolean,
	          reflect: true
	        },
	        variance: {
	          attribute: 'variance',
	          type: Boolean,
	          reflect: true
	        },
	        histogram: {
	          attribute: 'histogram',
	          type: Boolean,
	          reflect: true
	        },
	        d: {
	          attribute: 'd',
	          type: Number,
	          reflect: true
	        },
	        c: {
	          attribute: 'c',
	          type: Number,
	          reflect: true
	        },
	        s: {
	          attribute: 's',
	          type: Number,
	          reflect: true
	        },
	        far: {
	          attribute: false,
	          type: Number,
	          reflect: false
	        },
	        hr: {
	          attribute: false,
	          type: Number,
	          reflect: false
	        },
	        binWidth: {
	          attribute: false,
	          type: Number,
	          reflect: false
	        },
	        trials: {
	          attribute: false,
	          type: Array,
	          reflect: false
	        },
	        width: {
	          attribute: false,
	          type: Number,
	          reflect: false
	        },
	        height: {
	          attribute: false,
	          type: Number,
	          reflect: false
	        },
	        rem: {
	          attribute: false,
	          type: Number,
	          reflect: false
	        }
	      };
	    }
	  }, {
	    key: "styles",
	    get: function get() {
	      return [_get(_getPrototypeOf(SDTModel), "styles", this), r$2(_templateObject2$7 || (_templateObject2$7 = _taggedTemplateLiteral(["\n        :host {\n          display: inline-block;\n\n          width: 27rem;\n          height: 15rem;\n        }\n\n        .main {\n          width: 100%;\n          height: 100%;\n        }\n\n        text {\n          /* stylelint-disable property-no-vendor-prefix */\n          -webkit-user-select: none;\n          -moz-user-select: none;\n          -ms-user-select: none;\n          user-select: none;\n        }\n\n        .tick {\n          font-size: 0.75rem;\n        }\n\n        .axis-x path,\n        .axis-x line,\n        .axis-y path,\n        .axis-y line,\n        .axis-y2 path,\n        .axis-y2 line {\n          stroke: var(---color-element-border);\n        }\n\n        .noise.interactive,\n        .signal.interactive,\n        .threshold.interactive {\n          cursor: ew-resize;\n\n          filter: url(\"#shadow-2\");\n          outline: none;\n        }\n\n        .signal.unequal {\n          cursor: ns-resize;\n\n          filter: url(\"#shadow-2\");\n          outline: none;\n        }\n\n        .signal.interactive.unequal {\n          cursor: move;\n        }\n\n        .noise.interactive:hover,\n        .signal.interactive:hover,\n        .signal.unequal:hover,\n        .threshold.interactive:hover {\n          filter: url(\"#shadow-4\");\n\n          /* HACK: This gets Safari to correctly apply the filter! */\n          transform: translateX(0);\n        }\n\n        .noise.interactive:hover,\n        .signal.interactive:hover,\n        .signal.unequal:hover,\n        .threshold.interactive:active {\n          filter: url(\"#shadow-8\");\n\n          /* HACK: This gets Safari to correctly apply the filter! */\n          transform: translateY(0);\n        }\n\n        :host(.keyboard) .noise.interactive:focus,\n        :host(.keyboard) .signal.interactive:focus,\n        :host(.keyboard) .signal.unequal:focus,\n        :host(.keyboard) .threshold.interactive:focus {\n          filter: url(\"#shadow-8\");\n\n          /* HACK: This gets Safari to correctly apply the filter! */\n          transform: translateZ(0);\n        }\n\n        .underlayer .background {\n          fill: var(---color-element-background);\n          stroke: none;\n        }\n\n        .overlayer .background {\n          fill: none;\n          stroke: var(---color-element-border);\n          stroke-width: 1;\n          shape-rendering: crispEdges;\n        }\n\n        .title-x,\n        .title-y,\n        .title-y2 {\n          font-weight: 600;\n\n          fill: currentColor;\n        }\n\n        .curve-cr,\n        .curve-fa,\n        .curve-m,\n        .curve-h {\n          fill-opacity: 0.5;\n          stroke: none;\n\n          transition: fill var(---transition-duration) ease;\n        }\n\n        .curve-cr {\n          fill: var(---color-cr);\n        }\n\n        .curve-fa {\n          fill: var(---color-fa);\n        }\n\n        .curve-m {\n          fill: var(---color-m);\n        }\n\n        .curve-h {\n          fill: var(---color-h);\n        }\n\n        :host([color=\"accuracy\"]) .curve-h,\n        :host([color=\"accuracy\"]) .curve-cr {\n          fill: var(---color-correct);\n        }\n\n        :host([color=\"accuracy\"]) .curve-m,\n        :host([color=\"accuracy\"]) .curve-fa {\n          fill: var(---color-error);\n        }\n\n        :host([color=\"stimulus\"]) .curve-cr,\n        :host([color=\"stimulus\"]) .curve-fa {\n          fill: var(---color-far);\n        }\n\n        :host([color=\"stimulus\"]) .curve-m,\n        :host([color=\"stimulus\"]) .curve-h {\n          fill: var(---color-hr);\n        }\n\n        :host([color=\"response\"]) .curve-cr,\n        :host([color=\"response\"]) .curve-m {\n          fill: var(---color-absent);\n        }\n\n        :host([color=\"response\"]) .curve-fa,\n        :host([color=\"response\"]) .curve-h {\n          fill: var(---color-present);\n        }\n\n        :host([color=\"none\"]) .curve-cr,\n        :host([color=\"none\"]) .curve-fa,\n        :host([color=\"none\"]) .curve-m,\n        :host([color=\"none\"]) .curve-h {\n          fill: var(---color-element-enabled);\n        }\n\n        .curve-noise,\n        .curve-signal {\n          fill: none;\n          stroke: var(---color-element-emphasis);\n          stroke-width: 2;\n        }\n\n        .measure-d,\n        .measure-c,\n        .measure-s {\n          pointer-events: none;\n        }\n\n        .threshold .line {\n          stroke: var(---color-element-emphasis);\n          stroke-width: 2;\n        }\n\n        .threshold .handle {\n          fill: var(---color-element-emphasis);\n\n          /* r: 6; HACK: Firefox does not support CSS SVG Geometry Properties */\n        }\n\n        /* Make a larger target for touch users */\n        @media (pointer: coarse) {\n          .threshold.interactive .handle {\n            stroke: #000000;\n            stroke-opacity: 0;\n            stroke-width: 12px;\n          }\n        }\n\n        .measure-d .line,\n        .measure-d .cap-left,\n        .measure-d .cap-right {\n          stroke: var(---color-d);\n          stroke-width: 2;\n          shape-rendering: crispEdges;\n        }\n\n        .measure-d .label {\n          font-size: 0.75rem;\n\n          text-anchor: start;\n          fill: currentColor;\n        }\n\n        .measure-c .line,\n        .measure-c .cap-zero {\n          stroke: var(---color-c);\n          stroke-width: 2;\n          shape-rendering: crispEdges;\n        }\n\n        .measure-c .label {\n          font-size: 0.75rem;\n\n          fill: currentColor;\n        }\n\n        .measure-s .line,\n        .measure-s .cap-left,\n        .measure-s .cap-right {\n          stroke: var(---color-s);\n          stroke-width: 2;\n          shape-rendering: crispEdges;\n        }\n\n        .measure-s .label {\n          font-size: 0.75rem;\n\n          text-anchor: middle;\n          fill: currentColor;\n        }\n      "])))];
	    }
	  }]);

	  return SDTModel;
	}(SDTElement);
	customElements.define('sdt-model', SDTModel);

	var _templateObject$7, _templateObject2$6, _templateObject3$1, _templateObject4$1, _templateObject5$1, _templateObject6, _templateObject7, _templateObject8, _templateObject9, _templateObject10, _templateObject11, _templateObject12, _templateObject13, _templateObject14, _templateObject15, _templateObject16, _templateObject17, _templateObject18, _templateObject19, _templateObject20, _templateObject21, _templateObject22, _templateObject23, _templateObject24, _templateObject25, _templateObject26, _templateObject27, _templateObject28, _templateObject29, _templateObject30, _templateObject31, _templateObject32, _templateObject33, _templateObject34, _templateObject35, _templateObject36, _templateObject37, _templateObject38, _templateObject39, _templateObject40, _templateObject41, _templateObject42, _templateObject43, _templateObject44, _templateObject45, _templateObject46;
	/*
	  SDTTable element
	  <sdt-table>

	  Attributes:
	  Hit; Miss; FalseAlarm; CorrectRejection;
	*/

	var SDTTable = /*#__PURE__*/function (_SDTElement) {
	  _inherits(SDTTable, _SDTElement);

	  var _super = _createSuper(SDTTable);

	  function SDTTable() {
	    var _this;

	    _classCallCheck(this, SDTTable);

	    _this = _super.call(this);
	    _this.numeric = false;
	    _this.summaries = ['stimulusRates', 'responseRates', 'accuracy'];
	    _this.summary = new Set();
	    _this.colors = ['none', 'accuracy', 'stimulus', 'response', 'outcome'];
	    _this.color = 'outcome';
	    _this.h = 40;
	    _this.m = 60;
	    _this.fa = 75;
	    _this.cr = 25;

	    _this.alignState();

	    _this.payoff = false;
	    _this.hPayoff = undefined; // Hit payoff

	    _this.mPayoff = undefined; // Miss payoff

	    _this.crPayoff = undefined; // Correct Rejection payoff

	    _this.faPayoff = undefined; // False Alarm payoff

	    return _this;
	  }

	  _createClass(SDTTable, [{
	    key: "alignState",
	    value: function alignState() {
	      this.hr = SDTMath.hM2Hr(this.h, this.m);
	      this.far = SDTMath.faCr2Far(this.fa, this.cr);
	      this.acc = SDTMath.hMFaCr2Acc(this.h, this.m, this.fa, this.cr);
	      this.ppv = SDTMath.hFa2Ppv(this.h, this.fa);
	      this.fomr = SDTMath.mCr2Fomr(this.m, this.cr);
	    }
	  }, {
	    key: "sendEvent",
	    value: function sendEvent() {
	      this.dispatchEvent(new CustomEvent('sdt-table-change', {
	        detail: {
	          h: this.h,
	          m: this.m,
	          hr: this.hr,
	          fa: this.fa,
	          cr: this.cr,
	          far: this.far,
	          acc: this.acc,
	          ppv: this.ppv,
	          fomr: this.fomr
	        },
	        bubbles: true
	      }));
	    }
	  }, {
	    key: "hInput",
	    value: function hInput(e) {
	      this.h = parseInt(e.target.value, 10);
	      this.alignState();
	      this.sendEvent();
	    }
	  }, {
	    key: "mInput",
	    value: function mInput(e) {
	      this.m = parseInt(e.target.value, 10);
	      this.alignState();
	      this.sendEvent();
	    }
	  }, {
	    key: "faInput",
	    value: function faInput(e) {
	      this.fa = parseInt(e.target.value, 10);
	      this.alignState();
	      this.sendEvent();
	    }
	  }, {
	    key: "crInput",
	    value: function crInput(e) {
	      this.cr = parseInt(e.target.value, 10);
	      this.alignState();
	      this.sendEvent();
	    }
	  }, {
	    key: "hrInput",
	    value: function hrInput(e) {
	      var newhr = parseFloat(e.target.value);
	      var present = this.h + this.m;
	      this.h = Math.round(newhr * present);
	      this.m = present - this.h;
	      this.alignState();
	      this.sendEvent();
	    }
	  }, {
	    key: "farInput",
	    value: function farInput(e) {
	      var newfar = parseFloat(e.target.value);
	      var absent = this.fa + this.cr;
	      this.fa = Math.round(newfar * absent);
	      this.cr = absent - this.fa;
	      this.alignState();
	      this.sendEvent();
	    }
	  }, {
	    key: "accInput",
	    value: function accInput(e) {
	      var newacc = parseFloat(e.target.value);
	      var present = this.h + this.m;
	      var absent = this.fa + this.cr;
	      var x = (this.hr + this.far - 1) / 2; // Rotate into ACC

	      var newhr = x + newacc;
	      var newfar = 1 + x - newacc;

	      if (newfar > 1) {
	        newfar = 1;
	        newhr = newfar + 2 * newacc - 1;
	      }

	      if (newfar < 0) {
	        newfar = 0;
	        newhr = newfar + 2 * newacc - 1;
	      }

	      if (newhr > 1) {
	        newhr = 1;
	        newfar = newhr - 2 * newacc + 1;
	      }

	      if (newhr < 0) {
	        newhr = 0;
	        newfar = newhr - 2 * newacc + 1;
	      }

	      this.h = Math.round(newhr * present);
	      this.m = present - this.h;
	      this.fa = Math.round(newfar * absent);
	      this.cr = absent - this.fa;
	      this.alignState();
	      this.sendEvent();
	    }
	  }, {
	    key: "ppvInput",
	    value: function ppvInput(e) {
	      var newppv = parseFloat(e.target.value);
	      var present = this.h + this.fa;
	      this.h = Math.round(newppv * present);
	      this.fa = present - this.h;
	      this.alignState();
	      this.sendEvent();
	    }
	  }, {
	    key: "fomrInput",
	    value: function fomrInput(e) {
	      var newfomr = parseFloat(e.target.value);
	      var present = this.m + this.cr;
	      this.m = Math.round(newfomr * present);
	      this.cr = present - this.m;
	      this.alignState();
	      this.sendEvent();
	    }
	  }, {
	    key: "render",
	    value: function render() {
	      var payoffFormatter = new Intl.NumberFormat('en-US', {
	        style: 'currency',
	        currency: 'USD',
	        minimumFractionDigits: 0,
	        maximumFractionDigits: 0
	      });
	      this.alignState();
	      var h;
	      var m;
	      var fa;
	      var cr;
	      var hr;
	      var far;
	      var acc;
	      var ppv;
	      var fomr;

	      if (this.numeric) {
	        h = $(_templateObject$7 || (_templateObject$7 = _taggedTemplateLiteral(["\n        <decidable-spinner ?disabled=", " min=\"0\" .value=\"", "\" @input=", ">\n          <span>Hits</span>\n          ", "\n        </decidable-spinner>\n      "])), !this.interactive, this.h, this.hInput.bind(this), this.payoff ? $(_templateObject2$6 || (_templateObject2$6 = _taggedTemplateLiteral(["<span class=\"payoff\">", "</span>"])), payoffFormatter.format(this.hPayoff)) : $(_templateObject3$1 || (_templateObject3$1 = _taggedTemplateLiteral([""]))));
	        m = $(_templateObject4$1 || (_templateObject4$1 = _taggedTemplateLiteral(["\n        <decidable-spinner ?disabled=", " min=\"0\" .value=\"", "\" @input=", ">\n          <span>Misses</span>\n          ", "\n        </decidable-spinner>\n      "])), !this.interactive, this.m, this.mInput.bind(this), this.payoff ? $(_templateObject5$1 || (_templateObject5$1 = _taggedTemplateLiteral(["<span class=\"payoff\">", "</span>"])), payoffFormatter.format(this.mPayoff)) : $(_templateObject6 || (_templateObject6 = _taggedTemplateLiteral([""]))));
	        fa = $(_templateObject7 || (_templateObject7 = _taggedTemplateLiteral(["\n        <decidable-spinner ?disabled=", " min=\"0\" .value=\"", "\" @input=", ">\n          <span>False Alarms</span>\n          ", "\n        </decidable-spinner>\n      "])), !this.interactive, this.fa, this.faInput.bind(this), this.payoff ? $(_templateObject8 || (_templateObject8 = _taggedTemplateLiteral(["<span class=\"payoff\">", "</span>"])), payoffFormatter.format(this.faPayoff)) : $(_templateObject9 || (_templateObject9 = _taggedTemplateLiteral([""]))));
	        cr = $(_templateObject10 || (_templateObject10 = _taggedTemplateLiteral(["\n        <decidable-spinner ?disabled=", " min=\"0\" .value=\"", "\" @input=", ">\n          <span>Correct Rejections</span>\n          ", "\n        </decidable-spinner>\n      "])), !this.interactive, this.cr, this.crInput.bind(this), this.payoff ? $(_templateObject11 || (_templateObject11 = _taggedTemplateLiteral(["<span class=\"payoff\">", "</span>"])), payoffFormatter.format(this.crPayoff)) : $(_templateObject12 || (_templateObject12 = _taggedTemplateLiteral([""]))));
	        hr = $(_templateObject13 || (_templateObject13 = _taggedTemplateLiteral(["\n        <decidable-spinner ?disabled=", " min=\"0\" max=\"1\" step=\".001\" .value=\"", "\" @input=", ">\n          <span>Hit Rate</span>\n        </decidable-spinner>\n      "])), !this.interactive, +this.hr.toFixed(3), this.hrInput.bind(this));
	        far = $(_templateObject14 || (_templateObject14 = _taggedTemplateLiteral(["\n        <decidable-spinner ?disabled=", " min=\"0\" max=\"1\" step=\".001\" .value=\"", "\" @input=", ">\n          <span>False Alarm Rate</span>\n        </decidable-spinner>\n      "])), !this.interactive, +this.far.toFixed(3), this.farInput.bind(this));
	        acc = $(_templateObject15 || (_templateObject15 = _taggedTemplateLiteral(["\n        <decidable-spinner ?disabled=", " min=\"0\" max=\"1\" step=\".001\" .value=\"", "\" @input=", ">\n          <span>Accuracy</span>\n        </decidable-spinner>\n      "])), !this.interactive, +this.acc.toFixed(3), this.accInput.bind(this));
	        ppv = $(_templateObject16 || (_templateObject16 = _taggedTemplateLiteral(["\n        <decidable-spinner ?disabled=", " min=\"0\" max=\"1\" step=\".001\" .value=\"", "\" @input=", ">\n          <span>Positive Predictive Value</span>\n        </decidable-spinner>\n      "])), !this.interactive, +this.ppv.toFixed(3), this.ppvInput.bind(this));
	        fomr = $(_templateObject17 || (_templateObject17 = _taggedTemplateLiteral(["\n        <decidable-spinner ?disabled=", " min=\"0\" max=\"1\" step=\".001\" .value=\"", "\" @input=", ">\n          <span>False Omission Rate</span>\n        </decidable-spinner>\n      "])), !this.interactive, +this.fomr.toFixed(3), this.fomrInput.bind(this));
	      } else {
	        h = $(_templateObject18 || (_templateObject18 = _taggedTemplateLiteral(["<span>Hits</span>\n        ", ""])), this.payoff ? $(_templateObject19 || (_templateObject19 = _taggedTemplateLiteral(["<span class=\"payoff\">", "</span>"])), payoffFormatter.format(this.hPayoff)) : $(_templateObject20 || (_templateObject20 = _taggedTemplateLiteral([""]))));
	        m = $(_templateObject21 || (_templateObject21 = _taggedTemplateLiteral(["<span>Misses</span>\n        ", ""])), this.payoff ? $(_templateObject22 || (_templateObject22 = _taggedTemplateLiteral(["<span class=\"payoff\">", "</span>"])), payoffFormatter.format(this.mPayoff)) : $(_templateObject23 || (_templateObject23 = _taggedTemplateLiteral([""]))));
	        fa = $(_templateObject24 || (_templateObject24 = _taggedTemplateLiteral(["<span>False Alarms</span>\n        ", ""])), this.payoff ? $(_templateObject25 || (_templateObject25 = _taggedTemplateLiteral(["<span class=\"payoff\">", "</span>"])), payoffFormatter.format(this.faPayoff)) : $(_templateObject26 || (_templateObject26 = _taggedTemplateLiteral([""]))));
	        cr = $(_templateObject27 || (_templateObject27 = _taggedTemplateLiteral(["<span>Correct Rejections</span>\n        ", ""])), this.payoff ? $(_templateObject28 || (_templateObject28 = _taggedTemplateLiteral(["<span class=\"payoff\">", "</span>"])), payoffFormatter.format(this.crPayoff)) : $(_templateObject29 || (_templateObject29 = _taggedTemplateLiteral([""]))));
	        hr = $(_templateObject30 || (_templateObject30 = _taggedTemplateLiteral(["<span>Hit Rate</span>"])));
	        far = $(_templateObject31 || (_templateObject31 = _taggedTemplateLiteral(["<span>False Alarm Rate</span>"])));
	        acc = $(_templateObject32 || (_templateObject32 = _taggedTemplateLiteral(["<span>Accuracy</span>"])));
	        ppv = $(_templateObject33 || (_templateObject33 = _taggedTemplateLiteral(["<span>Positive Predictive Value</span>"])));
	        fomr = $(_templateObject34 || (_templateObject34 = _taggedTemplateLiteral(["<span>False Omission Rate</span>"])));
	      }

	      return $(_templateObject35 || (_templateObject35 = _taggedTemplateLiteral(["\n      <table class=", ">\n        <thead>\n          <tr>\n            <th colspan=\"2\" rowspan=\"2\"></th>\n            <th class=\"th th-main\" colspan=\"2\" scope=\"col\">\n              Response\n            </th>\n          </tr>\n          <tr>\n            <th class=\"th th-sub\" scope=\"col\">\n              \"Present\"\n            </th>\n            <th class=\"th th-sub\" scope=\"col\">\n              \"Absent\"\n            </th>\n          </tr>\n        </thead>\n        <tbody>\n          <tr>\n            <th class=\"th th-main\" rowspan=\"2\" scope=\"row\">\n              Signal\n            </th>\n            <th class=\"th th-sub th-left\" scope=\"row\">\n              Present\n            </th>\n            <td class=\"td td-data h\">\n              ", "\n            </td>\n            <td class=\"td td-data m\">\n              ", "\n            </td>\n            ", "\n          </tr>\n          <tr>\n            <th class=\"th th-sub th-left\" scope=\"row\">\n              Absent\n            </th>\n            <td class=\"td td-data fa\">\n              ", "\n            </td>\n            <td class=\"td td-data cr\">\n              ", "\n            </td>\n            ", "\n          </tr>\n          ", "\n        </tbody>\n      </table>"])), this.numeric ? 'numeric' : '', h, m, this.summary.has('stimulusRates') ? $(_templateObject36 || (_templateObject36 = _taggedTemplateLiteral(["\n                <td class=\"td td-summary hr\">\n                  ", "\n                </td>"])), hr) : $(_templateObject37 || (_templateObject37 = _taggedTemplateLiteral([""]))), fa, cr, this.summary.has('stimulusRates') ? $(_templateObject38 || (_templateObject38 = _taggedTemplateLiteral(["\n                <td class=\"td td-summary far\">\n                  ", "\n                </td>"])), far) : $(_templateObject39 || (_templateObject39 = _taggedTemplateLiteral([""]))), this.summary.has('responseRates') || this.summary.has('accuracy') ? $(_templateObject40 || (_templateObject40 = _taggedTemplateLiteral(["\n              <tr>\n                <td colspan=\"2\"></td>\n                ", "\n                ", "\n              </tr>"])), this.summary.has('responseRates') ? $(_templateObject41 || (_templateObject41 = _taggedTemplateLiteral(["\n                    <td class=\"td td-summary ppv\">\n                      ", "\n                    </td>\n                    <td class=\"td td-summary fomr\">\n                      ", "\n                    </td>"])), ppv, fomr) : $(_templateObject42 || (_templateObject42 = _taggedTemplateLiteral(["\n                    <td colspan=\"2\"></td>"]))), this.summary.has('accuracy') ? $(_templateObject43 || (_templateObject43 = _taggedTemplateLiteral(["\n                    <td class=\"td td-summary acc\" rowspan=\"2\">\n                      ", "\n                    </td>"])), acc) : $(_templateObject44 || (_templateObject44 = _taggedTemplateLiteral([""])))) : $(_templateObject45 || (_templateObject45 = _taggedTemplateLiteral([""]))));
	    }
	  }], [{
	    key: "properties",
	    get: function get() {
	      return {
	        numeric: {
	          attribute: 'numeric',
	          type: Boolean,
	          reflect: true
	        },
	        summary: {
	          attribute: 'summary',
	          converter: DecidableConverterSet,
	          reflect: true
	        },
	        color: {
	          attribute: 'color',
	          type: String,
	          reflect: true
	        },
	        h: {
	          attribute: 'hits',
	          type: Number,
	          reflect: true
	        },
	        m: {
	          attribute: 'misses',
	          type: Number,
	          reflect: true
	        },
	        fa: {
	          attribute: 'false-alarms',
	          type: Number,
	          reflect: true
	        },
	        cr: {
	          attribute: 'correct-rejections',
	          type: Number,
	          reflect: true
	        },
	        payoff: {
	          attribute: 'payoff',
	          type: Boolean,
	          reflect: true
	        },
	        hPayoff: {
	          attribute: 'hit-payoff',
	          type: Number,
	          reflect: true
	        },
	        mPayoff: {
	          attribute: 'miss-payoff',
	          type: Number,
	          reflect: true
	        },
	        faPayoff: {
	          attribute: 'false-alarm-payoff',
	          type: Number,
	          reflect: true
	        },
	        crPayoff: {
	          attribute: 'correct-rejection-payoff',
	          type: Number,
	          reflect: true
	        },
	        far: {
	          attribute: false,
	          type: Number,
	          reflect: false
	        },
	        hr: {
	          attribute: false,
	          type: Number,
	          reflect: false
	        },
	        acc: {
	          attribute: false,
	          type: Number,
	          reflect: false
	        },
	        // positive predictive value (https://en.wikipedia.org/wiki/Receiver_operating_characteristic)
	        ppv: {
	          attribute: false,
	          type: Number,
	          reflect: false
	        },
	        // false omission rate (https://en.wikipedia.org/wiki/Receiver_operating_characteristic)
	        // Using "fomr" to avoid keyword "for"
	        fomr: {
	          attribute: false,
	          type: Number,
	          reflect: false
	        }
	      };
	    }
	  }, {
	    key: "styles",
	    get: function get() {
	      return [_get(_getPrototypeOf(SDTTable), "styles", this), r$2(_templateObject46 || (_templateObject46 = _taggedTemplateLiteral(["\n        :host {\n          display: inline-block;\n        }\n\n        /* Overall element */\n        table {\n          text-align: center;\n\n          border-collapse: collapse;\n\n          border: 0;\n        }\n\n        /* Headers */\n        .th-main {\n          padding: 0;\n\n          font-weight: bold;\n        }\n\n        .th-sub {\n          padding: 0 0.25rem;\n\n          font-weight: 600;\n        }\n\n        .th-left {\n          padding-left: 0;\n\n          text-align: right;\n        }\n\n        /* Cells */\n        .td {\n          width: 10rem;\n\n          padding: 0.25rem 0.25rem 0.375rem;\n\n          transition: all var(---transition-duration) ease;\n        }\n\n        .numeric .td {\n          width: 7rem;\n        }\n\n        /* Labels */\n        .payoff {\n          font-weight: 600;\n          line-height: 0.75rem;\n        }\n\n        /* User interaction <input> */\n        .td-data decidable-spinner {\n          --decidable-spinner-input-width: 3.5rem;\n        }\n\n        .td-summary decidable-spinner {\n          --decidable-spinner-input-width: 4.5rem;\n        }\n\n        /* Color schemes & Table emphasis */\n\n        /* (Default) Outcome color scheme */\n        .h {\n          background: var(---color-h-light);\n          border-top: 2px solid var(---color-element-emphasis);\n          border-left: 2px solid var(---color-element-emphasis);\n        }\n\n        .m {\n          background: var(---color-m-light);\n          border-top: 2px solid var(---color-element-emphasis);\n          border-right: 2px solid var(---color-element-emphasis);\n        }\n\n        .fa {\n          background: var(---color-fa-light);\n          border-bottom: 2px solid var(---color-element-emphasis);\n          border-left: 2px solid var(---color-element-emphasis);\n        }\n\n        .cr {\n          background: var(---color-cr-light);\n          border-right: 2px solid var(---color-element-emphasis);\n          border-bottom: 2px solid var(---color-element-emphasis);\n        }\n\n        .hr {\n          background: var(---color-hr-light);\n        }\n\n        .far {\n          background: var(---color-far-light);\n        }\n\n        .acc {\n          background: var(---color-acc-light);\n        }\n\n        .ppv {\n          background: var(---color-present-light);\n        }\n\n        .fomr {\n          background: var(---color-absent-light);\n        }\n\n        /* Accuracy color scheme */\n        :host([color=\"accuracy\"]) .h,\n        :host([color=\"accuracy\"]) .cr {\n          background: var(---color-correct-light);\n        }\n\n        :host([color=\"accuracy\"]) .m,\n        :host([color=\"accuracy\"]) .fa {\n          color: var(---color-text-inverse);\n\n          background: var(---color-error-light);\n        }\n\n        :host([color=\"accuracy\"]) .hr,\n        :host([color=\"accuracy\"]) .far,\n        :host([color=\"accuracy\"]) .ppv,\n        :host([color=\"accuracy\"]) .fomr {\n          background: var(---color-element-background);\n        }\n\n        /* Stimulus color scheme */\n        :host([color=\"stimulus\"]) .cr,\n        :host([color=\"stimulus\"]) .fa {\n          background: var(---color-far-light);\n        }\n\n        :host([color=\"stimulus\"]) .m,\n        :host([color=\"stimulus\"]) .h {\n          background: var(---color-hr-light);\n        }\n\n        :host([color=\"stimulus\"]) .ppv,\n        :host([color=\"stimulus\"]) .fomr,\n        :host([color=\"stimulus\"]) .acc {\n          background: var(---color-element-background);\n        }\n\n        /* Response color scheme */\n        :host([color=\"response\"]) .cr,\n        :host([color=\"response\"]) .m {\n          background: var(---color-absent-light);\n        }\n\n        :host([color=\"response\"]) .fa,\n        :host([color=\"response\"]) .h {\n          background: var(---color-present-light);\n        }\n\n        :host([color=\"response\"]) .hr,\n        :host([color=\"response\"]) .far,\n        :host([color=\"response\"]) .acc {\n          background: var(---color-element-background);\n        }\n\n        /* No color scheme */\n        :host([color=\"none\"]) .cr,\n        :host([color=\"none\"]) .fa,\n        :host([color=\"none\"]) .m,\n        :host([color=\"none\"]) .h,\n        :host([color=\"none\"]) .hr,\n        :host([color=\"none\"]) .far,\n        :host([color=\"none\"]) .ppv,\n        :host([color=\"none\"]) .fomr,\n        :host([color=\"none\"]) .acc {\n          background: var(---color-element-background);\n        }\n      "])))];
	    }
	  }]);

	  return SDTTable;
	}(SDTElement);
	customElements.define('sdt-table', SDTTable);

	// import * as jStat from 'jstat';

	/*
	  CPTMath Static Class - Not intended for instantiation!

	  Variables:
	    x = objective value
	    v = subjective value/utility
	    p = objective probability
	    w = subjective probability/decision weight
	    V = expected value/utility

	    a = alpha (curvature for value function)
	    l = lambda (loss aversion for value function)
	    g = gamma (sensitivity for decision weighting function)

	  Equations:
	    v = x^a, if x >= 0; -l * -x^a, if x < 0
	    w = p^g / (p^g + (1 - p)^g)^(1 / g)
	    V = v * w
	*/
	var CPTMath = /*#__PURE__*/function () {
	  function CPTMath() {
	    _classCallCheck(this, CPTMath);
	  }

	  _createClass(CPTMath, null, [{
	    key: "xal2v",
	    value: function xal2v(x, a, l) {
	      if (x >= 0) {
	        return Math.pow(x, a);
	      } // else (x < 0)


	      return -l * Math.pow(-x, a);
	    }
	  }, {
	    key: "xlv2a",
	    value: function xlv2a(x, l, v) {
	      if (x >= 0) {
	        return Math.log(v) / Math.log(x);
	      } // else (x < 0)


	      return (Math.log(-v) - Math.log(l)) / Math.log(-x);
	    }
	  }, {
	    key: "xav2l",
	    value: function xav2l(x, a, v) {
	      if (x >= 0) {
	        return 1;
	      } // else (x < 0)


	      return -v / Math.pow(-x, a);
	    }
	  }, {
	    key: "pg2w",
	    value: function pg2w(p, g) {
	      return Math.pow(p, g) / Math.pow(Math.pow(p, g) + Math.pow(1 - p, g), 1 / g);
	    }
	  }]);

	  return CPTMath;
	}();

	var _templateObject$6;
	/*
	  CPTElement Base Class - Not intended for instantiation!
	  <sdt-element>
	*/

	var CPTElement = /*#__PURE__*/function (_DecidableElement) {
	  _inherits(CPTElement, _DecidableElement);

	  var _super = _createSuper(CPTElement);

	  function CPTElement() {
	    var _this;

	    _classCallCheck(this, CPTElement);

	    _this = _super.call(this);
	    _this.interactive = false;
	    return _this;
	  }

	  _createClass(CPTElement, null, [{
	    key: "properties",
	    get: function get() {
	      return {
	        interactive: {
	          attribute: 'interactive',
	          type: Boolean,
	          reflect: true
	        }
	      };
	    }
	  }, {
	    key: "colors",
	    get: function get() {
	      return {
	        x: Set1[0],
	        a: Set1[4],
	        l: Set1[5],
	        v: Set1[7],
	        p: Set1[1],
	        g: Set1[2],
	        w: Set1[3],
	        u: Set1[6],
	        chosen: Set1[8],
	        better: '#4545d0',
	        worse: '#f032e6',
	        even: '#10dbc9',
	        correct: '#ffffff',
	        error: '#000000',
	        nr: '#cccccc'
	      };
	    }
	  }, {
	    key: "lights",
	    get: function get() {
	      return Object.keys(CPTElement.colors).reduce(function (acc, cur) {
	        acc[cur] = interpolateRgb(CPTElement.colors[cur], '#ffffff')(0.5);
	        return acc;
	      }, {});
	    }
	  }, {
	    key: "darks",
	    get: function get() {
	      return Object.keys(CPTElement.colors).reduce(function (acc, cur) {
	        acc[cur] = interpolateRgb(CPTElement.colors[cur], '#000000')(0.5);
	        return acc;
	      }, {});
	    }
	  }, {
	    key: "styles",
	    get: function get() {
	      return [_get(_getPrototypeOf(CPTElement), "styles", this), r$2(_templateObject$6 || (_templateObject$6 = _taggedTemplateLiteral(["\n        :host {\n          ---color-x: var(--color-x, ", ");\n          ---color-a: var(--color-a, ", ");\n          ---color-l: var(--color-l, ", ");\n          ---color-v: var(--color-v, ", ");\n          ---color-p: var(--color-p, ", ");\n          ---color-g: var(--color-g, ", ");\n          ---color-w: var(--color-w, ", ");\n          ---color-u: var(--color-u, ", ");\n          ---color-chosen: var(--color-chosen, ", ");\n          ---color-better: var(--color-better, ", ");\n          ---color-worse: var(--color-worse, ", ");\n          ---color-even: var(--color-even, ", ");\n          ---color-correct: var(--color-correct, ", ");\n          ---color-error: var(--color-error, ", ");\n          ---color-nr: var(--color-nr, ", ");\n\n          ---color-x-light: var(--color-x-light, ", ");\n          ---color-a-light: var(--color-a-light, ", ");\n          ---color-l-light: var(--color-l-light, ", ");\n          ---color-v-light: var(--color-v-light, ", ");\n          ---color-p-light: var(--color-p-light, ", ");\n          ---color-g-light: var(--color-g-light, ", ");\n          ---color-w-light: var(--color-w-light, ", ");\n          ---color-u-light: var(--color-u-light, ", ");\n          ---color-chosen-light: var(--color-chosen-light, ", ");\n          ---color-better-light: var(--color-better-light, ", ");\n          ---color-worse-light: var(--color-worse-light, ", ");\n          ---color-even-light: var(--color-even-light, ", ");\n          ---color-correct-light: var(--color-correct-light, ", ");\n          ---color-error-light: var(--color-error-light, ", ");\n          ---color-nr-light: var(--color-nr-light, ", ");\n\n          ---color-x-dark: var(--color-x-dark, ", ");\n          ---color-a-dark: var(--color-a-dark, ", ");\n          ---color-l-dark: var(--color-l-dark, ", ");\n          ---color-v-dark: var(--color-v-dark, ", ");\n          ---color-p-dark: var(--color-p-dark, ", ");\n          ---color-g-dark: var(--color-g-dark, ", ");\n          ---color-w-dark: var(--color-w-dark, ", ");\n          ---color-u-dark: var(--color-u-dark, ", ");\n          ---color-chosen-dark: var(--color-chosen-dark, ", ");\n          ---color-better-dark: var(--color-better-dark, ", ");\n          ---color-worse-dark: var(--color-worse-dark, ", ");\n          ---color-even-dark: var(--color-even-dark, ", ");\n          ---color-correct-dark: var(--color-correct-dark, ", ");\n          ---color-error-dark: var(--color-error-dark, ", ");\n          ---color-nr-dark: var(--color-nr-dark, ", ");\n        }\n      "])), o$3(this.colors.x), o$3(this.colors.a), o$3(this.colors.l), o$3(this.colors.v), o$3(this.colors.p), o$3(this.colors.g), o$3(this.colors.w), o$3(this.colors.u), o$3(this.colors.chosen), o$3(this.colors.better), o$3(this.colors.worse), o$3(this.colors.even), o$3(this.colors.correct), o$3(this.colors.error), o$3(this.colors.nr), o$3(this.lights.x), o$3(this.lights.a), o$3(this.lights.l), o$3(this.lights.v), o$3(this.lights.p), o$3(this.lights.g), o$3(this.lights.w), o$3(this.lights.u), o$3(this.lights.chosen), o$3(this.lights.better), o$3(this.lights.worse), o$3(this.lights.even), o$3(this.lights.correct), o$3(this.lights.error), o$3(this.lights.nr), o$3(this.darks.x), o$3(this.darks.a), o$3(this.darks.l), o$3(this.darks.v), o$3(this.darks.p), o$3(this.darks.g), o$3(this.darks.w), o$3(this.darks.u), o$3(this.darks.chosen), o$3(this.darks.better), o$3(this.darks.worse), o$3(this.darks.even), o$3(this.darks.correct), o$3(this.darks.error), o$3(this.darks.nr))];
	    }
	  }]);

	  return CPTElement;
	}(DecidableElement);

	var _templateObject$5, _templateObject2$5;
	/*
	  CPTProbability element
	  <cpt-probability>

	*** Add handles to lines?

	  Attributes:
	    interactive: true/false

	    p: numeric [0, 1]
	    g: numeric [0, 1]
	    label: string

	  Styles:
	    ??
	*/

	var CPTProbability = /*#__PURE__*/function (_CPTElement) {
	  _inherits(CPTProbability, _CPTElement);

	  var _super = _createSuper(CPTProbability);

	  function CPTProbability() {
	    var _this;

	    _classCallCheck(this, CPTProbability);

	    _this = _super.call(this);
	    _this.firstUpdate = true;
	    _this.drag = false;
	    _this.g = 0.5;
	    _this.p = null;
	    _this.label = '';
	    _this.function = 'default';
	    _this.functions = [{
	      name: 'default',
	      g: _this.g
	    }];
	    _this.probabilities = [{
	      name: 'default',
	      p: _this.p,
	      label: _this.label,
	      function: _this.function
	    }];
	    _this.xl = null;
	    _this.xw = null;
	    _this.pw = null;
	    _this.xs = null;
	    _this.trialCount = null;
	    _this.response = null;
	    _this.width = NaN;
	    _this.height = NaN;
	    _this.rem = NaN;

	    _this.alignState();

	    return _this;
	  }

	  _createClass(CPTProbability, [{
	    key: "alignState",
	    value: function alignState() {
	      var _this2 = this;

	      // Default function
	      this.functions[0].g = this.g; // Default probabilities

	      this.probabilities[0].p = this.p;
	      this.probabilities[0].label = this.label;
	      this.probabilities[0].function = this.function; // Update subjective decision weights

	      this.probabilities.forEach(function (probability) {
	        var myFunction = _this2.functions.find(function (func) {
	          return func.name === probability.function;
	        });

	        probability.w = CPTMath.pg2w(probability.p, myFunction.g);
	      });
	      this.w = this.probabilities[0].w;
	    }
	  }, {
	    key: "trial",
	    value: function trial(xl, xw, pw, xs, _trial, response) {
	      // Remove the old trial
	      if (this.trialCount) this.removeProbability("".concat(this.trialCount));
	      this.xl = xl;
	      this.xw = xw;
	      this.pw = pw;
	      this.xs = xs;
	      this.trialCount = _trial;
	      this.response = response; // Add the new trial

	      this.setProbability(this.pw, "".concat(this.trialCount), '', 'default', true);
	    } // Called to pause trial animations!

	  }, {
	    key: "pauseTrial",
	    value: function pauseTrial() {
	      var lineNew = select(this.renderRoot).selectAll('.lines[data-animating-ease-time-1]');
	      lineNew.interrupt('new-1');
	      lineNew.interrupt('new-2');
	      lineNew.datum(function (datum) {
	        datum.paused = true;
	        return datum;
	      });
	    } // Called to resume trial animations!

	  }, {
	    key: "resumeTrial",
	    value: function resumeTrial() {
	      var lineNew = select(this.renderRoot).selectAll('.lines[data-animating-ease-time-1]');
	      lineNew.datum(function (datum) {
	        datum.paused = false;
	        return datum;
	      });
	      this.requestUpdate();
	    }
	  }, {
	    key: "clearFunctions",
	    value: function clearFunctions() {
	      this.functions.splice(1);
	      this.requestUpdate();
	    }
	  }, {
	    key: "clearProbabilities",
	    value: function clearProbabilities() {
	      this.probabilities.splice(1);
	      this.requestUpdate();
	    }
	  }, {
	    key: "clear",
	    value: function clear() {
	      this.clearFunctions();
	      this.clearProbabilities();
	    }
	  }, {
	    key: "removeFunction",
	    value: function removeFunction(name) {
	      this.functions = this.functions.filter(function (func) {
	        return func.name !== name;
	      });
	      this.requestUpdate();
	    }
	  }, {
	    key: "removeProbability",
	    value: function removeProbability(name) {
	      this.probabilities = this.probabilities.filter(function (probability) {
	        return probability.name !== name;
	      });
	      this.requestUpdate();
	    }
	  }, {
	    key: "remove",
	    value: function remove(name) {
	      this.removeFunction(name);
	      this.removeProbability(name);
	    }
	  }, {
	    key: "getFunction",
	    value: function getFunction() {
	      var name = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'default';
	      return this.functions.find(function (func) {
	        return func.name === name;
	      });
	    }
	  }, {
	    key: "getProbability",
	    value: function getProbability() {
	      var name = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'default';
	      return this.probabilities.find(function (probability) {
	        return probability.name === name;
	      });
	    }
	  }, {
	    key: "get",
	    value: function get() {
	      var name = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'default';
	      return _objectSpread2(_objectSpread2({}, this.getFunction(name)), this.getProbability(name));
	    }
	  }, {
	    key: "setFunction",
	    value: function setFunction(g) {
	      var name = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'default';

	      if (name === 'default') {
	        this.g = g;
	      }

	      var myFunction = this.functions.find(function (func) {
	        return func.name === name;
	      });

	      if (myFunction === undefined) {
	        this.functions.push({
	          name: name,
	          g: g
	        });
	      } else {
	        myFunction.g = g;
	      }

	      this.requestUpdate();
	    }
	  }, {
	    key: "setProbability",
	    value: function setProbability(p) {
	      var name = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'default';
	      var label = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : '';
	      var func = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : name;
	      var trial = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : false;

	      if (name === 'default') {
	        this.p = p;
	        this.label = label;
	      }

	      var myProbability = this.probabilities.find(function (probability) {
	        return probability.name === name;
	      });

	      if (myProbability === undefined) {
	        this.probabilities.push({
	          name: name,
	          p: p,
	          label: label,
	          function: func,
	          trial: trial,
	          new: trial
	        });
	      } else {
	        myProbability.p = p;
	        myProbability.label = label;
	        myProbability.function = func;
	      }

	      this.requestUpdate();
	    }
	  }, {
	    key: "set",
	    value: function set(p, g) {
	      var name = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 'default';
	      var label = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : '';
	      var func = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : name;
	      this.setFunction(g, name);
	      this.setProbability(p, name, label, func);
	    }
	  }, {
	    key: "render",
	    value: function render() {
	      // eslint-disable-line class-methods-use-this
	      return $(_templateObject$5 || (_templateObject$5 = _taggedTemplateLiteral(["\n      ", "\n    "])), CPTElement.svgFilters);
	    }
	  }, {
	    key: "getDimensions",
	    value: function getDimensions() {
	      this.width = parseFloat(this.getComputedStyleValue('width'), 10);
	      this.height = parseFloat(this.getComputedStyleValue('height'), 10);
	      this.rem = parseFloat(getComputedStyle(document.documentElement).getPropertyValue('font-size'), 10); // console.log(`cpt-value: width = ${this.width}, height = ${this.height}, rem = ${this.rem}`);
	    }
	  }, {
	    key: "connectedCallback",
	    value: function connectedCallback() {
	      _get(_getPrototypeOf(CPTProbability.prototype), "connectedCallback", this).call(this);

	      window.addEventListener('resize', this.getDimensions.bind(this));
	    }
	  }, {
	    key: "disconnectedCallback",
	    value: function disconnectedCallback() {
	      window.removeEventListener('resize', this.getDimensions.bind(this));

	      _get(_getPrototypeOf(CPTProbability.prototype), "disconnectedCallback", this).call(this);
	    }
	  }, {
	    key: "firstUpdated",
	    value: function firstUpdated(changedProperties) {
	      _get(_getPrototypeOf(CPTProbability.prototype), "firstUpdated", this).call(this, changedProperties); // Get the width and height after initial render/update has occurred
	      // HACK Edge: Edge doesn't have width/height until after a 0ms timeout


	      window.setTimeout(this.getDimensions.bind(this), 0);
	    }
	  }, {
	    key: "update",
	    value: function update(changedProperties) {
	      var _this3 = this;

	      _get(_getPrototypeOf(CPTProbability.prototype), "update", this).call(this, changedProperties);

	      this.alignState(); // Bail out if we can't get the width/height/rem

	      if (Number.isNaN(this.width) || Number.isNaN(this.height) || Number.isNaN(this.rem)) {
	        return;
	      }

	      var elementWidth = this.width;
	      var elementHeight = this.height;
	      var elementSize = Math.min(elementWidth, elementHeight);
	      var margin = {
	        top: 2 * this.rem,
	        bottom: 3 * this.rem,
	        left: 3 * this.rem,
	        right: 2 * this.rem
	      };
	      var height = elementSize - (margin.top + margin.bottom);
	      var width = elementSize - (margin.left + margin.right);
	      var transitionDuration = parseInt(this.getComputedStyleValue('---transition-duration'), 10); // X Scale

	      var xScale = linear().domain([0, 1]).range([0, width]);
	      this.xScale = xScale; // Y Scale

	      var yScale = linear().domain([1, 0]).range([0, height]);
	      this.yScale = yScale; // Drag behaviors

	      var curveDrag = drag().subject(function (event, datum) {
	        return {
	          x: event.x,
	          y: _this3.yScale(CPTMath.pg2w(_this3.xScale.invert(event.x), datum.g)),
	          p: _this3.xScale.invert(event.x),
	          g: datum.g,
	          w: CPTMath.pg2w(_this3.xScale.invert(event.x), datum.g)
	        };
	      }).on('start', function (event) {
	        var element = event.currentTarget;
	        select(element).classed('dragging', true);
	      }).on('drag', function (event, datum) {
	        _this3.drag = true;

	        var p = _this3.xScale.invert(event.x);

	        var w = _this3.yScale.invert(event.y);

	        var pDiff = p - event.subject.p;
	        var wDiff = w - event.subject.w;
	        var distance = Math.pow(Math.pow(pDiff, 2) + Math.pow(wDiff, 2), 0.5);
	        var g = event.subject.p > event.subject.w ? pDiff > wDiff ? event.subject.g - distance : event.subject.g + distance : pDiff > wDiff ? event.subject.g + distance : event.subject.g - distance; // Clamp g to legal values [0, 1]

	        datum.g = g > 1 ? 1 : g < 0 ? 0 : g;

	        if (datum.name === 'default') {
	          _this3.g = datum.g;
	        }

	        _this3.alignState();

	        _this3.requestUpdate();

	        _this3.dispatchEvent(new CustomEvent('cpt-probability-change', {
	          detail: _this3.get(datum.name),
	          bubbles: true
	        }));
	      }).on('end', function (event) {
	        var element = event.currentTarget;
	        select(element).classed('dragging', false);
	      });
	      var pointDrag = drag().subject(function (event, datum) {
	        return {
	          x: _this3.xScale(datum.p),
	          y: _this3.yScale(datum.w)
	        };
	      }).on('start', function (event) {
	        var element = event.currentTarget;
	        select(element).classed('dragging', true);
	      }).on('drag', function (event, datum) {
	        _this3.drag = true;

	        var p = _this3.xScale.invert(event.x); // Clamp p to visible plot


	        datum.p = p < 0 ? 0 : p > 1 ? 1 : p;

	        if (datum.name === 'default') {
	          _this3.p = datum.p;
	        }

	        _this3.alignState();

	        _this3.requestUpdate();

	        _this3.dispatchEvent(new CustomEvent('cpt-probability-change', {
	          detail: {
	            name: datum.name,
	            p: datum.p,
	            w: datum.w,
	            label: datum.label,
	            g: _this3.getFunction(datum.function).g
	          },
	          bubbles: true
	        }));
	      }).on('end', function (event) {
	        var element = event.currentTarget;
	        select(element).classed('dragging', false);
	      }); // Line for value

	      var line$1 = line().x(function (datum) {
	        return xScale(datum.p);
	      }).y(function (datum) {
	        return yScale(datum.w);
	      }); // Svg
	      //  DATA-JOIN

	      var svgUpdate = select(this.renderRoot).selectAll('.main').data([{
	        width: this.width,
	        height: this.height,
	        rem: this.rem
	      }]); //  ENTER

	      var svgEnter = svgUpdate.enter().append('svg').classed('main', true); //  MERGE

	      var svgMerge = svgEnter.merge(svgUpdate).attr('viewBox', "0 0 ".concat(elementSize, " ").concat(elementSize)); // Plot
	      //  ENTER

	      var plotEnter = svgEnter.append('g').classed('plot', true); //  MERGE

	      var plotMerge = svgMerge.select('.plot').attr('transform', "translate(".concat(margin.left, ", ").concat(margin.top, ")")); // Clippath
	      //  ENTER

	      plotEnter.append('clipPath').attr('id', 'clip-cpt-value').append('rect'); //  MERGE

	      plotMerge.select('clipPath rect').attr('height', height + 1).attr('width', width + 1); // Underlayer
	      //  ENTER

	      var underlayerEnter = plotEnter.append('g').classed('underlayer', true); // MERGE

	      var underlayerMerge = plotMerge.select('.underlayer'); // Background
	      //  ENTER

	      underlayerEnter.append('rect').classed('background', true); //  MERGE

	      underlayerMerge.select('.background').attr('height', height).attr('width', width); // X Axis/Scale
	      //  ENTER

	      underlayerEnter.append('g').classed('scale-x', true); //  MERGE

	      var scaleXMerge = underlayerMerge.select('.scale-x').attr('transform', "translate(0, ".concat(height, ")"));
	      var scaleXTransition = scaleXMerge.transition().duration(transitionDuration * 2) // Extra long transition!
	      .ease(cubicOut).call(axisBottom(xScale)).attr('font-size', null).attr('font-family', null);
	      scaleXTransition.selectAll('line, path').attr('stroke', null); // X Axis Title
	      //  ENTER

	      var titleXEnter = underlayerEnter.append('text').classed('title-x', true).attr('text-anchor', 'middle');
	      titleXEnter.append('tspan').classed('name', true).text('Probability (');
	      titleXEnter.append('tspan').classed('math-var p', true).text('p');
	      titleXEnter.append('tspan').classed('name', true).text(')'); //  MERGE

	      underlayerMerge.select('.title-x').attr('transform', "translate(".concat(width / 2, ", ").concat(height + 2.25 * this.rem, ")")); // Y Axis/Scale
	      //  ENTER

	      underlayerEnter.append('g').classed('scale-y', true); // MERGE

	      var scaleYTransition = underlayerMerge.select('.scale-y').transition().duration(transitionDuration * 2) // Extra long transition!
	      .ease(cubicOut).call(axisLeft(yScale)).attr('font-size', null).attr('font-family', null);
	      scaleYTransition.selectAll('line, path').attr('stroke', null); // Y Axis Title
	      //  ENTER

	      var titleYEnter = underlayerEnter.append('text').classed('title-y', true).attr('text-anchor', 'middle');
	      titleYEnter.append('tspan').classed('name', true).text('Decision Weight (');
	      titleYEnter.append('tspan').classed('math-var v', true).text('w');
	      titleYEnter.append('tspan').classed('name', true).text(')'); //  MERGE

	      underlayerMerge.select('.title-y').attr('transform', "translate(".concat(-2 * this.rem, ", ").concat(height / 2, ")rotate(-90)")); // No-Subjectivity Line
	      //  ENTER

	      underlayerEnter.append('line').classed('diagonal', true); //  MERGE

	      underlayerMerge.select('.diagonal').transition().duration(transitionDuration * 2) // Extra long transition!
	      .attr('x1', xScale(0)).attr('y1', yScale(0)).attr('x2', xScale(1)).attr('y2', yScale(1)); // Content
	      //  ENTER

	      plotEnter.append('g').classed('content', true); //  MERGE

	      var contentMerge = plotMerge.select('.content'); // Indicator lines
	      //  DATA-JOIN

	      var lineUpdate = contentMerge.selectAll('.lines').data(this.probabilities.filter(function (probability) {
	        return probability.p;
	      }), function (datum) {
	        return datum.name;
	      }); //  ENTER

	      var lineEnter = lineUpdate.enter().append('g').classed('lines', true); //  ENTER - All

	      lineEnter.each(function (datum, index, elements) {
	        var element = elements[index];
	        var selection = select(element);
	        selection.append('line').classed('line-p above', true);
	        selection.append('line').classed('line-p below', true);
	        selection.append('line').classed('line-w before', true);
	        selection.append('line').classed('line-w after', true);
	      }); //  ENTER - Animating

	      lineEnter.filter(function (datum) {
	        return datum.new;
	      }).attr('data-animating-ease-time-1', 0).attr('data-animating-ease-time-2', 0).each(function (datum, index, elements) {
	        var element = elements[index];
	        var selection = select(element);
	        selection.select('.line-p.above').attr('x1', xScale(datum.p)).attr('x2', xScale(datum.p)).attr('y1', yScale(1)).attr('y2', yScale(1));
	        selection.select('.line-p.below').attr('x1', xScale(datum.p)).attr('x2', xScale(datum.p)).attr('y1', yScale(0)).attr('y2', yScale(0));
	        selection.select('.line-w.before').attr('x1', xScale(datum.p)).attr('x2', xScale(datum.p)).attr('y1', yScale(datum.w)).attr('y2', yScale(datum.w));
	        selection.select('.line-w.after').attr('x1', xScale(datum.p)).attr('x2', xScale(datum.p)).attr('y1', yScale(datum.w)).attr('y2', yScale(datum.w));
	      }); //  MERGE

	      var lineMerge = lineEnter.merge(lineUpdate); //  MERGE - Active Animating

	      var lineMergeActive = lineMerge.filter(function (datum) {
	        return datum.new && !datum.paused;
	      });

	      if (!lineMergeActive.empty()) {
	        var easeTime1 = lineMergeActive.attr('data-animating-ease-time-1');
	        var easeTime2 = lineMergeActive.attr('data-animating-ease-time-2');

	        var scaleIn1 = function scaleIn1(time) {
	          return linear().domain([0, 1]).range([easeTime1, 1])(time);
	        };

	        var scaleIn1Inverse = function scaleIn1Inverse(time) {
	          return linear().range([0, 1]).domain([easeTime1, 1])(time);
	        };

	        var scaleIn2 = function scaleIn2(time) {
	          return linear().domain([0, 1]).range([easeTime2, 1])(time);
	        };

	        var scaleIn2Inverse = function scaleIn2Inverse(time) {
	          return linear().range([0, 1]).domain([easeTime2, 1])(time);
	        };

	        var scaleOutGenerator1 = function scaleOutGenerator1(easeFunction) {
	          return function (time) {
	            return linear().domain([easeFunction(easeTime1), 1]).range([0, 1])(easeFunction(time));
	          };
	        };

	        var scaleOutGenerator2 = function scaleOutGenerator2(easeFunction) {
	          return function (time) {
	            return linear().domain([easeFunction(easeTime2), 1]).range([0, 1])(easeFunction(time));
	          };
	        };

	        lineMergeActive.transition('new-1').duration(function () {
	          return Math.floor(transitionDuration * (1 - easeTime1));
	        }).ease(scaleIn1).attr('data-animating-ease-time-1', 1).tween('animating', function (datum, index, elements) {
	          var element = elements[index];
	          var selection = select(element);
	          var interpolateP = interpolate$1(element.p !== undefined ? element.p : datum.p, datum.p);
	          var interpolateG = interpolate$1(element.g !== undefined ? element.g : _this3.getFunction(datum.function).g, _this3.getFunction(datum.function).g);
	          var interpolateAbove = interpolate$1(yScale.invert(selection.select('.line-p.above').attr('y1')), datum.w);
	          var interpolateBelow = interpolate$1(yScale.invert(selection.select('.line-p.below').attr('y1')), datum.w);
	          return function (time) {
	            element.p = interpolateP(cubicOut(scaleIn1Inverse(time)));
	            element.g = interpolateG(cubicOut(scaleIn1Inverse(time)));
	            element.w = CPTMath.pg2w(element.p, element.g);
	            selection.select('.line-p.above').attr('x1', xScale(element.p)).attr('x2', xScale(element.p)).attr('y1', yScale(interpolateAbove(scaleOutGenerator1(cubicIn)(time)))).attr('y2', yScale(1));
	            selection.select('.line-p.below').attr('x1', xScale(element.p)).attr('x2', xScale(element.p)).attr('y1', yScale(interpolateBelow(scaleOutGenerator1(cubicIn)(time)))).attr('y2', yScale(0));
	          };
	        }).transition('new-2').duration(function () {
	          return Math.floor(transitionDuration * (1 - easeTime2));
	        }).ease(scaleIn2).attr('data-animating-ease-time-2', 1).tween('animating', function (datum, index, elements) {
	          var element = elements[index];
	          var selection = select(element);
	          var interpolateP = interpolate$1(element.p !== undefined ? element.p : datum.p, datum.p);
	          var interpolateG = interpolate$1(element.g !== undefined ? element.g : _this3.getFunction(datum.function).g, _this3.getFunction(datum.function).g);
	          var interpolateBefore = interpolate$1(xScale.invert(selection.select('.line-w.before').attr('x1')), 0);
	          var interpolateAfter = interpolate$1(xScale.invert(selection.select('.line-w.after').attr('x1')), 1);
	          return function (time) {
	            element.p = interpolateP(cubicOut(scaleIn2Inverse(time)));
	            element.g = interpolateG(cubicOut(scaleIn2Inverse(time)));
	            element.w = CPTMath.pg2w(element.p, element.g);
	            selection.select('.line-w.before').attr('x1', xScale(interpolateBefore(scaleOutGenerator2(cubicOut)(time)))).attr('x2', xScale(element.p)).attr('y1', yScale(element.w)).attr('y2', yScale(element.w));
	            selection.select('.line-w.after').attr('x1', xScale(interpolateAfter(scaleOutGenerator2(cubicOut)(time)))).attr('x2', xScale(element.p)).attr('y1', yScale(element.w)).attr('y2', yScale(element.w));
	          };
	        }).on('end', function (datum, index, elements) {
	          var element = elements[index];
	          element.removeAttribute('data-animating-ease-time-1');
	          element.removeAttribute('data-animating-ease-time-2');
	          datum.new = false;

	          _this3.dispatchEvent(new CustomEvent('decision-response', {
	            detail: {
	              trial: _this3.trialCount,
	              xl: _this3.xl,
	              xw: _this3.xw,
	              pw: _this3.pw,
	              xs: _this3.xs,
	              response: _this3.response
	            },
	            bubbles: true
	          }));
	        });
	      } //  MERGE - Paused Animating


	      var lineMergePaused = lineMerge.filter(function (datum) {
	        return datum.new && datum.paused;
	      });

	      if (!lineMergePaused.empty()) {
	        var _easeTime = lineMergePaused.attr('data-animating-ease-time-1');

	        var _easeTime2 = lineMergePaused.attr('data-animating-ease-time-2');

	        lineMergePaused.transition().duration(this.drag ? 0 : this.firstUpdate ? transitionDuration * 2 : transitionDuration).ease(cubicOut).tween('paused', function (datum, index, elements) {
	          var element = elements[index];
	          var selection = select(element);
	          var interpolateP = interpolate$1(element.p !== undefined ? element.p : datum.p, datum.p);
	          var interpolateG = interpolate$1(element.g !== undefined ? element.g : _this3.getFunction(datum.function).g, _this3.getFunction(datum.function).g);
	          var interpolateAbove = interpolate$1(1, datum.w);
	          var interpolateBelow = interpolate$1(0, datum.w);
	          var interpolateBefore = interpolate$1(datum.p, 0);
	          var interpolateAfter = interpolate$1(datum.p, 1);
	          return function (time) {
	            element.p = interpolateP(time);
	            element.g = interpolateG(time);
	            element.w = CPTMath.pg2w(element.p, element.g);
	            selection.select('.line-p.above').attr('x1', xScale(element.p)).attr('x2', xScale(element.p)).attr('y1', yScale(interpolateAbove(cubicIn(_easeTime)))).attr('y2', yScale(1));
	            selection.select('.line-p.below').attr('x1', xScale(element.p)).attr('x2', xScale(element.p)).attr('y1', yScale(interpolateBelow(cubicIn(_easeTime)))).attr('y2', yScale(0));
	            selection.select('.line-w.before').attr('x1', xScale(interpolateBefore(cubicOut(_easeTime2)))).attr('x2', xScale(element.p)).attr('y1', yScale(element.w)).attr('y2', yScale(element.w));
	            selection.select('.line-w.after').attr('x1', xScale(interpolateAfter(cubicOut(_easeTime2)))).attr('x2', xScale(element.p)).attr('y1', yScale(element.w)).attr('y2', yScale(element.w));
	          };
	        });
	      } //  MERGE - Non-animating


	      lineMerge.filter(function (datum) {
	        return !datum.new;
	      }).transition().duration(this.drag ? 0 : this.firstUpdate ? transitionDuration * 2 : transitionDuration).ease(cubicOut).tween('non-animating', function (datum, index, elements) {
	        var element = elements[index];
	        var selection = select(element);
	        var interpolateP = interpolate$1(element.p !== undefined ? element.p : datum.p, datum.p);
	        var interpolateG = interpolate$1(element.g !== undefined ? element.g : _this3.getFunction(datum.function).g, _this3.getFunction(datum.function).g);
	        return function (time) {
	          element.p = interpolateP(time);
	          element.g = interpolateG(time);
	          element.w = CPTMath.pg2w(element.p, element.g);
	          selection.select('.line-p.above').attr('x1', xScale(element.p)).attr('x2', xScale(element.p)).attr('y1', yScale(element.w)).attr('y2', yScale(1));
	          selection.select('.line-p.below').attr('x1', xScale(element.p)).attr('x2', xScale(element.p)).attr('y1', yScale(element.w)).attr('y2', yScale(0));
	          selection.select('.line-w.before').attr('x1', xScale(0)).attr('x2', xScale(element.p)).attr('y1', yScale(element.w)).attr('y2', yScale(element.w));
	          selection.select('.line-w.after').attr('x1', xScale(1)).attr('x2', xScale(element.p)).attr('y1', yScale(element.w)).attr('y2', yScale(element.w));
	        };
	      }); //  EXIT
	      // NOTE: Could add a transition here

	      lineUpdate.exit().remove(); // Probability Curve
	      //  DATA-JOIN

	      var curveUpdate = contentMerge.selectAll('.curve').data(this.functions, function (datum) {
	        return datum.name;
	      }); //  ENTER

	      var curveEnter = curveUpdate.enter().append('path').classed('curve', true).attr('clip-path', 'url(#clip-cpt-value)'); //  MERGE

	      var curveMerge = curveEnter.merge(curveUpdate);

	      if (this.firstUpdate || changedProperties.has('interactive')) {
	        if (this.interactive) {
	          curveMerge.attr('tabindex', 0).classed('interactive', true).call(curveDrag).on('keydown', function (event, datum) {
	            if (['ArrowUp', 'ArrowDown', 'ArrowRight', 'ArrowLeft'].includes(event.key)) {
	              var g = datum.g; // eslint-disable-line prefer-destructuring

	              switch (event.key) {
	                case 'ArrowUp':
	                case 'ArrowLeft':
	                  g += event.shiftKey ? 0.01 : 0.05;
	                  break;

	                case 'ArrowDown':
	                case 'ArrowRight':
	                  g -= event.shiftKey ? 0.01 : 0.05;
	                  break;

	              } // Clamp g to legal values [0, 1]


	              g = g < 0 ? 0 : g > 1 ? 1 : g;

	              if (g !== datum.g) {
	                datum.g = g;

	                if (datum.name === 'default') {
	                  _this3.g = datum.g;
	                }

	                _this3.alignState();

	                _this3.requestUpdate();

	                _this3.dispatchEvent(new CustomEvent('cpt-probability-change', {
	                  detail: _this3.get(datum.name),
	                  bubbles: true
	                }));
	              }

	              event.preventDefault();
	            }
	          });
	        } else {
	          curveMerge.attr('tabindex', null).classed('interactive', false).on('drag', null).on('keydown', null);
	        }
	      }

	      curveMerge.transition().duration(this.drag ? 0 : this.firstUpdate ? transitionDuration * 2 : transitionDuration).ease(cubicOut).attrTween('d', function (datum, index, elements) {
	        var element = elements[index];
	        var interpolateG = interpolate$1(element.g !== undefined ? element.g : datum.g, datum.g);
	        return function (time) {
	          element.g = interpolateG(time);
	          var curve = range(xScale.range()[0], xScale.range()[1] + 1, 1).map(function (range) {
	            return {
	              p: xScale.invert(range),
	              w: CPTMath.pg2w(xScale.invert(range), element.g)
	            };
	          });
	          return line$1(curve);
	        };
	      }); //  EXIT
	      // NOTE: Could add a transition here

	      curveUpdate.exit().remove(); // Point
	      //  DATA-JOIN

	      var pointUpdate = contentMerge.selectAll('.point').data(this.probabilities.filter(function (probability) {
	        return probability.p;
	      }), function (datum) {
	        return datum.name;
	      }); //  ENTER

	      var pointEnter = pointUpdate.enter().append('g').classed('point', true);
	      pointEnter.append('circle').classed('circle', true).attr('r', 6);
	      /* HACK: Firefox does not support CSS SVG Geometry Properties */

	      pointEnter.append('text').classed('label', true); //  MERGE

	      var pointMerge = pointEnter.merge(pointUpdate);
	      pointMerge.select('text').text(function (datum) {
	        return datum.label;
	      }); // Interactive points

	      pointMerge.filter(function (datum) {
	        return _this3.interactive && !datum.trial;
	      }).attr('tabindex', 0).classed('interactive', true).call(pointDrag).on('keydown', function (event, datum) {
	        if (['ArrowUp', 'ArrowDown', 'ArrowRight', 'ArrowLeft'].includes(event.key)) {
	          var p = datum.p; // eslint-disable-line prefer-destructuring

	          switch (event.key) {
	            case 'ArrowUp':
	            case 'ArrowRight':
	              p += event.shiftKey ? 0.01 : 0.05;
	              break;

	            case 'ArrowDown':
	            case 'ArrowLeft':
	              p -= event.shiftKey ? 0.01 : 0.05;
	              break;

	          } // Clamp p to visible plot


	          p = p < 0 ? 0 : p > 1 ? 1 : p;

	          if (p !== datum.p) {
	            datum.p = p;

	            if (datum.name === 'default') {
	              _this3.p = datum.p;
	            }

	            _this3.alignState();

	            _this3.requestUpdate();

	            _this3.dispatchEvent(new CustomEvent('cpt-probability-change', {
	              detail: {
	                name: datum.name,
	                p: datum.p,
	                w: datum.w,
	                label: datum.label,
	                g: _this3.getFunction(datum.function).g
	              },
	              bubbles: true
	            }));
	          }

	          event.preventDefault();
	        }
	      }); // Non-interactive points

	      pointMerge.filter(function (datum) {
	        return !_this3.interactive || datum.trial;
	      }).attr('tabindex', null).classed('interactive', false).on('drag', null).on('keydown', null); // All points

	      pointMerge.transition().duration(this.drag ? 0 : this.firstUpdate ? transitionDuration * 2 : transitionDuration).ease(cubicOut).attrTween('transform', function (datum, index, elements) {
	        var element = elements[index];
	        var interpolateP = interpolate$1(element.p !== undefined ? element.p : datum.p, datum.p);
	        var interpolateG = interpolate$1(element.g !== undefined ? element.g : _this3.getFunction(datum.function).g, _this3.getFunction(datum.function).g);
	        return function (time) {
	          element.p = interpolateP(time);
	          element.g = interpolateG(time);
	          return "translate(\n            ".concat(xScale(element.p), ",\n            ").concat(yScale(CPTMath.pg2w(element.p, element.g)), "\n          )");
	        };
	      }); //  EXIT
	      // NOTE: Could add a transition here

	      pointUpdate.exit().remove();
	      this.drag = false; // this.sdt = false;

	      this.firstUpdate = false;
	    }
	  }], [{
	    key: "properties",
	    get: function get() {
	      return {
	        p: {
	          attribute: 'probability',
	          type: Number,
	          reflect: true
	        },
	        g: {
	          attribute: 'gamma',
	          type: Number,
	          reflect: true
	        },
	        label: {
	          attribute: 'label',
	          type: String,
	          reflect: true
	        },
	        w: {
	          attribute: false,
	          type: Number,
	          reflect: false
	        },
	        width: {
	          attribute: false,
	          type: Number,
	          reflect: false
	        },
	        height: {
	          attribute: false,
	          type: Number,
	          reflect: false
	        },
	        rem: {
	          attribute: false,
	          type: Number,
	          reflect: false
	        }
	      };
	    }
	  }, {
	    key: "styles",
	    get: function get() {
	      return [_get(_getPrototypeOf(CPTProbability), "styles", this), r$2(_templateObject2$5 || (_templateObject2$5 = _taggedTemplateLiteral(["\n        :host {\n          display: inline-block;\n\n          width: 20rem;\n          height: 20rem;\n        }\n\n        .main {\n          width: 100%;\n          height: 100%;\n        }\n\n        text {\n          /* stylelint-disable property-no-vendor-prefix */\n          -webkit-user-select: none;\n          -moz-user-select: none;\n          -ms-user-select: none;\n          user-select: none;\n        }\n\n        .curve.interactive {\n          cursor: nwse-resize;\n\n          filter: url(\"#shadow-2\");\n          outline: none;\n        }\n\n        .curve.interactive:hover {\n          filter: url(\"#shadow-4\");\n        }\n\n        .curve.interactive:active {\n          filter: url(\"#shadow-8\");\n        }\n\n        :host(.keyboard) .curve.interactive:focus {\n          filter: url(\"#shadow-8\");\n        }\n\n        .point.interactive {\n          cursor: nesw-resize;\n\n          filter: url(\"#shadow-2\");\n          outline: none;\n\n          /* HACK: This gets Safari to correctly apply the filter! */\n          /* https://github.com/emilbjorklund/svg-weirdness/issues/27 */\n          stroke: #000000;\n          stroke-opacity: 0;\n          stroke-width: 0;\n        }\n\n        /* Make a larger target for touch users */\n        @media (pointer: coarse) {\n          .point.interactive .circle {\n            stroke: #000000;\n            stroke-opacity: 0;\n            stroke-width: 12px;\n          }\n        }\n\n        .point.interactive:hover {\n          filter: url(\"#shadow-4\");\n\n          /* HACK: This gets Safari to correctly apply the filter! */\n          stroke: #ff0000;\n        }\n\n        .point.interactive:active {\n          filter: url(\"#shadow-8\");\n\n          /* HACK: This gets Safari to correctly apply the filter! */\n          stroke: #00ff00;\n        }\n\n        :host(.keyboard) .point.interactive:focus {\n          filter: url(\"#shadow-8\");\n\n          /* HACK: This gets Safari to correctly apply the filter! */\n          stroke: #0000ff;\n        }\n\n        .background {\n          fill: var(---color-element-background);\n          stroke: var(---color-element-border);\n          stroke-width: 1;\n          shape-rendering: crispEdges;\n        }\n\n        .title-x,\n        .title-y {\n          font-weight: 600;\n\n          fill: currentColor;\n        }\n\n        .tick {\n          font-size: 0.75rem;\n        }\n\n        .scale-x path,\n        .scale-x line,\n        .scale-y path,\n        .scale-y line {\n          stroke: var(---color-element-border);\n        }\n\n        .diagonal {\n          stroke: var(---color-element-border);\n          stroke-dasharray: 4;\n          stroke-width: 1;\n        }\n\n        .curve {\n          fill: none;\n          stroke: var(---color-element-emphasis);\n          stroke-width: 2;\n        }\n\n        .line-p,\n        .line-w {\n          fill: none;\n          stroke-width: 2;\n        }\n\n        .line-p {\n          stroke: var(---color-p);\n        }\n\n        .line-w {\n          stroke: var(---color-w);\n        }\n\n        .point .circle {\n          fill: var(---color-element-emphasis);\n\n          /* r: 6; HACK: Firefox does not support CSS SVG Geometry Properties */\n        }\n\n        .point .label {\n          font-size: 0.75rem;\n\n          dominant-baseline: middle;\n          text-anchor: middle;\n\n          fill: var(---color-text-inverse);\n        }\n      "])))];
	    }
	  }]);

	  return CPTProbability;
	}(CPTElement);
	customElements.define('cpt-probability', CPTProbability);

	var _templateObject$4, _templateObject2$4;
	/*
	  CPTValue element
	  <cpt-value>

	*** Add handles to lines?

	  Attributes:
	    interactive: true/false

	    x: numeric (-infinity, infinity)
	    a: numeric [0, 1]
	    l: numeric [0, 100]
	    label: string

	  Styles:
	    ??
	*/

	var CPTValue = /*#__PURE__*/function (_CPTElement) {
	  _inherits(CPTValue, _CPTElement);

	  var _super = _createSuper(CPTValue);

	  function CPTValue() {
	    var _this;

	    _classCallCheck(this, CPTValue);

	    _this = _super.call(this);
	    _this.firstUpdate = true;
	    _this.drag = false;
	    _this.a = 0.5;
	    _this.l = 2;
	    _this.x = null;
	    _this.label = '';
	    _this.function = 'default';
	    _this.functions = [{
	      name: 'default',
	      a: _this.a,
	      l: _this.l
	    }];
	    _this.values = [{
	      name: 'default',
	      x: _this.x,
	      label: _this.label,
	      function: _this.function
	    }];
	    _this.xl = null;
	    _this.xw = null;
	    _this.pw = null;
	    _this.xs = null;
	    _this.trialCount = null;
	    _this.response = null;
	    _this.width = NaN;
	    _this.height = NaN;
	    _this.rem = NaN;

	    _this.alignState();

	    return _this;
	  }

	  _createClass(CPTValue, [{
	    key: "alignState",
	    value: function alignState() {
	      var _this2 = this;

	      // Default function
	      this.functions[0].a = this.a;
	      this.functions[0].l = this.l; // Default values

	      this.values[0].x = this.x;
	      this.values[0].label = this.label;
	      this.values[0].function = this.function; // Update subjective values

	      this.values.forEach(function (value) {
	        var myFunction = _this2.functions.find(function (func) {
	          return func.name === value.function;
	        });

	        value.v = CPTMath.xal2v(value.x, myFunction.a, myFunction.l);
	      });
	      this.v = this.values[0].v;
	    }
	  }, {
	    key: "trial",
	    value: function trial(xl, xw, pw, xs, _trial, response) {
	      // Remove the old trial
	      if (this.trialCount) this.removeValue("".concat(this.trialCount, "-w"));
	      if (this.trialCount) this.removeValue("".concat(this.trialCount, "-s"));
	      this.xl = xl;
	      this.xw = xw;
	      this.pw = pw;
	      this.xs = xs;
	      this.trialCount = _trial;
	      this.response = response; // Add the new trial

	      this.setValue(this.xw, "".concat(this.trialCount, "-w"), 'g', 'default', true);
	      this.setValue(this.xs, "".concat(this.trialCount, "-s"), 's', 'default', true);
	    } // Called to pause trial animations!

	  }, {
	    key: "pauseTrial",
	    value: function pauseTrial() {
	      var lineNew = select(this.renderRoot).selectAll('.lines[data-animating-ease-time-1]');
	      lineNew.interrupt('new-1');
	      lineNew.interrupt('new-2');
	      lineNew.datum(function (datum) {
	        datum.paused = true;
	        return datum;
	      });
	    } // Called to resume trial animations!

	  }, {
	    key: "resumeTrial",
	    value: function resumeTrial() {
	      var lineNew = select(this.renderRoot).selectAll('.lines[data-animating-ease-time-1]');
	      lineNew.datum(function (datum) {
	        datum.paused = false;
	        return datum;
	      });
	      this.requestUpdate();
	    }
	  }, {
	    key: "clearFunctions",
	    value: function clearFunctions() {
	      this.functions.splice(1);
	      this.requestUpdate();
	    }
	  }, {
	    key: "clearValues",
	    value: function clearValues() {
	      this.values.splice(1);
	      this.requestUpdate();
	    }
	  }, {
	    key: "clear",
	    value: function clear() {
	      this.clearFunctions();
	      this.clearValues();
	    }
	  }, {
	    key: "removeFunction",
	    value: function removeFunction(name) {
	      this.functions = this.functions.filter(function (func) {
	        return func.name !== name;
	      });
	      this.requestUpdate();
	    }
	  }, {
	    key: "removeValue",
	    value: function removeValue(name) {
	      this.values = this.values.filter(function (value) {
	        return value.name !== name;
	      });
	      this.requestUpdate();
	    }
	  }, {
	    key: "remove",
	    value: function remove(name) {
	      this.removeFunction(name);
	      this.removeValue(name);
	    }
	  }, {
	    key: "getFunction",
	    value: function getFunction() {
	      var name = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'default';
	      return this.functions.find(function (func) {
	        return func.name === name;
	      });
	    }
	  }, {
	    key: "getValue",
	    value: function getValue() {
	      var name = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'default';
	      return this.values.find(function (value) {
	        return value.name === name;
	      });
	    }
	  }, {
	    key: "get",
	    value: function get() {
	      var name = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'default';
	      return _objectSpread2(_objectSpread2({}, this.getFunction(name)), this.getValue(name));
	    }
	  }, {
	    key: "setFunction",
	    value: function setFunction(a, l) {
	      var name = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 'default';

	      if (name === 'default') {
	        this.a = a;
	        this.l = l;
	      }

	      var myFunction = this.functions.find(function (func) {
	        return func.name === name;
	      });

	      if (myFunction === undefined) {
	        this.functions.push({
	          name: name,
	          a: a,
	          l: l
	        });
	      } else {
	        myFunction.a = a;
	        myFunction.l = l;
	      }

	      this.requestUpdate();
	    }
	  }, {
	    key: "setValue",
	    value: function setValue(x) {
	      var name = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'default';
	      var label = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : '';
	      var func = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : name;
	      var trial = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : false;

	      if (name === 'default') {
	        this.x = x;
	        this.label = label;
	      }

	      var myValue = this.values.find(function (value) {
	        return value.name === name;
	      });

	      if (myValue === undefined) {
	        this.values.push({
	          name: name,
	          x: x,
	          label: label,
	          function: func,
	          trial: trial,
	          new: trial
	        });
	      } else {
	        myValue.x = x;
	        myValue.label = label;
	        myValue.function = func;
	      }

	      this.requestUpdate();
	    }
	  }, {
	    key: "set",
	    value: function set(x, a, l) {
	      var name = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 'default';
	      var label = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : '';
	      var func = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : name;
	      this.setFunction(a, l, name);
	      this.setValue(x, name, label, func);
	    }
	  }, {
	    key: "render",
	    value: function render() {
	      // eslint-disable-line class-methods-use-this
	      return $(_templateObject$4 || (_templateObject$4 = _taggedTemplateLiteral(["\n      ", "\n    "])), CPTElement.svgFilters);
	    }
	  }, {
	    key: "getDimensions",
	    value: function getDimensions() {
	      this.width = parseFloat(this.getComputedStyleValue('width'), 10);
	      this.height = parseFloat(this.getComputedStyleValue('height'), 10);
	      this.rem = parseFloat(getComputedStyle(document.documentElement).getPropertyValue('font-size'), 10); // console.log(`cpt-value: width = ${this.width}, height = ${this.height}, rem = ${this.rem}`);
	    }
	  }, {
	    key: "connectedCallback",
	    value: function connectedCallback() {
	      _get(_getPrototypeOf(CPTValue.prototype), "connectedCallback", this).call(this);

	      window.addEventListener('resize', this.getDimensions.bind(this));
	    }
	  }, {
	    key: "disconnectedCallback",
	    value: function disconnectedCallback() {
	      window.removeEventListener('resize', this.getDimensions.bind(this));

	      _get(_getPrototypeOf(CPTValue.prototype), "disconnectedCallback", this).call(this);
	    }
	  }, {
	    key: "firstUpdated",
	    value: function firstUpdated(changedProperties) {
	      _get(_getPrototypeOf(CPTValue.prototype), "firstUpdated", this).call(this, changedProperties); // Get the width and height after initial render/update has occurred
	      // HACK Edge: Edge doesn't have width/height until after a 0ms timeout


	      window.setTimeout(this.getDimensions.bind(this), 0);
	    }
	  }, {
	    key: "update",
	    value: function update(changedProperties) {
	      var _this3 = this;

	      _get(_getPrototypeOf(CPTValue.prototype), "update", this).call(this, changedProperties);

	      this.alignState(); // Bail out if we can't get the width/height/rem

	      if (Number.isNaN(this.width) || Number.isNaN(this.height) || Number.isNaN(this.rem)) {
	        return;
	      }

	      var elementWidth = this.width;
	      var elementHeight = this.height;
	      var elementSize = Math.min(elementWidth, elementHeight);
	      var margin = {
	        top: 2 * this.rem,
	        bottom: 3 * this.rem,
	        left: 3 * this.rem,
	        right: 2 * this.rem
	      };
	      var height = elementSize - (margin.top + margin.bottom);
	      var width = elementSize - (margin.left + margin.right);
	      var transitionDuration = parseInt(this.getComputedStyleValue('---transition-duration'), 10);
	      var domainScale = 20; // X Scale

	      var xScale = linear().domain([-domainScale, domainScale]).range([0, width]);
	      this.xScale = xScale; // Y Scale

	      var yScale = linear().domain([domainScale, -domainScale]).range([0, height]);
	      this.yScale = yScale; // Drag behaviors

	      var curvePDrag = drag().subject(function (event, datum) {
	        return {
	          x: event.x,
	          y: _this3.yScale(CPTMath.xal2v(_this3.xScale.invert(event.x), datum.a, datum.l))
	        };
	      }).on('start', function (event) {
	        var element = event.currentTarget;
	        select(element).classed('dragging', true);
	      }).on('drag', function (event, datum) {
	        _this3.drag = true;

	        var x = _this3.xScale.invert(event.x);

	        var v = _this3.yScale.invert(event.y);

	        var a = CPTMath.xlv2a(x, datum.l, v); // Clamp a to legal values [0, 1]

	        datum.a = Number.isNaN(a) || a < 0 || a > 1 || x < 0 || v < 0 ? x > v ? 0 : 1 : a;

	        if (datum.name === 'default') {
	          _this3.a = datum.a;
	        }

	        _this3.alignState();

	        _this3.requestUpdate();

	        _this3.dispatchEvent(new CustomEvent('cpt-value-change', {
	          detail: _this3.get(datum.name),
	          bubbles: true
	        }));
	      }).on('end', function (event) {
	        var element = event.currentTarget;
	        select(element).classed('dragging', false);
	      });
	      var curveNDrag = drag().subject(function (event, datum) {
	        return {
	          x: event.x,
	          y: _this3.yScale(CPTMath.xal2v(_this3.xScale.invert(event.x), datum.a, datum.l))
	        };
	      }).on('start', function (event) {
	        var element = event.currentTarget;
	        select(element).classed('dragging', true);
	      }).on('drag', function (event, datum) {
	        _this3.drag = true;

	        var x = _this3.xScale.invert(event.x);

	        var v = _this3.yScale.invert(event.y);

	        var l = CPTMath.xav2l(x, datum.a, v); // Clamp l to legal values [0, ?

	        datum.l = Number.isNaN(l) || l < 0 || l > 100 || x > 0 || v > 0 ? x > v ? 100 : 0 : l;

	        if (datum.name === 'default') {
	          _this3.l = datum.l;
	        }

	        _this3.alignState();

	        _this3.requestUpdate();

	        _this3.dispatchEvent(new CustomEvent('cpt-value-change', {
	          detail: _this3.get(datum.name),
	          bubbles: true
	        }));
	      }).on('end', function (event) {
	        var element = event.currentTarget;
	        select(element).classed('dragging', false);
	      });
	      var pointDrag = drag().subject(function (event, datum) {
	        return {
	          x: _this3.xScale(datum.x),
	          y: _this3.yScale(datum.v)
	        };
	      }).on('start', function (event) {
	        var element = event.currentTarget;
	        select(element).classed('dragging', true);
	      }).on('drag', function (event, datum) {
	        _this3.drag = true;

	        var x = _this3.xScale.invert(event.x); // Clamp x to visible plot


	        datum.x = x < -domainScale ? -domainScale : x > domainScale ? domainScale : x;

	        if (datum.name === 'default') {
	          _this3.x = datum.x;
	        }

	        _this3.alignState();

	        _this3.requestUpdate();

	        _this3.dispatchEvent(new CustomEvent('cpt-value-change', {
	          detail: {
	            name: datum.name,
	            x: datum.x,
	            v: datum.v,
	            label: datum.label,
	            a: _this3.getFunction(datum.function).a,
	            l: _this3.getFunction(datum.function).l
	          },
	          bubbles: true
	        }));
	      }).on('end', function (event) {
	        var element = event.currentTarget;
	        select(element).classed('dragging', false);
	      }); // Line for value

	      var line$1 = line().x(function (datum) {
	        return xScale(datum.x);
	      }).y(function (datum) {
	        return yScale(datum.v);
	      }); // Svg
	      //  DATA-JOIN

	      var svgUpdate = select(this.renderRoot).selectAll('.main').data([{
	        width: this.width,
	        height: this.height,
	        rem: this.rem
	      }]); //  ENTER

	      var svgEnter = svgUpdate.enter().append('svg').classed('main', true); //  MERGE

	      var svgMerge = svgEnter.merge(svgUpdate).attr('viewBox', "0 0 ".concat(elementSize, " ").concat(elementSize)); // Plot
	      //  ENTER

	      var plotEnter = svgEnter.append('g').classed('plot', true); //  MERGE

	      var plotMerge = svgMerge.select('.plot').attr('transform', "translate(".concat(margin.left, ", ").concat(margin.top, ")")); // Clippath
	      //  ENTER

	      plotEnter.append('clipPath').attr('id', 'clip-cpt-value').append('rect'); //  MERGE

	      plotMerge.select('clipPath rect').attr('height', height + 1).attr('width', width + 1); // Underlayer
	      //  ENTER

	      var underlayerEnter = plotEnter.append('g').classed('underlayer', true); // MERGE

	      var underlayerMerge = plotMerge.select('.underlayer'); // Background
	      //  ENTER

	      underlayerEnter.append('rect').classed('background', true); //  MERGE

	      underlayerMerge.select('.background').attr('height', height).attr('width', width); // X Scale
	      //  ENTER

	      underlayerEnter.append('g').classed('scale-x', true); //  MERGE

	      var scaleXMerge = underlayerMerge.select('.scale-x').attr('transform', "translate(0, ".concat(yScale(-domainScale), ")"));
	      var scaleXTransition = scaleXMerge.transition().duration(transitionDuration * 2) // Extra long transition!
	      .ease(cubicOut).call(axisBottom(xScale)).attr('font-size', null).attr('font-family', null);
	      scaleXTransition.selectAll('line, path').attr('stroke', null); // X Axis
	      //  ENTER

	      underlayerEnter.append('line').classed('axis-x', true); //  MERGE

	      underlayerMerge.select('.axis-x').transition().duration(transitionDuration).ease(cubicOut).attr('x1', xScale(-domainScale)).attr('x2', xScale(domainScale)).attr('y1', yScale(0)).attr('y2', yScale(0)); // X Axis Title
	      //  ENTER

	      var titleXEnter = underlayerEnter.append('text').classed('title-x', true).attr('text-anchor', 'middle');
	      titleXEnter.append('tspan').classed('name', true).text('Objective Value (');
	      titleXEnter.append('tspan').classed('math-var x', true).text('x');
	      titleXEnter.append('tspan').classed('name', true).text(')'); //  MERGE

	      underlayerMerge.select('.title-x').attr('transform', "translate(".concat(width / 2, ", ").concat(height + 2.25 * this.rem, ")")); // Y Scale
	      //  ENTER

	      underlayerEnter.append('g').classed('scale-y', true); // MERGE

	      var scaleYTransition = underlayerMerge.select('.scale-y').transition().duration(transitionDuration * 2) // Extra long transition!
	      .ease(cubicOut).call(axisLeft(yScale)).attr('font-size', null).attr('font-family', null);
	      scaleYTransition.selectAll('line, path').attr('stroke', null); // Y Axis
	      //  ENTER

	      underlayerEnter.append('line').classed('axis-y', true); //  MERGE

	      underlayerMerge.select('.axis-y').transition().duration(transitionDuration).ease(cubicOut).attr('x1', xScale(0)).attr('x2', xScale(0)).attr('y1', yScale(domainScale)).attr('y2', yScale(-domainScale)); // Y Axis Title
	      //  ENTER

	      var titleYEnter = underlayerEnter.append('text').classed('title-y', true).attr('text-anchor', 'middle');
	      titleYEnter.append('tspan').classed('name', true).text('Subjective Value (');
	      titleYEnter.append('tspan').classed('math-var v', true).text('v');
	      titleYEnter.append('tspan').classed('name', true).text(')'); //  MERGE

	      underlayerMerge.select('.title-y').attr('transform', "translate(".concat(-2 * this.rem, ", ").concat(height / 2, ")rotate(-90)")); // No-Subjectivity Line
	      //  ENTER

	      underlayerEnter.append('line').classed('diagonal', true); //  MERGE

	      underlayerMerge.select('.diagonal').transition().duration(transitionDuration * 2) // Extra long transition!
	      .ease(cubicOut).attr('x1', xScale(-domainScale)).attr('y1', yScale(-domainScale)).attr('x2', xScale(domainScale)).attr('y2', yScale(domainScale)); // Content
	      //  ENTER

	      plotEnter.append('g').classed('content', true); //  MERGE

	      var contentMerge = plotMerge.select('.content'); // Indicator lines
	      //  DATA-JOIN

	      var lineUpdate = contentMerge.selectAll('.lines').data(this.values.filter(function (value) {
	        return value.x;
	      }), function (datum) {
	        return datum.name;
	      }); //  ENTER

	      var lineEnter = lineUpdate.enter().append('g').classed('lines', true); //  ENTER - All

	      lineEnter.each(function (datum, index, elements) {
	        var element = elements[index];
	        var selection = select(element);
	        selection.append('line').classed('line-x above', true);
	        selection.append('line').classed('line-x below', true);
	        selection.append('line').classed('line-v before', true);
	        selection.append('line').classed('line-v after', true);
	      }); //  ENTER - Animating

	      lineEnter.filter(function (datum) {
	        return datum.new;
	      }).attr('data-animating-ease-time-1', 0).attr('data-animating-ease-time-2', 0).each(function (datum, index, elements) {
	        var element = elements[index];
	        var selection = select(element);
	        selection.select('.line-x.above').attr('x1', xScale(datum.x)).attr('x2', xScale(datum.x)).attr('y1', yScale(domainScale)).attr('y2', yScale(domainScale));
	        selection.select('.line-x.below').attr('x1', xScale(datum.x)).attr('x2', xScale(datum.x)).attr('y1', yScale(-domainScale)).attr('y2', yScale(-domainScale));
	        selection.select('.line-v.before').attr('x1', xScale(datum.x)).attr('x2', xScale(datum.x)).attr('y1', yScale(datum.v)).attr('y2', yScale(datum.v));
	        selection.select('.line-v.after').attr('x1', xScale(datum.x)).attr('x2', xScale(datum.x)).attr('y1', yScale(datum.v)).attr('y2', yScale(datum.v));
	      }); //  MERGE

	      var lineMerge = lineEnter.merge(lineUpdate); //  MERGE - Active Animating

	      var lineMergeActive = lineMerge.filter(function (datum) {
	        return datum.new && !datum.paused;
	      });

	      if (!lineMergeActive.empty()) {
	        var easeTime1 = lineMergeActive.attr('data-animating-ease-time-1');
	        var easeTime2 = lineMergeActive.attr('data-animating-ease-time-2');

	        var scaleIn1 = function scaleIn1(time) {
	          return linear().domain([0, 1]).range([easeTime1, 1])(time);
	        };

	        var scaleIn1Inverse = function scaleIn1Inverse(time) {
	          return linear().range([0, 1]).domain([easeTime1, 1])(time);
	        };

	        var scaleIn2 = function scaleIn2(time) {
	          return linear().domain([0, 1]).range([easeTime2, 1])(time);
	        };

	        var scaleIn2Inverse = function scaleIn2Inverse(time) {
	          return linear().range([0, 1]).domain([easeTime2, 1])(time);
	        };

	        var scaleOutGenerator1 = function scaleOutGenerator1(easeFunction) {
	          return function (time) {
	            return linear().domain([easeFunction(easeTime1), 1]).range([0, 1])(easeFunction(time));
	          };
	        };

	        var scaleOutGenerator2 = function scaleOutGenerator2(easeFunction) {
	          return function (time) {
	            return linear().domain([easeFunction(easeTime2), 1]).range([0, 1])(easeFunction(time));
	          };
	        };

	        lineMergeActive.transition('new-1').duration(function () {
	          return Math.floor(transitionDuration * (1 - easeTime1));
	        }).ease(scaleIn1).attr('data-animating-ease-time-1', 1).tween('animating', function (datum, index, elements) {
	          var element = elements[index];
	          var selection = select(element);
	          var interpolateX = interpolate$1(element.x !== undefined ? element.x : datum.x, datum.x);
	          var interpolateA = interpolate$1(element.a !== undefined ? element.a : _this3.getFunction(datum.function).a, _this3.getFunction(datum.function).a);
	          var interpolateL = interpolate$1(element.l !== undefined ? element.l : _this3.getFunction(datum.function).l, _this3.getFunction(datum.function).l);
	          var interpolateAbove = interpolate$1(yScale.invert(selection.select('.line-x.above').attr('y1')), datum.v);
	          var interpolateBelow = interpolate$1(yScale.invert(selection.select('.line-x.below').attr('y1')), datum.v);
	          return function (time) {
	            element.x = interpolateX(cubicOut(scaleIn1Inverse(time)));
	            element.a = interpolateA(cubicOut(scaleIn1Inverse(time)));
	            element.l = interpolateL(cubicOut(scaleIn1Inverse(time)));
	            element.v = CPTMath.xal2v(element.x, element.a, element.l);
	            selection.select('.line-x.above').attr('x1', xScale(element.x)).attr('x2', xScale(element.x)).attr('y1', yScale(interpolateAbove(scaleOutGenerator1(cubicIn)(time)))).attr('y2', yScale(domainScale));
	            selection.select('.line-x.below').attr('x1', xScale(element.x)).attr('x2', xScale(element.x)).attr('y1', yScale(interpolateBelow(scaleOutGenerator1(cubicIn)(time)))).attr('y2', yScale(-domainScale));
	          };
	        }).transition('new-2').duration(function () {
	          return Math.floor(transitionDuration * (1 - easeTime2));
	        }).ease(scaleIn2).attr('data-animating-ease-time-2', 1).tween('animating', function (datum, index, elements) {
	          var element = elements[index];
	          var selection = select(element);
	          var interpolateX = interpolate$1(element.x !== undefined ? element.x : datum.x, datum.x);
	          var interpolateA = interpolate$1(element.a !== undefined ? element.a : _this3.getFunction(datum.function).a, _this3.getFunction(datum.function).a);
	          var interpolateL = interpolate$1(element.l !== undefined ? element.l : _this3.getFunction(datum.function).l, _this3.getFunction(datum.function).l);
	          var interpolateBefore = interpolate$1(xScale.invert(selection.select('.line-v.before').attr('x1')), -domainScale);
	          var interpolateAfter = interpolate$1(xScale.invert(selection.select('.line-v.after').attr('x1')), domainScale);
	          return function (time) {
	            element.x = interpolateX(cubicOut(scaleIn2Inverse(time)));
	            element.a = interpolateA(cubicOut(scaleIn2Inverse(time)));
	            element.l = interpolateL(cubicOut(scaleIn2Inverse(time)));
	            element.v = CPTMath.xal2v(element.x, element.a, element.l);
	            selection.select('.line-v.before').attr('x1', xScale(interpolateBefore(scaleOutGenerator2(cubicOut)(time)))).attr('x2', xScale(element.x)).attr('y1', yScale(element.v)).attr('y2', yScale(element.v));
	            selection.select('.line-v.after').attr('x1', xScale(interpolateAfter(scaleOutGenerator2(cubicOut)(time)))).attr('x2', xScale(element.x)).attr('y1', yScale(element.v)).attr('y2', yScale(element.v));
	          };
	        }).on('end', function (datum, index, elements) {
	          var element = elements[index];
	          element.removeAttribute('data-animating-ease-time-1');
	          element.removeAttribute('data-animating-ease-time-2');
	          datum.new = false;

	          _this3.dispatchEvent(new CustomEvent('decision-response', {
	            detail: {
	              trial: _this3.trialCount,
	              xl: _this3.xl,
	              xw: _this3.xw,
	              pw: _this3.pw,
	              xs: _this3.xs,
	              response: _this3.response
	            },
	            bubbles: true
	          }));
	        });
	      } //  MERGE - Paused Animating


	      var lineMergePaused = lineMerge.filter(function (datum) {
	        return datum.new && datum.paused;
	      });

	      if (!lineMergePaused.empty()) {
	        var _easeTime = lineMergePaused.attr('data-animating-ease-time-1');

	        var _easeTime2 = lineMergePaused.attr('data-animating-ease-time-2');

	        lineMergePaused.transition().duration(this.drag ? 0 : this.firstUpdate ? transitionDuration * 2 : transitionDuration).ease(cubicOut).tween('paused', function (datum, index, elements) {
	          var element = elements[index];
	          var selection = select(element);
	          var interpolateX = interpolate$1(element.x !== undefined ? element.x : datum.x, datum.x);
	          var interpolateA = interpolate$1(element.a !== undefined ? element.a : _this3.getFunction(datum.function).a, _this3.getFunction(datum.function).a);
	          var interpolateL = interpolate$1(element.l !== undefined ? element.l : _this3.getFunction(datum.function).l, _this3.getFunction(datum.function).l);
	          var interpolateAbove = interpolate$1(domainScale, datum.v);
	          var interpolateBelow = interpolate$1(-domainScale, datum.v);
	          var interpolateBefore = interpolate$1(datum.x, -domainScale);
	          var interpolateAfter = interpolate$1(datum.x, domainScale);
	          return function (time) {
	            element.x = interpolateX(time);
	            element.a = interpolateA(time);
	            element.l = interpolateL(time);
	            element.v = CPTMath.xal2v(element.x, element.a, element.l);
	            selection.select('.line-x.above').attr('x1', xScale(element.x)).attr('x2', xScale(element.x)).attr('y1', yScale(interpolateAbove(cubicIn(_easeTime)))).attr('y2', yScale(domainScale));
	            selection.select('.line-x.below').attr('x1', xScale(element.x)).attr('x2', xScale(element.x)).attr('y1', yScale(interpolateBelow(cubicIn(_easeTime)))).attr('y2', yScale(-domainScale));
	            selection.select('.line-v.before').attr('x1', xScale(interpolateBefore(cubicOut(_easeTime2)))).attr('x2', xScale(element.x)).attr('y1', yScale(element.v)).attr('y2', yScale(element.v));
	            selection.select('.line-v.after').attr('x1', xScale(interpolateAfter(cubicOut(_easeTime2)))).attr('x2', xScale(element.x)).attr('y1', yScale(element.v)).attr('y2', yScale(element.v));
	          };
	        });
	      } //  MERGE - Non-animating


	      lineMerge.filter(function (datum) {
	        return !datum.new;
	      }).transition().duration(this.drag ? 0 : this.firstUpdate ? transitionDuration * 2 : transitionDuration).ease(cubicOut).tween('non-animating', function (datum, index, elements) {
	        var element = elements[index];
	        var selection = select(element);
	        var interpolateX = interpolate$1(element.x !== undefined ? element.x : datum.x, datum.x);
	        var interpolateA = interpolate$1(element.a !== undefined ? element.a : _this3.getFunction(datum.function).a, _this3.getFunction(datum.function).a);
	        var interpolateL = interpolate$1(element.l !== undefined ? element.l : _this3.getFunction(datum.function).l, _this3.getFunction(datum.function).l);
	        return function (time) {
	          element.x = interpolateX(time);
	          element.a = interpolateA(time);
	          element.l = interpolateL(time);
	          element.v = CPTMath.xal2v(element.x, element.a, element.l);
	          selection.select('.line-x.above').attr('x1', xScale(element.x)).attr('x2', xScale(element.x)).attr('y1', yScale(element.v)).attr('y2', yScale(domainScale));
	          selection.select('.line-x.below').attr('x1', xScale(element.x)).attr('x2', xScale(element.x)).attr('y1', yScale(element.v)).attr('y2', yScale(-domainScale));
	          selection.select('.line-v.before').attr('x1', xScale(-domainScale)).attr('x2', xScale(element.x)).attr('y1', yScale(element.v)).attr('y2', yScale(element.v));
	          selection.select('.line-v.after').attr('x1', xScale(domainScale)).attr('x2', xScale(element.x)).attr('y1', yScale(element.v)).attr('y2', yScale(element.v));
	        };
	      }); //  EXIT
	      // NOTE: Could add a transition here

	      lineUpdate.exit().remove(); // Positive Value Curve
	      //  DATA-JOIN

	      var curvePUpdate = contentMerge.selectAll('.curve-p').data(this.functions, function (datum) {
	        return datum.name;
	      }); //  ENTER

	      var curvePEnter = curvePUpdate.enter().append('path').classed('curve-p', true).attr('clip-path', 'url(#clip-cpt-value)'); //  MERGE

	      var curvePMerge = curvePEnter.merge(curvePUpdate);

	      if (this.firstUpdate || changedProperties.has('interactive')) {
	        if (this.interactive) {
	          curvePMerge.attr('tabindex', 0).classed('interactive', true).call(curvePDrag).on('keydown', function (event, datum) {
	            if (['ArrowUp', 'ArrowDown', 'ArrowRight', 'ArrowLeft'].includes(event.key)) {
	              var a = datum.a; // eslint-disable-line prefer-destructuring

	              switch (event.key) {
	                case 'ArrowUp':
	                case 'ArrowLeft':
	                  a += event.shiftKey ? 0.01 : 0.05;
	                  break;

	                case 'ArrowDown':
	                case 'ArrowRight':
	                  a -= event.shiftKey ? 0.01 : 0.05;
	                  break;

	              } // Clamp a to legal values [0, 1]


	              a = a < 0 ? 0 : a > 1 ? 1 : a;

	              if (a !== datum.a) {
	                datum.a = a;

	                if (datum.name === 'default') {
	                  _this3.a = datum.a;
	                }

	                _this3.alignState();

	                _this3.requestUpdate();

	                _this3.dispatchEvent(new CustomEvent('cpt-value-change', {
	                  detail: _this3.get(datum.name),
	                  bubbles: true
	                }));
	              }

	              event.preventDefault();
	            }
	          });
	        } else {
	          curvePMerge.attr('tabindex', null).classed('interactive', false).on('drag', null).on('keydown', null);
	        }
	      }

	      curvePMerge.transition().duration(this.drag ? 0 : this.firstUpdate ? transitionDuration * 2 : transitionDuration).ease(cubicOut).attrTween('d', function (datum, index, elements) {
	        var element = elements[index];
	        var interpolateA = interpolate$1(element.a !== undefined ? element.a : datum.a, datum.a);
	        var interpolateL = interpolate$1(element.l !== undefined ? element.l : datum.l, datum.l);
	        return function (time) {
	          element.a = interpolateA(time);
	          element.l = interpolateL(time);
	          var curveP = range(xScale(0), xScale.range()[1] + 1, 1).map(function (range) {
	            return {
	              x: xScale.invert(range),
	              v: CPTMath.xal2v(xScale.invert(range), element.a, element.l)
	            };
	          });
	          return line$1(curveP);
	        };
	      }); //  EXIT
	      // NOTE: Could add a transition here

	      curvePUpdate.exit().remove(); // Negative Value Curve
	      //  DATA-JOIN

	      var curveNUpdate = contentMerge.selectAll('.curve-n').data(this.functions, function (datum) {
	        return datum.name;
	      }); //  ENTER

	      var curveNEnter = curveNUpdate.enter().append('path').classed('curve-n', true).attr('clip-path', 'url(#clip-cpt-value)'); //  MERGE

	      var curveNMerge = curveNEnter.merge(curveNUpdate);

	      if (this.firstUpdate || changedProperties.has('interactive')) {
	        if (this.interactive) {
	          curveNMerge.attr('tabindex', 0).classed('interactive', true).call(curveNDrag).on('keydown', function (event, datum) {
	            if (['ArrowUp', 'ArrowDown', 'ArrowRight', 'ArrowLeft'].includes(event.key)) {
	              var l = datum.l; // eslint-disable-line prefer-destructuring

	              switch (event.key) {
	                case 'ArrowUp':
	                case 'ArrowLeft':
	                  l -= event.shiftKey ? 0.01 : 0.05;
	                  break;

	                case 'ArrowDown':
	                case 'ArrowRight':
	                  l += event.shiftKey ? 0.01 : 0.05;
	                  break;

	              } // Clamp l to legal values [0, ?


	              l = l < 0 ? 0 : l > 100 ? 100 : l;

	              if (l !== datum.l) {
	                datum.l = l;

	                if (datum.name === 'default') {
	                  _this3.l = datum.l;
	                }

	                _this3.alignState();

	                _this3.requestUpdate();

	                _this3.dispatchEvent(new CustomEvent('cpt-value-change', {
	                  detail: _this3.get(datum.name),
	                  bubbles: true
	                }));
	              }

	              event.preventDefault();
	            }
	          });
	        } else {
	          curveNMerge.attr('tabindex', null).classed('interactive', false).on('drag', null).on('keydown', null);
	        }
	      }

	      curveNMerge.transition().duration(this.drag ? 0 : this.firstUpdate ? transitionDuration * 2 : transitionDuration).ease(cubicOut).attrTween('d', function (datum, index, elements) {
	        var element = elements[index];
	        var interpolateA = interpolate$1(element.a !== undefined ? element.a : datum.a, datum.a);
	        var interpolateL = interpolate$1(element.l !== undefined ? element.l : datum.l, datum.l);
	        return function (time) {
	          element.a = interpolateA(time);
	          element.l = interpolateL(time);
	          var curveN = range(xScale.range()[0], xScale(0) + 1, 1).map(function (range) {
	            return {
	              x: xScale.invert(range),
	              v: CPTMath.xal2v(xScale.invert(range), element.a, element.l)
	            };
	          });
	          return line$1(curveN);
	        };
	      }); //  EXIT
	      // NOTE: Could add a transition here

	      curveNUpdate.exit().remove(); // Point
	      //  DATA-JOIN

	      var pointUpdate = contentMerge.selectAll('.point').data(this.values.filter(function (value) {
	        return value.v;
	      }), function (datum) {
	        return datum.name;
	      }); //  ENTER

	      var pointEnter = pointUpdate.enter().append('g').classed('point', true);
	      pointEnter.append('circle').classed('circle', true).attr('r', 6);
	      /* HACK: Firefox does not support CSS SVG Geometry Properties */

	      pointEnter.append('text').classed('label', true); //  MERGE

	      var pointMerge = pointEnter.merge(pointUpdate);
	      pointMerge.select('text').text(function (datum) {
	        return datum.label;
	      }); // Interactive points

	      pointMerge.filter(function (datum) {
	        return _this3.interactive && !datum.trial;
	      }).attr('tabindex', 0).classed('interactive', true).call(pointDrag).on('keydown', function (event, datum) {
	        if (['ArrowUp', 'ArrowDown', 'ArrowRight', 'ArrowLeft'].includes(event.key)) {
	          var x = datum.x; // eslint-disable-line prefer-destructuring

	          switch (event.key) {
	            case 'ArrowUp':
	            case 'ArrowRight':
	              x += event.shiftKey ? 0.2 : 1;
	              break;

	            case 'ArrowDown':
	            case 'ArrowLeft':
	              x -= event.shiftKey ? 0.2 : 1;
	              break;

	          } // Clamp x to visible plot


	          x = x < -domainScale ? -domainScale : x > domainScale ? domainScale : x;

	          if (x !== datum.x) {
	            datum.x = x;

	            if (datum.name === 'default') {
	              _this3.x = datum.x;
	            }

	            _this3.alignState();

	            _this3.requestUpdate();

	            _this3.dispatchEvent(new CustomEvent('cpt-value-change', {
	              detail: {
	                name: datum.name,
	                x: datum.x,
	                v: datum.v,
	                label: datum.label,
	                a: _this3.getFunction(datum.function).a,
	                l: _this3.getFunction(datum.function).l
	              },
	              bubbles: true
	            }));
	          }

	          event.preventDefault();
	        }
	      }); // Non-interactive points

	      pointMerge.filter(function (datum) {
	        return !_this3.interactive || datum.trial;
	      }).attr('tabindex', null).classed('interactive', false).on('drag', null).on('keydown', null); // All points

	      pointMerge.transition().duration(this.drag ? 0 : this.firstUpdate ? transitionDuration * 2 : transitionDuration).ease(cubicOut).attrTween('transform', function (datum, index, elements) {
	        var element = elements[index];
	        var interpolateX = interpolate$1(element.x !== undefined ? element.x : datum.x, datum.x);
	        var interpolateA = interpolate$1(element.a !== undefined ? element.a : _this3.getFunction(datum.function).a, _this3.getFunction(datum.function).a);
	        var interpolateL = interpolate$1(element.l !== undefined ? element.l : _this3.getFunction(datum.function).l, _this3.getFunction(datum.function).l);
	        return function (time) {
	          element.x = interpolateX(time);
	          element.a = interpolateA(time);
	          element.l = interpolateL(time);
	          return "translate(\n            ".concat(xScale(element.x), ",\n            ").concat(yScale(CPTMath.xal2v(element.x, element.a, element.l)), "\n          )");
	        };
	      }); //  EXIT
	      // NOTE: Could add a transition here

	      pointUpdate.exit().remove();
	      this.drag = false; // this.sdt = false;

	      this.firstUpdate = false;
	    }
	  }], [{
	    key: "properties",
	    get: function get() {
	      return {
	        x: {
	          attribute: 'value',
	          type: Number,
	          reflect: true
	        },
	        a: {
	          attribute: 'alpha',
	          type: Number,
	          reflect: true
	        },
	        l: {
	          attribute: 'lambda',
	          type: Number,
	          reflect: true
	        },
	        v: {
	          attribute: false,
	          type: Number,
	          reflect: false
	        },
	        width: {
	          attribute: false,
	          type: Number,
	          reflect: false
	        },
	        height: {
	          attribute: false,
	          type: Number,
	          reflect: false
	        },
	        rem: {
	          attribute: false,
	          type: Number,
	          reflect: false
	        }
	      };
	    }
	  }, {
	    key: "styles",
	    get: function get() {
	      return [_get(_getPrototypeOf(CPTValue), "styles", this), r$2(_templateObject2$4 || (_templateObject2$4 = _taggedTemplateLiteral(["\n        :host {\n          display: inline-block;\n\n          width: 20rem;\n          height: 20rem;\n        }\n\n        .main {\n          width: 100%;\n          height: 100%;\n        }\n\n        text {\n          /* stylelint-disable property-no-vendor-prefix */\n          -webkit-user-select: none;\n          -moz-user-select: none;\n          -ms-user-select: none;\n          user-select: none;\n        }\n\n        .curve-p.interactive,\n        .curve-n.interactive {\n          cursor: nwse-resize;\n\n          filter: url(\"#shadow-2\");\n          outline: none;\n        }\n\n        .curve-p.interactive:hover,\n        .curve-n.interactive:hover {\n          filter: url(\"#shadow-4\");\n        }\n\n        .curve-p.interactive:active,\n        .curve-n.interactive:active {\n          filter: url(\"#shadow-8\");\n        }\n\n        :host(.keyboard) .curve-p.interactive:focus,\n        :host(.keyboard) .curve-n.interactive:focus {\n          filter: url(\"#shadow-8\");\n        }\n\n        .point.interactive {\n          cursor: nesw-resize;\n\n          filter: url(\"#shadow-2\");\n          outline: none;\n\n          /* HACK: This gets Safari to correctly apply the filter! */\n          /* https://github.com/emilbjorklund/svg-weirdness/issues/27 */\n          stroke: #000000;\n          stroke-opacity: 0;\n          stroke-width: 0;\n        }\n\n        /* Make a larger target for touch users */\n        @media (pointer: coarse) {\n          .point.interactive .circle {\n            stroke: #000000;\n            stroke-opacity: 0;\n            stroke-width: 12px;\n          }\n        }\n\n        .point.interactive:hover {\n          filter: url(\"#shadow-4\");\n\n          /* HACK: This gets Safari to correctly apply the filter! */\n          stroke: #ff0000;\n        }\n\n        .point.interactive:active {\n          filter: url(\"#shadow-8\");\n\n          /* HACK: This gets Safari to correctly apply the filter! */\n          stroke: #00ff00;\n        }\n\n        :host(.keyboard) .point.interactive:focus {\n          filter: url(\"#shadow-8\");\n\n          /* HACK: This gets Safari to correctly apply the filter! */\n          stroke: #0000ff;\n        }\n\n        .background {\n          fill: var(---color-element-background);\n          stroke: var(---color-element-border);\n          stroke-width: 1;\n          shape-rendering: crispEdges;\n        }\n\n        .title-x,\n        .title-y {\n          font-weight: 600;\n\n          fill: currentColor;\n        }\n\n        .tick {\n          font-size: 0.75rem;\n        }\n\n        .scale-x path,\n        .scale-x line,\n        .scale-y path,\n        .scale-y line {\n          stroke: var(---color-element-border);\n        }\n\n        .axis-x,\n        .axis-y {\n          stroke: var(---color-element-border);\n          shape-rendering: crispEdges;\n        }\n\n        .diagonal {\n          stroke: var(---color-element-border);\n          stroke-dasharray: 4;\n          stroke-width: 1;\n        }\n\n        .curve-p,\n        .curve-n {\n          fill: none;\n          stroke: var(---color-element-emphasis);\n          stroke-width: 2;\n        }\n\n        .line-x,\n        .line-v {\n          fill: none;\n          stroke-width: 2;\n        }\n\n        .line-x {\n          stroke: var(---color-x);\n        }\n\n        .line-v {\n          stroke: var(---color-v);\n        }\n\n        .point .circle {\n          fill: var(---color-element-emphasis);\n\n          /* r: 6; HACK: Firefox does not support CSS SVG Geometry Properties */\n        }\n\n        .point .label {\n          font-size: 0.75rem;\n\n          dominant-baseline: middle;\n          text-anchor: middle;\n\n          fill: var(---color-text-inverse);\n        }\n      "])))];
	    }
	  }]);

	  return CPTValue;
	}(CPTElement);
	customElements.define('cpt-value', CPTValue);

	var _templateObject$3, _templateObject2$3;
	/*
	  DecisionOption element
	  <decision-option>

	  Attributes:
	  Win, Loss, Probability
	*/

	var DecisionOption = /*#__PURE__*/function (_CPTElement) {
	  _inherits(DecisionOption, _CPTElement);

	  var _super = _createSuper(DecisionOption);

	  function DecisionOption() {
	    var _this;

	    _classCallCheck(this, DecisionOption);

	    _this = _super.call(this); // Properties

	    _this.width = NaN; // Width of component in pixels

	    _this.height = NaN; // Height of component in pixels

	    _this.rem = NaN; // Pixels per rem for component

	    return _this;
	  }

	  _createClass(DecisionOption, [{
	    key: "render",
	    value: function render() {
	      // eslint-disable-line class-methods-use-this
	      return $(_templateObject$3 || (_templateObject$3 = _taggedTemplateLiteral(["\n      ", "\n      <slot></slot>\n    "])), CPTElement.svgFilters);
	    }
	  }, {
	    key: "getDimensions",
	    value: function getDimensions() {
	      this.width = parseFloat(this.getComputedStyleValue('width'), 10);
	      this.height = parseFloat(this.getComputedStyleValue('height'), 10);
	      this.rem = parseFloat(getComputedStyle(document.documentElement).getPropertyValue('font-size'), 10); // console.log(`rdk-task: width = ${this.width}, height = ${this.height}, rem = ${this.rem}`);
	    }
	  }, {
	    key: "connectedCallback",
	    value: function connectedCallback() {
	      var _this2 = this;

	      _get(_getPrototypeOf(DecisionOption.prototype), "connectedCallback", this).call(this);

	      window.addEventListener('resize', this.getDimensions.bind(this)); // Detect and update on changes in children

	      this.observer = new MutationObserver(function (mutations) {
	        if (mutations.some(function (mutation) {
	          return mutation.type === 'childList' || mutation.type === 'attributes' && mutation.target !== _this2;
	        })) {
	          _this2.requestUpdate();
	        }
	      });
	      this.observer.observe(this, {
	        subtree: true,
	        childList: true,
	        attributes: true
	      });
	    }
	  }, {
	    key: "disconnectedCallback",
	    value: function disconnectedCallback() {
	      this.observer.disconnect();
	      window.removeEventListener('resize', this.getDimensions.bind(this));

	      _get(_getPrototypeOf(DecisionOption.prototype), "disconnectedCallback", this).call(this);
	    }
	  }, {
	    key: "firstUpdated",
	    value: function firstUpdated(changedProperties) {
	      _get(_getPrototypeOf(DecisionOption.prototype), "firstUpdated", this).call(this, changedProperties); // Get the width and height after initial render/update has occurred
	      // HACK Edge: Edge doesn't have width/height until after a 0ms timeout


	      window.setTimeout(this.getDimensions.bind(this), 0);
	    }
	  }, {
	    key: "update",
	    value: function update(changedProperties) {
	      var _this3 = this;

	      _get(_getPrototypeOf(DecisionOption.prototype), "update", this).call(this, changedProperties); // Bail out if we can't get the width/height/rem


	      if (Number.isNaN(this.width) || Number.isNaN(this.height) || Number.isNaN(this.rem)) {
	        return;
	      }

	      var elementWidth = this.width;
	      var elementHeight = this.height;
	      var elementSize = Math.min(elementWidth, elementHeight);
	      var margin = {
	        top: 0,
	        // 0.25 * this.rem,
	        bottom: 0,
	        // 0.25 * this.rem,
	        left: 0,
	        // 0.25 * this.rem,
	        right: 0 // 0.25 * this.rem,

	      };
	      var height = elementSize - (margin.top + margin.bottom);
	      var width = elementSize - (margin.left + margin.right); // Get outcomes from slots!

	      var decisionOutcomes = this.querySelectorAll('decision-outcome');
	      var pCorrection = decisionOutcomes.length ? -decisionOutcomes[0].p : 0;
	      var arcs = pie().startAngle(pCorrection * Math.PI - Math.PI).endAngle(pCorrection * Math.PI + Math.PI).sortValues(null) // Use inserted order!
	      .value(function (datum) {
	        return datum.p;
	      })(decisionOutcomes);
	      var arcsStatic = arcs.filter(function (arc) {
	        return !arc.data.interactive;
	      });
	      var arcsInteractive = arcs.filter(function (arc) {
	        return arc.data.interactive;
	      }); // Define drag behavior for arcs

	      function fixAngle(angle) {
	        var modAngle = (angle + 2 * Math.PI) % (2 * Math.PI);
	        var newAngle = modAngle > Math.PI ? modAngle - 2 * Math.PI : modAngle < -Math.PI ? modAngle + 2 * Math.PI : modAngle;
	        return newAngle;
	      }

	      var arcDrag = drag().subject(function (event, datum) {
	        var arcAngle = fixAngle((datum.endAngle + datum.startAngle) / 2);
	        var dragAngle = fixAngle(Math.atan2(event.y, event.x) + Math.PI / 2);
	        decisionOutcomes.forEach(function (item) {
	          item.startP = item.p;
	        });
	        return {
	          arcAngle: arcAngle,
	          startAngle: fixAngle(dragAngle - arcAngle)
	        };
	      }).on('start', function (event) {
	        var element = event.currentTarget;
	        select(element).classed('dragging', true);
	      }).on('drag', function (event, datum) {
	        var angle = fixAngle(Math.atan2(event.y, event.x) + Math.PI / 2);
	        var currentAngle = fixAngle(angle - event.subject.arcAngle);
	        var changeAngle = fixAngle(event.subject.startAngle > 0 ? currentAngle - event.subject.startAngle : event.subject.startAngle - currentAngle);
	        var changeP = changeAngle / Math.PI;
	        var proposedP = datum.data.startP + changeP;
	        var newP = proposedP > 0.99 ? 0.99 : proposedP < 0.01 ? 0.01 : proposedP;
	        decisionOutcomes.forEach(function (item) {
	          item.p = item === datum.data ? newP : item.startP / (1 - datum.data.startP) * (1 - newP);
	        });

	        _this3.dispatchEvent(new CustomEvent('decision-outcome-change', {
	          detail: {
	            x: datum.data.x,
	            p: datum.data.p,
	            name: datum.data.name
	          },
	          bubbles: true
	        })); // console.log(`x: ${event.x}, y: ${event.y}`);
	        // console.log(`change: ${changeAngle}, changeP: ${changeP}`);

	      }).on('end', function (event) {
	        var element = event.currentTarget;
	        select(element).classed('dragging', false);
	      }); // Svg
	      //  DATA-JOIN

	      var svgUpdate = select(this.renderRoot).selectAll('.main').data([{
	        width: this.width,
	        height: this.height,
	        rem: this.rem
	      }]); //  ENTER

	      var svgEnter = svgUpdate.enter().append('svg').classed('main', true); //  MERGE

	      var svgMerge = svgEnter.merge(svgUpdate).attr('viewBox', "0 0 ".concat(elementSize, " ").concat(elementSize)); // Pie
	      //  ENTER

	      var pieEnter = svgEnter.append('g').classed('pie', true); //  MERGE

	      var pieMerge = svgMerge.select('.pie').attr('transform', "translate(".concat(width / 2, ", ").concat(height / 2, ")")); // Outline
	      //  ENTER

	      pieEnter.append('circle').classed('outline', true); //  MERGE

	      pieMerge.select('.outline').attr('r', Math.min(width, height) / 2 - 1); // Arcs
	      //  DATA-JOIN

	      var arcUpdate = pieMerge.selectAll('.arc').data(arcs); //  ENTER

	      var arcEnter = arcUpdate.enter().append('path').call(arcDrag); //  MERGE

	      arcEnter.merge(arcUpdate).attr('tabindex', function (datum) {
	        return arcsInteractive.includes(datum) && arcs.length > 1 ? 0 : null;
	      }).attr('class', function (datum) {
	        return "arc ".concat(datum.data.name);
	      }).classed('interactive', function (datum) {
	        return arcsInteractive.includes(datum) && arcs.length > 1;
	      }).attr('d', arc().innerRadius(0).outerRadius(Math.min(width, height) / 2 - 1)); //  EXIT

	      arcUpdate.exit().remove(); // Labels
	      //  DATA-JOIN

	      var labelStaticUpdate = pieMerge.selectAll('.label.static').data(arcsStatic);
	      var labelInteractiveUpdate = pieMerge.selectAll('.label.interactive').data(arcsInteractive); //  ENTER

	      var labelStaticEnter = labelStaticUpdate.enter().append('text');
	      var labelInteractiveEnter = labelInteractiveUpdate.enter().append('foreignObject');
	      labelInteractiveEnter.append('xhtml:decidable-spinner').on('input', function (event, datum) {
	        datum.data.x = parseFloat(event.target.value);

	        _this3.dispatchEvent(new CustomEvent('decision-outcome-change', {
	          detail: {
	            x: datum.data.x,
	            p: datum.data.p,
	            name: datum.data.name
	          },
	          bubbles: true
	        }));
	      }); //  MERGE

	      labelStaticEnter.merge(labelStaticUpdate).attr('class', function (datum) {
	        return "label static ".concat(datum.data.name);
	      }).attr('transform', function (datum) {
	        if (arcs.length === 1) {
	          return 'translate(0, 0)';
	        }

	        var radius = Math.min(width, height) / 2 * 0.6;
	        var arcLabel = arc().innerRadius(radius).outerRadius(radius);
	        return "translate(".concat(arcLabel.centroid(datum), ")");
	      }).text(function (datum) {
	        return "$".concat(datum.data.x.toFixed(0));
	      });
	      var labelInteractiveMerge = labelInteractiveEnter.merge(labelInteractiveUpdate).attr('class', function (datum) {
	        return "label interactive ".concat(datum.data.name);
	      }).attr('transform', function (datum) {
	        if (arcs.length === 1) {
	          return 'translate(0, 0)';
	        }

	        var radius = Math.min(width, height) / 2 * 0.6;
	        var arcLabel = arc().innerRadius(radius).outerRadius(radius);
	        return "translate(".concat(arcLabel.centroid(datum), ")");
	      });
	      labelInteractiveMerge.select('decidable-spinner').attr('value', function (datum) {
	        return "".concat(datum.data.x.toFixed(0));
	      }); //  EXIT

	      labelStaticUpdate.exit().remove();
	      labelInteractiveUpdate.exit().remove();
	    }
	  }], [{
	    key: "properties",
	    get: function get() {
	      return {
	        width: {
	          attribute: false,
	          type: Number,
	          reflect: false
	        },
	        height: {
	          attribute: false,
	          type: Number,
	          reflect: false
	        },
	        rem: {
	          attribute: false,
	          type: Number,
	          reflect: false
	        }
	      };
	    }
	  }, {
	    key: "styles",
	    get: function get() {
	      return [_get(_getPrototypeOf(DecisionOption), "styles", this), r$2(_templateObject2$3 || (_templateObject2$3 = _taggedTemplateLiteral(["\n        :host {\n          display: inline-block;\n        }\n\n        .main {\n          width: 100%;\n          height: 100%;\n          overflow: visible;\n        }\n\n        .outline {\n          fill: var(---color-element-background);\n          stroke: var(---color-element-emphasis);\n          stroke-width: 2;\n        }\n\n        .arc {\n          stroke: var(---color-element-emphasis);\n          stroke-width: 2;\n        }\n\n        .arc.interactive {\n          cursor: ns-resize;\n\n          filter: url(\"#shadow-2\");\n          outline: none;\n        }\n\n        .arc.interactive:hover {\n          filter: url(\"#shadow-4\");\n        }\n\n        .arc.interactive:active {\n          filter: url(\"#shadow-8\");\n        }\n\n        :host(.keyboard) .arc.interactive:focus {\n          filter: url(\"#shadow-8\");\n        }\n\n        .arc.win {\n          fill: var(---color-better-light);\n        }\n\n        .arc.loss {\n          fill: var(---color-worse-light);\n        }\n\n        .arc.sure {\n          fill: var(---color-even-light);\n        }\n\n        .label.static {\n          font-size: 1.75rem;\n\n          user-select: none;\n\n          dominant-baseline: middle;\n          text-anchor: middle;\n        }\n\n        .label.interactive {\n          --decidable-spinner-font-size: 1.75rem;\n          --decidable-spinner-input-width: 4rem;\n          --decidable-spinner-prefix: \"$\";\n\n          width: var(--decidable-spinner-input-width);\n          height: calc(var(--decidable-spinner-font-size) * 1.5);\n          overflow: visible;\n          x: calc(var(--decidable-spinner-input-width) / -2);\n          y: calc(var(--decidable-spinner-font-size) * 1.5 / -2);\n        }\n\n        .label.interactive.win decidable-spinner {\n          background-color: var(---color-better-light);\n        }\n\n        .label.interactive.loss decidable-spinner {\n          background-color: var(---color-worse-light);\n        }\n\n        .label.interactive.sure decidable-spinner {\n          background-color: var(---color-even-light);\n        }\n      "])))];
	    }
	  }]);

	  return DecisionOption;
	}(CPTElement);
	customElements.define('decision-option', DecisionOption);

	var _templateObject$2, _templateObject2$2;
	/*
	  DecisionOutcome element
	  <decision-outcome>

	  Attributes:
	  value, probability, name
	*/

	var DecisionOutcome = /*#__PURE__*/function (_CPTElement) {
	  _inherits(DecisionOutcome, _CPTElement);

	  var _super = _createSuper(DecisionOutcome);

	  function DecisionOutcome() {
	    var _this;

	    _classCallCheck(this, DecisionOutcome);

	    _this = _super.call(this); // Attributes

	    _this.x = 0; // Value

	    _this.p = 0; // Probability

	    _this.name = '';
	    return _this;
	  }

	  _createClass(DecisionOutcome, [{
	    key: "render",
	    value: function render() {
	      // eslint-disable-line class-methods-use-this
	      return $(_templateObject$2 || (_templateObject$2 = _taggedTemplateLiteral([""])));
	    }
	  }], [{
	    key: "properties",
	    get: function get() {
	      return {
	        x: {
	          attribute: 'value',
	          type: Number,
	          reflect: true
	        },
	        p: {
	          attribute: 'probability',
	          type: Number,
	          reflect: true
	        },
	        name: {
	          attribute: 'name',
	          type: String,
	          reflect: true
	        }
	      };
	    }
	  }, {
	    key: "styles",
	    get: function get() {
	      return [r$2(_templateObject2$2 || (_templateObject2$2 = _taggedTemplateLiteral(["\n        :host {\n          display: none;\n        }\n      "])))];
	    }
	  }]);

	  return DecisionOutcome;
	}(CPTElement);
	customElements.define('decision-outcome', DecisionOutcome);

	var _templateObject$1, _templateObject2$1, _templateObject3, _templateObject4, _templateObject5;
	/*
	  DecisionChoice element
	  <decision-choice>

	  Attributes:
	*/

	var DecisionChoice = /*#__PURE__*/function (_CPTElement) {
	  _inherits(DecisionChoice, _CPTElement);

	  var _super = _createSuper(DecisionChoice);

	  function DecisionChoice() {
	    var _this;

	    _classCallCheck(this, DecisionChoice);

	    _this = _super.call(this);
	    _this.states = ['choice', 'fixation', 'blank']; // Possible states

	    _this.state = 'choice'; // Current state

	    _this.xl = 0;
	    _this.xw = 100;
	    _this.pw = 0.75;
	    _this.xs = 50;
	    return _this;
	  }

	  _createClass(DecisionChoice, [{
	    key: "sendEvent",
	    value: function sendEvent() {
	      this.dispatchEvent(new CustomEvent('decision-choice-change', {
	        detail: {
	          xl: this.xl,
	          xw: this.xw,
	          pw: this.pw,
	          xs: this.xs
	        },
	        bubbles: true
	      }));
	    }
	  }, {
	    key: "winChange",
	    value: function winChange(event) {
	      this.xw = parseFloat(event.detail.x);
	      this.pw = parseFloat(event.detail.p);
	      this.sendEvent();
	    }
	  }, {
	    key: "sureChange",
	    value: function sureChange(event) {
	      this.xs = parseFloat(event.detail.x);
	      this.sendEvent();
	    }
	  }, {
	    key: "render",
	    value: function render() {
	      return $(_templateObject$1 || (_templateObject$1 = _taggedTemplateLiteral(["\n      <div class=\"holder\">\n        <decision-option ?interactive=", " @decision-outcome-change=", ">\n          ", "\n        </decision-option><span class=\"query\"\n         >", "</span\n        ><decision-option ?interactive=", " @decision-outcome-change=", ">\n          ", "\n        </decision-option>\n      </div>"])), this.interactive, this.winChange.bind(this), this.state === 'choice' ? $(_templateObject2$1 || (_templateObject2$1 = _taggedTemplateLiteral(["\n              <decision-outcome probability=\"", "\" value=\"", "\" name=\"loss\"></decision-outcome>\n              <decision-outcome ?interactive=", " probability=\"", "\" value=\"", "\" name=\"win\"></decision-outcome>"])), 1 - this.pw, this.xl, this.interactive, this.pw, this.xw) : '', this.state === 'choice' ? '?' : this.state === 'fixation' ? '+' : $(_templateObject3 || (_templateObject3 = _taggedTemplateLiteral(["\u2219"]))), this.interactive, this.sureChange.bind(this), this.state === 'choice' ? $(_templateObject4 || (_templateObject4 = _taggedTemplateLiteral(["\n              <decision-outcome ?interactive=", " probability=\"1\" value=\"", "\" name=\"sure\"></decision-outcome>"])), this.interactive, this.xs) : '');
	    }
	  }], [{
	    key: "properties",
	    get: function get() {
	      return {
	        state: {
	          attribute: 'state',
	          type: String,
	          reflect: true
	        },
	        xl: {
	          attribute: 'loss',
	          type: Number,
	          reflect: true
	        },
	        xw: {
	          attribute: 'win',
	          type: Number,
	          reflect: true
	        },
	        pw: {
	          attribute: 'probability',
	          type: Number,
	          reflect: true
	        },
	        xs: {
	          attribute: 'sure',
	          type: Number,
	          reflect: true
	        }
	      };
	    }
	  }, {
	    key: "styles",
	    get: function get() {
	      return [_get(_getPrototypeOf(DecisionChoice), "styles", this), r$2(_templateObject5 || (_templateObject5 = _taggedTemplateLiteral(["\n        :host {\n          display: inline-block;\n        }\n\n        .holder {\n          user-select: none;\n        }\n\n        .holder > * {\n          vertical-align: middle;\n        }\n\n        .query {\n          margin: 0 0.5rem;\n\n          font-family: var(--font-family-code);\n          font-size: 1.75rem;\n        }\n\n        decision-option {\n          width: 10rem;\n          height: 10rem;\n        }\n      "])))];
	    }
	  }]);

	  return DecisionChoice;
	}(CPTElement);
	customElements.define('decision-choice', DecisionChoice);

	var _templateObject, _templateObject2;
	/*
	  DecisionTask element
	  <decision-task>

	  Attributes:
	  Dots; Coherence;
	  # Direction, Speed, Lifetime
	*/

	var DecisionTask = /*#__PURE__*/function (_CPTElement) {
	  _inherits(DecisionTask, _CPTElement);

	  var _super = _createSuper(DecisionTask);

	  function DecisionTask() {
	    var _this;

	    _classCallCheck(this, DecisionTask);

	    _this = _super.call(this); // Attributes

	    _this.duration = 2000; // Duration of stimulus in milliseconds

	    _this.iti = 2000; // Duration of inter-trial interval in milliseconds

	    _this.trials = 5; // Number of trials per block

	    _this.running = false; // Currently executing block of trials
	    // Properties

	    _this.states = ['resetted', 'iti', 'stimulus', 'ended']; // Possible states of task

	    _this.state = 'resetted'; // Current state of task
	    // Decision parameters

	    _this.range = {};
	    _this.range.xl = {
	      start: 0,
	      stop: 0,
	      step: 1
	    }; // Gamble Loss Value

	    _this.range.xw = {
	      start: 10,
	      stop: 30,
	      step: 1
	    }; // Gamble Win Value

	    _this.range.pw = {
	      start: 0.1,
	      stop: 0.9,
	      step: 0.1
	    }; // Gamble Win Probability

	    _this.range.xs = {
	      start: 5,
	      stop: 15,
	      step: 1
	    }; // Sure Value

	    _this.range.xl.values = range(_this.range.xl.start, _this.range.xl.stop + 0.01, _this.range.xl.step);
	    _this.range.xw.values = range(_this.range.xw.start, _this.range.xw.stop + 0.01, _this.range.xw.step);
	    _this.range.pw.values = range(_this.range.pw.start, _this.range.pw.stop + 0.01, _this.range.pw.step);
	    _this.range.xs.values = range(_this.range.xs.start, _this.range.xs.stop + 0.01, _this.range.xs.step); // Private

	    _this.firstUpdate = true;
	    _this.xl = 0;
	    _this.xw = 0;
	    _this.pw = 0;
	    _this.xs = 0;
	    _this.trial = 0; // Count of current trial

	    _this.baseTime = 0; // Real time, in milliseconds, that the current block started

	    _this.pauseTime = 0; // Real time, in milliseconds, that block was paused at

	    _this.startTime = 0; // Virtual time, in milliseconds, that current stage of trial started

	    _this.lastTime = 0; // Virtual time, in milliseconds, of the most recent frame

	    _this.runner = undefined; // D3 Interval for frame timing

	    return _this;
	  }

	  _createClass(DecisionTask, [{
	    key: "render",
	    value: function render() {
	      return $(_templateObject || (_templateObject = _taggedTemplateLiteral(["\n      <div class=\"holder\">\n        <decision-choice state=\"", "\" probability=\"", "\" win=\"", "\" loss=\"", "\" sure=\"", "\"></decision-choice>\n      </div>"])), this.state === 'stimulus' ? 'choice' : this.state === 'iti' ? 'fixation' : 'blank', this.pw, this.xw, this.xl, this.xs);
	    }
	  }, {
	    key: "update",
	    value: function update(changedProperties) {
	      _get(_getPrototypeOf(DecisionTask.prototype), "update", this).call(this, changedProperties); // Start or stop trial block


	      if (this.firstUpdate || changedProperties.has('running')) {
	        if (this.running) {
	          // (Re)Start
	          if (this.pauseTime) {
	            // Shift timeline forward as if paused time never happened
	            this.baseTime += now() - this.pauseTime;
	            this.pauseTime = 0;
	          }

	          this.runner = interval(this.run.bind(this), 20); // FIXME??
	        } else if (this.runner !== undefined) {
	          // Pause
	          this.runner.stop();
	          this.pauseTime = now();
	        }
	      }

	      this.firstUpdate = false;
	    }
	  }, {
	    key: "reset",
	    value: function reset() {
	      this.runner.stop();
	      this.running = false;
	      this.trial = 0;
	      this.state = 'resetted';
	      this.xl = 0;
	      this.xw = 0;
	      this.pw = 0;
	      this.xs = 0;
	      this.baseTime = 0;
	      this.pauseTime = 0;
	      this.startTime = 0;
	      this.lastTime = 0;
	    }
	  }, {
	    key: "run",
	    value: function
	      /* elapsed */
	    run() {
	      var realTime = now();
	      var currentTime = this.baseTime ? realTime - this.baseTime : 0;
	      var elapsedTime = this.baseTime ? currentTime - this.startTime : 0;
	      this.lastTime = currentTime;

	      if (this.state === 'resetted') {
	        // Start block with an ITI
	        this.state = 'iti';
	        this.baseTime = realTime;
	        this.startTime = 0;
	        this.dispatchEvent(new CustomEvent('decision-block-start', {
	          detail: {
	            trials: this.trials
	          },
	          bubbles: true
	        }));
	      } else if (this.state === 'iti' && elapsedTime >= this.iti) {
	        // Start new trial with a stimulus
	        this.trial += 1;
	        this.state = 'stimulus';
	        this.startTime = currentTime; // Determine trial

	        this.xl = this.range.xl.values[Math.floor(Math.random() * this.range.xl.values.length)];
	        this.xw = this.range.xw.values[Math.floor(Math.random() * this.range.xw.values.length)];
	        this.pw = this.range.pw.values[Math.floor(Math.random() * this.range.pw.values.length)];
	        this.xs = this.range.xs.values[Math.floor(Math.random() * this.range.xs.values.length)];
	        this.vDiff = this.xw * this.pw + this.xl * (1 - this.pw) - this.xs;
	        this.gamblePayoff = Math.random() < this.pw ? this.xw : this.xl;
	        this.surePayoff = this.xs;
	        this.better = this.vDiff > 0 ? 'gamble' : this.vDiff < 0 ? 'sure' : 'equal';
	        this.dispatchEvent(new CustomEvent('decision-trial-start', {
	          detail: {
	            trials: this.trials,
	            duration: this.duration,
	            iti: this.iti,
	            trial: this.trial,
	            xl: this.xl,
	            xw: this.xw,
	            pw: this.pw,
	            xs: this.xs,
	            better: this.better,
	            gamblePayoff: this.gamblePayoff,
	            surePayoff: this.surePayoff
	          },
	          bubbles: true
	        }));
	      } else if (this.state === 'stimulus' && elapsedTime >= this.duration) {
	        // Stimulus is over, end of trial
	        this.dispatchEvent(new CustomEvent('decision-trial-end', {
	          detail: {
	            trials: this.trials,
	            duration: this.duration,
	            iti: this.iti,
	            trial: this.trial,
	            xl: this.xl,
	            xw: this.xw,
	            pw: this.pw,
	            xs: this.xs,
	            better: this.better,
	            gamblePayoff: this.gamblePayoff,
	            surePayoff: this.surePayoff
	          },
	          bubbles: true
	        }));

	        if (this.trial >= this.trials) {
	          // End of block
	          this.runner.stop();
	          this.running = false;
	          this.state = 'ended';
	          this.baseTime = 0;
	          this.pauseTime = 0;
	          this.startTime = 0;
	          this.lastTime = 0;
	          this.dispatchEvent(new CustomEvent('decision-block-end', {
	            detail: {
	              trials: this.trial
	            },
	            bubbles: true
	          }));
	        } else {
	          // ITI
	          this.state = 'iti';
	          this.startTime = currentTime;
	        }
	      }
	    }
	  }], [{
	    key: "properties",
	    get: function get() {
	      return {
	        duration: {
	          attribute: 'duration',
	          type: Number,
	          reflect: true
	        },
	        iti: {
	          attribute: 'iti',
	          type: Number,
	          reflect: true
	        },
	        trials: {
	          attribute: 'trials',
	          type: Number,
	          reflect: true
	        },
	        running: {
	          attribute: 'running',
	          type: Boolean,
	          reflect: true
	        },
	        state: {
	          attribute: false,
	          type: String,
	          reflect: false
	        }
	      };
	    }
	  }, {
	    key: "styles",
	    get: function get() {
	      return [_get(_getPrototypeOf(DecisionTask), "styles", this), r$2(_templateObject2 || (_templateObject2 = _taggedTemplateLiteral(["\n        :host {\n          display: inline-block;\n        }\n      "])))];
	    }
	  }]);

	  return DecisionTask;
	}(CPTElement);
	customElements.define('decision-task', DecisionTask);

})();
//# sourceMappingURL=index.js.map
