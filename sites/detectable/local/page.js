(function () {
  'use strict';

  function ownKeys$1(object, enumerableOnly) {
    var keys = Object.keys(object);

    if (Object.getOwnPropertySymbols) {
      var symbols = Object.getOwnPropertySymbols(object);
      enumerableOnly && (symbols = symbols.filter(function (sym) {
        return Object.getOwnPropertyDescriptor(object, sym).enumerable;
      })), keys.push.apply(keys, symbols);
    }

    return keys;
  }

  function _objectSpread2(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = null != arguments[i] ? arguments[i] : {};
      i % 2 ? ownKeys$1(Object(source), !0).forEach(function (key) {
        _defineProperty(target, key, source[key]);
      }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$1(Object(source)).forEach(function (key) {
        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
      });
    }

    return target;
  }

  function _typeof(obj) {
    "@babel/helpers - typeof";

    return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) {
      return typeof obj;
    } : function (obj) {
      return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
    }, _typeof(obj);
  }

  function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {
    try {
      var info = gen[key](arg);
      var value = info.value;
    } catch (error) {
      reject(error);
      return;
    }

    if (info.done) {
      resolve(value);
    } else {
      Promise.resolve(value).then(_next, _throw);
    }
  }

  function _asyncToGenerator(fn) {
    return function () {
      var self = this,
          args = arguments;
      return new Promise(function (resolve, reject) {
        var gen = fn.apply(self, args);

        function _next(value) {
          asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value);
        }

        function _throw(err) {
          asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err);
        }

        _next(undefined);
      });
    };
  }

  function _classCallCheck(instance, Constructor) {
    if (!(instance instanceof Constructor)) {
      throw new TypeError("Cannot call a class as a function");
    }
  }

  function _defineProperties(target, props) {
    for (var i = 0; i < props.length; i++) {
      var descriptor = props[i];
      descriptor.enumerable = descriptor.enumerable || false;
      descriptor.configurable = true;
      if ("value" in descriptor) descriptor.writable = true;
      Object.defineProperty(target, descriptor.key, descriptor);
    }
  }

  function _createClass(Constructor, protoProps, staticProps) {
    if (protoProps) _defineProperties(Constructor.prototype, protoProps);
    if (staticProps) _defineProperties(Constructor, staticProps);
    Object.defineProperty(Constructor, "prototype", {
      writable: false
    });
    return Constructor;
  }

  function _defineProperty(obj, key, value) {
    if (key in obj) {
      Object.defineProperty(obj, key, {
        value: value,
        enumerable: true,
        configurable: true,
        writable: true
      });
    } else {
      obj[key] = value;
    }

    return obj;
  }

  function _inherits(subClass, superClass) {
    if (typeof superClass !== "function" && superClass !== null) {
      throw new TypeError("Super expression must either be null or a function");
    }

    subClass.prototype = Object.create(superClass && superClass.prototype, {
      constructor: {
        value: subClass,
        writable: true,
        configurable: true
      }
    });
    Object.defineProperty(subClass, "prototype", {
      writable: false
    });
    if (superClass) _setPrototypeOf(subClass, superClass);
  }

  function _getPrototypeOf(o) {
    _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {
      return o.__proto__ || Object.getPrototypeOf(o);
    };
    return _getPrototypeOf(o);
  }

  function _setPrototypeOf(o, p) {
    _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {
      o.__proto__ = p;
      return o;
    };

    return _setPrototypeOf(o, p);
  }

  function _isNativeReflectConstruct() {
    if (typeof Reflect === "undefined" || !Reflect.construct) return false;
    if (Reflect.construct.sham) return false;
    if (typeof Proxy === "function") return true;

    try {
      Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {}));
      return true;
    } catch (e) {
      return false;
    }
  }

  function _construct(Parent, args, Class) {
    if (_isNativeReflectConstruct()) {
      _construct = Reflect.construct;
    } else {
      _construct = function _construct(Parent, args, Class) {
        var a = [null];
        a.push.apply(a, args);
        var Constructor = Function.bind.apply(Parent, a);
        var instance = new Constructor();
        if (Class) _setPrototypeOf(instance, Class.prototype);
        return instance;
      };
    }

    return _construct.apply(null, arguments);
  }

  function _isNativeFunction(fn) {
    return Function.toString.call(fn).indexOf("[native code]") !== -1;
  }

  function _wrapNativeSuper(Class) {
    var _cache = typeof Map === "function" ? new Map() : undefined;

    _wrapNativeSuper = function _wrapNativeSuper(Class) {
      if (Class === null || !_isNativeFunction(Class)) return Class;

      if (typeof Class !== "function") {
        throw new TypeError("Super expression must either be null or a function");
      }

      if (typeof _cache !== "undefined") {
        if (_cache.has(Class)) return _cache.get(Class);

        _cache.set(Class, Wrapper);
      }

      function Wrapper() {
        return _construct(Class, arguments, _getPrototypeOf(this).constructor);
      }

      Wrapper.prototype = Object.create(Class.prototype, {
        constructor: {
          value: Wrapper,
          enumerable: false,
          writable: true,
          configurable: true
        }
      });
      return _setPrototypeOf(Wrapper, Class);
    };

    return _wrapNativeSuper(Class);
  }

  function _assertThisInitialized(self) {
    if (self === void 0) {
      throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
    }

    return self;
  }

  function _possibleConstructorReturn(self, call) {
    if (call && (typeof call === "object" || typeof call === "function")) {
      return call;
    } else if (call !== void 0) {
      throw new TypeError("Derived constructors may only return object or undefined");
    }

    return _assertThisInitialized(self);
  }

  function _createSuper(Derived) {
    var hasNativeReflectConstruct = _isNativeReflectConstruct();

    return function _createSuperInternal() {
      var Super = _getPrototypeOf(Derived),
          result;

      if (hasNativeReflectConstruct) {
        var NewTarget = _getPrototypeOf(this).constructor;

        result = Reflect.construct(Super, arguments, NewTarget);
      } else {
        result = Super.apply(this, arguments);
      }

      return _possibleConstructorReturn(this, result);
    };
  }

  function _superPropBase(object, property) {
    while (!Object.prototype.hasOwnProperty.call(object, property)) {
      object = _getPrototypeOf(object);
      if (object === null) break;
    }

    return object;
  }

  function _get() {
    if (typeof Reflect !== "undefined" && Reflect.get) {
      _get = Reflect.get;
    } else {
      _get = function _get(target, property, receiver) {
        var base = _superPropBase(target, property);

        if (!base) return;
        var desc = Object.getOwnPropertyDescriptor(base, property);

        if (desc.get) {
          return desc.get.call(arguments.length < 3 ? target : receiver);
        }

        return desc.value;
      };
    }

    return _get.apply(this, arguments);
  }

  function _taggedTemplateLiteral(strings, raw) {
    if (!raw) {
      raw = strings.slice(0);
    }

    return Object.freeze(Object.defineProperties(strings, {
      raw: {
        value: Object.freeze(raw)
      }
    }));
  }

  function _slicedToArray(arr, i) {
    return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest();
  }

  function _toConsumableArray(arr) {
    return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread();
  }

  function _arrayWithoutHoles(arr) {
    if (Array.isArray(arr)) return _arrayLikeToArray(arr);
  }

  function _arrayWithHoles(arr) {
    if (Array.isArray(arr)) return arr;
  }

  function _iterableToArray(iter) {
    if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null) return Array.from(iter);
  }

  function _iterableToArrayLimit(arr, i) {
    var _i = arr == null ? null : typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"];

    if (_i == null) return;
    var _arr = [];
    var _n = true;
    var _d = false;

    var _s, _e;

    try {
      for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) {
        _arr.push(_s.value);

        if (i && _arr.length === i) break;
      }
    } catch (err) {
      _d = true;
      _e = err;
    } finally {
      try {
        if (!_n && _i["return"] != null) _i["return"]();
      } finally {
        if (_d) throw _e;
      }
    }

    return _arr;
  }

  function _unsupportedIterableToArray(o, minLen) {
    if (!o) return;
    if (typeof o === "string") return _arrayLikeToArray(o, minLen);
    var n = Object.prototype.toString.call(o).slice(8, -1);
    if (n === "Object" && o.constructor) n = o.constructor.name;
    if (n === "Map" || n === "Set") return Array.from(o);
    if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);
  }

  function _arrayLikeToArray(arr, len) {
    if (len == null || len > arr.length) len = arr.length;

    for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i];

    return arr2;
  }

  function _nonIterableSpread() {
    throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
  }

  function _nonIterableRest() {
    throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
  }

  function _createForOfIteratorHelper(o, allowArrayLike) {
    var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"];

    if (!it) {
      if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") {
        if (it) o = it;
        var i = 0;

        var F = function () {};

        return {
          s: F,
          n: function () {
            if (i >= o.length) return {
              done: true
            };
            return {
              done: false,
              value: o[i++]
            };
          },
          e: function (e) {
            throw e;
          },
          f: F
        };
      }

      throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
    }

    var normalCompletion = true,
        didErr = false,
        err;
    return {
      s: function () {
        it = it.call(o);
      },
      n: function () {
        var step = it.next();
        normalCompletion = step.done;
        return step;
      },
      e: function (e) {
        didErr = true;
        err = e;
      },
      f: function () {
        try {
          if (!normalCompletion && it.return != null) it.return();
        } finally {
          if (didErr) throw err;
        }
      }
    };
  }

  var commonjsGlobal = typeof globalThis !== 'undefined' ? globalThis : typeof window !== 'undefined' ? window : typeof global !== 'undefined' ? global : typeof self !== 'undefined' ? self : {};

  function createCommonjsModule(fn) {
    var module = { exports: {} };
  	return fn(module, module.exports), module.exports;
  }

  var check = function check(it) {
    return it && it.Math == Math && it;
  }; // https://github.com/zloirock/core-js/issues/86#issuecomment-115759028


  var global$1 = // eslint-disable-next-line es/no-global-this -- safe
  check((typeof globalThis === "undefined" ? "undefined" : _typeof(globalThis)) == 'object' && globalThis) || check((typeof window === "undefined" ? "undefined" : _typeof(window)) == 'object' && window) || // eslint-disable-next-line no-restricted-globals -- safe
  check((typeof self === "undefined" ? "undefined" : _typeof(self)) == 'object' && self) || check(_typeof(commonjsGlobal) == 'object' && commonjsGlobal) || // eslint-disable-next-line no-new-func -- fallback
  function () {
    return this;
  }() || Function('return this')();

  var fails = function fails(exec) {
    try {
      return !!exec();
    } catch (error) {
      return true;
    }
  };

  var descriptors = !fails(function () {
    // eslint-disable-next-line es/no-object-defineproperty -- required for testing
    return Object.defineProperty({}, 1, {
      get: function get() {
        return 7;
      }
    })[1] != 7;
  });

  var functionBindNative = !fails(function () {
    var test = function () {
      /* empty */
    }.bind(); // eslint-disable-next-line no-prototype-builtins -- safe


    return typeof test != 'function' || test.hasOwnProperty('prototype');
  });

  var call$2 = Function.prototype.call;
  var functionCall = functionBindNative ? call$2.bind(call$2) : function () {
    return call$2.apply(call$2, arguments);
  };

  var $propertyIsEnumerable$2 = {}.propertyIsEnumerable; // eslint-disable-next-line es/no-object-getownpropertydescriptor -- safe

  var getOwnPropertyDescriptor$8 = Object.getOwnPropertyDescriptor; // Nashorn ~ JDK8 bug

  var NASHORN_BUG = getOwnPropertyDescriptor$8 && !$propertyIsEnumerable$2.call({
    1: 2
  }, 1); // `Object.prototype.propertyIsEnumerable` method implementation
  // https://tc39.es/ecma262/#sec-object.prototype.propertyisenumerable

  var f$9 = NASHORN_BUG ? function propertyIsEnumerable(V) {
    var descriptor = getOwnPropertyDescriptor$8(this, V);
    return !!descriptor && descriptor.enumerable;
  } : $propertyIsEnumerable$2;
  var objectPropertyIsEnumerable = {
    f: f$9
  };

  var createPropertyDescriptor = function createPropertyDescriptor(bitmap, value) {
    return {
      enumerable: !(bitmap & 1),
      configurable: !(bitmap & 2),
      writable: !(bitmap & 4),
      value: value
    };
  };

  var FunctionPrototype$4 = Function.prototype;
  var bind$2 = FunctionPrototype$4.bind;
  var call$1 = FunctionPrototype$4.call;
  var uncurryThis = functionBindNative && bind$2.bind(call$1, call$1);
  var functionUncurryThis = functionBindNative ? function (fn) {
    return fn && uncurryThis(fn);
  } : function (fn) {
    return fn && function () {
      return call$1.apply(fn, arguments);
    };
  };

  var toString$2 = functionUncurryThis({}.toString);
  var stringSlice$e = functionUncurryThis(''.slice);

  var classofRaw = function classofRaw(it) {
    return stringSlice$e(toString$2(it), 8, -1);
  };

  var Object$6 = global$1.Object;
  var split$3 = functionUncurryThis(''.split); // fallback for non-array-like ES3 and non-enumerable old V8 strings

  var indexedObject = fails(function () {
    // throws an error in rhino, see https://github.com/mozilla/rhino/issues/346
    // eslint-disable-next-line no-prototype-builtins -- safe
    return !Object$6('z').propertyIsEnumerable(0);
  }) ? function (it) {
    return classofRaw(it) == 'String' ? split$3(it, '') : Object$6(it);
  } : Object$6;

  var TypeError$v = global$1.TypeError; // `RequireObjectCoercible` abstract operation
  // https://tc39.es/ecma262/#sec-requireobjectcoercible

  var requireObjectCoercible = function requireObjectCoercible(it) {
    if (it == undefined) throw TypeError$v("Can't call method on " + it);
    return it;
  };

  var toIndexedObject = function toIndexedObject(it) {
    return indexedObject(requireObjectCoercible(it));
  };

  // `IsCallable` abstract operation
  // https://tc39.es/ecma262/#sec-iscallable
  var isCallable = function isCallable(argument) {
    return typeof argument == 'function';
  };

  var isObject = function isObject(it) {
    return _typeof(it) == 'object' ? it !== null : isCallable(it);
  };

  var aFunction = function aFunction(argument) {
    return isCallable(argument) ? argument : undefined;
  };

  var getBuiltIn = function getBuiltIn(namespace, method) {
    return arguments.length < 2 ? aFunction(global$1[namespace]) : global$1[namespace] && global$1[namespace][method];
  };

  var objectIsPrototypeOf = functionUncurryThis({}.isPrototypeOf);

  var engineUserAgent = getBuiltIn('navigator', 'userAgent') || '';

  var process$5 = global$1.process;
  var Deno = global$1.Deno;
  var versions = process$5 && process$5.versions || Deno && Deno.version;
  var v8 = versions && versions.v8;
  var match, version;

  if (v8) {
    match = v8.split('.'); // in old Chrome, versions of V8 isn't V8 = Chrome / 10
    // but their correct versions are not interesting for us

    version = match[0] > 0 && match[0] < 4 ? 1 : +(match[0] + match[1]);
  } // BrowserFS NodeJS `process` polyfill incorrectly set `.v8` to `0.0`
  // so check `userAgent` even if `.v8` exists, but 0


  if (!version && engineUserAgent) {
    match = engineUserAgent.match(/Edge\/(\d+)/);

    if (!match || match[1] >= 74) {
      match = engineUserAgent.match(/Chrome\/(\d+)/);
      if (match) version = +match[1];
    }
  }

  var engineV8Version = version;

  /* eslint-disable es/no-symbol -- required for testing */

  var nativeSymbol = !!Object.getOwnPropertySymbols && !fails(function () {
    var symbol = Symbol(); // Chrome 38 Symbol has incorrect toString conversion
    // `get-own-property-symbols` polyfill symbols converted to object are not Symbol instances

    return !String(symbol) || !(Object(symbol) instanceof Symbol) || // Chrome 38-40 symbols are not inherited from DOM collections prototypes to instances
    !Symbol.sham && engineV8Version && engineV8Version < 41;
  });

  var useSymbolAsUid = nativeSymbol && !Symbol.sham && _typeof(Symbol.iterator) == 'symbol';

  var Object$5 = global$1.Object;
  var isSymbol = useSymbolAsUid ? function (it) {
    return _typeof(it) == 'symbol';
  } : function (it) {
    var $Symbol = getBuiltIn('Symbol');
    return isCallable($Symbol) && objectIsPrototypeOf($Symbol.prototype, Object$5(it));
  };

  var String$7 = global$1.String;

  var tryToString = function tryToString(argument) {
    try {
      return String$7(argument);
    } catch (error) {
      return 'Object';
    }
  };

  var TypeError$u = global$1.TypeError; // `Assert: IsCallable(argument) is true`

  var aCallable = function aCallable(argument) {
    if (isCallable(argument)) return argument;
    throw TypeError$u(tryToString(argument) + ' is not a function');
  };

  // https://tc39.es/ecma262/#sec-getmethod

  var getMethod = function getMethod(V, P) {
    var func = V[P];
    return func == null ? undefined : aCallable(func);
  };

  var TypeError$t = global$1.TypeError; // `OrdinaryToPrimitive` abstract operation
  // https://tc39.es/ecma262/#sec-ordinarytoprimitive

  var ordinaryToPrimitive = function ordinaryToPrimitive(input, pref) {
    var fn, val;
    if (pref === 'string' && isCallable(fn = input.toString) && !isObject(val = functionCall(fn, input))) return val;
    if (isCallable(fn = input.valueOf) && !isObject(val = functionCall(fn, input))) return val;
    if (pref !== 'string' && isCallable(fn = input.toString) && !isObject(val = functionCall(fn, input))) return val;
    throw TypeError$t("Can't convert object to primitive value");
  };

  var isPure = false;

  var defineProperty$g = Object.defineProperty;

  var setGlobal = function setGlobal(key, value) {
    try {
      defineProperty$g(global$1, key, {
        value: value,
        configurable: true,
        writable: true
      });
    } catch (error) {
      global$1[key] = value;
    }

    return value;
  };

  var SHARED = '__core-js_shared__';
  var store$1 = global$1[SHARED] || setGlobal(SHARED, {});
  var sharedStore = store$1;

  var shared = createCommonjsModule(function (module) {
    (module.exports = function (key, value) {
      return sharedStore[key] || (sharedStore[key] = value !== undefined ? value : {});
    })('versions', []).push({
      version: '3.21.1',
      mode: 'global',
      copyright: '© 2014-2022 Denis Pushkarev (zloirock.ru)',
      license: 'https://github.com/zloirock/core-js/blob/v3.21.1/LICENSE',
      source: 'https://github.com/zloirock/core-js'
    });
  });

  var Object$4 = global$1.Object; // `ToObject` abstract operation
  // https://tc39.es/ecma262/#sec-toobject

  var toObject = function toObject(argument) {
    return Object$4(requireObjectCoercible(argument));
  };

  var hasOwnProperty = functionUncurryThis({}.hasOwnProperty); // `HasOwnProperty` abstract operation
  // https://tc39.es/ecma262/#sec-hasownproperty

  var hasOwnProperty_1 = Object.hasOwn || function hasOwn(it, key) {
    return hasOwnProperty(toObject(it), key);
  };

  var id$2 = 0;
  var postfix = Math.random();
  var toString$1 = functionUncurryThis(1.0.toString);

  var uid = function uid(key) {
    return 'Symbol(' + (key === undefined ? '' : key) + ')_' + toString$1(++id$2 + postfix, 36);
  };

  var WellKnownSymbolsStore$1 = shared('wks');
  var _Symbol$2 = global$1.Symbol;
  var symbolFor = _Symbol$2 && _Symbol$2['for'];
  var createWellKnownSymbol = useSymbolAsUid ? _Symbol$2 : _Symbol$2 && _Symbol$2.withoutSetter || uid;

  var wellKnownSymbol = function wellKnownSymbol(name) {
    if (!hasOwnProperty_1(WellKnownSymbolsStore$1, name) || !(nativeSymbol || typeof WellKnownSymbolsStore$1[name] == 'string')) {
      var description = 'Symbol.' + name;

      if (nativeSymbol && hasOwnProperty_1(_Symbol$2, name)) {
        WellKnownSymbolsStore$1[name] = _Symbol$2[name];
      } else if (useSymbolAsUid && symbolFor) {
        WellKnownSymbolsStore$1[name] = symbolFor(description);
      } else {
        WellKnownSymbolsStore$1[name] = createWellKnownSymbol(description);
      }
    }

    return WellKnownSymbolsStore$1[name];
  };

  var TypeError$s = global$1.TypeError;
  var TO_PRIMITIVE$2 = wellKnownSymbol('toPrimitive'); // `ToPrimitive` abstract operation
  // https://tc39.es/ecma262/#sec-toprimitive

  var toPrimitive = function toPrimitive(input, pref) {
    if (!isObject(input) || isSymbol(input)) return input;
    var exoticToPrim = getMethod(input, TO_PRIMITIVE$2);
    var result;

    if (exoticToPrim) {
      if (pref === undefined) pref = 'default';
      result = functionCall(exoticToPrim, input, pref);
      if (!isObject(result) || isSymbol(result)) return result;
      throw TypeError$s("Can't convert object to primitive value");
    }

    if (pref === undefined) pref = 'number';
    return ordinaryToPrimitive(input, pref);
  };

  // https://tc39.es/ecma262/#sec-topropertykey

  var toPropertyKey = function toPropertyKey(argument) {
    var key = toPrimitive(argument, 'string');
    return isSymbol(key) ? key : key + '';
  };

  var document$3 = global$1.document; // typeof document.createElement is 'object' in old IE

  var EXISTS$1 = isObject(document$3) && isObject(document$3.createElement);

  var documentCreateElement = function documentCreateElement(it) {
    return EXISTS$1 ? document$3.createElement(it) : {};
  };

  var ie8DomDefine = !descriptors && !fails(function () {
    // eslint-disable-next-line es/no-object-defineproperty -- required for testing
    return Object.defineProperty(documentCreateElement('div'), 'a', {
      get: function get() {
        return 7;
      }
    }).a != 7;
  });

  var $getOwnPropertyDescriptor$2 = Object.getOwnPropertyDescriptor; // `Object.getOwnPropertyDescriptor` method
  // https://tc39.es/ecma262/#sec-object.getownpropertydescriptor

  var f$8 = descriptors ? $getOwnPropertyDescriptor$2 : function getOwnPropertyDescriptor(O, P) {
    O = toIndexedObject(O);
    P = toPropertyKey(P);
    if (ie8DomDefine) try {
      return $getOwnPropertyDescriptor$2(O, P);
    } catch (error) {
      /* empty */
    }
    if (hasOwnProperty_1(O, P)) return createPropertyDescriptor(!functionCall(objectPropertyIsEnumerable.f, O, P), O[P]);
  };
  var objectGetOwnPropertyDescriptor = {
    f: f$8
  };

  // https://bugs.chromium.org/p/v8/issues/detail?id=3334

  var v8PrototypeDefineBug = descriptors && fails(function () {
    // eslint-disable-next-line es/no-object-defineproperty -- required for testing
    return Object.defineProperty(function () {
      /* empty */
    }, 'prototype', {
      value: 42,
      writable: false
    }).prototype != 42;
  });

  var String$6 = global$1.String;
  var TypeError$r = global$1.TypeError; // `Assert: Type(argument) is Object`

  var anObject = function anObject(argument) {
    if (isObject(argument)) return argument;
    throw TypeError$r(String$6(argument) + ' is not an object');
  };

  var TypeError$q = global$1.TypeError; // eslint-disable-next-line es/no-object-defineproperty -- safe

  var $defineProperty$1 = Object.defineProperty; // eslint-disable-next-line es/no-object-getownpropertydescriptor -- safe

  var $getOwnPropertyDescriptor$1 = Object.getOwnPropertyDescriptor;
  var ENUMERABLE = 'enumerable';
  var CONFIGURABLE$1 = 'configurable';
  var WRITABLE = 'writable'; // `Object.defineProperty` method
  // https://tc39.es/ecma262/#sec-object.defineproperty

  var f$7 = descriptors ? v8PrototypeDefineBug ? function defineProperty(O, P, Attributes) {
    anObject(O);
    P = toPropertyKey(P);
    anObject(Attributes);

    if (typeof O === 'function' && P === 'prototype' && 'value' in Attributes && WRITABLE in Attributes && !Attributes[WRITABLE]) {
      var current = $getOwnPropertyDescriptor$1(O, P);

      if (current && current[WRITABLE]) {
        O[P] = Attributes.value;
        Attributes = {
          configurable: CONFIGURABLE$1 in Attributes ? Attributes[CONFIGURABLE$1] : current[CONFIGURABLE$1],
          enumerable: ENUMERABLE in Attributes ? Attributes[ENUMERABLE] : current[ENUMERABLE],
          writable: false
        };
      }
    }

    return $defineProperty$1(O, P, Attributes);
  } : $defineProperty$1 : function defineProperty(O, P, Attributes) {
    anObject(O);
    P = toPropertyKey(P);
    anObject(Attributes);
    if (ie8DomDefine) try {
      return $defineProperty$1(O, P, Attributes);
    } catch (error) {
      /* empty */
    }
    if ('get' in Attributes || 'set' in Attributes) throw TypeError$q('Accessors not supported');
    if ('value' in Attributes) O[P] = Attributes.value;
    return O;
  };
  var objectDefineProperty = {
    f: f$7
  };

  var createNonEnumerableProperty = descriptors ? function (object, key, value) {
    return objectDefineProperty.f(object, key, createPropertyDescriptor(1, value));
  } : function (object, key, value) {
    object[key] = value;
    return object;
  };

  var functionToString$1 = functionUncurryThis(Function.toString); // this helper broken in `core-js@3.4.1-3.4.4`, so we can't use `shared` helper

  if (!isCallable(sharedStore.inspectSource)) {
    sharedStore.inspectSource = function (it) {
      return functionToString$1(it);
    };
  }

  var inspectSource = sharedStore.inspectSource;

  var WeakMap$2 = global$1.WeakMap;
  var nativeWeakMap = isCallable(WeakMap$2) && /native code/.test(inspectSource(WeakMap$2));

  var keys$3 = shared('keys');

  var sharedKey = function sharedKey(key) {
    return keys$3[key] || (keys$3[key] = uid(key));
  };

  var hiddenKeys$1 = {};

  var OBJECT_ALREADY_INITIALIZED = 'Object already initialized';
  var TypeError$p = global$1.TypeError;
  var WeakMap$1 = global$1.WeakMap;
  var set$5, get$4, has;

  var enforce = function enforce(it) {
    return has(it) ? get$4(it) : set$5(it, {});
  };

  var getterFor$1 = function getterFor(TYPE) {
    return function (it) {
      var state;

      if (!isObject(it) || (state = get$4(it)).type !== TYPE) {
        throw TypeError$p('Incompatible receiver, ' + TYPE + ' required');
      }

      return state;
    };
  };

  if (nativeWeakMap || sharedStore.state) {
    var store = sharedStore.state || (sharedStore.state = new WeakMap$1());
    var wmget = functionUncurryThis(store.get);
    var wmhas = functionUncurryThis(store.has);
    var wmset = functionUncurryThis(store.set);

    set$5 = function set(it, metadata) {
      if (wmhas(store, it)) throw new TypeError$p(OBJECT_ALREADY_INITIALIZED);
      metadata.facade = it;
      wmset(store, it, metadata);
      return metadata;
    };

    get$4 = function get(it) {
      return wmget(store, it) || {};
    };

    has = function has(it) {
      return wmhas(store, it);
    };
  } else {
    var STATE = sharedKey('state');
    hiddenKeys$1[STATE] = true;

    set$5 = function set(it, metadata) {
      if (hasOwnProperty_1(it, STATE)) throw new TypeError$p(OBJECT_ALREADY_INITIALIZED);
      metadata.facade = it;
      createNonEnumerableProperty(it, STATE, metadata);
      return metadata;
    };

    get$4 = function get(it) {
      return hasOwnProperty_1(it, STATE) ? it[STATE] : {};
    };

    has = function has(it) {
      return hasOwnProperty_1(it, STATE);
    };
  }

  var internalState = {
    set: set$5,
    get: get$4,
    has: has,
    enforce: enforce,
    getterFor: getterFor$1
  };

  var FunctionPrototype$3 = Function.prototype; // eslint-disable-next-line es/no-object-getownpropertydescriptor -- safe

  var getDescriptor = descriptors && Object.getOwnPropertyDescriptor;
  var EXISTS = hasOwnProperty_1(FunctionPrototype$3, 'name'); // additional protection from minified / mangled / dropped function names

  var PROPER = EXISTS && function something() {
    /* empty */
  }.name === 'something';

  var CONFIGURABLE = EXISTS && (!descriptors || descriptors && getDescriptor(FunctionPrototype$3, 'name').configurable);
  var functionName = {
    EXISTS: EXISTS,
    PROPER: PROPER,
    CONFIGURABLE: CONFIGURABLE
  };

  var redefine = createCommonjsModule(function (module) {
    var CONFIGURABLE_FUNCTION_NAME = functionName.CONFIGURABLE;
    var getInternalState = internalState.get;
    var enforceInternalState = internalState.enforce;
    var TEMPLATE = String(String).split('String');
    (module.exports = function (O, key, value, options) {
      var unsafe = options ? !!options.unsafe : false;
      var simple = options ? !!options.enumerable : false;
      var noTargetGet = options ? !!options.noTargetGet : false;
      var name = options && options.name !== undefined ? options.name : key;
      var state;

      if (isCallable(value)) {
        if (String(name).slice(0, 7) === 'Symbol(') {
          name = '[' + String(name).replace(/^Symbol\(([^)]*)\)/, '$1') + ']';
        }

        if (!hasOwnProperty_1(value, 'name') || CONFIGURABLE_FUNCTION_NAME && value.name !== name) {
          createNonEnumerableProperty(value, 'name', name);
        }

        state = enforceInternalState(value);

        if (!state.source) {
          state.source = TEMPLATE.join(typeof name == 'string' ? name : '');
        }
      }

      if (O === global$1) {
        if (simple) O[key] = value;else setGlobal(key, value);
        return;
      } else if (!unsafe) {
        delete O[key];
      } else if (!noTargetGet && O[key]) {
        simple = true;
      }

      if (simple) O[key] = value;else createNonEnumerableProperty(O, key, value); // add fake Function#toString for correct work wrapped methods / constructors with methods like LoDash isNative
    })(Function.prototype, 'toString', function toString() {
      return isCallable(this) && getInternalState(this).source || inspectSource(this);
    });
  });

  var ceil$2 = Math.ceil;
  var floor$b = Math.floor; // `ToIntegerOrInfinity` abstract operation
  // https://tc39.es/ecma262/#sec-tointegerorinfinity

  var toIntegerOrInfinity = function toIntegerOrInfinity(argument) {
    var number = +argument; // eslint-disable-next-line no-self-compare -- safe

    return number !== number || number === 0 ? 0 : (number > 0 ? floor$b : ceil$2)(number);
  };

  var max$6 = Math.max;
  var min$9 = Math.min; // Helper for a popular repeating case of the spec:
  // Let integer be ? ToInteger(index).
  // If integer < 0, let result be max((length + integer), 0); else let result be min(integer, length).

  var toAbsoluteIndex = function toAbsoluteIndex(index, length) {
    var integer = toIntegerOrInfinity(index);
    return integer < 0 ? max$6(integer + length, 0) : min$9(integer, length);
  };

  var min$8 = Math.min; // `ToLength` abstract operation
  // https://tc39.es/ecma262/#sec-tolength

  var toLength = function toLength(argument) {
    return argument > 0 ? min$8(toIntegerOrInfinity(argument), 0x1FFFFFFFFFFFFF) : 0; // 2 ** 53 - 1 == 9007199254740991
  };

  // https://tc39.es/ecma262/#sec-lengthofarraylike

  var lengthOfArrayLike = function lengthOfArrayLike(obj) {
    return toLength(obj.length);
  };

  var createMethod$6 = function createMethod(IS_INCLUDES) {
    return function ($this, el, fromIndex) {
      var O = toIndexedObject($this);
      var length = lengthOfArrayLike(O);
      var index = toAbsoluteIndex(fromIndex, length);
      var value; // Array#includes uses SameValueZero equality algorithm
      // eslint-disable-next-line no-self-compare -- NaN check

      if (IS_INCLUDES && el != el) while (length > index) {
        value = O[index++]; // eslint-disable-next-line no-self-compare -- NaN check

        if (value != value) return true; // Array#indexOf ignores holes, Array#includes - not
      } else for (; length > index; index++) {
        if ((IS_INCLUDES || index in O) && O[index] === el) return IS_INCLUDES || index || 0;
      }
      return !IS_INCLUDES && -1;
    };
  };

  var arrayIncludes = {
    // `Array.prototype.includes` method
    // https://tc39.es/ecma262/#sec-array.prototype.includes
    includes: createMethod$6(true),
    // `Array.prototype.indexOf` method
    // https://tc39.es/ecma262/#sec-array.prototype.indexof
    indexOf: createMethod$6(false)
  };

  var indexOf$2 = arrayIncludes.indexOf;
  var push$d = functionUncurryThis([].push);

  var objectKeysInternal = function objectKeysInternal(object, names) {
    var O = toIndexedObject(object);
    var i = 0;
    var result = [];
    var key;

    for (key in O) {
      !hasOwnProperty_1(hiddenKeys$1, key) && hasOwnProperty_1(O, key) && push$d(result, key);
    } // Don't enum bug & hidden keys


    while (names.length > i) {
      if (hasOwnProperty_1(O, key = names[i++])) {
        ~indexOf$2(result, key) || push$d(result, key);
      }
    }

    return result;
  };

  // IE8- don't enum bug keys
  var enumBugKeys = ['constructor', 'hasOwnProperty', 'isPrototypeOf', 'propertyIsEnumerable', 'toLocaleString', 'toString', 'valueOf'];

  var hiddenKeys = enumBugKeys.concat('length', 'prototype'); // `Object.getOwnPropertyNames` method
  // https://tc39.es/ecma262/#sec-object.getownpropertynames
  // eslint-disable-next-line es/no-object-getownpropertynames -- safe

  var f$6 = Object.getOwnPropertyNames || function getOwnPropertyNames(O) {
    return objectKeysInternal(O, hiddenKeys);
  };

  var objectGetOwnPropertyNames = {
    f: f$6
  };

  // eslint-disable-next-line es/no-object-getownpropertysymbols -- safe
  var f$5 = Object.getOwnPropertySymbols;
  var objectGetOwnPropertySymbols = {
    f: f$5
  };

  var concat$3 = functionUncurryThis([].concat); // all object keys, includes non-enumerable and symbols

  var ownKeys = getBuiltIn('Reflect', 'ownKeys') || function ownKeys(it) {
    var keys = objectGetOwnPropertyNames.f(anObject(it));
    var getOwnPropertySymbols = objectGetOwnPropertySymbols.f;
    return getOwnPropertySymbols ? concat$3(keys, getOwnPropertySymbols(it)) : keys;
  };

  var copyConstructorProperties = function copyConstructorProperties(target, source, exceptions) {
    var keys = ownKeys(source);
    var defineProperty = objectDefineProperty.f;
    var getOwnPropertyDescriptor = objectGetOwnPropertyDescriptor.f;

    for (var i = 0; i < keys.length; i++) {
      var key = keys[i];

      if (!hasOwnProperty_1(target, key) && !(exceptions && hasOwnProperty_1(exceptions, key))) {
        defineProperty(target, key, getOwnPropertyDescriptor(source, key));
      }
    }
  };

  var replacement = /#|\.prototype\./;

  var isForced = function isForced(feature, detection) {
    var value = data[normalize$1(feature)];
    return value == POLYFILL ? true : value == NATIVE ? false : isCallable(detection) ? fails(detection) : !!detection;
  };

  var normalize$1 = isForced.normalize = function (string) {
    return String(string).replace(replacement, '.').toLowerCase();
  };

  var data = isForced.data = {};
  var NATIVE = isForced.NATIVE = 'N';
  var POLYFILL = isForced.POLYFILL = 'P';
  var isForced_1 = isForced;

  var getOwnPropertyDescriptor$7 = objectGetOwnPropertyDescriptor.f;
  /*
    options.target      - name of the target object
    options.global      - target is the global object
    options.stat        - export as static methods of target
    options.proto       - export as prototype methods of target
    options.real        - real prototype method for the `pure` version
    options.forced      - export even if the native feature is available
    options.bind        - bind methods to the target, required for the `pure` version
    options.wrap        - wrap constructors to preventing global pollution, required for the `pure` version
    options.unsafe      - use the simple assignment of property instead of delete + defineProperty
    options.sham        - add a flag to not completely full polyfills
    options.enumerable  - export as enumerable property
    options.noTargetGet - prevent calling a getter on target
    options.name        - the .name of the function if it does not match the key
  */

  var _export = function _export(options, source) {
    var TARGET = options.target;
    var GLOBAL = options.global;
    var STATIC = options.stat;
    var FORCED, target, key, targetProperty, sourceProperty, descriptor;

    if (GLOBAL) {
      target = global$1;
    } else if (STATIC) {
      target = global$1[TARGET] || setGlobal(TARGET, {});
    } else {
      target = (global$1[TARGET] || {}).prototype;
    }

    if (target) for (key in source) {
      sourceProperty = source[key];

      if (options.noTargetGet) {
        descriptor = getOwnPropertyDescriptor$7(target, key);
        targetProperty = descriptor && descriptor.value;
      } else targetProperty = target[key];

      FORCED = isForced_1(GLOBAL ? key : TARGET + (STATIC ? '.' : '#') + key, options.forced); // contained in target

      if (!FORCED && targetProperty !== undefined) {
        if (_typeof(sourceProperty) == _typeof(targetProperty)) continue;
        copyConstructorProperties(sourceProperty, targetProperty);
      } // add a flag to not completely full polyfills


      if (options.sham || targetProperty && targetProperty.sham) {
        createNonEnumerableProperty(sourceProperty, 'sham', true);
      } // extend global


      redefine(target, key, sourceProperty, options);
    }
  };

  var FunctionPrototype$2 = Function.prototype;
  var apply = FunctionPrototype$2.apply;
  var call = FunctionPrototype$2.call; // eslint-disable-next-line es/no-reflect -- safe

  var functionApply = (typeof Reflect === "undefined" ? "undefined" : _typeof(Reflect)) == 'object' && Reflect.apply || (functionBindNative ? call.bind(apply) : function () {
    return call.apply(apply, arguments);
  });

  // https://tc39.es/ecma262/#sec-isarray
  // eslint-disable-next-line es/no-array-isarray -- safe

  var isArray = Array.isArray || function isArray(argument) {
    return classofRaw(argument) == 'Array';
  };

  var TO_STRING_TAG$5 = wellKnownSymbol('toStringTag');
  var test$1 = {};
  test$1[TO_STRING_TAG$5] = 'z';
  var toStringTagSupport = String(test$1) === '[object z]';

  var TO_STRING_TAG$4 = wellKnownSymbol('toStringTag');
  var Object$3 = global$1.Object; // ES3 wrong here

  var CORRECT_ARGUMENTS = classofRaw(function () {
    return arguments;
  }()) == 'Arguments'; // fallback for IE11 Script Access Denied error

  var tryGet = function tryGet(it, key) {
    try {
      return it[key];
    } catch (error) {
      /* empty */
    }
  }; // getting tag from ES6+ `Object.prototype.toString`


  var classof = toStringTagSupport ? classofRaw : function (it) {
    var O, tag, result;
    return it === undefined ? 'Undefined' : it === null ? 'Null' // @@toStringTag case
    : typeof (tag = tryGet(O = Object$3(it), TO_STRING_TAG$4)) == 'string' ? tag // builtinTag case
    : CORRECT_ARGUMENTS ? classofRaw(O) // ES3 arguments fallback
    : (result = classofRaw(O)) == 'Object' && isCallable(O.callee) ? 'Arguments' : result;
  };

  var String$5 = global$1.String;

  var toString = function toString(argument) {
    if (classof(argument) === 'Symbol') throw TypeError('Cannot convert a Symbol value to a string');
    return String$5(argument);
  };

  // https://tc39.es/ecma262/#sec-object.keys
  // eslint-disable-next-line es/no-object-keys -- safe

  var objectKeys$1 = Object.keys || function keys(O) {
    return objectKeysInternal(O, enumBugKeys);
  };

  // https://tc39.es/ecma262/#sec-object.defineproperties
  // eslint-disable-next-line es/no-object-defineproperties -- safe

  var f$4 = descriptors && !v8PrototypeDefineBug ? Object.defineProperties : function defineProperties(O, Properties) {
    anObject(O);
    var props = toIndexedObject(Properties);
    var keys = objectKeys$1(Properties);
    var length = keys.length;
    var index = 0;
    var key;

    while (length > index) {
      objectDefineProperty.f(O, key = keys[index++], props[key]);
    }

    return O;
  };
  var objectDefineProperties = {
    f: f$4
  };

  var html = getBuiltIn('document', 'documentElement');

  /* global ActiveXObject -- old IE, WSH */
  var GT = '>';
  var LT = '<';
  var PROTOTYPE$2 = 'prototype';
  var SCRIPT = 'script';
  var IE_PROTO$1 = sharedKey('IE_PROTO');

  var EmptyConstructor = function EmptyConstructor() {
    /* empty */
  };

  var scriptTag = function scriptTag(content) {
    return LT + SCRIPT + GT + content + LT + '/' + SCRIPT + GT;
  }; // Create object with fake `null` prototype: use ActiveX Object with cleared prototype


  var NullProtoObjectViaActiveX = function NullProtoObjectViaActiveX(activeXDocument) {
    activeXDocument.write(scriptTag(''));
    activeXDocument.close();
    var temp = activeXDocument.parentWindow.Object;
    activeXDocument = null; // avoid memory leak

    return temp;
  }; // Create object with fake `null` prototype: use iframe Object with cleared prototype


  var NullProtoObjectViaIFrame = function NullProtoObjectViaIFrame() {
    // Thrash, waste and sodomy: IE GC bug
    var iframe = documentCreateElement('iframe');
    var JS = 'java' + SCRIPT + ':';
    var iframeDocument;
    iframe.style.display = 'none';
    html.appendChild(iframe); // https://github.com/zloirock/core-js/issues/475

    iframe.src = String(JS);
    iframeDocument = iframe.contentWindow.document;
    iframeDocument.open();
    iframeDocument.write(scriptTag('document.F=Object'));
    iframeDocument.close();
    return iframeDocument.F;
  }; // Check for document.domain and active x support
  // No need to use active x approach when document.domain is not set
  // see https://github.com/es-shims/es5-shim/issues/150
  // variation of https://github.com/kitcambridge/es5-shim/commit/4f738ac066346
  // avoid IE GC bug


  var activeXDocument;

  var _NullProtoObject = function NullProtoObject() {
    try {
      activeXDocument = new ActiveXObject('htmlfile');
    } catch (error) {
      /* ignore */
    }

    _NullProtoObject = typeof document != 'undefined' ? document.domain && activeXDocument ? NullProtoObjectViaActiveX(activeXDocument) // old IE
    : NullProtoObjectViaIFrame() : NullProtoObjectViaActiveX(activeXDocument); // WSH

    var length = enumBugKeys.length;

    while (length--) {
      delete _NullProtoObject[PROTOTYPE$2][enumBugKeys[length]];
    }

    return _NullProtoObject();
  };

  hiddenKeys$1[IE_PROTO$1] = true; // `Object.create` method
  // https://tc39.es/ecma262/#sec-object.create

  var objectCreate = Object.create || function create(O, Properties) {
    var result;

    if (O !== null) {
      EmptyConstructor[PROTOTYPE$2] = anObject(O);
      result = new EmptyConstructor();
      EmptyConstructor[PROTOTYPE$2] = null; // add "__proto__" for Object.getPrototypeOf polyfill

      result[IE_PROTO$1] = O;
    } else result = _NullProtoObject();

    return Properties === undefined ? result : objectDefineProperties.f(result, Properties);
  };

  var createProperty = function createProperty(object, key, value) {
    var propertyKey = toPropertyKey(key);
    if (propertyKey in object) objectDefineProperty.f(object, propertyKey, createPropertyDescriptor(0, value));else object[propertyKey] = value;
  };

  var Array$9 = global$1.Array;
  var max$5 = Math.max;

  var arraySliceSimple = function arraySliceSimple(O, start, end) {
    var length = lengthOfArrayLike(O);
    var k = toAbsoluteIndex(start, length);
    var fin = toAbsoluteIndex(end === undefined ? length : end, length);
    var result = Array$9(max$5(fin - k, 0));

    for (var n = 0; k < fin; k++, n++) {
      createProperty(result, n, O[k]);
    }

    result.length = n;
    return result;
  };

  var $getOwnPropertyNames$1 = objectGetOwnPropertyNames.f;
  var windowNames = (typeof window === "undefined" ? "undefined" : _typeof(window)) == 'object' && window && Object.getOwnPropertyNames ? Object.getOwnPropertyNames(window) : [];

  var getWindowNames = function getWindowNames(it) {
    try {
      return $getOwnPropertyNames$1(it);
    } catch (error) {
      return arraySliceSimple(windowNames);
    }
  }; // fallback for IE11 buggy Object.getOwnPropertyNames with iframe and window


  var f$3 = function getOwnPropertyNames(it) {
    return windowNames && classofRaw(it) == 'Window' ? getWindowNames(it) : $getOwnPropertyNames$1(toIndexedObject(it));
  };

  var objectGetOwnPropertyNamesExternal = {
    f: f$3
  };

  var arraySlice$1 = functionUncurryThis([].slice);

  var f$2 = wellKnownSymbol;
  var wellKnownSymbolWrapped = {
    f: f$2
  };

  var path$1 = global$1;

  var defineProperty$f = objectDefineProperty.f;

  var defineWellKnownSymbol = function defineWellKnownSymbol(NAME) {
    var _Symbol = path$1.Symbol || (path$1.Symbol = {});

    if (!hasOwnProperty_1(_Symbol, NAME)) defineProperty$f(_Symbol, NAME, {
      value: wellKnownSymbolWrapped.f(NAME)
    });
  };

  var defineProperty$e = objectDefineProperty.f;
  var TO_STRING_TAG$3 = wellKnownSymbol('toStringTag');

  var setToStringTag = function setToStringTag(target, TAG, STATIC) {
    if (target && !STATIC) target = target.prototype;

    if (target && !hasOwnProperty_1(target, TO_STRING_TAG$3)) {
      defineProperty$e(target, TO_STRING_TAG$3, {
        configurable: true,
        value: TAG
      });
    }
  };

  var bind$1 = functionUncurryThis(functionUncurryThis.bind); // optional / simple context binding

  var functionBindContext = function functionBindContext(fn, that) {
    aCallable(fn);
    return that === undefined ? fn : functionBindNative ? bind$1(fn, that) : function
      /* ...args */
    () {
      return fn.apply(that, arguments);
    };
  };

  var noop$4 = function noop() {
    /* empty */
  };

  var empty$1 = [];
  var construct$1 = getBuiltIn('Reflect', 'construct');
  var constructorRegExp = /^\s*(?:class|function)\b/;
  var exec$6 = functionUncurryThis(constructorRegExp.exec);
  var INCORRECT_TO_STRING$2 = !constructorRegExp.exec(noop$4);

  var isConstructorModern = function isConstructor(argument) {
    if (!isCallable(argument)) return false;

    try {
      construct$1(noop$4, empty$1, argument);
      return true;
    } catch (error) {
      return false;
    }
  };

  var isConstructorLegacy = function isConstructor(argument) {
    if (!isCallable(argument)) return false;

    switch (classof(argument)) {
      case 'AsyncFunction':
      case 'GeneratorFunction':
      case 'AsyncGeneratorFunction':
        return false;
    }

    try {
      // we can't check .prototype since constructors produced by .bind haven't it
      // `Function#toString` throws on some built-it function in some legacy engines
      // (for example, `DOMQuad` and similar in FF41-)
      return INCORRECT_TO_STRING$2 || !!exec$6(constructorRegExp, inspectSource(argument));
    } catch (error) {
      return true;
    }
  };

  isConstructorLegacy.sham = true; // `IsConstructor` abstract operation
  // https://tc39.es/ecma262/#sec-isconstructor

  var isConstructor = !construct$1 || fails(function () {
    var called;
    return isConstructorModern(isConstructorModern.call) || !isConstructorModern(Object) || !isConstructorModern(function () {
      called = true;
    }) || called;
  }) ? isConstructorLegacy : isConstructorModern;

  var SPECIES$6 = wellKnownSymbol('species');
  var Array$8 = global$1.Array; // a part of `ArraySpeciesCreate` abstract operation
  // https://tc39.es/ecma262/#sec-arrayspeciescreate

  var arraySpeciesConstructor = function arraySpeciesConstructor(originalArray) {
    var C;

    if (isArray(originalArray)) {
      C = originalArray.constructor; // cross-realm fallback

      if (isConstructor(C) && (C === Array$8 || isArray(C.prototype))) C = undefined;else if (isObject(C)) {
        C = C[SPECIES$6];
        if (C === null) C = undefined;
      }
    }

    return C === undefined ? Array$8 : C;
  };

  // https://tc39.es/ecma262/#sec-arrayspeciescreate

  var arraySpeciesCreate = function arraySpeciesCreate(originalArray, length) {
    return new (arraySpeciesConstructor(originalArray))(length === 0 ? 0 : length);
  };

  var push$c = functionUncurryThis([].push); // `Array.prototype.{ forEach, map, filter, some, every, find, findIndex, filterReject }` methods implementation

  var createMethod$5 = function createMethod(TYPE) {
    var IS_MAP = TYPE == 1;
    var IS_FILTER = TYPE == 2;
    var IS_SOME = TYPE == 3;
    var IS_EVERY = TYPE == 4;
    var IS_FIND_INDEX = TYPE == 6;
    var IS_FILTER_REJECT = TYPE == 7;
    var NO_HOLES = TYPE == 5 || IS_FIND_INDEX;
    return function ($this, callbackfn, that, specificCreate) {
      var O = toObject($this);
      var self = indexedObject(O);
      var boundFunction = functionBindContext(callbackfn, that);
      var length = lengthOfArrayLike(self);
      var index = 0;
      var create = specificCreate || arraySpeciesCreate;
      var target = IS_MAP ? create($this, length) : IS_FILTER || IS_FILTER_REJECT ? create($this, 0) : undefined;
      var value, result;

      for (; length > index; index++) {
        if (NO_HOLES || index in self) {
          value = self[index];
          result = boundFunction(value, index, O);

          if (TYPE) {
            if (IS_MAP) target[index] = result; // map
            else if (result) switch (TYPE) {
              case 3:
                return true;
              // some

              case 5:
                return value;
              // find

              case 6:
                return index;
              // findIndex

              case 2:
                push$c(target, value);
              // filter
            } else switch (TYPE) {
              case 4:
                return false;
              // every

              case 7:
                push$c(target, value);
              // filterReject
            }
          }
        }
      }

      return IS_FIND_INDEX ? -1 : IS_SOME || IS_EVERY ? IS_EVERY : target;
    };
  };

  var arrayIteration = {
    // `Array.prototype.forEach` method
    // https://tc39.es/ecma262/#sec-array.prototype.foreach
    forEach: createMethod$5(0),
    // `Array.prototype.map` method
    // https://tc39.es/ecma262/#sec-array.prototype.map
    map: createMethod$5(1),
    // `Array.prototype.filter` method
    // https://tc39.es/ecma262/#sec-array.prototype.filter
    filter: createMethod$5(2),
    // `Array.prototype.some` method
    // https://tc39.es/ecma262/#sec-array.prototype.some
    some: createMethod$5(3),
    // `Array.prototype.every` method
    // https://tc39.es/ecma262/#sec-array.prototype.every
    every: createMethod$5(4),
    // `Array.prototype.find` method
    // https://tc39.es/ecma262/#sec-array.prototype.find
    find: createMethod$5(5),
    // `Array.prototype.findIndex` method
    // https://tc39.es/ecma262/#sec-array.prototype.findIndex
    findIndex: createMethod$5(6),
    // `Array.prototype.filterReject` method
    // https://github.com/tc39/proposal-array-filtering
    filterReject: createMethod$5(7)
  };

  var $forEach$2 = arrayIteration.forEach;
  var HIDDEN = sharedKey('hidden');
  var SYMBOL = 'Symbol';
  var PROTOTYPE$1 = 'prototype';
  var TO_PRIMITIVE$1 = wellKnownSymbol('toPrimitive');
  var setInternalState$a = internalState.set;
  var getInternalState$9 = internalState.getterFor(SYMBOL);
  var ObjectPrototype$4 = Object[PROTOTYPE$1];
  var $Symbol = global$1.Symbol;
  var SymbolPrototype$1 = $Symbol && $Symbol[PROTOTYPE$1];
  var TypeError$o = global$1.TypeError;
  var QObject = global$1.QObject;
  var $stringify$1 = getBuiltIn('JSON', 'stringify');
  var nativeGetOwnPropertyDescriptor$1 = objectGetOwnPropertyDescriptor.f;
  var nativeDefineProperty = objectDefineProperty.f;
  var nativeGetOwnPropertyNames = objectGetOwnPropertyNamesExternal.f;
  var nativePropertyIsEnumerable = objectPropertyIsEnumerable.f;
  var push$b = functionUncurryThis([].push);
  var AllSymbols = shared('symbols');
  var ObjectPrototypeSymbols = shared('op-symbols');
  var StringToSymbolRegistry = shared('string-to-symbol-registry');
  var SymbolToStringRegistry = shared('symbol-to-string-registry');
  var WellKnownSymbolsStore = shared('wks'); // Don't use setters in Qt Script, https://github.com/zloirock/core-js/issues/173

  var USE_SETTER = !QObject || !QObject[PROTOTYPE$1] || !QObject[PROTOTYPE$1].findChild; // fallback for old Android, https://code.google.com/p/v8/issues/detail?id=687

  var setSymbolDescriptor = descriptors && fails(function () {
    return objectCreate(nativeDefineProperty({}, 'a', {
      get: function get() {
        return nativeDefineProperty(this, 'a', {
          value: 7
        }).a;
      }
    })).a != 7;
  }) ? function (O, P, Attributes) {
    var ObjectPrototypeDescriptor = nativeGetOwnPropertyDescriptor$1(ObjectPrototype$4, P);
    if (ObjectPrototypeDescriptor) delete ObjectPrototype$4[P];
    nativeDefineProperty(O, P, Attributes);

    if (ObjectPrototypeDescriptor && O !== ObjectPrototype$4) {
      nativeDefineProperty(ObjectPrototype$4, P, ObjectPrototypeDescriptor);
    }
  } : nativeDefineProperty;

  var wrap = function wrap(tag, description) {
    var symbol = AllSymbols[tag] = objectCreate(SymbolPrototype$1);
    setInternalState$a(symbol, {
      type: SYMBOL,
      tag: tag,
      description: description
    });
    if (!descriptors) symbol.description = description;
    return symbol;
  };

  var $defineProperty = function defineProperty(O, P, Attributes) {
    if (O === ObjectPrototype$4) $defineProperty(ObjectPrototypeSymbols, P, Attributes);
    anObject(O);
    var key = toPropertyKey(P);
    anObject(Attributes);

    if (hasOwnProperty_1(AllSymbols, key)) {
      if (!Attributes.enumerable) {
        if (!hasOwnProperty_1(O, HIDDEN)) nativeDefineProperty(O, HIDDEN, createPropertyDescriptor(1, {}));
        O[HIDDEN][key] = true;
      } else {
        if (hasOwnProperty_1(O, HIDDEN) && O[HIDDEN][key]) O[HIDDEN][key] = false;
        Attributes = objectCreate(Attributes, {
          enumerable: createPropertyDescriptor(0, false)
        });
      }

      return setSymbolDescriptor(O, key, Attributes);
    }

    return nativeDefineProperty(O, key, Attributes);
  };

  var $defineProperties = function defineProperties(O, Properties) {
    anObject(O);
    var properties = toIndexedObject(Properties);
    var keys = objectKeys$1(properties).concat($getOwnPropertySymbols(properties));
    $forEach$2(keys, function (key) {
      if (!descriptors || functionCall($propertyIsEnumerable$1, properties, key)) $defineProperty(O, key, properties[key]);
    });
    return O;
  };

  var $create = function create(O, Properties) {
    return Properties === undefined ? objectCreate(O) : $defineProperties(objectCreate(O), Properties);
  };

  var $propertyIsEnumerable$1 = function propertyIsEnumerable(V) {
    var P = toPropertyKey(V);
    var enumerable = functionCall(nativePropertyIsEnumerable, this, P);
    if (this === ObjectPrototype$4 && hasOwnProperty_1(AllSymbols, P) && !hasOwnProperty_1(ObjectPrototypeSymbols, P)) return false;
    return enumerable || !hasOwnProperty_1(this, P) || !hasOwnProperty_1(AllSymbols, P) || hasOwnProperty_1(this, HIDDEN) && this[HIDDEN][P] ? enumerable : true;
  };

  var $getOwnPropertyDescriptor = function getOwnPropertyDescriptor(O, P) {
    var it = toIndexedObject(O);
    var key = toPropertyKey(P);
    if (it === ObjectPrototype$4 && hasOwnProperty_1(AllSymbols, key) && !hasOwnProperty_1(ObjectPrototypeSymbols, key)) return;
    var descriptor = nativeGetOwnPropertyDescriptor$1(it, key);

    if (descriptor && hasOwnProperty_1(AllSymbols, key) && !(hasOwnProperty_1(it, HIDDEN) && it[HIDDEN][key])) {
      descriptor.enumerable = true;
    }

    return descriptor;
  };

  var $getOwnPropertyNames = function getOwnPropertyNames(O) {
    var names = nativeGetOwnPropertyNames(toIndexedObject(O));
    var result = [];
    $forEach$2(names, function (key) {
      if (!hasOwnProperty_1(AllSymbols, key) && !hasOwnProperty_1(hiddenKeys$1, key)) push$b(result, key);
    });
    return result;
  };

  var $getOwnPropertySymbols = function getOwnPropertySymbols(O) {
    var IS_OBJECT_PROTOTYPE = O === ObjectPrototype$4;
    var names = nativeGetOwnPropertyNames(IS_OBJECT_PROTOTYPE ? ObjectPrototypeSymbols : toIndexedObject(O));
    var result = [];
    $forEach$2(names, function (key) {
      if (hasOwnProperty_1(AllSymbols, key) && (!IS_OBJECT_PROTOTYPE || hasOwnProperty_1(ObjectPrototype$4, key))) {
        push$b(result, AllSymbols[key]);
      }
    });
    return result;
  }; // `Symbol` constructor
  // https://tc39.es/ecma262/#sec-symbol-constructor


  if (!nativeSymbol) {
    $Symbol = function _Symbol() {
      if (objectIsPrototypeOf(SymbolPrototype$1, this)) throw TypeError$o('Symbol is not a constructor');
      var description = !arguments.length || arguments[0] === undefined ? undefined : toString(arguments[0]);
      var tag = uid(description);

      var setter = function setter(value) {
        if (this === ObjectPrototype$4) functionCall(setter, ObjectPrototypeSymbols, value);
        if (hasOwnProperty_1(this, HIDDEN) && hasOwnProperty_1(this[HIDDEN], tag)) this[HIDDEN][tag] = false;
        setSymbolDescriptor(this, tag, createPropertyDescriptor(1, value));
      };

      if (descriptors && USE_SETTER) setSymbolDescriptor(ObjectPrototype$4, tag, {
        configurable: true,
        set: setter
      });
      return wrap(tag, description);
    };

    SymbolPrototype$1 = $Symbol[PROTOTYPE$1];
    redefine(SymbolPrototype$1, 'toString', function toString() {
      return getInternalState$9(this).tag;
    });
    redefine($Symbol, 'withoutSetter', function (description) {
      return wrap(uid(description), description);
    });
    objectPropertyIsEnumerable.f = $propertyIsEnumerable$1;
    objectDefineProperty.f = $defineProperty;
    objectDefineProperties.f = $defineProperties;
    objectGetOwnPropertyDescriptor.f = $getOwnPropertyDescriptor;
    objectGetOwnPropertyNames.f = objectGetOwnPropertyNamesExternal.f = $getOwnPropertyNames;
    objectGetOwnPropertySymbols.f = $getOwnPropertySymbols;

    wellKnownSymbolWrapped.f = function (name) {
      return wrap(wellKnownSymbol(name), name);
    };

    if (descriptors) {
      // https://github.com/tc39/proposal-Symbol-description
      nativeDefineProperty(SymbolPrototype$1, 'description', {
        configurable: true,
        get: function description() {
          return getInternalState$9(this).description;
        }
      });

      {
        redefine(ObjectPrototype$4, 'propertyIsEnumerable', $propertyIsEnumerable$1, {
          unsafe: true
        });
      }
    }
  }

  _export({
    global: true,
    wrap: true,
    forced: !nativeSymbol,
    sham: !nativeSymbol
  }, {
    Symbol: $Symbol
  });
  $forEach$2(objectKeys$1(WellKnownSymbolsStore), function (name) {
    defineWellKnownSymbol(name);
  });
  _export({
    target: SYMBOL,
    stat: true,
    forced: !nativeSymbol
  }, {
    // `Symbol.for` method
    // https://tc39.es/ecma262/#sec-symbol.for
    'for': function _for(key) {
      var string = toString(key);
      if (hasOwnProperty_1(StringToSymbolRegistry, string)) return StringToSymbolRegistry[string];
      var symbol = $Symbol(string);
      StringToSymbolRegistry[string] = symbol;
      SymbolToStringRegistry[symbol] = string;
      return symbol;
    },
    // `Symbol.keyFor` method
    // https://tc39.es/ecma262/#sec-symbol.keyfor
    keyFor: function keyFor(sym) {
      if (!isSymbol(sym)) throw TypeError$o(sym + ' is not a symbol');
      if (hasOwnProperty_1(SymbolToStringRegistry, sym)) return SymbolToStringRegistry[sym];
    },
    useSetter: function useSetter() {
      USE_SETTER = true;
    },
    useSimple: function useSimple() {
      USE_SETTER = false;
    }
  });
  _export({
    target: 'Object',
    stat: true,
    forced: !nativeSymbol,
    sham: !descriptors
  }, {
    // `Object.create` method
    // https://tc39.es/ecma262/#sec-object.create
    create: $create,
    // `Object.defineProperty` method
    // https://tc39.es/ecma262/#sec-object.defineproperty
    defineProperty: $defineProperty,
    // `Object.defineProperties` method
    // https://tc39.es/ecma262/#sec-object.defineproperties
    defineProperties: $defineProperties,
    // `Object.getOwnPropertyDescriptor` method
    // https://tc39.es/ecma262/#sec-object.getownpropertydescriptors
    getOwnPropertyDescriptor: $getOwnPropertyDescriptor
  });
  _export({
    target: 'Object',
    stat: true,
    forced: !nativeSymbol
  }, {
    // `Object.getOwnPropertyNames` method
    // https://tc39.es/ecma262/#sec-object.getownpropertynames
    getOwnPropertyNames: $getOwnPropertyNames,
    // `Object.getOwnPropertySymbols` method
    // https://tc39.es/ecma262/#sec-object.getownpropertysymbols
    getOwnPropertySymbols: $getOwnPropertySymbols
  }); // Chrome 38 and 39 `Object.getOwnPropertySymbols` fails on primitives
  // https://bugs.chromium.org/p/v8/issues/detail?id=3443

  _export({
    target: 'Object',
    stat: true,
    forced: fails(function () {
      objectGetOwnPropertySymbols.f(1);
    })
  }, {
    getOwnPropertySymbols: function getOwnPropertySymbols(it) {
      return objectGetOwnPropertySymbols.f(toObject(it));
    }
  }); // `JSON.stringify` method behavior with symbols
  // https://tc39.es/ecma262/#sec-json.stringify

  if ($stringify$1) {
    var FORCED_JSON_STRINGIFY = !nativeSymbol || fails(function () {
      var symbol = $Symbol(); // MS Edge converts symbol values to JSON as {}

      return $stringify$1([symbol]) != '[null]' // WebKit converts symbol values to JSON as null
      || $stringify$1({
        a: symbol
      }) != '{}' // V8 throws on boxed symbols
      || $stringify$1(Object(symbol)) != '{}';
    });
    _export({
      target: 'JSON',
      stat: true,
      forced: FORCED_JSON_STRINGIFY
    }, {
      // eslint-disable-next-line no-unused-vars -- required for `.length`
      stringify: function stringify(it, replacer, space) {
        var args = arraySlice$1(arguments);
        var $replacer = replacer;
        if (!isObject(replacer) && it === undefined || isSymbol(it)) return; // IE8 returns string on undefined

        if (!isArray(replacer)) replacer = function replacer(key, value) {
          if (isCallable($replacer)) value = functionCall($replacer, this, key, value);
          if (!isSymbol(value)) return value;
        };
        args[1] = replacer;
        return functionApply($stringify$1, null, args);
      }
    });
  } // `Symbol.prototype[@@toPrimitive]` method
  // https://tc39.es/ecma262/#sec-symbol.prototype-@@toprimitive


  if (!SymbolPrototype$1[TO_PRIMITIVE$1]) {
    var valueOf = SymbolPrototype$1.valueOf; // eslint-disable-next-line no-unused-vars -- required for .length

    redefine(SymbolPrototype$1, TO_PRIMITIVE$1, function (hint) {
      // TODO: improve hint logic
      return functionCall(valueOf, this);
    });
  } // `Symbol.prototype[@@toStringTag]` property
  // https://tc39.es/ecma262/#sec-symbol.prototype-@@tostringtag


  setToStringTag($Symbol, SYMBOL);
  hiddenKeys$1[HIDDEN] = true;

  var defineProperty$d = objectDefineProperty.f;
  var NativeSymbol = global$1.Symbol;
  var SymbolPrototype = NativeSymbol && NativeSymbol.prototype;

  if (descriptors && isCallable(NativeSymbol) && (!('description' in SymbolPrototype) || // Safari 12 bug
  NativeSymbol().description !== undefined)) {
    var EmptyStringDescriptionStore = {}; // wrap Symbol constructor for correct work with undefined description

    var SymbolWrapper = function _Symbol() {
      var description = arguments.length < 1 || arguments[0] === undefined ? undefined : toString(arguments[0]);
      var result = objectIsPrototypeOf(SymbolPrototype, this) ? new NativeSymbol(description) // in Edge 13, String(Symbol(undefined)) === 'Symbol(undefined)'
      : description === undefined ? NativeSymbol() : NativeSymbol(description);
      if (description === '') EmptyStringDescriptionStore[result] = true;
      return result;
    };

    copyConstructorProperties(SymbolWrapper, NativeSymbol);
    SymbolWrapper.prototype = SymbolPrototype;
    SymbolPrototype.constructor = SymbolWrapper;
    var NATIVE_SYMBOL = String(NativeSymbol('test')) == 'Symbol(test)';
    var symbolToString = functionUncurryThis(SymbolPrototype.toString);
    var symbolValueOf = functionUncurryThis(SymbolPrototype.valueOf);
    var regexp = /^Symbol\((.*)\)[^)]+$/;
    var replace$a = functionUncurryThis(''.replace);
    var stringSlice$d = functionUncurryThis(''.slice);
    defineProperty$d(SymbolPrototype, 'description', {
      configurable: true,
      get: function description() {
        var symbol = symbolValueOf(this);
        var string = symbolToString(symbol);
        if (hasOwnProperty_1(EmptyStringDescriptionStore, symbol)) return '';
        var desc = NATIVE_SYMBOL ? stringSlice$d(string, 7, -1) : replace$a(string, regexp, '$1');
        return desc === '' ? undefined : desc;
      }
    });
    _export({
      global: true,
      forced: true
    }, {
      Symbol: SymbolWrapper
    });
  }

  // https://tc39.es/ecma262/#sec-symbol.asynciterator

  defineWellKnownSymbol('asyncIterator');

  // https://tc39.es/ecma262/#sec-symbol.hasinstance

  defineWellKnownSymbol('hasInstance');

  // https://tc39.es/ecma262/#sec-symbol.isconcatspreadable

  defineWellKnownSymbol('isConcatSpreadable');

  // https://tc39.es/ecma262/#sec-symbol.iterator

  defineWellKnownSymbol('iterator');

  // https://tc39.es/ecma262/#sec-symbol.match

  defineWellKnownSymbol('match');

  // https://tc39.es/ecma262/#sec-symbol.matchall

  defineWellKnownSymbol('matchAll');

  // https://tc39.es/ecma262/#sec-symbol.replace

  defineWellKnownSymbol('replace');

  // https://tc39.es/ecma262/#sec-symbol.search

  defineWellKnownSymbol('search');

  // https://tc39.es/ecma262/#sec-symbol.species

  defineWellKnownSymbol('species');

  // https://tc39.es/ecma262/#sec-symbol.split

  defineWellKnownSymbol('split');

  // https://tc39.es/ecma262/#sec-symbol.toprimitive

  defineWellKnownSymbol('toPrimitive');

  // https://tc39.es/ecma262/#sec-symbol.tostringtag

  defineWellKnownSymbol('toStringTag');

  // https://tc39.es/ecma262/#sec-symbol.unscopables

  defineWellKnownSymbol('unscopables');

  var String$4 = global$1.String;
  var TypeError$n = global$1.TypeError;

  var aPossiblePrototype = function aPossiblePrototype(argument) {
    if (_typeof(argument) == 'object' || isCallable(argument)) return argument;
    throw TypeError$n("Can't set " + String$4(argument) + ' as a prototype');
  };

  /* eslint-disable no-proto -- safe */
  // https://tc39.es/ecma262/#sec-object.setprototypeof
  // Works with __proto__ only. Old v8 can't work with null proto objects.
  // eslint-disable-next-line es/no-object-setprototypeof -- safe

  var objectSetPrototypeOf = Object.setPrototypeOf || ('__proto__' in {} ? function () {
    var CORRECT_SETTER = false;
    var test = {};
    var setter;

    try {
      // eslint-disable-next-line es/no-object-getownpropertydescriptor -- safe
      setter = functionUncurryThis(Object.getOwnPropertyDescriptor(Object.prototype, '__proto__').set);
      setter(test, []);
      CORRECT_SETTER = test instanceof Array;
    } catch (error) {
      /* empty */
    }

    return function setPrototypeOf(O, proto) {
      anObject(O);
      aPossiblePrototype(proto);
      if (CORRECT_SETTER) setter(O, proto);else O.__proto__ = proto;
      return O;
    };
  }() : undefined);

  var inheritIfRequired = function inheritIfRequired($this, dummy, Wrapper) {
    var NewTarget, NewTargetPrototype;
    if ( // it can work only with native `setPrototypeOf`
    objectSetPrototypeOf && // we haven't completely correct pre-ES6 way for getting `new.target`, so use this
    isCallable(NewTarget = dummy.constructor) && NewTarget !== Wrapper && isObject(NewTargetPrototype = NewTarget.prototype) && NewTargetPrototype !== Wrapper.prototype) objectSetPrototypeOf($this, NewTargetPrototype);
    return $this;
  };

  var normalizeStringArgument = function normalizeStringArgument(argument, $default) {
    return argument === undefined ? arguments.length < 2 ? '' : $default : toString(argument);
  };

  // https://tc39.es/proposal-error-cause/#sec-errorobjects-install-error-cause

  var installErrorCause = function installErrorCause(O, options) {
    if (isObject(options) && 'cause' in options) {
      createNonEnumerableProperty(O, 'cause', options.cause);
    }
  };

  var replace$9 = functionUncurryThis(''.replace);

  var TEST = function (arg) {
    return String(Error(arg).stack);
  }('zxcasd');

  var V8_OR_CHAKRA_STACK_ENTRY = /\n\s*at [^:]*:[^\n]*/;
  var IS_V8_OR_CHAKRA_STACK = V8_OR_CHAKRA_STACK_ENTRY.test(TEST);

  var clearErrorStack = function clearErrorStack(stack, dropEntries) {
    if (IS_V8_OR_CHAKRA_STACK && typeof stack == 'string') {
      while (dropEntries--) {
        stack = replace$9(stack, V8_OR_CHAKRA_STACK_ENTRY, '');
      }
    }

    return stack;
  };

  var errorStackInstallable = !fails(function () {
    var error = Error('a');
    if (!('stack' in error)) return true; // eslint-disable-next-line es/no-object-defineproperty -- safe

    Object.defineProperty(error, 'stack', createPropertyDescriptor(1, 7));
    return error.stack !== 7;
  });

  var wrapErrorConstructorWithCause = function wrapErrorConstructorWithCause(FULL_NAME, wrapper, FORCED, IS_AGGREGATE_ERROR) {
    var OPTIONS_POSITION = IS_AGGREGATE_ERROR ? 2 : 1;
    var path = FULL_NAME.split('.');
    var ERROR_NAME = path[path.length - 1];
    var OriginalError = getBuiltIn.apply(null, path);
    if (!OriginalError) return;
    var OriginalErrorPrototype = OriginalError.prototype; // V8 9.3- bug https://bugs.chromium.org/p/v8/issues/detail?id=12006

    if (hasOwnProperty_1(OriginalErrorPrototype, 'cause')) delete OriginalErrorPrototype.cause;
    if (!FORCED) return OriginalError;
    var BaseError = getBuiltIn('Error');
    var WrappedError = wrapper(function (a, b) {
      var message = normalizeStringArgument(IS_AGGREGATE_ERROR ? b : a, undefined);
      var result = IS_AGGREGATE_ERROR ? new OriginalError(a) : new OriginalError();
      if (message !== undefined) createNonEnumerableProperty(result, 'message', message);
      if (errorStackInstallable) createNonEnumerableProperty(result, 'stack', clearErrorStack(result.stack, 2));
      if (this && objectIsPrototypeOf(OriginalErrorPrototype, this)) inheritIfRequired(result, this, WrappedError);
      if (arguments.length > OPTIONS_POSITION) installErrorCause(result, arguments[OPTIONS_POSITION]);
      return result;
    });
    WrappedError.prototype = OriginalErrorPrototype;

    if (ERROR_NAME !== 'Error') {
      if (objectSetPrototypeOf) objectSetPrototypeOf(WrappedError, BaseError);else copyConstructorProperties(WrappedError, BaseError, {
        name: true
      });
    }

    copyConstructorProperties(WrappedError, OriginalError);
    try {
      // Safari 13- bug: WebAssembly errors does not have a proper `.name`
      if (OriginalErrorPrototype.name !== ERROR_NAME) {
        createNonEnumerableProperty(OriginalErrorPrototype, 'name', ERROR_NAME);
      }

      OriginalErrorPrototype.constructor = WrappedError;
    } catch (error) {
      /* empty */
    }
    return WrappedError;
  };

  /* eslint-disable no-unused-vars -- required for functions `.length` */
  var WEB_ASSEMBLY = 'WebAssembly';
  var WebAssembly$1 = global$1[WEB_ASSEMBLY];
  var FORCED$m = Error('e', {
    cause: 7
  }).cause !== 7;

  var exportGlobalErrorCauseWrapper = function exportGlobalErrorCauseWrapper(ERROR_NAME, wrapper) {
    var O = {};
    O[ERROR_NAME] = wrapErrorConstructorWithCause(ERROR_NAME, wrapper, FORCED$m);
    _export({
      global: true,
      forced: FORCED$m
    }, O);
  };

  var exportWebAssemblyErrorCauseWrapper = function exportWebAssemblyErrorCauseWrapper(ERROR_NAME, wrapper) {
    if (WebAssembly$1 && WebAssembly$1[ERROR_NAME]) {
      var O = {};
      O[ERROR_NAME] = wrapErrorConstructorWithCause(WEB_ASSEMBLY + '.' + ERROR_NAME, wrapper, FORCED$m);
      _export({
        target: WEB_ASSEMBLY,
        stat: true,
        forced: FORCED$m
      }, O);
    }
  }; // https://github.com/tc39/proposal-error-cause


  exportGlobalErrorCauseWrapper('Error', function (init) {
    return function Error(message) {
      return functionApply(init, this, arguments);
    };
  });
  exportGlobalErrorCauseWrapper('EvalError', function (init) {
    return function EvalError(message) {
      return functionApply(init, this, arguments);
    };
  });
  exportGlobalErrorCauseWrapper('RangeError', function (init) {
    return function RangeError(message) {
      return functionApply(init, this, arguments);
    };
  });
  exportGlobalErrorCauseWrapper('ReferenceError', function (init) {
    return function ReferenceError(message) {
      return functionApply(init, this, arguments);
    };
  });
  exportGlobalErrorCauseWrapper('SyntaxError', function (init) {
    return function SyntaxError(message) {
      return functionApply(init, this, arguments);
    };
  });
  exportGlobalErrorCauseWrapper('TypeError', function (init) {
    return function TypeError(message) {
      return functionApply(init, this, arguments);
    };
  });
  exportGlobalErrorCauseWrapper('URIError', function (init) {
    return function URIError(message) {
      return functionApply(init, this, arguments);
    };
  });
  exportWebAssemblyErrorCauseWrapper('CompileError', function (init) {
    return function CompileError(message) {
      return functionApply(init, this, arguments);
    };
  });
  exportWebAssemblyErrorCauseWrapper('LinkError', function (init) {
    return function LinkError(message) {
      return functionApply(init, this, arguments);
    };
  });
  exportWebAssemblyErrorCauseWrapper('RuntimeError', function (init) {
    return function RuntimeError(message) {
      return functionApply(init, this, arguments);
    };
  });

  var correctPrototypeGetter = !fails(function () {
    function F() {
      /* empty */
    }

    F.prototype.constructor = null; // eslint-disable-next-line es/no-object-getprototypeof -- required for testing

    return Object.getPrototypeOf(new F()) !== F.prototype;
  });

  var IE_PROTO = sharedKey('IE_PROTO');
  var Object$2 = global$1.Object;
  var ObjectPrototype$3 = Object$2.prototype; // `Object.getPrototypeOf` method
  // https://tc39.es/ecma262/#sec-object.getprototypeof

  var objectGetPrototypeOf = correctPrototypeGetter ? Object$2.getPrototypeOf : function (O) {
    var object = toObject(O);
    if (hasOwnProperty_1(object, IE_PROTO)) return object[IE_PROTO];
    var constructor = object.constructor;

    if (isCallable(constructor) && object instanceof constructor) {
      return constructor.prototype;
    }

    return object instanceof Object$2 ? ObjectPrototype$3 : null;
  };

  var iterators = {};

  var ITERATOR$a = wellKnownSymbol('iterator');
  var ArrayPrototype$1 = Array.prototype; // check on default Array iterator

  var isArrayIteratorMethod = function isArrayIteratorMethod(it) {
    return it !== undefined && (iterators.Array === it || ArrayPrototype$1[ITERATOR$a] === it);
  };

  var ITERATOR$9 = wellKnownSymbol('iterator');

  var getIteratorMethod = function getIteratorMethod(it) {
    if (it != undefined) return getMethod(it, ITERATOR$9) || getMethod(it, '@@iterator') || iterators[classof(it)];
  };

  var TypeError$m = global$1.TypeError;

  var getIterator = function getIterator(argument, usingIterator) {
    var iteratorMethod = arguments.length < 2 ? getIteratorMethod(argument) : usingIterator;
    if (aCallable(iteratorMethod)) return anObject(functionCall(iteratorMethod, argument));
    throw TypeError$m(tryToString(argument) + ' is not iterable');
  };

  var iteratorClose = function iteratorClose(iterator, kind, value) {
    var innerResult, innerError;
    anObject(iterator);

    try {
      innerResult = getMethod(iterator, 'return');

      if (!innerResult) {
        if (kind === 'throw') throw value;
        return value;
      }

      innerResult = functionCall(innerResult, iterator);
    } catch (error) {
      innerError = true;
      innerResult = error;
    }

    if (kind === 'throw') throw value;
    if (innerError) throw innerResult;
    anObject(innerResult);
    return value;
  };

  var TypeError$l = global$1.TypeError;

  var Result = function Result(stopped, result) {
    this.stopped = stopped;
    this.result = result;
  };

  var ResultPrototype = Result.prototype;

  var iterate = function iterate(iterable, unboundFunction, options) {
    var that = options && options.that;
    var AS_ENTRIES = !!(options && options.AS_ENTRIES);
    var IS_ITERATOR = !!(options && options.IS_ITERATOR);
    var INTERRUPTED = !!(options && options.INTERRUPTED);
    var fn = functionBindContext(unboundFunction, that);
    var iterator, iterFn, index, length, result, next, step;

    var stop = function stop(condition) {
      if (iterator) iteratorClose(iterator, 'normal', condition);
      return new Result(true, condition);
    };

    var callFn = function callFn(value) {
      if (AS_ENTRIES) {
        anObject(value);
        return INTERRUPTED ? fn(value[0], value[1], stop) : fn(value[0], value[1]);
      }

      return INTERRUPTED ? fn(value, stop) : fn(value);
    };

    if (IS_ITERATOR) {
      iterator = iterable;
    } else {
      iterFn = getIteratorMethod(iterable);
      if (!iterFn) throw TypeError$l(tryToString(iterable) + ' is not iterable'); // optimisation for array iterators

      if (isArrayIteratorMethod(iterFn)) {
        for (index = 0, length = lengthOfArrayLike(iterable); length > index; index++) {
          result = callFn(iterable[index]);
          if (result && objectIsPrototypeOf(ResultPrototype, result)) return result;
        }

        return new Result(false);
      }

      iterator = getIterator(iterable, iterFn);
    }

    next = iterator.next;

    while (!(step = functionCall(next, iterator)).done) {
      try {
        result = callFn(step.value);
      } catch (error) {
        iteratorClose(iterator, 'throw', error);
      }

      if (_typeof(result) == 'object' && result && objectIsPrototypeOf(ResultPrototype, result)) return result;
    }

    return new Result(false);
  };

  var TO_STRING_TAG$2 = wellKnownSymbol('toStringTag');
  var Error$5 = global$1.Error;
  var push$a = [].push;

  var $AggregateError$1 = function AggregateError(errors, message
  /* , options */
  ) {
    var options = arguments.length > 2 ? arguments[2] : undefined;
    var isInstance = objectIsPrototypeOf(AggregateErrorPrototype, this);
    var that;

    if (objectSetPrototypeOf) {
      that = objectSetPrototypeOf(new Error$5(), isInstance ? objectGetPrototypeOf(this) : AggregateErrorPrototype);
    } else {
      that = isInstance ? this : objectCreate(AggregateErrorPrototype);
      createNonEnumerableProperty(that, TO_STRING_TAG$2, 'Error');
    }

    if (message !== undefined) createNonEnumerableProperty(that, 'message', normalizeStringArgument(message));
    if (errorStackInstallable) createNonEnumerableProperty(that, 'stack', clearErrorStack(that.stack, 1));
    installErrorCause(that, options);
    var errorsArray = [];
    iterate(errors, push$a, {
      that: errorsArray
    });
    createNonEnumerableProperty(that, 'errors', errorsArray);
    return that;
  };

  if (objectSetPrototypeOf) objectSetPrototypeOf($AggregateError$1, Error$5);else copyConstructorProperties($AggregateError$1, Error$5, {
    name: true
  });
  var AggregateErrorPrototype = $AggregateError$1.prototype = objectCreate(Error$5.prototype, {
    constructor: createPropertyDescriptor(1, $AggregateError$1),
    message: createPropertyDescriptor(1, ''),
    name: createPropertyDescriptor(1, 'AggregateError')
  }); // `AggregateError` constructor
  // https://tc39.es/ecma262/#sec-aggregate-error-constructor

  _export({
    global: true
  }, {
    AggregateError: $AggregateError$1
  });

  var AGGREGATE_ERROR = 'AggregateError';
  var $AggregateError = getBuiltIn(AGGREGATE_ERROR);
  var FORCED$l = !fails(function () {
    return $AggregateError([1]).errors[0] !== 1;
  }) && fails(function () {
    return $AggregateError([1], AGGREGATE_ERROR, {
      cause: 7
    }).cause !== 7;
  }); // https://github.com/tc39/proposal-error-cause

  _export({
    global: true,
    forced: FORCED$l
  }, {
    AggregateError: wrapErrorConstructorWithCause(AGGREGATE_ERROR, function (init) {
      // eslint-disable-next-line no-unused-vars -- required for functions `.length`
      return function AggregateError(errors, message) {
        return functionApply(init, this, arguments);
      };
    }, FORCED$l, true)
  });

  var UNSCOPABLES = wellKnownSymbol('unscopables');
  var ArrayPrototype = Array.prototype; // Array.prototype[@@unscopables]
  // https://tc39.es/ecma262/#sec-array.prototype-@@unscopables

  if (ArrayPrototype[UNSCOPABLES] == undefined) {
    objectDefineProperty.f(ArrayPrototype, UNSCOPABLES, {
      configurable: true,
      value: objectCreate(null)
    });
  } // add a key to Array.prototype[@@unscopables]


  var addToUnscopables = function addToUnscopables(key) {
    ArrayPrototype[UNSCOPABLES][key] = true;
  };

  // https://github.com/tc39/proposal-relative-indexing-method


  _export({
    target: 'Array',
    proto: true
  }, {
    at: function at(index) {
      var O = toObject(this);
      var len = lengthOfArrayLike(O);
      var relativeIndex = toIntegerOrInfinity(index);
      var k = relativeIndex >= 0 ? relativeIndex : len + relativeIndex;
      return k < 0 || k >= len ? undefined : O[k];
    }
  });
  addToUnscopables('at');

  var SPECIES$5 = wellKnownSymbol('species');

  var arrayMethodHasSpeciesSupport = function arrayMethodHasSpeciesSupport(METHOD_NAME) {
    // We can't use this feature detection in V8 since it causes
    // deoptimization and serious performance degradation
    // https://github.com/zloirock/core-js/issues/677
    return engineV8Version >= 51 || !fails(function () {
      var array = [];
      var constructor = array.constructor = {};

      constructor[SPECIES$5] = function () {
        return {
          foo: 1
        };
      };

      return array[METHOD_NAME](Boolean).foo !== 1;
    });
  };

  var IS_CONCAT_SPREADABLE = wellKnownSymbol('isConcatSpreadable');
  var MAX_SAFE_INTEGER$1 = 0x1FFFFFFFFFFFFF;
  var MAXIMUM_ALLOWED_INDEX_EXCEEDED = 'Maximum allowed index exceeded';
  var TypeError$k = global$1.TypeError; // We can't use this feature detection in V8 since it causes
  // deoptimization and serious performance degradation
  // https://github.com/zloirock/core-js/issues/679

  var IS_CONCAT_SPREADABLE_SUPPORT = engineV8Version >= 51 || !fails(function () {
    var array = [];
    array[IS_CONCAT_SPREADABLE] = false;
    return array.concat()[0] !== array;
  });
  var SPECIES_SUPPORT = arrayMethodHasSpeciesSupport('concat');

  var isConcatSpreadable = function isConcatSpreadable(O) {
    if (!isObject(O)) return false;
    var spreadable = O[IS_CONCAT_SPREADABLE];
    return spreadable !== undefined ? !!spreadable : isArray(O);
  };

  var FORCED$k = !IS_CONCAT_SPREADABLE_SUPPORT || !SPECIES_SUPPORT; // `Array.prototype.concat` method
  // https://tc39.es/ecma262/#sec-array.prototype.concat
  // with adding support of @@isConcatSpreadable and @@species

  _export({
    target: 'Array',
    proto: true,
    forced: FORCED$k
  }, {
    // eslint-disable-next-line no-unused-vars -- required for `.length`
    concat: function concat(arg) {
      var O = toObject(this);
      var A = arraySpeciesCreate(O, 0);
      var n = 0;
      var i, k, length, len, E;

      for (i = -1, length = arguments.length; i < length; i++) {
        E = i === -1 ? O : arguments[i];

        if (isConcatSpreadable(E)) {
          len = lengthOfArrayLike(E);
          if (n + len > MAX_SAFE_INTEGER$1) throw TypeError$k(MAXIMUM_ALLOWED_INDEX_EXCEEDED);

          for (k = 0; k < len; k++, n++) {
            if (k in E) createProperty(A, n, E[k]);
          }
        } else {
          if (n >= MAX_SAFE_INTEGER$1) throw TypeError$k(MAXIMUM_ALLOWED_INDEX_EXCEEDED);
          createProperty(A, n++, E);
        }
      }

      A.length = n;
      return A;
    }
  });

  var min$7 = Math.min; // `Array.prototype.copyWithin` method implementation
  // https://tc39.es/ecma262/#sec-array.prototype.copywithin
  // eslint-disable-next-line es/no-array-prototype-copywithin -- safe

  var arrayCopyWithin = [].copyWithin || function copyWithin(target
  /* = 0 */
  , start
  /* = 0, end = @length */
  ) {
    var O = toObject(this);
    var len = lengthOfArrayLike(O);
    var to = toAbsoluteIndex(target, len);
    var from = toAbsoluteIndex(start, len);
    var end = arguments.length > 2 ? arguments[2] : undefined;
    var count = min$7((end === undefined ? len : toAbsoluteIndex(end, len)) - from, len - to);
    var inc = 1;

    if (from < to && to < from + count) {
      inc = -1;
      from += count - 1;
      to += count - 1;
    }

    while (count-- > 0) {
      if (from in O) O[to] = O[from];else delete O[to];
      to += inc;
      from += inc;
    }

    return O;
  };

  // https://tc39.es/ecma262/#sec-array.prototype.copywithin

  _export({
    target: 'Array',
    proto: true
  }, {
    copyWithin: arrayCopyWithin
  }); // https://tc39.es/ecma262/#sec-array.prototype-@@unscopables

  addToUnscopables('copyWithin');

  // https://tc39.es/ecma262/#sec-array.prototype.fill


  var arrayFill = function fill(value
  /* , start = 0, end = @length */
  ) {
    var O = toObject(this);
    var length = lengthOfArrayLike(O);
    var argumentsLength = arguments.length;
    var index = toAbsoluteIndex(argumentsLength > 1 ? arguments[1] : undefined, length);
    var end = argumentsLength > 2 ? arguments[2] : undefined;
    var endPos = end === undefined ? length : toAbsoluteIndex(end, length);

    while (endPos > index) {
      O[index++] = value;
    }

    return O;
  };

  // https://tc39.es/ecma262/#sec-array.prototype.fill

  _export({
    target: 'Array',
    proto: true
  }, {
    fill: arrayFill
  }); // https://tc39.es/ecma262/#sec-array.prototype-@@unscopables

  addToUnscopables('fill');

  var $filter$1 = arrayIteration.filter;
  var HAS_SPECIES_SUPPORT$3 = arrayMethodHasSpeciesSupport('filter'); // `Array.prototype.filter` method
  // https://tc39.es/ecma262/#sec-array.prototype.filter
  // with adding support of @@species

  _export({
    target: 'Array',
    proto: true,
    forced: !HAS_SPECIES_SUPPORT$3
  }, {
    filter: function filter(callbackfn
    /* , thisArg */
    ) {
      return $filter$1(this, callbackfn, arguments.length > 1 ? arguments[1] : undefined);
    }
  });

  var $find$1 = arrayIteration.find;
  var FIND = 'find';
  var SKIPS_HOLES$1 = true; // Shouldn't skip holes

  if (FIND in []) Array(1)[FIND](function () {
    SKIPS_HOLES$1 = false;
  }); // `Array.prototype.find` method
  // https://tc39.es/ecma262/#sec-array.prototype.find

  _export({
    target: 'Array',
    proto: true,
    forced: SKIPS_HOLES$1
  }, {
    find: function find(callbackfn
    /* , that = undefined */
    ) {
      return $find$1(this, callbackfn, arguments.length > 1 ? arguments[1] : undefined);
    }
  }); // https://tc39.es/ecma262/#sec-array.prototype-@@unscopables

  addToUnscopables(FIND);

  var $findIndex$1 = arrayIteration.findIndex;
  var FIND_INDEX = 'findIndex';
  var SKIPS_HOLES = true; // Shouldn't skip holes

  if (FIND_INDEX in []) Array(1)[FIND_INDEX](function () {
    SKIPS_HOLES = false;
  }); // `Array.prototype.findIndex` method
  // https://tc39.es/ecma262/#sec-array.prototype.findindex

  _export({
    target: 'Array',
    proto: true,
    forced: SKIPS_HOLES
  }, {
    findIndex: function findIndex(callbackfn
    /* , that = undefined */
    ) {
      return $findIndex$1(this, callbackfn, arguments.length > 1 ? arguments[1] : undefined);
    }
  }); // https://tc39.es/ecma262/#sec-array.prototype-@@unscopables

  addToUnscopables(FIND_INDEX);

  var TypeError$j = global$1.TypeError; // `FlattenIntoArray` abstract operation
  // https://tc39.github.io/proposal-flatMap/#sec-FlattenIntoArray

  var flattenIntoArray = function flattenIntoArray(target, original, source, sourceLen, start, depth, mapper, thisArg) {
    var targetIndex = start;
    var sourceIndex = 0;
    var mapFn = mapper ? functionBindContext(mapper, thisArg) : false;
    var element, elementLen;

    while (sourceIndex < sourceLen) {
      if (sourceIndex in source) {
        element = mapFn ? mapFn(source[sourceIndex], sourceIndex, original) : source[sourceIndex];

        if (depth > 0 && isArray(element)) {
          elementLen = lengthOfArrayLike(element);
          targetIndex = flattenIntoArray(target, original, element, elementLen, targetIndex, depth - 1) - 1;
        } else {
          if (targetIndex >= 0x1FFFFFFFFFFFFF) throw TypeError$j('Exceed the acceptable array length');
          target[targetIndex] = element;
        }

        targetIndex++;
      }

      sourceIndex++;
    }

    return targetIndex;
  };

  var flattenIntoArray_1 = flattenIntoArray;

  // https://tc39.es/ecma262/#sec-array.prototype.flat


  _export({
    target: 'Array',
    proto: true
  }, {
    flat: function
      /* depthArg = 1 */
    flat() {
      var depthArg = arguments.length ? arguments[0] : undefined;
      var O = toObject(this);
      var sourceLen = lengthOfArrayLike(O);
      var A = arraySpeciesCreate(O, 0);
      A.length = flattenIntoArray_1(A, O, O, sourceLen, 0, depthArg === undefined ? 1 : toIntegerOrInfinity(depthArg));
      return A;
    }
  });

  // https://tc39.es/ecma262/#sec-array.prototype.flatmap


  _export({
    target: 'Array',
    proto: true
  }, {
    flatMap: function flatMap(callbackfn
    /* , thisArg */
    ) {
      var O = toObject(this);
      var sourceLen = lengthOfArrayLike(O);
      var A;
      aCallable(callbackfn);
      A = arraySpeciesCreate(O, 0);
      A.length = flattenIntoArray_1(A, O, O, sourceLen, 0, 1, callbackfn, arguments.length > 1 ? arguments[1] : undefined);
      return A;
    }
  });

  var callWithSafeIterationClosing = function callWithSafeIterationClosing(iterator, fn, value, ENTRIES) {
    try {
      return ENTRIES ? fn(anObject(value)[0], value[1]) : fn(value);
    } catch (error) {
      iteratorClose(iterator, 'throw', error);
    }
  };

  var Array$7 = global$1.Array; // `Array.from` method implementation
  // https://tc39.es/ecma262/#sec-array.from

  var arrayFrom = function from(arrayLike
  /* , mapfn = undefined, thisArg = undefined */
  ) {
    var O = toObject(arrayLike);
    var IS_CONSTRUCTOR = isConstructor(this);
    var argumentsLength = arguments.length;
    var mapfn = argumentsLength > 1 ? arguments[1] : undefined;
    var mapping = mapfn !== undefined;
    if (mapping) mapfn = functionBindContext(mapfn, argumentsLength > 2 ? arguments[2] : undefined);
    var iteratorMethod = getIteratorMethod(O);
    var index = 0;
    var length, result, step, iterator, next, value; // if the target is not iterable or it's an array with the default iterator - use a simple case

    if (iteratorMethod && !(this == Array$7 && isArrayIteratorMethod(iteratorMethod))) {
      iterator = getIterator(O, iteratorMethod);
      next = iterator.next;
      result = IS_CONSTRUCTOR ? new this() : [];

      for (; !(step = functionCall(next, iterator)).done; index++) {
        value = mapping ? callWithSafeIterationClosing(iterator, mapfn, [step.value, index], true) : step.value;
        createProperty(result, index, value);
      }
    } else {
      length = lengthOfArrayLike(O);
      result = IS_CONSTRUCTOR ? new this(length) : Array$7(length);

      for (; length > index; index++) {
        value = mapping ? mapfn(O[index], index) : O[index];
        createProperty(result, index, value);
      }
    }

    result.length = index;
    return result;
  };

  var ITERATOR$8 = wellKnownSymbol('iterator');
  var SAFE_CLOSING = false;

  try {
    var called = 0;
    var iteratorWithReturn = {
      next: function next() {
        return {
          done: !!called++
        };
      },
      'return': function _return() {
        SAFE_CLOSING = true;
      }
    };

    iteratorWithReturn[ITERATOR$8] = function () {
      return this;
    }; // eslint-disable-next-line es/no-array-from, no-throw-literal -- required for testing


    Array.from(iteratorWithReturn, function () {
      throw 2;
    });
  } catch (error) {
    /* empty */
  }

  var checkCorrectnessOfIteration = function checkCorrectnessOfIteration(exec, SKIP_CLOSING) {
    if (!SKIP_CLOSING && !SAFE_CLOSING) return false;
    var ITERATION_SUPPORT = false;

    try {
      var object = {};

      object[ITERATOR$8] = function () {
        return {
          next: function next() {
            return {
              done: ITERATION_SUPPORT = true
            };
          }
        };
      };

      exec(object);
    } catch (error) {
      /* empty */
    }

    return ITERATION_SUPPORT;
  };

  var INCORRECT_ITERATION$1 = !checkCorrectnessOfIteration(function (iterable) {
    // eslint-disable-next-line es/no-array-from -- required for testing
    Array.from(iterable);
  }); // `Array.from` method
  // https://tc39.es/ecma262/#sec-array.from

  _export({
    target: 'Array',
    stat: true,
    forced: INCORRECT_ITERATION$1
  }, {
    from: arrayFrom
  });

  var $includes$1 = arrayIncludes.includes; // `Array.prototype.includes` method
  // https://tc39.es/ecma262/#sec-array.prototype.includes

  _export({
    target: 'Array',
    proto: true
  }, {
    includes: function includes(el
    /* , fromIndex = 0 */
    ) {
      return $includes$1(this, el, arguments.length > 1 ? arguments[1] : undefined);
    }
  }); // https://tc39.es/ecma262/#sec-array.prototype-@@unscopables

  addToUnscopables('includes');

  var arrayMethodIsStrict = function arrayMethodIsStrict(METHOD_NAME, argument) {
    var method = [][METHOD_NAME];
    return !!method && fails(function () {
      // eslint-disable-next-line no-useless-call -- required for testing
      method.call(null, argument || function () {
        return 1;
      }, 1);
    });
  };

  /* eslint-disable es/no-array-prototype-indexof -- required for testing */


  var $IndexOf = arrayIncludes.indexOf;
  var un$IndexOf = functionUncurryThis([].indexOf);
  var NEGATIVE_ZERO$1 = !!un$IndexOf && 1 / un$IndexOf([1], 1, -0) < 0;
  var STRICT_METHOD$6 = arrayMethodIsStrict('indexOf'); // `Array.prototype.indexOf` method
  // https://tc39.es/ecma262/#sec-array.prototype.indexof

  _export({
    target: 'Array',
    proto: true,
    forced: NEGATIVE_ZERO$1 || !STRICT_METHOD$6
  }, {
    indexOf: function indexOf(searchElement
    /* , fromIndex = 0 */
    ) {
      var fromIndex = arguments.length > 1 ? arguments[1] : undefined;
      return NEGATIVE_ZERO$1 // convert -0 to +0
      ? un$IndexOf(this, searchElement, fromIndex) || 0 : $IndexOf(this, searchElement, fromIndex);
    }
  });

  var ITERATOR$7 = wellKnownSymbol('iterator');
  var BUGGY_SAFARI_ITERATORS$1 = false; // `%IteratorPrototype%` object
  // https://tc39.es/ecma262/#sec-%iteratorprototype%-object

  var IteratorPrototype$2, PrototypeOfArrayIteratorPrototype, arrayIterator;
  /* eslint-disable es/no-array-prototype-keys -- safe */

  if ([].keys) {
    arrayIterator = [].keys(); // Safari 8 has buggy iterators w/o `next`

    if (!('next' in arrayIterator)) BUGGY_SAFARI_ITERATORS$1 = true;else {
      PrototypeOfArrayIteratorPrototype = objectGetPrototypeOf(objectGetPrototypeOf(arrayIterator));
      if (PrototypeOfArrayIteratorPrototype !== Object.prototype) IteratorPrototype$2 = PrototypeOfArrayIteratorPrototype;
    }
  }

  var NEW_ITERATOR_PROTOTYPE = IteratorPrototype$2 == undefined || fails(function () {
    var test = {}; // FF44- legacy iterators case

    return IteratorPrototype$2[ITERATOR$7].call(test) !== test;
  });
  if (NEW_ITERATOR_PROTOTYPE) IteratorPrototype$2 = {}; // `%IteratorPrototype%[@@iterator]()` method
  // https://tc39.es/ecma262/#sec-%iteratorprototype%-@@iterator

  if (!isCallable(IteratorPrototype$2[ITERATOR$7])) {
    redefine(IteratorPrototype$2, ITERATOR$7, function () {
      return this;
    });
  }

  var iteratorsCore = {
    IteratorPrototype: IteratorPrototype$2,
    BUGGY_SAFARI_ITERATORS: BUGGY_SAFARI_ITERATORS$1
  };

  var IteratorPrototype$1 = iteratorsCore.IteratorPrototype;

  var returnThis$1 = function returnThis() {
    return this;
  };

  var createIteratorConstructor = function createIteratorConstructor(IteratorConstructor, NAME, next, ENUMERABLE_NEXT) {
    var TO_STRING_TAG = NAME + ' Iterator';
    IteratorConstructor.prototype = objectCreate(IteratorPrototype$1, {
      next: createPropertyDescriptor(+!ENUMERABLE_NEXT, next)
    });
    setToStringTag(IteratorConstructor, TO_STRING_TAG, false);
    iterators[TO_STRING_TAG] = returnThis$1;
    return IteratorConstructor;
  };

  var PROPER_FUNCTION_NAME$3 = functionName.PROPER;
  var CONFIGURABLE_FUNCTION_NAME$1 = functionName.CONFIGURABLE;
  var IteratorPrototype = iteratorsCore.IteratorPrototype;
  var BUGGY_SAFARI_ITERATORS = iteratorsCore.BUGGY_SAFARI_ITERATORS;
  var ITERATOR$6 = wellKnownSymbol('iterator');
  var KEYS = 'keys';
  var VALUES = 'values';
  var ENTRIES = 'entries';

  var returnThis = function returnThis() {
    return this;
  };

  var defineIterator = function defineIterator(Iterable, NAME, IteratorConstructor, next, DEFAULT, IS_SET, FORCED) {
    createIteratorConstructor(IteratorConstructor, NAME, next);

    var getIterationMethod = function getIterationMethod(KIND) {
      if (KIND === DEFAULT && defaultIterator) return defaultIterator;
      if (!BUGGY_SAFARI_ITERATORS && KIND in IterablePrototype) return IterablePrototype[KIND];

      switch (KIND) {
        case KEYS:
          return function keys() {
            return new IteratorConstructor(this, KIND);
          };

        case VALUES:
          return function values() {
            return new IteratorConstructor(this, KIND);
          };

        case ENTRIES:
          return function entries() {
            return new IteratorConstructor(this, KIND);
          };
      }

      return function () {
        return new IteratorConstructor(this);
      };
    };

    var TO_STRING_TAG = NAME + ' Iterator';
    var INCORRECT_VALUES_NAME = false;
    var IterablePrototype = Iterable.prototype;
    var nativeIterator = IterablePrototype[ITERATOR$6] || IterablePrototype['@@iterator'] || DEFAULT && IterablePrototype[DEFAULT];
    var defaultIterator = !BUGGY_SAFARI_ITERATORS && nativeIterator || getIterationMethod(DEFAULT);
    var anyNativeIterator = NAME == 'Array' ? IterablePrototype.entries || nativeIterator : nativeIterator;
    var CurrentIteratorPrototype, methods, KEY; // fix native

    if (anyNativeIterator) {
      CurrentIteratorPrototype = objectGetPrototypeOf(anyNativeIterator.call(new Iterable()));

      if (CurrentIteratorPrototype !== Object.prototype && CurrentIteratorPrototype.next) {
        if (objectGetPrototypeOf(CurrentIteratorPrototype) !== IteratorPrototype) {
          if (objectSetPrototypeOf) {
            objectSetPrototypeOf(CurrentIteratorPrototype, IteratorPrototype);
          } else if (!isCallable(CurrentIteratorPrototype[ITERATOR$6])) {
            redefine(CurrentIteratorPrototype, ITERATOR$6, returnThis);
          }
        } // Set @@toStringTag to native iterators


        setToStringTag(CurrentIteratorPrototype, TO_STRING_TAG, true);
      }
    } // fix Array.prototype.{ values, @@iterator }.name in V8 / FF


    if (PROPER_FUNCTION_NAME$3 && DEFAULT == VALUES && nativeIterator && nativeIterator.name !== VALUES) {
      if (CONFIGURABLE_FUNCTION_NAME$1) {
        createNonEnumerableProperty(IterablePrototype, 'name', VALUES);
      } else {
        INCORRECT_VALUES_NAME = true;

        defaultIterator = function values() {
          return functionCall(nativeIterator, this);
        };
      }
    } // export additional methods


    if (DEFAULT) {
      methods = {
        values: getIterationMethod(VALUES),
        keys: IS_SET ? defaultIterator : getIterationMethod(KEYS),
        entries: getIterationMethod(ENTRIES)
      };
      if (FORCED) for (KEY in methods) {
        if (BUGGY_SAFARI_ITERATORS || INCORRECT_VALUES_NAME || !(KEY in IterablePrototype)) {
          redefine(IterablePrototype, KEY, methods[KEY]);
        }
      } else _export({
        target: NAME,
        proto: true,
        forced: BUGGY_SAFARI_ITERATORS || INCORRECT_VALUES_NAME
      }, methods);
    } // define iterator


    if (IterablePrototype[ITERATOR$6] !== defaultIterator) {
      redefine(IterablePrototype, ITERATOR$6, defaultIterator, {
        name: DEFAULT
      });
    }

    iterators[NAME] = defaultIterator;
    return methods;
  };

  var defineProperty$c = objectDefineProperty.f;
  var ARRAY_ITERATOR = 'Array Iterator';
  var setInternalState$9 = internalState.set;
  var getInternalState$8 = internalState.getterFor(ARRAY_ITERATOR); // `Array.prototype.entries` method
  // https://tc39.es/ecma262/#sec-array.prototype.entries
  // `Array.prototype.keys` method
  // https://tc39.es/ecma262/#sec-array.prototype.keys
  // `Array.prototype.values` method
  // https://tc39.es/ecma262/#sec-array.prototype.values
  // `Array.prototype[@@iterator]` method
  // https://tc39.es/ecma262/#sec-array.prototype-@@iterator
  // `CreateArrayIterator` internal method
  // https://tc39.es/ecma262/#sec-createarrayiterator

  var es_array_iterator = defineIterator(Array, 'Array', function (iterated, kind) {
    setInternalState$9(this, {
      type: ARRAY_ITERATOR,
      target: toIndexedObject(iterated),
      // target
      index: 0,
      // next index
      kind: kind // kind

    }); // `%ArrayIteratorPrototype%.next` method
    // https://tc39.es/ecma262/#sec-%arrayiteratorprototype%.next
  }, function () {
    var state = getInternalState$8(this);
    var target = state.target;
    var kind = state.kind;
    var index = state.index++;

    if (!target || index >= target.length) {
      state.target = undefined;
      return {
        value: undefined,
        done: true
      };
    }

    if (kind == 'keys') return {
      value: index,
      done: false
    };
    if (kind == 'values') return {
      value: target[index],
      done: false
    };
    return {
      value: [index, target[index]],
      done: false
    };
  }, 'values'); // argumentsList[@@iterator] is %ArrayProto_values%
  // https://tc39.es/ecma262/#sec-createunmappedargumentsobject
  // https://tc39.es/ecma262/#sec-createmappedargumentsobject

  var values = iterators.Arguments = iterators.Array; // https://tc39.es/ecma262/#sec-array.prototype-@@unscopables

  addToUnscopables('keys');
  addToUnscopables('values');
  addToUnscopables('entries'); // V8 ~ Chrome 45- bug

  if (descriptors && values.name !== 'values') try {
    defineProperty$c(values, 'name', {
      value: 'values'
    });
  } catch (error) {
    /* empty */
  }

  var un$Join = functionUncurryThis([].join);
  var ES3_STRINGS = indexedObject != Object;
  var STRICT_METHOD$5 = arrayMethodIsStrict('join', ','); // `Array.prototype.join` method
  // https://tc39.es/ecma262/#sec-array.prototype.join

  _export({
    target: 'Array',
    proto: true,
    forced: ES3_STRINGS || !STRICT_METHOD$5
  }, {
    join: function join(separator) {
      return un$Join(toIndexedObject(this), separator === undefined ? ',' : separator);
    }
  });

  /* eslint-disable es/no-array-prototype-lastindexof -- safe */


  var min$6 = Math.min;
  var $lastIndexOf = [].lastIndexOf;
  var NEGATIVE_ZERO = !!$lastIndexOf && 1 / [1].lastIndexOf(1, -0) < 0;
  var STRICT_METHOD$4 = arrayMethodIsStrict('lastIndexOf');
  var FORCED$j = NEGATIVE_ZERO || !STRICT_METHOD$4; // `Array.prototype.lastIndexOf` method implementation
  // https://tc39.es/ecma262/#sec-array.prototype.lastindexof

  var arrayLastIndexOf = FORCED$j ? function lastIndexOf(searchElement
  /* , fromIndex = @[*-1] */
  ) {
    // convert -0 to +0
    if (NEGATIVE_ZERO) return functionApply($lastIndexOf, this, arguments) || 0;
    var O = toIndexedObject(this);
    var length = lengthOfArrayLike(O);
    var index = length - 1;
    if (arguments.length > 1) index = min$6(index, toIntegerOrInfinity(arguments[1]));
    if (index < 0) index = length + index;

    for (; index >= 0; index--) {
      if (index in O && O[index] === searchElement) return index || 0;
    }

    return -1;
  } : $lastIndexOf;

  // https://tc39.es/ecma262/#sec-array.prototype.lastindexof
  // eslint-disable-next-line es/no-array-prototype-lastindexof -- required for testing

  _export({
    target: 'Array',
    proto: true,
    forced: arrayLastIndexOf !== [].lastIndexOf
  }, {
    lastIndexOf: arrayLastIndexOf
  });

  var $map$1 = arrayIteration.map;
  var HAS_SPECIES_SUPPORT$2 = arrayMethodHasSpeciesSupport('map'); // `Array.prototype.map` method
  // https://tc39.es/ecma262/#sec-array.prototype.map
  // with adding support of @@species

  _export({
    target: 'Array',
    proto: true,
    forced: !HAS_SPECIES_SUPPORT$2
  }, {
    map: function map(callbackfn
    /* , thisArg */
    ) {
      return $map$1(this, callbackfn, arguments.length > 1 ? arguments[1] : undefined);
    }
  });

  var Array$6 = global$1.Array;
  var ISNT_GENERIC = fails(function () {
    function F() {
      /* empty */
    }

    return !(Array$6.of.call(F) instanceof F);
  }); // `Array.of` method
  // https://tc39.es/ecma262/#sec-array.of
  // WebKit Array.of isn't generic

  _export({
    target: 'Array',
    stat: true,
    forced: ISNT_GENERIC
  }, {
    of: function
      /* ...args */
    of() {
      var index = 0;
      var argumentsLength = arguments.length;
      var result = new (isConstructor(this) ? this : Array$6)(argumentsLength);

      while (argumentsLength > index) {
        createProperty(result, index, arguments[index++]);
      }

      result.length = argumentsLength;
      return result;
    }
  });

  var TypeError$i = global$1.TypeError; // `Array.prototype.{ reduce, reduceRight }` methods implementation

  var createMethod$4 = function createMethod(IS_RIGHT) {
    return function (that, callbackfn, argumentsLength, memo) {
      aCallable(callbackfn);
      var O = toObject(that);
      var self = indexedObject(O);
      var length = lengthOfArrayLike(O);
      var index = IS_RIGHT ? length - 1 : 0;
      var i = IS_RIGHT ? -1 : 1;
      if (argumentsLength < 2) while (true) {
        if (index in self) {
          memo = self[index];
          index += i;
          break;
        }

        index += i;

        if (IS_RIGHT ? index < 0 : length <= index) {
          throw TypeError$i('Reduce of empty array with no initial value');
        }
      }

      for (; IS_RIGHT ? index >= 0 : length > index; index += i) {
        if (index in self) {
          memo = callbackfn(memo, self[index], index, O);
        }
      }

      return memo;
    };
  };

  var arrayReduce = {
    // `Array.prototype.reduce` method
    // https://tc39.es/ecma262/#sec-array.prototype.reduce
    left: createMethod$4(false),
    // `Array.prototype.reduceRight` method
    // https://tc39.es/ecma262/#sec-array.prototype.reduceright
    right: createMethod$4(true)
  };

  var engineIsNode = classofRaw(global$1.process) == 'process';

  var $reduce$1 = arrayReduce.left;
  var STRICT_METHOD$3 = arrayMethodIsStrict('reduce'); // Chrome 80-82 has a critical bug
  // https://bugs.chromium.org/p/chromium/issues/detail?id=1049982

  var CHROME_BUG$1 = !engineIsNode && engineV8Version > 79 && engineV8Version < 83; // `Array.prototype.reduce` method
  // https://tc39.es/ecma262/#sec-array.prototype.reduce

  _export({
    target: 'Array',
    proto: true,
    forced: !STRICT_METHOD$3 || CHROME_BUG$1
  }, {
    reduce: function reduce(callbackfn
    /* , initialValue */
    ) {
      var length = arguments.length;
      return $reduce$1(this, callbackfn, length, length > 1 ? arguments[1] : undefined);
    }
  });

  var $reduceRight$1 = arrayReduce.right;
  var STRICT_METHOD$2 = arrayMethodIsStrict('reduceRight'); // Chrome 80-82 has a critical bug
  // https://bugs.chromium.org/p/chromium/issues/detail?id=1049982

  var CHROME_BUG = !engineIsNode && engineV8Version > 79 && engineV8Version < 83; // `Array.prototype.reduceRight` method
  // https://tc39.es/ecma262/#sec-array.prototype.reduceright

  _export({
    target: 'Array',
    proto: true,
    forced: !STRICT_METHOD$2 || CHROME_BUG
  }, {
    reduceRight: function reduceRight(callbackfn
    /* , initialValue */
    ) {
      return $reduceRight$1(this, callbackfn, arguments.length, arguments.length > 1 ? arguments[1] : undefined);
    }
  });

  var HAS_SPECIES_SUPPORT$1 = arrayMethodHasSpeciesSupport('slice');
  var SPECIES$4 = wellKnownSymbol('species');
  var Array$5 = global$1.Array;
  var max$4 = Math.max; // `Array.prototype.slice` method
  // https://tc39.es/ecma262/#sec-array.prototype.slice
  // fallback for not array-like ES3 strings and DOM objects

  _export({
    target: 'Array',
    proto: true,
    forced: !HAS_SPECIES_SUPPORT$1
  }, {
    slice: function slice(start, end) {
      var O = toIndexedObject(this);
      var length = lengthOfArrayLike(O);
      var k = toAbsoluteIndex(start, length);
      var fin = toAbsoluteIndex(end === undefined ? length : end, length); // inline `ArraySpeciesCreate` for usage native `Array#slice` where it's possible

      var Constructor, result, n;

      if (isArray(O)) {
        Constructor = O.constructor; // cross-realm fallback

        if (isConstructor(Constructor) && (Constructor === Array$5 || isArray(Constructor.prototype))) {
          Constructor = undefined;
        } else if (isObject(Constructor)) {
          Constructor = Constructor[SPECIES$4];
          if (Constructor === null) Constructor = undefined;
        }

        if (Constructor === Array$5 || Constructor === undefined) {
          return arraySlice$1(O, k, fin);
        }
      }

      result = new (Constructor === undefined ? Array$5 : Constructor)(max$4(fin - k, 0));

      for (n = 0; k < fin; k++, n++) {
        if (k in O) createProperty(result, n, O[k]);
      }

      result.length = n;
      return result;
    }
  });

  var floor$a = Math.floor;

  var mergeSort = function mergeSort(array, comparefn) {
    var length = array.length;
    var middle = floor$a(length / 2);
    return length < 8 ? insertionSort(array, comparefn) : merge$1(array, mergeSort(arraySliceSimple(array, 0, middle), comparefn), mergeSort(arraySliceSimple(array, middle), comparefn), comparefn);
  };

  var insertionSort = function insertionSort(array, comparefn) {
    var length = array.length;
    var i = 1;
    var element, j;

    while (i < length) {
      j = i;
      element = array[i];

      while (j && comparefn(array[j - 1], element) > 0) {
        array[j] = array[--j];
      }

      if (j !== i++) array[j] = element;
    }

    return array;
  };

  var merge$1 = function merge(array, left, right, comparefn) {
    var llength = left.length;
    var rlength = right.length;
    var lindex = 0;
    var rindex = 0;

    while (lindex < llength || rindex < rlength) {
      array[lindex + rindex] = lindex < llength && rindex < rlength ? comparefn(left[lindex], right[rindex]) <= 0 ? left[lindex++] : right[rindex++] : lindex < llength ? left[lindex++] : right[rindex++];
    }

    return array;
  };

  var arraySort = mergeSort;

  var firefox = engineUserAgent.match(/firefox\/(\d+)/i);
  var engineFfVersion = !!firefox && +firefox[1];

  var engineIsIeOrEdge = /MSIE|Trident/.test(engineUserAgent);

  var webkit = engineUserAgent.match(/AppleWebKit\/(\d+)\./);
  var engineWebkitVersion = !!webkit && +webkit[1];

  var test = [];
  var un$Sort$1 = functionUncurryThis(test.sort);
  var push$9 = functionUncurryThis(test.push); // IE8-

  var FAILS_ON_UNDEFINED = fails(function () {
    test.sort(undefined);
  }); // V8 bug

  var FAILS_ON_NULL = fails(function () {
    test.sort(null);
  }); // Old WebKit

  var STRICT_METHOD$1 = arrayMethodIsStrict('sort');
  var STABLE_SORT$1 = !fails(function () {
    // feature detection can be too slow, so check engines versions
    if (engineV8Version) return engineV8Version < 70;
    if (engineFfVersion && engineFfVersion > 3) return;
    if (engineIsIeOrEdge) return true;
    if (engineWebkitVersion) return engineWebkitVersion < 603;
    var result = '';
    var code, chr, value, index; // generate an array with more 512 elements (Chakra and old V8 fails only in this case)

    for (code = 65; code < 76; code++) {
      chr = String.fromCharCode(code);

      switch (code) {
        case 66:
        case 69:
        case 70:
        case 72:
          value = 3;
          break;

        case 68:
        case 71:
          value = 4;
          break;

        default:
          value = 2;
      }

      for (index = 0; index < 47; index++) {
        test.push({
          k: chr + index,
          v: value
        });
      }
    }

    test.sort(function (a, b) {
      return b.v - a.v;
    });

    for (index = 0; index < test.length; index++) {
      chr = test[index].k.charAt(0);
      if (result.charAt(result.length - 1) !== chr) result += chr;
    }

    return result !== 'DGBEFHACIJK';
  });
  var FORCED$i = FAILS_ON_UNDEFINED || !FAILS_ON_NULL || !STRICT_METHOD$1 || !STABLE_SORT$1;

  var getSortCompare$1 = function getSortCompare(comparefn) {
    return function (x, y) {
      if (y === undefined) return -1;
      if (x === undefined) return 1;
      if (comparefn !== undefined) return +comparefn(x, y) || 0;
      return toString(x) > toString(y) ? 1 : -1;
    };
  }; // `Array.prototype.sort` method
  // https://tc39.es/ecma262/#sec-array.prototype.sort


  _export({
    target: 'Array',
    proto: true,
    forced: FORCED$i
  }, {
    sort: function sort(comparefn) {
      if (comparefn !== undefined) aCallable(comparefn);
      var array = toObject(this);
      if (STABLE_SORT$1) return comparefn === undefined ? un$Sort$1(array) : un$Sort$1(array, comparefn);
      var items = [];
      var arrayLength = lengthOfArrayLike(array);
      var itemsLength, index;

      for (index = 0; index < arrayLength; index++) {
        if (index in array) push$9(items, array[index]);
      }

      arraySort(items, getSortCompare$1(comparefn));
      itemsLength = items.length;
      index = 0;

      while (index < itemsLength) {
        array[index] = items[index++];
      }

      while (index < arrayLength) {
        delete array[index++];
      }

      return array;
    }
  });

  var SPECIES$3 = wellKnownSymbol('species');

  var setSpecies = function setSpecies(CONSTRUCTOR_NAME) {
    var Constructor = getBuiltIn(CONSTRUCTOR_NAME);
    var defineProperty = objectDefineProperty.f;

    if (descriptors && Constructor && !Constructor[SPECIES$3]) {
      defineProperty(Constructor, SPECIES$3, {
        configurable: true,
        get: function get() {
          return this;
        }
      });
    }
  };

  // https://tc39.es/ecma262/#sec-get-array-@@species

  setSpecies('Array');

  var HAS_SPECIES_SUPPORT = arrayMethodHasSpeciesSupport('splice');
  var TypeError$h = global$1.TypeError;
  var max$3 = Math.max;
  var min$5 = Math.min;
  var MAX_SAFE_INTEGER = 0x1FFFFFFFFFFFFF;
  var MAXIMUM_ALLOWED_LENGTH_EXCEEDED = 'Maximum allowed length exceeded'; // `Array.prototype.splice` method
  // https://tc39.es/ecma262/#sec-array.prototype.splice
  // with adding support of @@species

  _export({
    target: 'Array',
    proto: true,
    forced: !HAS_SPECIES_SUPPORT
  }, {
    splice: function splice(start, deleteCount
    /* , ...items */
    ) {
      var O = toObject(this);
      var len = lengthOfArrayLike(O);
      var actualStart = toAbsoluteIndex(start, len);
      var argumentsLength = arguments.length;
      var insertCount, actualDeleteCount, A, k, from, to;

      if (argumentsLength === 0) {
        insertCount = actualDeleteCount = 0;
      } else if (argumentsLength === 1) {
        insertCount = 0;
        actualDeleteCount = len - actualStart;
      } else {
        insertCount = argumentsLength - 2;
        actualDeleteCount = min$5(max$3(toIntegerOrInfinity(deleteCount), 0), len - actualStart);
      }

      if (len + insertCount - actualDeleteCount > MAX_SAFE_INTEGER) {
        throw TypeError$h(MAXIMUM_ALLOWED_LENGTH_EXCEEDED);
      }

      A = arraySpeciesCreate(O, actualDeleteCount);

      for (k = 0; k < actualDeleteCount; k++) {
        from = actualStart + k;
        if (from in O) createProperty(A, k, O[from]);
      }

      A.length = actualDeleteCount;

      if (insertCount < actualDeleteCount) {
        for (k = actualStart; k < len - actualDeleteCount; k++) {
          from = k + actualDeleteCount;
          to = k + insertCount;
          if (from in O) O[to] = O[from];else delete O[to];
        }

        for (k = len; k > len - actualDeleteCount + insertCount; k--) {
          delete O[k - 1];
        }
      } else if (insertCount > actualDeleteCount) {
        for (k = len - actualDeleteCount; k > actualStart; k--) {
          from = k + actualDeleteCount - 1;
          to = k + insertCount - 1;
          if (from in O) O[to] = O[from];else delete O[to];
        }
      }

      for (k = 0; k < insertCount; k++) {
        O[k + actualStart] = arguments[k + 2];
      }

      O.length = len - actualDeleteCount + insertCount;
      return A;
    }
  });

  // in popular engines, so it's moved to a separate module
  // https://tc39.es/ecma262/#sec-array.prototype-@@unscopables

  addToUnscopables('flat');

  // in popular engines, so it's moved to a separate module
  // https://tc39.es/ecma262/#sec-array.prototype-@@unscopables

  addToUnscopables('flatMap');

  // eslint-disable-next-line es/no-typed-arrays -- safe
  var arrayBufferNative = typeof ArrayBuffer != 'undefined' && typeof DataView != 'undefined';

  var redefineAll = function redefineAll(target, src, options) {
    for (var key in src) {
      redefine(target, key, src[key], options);
    }

    return target;
  };

  var TypeError$g = global$1.TypeError;

  var anInstance = function anInstance(it, Prototype) {
    if (objectIsPrototypeOf(Prototype, it)) return it;
    throw TypeError$g('Incorrect invocation');
  };

  var RangeError$a = global$1.RangeError; // `ToIndex` abstract operation
  // https://tc39.es/ecma262/#sec-toindex

  var toIndex = function toIndex(it) {
    if (it === undefined) return 0;
    var number = toIntegerOrInfinity(it);
    var length = toLength(number);
    if (number !== length) throw RangeError$a('Wrong length or index');
    return length;
  };

  var Array$4 = global$1.Array;
  var abs$8 = Math.abs;
  var pow$5 = Math.pow;
  var floor$9 = Math.floor;
  var log$8 = Math.log;
  var LN2$2 = Math.LN2;

  var pack = function pack(number, mantissaLength, bytes) {
    var buffer = Array$4(bytes);
    var exponentLength = bytes * 8 - mantissaLength - 1;
    var eMax = (1 << exponentLength) - 1;
    var eBias = eMax >> 1;
    var rt = mantissaLength === 23 ? pow$5(2, -24) - pow$5(2, -77) : 0;
    var sign = number < 0 || number === 0 && 1 / number < 0 ? 1 : 0;
    var index = 0;
    var exponent, mantissa, c;
    number = abs$8(number); // eslint-disable-next-line no-self-compare -- NaN check

    if (number != number || number === Infinity) {
      // eslint-disable-next-line no-self-compare -- NaN check
      mantissa = number != number ? 1 : 0;
      exponent = eMax;
    } else {
      exponent = floor$9(log$8(number) / LN2$2);
      c = pow$5(2, -exponent);

      if (number * c < 1) {
        exponent--;
        c *= 2;
      }

      if (exponent + eBias >= 1) {
        number += rt / c;
      } else {
        number += rt * pow$5(2, 1 - eBias);
      }

      if (number * c >= 2) {
        exponent++;
        c /= 2;
      }

      if (exponent + eBias >= eMax) {
        mantissa = 0;
        exponent = eMax;
      } else if (exponent + eBias >= 1) {
        mantissa = (number * c - 1) * pow$5(2, mantissaLength);
        exponent = exponent + eBias;
      } else {
        mantissa = number * pow$5(2, eBias - 1) * pow$5(2, mantissaLength);
        exponent = 0;
      }
    }

    while (mantissaLength >= 8) {
      buffer[index++] = mantissa & 255;
      mantissa /= 256;
      mantissaLength -= 8;
    }

    exponent = exponent << mantissaLength | mantissa;
    exponentLength += mantissaLength;

    while (exponentLength > 0) {
      buffer[index++] = exponent & 255;
      exponent /= 256;
      exponentLength -= 8;
    }

    buffer[--index] |= sign * 128;
    return buffer;
  };

  var unpack = function unpack(buffer, mantissaLength) {
    var bytes = buffer.length;
    var exponentLength = bytes * 8 - mantissaLength - 1;
    var eMax = (1 << exponentLength) - 1;
    var eBias = eMax >> 1;
    var nBits = exponentLength - 7;
    var index = bytes - 1;
    var sign = buffer[index--];
    var exponent = sign & 127;
    var mantissa;
    sign >>= 7;

    while (nBits > 0) {
      exponent = exponent * 256 + buffer[index--];
      nBits -= 8;
    }

    mantissa = exponent & (1 << -nBits) - 1;
    exponent >>= -nBits;
    nBits += mantissaLength;

    while (nBits > 0) {
      mantissa = mantissa * 256 + buffer[index--];
      nBits -= 8;
    }

    if (exponent === 0) {
      exponent = 1 - eBias;
    } else if (exponent === eMax) {
      return mantissa ? NaN : sign ? -Infinity : Infinity;
    } else {
      mantissa = mantissa + pow$5(2, mantissaLength);
      exponent = exponent - eBias;
    }

    return (sign ? -1 : 1) * mantissa * pow$5(2, exponent - mantissaLength);
  };

  var ieee754 = {
    pack: pack,
    unpack: unpack
  };

  var getOwnPropertyNames$3 = objectGetOwnPropertyNames.f;
  var defineProperty$b = objectDefineProperty.f;
  var PROPER_FUNCTION_NAME$2 = functionName.PROPER;
  var CONFIGURABLE_FUNCTION_NAME = functionName.CONFIGURABLE;
  var getInternalState$7 = internalState.get;
  var setInternalState$8 = internalState.set;
  var ARRAY_BUFFER$1 = 'ArrayBuffer';
  var DATA_VIEW = 'DataView';
  var PROTOTYPE = 'prototype';
  var WRONG_LENGTH = 'Wrong length';
  var WRONG_INDEX = 'Wrong index';
  var NativeArrayBuffer$1 = global$1[ARRAY_BUFFER$1];
  var $ArrayBuffer = NativeArrayBuffer$1;
  var ArrayBufferPrototype = $ArrayBuffer && $ArrayBuffer[PROTOTYPE];
  var $DataView = global$1[DATA_VIEW];
  var DataViewPrototype = $DataView && $DataView[PROTOTYPE];
  var ObjectPrototype$2 = Object.prototype;
  var Array$3 = global$1.Array;
  var RangeError$9 = global$1.RangeError;
  var fill = functionUncurryThis(arrayFill);
  var reverse = functionUncurryThis([].reverse);
  var packIEEE754 = ieee754.pack;
  var unpackIEEE754 = ieee754.unpack;

  var packInt8 = function packInt8(number) {
    return [number & 0xFF];
  };

  var packInt16 = function packInt16(number) {
    return [number & 0xFF, number >> 8 & 0xFF];
  };

  var packInt32 = function packInt32(number) {
    return [number & 0xFF, number >> 8 & 0xFF, number >> 16 & 0xFF, number >> 24 & 0xFF];
  };

  var unpackInt32 = function unpackInt32(buffer) {
    return buffer[3] << 24 | buffer[2] << 16 | buffer[1] << 8 | buffer[0];
  };

  var packFloat32 = function packFloat32(number) {
    return packIEEE754(number, 23, 4);
  };

  var packFloat64 = function packFloat64(number) {
    return packIEEE754(number, 52, 8);
  };

  var addGetter = function addGetter(Constructor, key) {
    defineProperty$b(Constructor[PROTOTYPE], key, {
      get: function get() {
        return getInternalState$7(this)[key];
      }
    });
  };

  var get$3 = function get(view, count, index, isLittleEndian) {
    var intIndex = toIndex(index);
    var store = getInternalState$7(view);
    if (intIndex + count > store.byteLength) throw RangeError$9(WRONG_INDEX);
    var bytes = getInternalState$7(store.buffer).bytes;
    var start = intIndex + store.byteOffset;
    var pack = arraySliceSimple(bytes, start, start + count);
    return isLittleEndian ? pack : reverse(pack);
  };

  var set$4 = function set(view, count, index, conversion, value, isLittleEndian) {
    var intIndex = toIndex(index);
    var store = getInternalState$7(view);
    if (intIndex + count > store.byteLength) throw RangeError$9(WRONG_INDEX);
    var bytes = getInternalState$7(store.buffer).bytes;
    var start = intIndex + store.byteOffset;
    var pack = conversion(+value);

    for (var i = 0; i < count; i++) {
      bytes[start + i] = pack[isLittleEndian ? i : count - i - 1];
    }
  };

  if (!arrayBufferNative) {
    $ArrayBuffer = function ArrayBuffer(length) {
      anInstance(this, ArrayBufferPrototype);
      var byteLength = toIndex(length);
      setInternalState$8(this, {
        bytes: fill(Array$3(byteLength), 0),
        byteLength: byteLength
      });
      if (!descriptors) this.byteLength = byteLength;
    };

    ArrayBufferPrototype = $ArrayBuffer[PROTOTYPE];

    $DataView = function DataView(buffer, byteOffset, byteLength) {
      anInstance(this, DataViewPrototype);
      anInstance(buffer, ArrayBufferPrototype);
      var bufferLength = getInternalState$7(buffer).byteLength;
      var offset = toIntegerOrInfinity(byteOffset);
      if (offset < 0 || offset > bufferLength) throw RangeError$9('Wrong offset');
      byteLength = byteLength === undefined ? bufferLength - offset : toLength(byteLength);
      if (offset + byteLength > bufferLength) throw RangeError$9(WRONG_LENGTH);
      setInternalState$8(this, {
        buffer: buffer,
        byteLength: byteLength,
        byteOffset: offset
      });

      if (!descriptors) {
        this.buffer = buffer;
        this.byteLength = byteLength;
        this.byteOffset = offset;
      }
    };

    DataViewPrototype = $DataView[PROTOTYPE];

    if (descriptors) {
      addGetter($ArrayBuffer, 'byteLength');
      addGetter($DataView, 'buffer');
      addGetter($DataView, 'byteLength');
      addGetter($DataView, 'byteOffset');
    }

    redefineAll(DataViewPrototype, {
      getInt8: function getInt8(byteOffset) {
        return get$3(this, 1, byteOffset)[0] << 24 >> 24;
      },
      getUint8: function getUint8(byteOffset) {
        return get$3(this, 1, byteOffset)[0];
      },
      getInt16: function getInt16(byteOffset
      /* , littleEndian */
      ) {
        var bytes = get$3(this, 2, byteOffset, arguments.length > 1 ? arguments[1] : undefined);
        return (bytes[1] << 8 | bytes[0]) << 16 >> 16;
      },
      getUint16: function getUint16(byteOffset
      /* , littleEndian */
      ) {
        var bytes = get$3(this, 2, byteOffset, arguments.length > 1 ? arguments[1] : undefined);
        return bytes[1] << 8 | bytes[0];
      },
      getInt32: function getInt32(byteOffset
      /* , littleEndian */
      ) {
        return unpackInt32(get$3(this, 4, byteOffset, arguments.length > 1 ? arguments[1] : undefined));
      },
      getUint32: function getUint32(byteOffset
      /* , littleEndian */
      ) {
        return unpackInt32(get$3(this, 4, byteOffset, arguments.length > 1 ? arguments[1] : undefined)) >>> 0;
      },
      getFloat32: function getFloat32(byteOffset
      /* , littleEndian */
      ) {
        return unpackIEEE754(get$3(this, 4, byteOffset, arguments.length > 1 ? arguments[1] : undefined), 23);
      },
      getFloat64: function getFloat64(byteOffset
      /* , littleEndian */
      ) {
        return unpackIEEE754(get$3(this, 8, byteOffset, arguments.length > 1 ? arguments[1] : undefined), 52);
      },
      setInt8: function setInt8(byteOffset, value) {
        set$4(this, 1, byteOffset, packInt8, value);
      },
      setUint8: function setUint8(byteOffset, value) {
        set$4(this, 1, byteOffset, packInt8, value);
      },
      setInt16: function setInt16(byteOffset, value
      /* , littleEndian */
      ) {
        set$4(this, 2, byteOffset, packInt16, value, arguments.length > 2 ? arguments[2] : undefined);
      },
      setUint16: function setUint16(byteOffset, value
      /* , littleEndian */
      ) {
        set$4(this, 2, byteOffset, packInt16, value, arguments.length > 2 ? arguments[2] : undefined);
      },
      setInt32: function setInt32(byteOffset, value
      /* , littleEndian */
      ) {
        set$4(this, 4, byteOffset, packInt32, value, arguments.length > 2 ? arguments[2] : undefined);
      },
      setUint32: function setUint32(byteOffset, value
      /* , littleEndian */
      ) {
        set$4(this, 4, byteOffset, packInt32, value, arguments.length > 2 ? arguments[2] : undefined);
      },
      setFloat32: function setFloat32(byteOffset, value
      /* , littleEndian */
      ) {
        set$4(this, 4, byteOffset, packFloat32, value, arguments.length > 2 ? arguments[2] : undefined);
      },
      setFloat64: function setFloat64(byteOffset, value
      /* , littleEndian */
      ) {
        set$4(this, 8, byteOffset, packFloat64, value, arguments.length > 2 ? arguments[2] : undefined);
      }
    });
  } else {
    var INCORRECT_ARRAY_BUFFER_NAME = PROPER_FUNCTION_NAME$2 && NativeArrayBuffer$1.name !== ARRAY_BUFFER$1;
    /* eslint-disable no-new -- required for testing */

    if (!fails(function () {
      NativeArrayBuffer$1(1);
    }) || !fails(function () {
      new NativeArrayBuffer$1(-1);
    }) || fails(function () {
      new NativeArrayBuffer$1();
      new NativeArrayBuffer$1(1.5);
      new NativeArrayBuffer$1(NaN);
      return INCORRECT_ARRAY_BUFFER_NAME && !CONFIGURABLE_FUNCTION_NAME;
    })) {
      /* eslint-enable no-new -- required for testing */
      $ArrayBuffer = function ArrayBuffer(length) {
        anInstance(this, ArrayBufferPrototype);
        return new NativeArrayBuffer$1(toIndex(length));
      };

      $ArrayBuffer[PROTOTYPE] = ArrayBufferPrototype;

      for (var keys$2 = getOwnPropertyNames$3(NativeArrayBuffer$1), j$1 = 0, key$3; keys$2.length > j$1;) {
        if (!((key$3 = keys$2[j$1++]) in $ArrayBuffer)) {
          createNonEnumerableProperty($ArrayBuffer, key$3, NativeArrayBuffer$1[key$3]);
        }
      }

      ArrayBufferPrototype.constructor = $ArrayBuffer;
    } else if (INCORRECT_ARRAY_BUFFER_NAME && CONFIGURABLE_FUNCTION_NAME) {
      createNonEnumerableProperty(NativeArrayBuffer$1, 'name', ARRAY_BUFFER$1);
    } // WebKit bug - the same parent prototype for typed arrays and data view


    if (objectSetPrototypeOf && objectGetPrototypeOf(DataViewPrototype) !== ObjectPrototype$2) {
      objectSetPrototypeOf(DataViewPrototype, ObjectPrototype$2);
    } // iOS Safari 7.x bug


    var testView = new $DataView(new $ArrayBuffer(2));
    var $setInt8 = functionUncurryThis(DataViewPrototype.setInt8);
    testView.setInt8(0, 2147483648);
    testView.setInt8(1, 2147483649);
    if (testView.getInt8(0) || !testView.getInt8(1)) redefineAll(DataViewPrototype, {
      setInt8: function setInt8(byteOffset, value) {
        $setInt8(this, byteOffset, value << 24 >> 24);
      },
      setUint8: function setUint8(byteOffset, value) {
        $setInt8(this, byteOffset, value << 24 >> 24);
      }
    }, {
      unsafe: true
    });
  }

  setToStringTag($ArrayBuffer, ARRAY_BUFFER$1);
  setToStringTag($DataView, DATA_VIEW);
  var arrayBuffer = {
    ArrayBuffer: $ArrayBuffer,
    DataView: $DataView
  };

  var ARRAY_BUFFER = 'ArrayBuffer';
  var ArrayBuffer$2 = arrayBuffer[ARRAY_BUFFER];
  var NativeArrayBuffer = global$1[ARRAY_BUFFER]; // `ArrayBuffer` constructor
  // https://tc39.es/ecma262/#sec-arraybuffer-constructor

  _export({
    global: true,
    forced: NativeArrayBuffer !== ArrayBuffer$2
  }, {
    ArrayBuffer: ArrayBuffer$2
  });
  setSpecies(ARRAY_BUFFER);

  var TypeError$f = global$1.TypeError; // `Date.prototype[@@toPrimitive](hint)` method implementation
  // https://tc39.es/ecma262/#sec-date.prototype-@@toprimitive

  var dateToPrimitive = function dateToPrimitive(hint) {
    anObject(this);
    if (hint === 'string' || hint === 'default') hint = 'string';else if (hint !== 'number') throw TypeError$f('Incorrect hint');
    return ordinaryToPrimitive(this, hint);
  };

  var TO_PRIMITIVE = wellKnownSymbol('toPrimitive');
  var DatePrototype = Date.prototype; // `Date.prototype[@@toPrimitive]` method
  // https://tc39.es/ecma262/#sec-date.prototype-@@toprimitive

  if (!hasOwnProperty_1(DatePrototype, TO_PRIMITIVE)) {
    redefine(DatePrototype, TO_PRIMITIVE, dateToPrimitive);
  }

  var HAS_INSTANCE = wellKnownSymbol('hasInstance');
  var FunctionPrototype$1 = Function.prototype; // `Function.prototype[@@hasInstance]` method
  // https://tc39.es/ecma262/#sec-function.prototype-@@hasinstance

  if (!(HAS_INSTANCE in FunctionPrototype$1)) {
    objectDefineProperty.f(FunctionPrototype$1, HAS_INSTANCE, {
      value: function value(O) {
        if (!isCallable(this) || !isObject(O)) return false;
        var P = this.prototype;
        if (!isObject(P)) return O instanceof this; // for environment w/o native `@@hasInstance` logic enough `instanceof`, but add this:

        while (O = objectGetPrototypeOf(O)) {
          if (P === O) return true;
        }

        return false;
      }
    });
  }

  var FUNCTION_NAME_EXISTS = functionName.EXISTS;
  var defineProperty$a = objectDefineProperty.f;
  var FunctionPrototype = Function.prototype;
  var functionToString = functionUncurryThis(FunctionPrototype.toString);
  var nameRE = /function\b(?:\s|\/\*[\S\s]*?\*\/|\/\/[^\n\r]*[\n\r]+)*([^\s(/]*)/;
  var regExpExec = functionUncurryThis(nameRE.exec);
  var NAME$f = 'name'; // Function instances `.name` property
  // https://tc39.es/ecma262/#sec-function-instances-name

  if (descriptors && !FUNCTION_NAME_EXISTS) {
    defineProperty$a(FunctionPrototype, NAME$f, {
      configurable: true,
      get: function get() {
        try {
          return regExpExec(nameRE, functionToString(this))[1];
        } catch (error) {
          return '';
        }
      }
    });
  }

  // https://tc39.es/ecma262/#sec-globalthis

  _export({
    global: true
  }, {
    globalThis: global$1
  });

  var Array$2 = global$1.Array;
  var $stringify = getBuiltIn('JSON', 'stringify');
  var exec$5 = functionUncurryThis(/./.exec);
  var charAt$a = functionUncurryThis(''.charAt);
  var charCodeAt$3 = functionUncurryThis(''.charCodeAt);
  var replace$8 = functionUncurryThis(''.replace);
  var numberToString$1 = functionUncurryThis(1.0.toString);
  var tester = /[\uD800-\uDFFF]/g;
  var low = /^[\uD800-\uDBFF]$/;
  var hi = /^[\uDC00-\uDFFF]$/;

  var fix = function fix(match, offset, string) {
    var prev = charAt$a(string, offset - 1);
    var next = charAt$a(string, offset + 1);

    if (exec$5(low, match) && !exec$5(hi, next) || exec$5(hi, match) && !exec$5(low, prev)) {
      return "\\u" + numberToString$1(charCodeAt$3(match, 0), 16);
    }

    return match;
  };

  var FORCED$h = fails(function () {
    return $stringify("\uDF06\uD834") !== "\"\\udf06\\ud834\"" || $stringify("\uDEAD") !== "\"\\udead\"";
  });

  if ($stringify) {
    // `JSON.stringify` method
    // https://tc39.es/ecma262/#sec-json.stringify
    // https://github.com/tc39/proposal-well-formed-stringify
    _export({
      target: 'JSON',
      stat: true,
      forced: FORCED$h
    }, {
      // eslint-disable-next-line no-unused-vars -- required for `.length`
      stringify: function stringify(it, replacer, space) {
        for (var i = 0, l = arguments.length, args = Array$2(l); i < l; i++) {
          args[i] = arguments[i];
        }

        var result = functionApply($stringify, null, args);
        return typeof result == 'string' ? replace$8(result, tester, fix) : result;
      }
    });
  }

  // https://tc39.es/ecma262/#sec-json-@@tostringtag

  setToStringTag(global$1.JSON, 'JSON', true);

  var arrayBufferNonExtensible = fails(function () {
    if (typeof ArrayBuffer == 'function') {
      var buffer = new ArrayBuffer(8); // eslint-disable-next-line es/no-object-isextensible, es/no-object-defineproperty -- safe

      if (Object.isExtensible(buffer)) Object.defineProperty(buffer, 'a', {
        value: 8
      });
    }
  });

  var $isExtensible = Object.isExtensible;
  var FAILS_ON_PRIMITIVES$9 = fails(function () {
    $isExtensible(1);
  }); // `Object.isExtensible` method
  // https://tc39.es/ecma262/#sec-object.isextensible

  var objectIsExtensible = FAILS_ON_PRIMITIVES$9 || arrayBufferNonExtensible ? function isExtensible(it) {
    if (!isObject(it)) return false;
    if (arrayBufferNonExtensible && classofRaw(it) == 'ArrayBuffer') return false;
    return $isExtensible ? $isExtensible(it) : true;
  } : $isExtensible;

  var freezing = !fails(function () {
    // eslint-disable-next-line es/no-object-isextensible, es/no-object-preventextensions -- required for testing
    return Object.isExtensible(Object.preventExtensions({}));
  });

  var internalMetadata = createCommonjsModule(function (module) {
    var defineProperty = objectDefineProperty.f;
    var REQUIRED = false;
    var METADATA = uid('meta');
    var id = 0;

    var setMetadata = function setMetadata(it) {
      defineProperty(it, METADATA, {
        value: {
          objectID: 'O' + id++,
          // object ID
          weakData: {} // weak collections IDs

        }
      });
    };

    var fastKey = function fastKey(it, create) {
      // return a primitive with prefix
      if (!isObject(it)) return _typeof(it) == 'symbol' ? it : (typeof it == 'string' ? 'S' : 'P') + it;

      if (!hasOwnProperty_1(it, METADATA)) {
        // can't set metadata to uncaught frozen object
        if (!objectIsExtensible(it)) return 'F'; // not necessary to add metadata

        if (!create) return 'E'; // add missing metadata

        setMetadata(it); // return object ID
      }

      return it[METADATA].objectID;
    };

    var getWeakData = function getWeakData(it, create) {
      if (!hasOwnProperty_1(it, METADATA)) {
        // can't set metadata to uncaught frozen object
        if (!objectIsExtensible(it)) return true; // not necessary to add metadata

        if (!create) return false; // add missing metadata

        setMetadata(it); // return the store of weak collections IDs
      }

      return it[METADATA].weakData;
    }; // add metadata on freeze-family methods calling


    var onFreeze = function onFreeze(it) {
      if (freezing && REQUIRED && objectIsExtensible(it) && !hasOwnProperty_1(it, METADATA)) setMetadata(it);
      return it;
    };

    var enable = function enable() {
      meta.enable = function () {
        /* empty */
      };

      REQUIRED = true;
      var getOwnPropertyNames = objectGetOwnPropertyNames.f;
      var splice = functionUncurryThis([].splice);
      var test = {};
      test[METADATA] = 1; // prevent exposing of metadata key

      if (getOwnPropertyNames(test).length) {
        objectGetOwnPropertyNames.f = function (it) {
          var result = getOwnPropertyNames(it);

          for (var i = 0, length = result.length; i < length; i++) {
            if (result[i] === METADATA) {
              splice(result, i, 1);
              break;
            }
          }

          return result;
        };

        _export({
          target: 'Object',
          stat: true,
          forced: true
        }, {
          getOwnPropertyNames: objectGetOwnPropertyNamesExternal.f
        });
      }
    };

    var meta = module.exports = {
      enable: enable,
      fastKey: fastKey,
      getWeakData: getWeakData,
      onFreeze: onFreeze
    };
    hiddenKeys$1[METADATA] = true;
  });

  var collection = function collection(CONSTRUCTOR_NAME, wrapper, common) {
    var IS_MAP = CONSTRUCTOR_NAME.indexOf('Map') !== -1;
    var IS_WEAK = CONSTRUCTOR_NAME.indexOf('Weak') !== -1;
    var ADDER = IS_MAP ? 'set' : 'add';
    var NativeConstructor = global$1[CONSTRUCTOR_NAME];
    var NativePrototype = NativeConstructor && NativeConstructor.prototype;
    var Constructor = NativeConstructor;
    var exported = {};

    var fixMethod = function fixMethod(KEY) {
      var uncurriedNativeMethod = functionUncurryThis(NativePrototype[KEY]);
      redefine(NativePrototype, KEY, KEY == 'add' ? function add(value) {
        uncurriedNativeMethod(this, value === 0 ? 0 : value);
        return this;
      } : KEY == 'delete' ? function (key) {
        return IS_WEAK && !isObject(key) ? false : uncurriedNativeMethod(this, key === 0 ? 0 : key);
      } : KEY == 'get' ? function get(key) {
        return IS_WEAK && !isObject(key) ? undefined : uncurriedNativeMethod(this, key === 0 ? 0 : key);
      } : KEY == 'has' ? function has(key) {
        return IS_WEAK && !isObject(key) ? false : uncurriedNativeMethod(this, key === 0 ? 0 : key);
      } : function set(key, value) {
        uncurriedNativeMethod(this, key === 0 ? 0 : key, value);
        return this;
      });
    };

    var REPLACE = isForced_1(CONSTRUCTOR_NAME, !isCallable(NativeConstructor) || !(IS_WEAK || NativePrototype.forEach && !fails(function () {
      new NativeConstructor().entries().next();
    })));

    if (REPLACE) {
      // create collection constructor
      Constructor = common.getConstructor(wrapper, CONSTRUCTOR_NAME, IS_MAP, ADDER);
      internalMetadata.enable();
    } else if (isForced_1(CONSTRUCTOR_NAME, true)) {
      var instance = new Constructor(); // early implementations not supports chaining

      var HASNT_CHAINING = instance[ADDER](IS_WEAK ? {} : -0, 1) != instance; // V8 ~ Chromium 40- weak-collections throws on primitives, but should return false

      var THROWS_ON_PRIMITIVES = fails(function () {
        instance.has(1);
      }); // most early implementations doesn't supports iterables, most modern - not close it correctly
      // eslint-disable-next-line no-new -- required for testing

      var ACCEPT_ITERABLES = checkCorrectnessOfIteration(function (iterable) {
        new NativeConstructor(iterable);
      }); // for early implementations -0 and +0 not the same

      var BUGGY_ZERO = !IS_WEAK && fails(function () {
        // V8 ~ Chromium 42- fails only with 5+ elements
        var $instance = new NativeConstructor();
        var index = 5;

        while (index--) {
          $instance[ADDER](index, index);
        }

        return !$instance.has(-0);
      });

      if (!ACCEPT_ITERABLES) {
        Constructor = wrapper(function (dummy, iterable) {
          anInstance(dummy, NativePrototype);
          var that = inheritIfRequired(new NativeConstructor(), dummy, Constructor);
          if (iterable != undefined) iterate(iterable, that[ADDER], {
            that: that,
            AS_ENTRIES: IS_MAP
          });
          return that;
        });
        Constructor.prototype = NativePrototype;
        NativePrototype.constructor = Constructor;
      }

      if (THROWS_ON_PRIMITIVES || BUGGY_ZERO) {
        fixMethod('delete');
        fixMethod('has');
        IS_MAP && fixMethod('get');
      }

      if (BUGGY_ZERO || HASNT_CHAINING) fixMethod(ADDER); // weak collections should not contains .clear method

      if (IS_WEAK && NativePrototype.clear) delete NativePrototype.clear;
    }

    exported[CONSTRUCTOR_NAME] = Constructor;
    _export({
      global: true,
      forced: Constructor != NativeConstructor
    }, exported);
    setToStringTag(Constructor, CONSTRUCTOR_NAME);
    if (!IS_WEAK) common.setStrong(Constructor, CONSTRUCTOR_NAME, IS_MAP);
    return Constructor;
  };

  var defineProperty$9 = objectDefineProperty.f;
  var fastKey = internalMetadata.fastKey;
  var setInternalState$7 = internalState.set;
  var internalStateGetterFor$1 = internalState.getterFor;
  var collectionStrong = {
    getConstructor: function getConstructor(wrapper, CONSTRUCTOR_NAME, IS_MAP, ADDER) {
      var Constructor = wrapper(function (that, iterable) {
        anInstance(that, Prototype);
        setInternalState$7(that, {
          type: CONSTRUCTOR_NAME,
          index: objectCreate(null),
          first: undefined,
          last: undefined,
          size: 0
        });
        if (!descriptors) that.size = 0;
        if (iterable != undefined) iterate(iterable, that[ADDER], {
          that: that,
          AS_ENTRIES: IS_MAP
        });
      });
      var Prototype = Constructor.prototype;
      var getInternalState = internalStateGetterFor$1(CONSTRUCTOR_NAME);

      var define = function define(that, key, value) {
        var state = getInternalState(that);
        var entry = getEntry(that, key);
        var previous, index; // change existing entry

        if (entry) {
          entry.value = value; // create new entry
        } else {
          state.last = entry = {
            index: index = fastKey(key, true),
            key: key,
            value: value,
            previous: previous = state.last,
            next: undefined,
            removed: false
          };
          if (!state.first) state.first = entry;
          if (previous) previous.next = entry;
          if (descriptors) state.size++;else that.size++; // add to index

          if (index !== 'F') state.index[index] = entry;
        }

        return that;
      };

      var getEntry = function getEntry(that, key) {
        var state = getInternalState(that); // fast case

        var index = fastKey(key);
        var entry;
        if (index !== 'F') return state.index[index]; // frozen object case

        for (entry = state.first; entry; entry = entry.next) {
          if (entry.key == key) return entry;
        }
      };

      redefineAll(Prototype, {
        // `{ Map, Set }.prototype.clear()` methods
        // https://tc39.es/ecma262/#sec-map.prototype.clear
        // https://tc39.es/ecma262/#sec-set.prototype.clear
        clear: function clear() {
          var that = this;
          var state = getInternalState(that);
          var data = state.index;
          var entry = state.first;

          while (entry) {
            entry.removed = true;
            if (entry.previous) entry.previous = entry.previous.next = undefined;
            delete data[entry.index];
            entry = entry.next;
          }

          state.first = state.last = undefined;
          if (descriptors) state.size = 0;else that.size = 0;
        },
        // `{ Map, Set }.prototype.delete(key)` methods
        // https://tc39.es/ecma262/#sec-map.prototype.delete
        // https://tc39.es/ecma262/#sec-set.prototype.delete
        'delete': function _delete(key) {
          var that = this;
          var state = getInternalState(that);
          var entry = getEntry(that, key);

          if (entry) {
            var next = entry.next;
            var prev = entry.previous;
            delete state.index[entry.index];
            entry.removed = true;
            if (prev) prev.next = next;
            if (next) next.previous = prev;
            if (state.first == entry) state.first = next;
            if (state.last == entry) state.last = prev;
            if (descriptors) state.size--;else that.size--;
          }

          return !!entry;
        },
        // `{ Map, Set }.prototype.forEach(callbackfn, thisArg = undefined)` methods
        // https://tc39.es/ecma262/#sec-map.prototype.foreach
        // https://tc39.es/ecma262/#sec-set.prototype.foreach
        forEach: function forEach(callbackfn
        /* , that = undefined */
        ) {
          var state = getInternalState(this);
          var boundFunction = functionBindContext(callbackfn, arguments.length > 1 ? arguments[1] : undefined);
          var entry;

          while (entry = entry ? entry.next : state.first) {
            boundFunction(entry.value, entry.key, this); // revert to the last existing entry

            while (entry && entry.removed) {
              entry = entry.previous;
            }
          }
        },
        // `{ Map, Set}.prototype.has(key)` methods
        // https://tc39.es/ecma262/#sec-map.prototype.has
        // https://tc39.es/ecma262/#sec-set.prototype.has
        has: function has(key) {
          return !!getEntry(this, key);
        }
      });
      redefineAll(Prototype, IS_MAP ? {
        // `Map.prototype.get(key)` method
        // https://tc39.es/ecma262/#sec-map.prototype.get
        get: function get(key) {
          var entry = getEntry(this, key);
          return entry && entry.value;
        },
        // `Map.prototype.set(key, value)` method
        // https://tc39.es/ecma262/#sec-map.prototype.set
        set: function set(key, value) {
          return define(this, key === 0 ? 0 : key, value);
        }
      } : {
        // `Set.prototype.add(value)` method
        // https://tc39.es/ecma262/#sec-set.prototype.add
        add: function add(value) {
          return define(this, value = value === 0 ? 0 : value, value);
        }
      });
      if (descriptors) defineProperty$9(Prototype, 'size', {
        get: function get() {
          return getInternalState(this).size;
        }
      });
      return Constructor;
    },
    setStrong: function setStrong(Constructor, CONSTRUCTOR_NAME, IS_MAP) {
      var ITERATOR_NAME = CONSTRUCTOR_NAME + ' Iterator';
      var getInternalCollectionState = internalStateGetterFor$1(CONSTRUCTOR_NAME);
      var getInternalIteratorState = internalStateGetterFor$1(ITERATOR_NAME); // `{ Map, Set }.prototype.{ keys, values, entries, @@iterator }()` methods
      // https://tc39.es/ecma262/#sec-map.prototype.entries
      // https://tc39.es/ecma262/#sec-map.prototype.keys
      // https://tc39.es/ecma262/#sec-map.prototype.values
      // https://tc39.es/ecma262/#sec-map.prototype-@@iterator
      // https://tc39.es/ecma262/#sec-set.prototype.entries
      // https://tc39.es/ecma262/#sec-set.prototype.keys
      // https://tc39.es/ecma262/#sec-set.prototype.values
      // https://tc39.es/ecma262/#sec-set.prototype-@@iterator

      defineIterator(Constructor, CONSTRUCTOR_NAME, function (iterated, kind) {
        setInternalState$7(this, {
          type: ITERATOR_NAME,
          target: iterated,
          state: getInternalCollectionState(iterated),
          kind: kind,
          last: undefined
        });
      }, function () {
        var state = getInternalIteratorState(this);
        var kind = state.kind;
        var entry = state.last; // revert to the last existing entry

        while (entry && entry.removed) {
          entry = entry.previous;
        } // get next entry


        if (!state.target || !(state.last = entry = entry ? entry.next : state.state.first)) {
          // or finish the iteration
          state.target = undefined;
          return {
            value: undefined,
            done: true
          };
        } // return step by kind


        if (kind == 'keys') return {
          value: entry.key,
          done: false
        };
        if (kind == 'values') return {
          value: entry.value,
          done: false
        };
        return {
          value: [entry.key, entry.value],
          done: false
        };
      }, IS_MAP ? 'entries' : 'values', !IS_MAP, true); // `{ Map, Set }.prototype[@@species]` accessors
      // https://tc39.es/ecma262/#sec-get-map-@@species
      // https://tc39.es/ecma262/#sec-get-set-@@species

      setSpecies(CONSTRUCTOR_NAME);
    }
  };

  // https://tc39.es/ecma262/#sec-map-objects


  collection('Map', function (init) {
    return function Map() {
      return init(this, arguments.length ? arguments[0] : undefined);
    };
  }, collectionStrong);

  var log$7 = Math.log; // `Math.log1p` method implementation
  // https://tc39.es/ecma262/#sec-math.log1p
  // eslint-disable-next-line es/no-math-log1p -- safe

  var mathLog1p = Math.log1p || function log1p(x) {
    return (x = +x) > -1e-8 && x < 1e-8 ? x - x * x / 2 : log$7(1 + x);
  };

  var $acosh = Math.acosh;
  var log$6 = Math.log;
  var sqrt$3 = Math.sqrt;
  var LN2$1 = Math.LN2;
  var FORCED$g = !$acosh // V8 bug: https://code.google.com/p/v8/issues/detail?id=3509
  || Math.floor($acosh(Number.MAX_VALUE)) != 710 // Tor Browser bug: Math.acosh(Infinity) -> NaN
  || $acosh(Infinity) != Infinity; // `Math.acosh` method
  // https://tc39.es/ecma262/#sec-math.acosh

  _export({
    target: 'Math',
    stat: true,
    forced: FORCED$g
  }, {
    acosh: function acosh(x) {
      return (x = +x) < 1 ? NaN : x > 94906265.62425156 ? log$6(x) + LN2$1 : mathLog1p(x - 1 + sqrt$3(x - 1) * sqrt$3(x + 1));
    }
  });

  var $asinh = Math.asinh;
  var log$5 = Math.log;
  var sqrt$2 = Math.sqrt;

  function asinh(x) {
    return !isFinite(x = +x) || x == 0 ? x : x < 0 ? -asinh(-x) : log$5(x + sqrt$2(x * x + 1));
  } // `Math.asinh` method
  // https://tc39.es/ecma262/#sec-math.asinh
  // Tor Browser bug: Math.asinh(0) -> -0


  _export({
    target: 'Math',
    stat: true,
    forced: !($asinh && 1 / $asinh(0) > 0)
  }, {
    asinh: asinh
  });

  var $atanh = Math.atanh;
  var log$4 = Math.log; // `Math.atanh` method
  // https://tc39.es/ecma262/#sec-math.atanh
  // Tor Browser bug: Math.atanh(-0) -> 0

  _export({
    target: 'Math',
    stat: true,
    forced: !($atanh && 1 / $atanh(-0) < 0)
  }, {
    atanh: function atanh(x) {
      return (x = +x) == 0 ? x : log$4((1 + x) / (1 - x)) / 2;
    }
  });

  // `Math.sign` method implementation
  // https://tc39.es/ecma262/#sec-math.sign
  // eslint-disable-next-line es/no-math-sign -- safe
  var mathSign = Math.sign || function sign(x) {
    // eslint-disable-next-line no-self-compare -- NaN check
    return (x = +x) == 0 || x != x ? x : x < 0 ? -1 : 1;
  };

  var abs$7 = Math.abs;
  var pow$4 = Math.pow; // `Math.cbrt` method
  // https://tc39.es/ecma262/#sec-math.cbrt

  _export({
    target: 'Math',
    stat: true
  }, {
    cbrt: function cbrt(x) {
      return mathSign(x = +x) * pow$4(abs$7(x), 1 / 3);
    }
  });

  var floor$8 = Math.floor;
  var log$3 = Math.log;
  var LOG2E = Math.LOG2E; // `Math.clz32` method
  // https://tc39.es/ecma262/#sec-math.clz32

  _export({
    target: 'Math',
    stat: true
  }, {
    clz32: function clz32(x) {
      return (x >>>= 0) ? 31 - floor$8(log$3(x + 0.5) * LOG2E) : 32;
    }
  });

  // eslint-disable-next-line es/no-math-expm1 -- safe
  var $expm1 = Math.expm1;
  var exp$2 = Math.exp; // `Math.expm1` method implementation
  // https://tc39.es/ecma262/#sec-math.expm1

  var mathExpm1 = !$expm1 // Old FF bug
  || $expm1(10) > 22025.465794806719 || $expm1(10) < 22025.4657948067165168 // Tor Browser bug
  || $expm1(-2e-17) != -2e-17 ? function expm1(x) {
    return (x = +x) == 0 ? x : x > -1e-6 && x < 1e-6 ? x + x * x / 2 : exp$2(x) - 1;
  } : $expm1;

  var $cosh = Math.cosh;
  var abs$6 = Math.abs;
  var E$2 = Math.E; // `Math.cosh` method
  // https://tc39.es/ecma262/#sec-math.cosh

  _export({
    target: 'Math',
    stat: true,
    forced: !$cosh || $cosh(710) === Infinity
  }, {
    cosh: function cosh(x) {
      var t = mathExpm1(abs$6(x) - 1) + 1;
      return (t + 1 / (t * E$2 * E$2)) * (E$2 / 2);
    }
  });

  // https://tc39.es/ecma262/#sec-math.expm1
  // eslint-disable-next-line es/no-math-expm1 -- required for testing

  _export({
    target: 'Math',
    stat: true,
    forced: mathExpm1 != Math.expm1
  }, {
    expm1: mathExpm1
  });

  var abs$5 = Math.abs;
  var pow$3 = Math.pow;
  var EPSILON = pow$3(2, -52);
  var EPSILON32 = pow$3(2, -23);
  var MAX32 = pow$3(2, 127) * (2 - EPSILON32);
  var MIN32 = pow$3(2, -126);

  var roundTiesToEven = function roundTiesToEven(n) {
    return n + 1 / EPSILON - 1 / EPSILON;
  }; // `Math.fround` method implementation
  // https://tc39.es/ecma262/#sec-math.fround
  // eslint-disable-next-line es/no-math-fround -- safe


  var mathFround = Math.fround || function fround(x) {
    var $abs = abs$5(x);
    var $sign = mathSign(x);
    var a, result;
    if ($abs < MIN32) return $sign * roundTiesToEven($abs / MIN32 / EPSILON32) * MIN32 * EPSILON32;
    a = (1 + EPSILON32 / EPSILON) * $abs;
    result = a - (a - $abs); // eslint-disable-next-line no-self-compare -- NaN check

    if (result > MAX32 || result != result) return $sign * Infinity;
    return $sign * result;
  };

  // https://tc39.es/ecma262/#sec-math.fround

  _export({
    target: 'Math',
    stat: true
  }, {
    fround: mathFround
  });

  var $hypot = Math.hypot;
  var abs$4 = Math.abs;
  var sqrt$1 = Math.sqrt; // Chrome 77 bug
  // https://bugs.chromium.org/p/v8/issues/detail?id=9546

  var BUGGY = !!$hypot && $hypot(Infinity, NaN) !== Infinity; // `Math.hypot` method
  // https://tc39.es/ecma262/#sec-math.hypot

  _export({
    target: 'Math',
    stat: true,
    forced: BUGGY
  }, {
    // eslint-disable-next-line no-unused-vars -- required for `.length`
    hypot: function hypot(value1, value2) {
      var sum = 0;
      var i = 0;
      var aLen = arguments.length;
      var larg = 0;
      var arg, div;

      while (i < aLen) {
        arg = abs$4(arguments[i++]);

        if (larg < arg) {
          div = larg / arg;
          sum = sum * div * div + 1;
          larg = arg;
        } else if (arg > 0) {
          div = arg / larg;
          sum += div * div;
        } else sum += arg;
      }

      return larg === Infinity ? Infinity : larg * sqrt$1(sum);
    }
  });

  var $imul = Math.imul;
  var FORCED$f = fails(function () {
    return $imul(0xFFFFFFFF, 5) != -5 || $imul.length != 2;
  }); // `Math.imul` method
  // https://tc39.es/ecma262/#sec-math.imul
  // some WebKit versions fails with big numbers, some has wrong arity

  _export({
    target: 'Math',
    stat: true,
    forced: FORCED$f
  }, {
    imul: function imul(x, y) {
      var UINT16 = 0xFFFF;
      var xn = +x;
      var yn = +y;
      var xl = UINT16 & xn;
      var yl = UINT16 & yn;
      return 0 | xl * yl + ((UINT16 & xn >>> 16) * yl + xl * (UINT16 & yn >>> 16) << 16 >>> 0);
    }
  });

  var log$2 = Math.log;
  var LOG10E = Math.LOG10E; // eslint-disable-next-line es/no-math-log10 -- safe

  var mathLog10 = Math.log10 || function log10(x) {
    return log$2(x) * LOG10E;
  };

  // https://tc39.es/ecma262/#sec-math.log10

  _export({
    target: 'Math',
    stat: true
  }, {
    log10: mathLog10
  });

  // https://tc39.es/ecma262/#sec-math.log1p

  _export({
    target: 'Math',
    stat: true
  }, {
    log1p: mathLog1p
  });

  var log$1 = Math.log;
  var LN2 = Math.LN2; // `Math.log2` method
  // https://tc39.es/ecma262/#sec-math.log2

  _export({
    target: 'Math',
    stat: true
  }, {
    log2: function log2(x) {
      return log$1(x) / LN2;
    }
  });

  // https://tc39.es/ecma262/#sec-math.sign

  _export({
    target: 'Math',
    stat: true
  }, {
    sign: mathSign
  });

  var abs$3 = Math.abs;
  var exp$1 = Math.exp;
  var E$1 = Math.E;
  var FORCED$e = fails(function () {
    // eslint-disable-next-line es/no-math-sinh -- required for testing
    return Math.sinh(-2e-17) != -2e-17;
  }); // `Math.sinh` method
  // https://tc39.es/ecma262/#sec-math.sinh
  // V8 near Chromium 38 has a problem with very small numbers

  _export({
    target: 'Math',
    stat: true,
    forced: FORCED$e
  }, {
    sinh: function sinh(x) {
      return abs$3(x = +x) < 1 ? (mathExpm1(x) - mathExpm1(-x)) / 2 : (exp$1(x - 1) - exp$1(-x - 1)) * (E$1 / 2);
    }
  });

  var exp = Math.exp; // `Math.tanh` method
  // https://tc39.es/ecma262/#sec-math.tanh

  _export({
    target: 'Math',
    stat: true
  }, {
    tanh: function tanh(x) {
      var a = mathExpm1(x = +x);
      var b = mathExpm1(-x);
      return a == Infinity ? 1 : b == Infinity ? -1 : (a - b) / (exp(x) + exp(-x));
    }
  });

  // https://tc39.es/ecma262/#sec-math-@@tostringtag

  setToStringTag(Math, 'Math', true);

  var ceil$1 = Math.ceil;
  var floor$7 = Math.floor; // `Math.trunc` method
  // https://tc39.es/ecma262/#sec-math.trunc

  _export({
    target: 'Math',
    stat: true
  }, {
    trunc: function trunc(it) {
      return (it > 0 ? floor$7 : ceil$1)(it);
    }
  });

  // https://tc39.es/ecma262/#sec-thisnumbervalue

  var thisNumberValue = functionUncurryThis(1.0.valueOf);

  // a string of all valid unicode whitespaces
  var whitespaces = "\t\n\x0B\f\r \xA0\u1680\u2000\u2001\u2002" + "\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200A\u202F\u205F\u3000\u2028\u2029\uFEFF";

  var replace$7 = functionUncurryThis(''.replace);
  var whitespace = '[' + whitespaces + ']';
  var ltrim = RegExp('^' + whitespace + whitespace + '*');
  var rtrim = RegExp(whitespace + whitespace + '*$'); // `String.prototype.{ trim, trimStart, trimEnd, trimLeft, trimRight }` methods implementation

  var createMethod$3 = function createMethod(TYPE) {
    return function ($this) {
      var string = toString(requireObjectCoercible($this));
      if (TYPE & 1) string = replace$7(string, ltrim, '');
      if (TYPE & 2) string = replace$7(string, rtrim, '');
      return string;
    };
  };

  var stringTrim = {
    // `String.prototype.{ trimLeft, trimStart }` methods
    // https://tc39.es/ecma262/#sec-string.prototype.trimstart
    start: createMethod$3(1),
    // `String.prototype.{ trimRight, trimEnd }` methods
    // https://tc39.es/ecma262/#sec-string.prototype.trimend
    end: createMethod$3(2),
    // `String.prototype.trim` method
    // https://tc39.es/ecma262/#sec-string.prototype.trim
    trim: createMethod$3(3)
  };

  var getOwnPropertyNames$2 = objectGetOwnPropertyNames.f;
  var getOwnPropertyDescriptor$6 = objectGetOwnPropertyDescriptor.f;
  var defineProperty$8 = objectDefineProperty.f;
  var trim$2 = stringTrim.trim;
  var NUMBER = 'Number';
  var NativeNumber = global$1[NUMBER];
  var NumberPrototype = NativeNumber.prototype;
  var TypeError$e = global$1.TypeError;
  var arraySlice = functionUncurryThis(''.slice);
  var charCodeAt$2 = functionUncurryThis(''.charCodeAt); // `ToNumeric` abstract operation
  // https://tc39.es/ecma262/#sec-tonumeric

  var toNumeric = function toNumeric(value) {
    var primValue = toPrimitive(value, 'number');
    return typeof primValue == 'bigint' ? primValue : toNumber(primValue);
  }; // `ToNumber` abstract operation
  // https://tc39.es/ecma262/#sec-tonumber


  var toNumber = function toNumber(argument) {
    var it = toPrimitive(argument, 'number');
    var first, third, radix, maxCode, digits, length, index, code;
    if (isSymbol(it)) throw TypeError$e('Cannot convert a Symbol value to a number');

    if (typeof it == 'string' && it.length > 2) {
      it = trim$2(it);
      first = charCodeAt$2(it, 0);

      if (first === 43 || first === 45) {
        third = charCodeAt$2(it, 2);
        if (third === 88 || third === 120) return NaN; // Number('+0x1') should be NaN, old V8 fix
      } else if (first === 48) {
        switch (charCodeAt$2(it, 1)) {
          case 66:
          case 98:
            radix = 2;
            maxCode = 49;
            break;
          // fast equal of /^0b[01]+$/i

          case 79:
          case 111:
            radix = 8;
            maxCode = 55;
            break;
          // fast equal of /^0o[0-7]+$/i

          default:
            return +it;
        }

        digits = arraySlice(it, 2);
        length = digits.length;

        for (index = 0; index < length; index++) {
          code = charCodeAt$2(digits, index); // parseInt parses a string to a first unavailable symbol
          // but ToNumber should return NaN if a string contains unavailable symbols

          if (code < 48 || code > maxCode) return NaN;
        }

        return parseInt(digits, radix);
      }
    }

    return +it;
  }; // `Number` constructor
  // https://tc39.es/ecma262/#sec-number-constructor


  if (isForced_1(NUMBER, !NativeNumber(' 0o1') || !NativeNumber('0b1') || NativeNumber('+0x1'))) {
    var NumberWrapper = function Number(value) {
      var n = arguments.length < 1 ? 0 : NativeNumber(toNumeric(value));
      var dummy = this; // check on 1..constructor(foo) case

      return objectIsPrototypeOf(NumberPrototype, dummy) && fails(function () {
        thisNumberValue(dummy);
      }) ? inheritIfRequired(Object(n), dummy, NumberWrapper) : n;
    };

    for (var keys$1 = descriptors ? getOwnPropertyNames$2(NativeNumber) : ( // ES3:
    'MAX_VALUE,MIN_VALUE,NaN,NEGATIVE_INFINITY,POSITIVE_INFINITY,' + // ES2015 (in case, if modules with ES2015 Number statics required before):
    'EPSILON,MAX_SAFE_INTEGER,MIN_SAFE_INTEGER,isFinite,isInteger,isNaN,isSafeInteger,parseFloat,parseInt,' + // ESNext
    'fromString,range').split(','), j = 0, key$2; keys$1.length > j; j++) {
      if (hasOwnProperty_1(NativeNumber, key$2 = keys$1[j]) && !hasOwnProperty_1(NumberWrapper, key$2)) {
        defineProperty$8(NumberWrapper, key$2, getOwnPropertyDescriptor$6(NativeNumber, key$2));
      }
    }

    NumberWrapper.prototype = NumberPrototype;
    NumberPrototype.constructor = NumberWrapper;
    redefine(global$1, NUMBER, NumberWrapper);
  }

  // https://tc39.es/ecma262/#sec-number.epsilon

  _export({
    target: 'Number',
    stat: true
  }, {
    EPSILON: Math.pow(2, -52)
  });

  var globalIsFinite = global$1.isFinite; // `Number.isFinite` method
  // https://tc39.es/ecma262/#sec-number.isfinite
  // eslint-disable-next-line es/no-number-isfinite -- safe

  var numberIsFinite = Number.isFinite || function isFinite(it) {
    return typeof it == 'number' && globalIsFinite(it);
  };

  // https://tc39.es/ecma262/#sec-number.isfinite

  _export({
    target: 'Number',
    stat: true
  }, {
    isFinite: numberIsFinite
  });

  var floor$6 = Math.floor; // `IsIntegralNumber` abstract operation
  // https://tc39.es/ecma262/#sec-isintegralnumber
  // eslint-disable-next-line es/no-number-isinteger -- safe

  var isIntegralNumber = Number.isInteger || function isInteger(it) {
    return !isObject(it) && isFinite(it) && floor$6(it) === it;
  };

  // https://tc39.es/ecma262/#sec-number.isinteger

  _export({
    target: 'Number',
    stat: true
  }, {
    isInteger: isIntegralNumber
  });

  // https://tc39.es/ecma262/#sec-number.isnan

  _export({
    target: 'Number',
    stat: true
  }, {
    isNaN: function isNaN(number) {
      // eslint-disable-next-line no-self-compare -- NaN check
      return number != number;
    }
  });

  var abs$2 = Math.abs; // `Number.isSafeInteger` method
  // https://tc39.es/ecma262/#sec-number.issafeinteger

  _export({
    target: 'Number',
    stat: true
  }, {
    isSafeInteger: function isSafeInteger(number) {
      return isIntegralNumber(number) && abs$2(number) <= 0x1FFFFFFFFFFFFF;
    }
  });

  // https://tc39.es/ecma262/#sec-number.max_safe_integer

  _export({
    target: 'Number',
    stat: true
  }, {
    MAX_SAFE_INTEGER: 0x1FFFFFFFFFFFFF
  });

  // https://tc39.es/ecma262/#sec-number.min_safe_integer

  _export({
    target: 'Number',
    stat: true
  }, {
    MIN_SAFE_INTEGER: -0x1FFFFFFFFFFFFF
  });

  var trim$1 = stringTrim.trim;
  var charAt$9 = functionUncurryThis(''.charAt);
  var n$ParseFloat = global$1.parseFloat;
  var _Symbol$1 = global$1.Symbol;
  var ITERATOR$5 = _Symbol$1 && _Symbol$1.iterator;
  var FORCED$d = 1 / n$ParseFloat(whitespaces + '-0') !== -Infinity // MS Edge 18- broken with boxed symbols
  || ITERATOR$5 && !fails(function () {
    n$ParseFloat(Object(ITERATOR$5));
  }); // `parseFloat` method
  // https://tc39.es/ecma262/#sec-parsefloat-string

  var numberParseFloat = FORCED$d ? function parseFloat(string) {
    var trimmedString = trim$1(toString(string));
    var result = n$ParseFloat(trimmedString);
    return result === 0 && charAt$9(trimmedString, 0) == '-' ? -0 : result;
  } : n$ParseFloat;

  // https://tc39.es/ecma262/#sec-number.parseFloat
  // eslint-disable-next-line es/no-number-parsefloat -- required for testing

  _export({
    target: 'Number',
    stat: true,
    forced: Number.parseFloat != numberParseFloat
  }, {
    parseFloat: numberParseFloat
  });

  var trim = stringTrim.trim;
  var $parseInt = global$1.parseInt;
  var _Symbol = global$1.Symbol;
  var ITERATOR$4 = _Symbol && _Symbol.iterator;
  var hex$1 = /^[+-]?0x/i;
  var exec$4 = functionUncurryThis(hex$1.exec);
  var FORCED$c = $parseInt(whitespaces + '08') !== 8 || $parseInt(whitespaces + '0x16') !== 22 // MS Edge 18- broken with boxed symbols
  || ITERATOR$4 && !fails(function () {
    $parseInt(Object(ITERATOR$4));
  }); // `parseInt` method
  // https://tc39.es/ecma262/#sec-parseint-string-radix

  var numberParseInt = FORCED$c ? function parseInt(string, radix) {
    var S = trim(toString(string));
    return $parseInt(S, radix >>> 0 || (exec$4(hex$1, S) ? 16 : 10));
  } : $parseInt;

  // https://tc39.es/ecma262/#sec-number.parseint
  // eslint-disable-next-line es/no-number-parseint -- required for testing

  _export({
    target: 'Number',
    stat: true,
    forced: Number.parseInt != numberParseInt
  }, {
    parseInt: numberParseInt
  });

  var RangeError$8 = global$1.RangeError; // `String.prototype.repeat` method implementation
  // https://tc39.es/ecma262/#sec-string.prototype.repeat

  var stringRepeat = function repeat(count) {
    var str = toString(requireObjectCoercible(this));
    var result = '';
    var n = toIntegerOrInfinity(count);
    if (n < 0 || n == Infinity) throw RangeError$8('Wrong number of repetitions');

    for (; n > 0; (n >>>= 1) && (str += str)) {
      if (n & 1) result += str;
    }

    return result;
  };

  var RangeError$7 = global$1.RangeError;
  var String$3 = global$1.String;
  var isFinite$1 = global$1.isFinite;
  var abs$1 = Math.abs;
  var floor$5 = Math.floor;
  var pow$2 = Math.pow;
  var round$1 = Math.round;
  var un$ToExponential = functionUncurryThis(1.0.toExponential);
  var repeat$2 = functionUncurryThis(stringRepeat);
  var stringSlice$c = functionUncurryThis(''.slice); // Edge 17-

  var ROUNDS_PROPERLY = un$ToExponential(-6.9e-11, 4) === '-6.9000e-11' // IE11- && Edge 14-
  && un$ToExponential(1.255, 2) === '1.25e+0' // FF86-, V8 ~ Chrome 49-50
  && un$ToExponential(12345, 3) === '1.235e+4' // FF86-, V8 ~ Chrome 49-50
  && un$ToExponential(25, 0) === '3e+1'; // IE8-

  var THROWS_ON_INFINITY_FRACTION = fails(function () {
    un$ToExponential(1, Infinity);
  }) && fails(function () {
    un$ToExponential(1, -Infinity);
  }); // Safari <11 && FF <50

  var PROPER_NON_FINITE_THIS_CHECK = !fails(function () {
    un$ToExponential(Infinity, Infinity);
  }) && !fails(function () {
    un$ToExponential(NaN, Infinity);
  });
  var FORCED$b = !ROUNDS_PROPERLY || !THROWS_ON_INFINITY_FRACTION || !PROPER_NON_FINITE_THIS_CHECK; // `Number.prototype.toExponential` method
  // https://tc39.es/ecma262/#sec-number.prototype.toexponential

  _export({
    target: 'Number',
    proto: true,
    forced: FORCED$b
  }, {
    toExponential: function toExponential(fractionDigits) {
      var x = thisNumberValue(this);
      if (fractionDigits === undefined) return un$ToExponential(x);
      var f = toIntegerOrInfinity(fractionDigits);
      if (!isFinite$1(x)) return String$3(x); // TODO: ES2018 increased the maximum number of fraction digits to 100, need to improve the implementation

      if (f < 0 || f > 20) throw RangeError$7('Incorrect fraction digits');
      if (ROUNDS_PROPERLY) return un$ToExponential(x, f);
      var s = '';
      var m = '';
      var e = 0;
      var c = '';
      var d = '';

      if (x < 0) {
        s = '-';
        x = -x;
      }

      if (x === 0) {
        e = 0;
        m = repeat$2('0', f + 1);
      } else {
        // this block is based on https://gist.github.com/SheetJSDev/1100ad56b9f856c95299ed0e068eea08
        // TODO: improve accuracy with big fraction digits
        var l = mathLog10(x);
        e = floor$5(l);
        var n = 0;
        var w = pow$2(10, e - f);
        n = round$1(x / w);

        if (2 * x >= (2 * n + 1) * w) {
          n += 1;
        }

        if (n >= pow$2(10, f + 1)) {
          n /= 10;
          e += 1;
        }

        m = String$3(n);
      }

      if (f !== 0) {
        m = stringSlice$c(m, 0, 1) + '.' + stringSlice$c(m, 1);
      }

      if (e === 0) {
        c = '+';
        d = '0';
      } else {
        c = e > 0 ? '+' : '-';
        d = String$3(abs$1(e));
      }

      m += 'e' + c + d;
      return s + m;
    }
  });

  var RangeError$6 = global$1.RangeError;
  var String$2 = global$1.String;
  var floor$4 = Math.floor;
  var repeat$1 = functionUncurryThis(stringRepeat);
  var stringSlice$b = functionUncurryThis(''.slice);
  var un$ToFixed = functionUncurryThis(1.0.toFixed);

  var pow$1 = function pow(x, n, acc) {
    return n === 0 ? acc : n % 2 === 1 ? pow(x, n - 1, acc * x) : pow(x * x, n / 2, acc);
  };

  var log = function log(x) {
    var n = 0;
    var x2 = x;

    while (x2 >= 4096) {
      n += 12;
      x2 /= 4096;
    }

    while (x2 >= 2) {
      n += 1;
      x2 /= 2;
    }

    return n;
  };

  var multiply = function multiply(data, n, c) {
    var index = -1;
    var c2 = c;

    while (++index < 6) {
      c2 += n * data[index];
      data[index] = c2 % 1e7;
      c2 = floor$4(c2 / 1e7);
    }
  };

  var divide = function divide(data, n) {
    var index = 6;
    var c = 0;

    while (--index >= 0) {
      c += data[index];
      data[index] = floor$4(c / n);
      c = c % n * 1e7;
    }
  };

  var dataToString = function dataToString(data) {
    var index = 6;
    var s = '';

    while (--index >= 0) {
      if (s !== '' || index === 0 || data[index] !== 0) {
        var t = String$2(data[index]);
        s = s === '' ? t : s + repeat$1('0', 7 - t.length) + t;
      }
    }

    return s;
  };

  var FORCED$a = fails(function () {
    return un$ToFixed(0.00008, 3) !== '0.000' || un$ToFixed(0.9, 0) !== '1' || un$ToFixed(1.255, 2) !== '1.25' || un$ToFixed(1000000000000000128.0, 0) !== '1000000000000000128';
  }) || !fails(function () {
    // V8 ~ Android 4.3-
    un$ToFixed({});
  }); // `Number.prototype.toFixed` method
  // https://tc39.es/ecma262/#sec-number.prototype.tofixed

  _export({
    target: 'Number',
    proto: true,
    forced: FORCED$a
  }, {
    toFixed: function toFixed(fractionDigits) {
      var number = thisNumberValue(this);
      var fractDigits = toIntegerOrInfinity(fractionDigits);
      var data = [0, 0, 0, 0, 0, 0];
      var sign = '';
      var result = '0';
      var e, z, j, k; // TODO: ES2018 increased the maximum number of fraction digits to 100, need to improve the implementation

      if (fractDigits < 0 || fractDigits > 20) throw RangeError$6('Incorrect fraction digits'); // eslint-disable-next-line no-self-compare -- NaN check

      if (number != number) return 'NaN';
      if (number <= -1e21 || number >= 1e21) return String$2(number);

      if (number < 0) {
        sign = '-';
        number = -number;
      }

      if (number > 1e-21) {
        e = log(number * pow$1(2, 69, 1)) - 69;
        z = e < 0 ? number * pow$1(2, -e, 1) : number / pow$1(2, e, 1);
        z *= 0x10000000000000;
        e = 52 - e;

        if (e > 0) {
          multiply(data, 0, z);
          j = fractDigits;

          while (j >= 7) {
            multiply(data, 1e7, 0);
            j -= 7;
          }

          multiply(data, pow$1(10, j, 1), 0);
          j = e - 1;

          while (j >= 23) {
            divide(data, 1 << 23);
            j -= 23;
          }

          divide(data, 1 << j);
          multiply(data, 1, 1);
          divide(data, 2);
          result = dataToString(data);
        } else {
          multiply(data, 0, z);
          multiply(data, 1 << -e, 0);
          result = dataToString(data) + repeat$1('0', fractDigits);
        }
      }

      if (fractDigits > 0) {
        k = result.length;
        result = sign + (k <= fractDigits ? '0.' + repeat$1('0', fractDigits - k) + result : stringSlice$b(result, 0, k - fractDigits) + '.' + stringSlice$b(result, k - fractDigits));
      } else {
        result = sign + result;
      }

      return result;
    }
  });

  var $assign = Object.assign; // eslint-disable-next-line es/no-object-defineproperty -- required for testing

  var defineProperty$7 = Object.defineProperty;
  var concat$2 = functionUncurryThis([].concat); // `Object.assign` method
  // https://tc39.es/ecma262/#sec-object.assign

  var objectAssign = !$assign || fails(function () {
    // should have correct order of operations (Edge bug)
    if (descriptors && $assign({
      b: 1
    }, $assign(defineProperty$7({}, 'a', {
      enumerable: true,
      get: function get() {
        defineProperty$7(this, 'b', {
          value: 3,
          enumerable: false
        });
      }
    }), {
      b: 2
    })).b !== 1) return true; // should work with symbols and should have deterministic property order (V8 bug)

    var A = {};
    var B = {}; // eslint-disable-next-line es/no-symbol -- safe

    var symbol = Symbol();
    var alphabet = 'abcdefghijklmnopqrst';
    A[symbol] = 7;
    alphabet.split('').forEach(function (chr) {
      B[chr] = chr;
    });
    return $assign({}, A)[symbol] != 7 || objectKeys$1($assign({}, B)).join('') != alphabet;
  }) ? function assign(target, source) {
    // eslint-disable-line no-unused-vars -- required for `.length`
    var T = toObject(target);
    var argumentsLength = arguments.length;
    var index = 1;
    var getOwnPropertySymbols = objectGetOwnPropertySymbols.f;
    var propertyIsEnumerable = objectPropertyIsEnumerable.f;

    while (argumentsLength > index) {
      var S = indexedObject(arguments[index++]);
      var keys = getOwnPropertySymbols ? concat$2(objectKeys$1(S), getOwnPropertySymbols(S)) : objectKeys$1(S);
      var length = keys.length;
      var j = 0;
      var key;

      while (length > j) {
        key = keys[j++];
        if (!descriptors || functionCall(propertyIsEnumerable, S, key)) T[key] = S[key];
      }
    }

    return T;
  } : $assign;

  // https://tc39.es/ecma262/#sec-object.assign
  // eslint-disable-next-line es/no-object-assign -- required for testing

  _export({
    target: 'Object',
    stat: true,
    forced: Object.assign !== objectAssign
  }, {
    assign: objectAssign
  });

  var objectPrototypeAccessorsForced = !fails(function () {
    // This feature detection crashes old WebKit
    // https://github.com/zloirock/core-js/issues/232
    if (engineWebkitVersion && engineWebkitVersion < 535) return;
    var key = Math.random(); // In FF throws only define methods
    // eslint-disable-next-line no-undef, no-useless-call -- required for testing

    __defineSetter__.call(null, key, function () {
      /* empty */
    });

    delete global$1[key];
  });

  // https://tc39.es/ecma262/#sec-object.prototype.__defineGetter__


  if (descriptors) {
    _export({
      target: 'Object',
      proto: true,
      forced: objectPrototypeAccessorsForced
    }, {
      __defineGetter__: function __defineGetter__(P, getter) {
        objectDefineProperty.f(toObject(this), P, {
          get: aCallable(getter),
          enumerable: true,
          configurable: true
        });
      }
    });
  }

  var defineProperties$2 = objectDefineProperties.f; // `Object.defineProperties` method
  // https://tc39.es/ecma262/#sec-object.defineproperties
  // eslint-disable-next-line es/no-object-defineproperties -- safe

  _export({
    target: 'Object',
    stat: true,
    forced: Object.defineProperties !== defineProperties$2,
    sham: !descriptors
  }, {
    defineProperties: defineProperties$2
  });

  var defineProperty$6 = objectDefineProperty.f; // `Object.defineProperty` method
  // https://tc39.es/ecma262/#sec-object.defineproperty
  // eslint-disable-next-line es/no-object-defineproperty -- safe

  _export({
    target: 'Object',
    stat: true,
    forced: Object.defineProperty !== defineProperty$6,
    sham: !descriptors
  }, {
    defineProperty: defineProperty$6
  });

  // https://tc39.es/ecma262/#sec-object.prototype.__defineSetter__


  if (descriptors) {
    _export({
      target: 'Object',
      proto: true,
      forced: objectPrototypeAccessorsForced
    }, {
      __defineSetter__: function __defineSetter__(P, setter) {
        objectDefineProperty.f(toObject(this), P, {
          set: aCallable(setter),
          enumerable: true,
          configurable: true
        });
      }
    });
  }

  var $propertyIsEnumerable = objectPropertyIsEnumerable.f;
  var propertyIsEnumerable = functionUncurryThis($propertyIsEnumerable);
  var push$8 = functionUncurryThis([].push); // `Object.{ entries, values }` methods implementation

  var createMethod$2 = function createMethod(TO_ENTRIES) {
    return function (it) {
      var O = toIndexedObject(it);
      var keys = objectKeys$1(O);
      var length = keys.length;
      var i = 0;
      var result = [];
      var key;

      while (length > i) {
        key = keys[i++];

        if (!descriptors || propertyIsEnumerable(O, key)) {
          push$8(result, TO_ENTRIES ? [key, O[key]] : O[key]);
        }
      }

      return result;
    };
  };

  var objectToArray = {
    // `Object.entries` method
    // https://tc39.es/ecma262/#sec-object.entries
    entries: createMethod$2(true),
    // `Object.values` method
    // https://tc39.es/ecma262/#sec-object.values
    values: createMethod$2(false)
  };

  var $entries = objectToArray.entries; // `Object.entries` method
  // https://tc39.es/ecma262/#sec-object.entries

  _export({
    target: 'Object',
    stat: true
  }, {
    entries: function entries(O) {
      return $entries(O);
    }
  });

  var onFreeze$2 = internalMetadata.onFreeze; // eslint-disable-next-line es/no-object-freeze -- safe

  var $freeze = Object.freeze;
  var FAILS_ON_PRIMITIVES$8 = fails(function () {
    $freeze(1);
  }); // `Object.freeze` method
  // https://tc39.es/ecma262/#sec-object.freeze

  _export({
    target: 'Object',
    stat: true,
    forced: FAILS_ON_PRIMITIVES$8,
    sham: !freezing
  }, {
    freeze: function freeze(it) {
      return $freeze && isObject(it) ? $freeze(onFreeze$2(it)) : it;
    }
  });

  // https://github.com/tc39/proposal-object-from-entries

  _export({
    target: 'Object',
    stat: true
  }, {
    fromEntries: function fromEntries(iterable) {
      var obj = {};
      iterate(iterable, function (k, v) {
        createProperty(obj, k, v);
      }, {
        AS_ENTRIES: true
      });
      return obj;
    }
  });

  var nativeGetOwnPropertyDescriptor = objectGetOwnPropertyDescriptor.f;
  var FAILS_ON_PRIMITIVES$7 = fails(function () {
    nativeGetOwnPropertyDescriptor(1);
  });
  var FORCED$9 = !descriptors || FAILS_ON_PRIMITIVES$7; // `Object.getOwnPropertyDescriptor` method
  // https://tc39.es/ecma262/#sec-object.getownpropertydescriptor

  _export({
    target: 'Object',
    stat: true,
    forced: FORCED$9,
    sham: !descriptors
  }, {
    getOwnPropertyDescriptor: function getOwnPropertyDescriptor(it, key) {
      return nativeGetOwnPropertyDescriptor(toIndexedObject(it), key);
    }
  });

  // https://tc39.es/ecma262/#sec-object.getownpropertydescriptors

  _export({
    target: 'Object',
    stat: true,
    sham: !descriptors
  }, {
    getOwnPropertyDescriptors: function getOwnPropertyDescriptors(object) {
      var O = toIndexedObject(object);
      var getOwnPropertyDescriptor = objectGetOwnPropertyDescriptor.f;
      var keys = ownKeys(O);
      var result = {};
      var index = 0;
      var key, descriptor;

      while (keys.length > index) {
        descriptor = getOwnPropertyDescriptor(O, key = keys[index++]);
        if (descriptor !== undefined) createProperty(result, key, descriptor);
      }

      return result;
    }
  });

  var getOwnPropertyNames$1 = objectGetOwnPropertyNamesExternal.f; // eslint-disable-next-line es/no-object-getownpropertynames -- required for testing

  var FAILS_ON_PRIMITIVES$6 = fails(function () {
    return !Object.getOwnPropertyNames(1);
  }); // `Object.getOwnPropertyNames` method
  // https://tc39.es/ecma262/#sec-object.getownpropertynames

  _export({
    target: 'Object',
    stat: true,
    forced: FAILS_ON_PRIMITIVES$6
  }, {
    getOwnPropertyNames: getOwnPropertyNames$1
  });

  var FAILS_ON_PRIMITIVES$5 = fails(function () {
    objectGetPrototypeOf(1);
  }); // `Object.getPrototypeOf` method
  // https://tc39.es/ecma262/#sec-object.getprototypeof

  _export({
    target: 'Object',
    stat: true,
    forced: FAILS_ON_PRIMITIVES$5,
    sham: !correctPrototypeGetter
  }, {
    getPrototypeOf: function getPrototypeOf(it) {
      return objectGetPrototypeOf(toObject(it));
    }
  });

  // https://github.com/tc39/proposal-accessible-object-hasownproperty

  _export({
    target: 'Object',
    stat: true
  }, {
    hasOwn: hasOwnProperty_1
  });

  // `SameValue` abstract operation
  // https://tc39.es/ecma262/#sec-samevalue
  // eslint-disable-next-line es/no-object-is -- safe
  var sameValue = Object.is || function is(x, y) {
    // eslint-disable-next-line no-self-compare -- NaN check
    return x === y ? x !== 0 || 1 / x === 1 / y : x != x && y != y;
  };

  // https://tc39.es/ecma262/#sec-object.is

  _export({
    target: 'Object',
    stat: true
  }, {
    is: sameValue
  });

  // https://tc39.es/ecma262/#sec-object.isextensible
  // eslint-disable-next-line es/no-object-isextensible -- safe

  _export({
    target: 'Object',
    stat: true,
    forced: Object.isExtensible !== objectIsExtensible
  }, {
    isExtensible: objectIsExtensible
  });

  var $isFrozen = Object.isFrozen;
  var FAILS_ON_PRIMITIVES$4 = fails(function () {
    $isFrozen(1);
  }); // `Object.isFrozen` method
  // https://tc39.es/ecma262/#sec-object.isfrozen

  _export({
    target: 'Object',
    stat: true,
    forced: FAILS_ON_PRIMITIVES$4 || arrayBufferNonExtensible
  }, {
    isFrozen: function isFrozen(it) {
      if (!isObject(it)) return true;
      if (arrayBufferNonExtensible && classofRaw(it) == 'ArrayBuffer') return true;
      return $isFrozen ? $isFrozen(it) : false;
    }
  });

  var $isSealed = Object.isSealed;
  var FAILS_ON_PRIMITIVES$3 = fails(function () {
    $isSealed(1);
  }); // `Object.isSealed` method
  // https://tc39.es/ecma262/#sec-object.issealed

  _export({
    target: 'Object',
    stat: true,
    forced: FAILS_ON_PRIMITIVES$3 || arrayBufferNonExtensible
  }, {
    isSealed: function isSealed(it) {
      if (!isObject(it)) return true;
      if (arrayBufferNonExtensible && classofRaw(it) == 'ArrayBuffer') return true;
      return $isSealed ? $isSealed(it) : false;
    }
  });

  var FAILS_ON_PRIMITIVES$2 = fails(function () {
    objectKeys$1(1);
  }); // `Object.keys` method
  // https://tc39.es/ecma262/#sec-object.keys

  _export({
    target: 'Object',
    stat: true,
    forced: FAILS_ON_PRIMITIVES$2
  }, {
    keys: function keys(it) {
      return objectKeys$1(toObject(it));
    }
  });

  var getOwnPropertyDescriptor$5 = objectGetOwnPropertyDescriptor.f; // `Object.prototype.__lookupGetter__` method
  // https://tc39.es/ecma262/#sec-object.prototype.__lookupGetter__

  if (descriptors) {
    _export({
      target: 'Object',
      proto: true,
      forced: objectPrototypeAccessorsForced
    }, {
      __lookupGetter__: function __lookupGetter__(P) {
        var O = toObject(this);
        var key = toPropertyKey(P);
        var desc;

        do {
          if (desc = getOwnPropertyDescriptor$5(O, key)) return desc.get;
        } while (O = objectGetPrototypeOf(O));
      }
    });
  }

  var getOwnPropertyDescriptor$4 = objectGetOwnPropertyDescriptor.f; // `Object.prototype.__lookupSetter__` method
  // https://tc39.es/ecma262/#sec-object.prototype.__lookupSetter__

  if (descriptors) {
    _export({
      target: 'Object',
      proto: true,
      forced: objectPrototypeAccessorsForced
    }, {
      __lookupSetter__: function __lookupSetter__(P) {
        var O = toObject(this);
        var key = toPropertyKey(P);
        var desc;

        do {
          if (desc = getOwnPropertyDescriptor$4(O, key)) return desc.set;
        } while (O = objectGetPrototypeOf(O));
      }
    });
  }

  var onFreeze$1 = internalMetadata.onFreeze; // eslint-disable-next-line es/no-object-preventextensions -- safe

  var $preventExtensions = Object.preventExtensions;
  var FAILS_ON_PRIMITIVES$1 = fails(function () {
    $preventExtensions(1);
  }); // `Object.preventExtensions` method
  // https://tc39.es/ecma262/#sec-object.preventextensions

  _export({
    target: 'Object',
    stat: true,
    forced: FAILS_ON_PRIMITIVES$1,
    sham: !freezing
  }, {
    preventExtensions: function preventExtensions(it) {
      return $preventExtensions && isObject(it) ? $preventExtensions(onFreeze$1(it)) : it;
    }
  });

  var onFreeze = internalMetadata.onFreeze; // eslint-disable-next-line es/no-object-seal -- safe

  var $seal = Object.seal;
  var FAILS_ON_PRIMITIVES = fails(function () {
    $seal(1);
  }); // `Object.seal` method
  // https://tc39.es/ecma262/#sec-object.seal

  _export({
    target: 'Object',
    stat: true,
    forced: FAILS_ON_PRIMITIVES,
    sham: !freezing
  }, {
    seal: function seal(it) {
      return $seal && isObject(it) ? $seal(onFreeze(it)) : it;
    }
  });

  // https://tc39.es/ecma262/#sec-object.setprototypeof

  _export({
    target: 'Object',
    stat: true
  }, {
    setPrototypeOf: objectSetPrototypeOf
  });

  // https://tc39.es/ecma262/#sec-object.prototype.tostring


  var objectToString = toStringTagSupport ? {}.toString : function toString() {
    return '[object ' + classof(this) + ']';
  };

  // https://tc39.es/ecma262/#sec-object.prototype.tostring

  if (!toStringTagSupport) {
    redefine(Object.prototype, 'toString', objectToString, {
      unsafe: true
    });
  }

  var $values = objectToArray.values; // `Object.values` method
  // https://tc39.es/ecma262/#sec-object.values

  _export({
    target: 'Object',
    stat: true
  }, {
    values: function values(O) {
      return $values(O);
    }
  });

  // https://tc39.es/ecma262/#sec-parsefloat-string

  _export({
    global: true,
    forced: parseFloat != numberParseFloat
  }, {
    parseFloat: numberParseFloat
  });

  // https://tc39.es/ecma262/#sec-parseint-string-radix

  _export({
    global: true,
    forced: parseInt != numberParseInt
  }, {
    parseInt: numberParseInt
  });

  var nativePromiseConstructor = global$1.Promise;

  var TypeError$d = global$1.TypeError; // `Assert: IsConstructor(argument) is true`

  var aConstructor = function aConstructor(argument) {
    if (isConstructor(argument)) return argument;
    throw TypeError$d(tryToString(argument) + ' is not a constructor');
  };

  var SPECIES$2 = wellKnownSymbol('species'); // `SpeciesConstructor` abstract operation
  // https://tc39.es/ecma262/#sec-speciesconstructor

  var speciesConstructor = function speciesConstructor(O, defaultConstructor) {
    var C = anObject(O).constructor;
    var S;
    return C === undefined || (S = anObject(C)[SPECIES$2]) == undefined ? defaultConstructor : aConstructor(S);
  };

  var TypeError$c = global$1.TypeError;

  var validateArgumentsLength = function validateArgumentsLength(passed, required) {
    if (passed < required) throw TypeError$c('Not enough arguments');
    return passed;
  };

  var engineIsIos = /(?:ipad|iphone|ipod).*applewebkit/i.test(engineUserAgent);

  var set$3 = global$1.setImmediate;
  var clear = global$1.clearImmediate;
  var process$4 = global$1.process;
  var Dispatch$1 = global$1.Dispatch;
  var Function$2 = global$1.Function;
  var MessageChannel = global$1.MessageChannel;
  var String$1 = global$1.String;
  var counter = 0;
  var queue$1 = {};
  var ONREADYSTATECHANGE = 'onreadystatechange';
  var location$1, defer, channel, port;

  try {
    // Deno throws a ReferenceError on `location` access without `--location` flag
    location$1 = global$1.location;
  } catch (error) {
    /* empty */
  }

  var run = function run(id) {
    if (hasOwnProperty_1(queue$1, id)) {
      var fn = queue$1[id];
      delete queue$1[id];
      fn();
    }
  };

  var runner = function runner(id) {
    return function () {
      run(id);
    };
  };

  var listener = function listener(event) {
    run(event.data);
  };

  var post = function post(id) {
    // old engines have not location.origin
    global$1.postMessage(String$1(id), location$1.protocol + '//' + location$1.host);
  }; // Node.js 0.9+ & IE10+ has setImmediate, otherwise:


  if (!set$3 || !clear) {
    set$3 = function setImmediate(handler) {
      validateArgumentsLength(arguments.length, 1);
      var fn = isCallable(handler) ? handler : Function$2(handler);
      var args = arraySlice$1(arguments, 1);

      queue$1[++counter] = function () {
        functionApply(fn, undefined, args);
      };

      defer(counter);
      return counter;
    };

    clear = function clearImmediate(id) {
      delete queue$1[id];
    }; // Node.js 0.8-


    if (engineIsNode) {
      defer = function defer(id) {
        process$4.nextTick(runner(id));
      }; // Sphere (JS game engine) Dispatch API

    } else if (Dispatch$1 && Dispatch$1.now) {
      defer = function defer(id) {
        Dispatch$1.now(runner(id));
      }; // Browsers with MessageChannel, includes WebWorkers
      // except iOS - https://github.com/zloirock/core-js/issues/624

    } else if (MessageChannel && !engineIsIos) {
      channel = new MessageChannel();
      port = channel.port2;
      channel.port1.onmessage = listener;
      defer = functionBindContext(port.postMessage, port); // Browsers with postMessage, skip WebWorkers
      // IE8 has postMessage, but it's sync & typeof its postMessage is 'object'
    } else if (global$1.addEventListener && isCallable(global$1.postMessage) && !global$1.importScripts && location$1 && location$1.protocol !== 'file:' && !fails(post)) {
      defer = post;
      global$1.addEventListener('message', listener, false); // IE8-
    } else if (ONREADYSTATECHANGE in documentCreateElement('script')) {
      defer = function defer(id) {
        html.appendChild(documentCreateElement('script'))[ONREADYSTATECHANGE] = function () {
          html.removeChild(this);
          run(id);
        };
      }; // Rest old browsers

    } else {
      defer = function defer(id) {
        setTimeout(runner(id), 0);
      };
    }
  }

  var task$1 = {
    set: set$3,
    clear: clear
  };

  var engineIsIosPebble = /ipad|iphone|ipod/i.test(engineUserAgent) && global$1.Pebble !== undefined;

  var engineIsWebosWebkit = /web0s(?!.*chrome)/i.test(engineUserAgent);

  var getOwnPropertyDescriptor$3 = objectGetOwnPropertyDescriptor.f;
  var macrotask = task$1.set;
  var MutationObserver$1 = global$1.MutationObserver || global$1.WebKitMutationObserver;
  var document$2 = global$1.document;
  var process$3 = global$1.process;
  var Promise$1 = global$1.Promise; // Node.js 11 shows ExperimentalWarning on getting `queueMicrotask`

  var queueMicrotaskDescriptor = getOwnPropertyDescriptor$3(global$1, 'queueMicrotask');
  var queueMicrotask = queueMicrotaskDescriptor && queueMicrotaskDescriptor.value;
  var flush, head, last, notify$1, toggle, node, promise, then; // modern engines have queueMicrotask method

  if (!queueMicrotask) {
    flush = function flush() {
      var parent, fn;
      if (engineIsNode && (parent = process$3.domain)) parent.exit();

      while (head) {
        fn = head.fn;
        head = head.next;

        try {
          fn();
        } catch (error) {
          if (head) notify$1();else last = undefined;
          throw error;
        }
      }

      last = undefined;
      if (parent) parent.enter();
    }; // browsers with MutationObserver, except iOS - https://github.com/zloirock/core-js/issues/339
    // also except WebOS Webkit https://github.com/zloirock/core-js/issues/898


    if (!engineIsIos && !engineIsNode && !engineIsWebosWebkit && MutationObserver$1 && document$2) {
      toggle = true;
      node = document$2.createTextNode('');
      new MutationObserver$1(flush).observe(node, {
        characterData: true
      });

      notify$1 = function notify() {
        node.data = toggle = !toggle;
      }; // environments with maybe non-completely correct, but existent Promise

    } else if (!engineIsIosPebble && Promise$1 && Promise$1.resolve) {
      // Promise.resolve without an argument throws an error in LG WebOS 2
      promise = Promise$1.resolve(undefined); // workaround of WebKit ~ iOS Safari 10.1 bug

      promise.constructor = Promise$1;
      then = functionBindContext(promise.then, promise);

      notify$1 = function notify() {
        then(flush);
      }; // Node.js without promises

    } else if (engineIsNode) {
      notify$1 = function notify() {
        process$3.nextTick(flush);
      }; // for other environments - macrotask based on:
      // - setImmediate
      // - MessageChannel
      // - window.postMessag
      // - onreadystatechange
      // - setTimeout

    } else {
      // strange IE + webpack dev server bug - use .bind(global)
      macrotask = functionBindContext(macrotask, global$1);

      notify$1 = function notify() {
        macrotask(flush);
      };
    }
  }

  var microtask = queueMicrotask || function (fn) {
    var task = {
      fn: fn,
      next: undefined
    };
    if (last) last.next = task;

    if (!head) {
      head = task;
      notify$1();
    }

    last = task;
  };

  var PromiseCapability = function PromiseCapability(C) {
    var resolve, reject;
    this.promise = new C(function ($$resolve, $$reject) {
      if (resolve !== undefined || reject !== undefined) throw TypeError('Bad Promise constructor');
      resolve = $$resolve;
      reject = $$reject;
    });
    this.resolve = aCallable(resolve);
    this.reject = aCallable(reject);
  }; // `NewPromiseCapability` abstract operation
  // https://tc39.es/ecma262/#sec-newpromisecapability


  var f$1 = function f(C) {
    return new PromiseCapability(C);
  };

  var newPromiseCapability$1 = {
    f: f$1
  };

  var promiseResolve = function promiseResolve(C, x) {
    anObject(C);
    if (isObject(x) && x.constructor === C) return x;
    var promiseCapability = newPromiseCapability$1.f(C);
    var resolve = promiseCapability.resolve;
    resolve(x);
    return promiseCapability.promise;
  };

  var hostReportErrors = function hostReportErrors(a, b) {
    var console = global$1.console;

    if (console && console.error) {
      arguments.length == 1 ? console.error(a) : console.error(a, b);
    }
  };

  var perform = function perform(exec) {
    try {
      return {
        error: false,
        value: exec()
      };
    } catch (error) {
      return {
        error: true,
        value: error
      };
    }
  };

  var Queue = function Queue() {
    this.head = null;
    this.tail = null;
  };

  Queue.prototype = {
    add: function add(item) {
      var entry = {
        item: item,
        next: null
      };
      if (this.head) this.tail.next = entry;else this.head = entry;
      this.tail = entry;
    },
    get: function get() {
      var entry = this.head;

      if (entry) {
        this.head = entry.next;
        if (this.tail === entry) this.tail = null;
        return entry.item;
      }
    }
  };
  var queue = Queue;

  var engineIsBrowser = (typeof window === "undefined" ? "undefined" : _typeof(window)) == 'object';

  var task = task$1.set;
  var SPECIES$1 = wellKnownSymbol('species');
  var PROMISE = 'Promise';
  var getInternalState$6 = internalState.getterFor(PROMISE);
  var setInternalState$6 = internalState.set;
  var getInternalPromiseState = internalState.getterFor(PROMISE);
  var NativePromisePrototype = nativePromiseConstructor && nativePromiseConstructor.prototype;
  var PromiseConstructor = nativePromiseConstructor;
  var PromisePrototype = NativePromisePrototype;
  var TypeError$b = global$1.TypeError;
  var document$1 = global$1.document;
  var process$2 = global$1.process;
  var newPromiseCapability = newPromiseCapability$1.f;
  var newGenericPromiseCapability = newPromiseCapability;
  var DISPATCH_EVENT = !!(document$1 && document$1.createEvent && global$1.dispatchEvent);
  var NATIVE_REJECTION_EVENT = isCallable(global$1.PromiseRejectionEvent);
  var UNHANDLED_REJECTION = 'unhandledrejection';
  var REJECTION_HANDLED = 'rejectionhandled';
  var PENDING = 0;
  var FULFILLED = 1;
  var REJECTED = 2;
  var HANDLED = 1;
  var UNHANDLED = 2;
  var SUBCLASSING = false;
  var Internal, OwnPromiseCapability, PromiseWrapper, nativeThen;
  var FORCED$8 = isForced_1(PROMISE, function () {
    var PROMISE_CONSTRUCTOR_SOURCE = inspectSource(PromiseConstructor);
    var GLOBAL_CORE_JS_PROMISE = PROMISE_CONSTRUCTOR_SOURCE !== String(PromiseConstructor); // V8 6.6 (Node 10 and Chrome 66) have a bug with resolving custom thenables
    // https://bugs.chromium.org/p/chromium/issues/detail?id=830565
    // We can't detect it synchronously, so just check versions

    if (!GLOBAL_CORE_JS_PROMISE && engineV8Version === 66) return true; // We need Promise#finally in the pure version for preventing prototype pollution
    // deoptimization and performance degradation
    // https://github.com/zloirock/core-js/issues/679

    if (engineV8Version >= 51 && /native code/.test(PROMISE_CONSTRUCTOR_SOURCE)) return false; // Detect correctness of subclassing with @@species support

    var promise = new PromiseConstructor(function (resolve) {
      resolve(1);
    });

    var FakePromise = function FakePromise(exec) {
      exec(function () {
        /* empty */
      }, function () {
        /* empty */
      });
    };

    var constructor = promise.constructor = {};
    constructor[SPECIES$1] = FakePromise;
    SUBCLASSING = promise.then(function () {
      /* empty */
    }) instanceof FakePromise;
    if (!SUBCLASSING) return true; // Unhandled rejections tracking support, NodeJS Promise without it fails @@species test

    return !GLOBAL_CORE_JS_PROMISE && engineIsBrowser && !NATIVE_REJECTION_EVENT;
  });
  var INCORRECT_ITERATION = FORCED$8 || !checkCorrectnessOfIteration(function (iterable) {
    PromiseConstructor.all(iterable)['catch'](function () {
      /* empty */
    });
  }); // helpers

  var isThenable = function isThenable(it) {
    var then;
    return isObject(it) && isCallable(then = it.then) ? then : false;
  };

  var callReaction = function callReaction(reaction, state) {
    var value = state.value;
    var ok = state.state == FULFILLED;
    var handler = ok ? reaction.ok : reaction.fail;
    var resolve = reaction.resolve;
    var reject = reaction.reject;
    var domain = reaction.domain;
    var result, then, exited;

    try {
      if (handler) {
        if (!ok) {
          if (state.rejection === UNHANDLED) onHandleUnhandled(state);
          state.rejection = HANDLED;
        }

        if (handler === true) result = value;else {
          if (domain) domain.enter();
          result = handler(value); // can throw

          if (domain) {
            domain.exit();
            exited = true;
          }
        }

        if (result === reaction.promise) {
          reject(TypeError$b('Promise-chain cycle'));
        } else if (then = isThenable(result)) {
          functionCall(then, result, resolve, reject);
        } else resolve(result);
      } else reject(value);
    } catch (error) {
      if (domain && !exited) domain.exit();
      reject(error);
    }
  };

  var notify = function notify(state, isReject) {
    if (state.notified) return;
    state.notified = true;
    microtask(function () {
      var reactions = state.reactions;
      var reaction;

      while (reaction = reactions.get()) {
        callReaction(reaction, state);
      }

      state.notified = false;
      if (isReject && !state.rejection) onUnhandled(state);
    });
  };

  var dispatchEvent$1 = function dispatchEvent(name, promise, reason) {
    var event, handler;

    if (DISPATCH_EVENT) {
      event = document$1.createEvent('Event');
      event.promise = promise;
      event.reason = reason;
      event.initEvent(name, false, true);
      global$1.dispatchEvent(event);
    } else event = {
      promise: promise,
      reason: reason
    };

    if (!NATIVE_REJECTION_EVENT && (handler = global$1['on' + name])) handler(event);else if (name === UNHANDLED_REJECTION) hostReportErrors('Unhandled promise rejection', reason);
  };

  var onUnhandled = function onUnhandled(state) {
    functionCall(task, global$1, function () {
      var promise = state.facade;
      var value = state.value;
      var IS_UNHANDLED = isUnhandled(state);
      var result;

      if (IS_UNHANDLED) {
        result = perform(function () {
          if (engineIsNode) {
            process$2.emit('unhandledRejection', value, promise);
          } else dispatchEvent$1(UNHANDLED_REJECTION, promise, value);
        }); // Browsers should not trigger `rejectionHandled` event if it was handled here, NodeJS - should

        state.rejection = engineIsNode || isUnhandled(state) ? UNHANDLED : HANDLED;
        if (result.error) throw result.value;
      }
    });
  };

  var isUnhandled = function isUnhandled(state) {
    return state.rejection !== HANDLED && !state.parent;
  };

  var onHandleUnhandled = function onHandleUnhandled(state) {
    functionCall(task, global$1, function () {
      var promise = state.facade;

      if (engineIsNode) {
        process$2.emit('rejectionHandled', promise);
      } else dispatchEvent$1(REJECTION_HANDLED, promise, state.value);
    });
  };

  var bind = function bind(fn, state, unwrap) {
    return function (value) {
      fn(state, value, unwrap);
    };
  };

  var internalReject = function internalReject(state, value, unwrap) {
    if (state.done) return;
    state.done = true;
    if (unwrap) state = unwrap;
    state.value = value;
    state.state = REJECTED;
    notify(state, true);
  };

  var internalResolve = function internalResolve(state, value, unwrap) {
    if (state.done) return;
    state.done = true;
    if (unwrap) state = unwrap;

    try {
      if (state.facade === value) throw TypeError$b("Promise can't be resolved itself");
      var then = isThenable(value);

      if (then) {
        microtask(function () {
          var wrapper = {
            done: false
          };

          try {
            functionCall(then, value, bind(internalResolve, wrapper, state), bind(internalReject, wrapper, state));
          } catch (error) {
            internalReject(wrapper, error, state);
          }
        });
      } else {
        state.value = value;
        state.state = FULFILLED;
        notify(state, false);
      }
    } catch (error) {
      internalReject({
        done: false
      }, error, state);
    }
  }; // constructor polyfill


  if (FORCED$8) {
    // 25.4.3.1 Promise(executor)
    PromiseConstructor = function Promise(executor) {
      anInstance(this, PromisePrototype);
      aCallable(executor);
      functionCall(Internal, this);
      var state = getInternalState$6(this);

      try {
        executor(bind(internalResolve, state), bind(internalReject, state));
      } catch (error) {
        internalReject(state, error);
      }
    };

    PromisePrototype = PromiseConstructor.prototype; // eslint-disable-next-line no-unused-vars -- required for `.length`

    Internal = function Promise(executor) {
      setInternalState$6(this, {
        type: PROMISE,
        done: false,
        notified: false,
        parent: false,
        reactions: new queue(),
        rejection: false,
        state: PENDING,
        value: undefined
      });
    };

    Internal.prototype = redefineAll(PromisePrototype, {
      // `Promise.prototype.then` method
      // https://tc39.es/ecma262/#sec-promise.prototype.then
      // eslint-disable-next-line unicorn/no-thenable -- safe
      then: function then(onFulfilled, onRejected) {
        var state = getInternalPromiseState(this);
        var reaction = newPromiseCapability(speciesConstructor(this, PromiseConstructor));
        state.parent = true;
        reaction.ok = isCallable(onFulfilled) ? onFulfilled : true;
        reaction.fail = isCallable(onRejected) && onRejected;
        reaction.domain = engineIsNode ? process$2.domain : undefined;
        if (state.state == PENDING) state.reactions.add(reaction);else microtask(function () {
          callReaction(reaction, state);
        });
        return reaction.promise;
      },
      // `Promise.prototype.catch` method
      // https://tc39.es/ecma262/#sec-promise.prototype.catch
      'catch': function _catch(onRejected) {
        return this.then(undefined, onRejected);
      }
    });

    OwnPromiseCapability = function OwnPromiseCapability() {
      var promise = new Internal();
      var state = getInternalState$6(promise);
      this.promise = promise;
      this.resolve = bind(internalResolve, state);
      this.reject = bind(internalReject, state);
    };

    newPromiseCapability$1.f = newPromiseCapability = function newPromiseCapability(C) {
      return C === PromiseConstructor || C === PromiseWrapper ? new OwnPromiseCapability(C) : newGenericPromiseCapability(C);
    };

    if (isCallable(nativePromiseConstructor) && NativePromisePrototype !== Object.prototype) {
      nativeThen = NativePromisePrototype.then;

      if (!SUBCLASSING) {
        // make `Promise#then` return a polyfilled `Promise` for native promise-based APIs
        redefine(NativePromisePrototype, 'then', function then(onFulfilled, onRejected) {
          var that = this;
          return new PromiseConstructor(function (resolve, reject) {
            functionCall(nativeThen, that, resolve, reject);
          }).then(onFulfilled, onRejected); // https://github.com/zloirock/core-js/issues/640
        }, {
          unsafe: true
        }); // makes sure that native promise-based APIs `Promise#catch` properly works with patched `Promise#then`

        redefine(NativePromisePrototype, 'catch', PromisePrototype['catch'], {
          unsafe: true
        });
      } // make `.constructor === Promise` work for native promise-based APIs


      try {
        delete NativePromisePrototype.constructor;
      } catch (error) {
        /* empty */
      } // make `instanceof Promise` work for native promise-based APIs


      if (objectSetPrototypeOf) {
        objectSetPrototypeOf(NativePromisePrototype, PromisePrototype);
      }
    }
  }

  _export({
    global: true,
    wrap: true,
    forced: FORCED$8
  }, {
    Promise: PromiseConstructor
  });
  setToStringTag(PromiseConstructor, PROMISE, false);
  setSpecies(PROMISE);
  PromiseWrapper = getBuiltIn(PROMISE); // statics

  _export({
    target: PROMISE,
    stat: true,
    forced: FORCED$8
  }, {
    // `Promise.reject` method
    // https://tc39.es/ecma262/#sec-promise.reject
    reject: function reject(r) {
      var capability = newPromiseCapability(this);
      functionCall(capability.reject, undefined, r);
      return capability.promise;
    }
  });
  _export({
    target: PROMISE,
    stat: true,
    forced: FORCED$8
  }, {
    // `Promise.resolve` method
    // https://tc39.es/ecma262/#sec-promise.resolve
    resolve: function resolve(x) {
      return promiseResolve(this, x);
    }
  });
  _export({
    target: PROMISE,
    stat: true,
    forced: INCORRECT_ITERATION
  }, {
    // `Promise.all` method
    // https://tc39.es/ecma262/#sec-promise.all
    all: function all(iterable) {
      var C = this;
      var capability = newPromiseCapability(C);
      var resolve = capability.resolve;
      var reject = capability.reject;
      var result = perform(function () {
        var $promiseResolve = aCallable(C.resolve);
        var values = [];
        var counter = 0;
        var remaining = 1;
        iterate(iterable, function (promise) {
          var index = counter++;
          var alreadyCalled = false;
          remaining++;
          functionCall($promiseResolve, C, promise).then(function (value) {
            if (alreadyCalled) return;
            alreadyCalled = true;
            values[index] = value;
            --remaining || resolve(values);
          }, reject);
        });
        --remaining || resolve(values);
      });
      if (result.error) reject(result.value);
      return capability.promise;
    },
    // `Promise.race` method
    // https://tc39.es/ecma262/#sec-promise.race
    race: function race(iterable) {
      var C = this;
      var capability = newPromiseCapability(C);
      var reject = capability.reject;
      var result = perform(function () {
        var $promiseResolve = aCallable(C.resolve);
        iterate(iterable, function (promise) {
          functionCall($promiseResolve, C, promise).then(capability.resolve, reject);
        });
      });
      if (result.error) reject(result.value);
      return capability.promise;
    }
  });

  // https://tc39.es/ecma262/#sec-promise.allsettled


  _export({
    target: 'Promise',
    stat: true
  }, {
    allSettled: function allSettled(iterable) {
      var C = this;
      var capability = newPromiseCapability$1.f(C);
      var resolve = capability.resolve;
      var reject = capability.reject;
      var result = perform(function () {
        var promiseResolve = aCallable(C.resolve);
        var values = [];
        var counter = 0;
        var remaining = 1;
        iterate(iterable, function (promise) {
          var index = counter++;
          var alreadyCalled = false;
          remaining++;
          functionCall(promiseResolve, C, promise).then(function (value) {
            if (alreadyCalled) return;
            alreadyCalled = true;
            values[index] = {
              status: 'fulfilled',
              value: value
            };
            --remaining || resolve(values);
          }, function (error) {
            if (alreadyCalled) return;
            alreadyCalled = true;
            values[index] = {
              status: 'rejected',
              reason: error
            };
            --remaining || resolve(values);
          });
        });
        --remaining || resolve(values);
      });
      if (result.error) reject(result.value);
      return capability.promise;
    }
  });

  var PROMISE_ANY_ERROR = 'No one promise resolved'; // `Promise.any` method
  // https://tc39.es/ecma262/#sec-promise.any

  _export({
    target: 'Promise',
    stat: true
  }, {
    any: function any(iterable) {
      var C = this;
      var AggregateError = getBuiltIn('AggregateError');
      var capability = newPromiseCapability$1.f(C);
      var resolve = capability.resolve;
      var reject = capability.reject;
      var result = perform(function () {
        var promiseResolve = aCallable(C.resolve);
        var errors = [];
        var counter = 0;
        var remaining = 1;
        var alreadyResolved = false;
        iterate(iterable, function (promise) {
          var index = counter++;
          var alreadyRejected = false;
          remaining++;
          functionCall(promiseResolve, C, promise).then(function (value) {
            if (alreadyRejected || alreadyResolved) return;
            alreadyResolved = true;
            resolve(value);
          }, function (error) {
            if (alreadyRejected || alreadyResolved) return;
            alreadyRejected = true;
            errors[index] = error;
            --remaining || reject(new AggregateError(errors, PROMISE_ANY_ERROR));
          });
        });
        --remaining || reject(new AggregateError(errors, PROMISE_ANY_ERROR));
      });
      if (result.error) reject(result.value);
      return capability.promise;
    }
  });

  var NON_GENERIC = !!nativePromiseConstructor && fails(function () {
    // eslint-disable-next-line unicorn/no-thenable -- required for testing
    nativePromiseConstructor.prototype['finally'].call({
      then: function then() {
        /* empty */
      }
    }, function () {
      /* empty */
    });
  }); // `Promise.prototype.finally` method
  // https://tc39.es/ecma262/#sec-promise.prototype.finally

  _export({
    target: 'Promise',
    proto: true,
    real: true,
    forced: NON_GENERIC
  }, {
    'finally': function _finally(onFinally) {
      var C = speciesConstructor(this, getBuiltIn('Promise'));
      var isFunction = isCallable(onFinally);
      return this.then(isFunction ? function (x) {
        return promiseResolve(C, onFinally()).then(function () {
          return x;
        });
      } : onFinally, isFunction ? function (e) {
        return promiseResolve(C, onFinally()).then(function () {
          throw e;
        });
      } : onFinally);
    }
  }); // makes sure that native promise-based APIs `Promise#finally` properly works with patched `Promise#then`

  if (isCallable(nativePromiseConstructor)) {
    var method = getBuiltIn('Promise').prototype['finally'];

    if (nativePromiseConstructor.prototype['finally'] !== method) {
      redefine(nativePromiseConstructor.prototype, 'finally', method, {
        unsafe: true
      });
    }
  }

  var OPTIONAL_ARGUMENTS_LIST = !fails(function () {
    // eslint-disable-next-line es/no-reflect -- required for testing
    Reflect.apply(function () {
      /* empty */
    });
  }); // `Reflect.apply` method
  // https://tc39.es/ecma262/#sec-reflect.apply

  _export({
    target: 'Reflect',
    stat: true,
    forced: OPTIONAL_ARGUMENTS_LIST
  }, {
    apply: function apply(target, thisArgument, argumentsList) {
      return functionApply(aCallable(target), thisArgument, anObject(argumentsList));
    }
  });

  var Function$1 = global$1.Function;
  var concat$1 = functionUncurryThis([].concat);
  var join$6 = functionUncurryThis([].join);
  var factories = {};

  var construct = function construct(C, argsLength, args) {
    if (!hasOwnProperty_1(factories, argsLength)) {
      for (var list = [], i = 0; i < argsLength; i++) {
        list[i] = 'a[' + i + ']';
      }

      factories[argsLength] = Function$1('C,a', 'return new C(' + join$6(list, ',') + ')');
    }

    return factories[argsLength](C, args);
  }; // `Function.prototype.bind` method implementation
  // https://tc39.es/ecma262/#sec-function.prototype.bind


  var functionBind = functionBindNative ? Function$1.bind : function bind(that
  /* , ...args */
  ) {
    var F = aCallable(this);
    var Prototype = F.prototype;
    var partArgs = arraySlice$1(arguments, 1);

    var boundFunction = function
      /* args... */
    bound() {
      var args = concat$1(partArgs, arraySlice$1(arguments));
      return this instanceof boundFunction ? construct(F, args.length, args) : F.apply(that, args);
    };

    if (isObject(Prototype)) boundFunction.prototype = Prototype;
    return boundFunction;
  };

  var nativeConstruct = getBuiltIn('Reflect', 'construct');
  var ObjectPrototype$1 = Object.prototype;
  var push$7 = [].push; // `Reflect.construct` method
  // https://tc39.es/ecma262/#sec-reflect.construct
  // MS Edge supports only 2 arguments and argumentsList argument is optional
  // FF Nightly sets third argument as `new.target`, but does not create `this` from it

  var NEW_TARGET_BUG = fails(function () {
    function F() {
      /* empty */
    }

    return !(nativeConstruct(function () {
      /* empty */
    }, [], F) instanceof F);
  });
  var ARGS_BUG = !fails(function () {
    nativeConstruct(function () {
      /* empty */
    });
  });
  var FORCED$7 = NEW_TARGET_BUG || ARGS_BUG;
  _export({
    target: 'Reflect',
    stat: true,
    forced: FORCED$7,
    sham: FORCED$7
  }, {
    construct: function construct(Target, args
    /* , newTarget */
    ) {
      aConstructor(Target);
      anObject(args);
      var newTarget = arguments.length < 3 ? Target : aConstructor(arguments[2]);
      if (ARGS_BUG && !NEW_TARGET_BUG) return nativeConstruct(Target, args, newTarget);

      if (Target == newTarget) {
        // w/o altered newTarget, optimization for 0-4 arguments
        switch (args.length) {
          case 0:
            return new Target();

          case 1:
            return new Target(args[0]);

          case 2:
            return new Target(args[0], args[1]);

          case 3:
            return new Target(args[0], args[1], args[2]);

          case 4:
            return new Target(args[0], args[1], args[2], args[3]);
        } // w/o altered newTarget, lot of arguments case


        var $args = [null];
        functionApply(push$7, $args, args);
        return new (functionApply(functionBind, Target, $args))();
      } // with altered newTarget, not support built-in constructors


      var proto = newTarget.prototype;
      var instance = objectCreate(isObject(proto) ? proto : ObjectPrototype$1);
      var result = functionApply(Target, instance, args);
      return isObject(result) ? result : instance;
    }
  });

  var ERROR_INSTEAD_OF_FALSE = fails(function () {
    // eslint-disable-next-line es/no-reflect -- required for testing
    Reflect.defineProperty(objectDefineProperty.f({}, 1, {
      value: 1
    }), 1, {
      value: 2
    });
  }); // `Reflect.defineProperty` method
  // https://tc39.es/ecma262/#sec-reflect.defineproperty

  _export({
    target: 'Reflect',
    stat: true,
    forced: ERROR_INSTEAD_OF_FALSE,
    sham: !descriptors
  }, {
    defineProperty: function defineProperty(target, propertyKey, attributes) {
      anObject(target);
      var key = toPropertyKey(propertyKey);
      anObject(attributes);

      try {
        objectDefineProperty.f(target, key, attributes);
        return true;
      } catch (error) {
        return false;
      }
    }
  });

  var getOwnPropertyDescriptor$2 = objectGetOwnPropertyDescriptor.f; // `Reflect.deleteProperty` method
  // https://tc39.es/ecma262/#sec-reflect.deleteproperty

  _export({
    target: 'Reflect',
    stat: true
  }, {
    deleteProperty: function deleteProperty(target, propertyKey) {
      var descriptor = getOwnPropertyDescriptor$2(anObject(target), propertyKey);
      return descriptor && !descriptor.configurable ? false : delete target[propertyKey];
    }
  });

  var isDataDescriptor = function isDataDescriptor(descriptor) {
    return descriptor !== undefined && (hasOwnProperty_1(descriptor, 'value') || hasOwnProperty_1(descriptor, 'writable'));
  };

  // https://tc39.es/ecma262/#sec-reflect.get

  function get$2(target, propertyKey
  /* , receiver */
  ) {
    var receiver = arguments.length < 3 ? target : arguments[2];
    var descriptor, prototype;
    if (anObject(target) === receiver) return target[propertyKey];
    descriptor = objectGetOwnPropertyDescriptor.f(target, propertyKey);
    if (descriptor) return isDataDescriptor(descriptor) ? descriptor.value : descriptor.get === undefined ? undefined : functionCall(descriptor.get, receiver);
    if (isObject(prototype = objectGetPrototypeOf(target))) return get$2(prototype, propertyKey, receiver);
  }

  _export({
    target: 'Reflect',
    stat: true
  }, {
    get: get$2
  });

  // https://tc39.es/ecma262/#sec-reflect.getownpropertydescriptor

  _export({
    target: 'Reflect',
    stat: true,
    sham: !descriptors
  }, {
    getOwnPropertyDescriptor: function getOwnPropertyDescriptor(target, propertyKey) {
      return objectGetOwnPropertyDescriptor.f(anObject(target), propertyKey);
    }
  });

  // https://tc39.es/ecma262/#sec-reflect.getprototypeof

  _export({
    target: 'Reflect',
    stat: true,
    sham: !correctPrototypeGetter
  }, {
    getPrototypeOf: function getPrototypeOf(target) {
      return objectGetPrototypeOf(anObject(target));
    }
  });

  // https://tc39.es/ecma262/#sec-reflect.has

  _export({
    target: 'Reflect',
    stat: true
  }, {
    has: function has(target, propertyKey) {
      return propertyKey in target;
    }
  });

  // https://tc39.es/ecma262/#sec-reflect.isextensible

  _export({
    target: 'Reflect',
    stat: true
  }, {
    isExtensible: function isExtensible(target) {
      anObject(target);
      return objectIsExtensible(target);
    }
  });

  // https://tc39.es/ecma262/#sec-reflect.ownkeys

  _export({
    target: 'Reflect',
    stat: true
  }, {
    ownKeys: ownKeys
  });

  // https://tc39.es/ecma262/#sec-reflect.preventextensions

  _export({
    target: 'Reflect',
    stat: true,
    sham: !freezing
  }, {
    preventExtensions: function preventExtensions(target) {
      anObject(target);

      try {
        var objectPreventExtensions = getBuiltIn('Object', 'preventExtensions');
        if (objectPreventExtensions) objectPreventExtensions(target);
        return true;
      } catch (error) {
        return false;
      }
    }
  });

  // https://tc39.es/ecma262/#sec-reflect.set

  function set$2(target, propertyKey, V
  /* , receiver */
  ) {
    var receiver = arguments.length < 4 ? target : arguments[3];
    var ownDescriptor = objectGetOwnPropertyDescriptor.f(anObject(target), propertyKey);
    var existingDescriptor, prototype, setter;

    if (!ownDescriptor) {
      if (isObject(prototype = objectGetPrototypeOf(target))) {
        return set$2(prototype, propertyKey, V, receiver);
      }

      ownDescriptor = createPropertyDescriptor(0);
    }

    if (isDataDescriptor(ownDescriptor)) {
      if (ownDescriptor.writable === false || !isObject(receiver)) return false;

      if (existingDescriptor = objectGetOwnPropertyDescriptor.f(receiver, propertyKey)) {
        if (existingDescriptor.get || existingDescriptor.set || existingDescriptor.writable === false) return false;
        existingDescriptor.value = V;
        objectDefineProperty.f(receiver, propertyKey, existingDescriptor);
      } else objectDefineProperty.f(receiver, propertyKey, createPropertyDescriptor(0, V));
    } else {
      setter = ownDescriptor.set;
      if (setter === undefined) return false;
      functionCall(setter, receiver, V);
    }

    return true;
  } // MS Edge 17-18 Reflect.set allows setting the property to object
  // with non-writable property on the prototype


  var MS_EDGE_BUG = fails(function () {
    var Constructor = function Constructor() {
      /* empty */
    };

    var object = objectDefineProperty.f(new Constructor(), 'a', {
      configurable: true
    }); // eslint-disable-next-line es/no-reflect -- required for testing

    return Reflect.set(Constructor.prototype, 'a', 1, object) !== false;
  });
  _export({
    target: 'Reflect',
    stat: true,
    forced: MS_EDGE_BUG
  }, {
    set: set$2
  });

  // https://tc39.es/ecma262/#sec-reflect.setprototypeof

  if (objectSetPrototypeOf) _export({
    target: 'Reflect',
    stat: true
  }, {
    setPrototypeOf: function setPrototypeOf(target, proto) {
      anObject(target);
      aPossiblePrototype(proto);

      try {
        objectSetPrototypeOf(target, proto);
        return true;
      } catch (error) {
        return false;
      }
    }
  });

  _export({
    global: true
  }, {
    Reflect: {}
  }); // Reflect[@@toStringTag] property
  // https://tc39.es/ecma262/#sec-reflect-@@tostringtag

  setToStringTag(global$1.Reflect, 'Reflect', true);

  var MATCH$2 = wellKnownSymbol('match'); // `IsRegExp` abstract operation
  // https://tc39.es/ecma262/#sec-isregexp

  var isRegexp = function isRegexp(it) {
    var isRegExp;
    return isObject(it) && ((isRegExp = it[MATCH$2]) !== undefined ? !!isRegExp : classofRaw(it) == 'RegExp');
  };

  // https://tc39.es/ecma262/#sec-get-regexp.prototype.flags


  var regexpFlags = function regexpFlags() {
    var that = anObject(this);
    var result = '';
    if (that.global) result += 'g';
    if (that.ignoreCase) result += 'i';
    if (that.multiline) result += 'm';
    if (that.dotAll) result += 's';
    if (that.unicode) result += 'u';
    if (that.sticky) result += 'y';
    return result;
  };

  var $RegExp$2 = global$1.RegExp;
  var UNSUPPORTED_Y$3 = fails(function () {
    var re = $RegExp$2('a', 'y');
    re.lastIndex = 2;
    return re.exec('abcd') != null;
  }); // UC Browser bug
  // https://github.com/zloirock/core-js/issues/1008

  var MISSED_STICKY$2 = UNSUPPORTED_Y$3 || fails(function () {
    return !$RegExp$2('a', 'y').sticky;
  });
  var BROKEN_CARET = UNSUPPORTED_Y$3 || fails(function () {
    // https://bugzilla.mozilla.org/show_bug.cgi?id=773687
    var re = $RegExp$2('^r', 'gy');
    re.lastIndex = 2;
    return re.exec('str') != null;
  });
  var regexpStickyHelpers = {
    BROKEN_CARET: BROKEN_CARET,
    MISSED_STICKY: MISSED_STICKY$2,
    UNSUPPORTED_Y: UNSUPPORTED_Y$3
  };

  var $RegExp$1 = global$1.RegExp;
  var regexpUnsupportedDotAll = fails(function () {
    var re = $RegExp$1('.', 's');
    return !(re.dotAll && re.exec('\n') && re.flags === 's');
  });

  var $RegExp = global$1.RegExp;
  var regexpUnsupportedNcg = fails(function () {
    var re = $RegExp('(?<a>b)', 'g');
    return re.exec('b').groups.a !== 'b' || 'b'.replace(re, '$<a>c') !== 'bc';
  });

  var defineProperty$5 = objectDefineProperty.f;
  var getOwnPropertyNames = objectGetOwnPropertyNames.f;
  var enforceInternalState$1 = internalState.enforce;
  var MATCH$1 = wellKnownSymbol('match');
  var NativeRegExp = global$1.RegExp;
  var RegExpPrototype$7 = NativeRegExp.prototype;
  var SyntaxError$2 = global$1.SyntaxError;
  var getFlags$4 = functionUncurryThis(regexpFlags);
  var exec$3 = functionUncurryThis(RegExpPrototype$7.exec);
  var charAt$8 = functionUncurryThis(''.charAt);
  var replace$6 = functionUncurryThis(''.replace);
  var stringIndexOf$4 = functionUncurryThis(''.indexOf);
  var stringSlice$a = functionUncurryThis(''.slice); // TODO: Use only propper RegExpIdentifierName

  var IS_NCG = /^\?<[^\s\d!#%&*+<=>@^][^\s!#%&*+<=>@^]*>/;
  var re1 = /a/g;
  var re2 = /a/g; // "new" should create a new object, old webkit bug

  var CORRECT_NEW = new NativeRegExp(re1) !== re1;
  var MISSED_STICKY$1 = regexpStickyHelpers.MISSED_STICKY;
  var UNSUPPORTED_Y$2 = regexpStickyHelpers.UNSUPPORTED_Y;
  var BASE_FORCED = descriptors && (!CORRECT_NEW || MISSED_STICKY$1 || regexpUnsupportedDotAll || regexpUnsupportedNcg || fails(function () {
    re2[MATCH$1] = false; // RegExp constructor can alter flags and IsRegExp works correct with @@match

    return NativeRegExp(re1) != re1 || NativeRegExp(re2) == re2 || NativeRegExp(re1, 'i') != '/a/i';
  }));

  var handleDotAll = function handleDotAll(string) {
    var length = string.length;
    var index = 0;
    var result = '';
    var brackets = false;
    var chr;

    for (; index <= length; index++) {
      chr = charAt$8(string, index);

      if (chr === '\\') {
        result += chr + charAt$8(string, ++index);
        continue;
      }

      if (!brackets && chr === '.') {
        result += '[\\s\\S]';
      } else {
        if (chr === '[') {
          brackets = true;
        } else if (chr === ']') {
          brackets = false;
        }

        result += chr;
      }
    }

    return result;
  };

  var handleNCG = function handleNCG(string) {
    var length = string.length;
    var index = 0;
    var result = '';
    var named = [];
    var names = {};
    var brackets = false;
    var ncg = false;
    var groupid = 0;
    var groupname = '';
    var chr;

    for (; index <= length; index++) {
      chr = charAt$8(string, index);

      if (chr === '\\') {
        chr = chr + charAt$8(string, ++index);
      } else if (chr === ']') {
        brackets = false;
      } else if (!brackets) switch (true) {
        case chr === '[':
          brackets = true;
          break;

        case chr === '(':
          if (exec$3(IS_NCG, stringSlice$a(string, index + 1))) {
            index += 2;
            ncg = true;
          }

          result += chr;
          groupid++;
          continue;

        case chr === '>' && ncg:
          if (groupname === '' || hasOwnProperty_1(names, groupname)) {
            throw new SyntaxError$2('Invalid capture group name');
          }

          names[groupname] = true;
          named[named.length] = [groupname, groupid];
          ncg = false;
          groupname = '';
          continue;
      }

      if (ncg) groupname += chr;else result += chr;
    }

    return [result, named];
  }; // `RegExp` constructor
  // https://tc39.es/ecma262/#sec-regexp-constructor


  if (isForced_1('RegExp', BASE_FORCED)) {
    var RegExpWrapper = function RegExp(pattern, flags) {
      var thisIsRegExp = objectIsPrototypeOf(RegExpPrototype$7, this);
      var patternIsRegExp = isRegexp(pattern);
      var flagsAreUndefined = flags === undefined;
      var groups = [];
      var rawPattern = pattern;
      var rawFlags, dotAll, sticky, handled, result, state;

      if (!thisIsRegExp && patternIsRegExp && flagsAreUndefined && pattern.constructor === RegExpWrapper) {
        return pattern;
      }

      if (patternIsRegExp || objectIsPrototypeOf(RegExpPrototype$7, pattern)) {
        pattern = pattern.source;
        if (flagsAreUndefined) flags = 'flags' in rawPattern ? rawPattern.flags : getFlags$4(rawPattern);
      }

      pattern = pattern === undefined ? '' : toString(pattern);
      flags = flags === undefined ? '' : toString(flags);
      rawPattern = pattern;

      if (regexpUnsupportedDotAll && 'dotAll' in re1) {
        dotAll = !!flags && stringIndexOf$4(flags, 's') > -1;
        if (dotAll) flags = replace$6(flags, /s/g, '');
      }

      rawFlags = flags;

      if (MISSED_STICKY$1 && 'sticky' in re1) {
        sticky = !!flags && stringIndexOf$4(flags, 'y') > -1;
        if (sticky && UNSUPPORTED_Y$2) flags = replace$6(flags, /y/g, '');
      }

      if (regexpUnsupportedNcg) {
        handled = handleNCG(pattern);
        pattern = handled[0];
        groups = handled[1];
      }

      result = inheritIfRequired(NativeRegExp(pattern, flags), thisIsRegExp ? this : RegExpPrototype$7, RegExpWrapper);

      if (dotAll || sticky || groups.length) {
        state = enforceInternalState$1(result);

        if (dotAll) {
          state.dotAll = true;
          state.raw = RegExpWrapper(handleDotAll(pattern), rawFlags);
        }

        if (sticky) state.sticky = true;
        if (groups.length) state.groups = groups;
      }

      if (pattern !== rawPattern) try {
        // fails in old engines, but we have no alternatives for unsupported regex syntax
        createNonEnumerableProperty(result, 'source', rawPattern === '' ? '(?:)' : rawPattern);
      } catch (error) {
        /* empty */
      }
      return result;
    };

    var proxy = function proxy(key) {
      key in RegExpWrapper || defineProperty$5(RegExpWrapper, key, {
        configurable: true,
        get: function get() {
          return NativeRegExp[key];
        },
        set: function set(it) {
          NativeRegExp[key] = it;
        }
      });
    };

    for (var keys = getOwnPropertyNames(NativeRegExp), index$1 = 0; keys.length > index$1;) {
      proxy(keys[index$1++]);
    }

    RegExpPrototype$7.constructor = RegExpWrapper;
    RegExpWrapper.prototype = RegExpPrototype$7;
    redefine(global$1, 'RegExp', RegExpWrapper);
  } // https://tc39.es/ecma262/#sec-get-regexp-@@species


  setSpecies('RegExp');

  var defineProperty$4 = objectDefineProperty.f;
  var getInternalState$5 = internalState.get;
  var RegExpPrototype$6 = RegExp.prototype;
  var TypeError$a = global$1.TypeError; // `RegExp.prototype.dotAll` getter
  // https://tc39.es/ecma262/#sec-get-regexp.prototype.dotall

  if (descriptors && regexpUnsupportedDotAll) {
    defineProperty$4(RegExpPrototype$6, 'dotAll', {
      configurable: true,
      get: function get() {
        if (this === RegExpPrototype$6) return undefined; // We can't use InternalStateModule.getterFor because
        // we don't add metadata for regexps created by a literal.

        if (classofRaw(this) === 'RegExp') {
          return !!getInternalState$5(this).dotAll;
        }

        throw TypeError$a('Incompatible receiver, RegExp required');
      }
    });
  }

  /* eslint-disable regexp/no-empty-capturing-group, regexp/no-empty-group, regexp/no-lazy-ends -- testing */

  /* eslint-disable regexp/no-useless-quantifier -- testing */


  var getInternalState$4 = internalState.get;
  var nativeReplace = shared('native-string-replace', String.prototype.replace);
  var nativeExec = RegExp.prototype.exec;
  var patchedExec = nativeExec;
  var charAt$7 = functionUncurryThis(''.charAt);
  var indexOf$1 = functionUncurryThis(''.indexOf);
  var replace$5 = functionUncurryThis(''.replace);
  var stringSlice$9 = functionUncurryThis(''.slice);

  var UPDATES_LAST_INDEX_WRONG = function () {
    var re1 = /a/;
    var re2 = /b*/g;
    functionCall(nativeExec, re1, 'a');
    functionCall(nativeExec, re2, 'a');
    return re1.lastIndex !== 0 || re2.lastIndex !== 0;
  }();

  var UNSUPPORTED_Y$1 = regexpStickyHelpers.BROKEN_CARET; // nonparticipating capturing group, copied from es5-shim's String#split patch.

  var NPCG_INCLUDED = /()??/.exec('')[1] !== undefined;
  var PATCH = UPDATES_LAST_INDEX_WRONG || NPCG_INCLUDED || UNSUPPORTED_Y$1 || regexpUnsupportedDotAll || regexpUnsupportedNcg;

  if (PATCH) {
    patchedExec = function exec(string) {
      var re = this;
      var state = getInternalState$4(re);
      var str = toString(string);
      var raw = state.raw;
      var result, reCopy, lastIndex, match, i, object, group;

      if (raw) {
        raw.lastIndex = re.lastIndex;
        result = functionCall(patchedExec, raw, str);
        re.lastIndex = raw.lastIndex;
        return result;
      }

      var groups = state.groups;
      var sticky = UNSUPPORTED_Y$1 && re.sticky;
      var flags = functionCall(regexpFlags, re);
      var source = re.source;
      var charsAdded = 0;
      var strCopy = str;

      if (sticky) {
        flags = replace$5(flags, 'y', '');

        if (indexOf$1(flags, 'g') === -1) {
          flags += 'g';
        }

        strCopy = stringSlice$9(str, re.lastIndex); // Support anchored sticky behavior.

        if (re.lastIndex > 0 && (!re.multiline || re.multiline && charAt$7(str, re.lastIndex - 1) !== '\n')) {
          source = '(?: ' + source + ')';
          strCopy = ' ' + strCopy;
          charsAdded++;
        } // ^(? + rx + ) is needed, in combination with some str slicing, to
        // simulate the 'y' flag.


        reCopy = new RegExp('^(?:' + source + ')', flags);
      }

      if (NPCG_INCLUDED) {
        reCopy = new RegExp('^' + source + '$(?!\\s)', flags);
      }

      if (UPDATES_LAST_INDEX_WRONG) lastIndex = re.lastIndex;
      match = functionCall(nativeExec, sticky ? reCopy : re, strCopy);

      if (sticky) {
        if (match) {
          match.input = stringSlice$9(match.input, charsAdded);
          match[0] = stringSlice$9(match[0], charsAdded);
          match.index = re.lastIndex;
          re.lastIndex += match[0].length;
        } else re.lastIndex = 0;
      } else if (UPDATES_LAST_INDEX_WRONG && match) {
        re.lastIndex = re.global ? match.index + match[0].length : lastIndex;
      }

      if (NPCG_INCLUDED && match && match.length > 1) {
        // Fix browsers whose `exec` methods don't consistently return `undefined`
        // for NPCG, like IE8. NOTE: This doesn' work for /(.?)?/
        functionCall(nativeReplace, match[0], reCopy, function () {
          for (i = 1; i < arguments.length - 2; i++) {
            if (arguments[i] === undefined) match[i] = undefined;
          }
        });
      }

      if (match && groups) {
        match.groups = object = objectCreate(null);

        for (i = 0; i < groups.length; i++) {
          group = groups[i];
          object[group[0]] = match[group[1]];
        }
      }

      return match;
    };
  }

  var regexpExec = patchedExec;

  // https://tc39.es/ecma262/#sec-regexp.prototype.exec


  _export({
    target: 'RegExp',
    proto: true,
    forced: /./.exec !== regexpExec
  }, {
    exec: regexpExec
  });

  var RegExpPrototype$5 = RegExp.prototype;
  var FORCED$6 = descriptors && fails(function () {
    // eslint-disable-next-line es/no-object-getownpropertydescriptor -- safe
    return Object.getOwnPropertyDescriptor(RegExpPrototype$5, 'flags').get.call({
      dotAll: true,
      sticky: true
    }) !== 'sy';
  }); // `RegExp.prototype.flags` getter
  // https://tc39.es/ecma262/#sec-get-regexp.prototype.flags

  if (FORCED$6) objectDefineProperty.f(RegExpPrototype$5, 'flags', {
    configurable: true,
    get: regexpFlags
  });

  var MISSED_STICKY = regexpStickyHelpers.MISSED_STICKY;
  var defineProperty$3 = objectDefineProperty.f;
  var getInternalState$3 = internalState.get;
  var RegExpPrototype$4 = RegExp.prototype;
  var TypeError$9 = global$1.TypeError; // `RegExp.prototype.sticky` getter
  // https://tc39.es/ecma262/#sec-get-regexp.prototype.sticky

  if (descriptors && MISSED_STICKY) {
    defineProperty$3(RegExpPrototype$4, 'sticky', {
      configurable: true,
      get: function get() {
        if (this === RegExpPrototype$4) return undefined; // We can't use InternalStateModule.getterFor because
        // we don't add metadata for regexps created by a literal.

        if (classofRaw(this) === 'RegExp') {
          return !!getInternalState$3(this).sticky;
        }

        throw TypeError$9('Incompatible receiver, RegExp required');
      }
    });
  }

  var DELEGATES_TO_EXEC = function () {
    var execCalled = false;
    var re = /[ac]/;

    re.exec = function () {
      execCalled = true;
      return /./.exec.apply(this, arguments);
    };

    return re.test('abc') === true && execCalled;
  }();

  var Error$4 = global$1.Error;
  var un$Test = functionUncurryThis(/./.test); // `RegExp.prototype.test` method
  // https://tc39.es/ecma262/#sec-regexp.prototype.test

  _export({
    target: 'RegExp',
    proto: true,
    forced: !DELEGATES_TO_EXEC
  }, {
    test: function test(str) {
      var exec = this.exec;
      if (!isCallable(exec)) return un$Test(this, str);
      var result = functionCall(exec, this, str);

      if (result !== null && !isObject(result)) {
        throw new Error$4('RegExp exec method returned something other than an Object or null');
      }

      return !!result;
    }
  });

  var PROPER_FUNCTION_NAME$1 = functionName.PROPER;
  var TO_STRING = 'toString';
  var RegExpPrototype$3 = RegExp.prototype;
  var n$ToString = RegExpPrototype$3[TO_STRING];
  var getFlags$3 = functionUncurryThis(regexpFlags);
  var NOT_GENERIC = fails(function () {
    return n$ToString.call({
      source: 'a',
      flags: 'b'
    }) != '/a/b';
  }); // FF44- RegExp#toString has a wrong name

  var INCORRECT_NAME = PROPER_FUNCTION_NAME$1 && n$ToString.name != TO_STRING; // `RegExp.prototype.toString` method
  // https://tc39.es/ecma262/#sec-regexp.prototype.tostring

  if (NOT_GENERIC || INCORRECT_NAME) {
    redefine(RegExp.prototype, TO_STRING, function toString$1() {
      var R = anObject(this);
      var p = toString(R.source);
      var rf = R.flags;
      var f = toString(rf === undefined && objectIsPrototypeOf(RegExpPrototype$3, R) && !('flags' in RegExpPrototype$3) ? getFlags$3(R) : rf);
      return '/' + p + '/' + f;
    }, {
      unsafe: true
    });
  }

  // https://tc39.es/ecma262/#sec-set-objects


  collection('Set', function (init) {
    return function Set() {
      return init(this, arguments.length ? arguments[0] : undefined);
    };
  }, collectionStrong);

  var charAt$6 = functionUncurryThis(''.charAt);
  var FORCED$5 = fails(function () {
    return '𠮷'.at(-2) !== "\uD842";
  }); // `String.prototype.at` method
  // https://github.com/tc39/proposal-relative-indexing-method

  _export({
    target: 'String',
    proto: true,
    forced: FORCED$5
  }, {
    at: function at(index) {
      var S = toString(requireObjectCoercible(this));
      var len = S.length;
      var relativeIndex = toIntegerOrInfinity(index);
      var k = relativeIndex >= 0 ? relativeIndex : len + relativeIndex;
      return k < 0 || k >= len ? undefined : charAt$6(S, k);
    }
  });

  var charAt$5 = functionUncurryThis(''.charAt);
  var charCodeAt$1 = functionUncurryThis(''.charCodeAt);
  var stringSlice$8 = functionUncurryThis(''.slice);

  var createMethod$1 = function createMethod(CONVERT_TO_STRING) {
    return function ($this, pos) {
      var S = toString(requireObjectCoercible($this));
      var position = toIntegerOrInfinity(pos);
      var size = S.length;
      var first, second;
      if (position < 0 || position >= size) return CONVERT_TO_STRING ? '' : undefined;
      first = charCodeAt$1(S, position);
      return first < 0xD800 || first > 0xDBFF || position + 1 === size || (second = charCodeAt$1(S, position + 1)) < 0xDC00 || second > 0xDFFF ? CONVERT_TO_STRING ? charAt$5(S, position) : first : CONVERT_TO_STRING ? stringSlice$8(S, position, position + 2) : (first - 0xD800 << 10) + (second - 0xDC00) + 0x10000;
    };
  };

  var stringMultibyte = {
    // `String.prototype.codePointAt` method
    // https://tc39.es/ecma262/#sec-string.prototype.codepointat
    codeAt: createMethod$1(false),
    // `String.prototype.at` method
    // https://github.com/mathiasbynens/String.prototype.at
    charAt: createMethod$1(true)
  };

  var codeAt$1 = stringMultibyte.codeAt; // `String.prototype.codePointAt` method
  // https://tc39.es/ecma262/#sec-string.prototype.codepointat

  _export({
    target: 'String',
    proto: true
  }, {
    codePointAt: function codePointAt(pos) {
      return codeAt$1(this, pos);
    }
  });

  var TypeError$8 = global$1.TypeError;

  var notARegexp = function notARegexp(it) {
    if (isRegexp(it)) {
      throw TypeError$8("The method doesn't accept regular expressions");
    }

    return it;
  };

  var MATCH = wellKnownSymbol('match');

  var correctIsRegexpLogic = function correctIsRegexpLogic(METHOD_NAME) {
    var regexp = /./;

    try {
      '/./'[METHOD_NAME](regexp);
    } catch (error1) {
      try {
        regexp[MATCH] = false;
        return '/./'[METHOD_NAME](regexp);
      } catch (error2) {
        /* empty */
      }
    }

    return false;
  };

  var getOwnPropertyDescriptor$1 = objectGetOwnPropertyDescriptor.f; // eslint-disable-next-line es/no-string-prototype-endswith -- safe

  var un$EndsWith = functionUncurryThis(''.endsWith);
  var slice$2 = functionUncurryThis(''.slice);
  var min$4 = Math.min;
  var CORRECT_IS_REGEXP_LOGIC$1 = correctIsRegexpLogic('endsWith'); // https://github.com/zloirock/core-js/pull/702

  var MDN_POLYFILL_BUG$1 = !CORRECT_IS_REGEXP_LOGIC$1 && !!function () {
    var descriptor = getOwnPropertyDescriptor$1(String.prototype, 'endsWith');
    return descriptor && !descriptor.writable;
  }(); // `String.prototype.endsWith` method
  // https://tc39.es/ecma262/#sec-string.prototype.endswith

  _export({
    target: 'String',
    proto: true,
    forced: !MDN_POLYFILL_BUG$1 && !CORRECT_IS_REGEXP_LOGIC$1
  }, {
    endsWith: function endsWith(searchString
    /* , endPosition = @length */
    ) {
      var that = toString(requireObjectCoercible(this));
      notARegexp(searchString);
      var endPosition = arguments.length > 1 ? arguments[1] : undefined;
      var len = that.length;
      var end = endPosition === undefined ? len : min$4(toLength(endPosition), len);
      var search = toString(searchString);
      return un$EndsWith ? un$EndsWith(that, search, end) : slice$2(that, end - search.length, end) === search;
    }
  });

  var RangeError$5 = global$1.RangeError;
  var fromCharCode$1 = String.fromCharCode; // eslint-disable-next-line es/no-string-fromcodepoint -- required for testing

  var $fromCodePoint = String.fromCodePoint;
  var join$5 = functionUncurryThis([].join); // length should be 1, old FF problem

  var INCORRECT_LENGTH = !!$fromCodePoint && $fromCodePoint.length != 1; // `String.fromCodePoint` method
  // https://tc39.es/ecma262/#sec-string.fromcodepoint

  _export({
    target: 'String',
    stat: true,
    forced: INCORRECT_LENGTH
  }, {
    // eslint-disable-next-line no-unused-vars -- required for `.length`
    fromCodePoint: function fromCodePoint(x) {
      var elements = [];
      var length = arguments.length;
      var i = 0;
      var code;

      while (length > i) {
        code = +arguments[i++];
        if (toAbsoluteIndex(code, 0x10FFFF) !== code) throw RangeError$5(code + ' is not a valid code point');
        elements[i] = code < 0x10000 ? fromCharCode$1(code) : fromCharCode$1(((code -= 0x10000) >> 10) + 0xD800, code % 0x400 + 0xDC00);
      }

      return join$5(elements, '');
    }
  });

  var stringIndexOf$3 = functionUncurryThis(''.indexOf); // `String.prototype.includes` method
  // https://tc39.es/ecma262/#sec-string.prototype.includes

  _export({
    target: 'String',
    proto: true,
    forced: !correctIsRegexpLogic('includes')
  }, {
    includes: function includes(searchString
    /* , position = 0 */
    ) {
      return !!~stringIndexOf$3(toString(requireObjectCoercible(this)), toString(notARegexp(searchString)), arguments.length > 1 ? arguments[1] : undefined);
    }
  });

  var charAt$4 = stringMultibyte.charAt;
  var STRING_ITERATOR = 'String Iterator';
  var setInternalState$5 = internalState.set;
  var getInternalState$2 = internalState.getterFor(STRING_ITERATOR); // `String.prototype[@@iterator]` method
  // https://tc39.es/ecma262/#sec-string.prototype-@@iterator

  defineIterator(String, 'String', function (iterated) {
    setInternalState$5(this, {
      type: STRING_ITERATOR,
      string: toString(iterated),
      index: 0
    }); // `%StringIteratorPrototype%.next` method
    // https://tc39.es/ecma262/#sec-%stringiteratorprototype%.next
  }, function next() {
    var state = getInternalState$2(this);
    var string = state.string;
    var index = state.index;
    var point;
    if (index >= string.length) return {
      value: undefined,
      done: true
    };
    point = charAt$4(string, index);
    state.index += point.length;
    return {
      value: point,
      done: false
    };
  });

  var SPECIES = wellKnownSymbol('species');
  var RegExpPrototype$2 = RegExp.prototype;

  var fixRegexpWellKnownSymbolLogic = function fixRegexpWellKnownSymbolLogic(KEY, exec, FORCED, SHAM) {
    var SYMBOL = wellKnownSymbol(KEY);
    var DELEGATES_TO_SYMBOL = !fails(function () {
      // String methods call symbol-named RegEp methods
      var O = {};

      O[SYMBOL] = function () {
        return 7;
      };

      return ''[KEY](O) != 7;
    });
    var DELEGATES_TO_EXEC = DELEGATES_TO_SYMBOL && !fails(function () {
      // Symbol-named RegExp methods call .exec
      var execCalled = false;
      var re = /a/;

      if (KEY === 'split') {
        // We can't use real regex here since it causes deoptimization
        // and serious performance degradation in V8
        // https://github.com/zloirock/core-js/issues/306
        re = {}; // RegExp[@@split] doesn't call the regex's exec method, but first creates
        // a new one. We need to return the patched regex when creating the new one.

        re.constructor = {};

        re.constructor[SPECIES] = function () {
          return re;
        };

        re.flags = '';
        re[SYMBOL] = /./[SYMBOL];
      }

      re.exec = function () {
        execCalled = true;
        return null;
      };

      re[SYMBOL]('');
      return !execCalled;
    });

    if (!DELEGATES_TO_SYMBOL || !DELEGATES_TO_EXEC || FORCED) {
      var uncurriedNativeRegExpMethod = functionUncurryThis(/./[SYMBOL]);
      var methods = exec(SYMBOL, ''[KEY], function (nativeMethod, regexp, str, arg2, forceStringMethod) {
        var uncurriedNativeMethod = functionUncurryThis(nativeMethod);
        var $exec = regexp.exec;

        if ($exec === regexpExec || $exec === RegExpPrototype$2.exec) {
          if (DELEGATES_TO_SYMBOL && !forceStringMethod) {
            // The native String method already delegates to @@method (this
            // polyfilled function), leasing to infinite recursion.
            // We avoid it by directly calling the native @@method method.
            return {
              done: true,
              value: uncurriedNativeRegExpMethod(regexp, str, arg2)
            };
          }

          return {
            done: true,
            value: uncurriedNativeMethod(str, regexp, arg2)
          };
        }

        return {
          done: false
        };
      });
      redefine(String.prototype, KEY, methods[0]);
      redefine(RegExpPrototype$2, SYMBOL, methods[1]);
    }

    if (SHAM) createNonEnumerableProperty(RegExpPrototype$2[SYMBOL], 'sham', true);
  };

  var charAt$3 = stringMultibyte.charAt; // `AdvanceStringIndex` abstract operation
  // https://tc39.es/ecma262/#sec-advancestringindex

  var advanceStringIndex = function advanceStringIndex(S, index, unicode) {
    return index + (unicode ? charAt$3(S, index).length : 1);
  };

  var TypeError$7 = global$1.TypeError; // `RegExpExec` abstract operation
  // https://tc39.es/ecma262/#sec-regexpexec

  var regexpExecAbstract = function regexpExecAbstract(R, S) {
    var exec = R.exec;

    if (isCallable(exec)) {
      var result = functionCall(exec, R, S);
      if (result !== null) anObject(result);
      return result;
    }

    if (classofRaw(R) === 'RegExp') return functionCall(regexpExec, R, S);
    throw TypeError$7('RegExp#exec called on incompatible receiver');
  };

  fixRegexpWellKnownSymbolLogic('match', function (MATCH, nativeMatch, maybeCallNative) {
    return [// `String.prototype.match` method
    // https://tc39.es/ecma262/#sec-string.prototype.match
    function match(regexp) {
      var O = requireObjectCoercible(this);
      var matcher = regexp == undefined ? undefined : getMethod(regexp, MATCH);
      return matcher ? functionCall(matcher, regexp, O) : new RegExp(regexp)[MATCH](toString(O));
    }, // `RegExp.prototype[@@match]` method
    // https://tc39.es/ecma262/#sec-regexp.prototype-@@match
    function (string) {
      var rx = anObject(this);
      var S = toString(string);
      var res = maybeCallNative(nativeMatch, rx, S);
      if (res.done) return res.value;
      if (!rx.global) return regexpExecAbstract(rx, S);
      var fullUnicode = rx.unicode;
      rx.lastIndex = 0;
      var A = [];
      var n = 0;
      var result;

      while ((result = regexpExecAbstract(rx, S)) !== null) {
        var matchStr = toString(result[0]);
        A[n] = matchStr;
        if (matchStr === '') rx.lastIndex = advanceStringIndex(S, toLength(rx.lastIndex), fullUnicode);
        n++;
      }

      return n === 0 ? null : A;
    }];
  });

  /* eslint-disable es/no-string-prototype-matchall -- safe */


  var MATCH_ALL = wellKnownSymbol('matchAll');
  var REGEXP_STRING = 'RegExp String';
  var REGEXP_STRING_ITERATOR = REGEXP_STRING + ' Iterator';
  var setInternalState$4 = internalState.set;
  var getInternalState$1 = internalState.getterFor(REGEXP_STRING_ITERATOR);
  var RegExpPrototype$1 = RegExp.prototype;
  var TypeError$6 = global$1.TypeError;
  var getFlags$2 = functionUncurryThis(regexpFlags);
  var stringIndexOf$2 = functionUncurryThis(''.indexOf);
  var un$MatchAll = functionUncurryThis(''.matchAll);
  var WORKS_WITH_NON_GLOBAL_REGEX = !!un$MatchAll && !fails(function () {
    un$MatchAll('a', /./);
  });
  var $RegExpStringIterator = createIteratorConstructor(function RegExpStringIterator(regexp, string, $global, fullUnicode) {
    setInternalState$4(this, {
      type: REGEXP_STRING_ITERATOR,
      regexp: regexp,
      string: string,
      global: $global,
      unicode: fullUnicode,
      done: false
    });
  }, REGEXP_STRING, function next() {
    var state = getInternalState$1(this);
    if (state.done) return {
      value: undefined,
      done: true
    };
    var R = state.regexp;
    var S = state.string;
    var match = regexpExecAbstract(R, S);
    if (match === null) return {
      value: undefined,
      done: state.done = true
    };

    if (state.global) {
      if (toString(match[0]) === '') R.lastIndex = advanceStringIndex(S, toLength(R.lastIndex), state.unicode);
      return {
        value: match,
        done: false
      };
    }

    state.done = true;
    return {
      value: match,
      done: false
    };
  });

  var $matchAll = function $matchAll(string) {
    var R = anObject(this);
    var S = toString(string);
    var C, flagsValue, flags, matcher, $global, fullUnicode;
    C = speciesConstructor(R, RegExp);
    flagsValue = R.flags;

    if (flagsValue === undefined && objectIsPrototypeOf(RegExpPrototype$1, R) && !('flags' in RegExpPrototype$1)) {
      flagsValue = getFlags$2(R);
    }

    flags = flagsValue === undefined ? '' : toString(flagsValue);
    matcher = new C(C === RegExp ? R.source : R, flags);
    $global = !!~stringIndexOf$2(flags, 'g');
    fullUnicode = !!~stringIndexOf$2(flags, 'u');
    matcher.lastIndex = toLength(R.lastIndex);
    return new $RegExpStringIterator(matcher, S, $global, fullUnicode);
  }; // `String.prototype.matchAll` method
  // https://tc39.es/ecma262/#sec-string.prototype.matchall


  _export({
    target: 'String',
    proto: true,
    forced: WORKS_WITH_NON_GLOBAL_REGEX
  }, {
    matchAll: function matchAll(regexp) {
      var O = requireObjectCoercible(this);
      var flags, S, matcher, rx;

      if (regexp != null) {
        if (isRegexp(regexp)) {
          flags = toString(requireObjectCoercible('flags' in RegExpPrototype$1 ? regexp.flags : getFlags$2(regexp)));
          if (!~stringIndexOf$2(flags, 'g')) throw TypeError$6('`.matchAll` does not allow non-global regexes');
        }

        if (WORKS_WITH_NON_GLOBAL_REGEX) return un$MatchAll(O, regexp);
        matcher = getMethod(regexp, MATCH_ALL);
        if (matcher === undefined && isPure && classofRaw(regexp) == 'RegExp') matcher = $matchAll;
        if (matcher) return functionCall(matcher, regexp, O);
      } else if (WORKS_WITH_NON_GLOBAL_REGEX) return un$MatchAll(O, regexp);

      S = toString(O);
      rx = new RegExp(regexp, 'g');
      return rx[MATCH_ALL](S);
    }
  });
  MATCH_ALL in RegExpPrototype$1 || redefine(RegExpPrototype$1, MATCH_ALL, $matchAll);

  var repeat = functionUncurryThis(stringRepeat);
  var stringSlice$7 = functionUncurryThis(''.slice);
  var ceil = Math.ceil; // `String.prototype.{ padStart, padEnd }` methods implementation

  var createMethod = function createMethod(IS_END) {
    return function ($this, maxLength, fillString) {
      var S = toString(requireObjectCoercible($this));
      var intMaxLength = toLength(maxLength);
      var stringLength = S.length;
      var fillStr = fillString === undefined ? ' ' : toString(fillString);
      var fillLen, stringFiller;
      if (intMaxLength <= stringLength || fillStr == '') return S;
      fillLen = intMaxLength - stringLength;
      stringFiller = repeat(fillStr, ceil(fillLen / fillStr.length));
      if (stringFiller.length > fillLen) stringFiller = stringSlice$7(stringFiller, 0, fillLen);
      return IS_END ? S + stringFiller : stringFiller + S;
    };
  };

  var stringPad = {
    // `String.prototype.padStart` method
    // https://tc39.es/ecma262/#sec-string.prototype.padstart
    start: createMethod(false),
    // `String.prototype.padEnd` method
    // https://tc39.es/ecma262/#sec-string.prototype.padend
    end: createMethod(true)
  };

  var stringPadWebkitBug = /Version\/10(?:\.\d+){1,2}(?: [\w./]+)?(?: Mobile\/\w+)? Safari\//.test(engineUserAgent);

  var $padEnd = stringPad.end; // `String.prototype.padEnd` method
  // https://tc39.es/ecma262/#sec-string.prototype.padend

  _export({
    target: 'String',
    proto: true,
    forced: stringPadWebkitBug
  }, {
    padEnd: function padEnd(maxLength
    /* , fillString = ' ' */
    ) {
      return $padEnd(this, maxLength, arguments.length > 1 ? arguments[1] : undefined);
    }
  });

  var $padStart = stringPad.start; // `String.prototype.padStart` method
  // https://tc39.es/ecma262/#sec-string.prototype.padstart

  _export({
    target: 'String',
    proto: true,
    forced: stringPadWebkitBug
  }, {
    padStart: function padStart(maxLength
    /* , fillString = ' ' */
    ) {
      return $padStart(this, maxLength, arguments.length > 1 ? arguments[1] : undefined);
    }
  });

  var push$6 = functionUncurryThis([].push);
  var join$4 = functionUncurryThis([].join); // `String.raw` method
  // https://tc39.es/ecma262/#sec-string.raw

  _export({
    target: 'String',
    stat: true
  }, {
    raw: function raw(template) {
      var rawTemplate = toIndexedObject(toObject(template).raw);
      var literalSegments = lengthOfArrayLike(rawTemplate);
      var argumentsLength = arguments.length;
      var elements = [];
      var i = 0;

      while (literalSegments > i) {
        push$6(elements, toString(rawTemplate[i++]));
        if (i === literalSegments) return join$4(elements, '');
        if (i < argumentsLength) push$6(elements, toString(arguments[i]));
      }
    }
  });

  // https://tc39.es/ecma262/#sec-string.prototype.repeat

  _export({
    target: 'String',
    proto: true
  }, {
    repeat: stringRepeat
  });

  var floor$3 = Math.floor;
  var charAt$2 = functionUncurryThis(''.charAt);
  var replace$4 = functionUncurryThis(''.replace);
  var stringSlice$6 = functionUncurryThis(''.slice);
  var SUBSTITUTION_SYMBOLS = /\$([$&'`]|\d{1,2}|<[^>]*>)/g;
  var SUBSTITUTION_SYMBOLS_NO_NAMED = /\$([$&'`]|\d{1,2})/g; // `GetSubstitution` abstract operation
  // https://tc39.es/ecma262/#sec-getsubstitution

  var getSubstitution = function getSubstitution(matched, str, position, captures, namedCaptures, replacement) {
    var tailPos = position + matched.length;
    var m = captures.length;
    var symbols = SUBSTITUTION_SYMBOLS_NO_NAMED;

    if (namedCaptures !== undefined) {
      namedCaptures = toObject(namedCaptures);
      symbols = SUBSTITUTION_SYMBOLS;
    }

    return replace$4(replacement, symbols, function (match, ch) {
      var capture;

      switch (charAt$2(ch, 0)) {
        case '$':
          return '$';

        case '&':
          return matched;

        case '`':
          return stringSlice$6(str, 0, position);

        case "'":
          return stringSlice$6(str, tailPos);

        case '<':
          capture = namedCaptures[stringSlice$6(ch, 1, -1)];
          break;

        default:
          // \d\d?
          var n = +ch;
          if (n === 0) return match;

          if (n > m) {
            var f = floor$3(n / 10);
            if (f === 0) return match;
            if (f <= m) return captures[f - 1] === undefined ? charAt$2(ch, 1) : captures[f - 1] + charAt$2(ch, 1);
            return match;
          }

          capture = captures[n - 1];
      }

      return capture === undefined ? '' : capture;
    });
  };

  var REPLACE$1 = wellKnownSymbol('replace');
  var max$2 = Math.max;
  var min$3 = Math.min;
  var concat = functionUncurryThis([].concat);
  var push$5 = functionUncurryThis([].push);
  var stringIndexOf$1 = functionUncurryThis(''.indexOf);
  var stringSlice$5 = functionUncurryThis(''.slice);

  var maybeToString = function maybeToString(it) {
    return it === undefined ? it : String(it);
  }; // IE <= 11 replaces $0 with the whole match, as if it was $&
  // https://stackoverflow.com/questions/6024666/getting-ie-to-replace-a-regex-with-the-literal-string-0


  var REPLACE_KEEPS_$0 = function () {
    // eslint-disable-next-line regexp/prefer-escape-replacement-dollar-char -- required for testing
    return 'a'.replace(/./, '$0') === '$0';
  }(); // Safari <= 13.0.3(?) substitutes nth capture where n>m with an empty string


  var REGEXP_REPLACE_SUBSTITUTES_UNDEFINED_CAPTURE = function () {
    if (/./[REPLACE$1]) {
      return /./[REPLACE$1]('a', '$0') === '';
    }

    return false;
  }();

  var REPLACE_SUPPORTS_NAMED_GROUPS = !fails(function () {
    var re = /./;

    re.exec = function () {
      var result = [];
      result.groups = {
        a: '7'
      };
      return result;
    }; // eslint-disable-next-line regexp/no-useless-dollar-replacements -- false positive


    return ''.replace(re, '$<a>') !== '7';
  }); // @@replace logic

  fixRegexpWellKnownSymbolLogic('replace', function (_, nativeReplace, maybeCallNative) {
    var UNSAFE_SUBSTITUTE = REGEXP_REPLACE_SUBSTITUTES_UNDEFINED_CAPTURE ? '$' : '$0';
    return [// `String.prototype.replace` method
    // https://tc39.es/ecma262/#sec-string.prototype.replace
    function replace(searchValue, replaceValue) {
      var O = requireObjectCoercible(this);
      var replacer = searchValue == undefined ? undefined : getMethod(searchValue, REPLACE$1);
      return replacer ? functionCall(replacer, searchValue, O, replaceValue) : functionCall(nativeReplace, toString(O), searchValue, replaceValue);
    }, // `RegExp.prototype[@@replace]` method
    // https://tc39.es/ecma262/#sec-regexp.prototype-@@replace
    function (string, replaceValue) {
      var rx = anObject(this);
      var S = toString(string);

      if (typeof replaceValue == 'string' && stringIndexOf$1(replaceValue, UNSAFE_SUBSTITUTE) === -1 && stringIndexOf$1(replaceValue, '$<') === -1) {
        var res = maybeCallNative(nativeReplace, rx, S, replaceValue);
        if (res.done) return res.value;
      }

      var functionalReplace = isCallable(replaceValue);
      if (!functionalReplace) replaceValue = toString(replaceValue);
      var global = rx.global;

      if (global) {
        var fullUnicode = rx.unicode;
        rx.lastIndex = 0;
      }

      var results = [];

      while (true) {
        var result = regexpExecAbstract(rx, S);
        if (result === null) break;
        push$5(results, result);
        if (!global) break;
        var matchStr = toString(result[0]);
        if (matchStr === '') rx.lastIndex = advanceStringIndex(S, toLength(rx.lastIndex), fullUnicode);
      }

      var accumulatedResult = '';
      var nextSourcePosition = 0;

      for (var i = 0; i < results.length; i++) {
        result = results[i];
        var matched = toString(result[0]);
        var position = max$2(min$3(toIntegerOrInfinity(result.index), S.length), 0);
        var captures = []; // NOTE: This is equivalent to
        //   captures = result.slice(1).map(maybeToString)
        // but for some reason `nativeSlice.call(result, 1, result.length)` (called in
        // the slice polyfill when slicing native arrays) "doesn't work" in safari 9 and
        // causes a crash (https://pastebin.com/N21QzeQA) when trying to debug it.

        for (var j = 1; j < result.length; j++) {
          push$5(captures, maybeToString(result[j]));
        }

        var namedCaptures = result.groups;

        if (functionalReplace) {
          var replacerArgs = concat([matched], captures, position, S);
          if (namedCaptures !== undefined) push$5(replacerArgs, namedCaptures);
          var replacement = toString(functionApply(replaceValue, undefined, replacerArgs));
        } else {
          replacement = getSubstitution(matched, S, position, captures, namedCaptures, replaceValue);
        }

        if (position >= nextSourcePosition) {
          accumulatedResult += stringSlice$5(S, nextSourcePosition, position) + replacement;
          nextSourcePosition = position + matched.length;
        }
      }

      return accumulatedResult + stringSlice$5(S, nextSourcePosition);
    }];
  }, !REPLACE_SUPPORTS_NAMED_GROUPS || !REPLACE_KEEPS_$0 || REGEXP_REPLACE_SUBSTITUTES_UNDEFINED_CAPTURE);

  var REPLACE = wellKnownSymbol('replace');
  var RegExpPrototype = RegExp.prototype;
  var TypeError$5 = global$1.TypeError;
  var getFlags$1 = functionUncurryThis(regexpFlags);
  var indexOf = functionUncurryThis(''.indexOf);
  functionUncurryThis(''.replace);
  var stringSlice$4 = functionUncurryThis(''.slice);
  var max$1 = Math.max;

  var stringIndexOf = function stringIndexOf(string, searchValue, fromIndex) {
    if (fromIndex > string.length) return -1;
    if (searchValue === '') return fromIndex;
    return indexOf(string, searchValue, fromIndex);
  }; // `String.prototype.replaceAll` method
  // https://tc39.es/ecma262/#sec-string.prototype.replaceall


  _export({
    target: 'String',
    proto: true
  }, {
    replaceAll: function replaceAll(searchValue, replaceValue) {
      var O = requireObjectCoercible(this);
      var IS_REG_EXP, flags, replacer, string, searchString, functionalReplace, searchLength, advanceBy, replacement;
      var position = 0;
      var endOfLastMatch = 0;
      var result = '';

      if (searchValue != null) {
        IS_REG_EXP = isRegexp(searchValue);

        if (IS_REG_EXP) {
          flags = toString(requireObjectCoercible('flags' in RegExpPrototype ? searchValue.flags : getFlags$1(searchValue)));
          if (!~indexOf(flags, 'g')) throw TypeError$5('`.replaceAll` does not allow non-global regexes');
        }

        replacer = getMethod(searchValue, REPLACE);

        if (replacer) {
          return functionCall(replacer, searchValue, O, replaceValue);
        }
      }

      string = toString(O);
      searchString = toString(searchValue);
      functionalReplace = isCallable(replaceValue);
      if (!functionalReplace) replaceValue = toString(replaceValue);
      searchLength = searchString.length;
      advanceBy = max$1(1, searchLength);
      position = stringIndexOf(string, searchString, 0);

      while (position !== -1) {
        replacement = functionalReplace ? toString(replaceValue(searchString, position, string)) : getSubstitution(searchString, string, position, [], undefined, replaceValue);
        result += stringSlice$4(string, endOfLastMatch, position) + replacement;
        endOfLastMatch = position + searchLength;
        position = stringIndexOf(string, searchString, position + advanceBy);
      }

      if (endOfLastMatch < string.length) {
        result += stringSlice$4(string, endOfLastMatch);
      }

      return result;
    }
  });

  fixRegexpWellKnownSymbolLogic('search', function (SEARCH, nativeSearch, maybeCallNative) {
    return [// `String.prototype.search` method
    // https://tc39.es/ecma262/#sec-string.prototype.search
    function search(regexp) {
      var O = requireObjectCoercible(this);
      var searcher = regexp == undefined ? undefined : getMethod(regexp, SEARCH);
      return searcher ? functionCall(searcher, regexp, O) : new RegExp(regexp)[SEARCH](toString(O));
    }, // `RegExp.prototype[@@search]` method
    // https://tc39.es/ecma262/#sec-regexp.prototype-@@search
    function (string) {
      var rx = anObject(this);
      var S = toString(string);
      var res = maybeCallNative(nativeSearch, rx, S);
      if (res.done) return res.value;
      var previousLastIndex = rx.lastIndex;
      if (!sameValue(previousLastIndex, 0)) rx.lastIndex = 0;
      var result = regexpExecAbstract(rx, S);
      if (!sameValue(rx.lastIndex, previousLastIndex)) rx.lastIndex = previousLastIndex;
      return result === null ? -1 : result.index;
    }];
  });

  var UNSUPPORTED_Y = regexpStickyHelpers.UNSUPPORTED_Y;
  var MAX_UINT32 = 0xFFFFFFFF;
  var min$2 = Math.min;
  var $push = [].push;
  var exec$2 = functionUncurryThis(/./.exec);
  var push$4 = functionUncurryThis($push);
  var stringSlice$3 = functionUncurryThis(''.slice); // Chrome 51 has a buggy "split" implementation when RegExp#exec !== nativeExec
  // Weex JS has frozen built-in prototypes, so use try / catch wrapper

  var SPLIT_WORKS_WITH_OVERWRITTEN_EXEC = !fails(function () {
    // eslint-disable-next-line regexp/no-empty-group -- required for testing
    var re = /(?:)/;
    var originalExec = re.exec;

    re.exec = function () {
      return originalExec.apply(this, arguments);
    };

    var result = 'ab'.split(re);
    return result.length !== 2 || result[0] !== 'a' || result[1] !== 'b';
  }); // @@split logic

  fixRegexpWellKnownSymbolLogic('split', function (SPLIT, nativeSplit, maybeCallNative) {
    var internalSplit;

    if ('abbc'.split(/(b)*/)[1] == 'c' || // eslint-disable-next-line regexp/no-empty-group -- required for testing
    'test'.split(/(?:)/, -1).length != 4 || 'ab'.split(/(?:ab)*/).length != 2 || '.'.split(/(.?)(.?)/).length != 4 || // eslint-disable-next-line regexp/no-empty-capturing-group, regexp/no-empty-group -- required for testing
    '.'.split(/()()/).length > 1 || ''.split(/.?/).length) {
      // based on es5-shim implementation, need to rework it
      internalSplit = function internalSplit(separator, limit) {
        var string = toString(requireObjectCoercible(this));
        var lim = limit === undefined ? MAX_UINT32 : limit >>> 0;
        if (lim === 0) return [];
        if (separator === undefined) return [string]; // If `separator` is not a regex, use native split

        if (!isRegexp(separator)) {
          return functionCall(nativeSplit, string, separator, lim);
        }

        var output = [];
        var flags = (separator.ignoreCase ? 'i' : '') + (separator.multiline ? 'm' : '') + (separator.unicode ? 'u' : '') + (separator.sticky ? 'y' : '');
        var lastLastIndex = 0; // Make `global` and avoid `lastIndex` issues by working with a copy

        var separatorCopy = new RegExp(separator.source, flags + 'g');
        var match, lastIndex, lastLength;

        while (match = functionCall(regexpExec, separatorCopy, string)) {
          lastIndex = separatorCopy.lastIndex;

          if (lastIndex > lastLastIndex) {
            push$4(output, stringSlice$3(string, lastLastIndex, match.index));
            if (match.length > 1 && match.index < string.length) functionApply($push, output, arraySliceSimple(match, 1));
            lastLength = match[0].length;
            lastLastIndex = lastIndex;
            if (output.length >= lim) break;
          }

          if (separatorCopy.lastIndex === match.index) separatorCopy.lastIndex++; // Avoid an infinite loop
        }

        if (lastLastIndex === string.length) {
          if (lastLength || !exec$2(separatorCopy, '')) push$4(output, '');
        } else push$4(output, stringSlice$3(string, lastLastIndex));

        return output.length > lim ? arraySliceSimple(output, 0, lim) : output;
      }; // Chakra, V8

    } else if ('0'.split(undefined, 0).length) {
      internalSplit = function internalSplit(separator, limit) {
        return separator === undefined && limit === 0 ? [] : functionCall(nativeSplit, this, separator, limit);
      };
    } else internalSplit = nativeSplit;

    return [// `String.prototype.split` method
    // https://tc39.es/ecma262/#sec-string.prototype.split
    function split(separator, limit) {
      var O = requireObjectCoercible(this);
      var splitter = separator == undefined ? undefined : getMethod(separator, SPLIT);
      return splitter ? functionCall(splitter, separator, O, limit) : functionCall(internalSplit, toString(O), separator, limit);
    }, // `RegExp.prototype[@@split]` method
    // https://tc39.es/ecma262/#sec-regexp.prototype-@@split
    //
    // NOTE: This cannot be properly polyfilled in engines that don't support
    // the 'y' flag.
    function (string, limit) {
      var rx = anObject(this);
      var S = toString(string);
      var res = maybeCallNative(internalSplit, rx, S, limit, internalSplit !== nativeSplit);
      if (res.done) return res.value;
      var C = speciesConstructor(rx, RegExp);
      var unicodeMatching = rx.unicode;
      var flags = (rx.ignoreCase ? 'i' : '') + (rx.multiline ? 'm' : '') + (rx.unicode ? 'u' : '') + (UNSUPPORTED_Y ? 'g' : 'y'); // ^(? + rx + ) is needed, in combination with some S slicing, to
      // simulate the 'y' flag.

      var splitter = new C(UNSUPPORTED_Y ? '^(?:' + rx.source + ')' : rx, flags);
      var lim = limit === undefined ? MAX_UINT32 : limit >>> 0;
      if (lim === 0) return [];
      if (S.length === 0) return regexpExecAbstract(splitter, S) === null ? [S] : [];
      var p = 0;
      var q = 0;
      var A = [];

      while (q < S.length) {
        splitter.lastIndex = UNSUPPORTED_Y ? 0 : q;
        var z = regexpExecAbstract(splitter, UNSUPPORTED_Y ? stringSlice$3(S, q) : S);
        var e;

        if (z === null || (e = min$2(toLength(splitter.lastIndex + (UNSUPPORTED_Y ? q : 0)), S.length)) === p) {
          q = advanceStringIndex(S, q, unicodeMatching);
        } else {
          push$4(A, stringSlice$3(S, p, q));
          if (A.length === lim) return A;

          for (var i = 1; i <= z.length - 1; i++) {
            push$4(A, z[i]);
            if (A.length === lim) return A;
          }

          q = p = e;
        }
      }

      push$4(A, stringSlice$3(S, p));
      return A;
    }];
  }, !SPLIT_WORKS_WITH_OVERWRITTEN_EXEC, UNSUPPORTED_Y);

  var getOwnPropertyDescriptor = objectGetOwnPropertyDescriptor.f; // eslint-disable-next-line es/no-string-prototype-startswith -- safe

  var un$StartsWith = functionUncurryThis(''.startsWith);
  var stringSlice$2 = functionUncurryThis(''.slice);
  var min$1 = Math.min;
  var CORRECT_IS_REGEXP_LOGIC = correctIsRegexpLogic('startsWith'); // https://github.com/zloirock/core-js/pull/702

  var MDN_POLYFILL_BUG = !CORRECT_IS_REGEXP_LOGIC && !!function () {
    var descriptor = getOwnPropertyDescriptor(String.prototype, 'startsWith');
    return descriptor && !descriptor.writable;
  }(); // `String.prototype.startsWith` method
  // https://tc39.es/ecma262/#sec-string.prototype.startswith

  _export({
    target: 'String',
    proto: true,
    forced: !MDN_POLYFILL_BUG && !CORRECT_IS_REGEXP_LOGIC
  }, {
    startsWith: function startsWith(searchString
    /* , position = 0 */
    ) {
      var that = toString(requireObjectCoercible(this));
      notARegexp(searchString);
      var index = toLength(min$1(arguments.length > 1 ? arguments[1] : undefined, that.length));
      var search = toString(searchString);
      return un$StartsWith ? un$StartsWith(that, search, index) : stringSlice$2(that, index, index + search.length) === search;
    }
  });

  var PROPER_FUNCTION_NAME = functionName.PROPER;
  var non = "\u200B\x85\u180E"; // check that a method works with the correct list
  // of whitespaces and has a correct name

  var stringTrimForced = function stringTrimForced(METHOD_NAME) {
    return fails(function () {
      return !!whitespaces[METHOD_NAME]() || non[METHOD_NAME]() !== non || PROPER_FUNCTION_NAME && whitespaces[METHOD_NAME].name !== METHOD_NAME;
    });
  };

  var $trim = stringTrim.trim; // `String.prototype.trim` method
  // https://tc39.es/ecma262/#sec-string.prototype.trim

  _export({
    target: 'String',
    proto: true,
    forced: stringTrimForced('trim')
  }, {
    trim: function trim() {
      return $trim(this);
    }
  });

  var $trimEnd = stringTrim.end;
  var FORCED$4 = stringTrimForced('trimEnd');
  var trimEnd = FORCED$4 ? function trimEnd() {
    return $trimEnd(this); // eslint-disable-next-line es/no-string-prototype-trimstart-trimend -- safe
  } : ''.trimEnd; // `String.prototype.{ trimEnd, trimRight }` methods
  // https://tc39.es/ecma262/#sec-string.prototype.trimend
  // https://tc39.es/ecma262/#String.prototype.trimright

  _export({
    target: 'String',
    proto: true,
    name: 'trimEnd',
    forced: FORCED$4
  }, {
    trimEnd: trimEnd,
    trimRight: trimEnd
  });

  var $trimStart = stringTrim.start;
  var FORCED$3 = stringTrimForced('trimStart');
  var trimStart = FORCED$3 ? function trimStart() {
    return $trimStart(this); // eslint-disable-next-line es/no-string-prototype-trimstart-trimend -- safe
  } : ''.trimStart; // `String.prototype.{ trimStart, trimLeft }` methods
  // https://tc39.es/ecma262/#sec-string.prototype.trimstart
  // https://tc39.es/ecma262/#String.prototype.trimleft

  _export({
    target: 'String',
    proto: true,
    name: 'trimStart',
    forced: FORCED$3
  }, {
    trimStart: trimStart,
    trimLeft: trimStart
  });

  var quot = /"/g;
  var replace$3 = functionUncurryThis(''.replace); // `CreateHTML` abstract operation
  // https://tc39.es/ecma262/#sec-createhtml

  var createHtml = function createHtml(string, tag, attribute, value) {
    var S = toString(requireObjectCoercible(string));
    var p1 = '<' + tag;
    if (attribute !== '') p1 += ' ' + attribute + '="' + replace$3(toString(value), quot, '&quot;') + '"';
    return p1 + '>' + S + '</' + tag + '>';
  };

  // of a tag and escaping quotes in arguments

  var stringHtmlForced = function stringHtmlForced(METHOD_NAME) {
    return fails(function () {
      var test = ''[METHOD_NAME]('"');
      return test !== test.toLowerCase() || test.split('"').length > 3;
    });
  };

  // https://tc39.es/ecma262/#sec-string.prototype.anchor


  _export({
    target: 'String',
    proto: true,
    forced: stringHtmlForced('anchor')
  }, {
    anchor: function anchor(name) {
      return createHtml(this, 'a', 'name', name);
    }
  });

  // https://tc39.es/ecma262/#sec-string.prototype.big


  _export({
    target: 'String',
    proto: true,
    forced: stringHtmlForced('big')
  }, {
    big: function big() {
      return createHtml(this, 'big', '', '');
    }
  });

  // https://tc39.es/ecma262/#sec-string.prototype.blink


  _export({
    target: 'String',
    proto: true,
    forced: stringHtmlForced('blink')
  }, {
    blink: function blink() {
      return createHtml(this, 'blink', '', '');
    }
  });

  // https://tc39.es/ecma262/#sec-string.prototype.bold


  _export({
    target: 'String',
    proto: true,
    forced: stringHtmlForced('bold')
  }, {
    bold: function bold() {
      return createHtml(this, 'b', '', '');
    }
  });

  // https://tc39.es/ecma262/#sec-string.prototype.fixed


  _export({
    target: 'String',
    proto: true,
    forced: stringHtmlForced('fixed')
  }, {
    fixed: function fixed() {
      return createHtml(this, 'tt', '', '');
    }
  });

  // https://tc39.es/ecma262/#sec-string.prototype.fontcolor


  _export({
    target: 'String',
    proto: true,
    forced: stringHtmlForced('fontcolor')
  }, {
    fontcolor: function fontcolor(color) {
      return createHtml(this, 'font', 'color', color);
    }
  });

  // https://tc39.es/ecma262/#sec-string.prototype.fontsize


  _export({
    target: 'String',
    proto: true,
    forced: stringHtmlForced('fontsize')
  }, {
    fontsize: function fontsize(size) {
      return createHtml(this, 'font', 'size', size);
    }
  });

  // https://tc39.es/ecma262/#sec-string.prototype.italics


  _export({
    target: 'String',
    proto: true,
    forced: stringHtmlForced('italics')
  }, {
    italics: function italics() {
      return createHtml(this, 'i', '', '');
    }
  });

  // https://tc39.es/ecma262/#sec-string.prototype.link


  _export({
    target: 'String',
    proto: true,
    forced: stringHtmlForced('link')
  }, {
    link: function link(url) {
      return createHtml(this, 'a', 'href', url);
    }
  });

  // https://tc39.es/ecma262/#sec-string.prototype.small


  _export({
    target: 'String',
    proto: true,
    forced: stringHtmlForced('small')
  }, {
    small: function small() {
      return createHtml(this, 'small', '', '');
    }
  });

  // https://tc39.es/ecma262/#sec-string.prototype.strike


  _export({
    target: 'String',
    proto: true,
    forced: stringHtmlForced('strike')
  }, {
    strike: function strike() {
      return createHtml(this, 'strike', '', '');
    }
  });

  // https://tc39.es/ecma262/#sec-string.prototype.sub


  _export({
    target: 'String',
    proto: true,
    forced: stringHtmlForced('sub')
  }, {
    sub: function sub() {
      return createHtml(this, 'sub', '', '');
    }
  });

  // https://tc39.es/ecma262/#sec-string.prototype.sup


  _export({
    target: 'String',
    proto: true,
    forced: stringHtmlForced('sup')
  }, {
    sup: function sup() {
      return createHtml(this, 'sup', '', '');
    }
  });

  var defineProperty$2 = objectDefineProperty.f;
  var Int8Array$4 = global$1.Int8Array;
  var Int8ArrayPrototype$1 = Int8Array$4 && Int8Array$4.prototype;
  var Uint8ClampedArray$1 = global$1.Uint8ClampedArray;
  var Uint8ClampedArrayPrototype = Uint8ClampedArray$1 && Uint8ClampedArray$1.prototype;
  var TypedArray = Int8Array$4 && objectGetPrototypeOf(Int8Array$4);
  var TypedArrayPrototype$1 = Int8ArrayPrototype$1 && objectGetPrototypeOf(Int8ArrayPrototype$1);
  var ObjectPrototype = Object.prototype;
  var TypeError$4 = global$1.TypeError;
  var TO_STRING_TAG$1 = wellKnownSymbol('toStringTag');
  var TYPED_ARRAY_TAG = uid('TYPED_ARRAY_TAG');
  var TYPED_ARRAY_CONSTRUCTOR$1 = uid('TYPED_ARRAY_CONSTRUCTOR'); // Fixing native typed arrays in Opera Presto crashes the browser, see #595

  var NATIVE_ARRAY_BUFFER_VIEWS$1 = arrayBufferNative && !!objectSetPrototypeOf && classof(global$1.opera) !== 'Opera';
  var TYPED_ARRAY_TAG_REQUIRED = false;
  var NAME$e, Constructor, Prototype;
  var TypedArrayConstructorsList = {
    Int8Array: 1,
    Uint8Array: 1,
    Uint8ClampedArray: 1,
    Int16Array: 2,
    Uint16Array: 2,
    Int32Array: 4,
    Uint32Array: 4,
    Float32Array: 4,
    Float64Array: 8
  };
  var BigIntArrayConstructorsList = {
    BigInt64Array: 8,
    BigUint64Array: 8
  };

  var isView = function isView(it) {
    if (!isObject(it)) return false;
    var klass = classof(it);
    return klass === 'DataView' || hasOwnProperty_1(TypedArrayConstructorsList, klass) || hasOwnProperty_1(BigIntArrayConstructorsList, klass);
  };

  var isTypedArray = function isTypedArray(it) {
    if (!isObject(it)) return false;
    var klass = classof(it);
    return hasOwnProperty_1(TypedArrayConstructorsList, klass) || hasOwnProperty_1(BigIntArrayConstructorsList, klass);
  };

  var aTypedArray$n = function aTypedArray(it) {
    if (isTypedArray(it)) return it;
    throw TypeError$4('Target is not a typed array');
  };

  var aTypedArrayConstructor$3 = function aTypedArrayConstructor(C) {
    if (isCallable(C) && (!objectSetPrototypeOf || objectIsPrototypeOf(TypedArray, C))) return C;
    throw TypeError$4(tryToString(C) + ' is not a typed array constructor');
  };

  var exportTypedArrayMethod$o = function exportTypedArrayMethod(KEY, property, forced, options) {
    if (!descriptors) return;
    if (forced) for (var ARRAY in TypedArrayConstructorsList) {
      var TypedArrayConstructor = global$1[ARRAY];
      if (TypedArrayConstructor && hasOwnProperty_1(TypedArrayConstructor.prototype, KEY)) try {
        delete TypedArrayConstructor.prototype[KEY];
      } catch (error) {
        // old WebKit bug - some methods are non-configurable
        try {
          TypedArrayConstructor.prototype[KEY] = property;
        } catch (error2) {
          /* empty */
        }
      }
    }

    if (!TypedArrayPrototype$1[KEY] || forced) {
      redefine(TypedArrayPrototype$1, KEY, forced ? property : NATIVE_ARRAY_BUFFER_VIEWS$1 && Int8ArrayPrototype$1[KEY] || property, options);
    }
  };

  var exportTypedArrayStaticMethod$2 = function exportTypedArrayStaticMethod(KEY, property, forced) {
    var ARRAY, TypedArrayConstructor;
    if (!descriptors) return;

    if (objectSetPrototypeOf) {
      if (forced) for (ARRAY in TypedArrayConstructorsList) {
        TypedArrayConstructor = global$1[ARRAY];
        if (TypedArrayConstructor && hasOwnProperty_1(TypedArrayConstructor, KEY)) try {
          delete TypedArrayConstructor[KEY];
        } catch (error) {
          /* empty */
        }
      }

      if (!TypedArray[KEY] || forced) {
        // V8 ~ Chrome 49-50 `%TypedArray%` methods are non-writable non-configurable
        try {
          return redefine(TypedArray, KEY, forced ? property : NATIVE_ARRAY_BUFFER_VIEWS$1 && TypedArray[KEY] || property);
        } catch (error) {
          /* empty */
        }
      } else return;
    }

    for (ARRAY in TypedArrayConstructorsList) {
      TypedArrayConstructor = global$1[ARRAY];

      if (TypedArrayConstructor && (!TypedArrayConstructor[KEY] || forced)) {
        redefine(TypedArrayConstructor, KEY, property);
      }
    }
  };

  for (NAME$e in TypedArrayConstructorsList) {
    Constructor = global$1[NAME$e];
    Prototype = Constructor && Constructor.prototype;
    if (Prototype) createNonEnumerableProperty(Prototype, TYPED_ARRAY_CONSTRUCTOR$1, Constructor);else NATIVE_ARRAY_BUFFER_VIEWS$1 = false;
  }

  for (NAME$e in BigIntArrayConstructorsList) {
    Constructor = global$1[NAME$e];
    Prototype = Constructor && Constructor.prototype;
    if (Prototype) createNonEnumerableProperty(Prototype, TYPED_ARRAY_CONSTRUCTOR$1, Constructor);
  } // WebKit bug - typed arrays constructors prototype is Object.prototype


  if (!NATIVE_ARRAY_BUFFER_VIEWS$1 || !isCallable(TypedArray) || TypedArray === Function.prototype) {
    // eslint-disable-next-line no-shadow -- safe
    TypedArray = function TypedArray() {
      throw TypeError$4('Incorrect invocation');
    };

    if (NATIVE_ARRAY_BUFFER_VIEWS$1) for (NAME$e in TypedArrayConstructorsList) {
      if (global$1[NAME$e]) objectSetPrototypeOf(global$1[NAME$e], TypedArray);
    }
  }

  if (!NATIVE_ARRAY_BUFFER_VIEWS$1 || !TypedArrayPrototype$1 || TypedArrayPrototype$1 === ObjectPrototype) {
    TypedArrayPrototype$1 = TypedArray.prototype;
    if (NATIVE_ARRAY_BUFFER_VIEWS$1) for (NAME$e in TypedArrayConstructorsList) {
      if (global$1[NAME$e]) objectSetPrototypeOf(global$1[NAME$e].prototype, TypedArrayPrototype$1);
    }
  } // WebKit bug - one more object in Uint8ClampedArray prototype chain


  if (NATIVE_ARRAY_BUFFER_VIEWS$1 && objectGetPrototypeOf(Uint8ClampedArrayPrototype) !== TypedArrayPrototype$1) {
    objectSetPrototypeOf(Uint8ClampedArrayPrototype, TypedArrayPrototype$1);
  }

  if (descriptors && !hasOwnProperty_1(TypedArrayPrototype$1, TO_STRING_TAG$1)) {
    TYPED_ARRAY_TAG_REQUIRED = true;
    defineProperty$2(TypedArrayPrototype$1, TO_STRING_TAG$1, {
      get: function get() {
        return isObject(this) ? this[TYPED_ARRAY_TAG] : undefined;
      }
    });

    for (NAME$e in TypedArrayConstructorsList) {
      if (global$1[NAME$e]) {
        createNonEnumerableProperty(global$1[NAME$e], TYPED_ARRAY_TAG, NAME$e);
      }
    }
  }

  var arrayBufferViewCore = {
    NATIVE_ARRAY_BUFFER_VIEWS: NATIVE_ARRAY_BUFFER_VIEWS$1,
    TYPED_ARRAY_CONSTRUCTOR: TYPED_ARRAY_CONSTRUCTOR$1,
    TYPED_ARRAY_TAG: TYPED_ARRAY_TAG_REQUIRED && TYPED_ARRAY_TAG,
    aTypedArray: aTypedArray$n,
    aTypedArrayConstructor: aTypedArrayConstructor$3,
    exportTypedArrayMethod: exportTypedArrayMethod$o,
    exportTypedArrayStaticMethod: exportTypedArrayStaticMethod$2,
    isView: isView,
    isTypedArray: isTypedArray,
    TypedArray: TypedArray,
    TypedArrayPrototype: TypedArrayPrototype$1
  };

  /* eslint-disable no-new -- required for testing */
  var NATIVE_ARRAY_BUFFER_VIEWS = arrayBufferViewCore.NATIVE_ARRAY_BUFFER_VIEWS;
  var ArrayBuffer$1 = global$1.ArrayBuffer;
  var Int8Array$3 = global$1.Int8Array;
  var typedArrayConstructorsRequireWrappers = !NATIVE_ARRAY_BUFFER_VIEWS || !fails(function () {
    Int8Array$3(1);
  }) || !fails(function () {
    new Int8Array$3(-1);
  }) || !checkCorrectnessOfIteration(function (iterable) {
    new Int8Array$3();
    new Int8Array$3(null);
    new Int8Array$3(1.5);
    new Int8Array$3(iterable);
  }, true) || fails(function () {
    // Safari (11+) bug - a reason why even Safari 13 should load a typed array polyfill
    return new Int8Array$3(new ArrayBuffer$1(2), 1, undefined).length !== 1;
  });

  var RangeError$4 = global$1.RangeError;

  var toPositiveInteger = function toPositiveInteger(it) {
    var result = toIntegerOrInfinity(it);
    if (result < 0) throw RangeError$4("The argument can't be less than 0");
    return result;
  };

  var RangeError$3 = global$1.RangeError;

  var toOffset = function toOffset(it, BYTES) {
    var offset = toPositiveInteger(it);
    if (offset % BYTES) throw RangeError$3('Wrong offset');
    return offset;
  };

  var aTypedArrayConstructor$2 = arrayBufferViewCore.aTypedArrayConstructor;

  var typedArrayFrom = function from(source
  /* , mapfn, thisArg */
  ) {
    var C = aConstructor(this);
    var O = toObject(source);
    var argumentsLength = arguments.length;
    var mapfn = argumentsLength > 1 ? arguments[1] : undefined;
    var mapping = mapfn !== undefined;
    var iteratorMethod = getIteratorMethod(O);
    var i, length, result, step, iterator, next;

    if (iteratorMethod && !isArrayIteratorMethod(iteratorMethod)) {
      iterator = getIterator(O, iteratorMethod);
      next = iterator.next;
      O = [];

      while (!(step = functionCall(next, iterator)).done) {
        O.push(step.value);
      }
    }

    if (mapping && argumentsLength > 2) {
      mapfn = functionBindContext(mapfn, arguments[2]);
    }

    length = lengthOfArrayLike(O);
    result = new (aTypedArrayConstructor$2(C))(length);

    for (i = 0; length > i; i++) {
      result[i] = mapping ? mapfn(O[i], i) : O[i];
    }

    return result;
  };

  var typedArrayConstructor = createCommonjsModule(function (module) {

    var getOwnPropertyNames = objectGetOwnPropertyNames.f;
    var forEach = arrayIteration.forEach;
    var getInternalState = internalState.get;
    var setInternalState = internalState.set;
    var nativeDefineProperty = objectDefineProperty.f;
    var nativeGetOwnPropertyDescriptor = objectGetOwnPropertyDescriptor.f;
    var round = Math.round;
    var RangeError = global$1.RangeError;
    var ArrayBuffer = arrayBuffer.ArrayBuffer;
    var ArrayBufferPrototype = ArrayBuffer.prototype;
    var DataView = arrayBuffer.DataView;
    var NATIVE_ARRAY_BUFFER_VIEWS = arrayBufferViewCore.NATIVE_ARRAY_BUFFER_VIEWS;
    var TYPED_ARRAY_CONSTRUCTOR = arrayBufferViewCore.TYPED_ARRAY_CONSTRUCTOR;
    var TYPED_ARRAY_TAG = arrayBufferViewCore.TYPED_ARRAY_TAG;
    var TypedArray = arrayBufferViewCore.TypedArray;
    var TypedArrayPrototype = arrayBufferViewCore.TypedArrayPrototype;
    var aTypedArrayConstructor = arrayBufferViewCore.aTypedArrayConstructor;
    var isTypedArray = arrayBufferViewCore.isTypedArray;
    var BYTES_PER_ELEMENT = 'BYTES_PER_ELEMENT';
    var WRONG_LENGTH = 'Wrong length';

    var fromList = function fromList(C, list) {
      aTypedArrayConstructor(C);
      var index = 0;
      var length = list.length;
      var result = new C(length);

      while (length > index) {
        result[index] = list[index++];
      }

      return result;
    };

    var addGetter = function addGetter(it, key) {
      nativeDefineProperty(it, key, {
        get: function get() {
          return getInternalState(this)[key];
        }
      });
    };

    var isArrayBuffer = function isArrayBuffer(it) {
      var klass;
      return objectIsPrototypeOf(ArrayBufferPrototype, it) || (klass = classof(it)) == 'ArrayBuffer' || klass == 'SharedArrayBuffer';
    };

    var isTypedArrayIndex = function isTypedArrayIndex(target, key) {
      return isTypedArray(target) && !isSymbol(key) && key in target && isIntegralNumber(+key) && key >= 0;
    };

    var wrappedGetOwnPropertyDescriptor = function getOwnPropertyDescriptor(target, key) {
      key = toPropertyKey(key);
      return isTypedArrayIndex(target, key) ? createPropertyDescriptor(2, target[key]) : nativeGetOwnPropertyDescriptor(target, key);
    };

    var wrappedDefineProperty = function defineProperty(target, key, descriptor) {
      key = toPropertyKey(key);

      if (isTypedArrayIndex(target, key) && isObject(descriptor) && hasOwnProperty_1(descriptor, 'value') && !hasOwnProperty_1(descriptor, 'get') && !hasOwnProperty_1(descriptor, 'set') // TODO: add validation descriptor w/o calling accessors
      && !descriptor.configurable && (!hasOwnProperty_1(descriptor, 'writable') || descriptor.writable) && (!hasOwnProperty_1(descriptor, 'enumerable') || descriptor.enumerable)) {
        target[key] = descriptor.value;
        return target;
      }

      return nativeDefineProperty(target, key, descriptor);
    };

    if (descriptors) {
      if (!NATIVE_ARRAY_BUFFER_VIEWS) {
        objectGetOwnPropertyDescriptor.f = wrappedGetOwnPropertyDescriptor;
        objectDefineProperty.f = wrappedDefineProperty;
        addGetter(TypedArrayPrototype, 'buffer');
        addGetter(TypedArrayPrototype, 'byteOffset');
        addGetter(TypedArrayPrototype, 'byteLength');
        addGetter(TypedArrayPrototype, 'length');
      }

      _export({
        target: 'Object',
        stat: true,
        forced: !NATIVE_ARRAY_BUFFER_VIEWS
      }, {
        getOwnPropertyDescriptor: wrappedGetOwnPropertyDescriptor,
        defineProperty: wrappedDefineProperty
      });

      module.exports = function (TYPE, wrapper, CLAMPED) {
        var BYTES = TYPE.match(/\d+$/)[0] / 8;
        var CONSTRUCTOR_NAME = TYPE + (CLAMPED ? 'Clamped' : '') + 'Array';
        var GETTER = 'get' + TYPE;
        var SETTER = 'set' + TYPE;
        var NativeTypedArrayConstructor = global$1[CONSTRUCTOR_NAME];
        var TypedArrayConstructor = NativeTypedArrayConstructor;
        var TypedArrayConstructorPrototype = TypedArrayConstructor && TypedArrayConstructor.prototype;
        var exported = {};

        var getter = function getter(that, index) {
          var data = getInternalState(that);
          return data.view[GETTER](index * BYTES + data.byteOffset, true);
        };

        var setter = function setter(that, index, value) {
          var data = getInternalState(that);
          if (CLAMPED) value = (value = round(value)) < 0 ? 0 : value > 0xFF ? 0xFF : value & 0xFF;
          data.view[SETTER](index * BYTES + data.byteOffset, value, true);
        };

        var addElement = function addElement(that, index) {
          nativeDefineProperty(that, index, {
            get: function get() {
              return getter(this, index);
            },
            set: function set(value) {
              return setter(this, index, value);
            },
            enumerable: true
          });
        };

        if (!NATIVE_ARRAY_BUFFER_VIEWS) {
          TypedArrayConstructor = wrapper(function (that, data, offset, $length) {
            anInstance(that, TypedArrayConstructorPrototype);
            var index = 0;
            var byteOffset = 0;
            var buffer, byteLength, length;

            if (!isObject(data)) {
              length = toIndex(data);
              byteLength = length * BYTES;
              buffer = new ArrayBuffer(byteLength);
            } else if (isArrayBuffer(data)) {
              buffer = data;
              byteOffset = toOffset(offset, BYTES);
              var $len = data.byteLength;

              if ($length === undefined) {
                if ($len % BYTES) throw RangeError(WRONG_LENGTH);
                byteLength = $len - byteOffset;
                if (byteLength < 0) throw RangeError(WRONG_LENGTH);
              } else {
                byteLength = toLength($length) * BYTES;
                if (byteLength + byteOffset > $len) throw RangeError(WRONG_LENGTH);
              }

              length = byteLength / BYTES;
            } else if (isTypedArray(data)) {
              return fromList(TypedArrayConstructor, data);
            } else {
              return functionCall(typedArrayFrom, TypedArrayConstructor, data);
            }

            setInternalState(that, {
              buffer: buffer,
              byteOffset: byteOffset,
              byteLength: byteLength,
              length: length,
              view: new DataView(buffer)
            });

            while (index < length) {
              addElement(that, index++);
            }
          });
          if (objectSetPrototypeOf) objectSetPrototypeOf(TypedArrayConstructor, TypedArray);
          TypedArrayConstructorPrototype = TypedArrayConstructor.prototype = objectCreate(TypedArrayPrototype);
        } else if (typedArrayConstructorsRequireWrappers) {
          TypedArrayConstructor = wrapper(function (dummy, data, typedArrayOffset, $length) {
            anInstance(dummy, TypedArrayConstructorPrototype);
            return inheritIfRequired(function () {
              if (!isObject(data)) return new NativeTypedArrayConstructor(toIndex(data));
              if (isArrayBuffer(data)) return $length !== undefined ? new NativeTypedArrayConstructor(data, toOffset(typedArrayOffset, BYTES), $length) : typedArrayOffset !== undefined ? new NativeTypedArrayConstructor(data, toOffset(typedArrayOffset, BYTES)) : new NativeTypedArrayConstructor(data);
              if (isTypedArray(data)) return fromList(TypedArrayConstructor, data);
              return functionCall(typedArrayFrom, TypedArrayConstructor, data);
            }(), dummy, TypedArrayConstructor);
          });
          if (objectSetPrototypeOf) objectSetPrototypeOf(TypedArrayConstructor, TypedArray);
          forEach(getOwnPropertyNames(NativeTypedArrayConstructor), function (key) {
            if (!(key in TypedArrayConstructor)) {
              createNonEnumerableProperty(TypedArrayConstructor, key, NativeTypedArrayConstructor[key]);
            }
          });
          TypedArrayConstructor.prototype = TypedArrayConstructorPrototype;
        }

        if (TypedArrayConstructorPrototype.constructor !== TypedArrayConstructor) {
          createNonEnumerableProperty(TypedArrayConstructorPrototype, 'constructor', TypedArrayConstructor);
        }

        createNonEnumerableProperty(TypedArrayConstructorPrototype, TYPED_ARRAY_CONSTRUCTOR, TypedArrayConstructor);

        if (TYPED_ARRAY_TAG) {
          createNonEnumerableProperty(TypedArrayConstructorPrototype, TYPED_ARRAY_TAG, CONSTRUCTOR_NAME);
        }

        exported[CONSTRUCTOR_NAME] = TypedArrayConstructor;
        _export({
          global: true,
          forced: TypedArrayConstructor != NativeTypedArrayConstructor,
          sham: !NATIVE_ARRAY_BUFFER_VIEWS
        }, exported);

        if (!(BYTES_PER_ELEMENT in TypedArrayConstructor)) {
          createNonEnumerableProperty(TypedArrayConstructor, BYTES_PER_ELEMENT, BYTES);
        }

        if (!(BYTES_PER_ELEMENT in TypedArrayConstructorPrototype)) {
          createNonEnumerableProperty(TypedArrayConstructorPrototype, BYTES_PER_ELEMENT, BYTES);
        }

        setSpecies(CONSTRUCTOR_NAME);
      };
    } else module.exports = function () {
      /* empty */
    };
  });

  // https://tc39.es/ecma262/#sec-typedarray-objects

  typedArrayConstructor('Float32', function (init) {
    return function Float32Array(data, byteOffset, length) {
      return init(this, data, byteOffset, length);
    };
  });

  // https://tc39.es/ecma262/#sec-typedarray-objects

  typedArrayConstructor('Float64', function (init) {
    return function Float64Array(data, byteOffset, length) {
      return init(this, data, byteOffset, length);
    };
  });

  // https://tc39.es/ecma262/#sec-typedarray-objects

  typedArrayConstructor('Int8', function (init) {
    return function Int8Array(data, byteOffset, length) {
      return init(this, data, byteOffset, length);
    };
  });

  // https://tc39.es/ecma262/#sec-typedarray-objects

  typedArrayConstructor('Int16', function (init) {
    return function Int16Array(data, byteOffset, length) {
      return init(this, data, byteOffset, length);
    };
  });

  // https://tc39.es/ecma262/#sec-typedarray-objects

  typedArrayConstructor('Int32', function (init) {
    return function Int32Array(data, byteOffset, length) {
      return init(this, data, byteOffset, length);
    };
  });

  // https://tc39.es/ecma262/#sec-typedarray-objects

  typedArrayConstructor('Uint8', function (init) {
    return function Uint8Array(data, byteOffset, length) {
      return init(this, data, byteOffset, length);
    };
  });

  // https://tc39.es/ecma262/#sec-typedarray-objects

  typedArrayConstructor('Uint8', function (init) {
    return function Uint8ClampedArray(data, byteOffset, length) {
      return init(this, data, byteOffset, length);
    };
  }, true);

  // https://tc39.es/ecma262/#sec-typedarray-objects

  typedArrayConstructor('Uint16', function (init) {
    return function Uint16Array(data, byteOffset, length) {
      return init(this, data, byteOffset, length);
    };
  });

  // https://tc39.es/ecma262/#sec-typedarray-objects

  typedArrayConstructor('Uint32', function (init) {
    return function Uint32Array(data, byteOffset, length) {
      return init(this, data, byteOffset, length);
    };
  });

  var aTypedArray$m = arrayBufferViewCore.aTypedArray;
  var exportTypedArrayMethod$n = arrayBufferViewCore.exportTypedArrayMethod; // `%TypedArray%.prototype.at` method
  // https://github.com/tc39/proposal-relative-indexing-method

  exportTypedArrayMethod$n('at', function at(index) {
    var O = aTypedArray$m(this);
    var len = lengthOfArrayLike(O);
    var relativeIndex = toIntegerOrInfinity(index);
    var k = relativeIndex >= 0 ? relativeIndex : len + relativeIndex;
    return k < 0 || k >= len ? undefined : O[k];
  });

  var u$ArrayCopyWithin = functionUncurryThis(arrayCopyWithin);
  var aTypedArray$l = arrayBufferViewCore.aTypedArray;
  var exportTypedArrayMethod$m = arrayBufferViewCore.exportTypedArrayMethod; // `%TypedArray%.prototype.copyWithin` method
  // https://tc39.es/ecma262/#sec-%typedarray%.prototype.copywithin

  exportTypedArrayMethod$m('copyWithin', function copyWithin(target, start
  /* , end */
  ) {
    return u$ArrayCopyWithin(aTypedArray$l(this), target, start, arguments.length > 2 ? arguments[2] : undefined);
  });

  var $every = arrayIteration.every;
  var aTypedArray$k = arrayBufferViewCore.aTypedArray;
  var exportTypedArrayMethod$l = arrayBufferViewCore.exportTypedArrayMethod; // `%TypedArray%.prototype.every` method
  // https://tc39.es/ecma262/#sec-%typedarray%.prototype.every

  exportTypedArrayMethod$l('every', function every(callbackfn
  /* , thisArg */
  ) {
    return $every(aTypedArray$k(this), callbackfn, arguments.length > 1 ? arguments[1] : undefined);
  });

  var aTypedArray$j = arrayBufferViewCore.aTypedArray;
  var exportTypedArrayMethod$k = arrayBufferViewCore.exportTypedArrayMethod; // `%TypedArray%.prototype.fill` method
  // https://tc39.es/ecma262/#sec-%typedarray%.prototype.fill

  exportTypedArrayMethod$k('fill', function fill(value
  /* , start, end */
  ) {
    var length = arguments.length;
    return functionCall(arrayFill, aTypedArray$j(this), value, length > 1 ? arguments[1] : undefined, length > 2 ? arguments[2] : undefined);
  });

  var arrayFromConstructorAndList = function arrayFromConstructorAndList(Constructor, list) {
    var index = 0;
    var length = lengthOfArrayLike(list);
    var result = new Constructor(length);

    while (length > index) {
      result[index] = list[index++];
    }

    return result;
  };

  var TYPED_ARRAY_CONSTRUCTOR = arrayBufferViewCore.TYPED_ARRAY_CONSTRUCTOR;
  var aTypedArrayConstructor$1 = arrayBufferViewCore.aTypedArrayConstructor; // a part of `TypedArraySpeciesCreate` abstract operation
  // https://tc39.es/ecma262/#typedarray-species-create

  var typedArraySpeciesConstructor = function typedArraySpeciesConstructor(originalArray) {
    return aTypedArrayConstructor$1(speciesConstructor(originalArray, originalArray[TYPED_ARRAY_CONSTRUCTOR]));
  };

  var typedArrayFromSpeciesAndList = function typedArrayFromSpeciesAndList(instance, list) {
    return arrayFromConstructorAndList(typedArraySpeciesConstructor(instance), list);
  };

  var $filter = arrayIteration.filter;
  var aTypedArray$i = arrayBufferViewCore.aTypedArray;
  var exportTypedArrayMethod$j = arrayBufferViewCore.exportTypedArrayMethod; // `%TypedArray%.prototype.filter` method
  // https://tc39.es/ecma262/#sec-%typedarray%.prototype.filter

  exportTypedArrayMethod$j('filter', function filter(callbackfn
  /* , thisArg */
  ) {
    var list = $filter(aTypedArray$i(this), callbackfn, arguments.length > 1 ? arguments[1] : undefined);
    return typedArrayFromSpeciesAndList(this, list);
  });

  var $find = arrayIteration.find;
  var aTypedArray$h = arrayBufferViewCore.aTypedArray;
  var exportTypedArrayMethod$i = arrayBufferViewCore.exportTypedArrayMethod; // `%TypedArray%.prototype.find` method
  // https://tc39.es/ecma262/#sec-%typedarray%.prototype.find

  exportTypedArrayMethod$i('find', function find(predicate
  /* , thisArg */
  ) {
    return $find(aTypedArray$h(this), predicate, arguments.length > 1 ? arguments[1] : undefined);
  });

  var $findIndex = arrayIteration.findIndex;
  var aTypedArray$g = arrayBufferViewCore.aTypedArray;
  var exportTypedArrayMethod$h = arrayBufferViewCore.exportTypedArrayMethod; // `%TypedArray%.prototype.findIndex` method
  // https://tc39.es/ecma262/#sec-%typedarray%.prototype.findindex

  exportTypedArrayMethod$h('findIndex', function findIndex(predicate
  /* , thisArg */
  ) {
    return $findIndex(aTypedArray$g(this), predicate, arguments.length > 1 ? arguments[1] : undefined);
  });

  var $forEach$1 = arrayIteration.forEach;
  var aTypedArray$f = arrayBufferViewCore.aTypedArray;
  var exportTypedArrayMethod$g = arrayBufferViewCore.exportTypedArrayMethod; // `%TypedArray%.prototype.forEach` method
  // https://tc39.es/ecma262/#sec-%typedarray%.prototype.foreach

  exportTypedArrayMethod$g('forEach', function forEach(callbackfn
  /* , thisArg */
  ) {
    $forEach$1(aTypedArray$f(this), callbackfn, arguments.length > 1 ? arguments[1] : undefined);
  });

  var exportTypedArrayStaticMethod$1 = arrayBufferViewCore.exportTypedArrayStaticMethod; // `%TypedArray%.from` method
  // https://tc39.es/ecma262/#sec-%typedarray%.from

  exportTypedArrayStaticMethod$1('from', typedArrayFrom, typedArrayConstructorsRequireWrappers);

  var $includes = arrayIncludes.includes;
  var aTypedArray$e = arrayBufferViewCore.aTypedArray;
  var exportTypedArrayMethod$f = arrayBufferViewCore.exportTypedArrayMethod; // `%TypedArray%.prototype.includes` method
  // https://tc39.es/ecma262/#sec-%typedarray%.prototype.includes

  exportTypedArrayMethod$f('includes', function includes(searchElement
  /* , fromIndex */
  ) {
    return $includes(aTypedArray$e(this), searchElement, arguments.length > 1 ? arguments[1] : undefined);
  });

  var $indexOf = arrayIncludes.indexOf;
  var aTypedArray$d = arrayBufferViewCore.aTypedArray;
  var exportTypedArrayMethod$e = arrayBufferViewCore.exportTypedArrayMethod; // `%TypedArray%.prototype.indexOf` method
  // https://tc39.es/ecma262/#sec-%typedarray%.prototype.indexof

  exportTypedArrayMethod$e('indexOf', function indexOf(searchElement
  /* , fromIndex */
  ) {
    return $indexOf(aTypedArray$d(this), searchElement, arguments.length > 1 ? arguments[1] : undefined);
  });

  var ITERATOR$3 = wellKnownSymbol('iterator');
  var Uint8Array$1 = global$1.Uint8Array;
  var arrayValues = functionUncurryThis(es_array_iterator.values);
  var arrayKeys = functionUncurryThis(es_array_iterator.keys);
  var arrayEntries = functionUncurryThis(es_array_iterator.entries);
  var aTypedArray$c = arrayBufferViewCore.aTypedArray;
  var exportTypedArrayMethod$d = arrayBufferViewCore.exportTypedArrayMethod;
  var TypedArrayPrototype = Uint8Array$1 && Uint8Array$1.prototype;
  var GENERIC = !fails(function () {
    TypedArrayPrototype[ITERATOR$3].call([1]);
  });
  var ITERATOR_IS_VALUES = !!TypedArrayPrototype && TypedArrayPrototype.values && TypedArrayPrototype[ITERATOR$3] === TypedArrayPrototype.values && TypedArrayPrototype.values.name === 'values';

  var typedArrayValues = function values() {
    return arrayValues(aTypedArray$c(this));
  }; // `%TypedArray%.prototype.entries` method
  // https://tc39.es/ecma262/#sec-%typedarray%.prototype.entries


  exportTypedArrayMethod$d('entries', function entries() {
    return arrayEntries(aTypedArray$c(this));
  }, GENERIC); // `%TypedArray%.prototype.keys` method
  // https://tc39.es/ecma262/#sec-%typedarray%.prototype.keys

  exportTypedArrayMethod$d('keys', function keys() {
    return arrayKeys(aTypedArray$c(this));
  }, GENERIC); // `%TypedArray%.prototype.values` method
  // https://tc39.es/ecma262/#sec-%typedarray%.prototype.values

  exportTypedArrayMethod$d('values', typedArrayValues, GENERIC || !ITERATOR_IS_VALUES, {
    name: 'values'
  }); // `%TypedArray%.prototype[@@iterator]` method
  // https://tc39.es/ecma262/#sec-%typedarray%.prototype-@@iterator

  exportTypedArrayMethod$d(ITERATOR$3, typedArrayValues, GENERIC || !ITERATOR_IS_VALUES, {
    name: 'values'
  });

  var aTypedArray$b = arrayBufferViewCore.aTypedArray;
  var exportTypedArrayMethod$c = arrayBufferViewCore.exportTypedArrayMethod;
  var $join = functionUncurryThis([].join); // `%TypedArray%.prototype.join` method
  // https://tc39.es/ecma262/#sec-%typedarray%.prototype.join

  exportTypedArrayMethod$c('join', function join(separator) {
    return $join(aTypedArray$b(this), separator);
  });

  var aTypedArray$a = arrayBufferViewCore.aTypedArray;
  var exportTypedArrayMethod$b = arrayBufferViewCore.exportTypedArrayMethod; // `%TypedArray%.prototype.lastIndexOf` method
  // https://tc39.es/ecma262/#sec-%typedarray%.prototype.lastindexof

  exportTypedArrayMethod$b('lastIndexOf', function lastIndexOf(searchElement
  /* , fromIndex */
  ) {
    var length = arguments.length;
    return functionApply(arrayLastIndexOf, aTypedArray$a(this), length > 1 ? [searchElement, arguments[1]] : [searchElement]);
  });

  var $map = arrayIteration.map;
  var aTypedArray$9 = arrayBufferViewCore.aTypedArray;
  var exportTypedArrayMethod$a = arrayBufferViewCore.exportTypedArrayMethod; // `%TypedArray%.prototype.map` method
  // https://tc39.es/ecma262/#sec-%typedarray%.prototype.map

  exportTypedArrayMethod$a('map', function map(mapfn
  /* , thisArg */
  ) {
    return $map(aTypedArray$9(this), mapfn, arguments.length > 1 ? arguments[1] : undefined, function (O, length) {
      return new (typedArraySpeciesConstructor(O))(length);
    });
  });

  var aTypedArrayConstructor = arrayBufferViewCore.aTypedArrayConstructor;
  var exportTypedArrayStaticMethod = arrayBufferViewCore.exportTypedArrayStaticMethod; // `%TypedArray%.of` method
  // https://tc39.es/ecma262/#sec-%typedarray%.of

  exportTypedArrayStaticMethod('of', function
    /* ...items */
  of() {
    var index = 0;
    var length = arguments.length;
    var result = new (aTypedArrayConstructor(this))(length);

    while (length > index) {
      result[index] = arguments[index++];
    }

    return result;
  }, typedArrayConstructorsRequireWrappers);

  var $reduce = arrayReduce.left;
  var aTypedArray$8 = arrayBufferViewCore.aTypedArray;
  var exportTypedArrayMethod$9 = arrayBufferViewCore.exportTypedArrayMethod; // `%TypedArray%.prototype.reduce` method
  // https://tc39.es/ecma262/#sec-%typedarray%.prototype.reduce

  exportTypedArrayMethod$9('reduce', function reduce(callbackfn
  /* , initialValue */
  ) {
    var length = arguments.length;
    return $reduce(aTypedArray$8(this), callbackfn, length, length > 1 ? arguments[1] : undefined);
  });

  var $reduceRight = arrayReduce.right;
  var aTypedArray$7 = arrayBufferViewCore.aTypedArray;
  var exportTypedArrayMethod$8 = arrayBufferViewCore.exportTypedArrayMethod; // `%TypedArray%.prototype.reduceRicht` method
  // https://tc39.es/ecma262/#sec-%typedarray%.prototype.reduceright

  exportTypedArrayMethod$8('reduceRight', function reduceRight(callbackfn
  /* , initialValue */
  ) {
    var length = arguments.length;
    return $reduceRight(aTypedArray$7(this), callbackfn, length, length > 1 ? arguments[1] : undefined);
  });

  var aTypedArray$6 = arrayBufferViewCore.aTypedArray;
  var exportTypedArrayMethod$7 = arrayBufferViewCore.exportTypedArrayMethod;
  var floor$2 = Math.floor; // `%TypedArray%.prototype.reverse` method
  // https://tc39.es/ecma262/#sec-%typedarray%.prototype.reverse

  exportTypedArrayMethod$7('reverse', function reverse() {
    var that = this;
    var length = aTypedArray$6(that).length;
    var middle = floor$2(length / 2);
    var index = 0;
    var value;

    while (index < middle) {
      value = that[index];
      that[index++] = that[--length];
      that[length] = value;
    }

    return that;
  });

  var RangeError$2 = global$1.RangeError;
  var Int8Array$2 = global$1.Int8Array;
  var Int8ArrayPrototype = Int8Array$2 && Int8Array$2.prototype;
  var $set = Int8ArrayPrototype && Int8ArrayPrototype.set;
  var aTypedArray$5 = arrayBufferViewCore.aTypedArray;
  var exportTypedArrayMethod$6 = arrayBufferViewCore.exportTypedArrayMethod;
  var WORKS_WITH_OBJECTS_AND_GEERIC_ON_TYPED_ARRAYS = !fails(function () {
    // eslint-disable-next-line es/no-typed-arrays -- required for testing
    var array = new Uint8ClampedArray(2);
    functionCall($set, array, {
      length: 1,
      0: 3
    }, 1);
    return array[1] !== 3;
  }); // https://bugs.chromium.org/p/v8/issues/detail?id=11294 and other

  var TO_OBJECT_BUG = WORKS_WITH_OBJECTS_AND_GEERIC_ON_TYPED_ARRAYS && arrayBufferViewCore.NATIVE_ARRAY_BUFFER_VIEWS && fails(function () {
    var array = new Int8Array$2(2);
    array.set(1);
    array.set('2', 1);
    return array[0] !== 0 || array[1] !== 2;
  }); // `%TypedArray%.prototype.set` method
  // https://tc39.es/ecma262/#sec-%typedarray%.prototype.set

  exportTypedArrayMethod$6('set', function set(arrayLike
  /* , offset */
  ) {
    aTypedArray$5(this);
    var offset = toOffset(arguments.length > 1 ? arguments[1] : undefined, 1);
    var src = toObject(arrayLike);
    if (WORKS_WITH_OBJECTS_AND_GEERIC_ON_TYPED_ARRAYS) return functionCall($set, this, src, offset);
    var length = this.length;
    var len = lengthOfArrayLike(src);
    var index = 0;
    if (len + offset > length) throw RangeError$2('Wrong length');

    while (index < len) {
      this[offset + index] = src[index++];
    }
  }, !WORKS_WITH_OBJECTS_AND_GEERIC_ON_TYPED_ARRAYS || TO_OBJECT_BUG);

  var aTypedArray$4 = arrayBufferViewCore.aTypedArray;
  var exportTypedArrayMethod$5 = arrayBufferViewCore.exportTypedArrayMethod;
  var FORCED$2 = fails(function () {
    // eslint-disable-next-line es/no-typed-arrays -- required for testing
    new Int8Array(1).slice();
  }); // `%TypedArray%.prototype.slice` method
  // https://tc39.es/ecma262/#sec-%typedarray%.prototype.slice

  exportTypedArrayMethod$5('slice', function slice(start, end) {
    var list = arraySlice$1(aTypedArray$4(this), start, end);
    var C = typedArraySpeciesConstructor(this);
    var index = 0;
    var length = list.length;
    var result = new C(length);

    while (length > index) {
      result[index] = list[index++];
    }

    return result;
  }, FORCED$2);

  var $some = arrayIteration.some;
  var aTypedArray$3 = arrayBufferViewCore.aTypedArray;
  var exportTypedArrayMethod$4 = arrayBufferViewCore.exportTypedArrayMethod; // `%TypedArray%.prototype.some` method
  // https://tc39.es/ecma262/#sec-%typedarray%.prototype.some

  exportTypedArrayMethod$4('some', function some(callbackfn
  /* , thisArg */
  ) {
    return $some(aTypedArray$3(this), callbackfn, arguments.length > 1 ? arguments[1] : undefined);
  });

  var Array$1 = global$1.Array;
  var aTypedArray$2 = arrayBufferViewCore.aTypedArray;
  var exportTypedArrayMethod$3 = arrayBufferViewCore.exportTypedArrayMethod;
  var Uint16Array = global$1.Uint16Array;
  var un$Sort = Uint16Array && functionUncurryThis(Uint16Array.prototype.sort); // WebKit

  var ACCEPT_INCORRECT_ARGUMENTS = !!un$Sort && !(fails(function () {
    un$Sort(new Uint16Array(2), null);
  }) && fails(function () {
    un$Sort(new Uint16Array(2), {});
  }));
  var STABLE_SORT = !!un$Sort && !fails(function () {
    // feature detection can be too slow, so check engines versions
    if (engineV8Version) return engineV8Version < 74;
    if (engineFfVersion) return engineFfVersion < 67;
    if (engineIsIeOrEdge) return true;
    if (engineWebkitVersion) return engineWebkitVersion < 602;
    var array = new Uint16Array(516);
    var expected = Array$1(516);
    var index, mod;

    for (index = 0; index < 516; index++) {
      mod = index % 4;
      array[index] = 515 - index;
      expected[index] = index - 2 * mod + 3;
    }

    un$Sort(array, function (a, b) {
      return (a / 4 | 0) - (b / 4 | 0);
    });

    for (index = 0; index < 516; index++) {
      if (array[index] !== expected[index]) return true;
    }
  });

  var getSortCompare = function getSortCompare(comparefn) {
    return function (x, y) {
      if (comparefn !== undefined) return +comparefn(x, y) || 0; // eslint-disable-next-line no-self-compare -- NaN check

      if (y !== y) return -1; // eslint-disable-next-line no-self-compare -- NaN check

      if (x !== x) return 1;
      if (x === 0 && y === 0) return 1 / x > 0 && 1 / y < 0 ? 1 : -1;
      return x > y;
    };
  }; // `%TypedArray%.prototype.sort` method
  // https://tc39.es/ecma262/#sec-%typedarray%.prototype.sort


  exportTypedArrayMethod$3('sort', function sort(comparefn) {
    if (comparefn !== undefined) aCallable(comparefn);
    if (STABLE_SORT) return un$Sort(this, comparefn);
    return arraySort(aTypedArray$2(this), getSortCompare(comparefn));
  }, !STABLE_SORT || ACCEPT_INCORRECT_ARGUMENTS);

  var aTypedArray$1 = arrayBufferViewCore.aTypedArray;
  var exportTypedArrayMethod$2 = arrayBufferViewCore.exportTypedArrayMethod; // `%TypedArray%.prototype.subarray` method
  // https://tc39.es/ecma262/#sec-%typedarray%.prototype.subarray

  exportTypedArrayMethod$2('subarray', function subarray(begin, end) {
    var O = aTypedArray$1(this);
    var length = O.length;
    var beginIndex = toAbsoluteIndex(begin, length);
    var C = typedArraySpeciesConstructor(O);
    return new C(O.buffer, O.byteOffset + beginIndex * O.BYTES_PER_ELEMENT, toLength((end === undefined ? length : toAbsoluteIndex(end, length)) - beginIndex));
  });

  var Int8Array$1 = global$1.Int8Array;
  var aTypedArray = arrayBufferViewCore.aTypedArray;
  var exportTypedArrayMethod$1 = arrayBufferViewCore.exportTypedArrayMethod;
  var $toLocaleString = [].toLocaleString; // iOS Safari 6.x fails here

  var TO_LOCALE_STRING_BUG = !!Int8Array$1 && fails(function () {
    $toLocaleString.call(new Int8Array$1(1));
  });
  var FORCED$1 = fails(function () {
    return [1, 2].toLocaleString() != new Int8Array$1([1, 2]).toLocaleString();
  }) || !fails(function () {
    Int8Array$1.prototype.toLocaleString.call([1, 2]);
  }); // `%TypedArray%.prototype.toLocaleString` method
  // https://tc39.es/ecma262/#sec-%typedarray%.prototype.tolocalestring

  exportTypedArrayMethod$1('toLocaleString', function toLocaleString() {
    return functionApply($toLocaleString, TO_LOCALE_STRING_BUG ? arraySlice$1(aTypedArray(this)) : aTypedArray(this), arraySlice$1(arguments));
  }, FORCED$1);

  var exportTypedArrayMethod = arrayBufferViewCore.exportTypedArrayMethod;
  var Uint8Array = global$1.Uint8Array;
  var Uint8ArrayPrototype = Uint8Array && Uint8Array.prototype || {};
  var arrayToString = [].toString;
  var join$3 = functionUncurryThis([].join);

  if (fails(function () {
    arrayToString.call({});
  })) {
    arrayToString = function toString() {
      return join$3(this);
    };
  }

  var IS_NOT_ARRAY_METHOD = Uint8ArrayPrototype.toString != arrayToString; // `%TypedArray%.prototype.toString` method
  // https://tc39.es/ecma262/#sec-%typedarray%.prototype.tostring

  exportTypedArrayMethod('toString', arrayToString, IS_NOT_ARRAY_METHOD);

  var getWeakData = internalMetadata.getWeakData;
  var setInternalState$3 = internalState.set;
  var internalStateGetterFor = internalState.getterFor;
  var find$2 = arrayIteration.find;
  var findIndex = arrayIteration.findIndex;
  var splice$1 = functionUncurryThis([].splice);
  var id$1 = 0; // fallback for uncaught frozen keys

  var uncaughtFrozenStore = function uncaughtFrozenStore(store) {
    return store.frozen || (store.frozen = new UncaughtFrozenStore());
  };

  var UncaughtFrozenStore = function UncaughtFrozenStore() {
    this.entries = [];
  };

  var findUncaughtFrozen = function findUncaughtFrozen(store, key) {
    return find$2(store.entries, function (it) {
      return it[0] === key;
    });
  };

  UncaughtFrozenStore.prototype = {
    get: function get(key) {
      var entry = findUncaughtFrozen(this, key);
      if (entry) return entry[1];
    },
    has: function has(key) {
      return !!findUncaughtFrozen(this, key);
    },
    set: function set(key, value) {
      var entry = findUncaughtFrozen(this, key);
      if (entry) entry[1] = value;else this.entries.push([key, value]);
    },
    'delete': function _delete(key) {
      var index = findIndex(this.entries, function (it) {
        return it[0] === key;
      });
      if (~index) splice$1(this.entries, index, 1);
      return !!~index;
    }
  };
  var collectionWeak = {
    getConstructor: function getConstructor(wrapper, CONSTRUCTOR_NAME, IS_MAP, ADDER) {
      var Constructor = wrapper(function (that, iterable) {
        anInstance(that, Prototype);
        setInternalState$3(that, {
          type: CONSTRUCTOR_NAME,
          id: id$1++,
          frozen: undefined
        });
        if (iterable != undefined) iterate(iterable, that[ADDER], {
          that: that,
          AS_ENTRIES: IS_MAP
        });
      });
      var Prototype = Constructor.prototype;
      var getInternalState = internalStateGetterFor(CONSTRUCTOR_NAME);

      var define = function define(that, key, value) {
        var state = getInternalState(that);
        var data = getWeakData(anObject(key), true);
        if (data === true) uncaughtFrozenStore(state).set(key, value);else data[state.id] = value;
        return that;
      };

      redefineAll(Prototype, {
        // `{ WeakMap, WeakSet }.prototype.delete(key)` methods
        // https://tc39.es/ecma262/#sec-weakmap.prototype.delete
        // https://tc39.es/ecma262/#sec-weakset.prototype.delete
        'delete': function _delete(key) {
          var state = getInternalState(this);
          if (!isObject(key)) return false;
          var data = getWeakData(key);
          if (data === true) return uncaughtFrozenStore(state)['delete'](key);
          return data && hasOwnProperty_1(data, state.id) && delete data[state.id];
        },
        // `{ WeakMap, WeakSet }.prototype.has(key)` methods
        // https://tc39.es/ecma262/#sec-weakmap.prototype.has
        // https://tc39.es/ecma262/#sec-weakset.prototype.has
        has: function has(key) {
          var state = getInternalState(this);
          if (!isObject(key)) return false;
          var data = getWeakData(key);
          if (data === true) return uncaughtFrozenStore(state).has(key);
          return data && hasOwnProperty_1(data, state.id);
        }
      });
      redefineAll(Prototype, IS_MAP ? {
        // `WeakMap.prototype.get(key)` method
        // https://tc39.es/ecma262/#sec-weakmap.prototype.get
        get: function get(key) {
          var state = getInternalState(this);

          if (isObject(key)) {
            var data = getWeakData(key);
            if (data === true) return uncaughtFrozenStore(state).get(key);
            return data ? data[state.id] : undefined;
          }
        },
        // `WeakMap.prototype.set(key, value)` method
        // https://tc39.es/ecma262/#sec-weakmap.prototype.set
        set: function set(key, value) {
          return define(this, key, value);
        }
      } : {
        // `WeakSet.prototype.add(value)` method
        // https://tc39.es/ecma262/#sec-weakset.prototype.add
        add: function add(value) {
          return define(this, value, true);
        }
      });
      return Constructor;
    }
  };

  var enforceInternalState = internalState.enforce;
  var IS_IE11 = !global$1.ActiveXObject && 'ActiveXObject' in global$1;
  var InternalWeakMap;

  var wrapper = function wrapper(init) {
    return function WeakMap() {
      return init(this, arguments.length ? arguments[0] : undefined);
    };
  }; // `WeakMap` constructor
  // https://tc39.es/ecma262/#sec-weakmap-constructor


  var $WeakMap = collection('WeakMap', wrapper, collectionWeak); // IE11 WeakMap frozen keys fix
  // We can't use feature detection because it crash some old IE builds
  // https://github.com/zloirock/core-js/issues/485

  if (nativeWeakMap && IS_IE11) {
    InternalWeakMap = collectionWeak.getConstructor(wrapper, 'WeakMap', true);
    internalMetadata.enable();
    var WeakMapPrototype = $WeakMap.prototype;
    var nativeDelete = functionUncurryThis(WeakMapPrototype['delete']);
    var nativeHas = functionUncurryThis(WeakMapPrototype.has);
    var nativeGet = functionUncurryThis(WeakMapPrototype.get);
    var nativeSet = functionUncurryThis(WeakMapPrototype.set);
    redefineAll(WeakMapPrototype, {
      'delete': function _delete(key) {
        if (isObject(key) && !objectIsExtensible(key)) {
          var state = enforceInternalState(this);
          if (!state.frozen) state.frozen = new InternalWeakMap();
          return nativeDelete(this, key) || state.frozen['delete'](key);
        }

        return nativeDelete(this, key);
      },
      has: function has(key) {
        if (isObject(key) && !objectIsExtensible(key)) {
          var state = enforceInternalState(this);
          if (!state.frozen) state.frozen = new InternalWeakMap();
          return nativeHas(this, key) || state.frozen.has(key);
        }

        return nativeHas(this, key);
      },
      get: function get(key) {
        if (isObject(key) && !objectIsExtensible(key)) {
          var state = enforceInternalState(this);
          if (!state.frozen) state.frozen = new InternalWeakMap();
          return nativeHas(this, key) ? nativeGet(this, key) : state.frozen.get(key);
        }

        return nativeGet(this, key);
      },
      set: function set(key, value) {
        if (isObject(key) && !objectIsExtensible(key)) {
          var state = enforceInternalState(this);
          if (!state.frozen) state.frozen = new InternalWeakMap();
          nativeHas(this, key) ? nativeSet(this, key, value) : state.frozen.set(key, value);
        } else nativeSet(this, key, value);

        return this;
      }
    });
  }

  // https://tc39.es/ecma262/#sec-weakset-constructor


  collection('WeakSet', function (init) {
    return function WeakSet() {
      return init(this, arguments.length ? arguments[0] : undefined);
    };
  }, collectionWeak);

  // iterable DOM collections
  // flag - `iterable` interface - 'entries', 'keys', 'values', 'forEach' methods
  var domIterables = {
    CSSRuleList: 0,
    CSSStyleDeclaration: 0,
    CSSValueList: 0,
    ClientRectList: 0,
    DOMRectList: 0,
    DOMStringList: 0,
    DOMTokenList: 1,
    DataTransferItemList: 0,
    FileList: 0,
    HTMLAllCollection: 0,
    HTMLCollection: 0,
    HTMLFormElement: 0,
    HTMLSelectElement: 0,
    MediaList: 0,
    MimeTypeArray: 0,
    NamedNodeMap: 0,
    NodeList: 1,
    PaintRequestList: 0,
    Plugin: 0,
    PluginArray: 0,
    SVGLengthList: 0,
    SVGNumberList: 0,
    SVGPathSegList: 0,
    SVGPointList: 0,
    SVGStringList: 0,
    SVGTransformList: 0,
    SourceBufferList: 0,
    StyleSheetList: 0,
    TextTrackCueList: 0,
    TextTrackList: 0,
    TouchList: 0
  };

  var classList$1 = documentCreateElement('span').classList;
  var DOMTokenListPrototype = classList$1 && classList$1.constructor && classList$1.constructor.prototype;
  var domTokenListPrototype = DOMTokenListPrototype === Object.prototype ? undefined : DOMTokenListPrototype;

  var $forEach = arrayIteration.forEach;
  var STRICT_METHOD = arrayMethodIsStrict('forEach'); // `Array.prototype.forEach` method implementation
  // https://tc39.es/ecma262/#sec-array.prototype.foreach

  var arrayForEach = !STRICT_METHOD ? function forEach(callbackfn
  /* , thisArg */
  ) {
    return $forEach(this, callbackfn, arguments.length > 1 ? arguments[1] : undefined); // eslint-disable-next-line es/no-array-prototype-foreach -- safe
  } : [].forEach;

  var handlePrototype$1 = function handlePrototype(CollectionPrototype) {
    // some Chrome versions have non-configurable methods on DOMTokenList
    if (CollectionPrototype && CollectionPrototype.forEach !== arrayForEach) try {
      createNonEnumerableProperty(CollectionPrototype, 'forEach', arrayForEach);
    } catch (error) {
      CollectionPrototype.forEach = arrayForEach;
    }
  };

  for (var COLLECTION_NAME$1 in domIterables) {
    if (domIterables[COLLECTION_NAME$1]) {
      handlePrototype$1(global$1[COLLECTION_NAME$1] && global$1[COLLECTION_NAME$1].prototype);
    }
  }

  handlePrototype$1(domTokenListPrototype);

  var ITERATOR$2 = wellKnownSymbol('iterator');
  var TO_STRING_TAG = wellKnownSymbol('toStringTag');
  var ArrayValues = es_array_iterator.values;

  var handlePrototype = function handlePrototype(CollectionPrototype, COLLECTION_NAME) {
    if (CollectionPrototype) {
      // some Chrome versions have non-configurable methods on DOMTokenList
      if (CollectionPrototype[ITERATOR$2] !== ArrayValues) try {
        createNonEnumerableProperty(CollectionPrototype, ITERATOR$2, ArrayValues);
      } catch (error) {
        CollectionPrototype[ITERATOR$2] = ArrayValues;
      }

      if (!CollectionPrototype[TO_STRING_TAG]) {
        createNonEnumerableProperty(CollectionPrototype, TO_STRING_TAG, COLLECTION_NAME);
      }

      if (domIterables[COLLECTION_NAME]) for (var METHOD_NAME in es_array_iterator) {
        // some Chrome versions have non-configurable methods on DOMTokenList
        if (CollectionPrototype[METHOD_NAME] !== es_array_iterator[METHOD_NAME]) try {
          createNonEnumerableProperty(CollectionPrototype, METHOD_NAME, es_array_iterator[METHOD_NAME]);
        } catch (error) {
          CollectionPrototype[METHOD_NAME] = es_array_iterator[METHOD_NAME];
        }
      }
    }
  };

  for (var COLLECTION_NAME in domIterables) {
    handlePrototype(global$1[COLLECTION_NAME] && global$1[COLLECTION_NAME].prototype, COLLECTION_NAME);
  }

  handlePrototype(domTokenListPrototype, 'DOMTokenList');

  var tryNodeRequire = function tryNodeRequire(name) {
    try {
      // eslint-disable-next-line no-new-func -- safe
      if (engineIsNode) return Function('return require("' + name + '")')();
    } catch (error) {
      /* empty */
    }
  };

  var nativeErrorToString = Error.prototype.toString;
  var INCORRECT_TO_STRING$1 = fails(function () {
    if (descriptors) {
      // Chrome 32- incorrectly call accessor
      // eslint-disable-next-line es/no-object-defineproperty -- safe
      var object = objectCreate(Object.defineProperty({}, 'name', {
        get: function get() {
          return this === object;
        }
      }));
      if (nativeErrorToString.call(object) !== 'true') return true;
    } // FF10- does not properly handle non-strings


    return nativeErrorToString.call({
      message: 1,
      name: 2
    }) !== '2: 1' // IE8 does not properly handle defaults
    || nativeErrorToString.call({}) !== 'Error';
  });
  var errorToString = INCORRECT_TO_STRING$1 ? function toString() {
    var O = anObject(this);
    var name = normalizeStringArgument(O.name, 'Error');
    var message = normalizeStringArgument(O.message);
    return !name ? message : !message ? name : name + ': ' + message;
  } : nativeErrorToString;

  var domExceptionConstants = {
    IndexSizeError: {
      s: 'INDEX_SIZE_ERR',
      c: 1,
      m: 1
    },
    DOMStringSizeError: {
      s: 'DOMSTRING_SIZE_ERR',
      c: 2,
      m: 0
    },
    HierarchyRequestError: {
      s: 'HIERARCHY_REQUEST_ERR',
      c: 3,
      m: 1
    },
    WrongDocumentError: {
      s: 'WRONG_DOCUMENT_ERR',
      c: 4,
      m: 1
    },
    InvalidCharacterError: {
      s: 'INVALID_CHARACTER_ERR',
      c: 5,
      m: 1
    },
    NoDataAllowedError: {
      s: 'NO_DATA_ALLOWED_ERR',
      c: 6,
      m: 0
    },
    NoModificationAllowedError: {
      s: 'NO_MODIFICATION_ALLOWED_ERR',
      c: 7,
      m: 1
    },
    NotFoundError: {
      s: 'NOT_FOUND_ERR',
      c: 8,
      m: 1
    },
    NotSupportedError: {
      s: 'NOT_SUPPORTED_ERR',
      c: 9,
      m: 1
    },
    InUseAttributeError: {
      s: 'INUSE_ATTRIBUTE_ERR',
      c: 10,
      m: 1
    },
    InvalidStateError: {
      s: 'INVALID_STATE_ERR',
      c: 11,
      m: 1
    },
    SyntaxError: {
      s: 'SYNTAX_ERR',
      c: 12,
      m: 1
    },
    InvalidModificationError: {
      s: 'INVALID_MODIFICATION_ERR',
      c: 13,
      m: 1
    },
    NamespaceError: {
      s: 'NAMESPACE_ERR',
      c: 14,
      m: 1
    },
    InvalidAccessError: {
      s: 'INVALID_ACCESS_ERR',
      c: 15,
      m: 1
    },
    ValidationError: {
      s: 'VALIDATION_ERR',
      c: 16,
      m: 0
    },
    TypeMismatchError: {
      s: 'TYPE_MISMATCH_ERR',
      c: 17,
      m: 1
    },
    SecurityError: {
      s: 'SECURITY_ERR',
      c: 18,
      m: 1
    },
    NetworkError: {
      s: 'NETWORK_ERR',
      c: 19,
      m: 1
    },
    AbortError: {
      s: 'ABORT_ERR',
      c: 20,
      m: 1
    },
    URLMismatchError: {
      s: 'URL_MISMATCH_ERR',
      c: 21,
      m: 1
    },
    QuotaExceededError: {
      s: 'QUOTA_EXCEEDED_ERR',
      c: 22,
      m: 1
    },
    TimeoutError: {
      s: 'TIMEOUT_ERR',
      c: 23,
      m: 1
    },
    InvalidNodeTypeError: {
      s: 'INVALID_NODE_TYPE_ERR',
      c: 24,
      m: 1
    },
    DataCloneError: {
      s: 'DATA_CLONE_ERR',
      c: 25,
      m: 1
    }
  };

  var defineProperty$1 = objectDefineProperty.f;
  var defineProperties$1 = objectDefineProperties.f;
  var DOM_EXCEPTION$2 = 'DOMException';
  var DATA_CLONE_ERR = 'DATA_CLONE_ERR';
  var Error$3 = getBuiltIn('Error'); // NodeJS < 17.0 does not expose `DOMException` to global

  var NativeDOMException$1 = getBuiltIn(DOM_EXCEPTION$2) || function () {
    try {
      // NodeJS < 15.0 does not expose `MessageChannel` to global
      var MessageChannel = getBuiltIn('MessageChannel') || tryNodeRequire('worker_threads').MessageChannel; // eslint-disable-next-line es/no-weak-map, unicorn/require-post-message-target-origin -- safe

      new MessageChannel().port1.postMessage(new WeakMap());
    } catch (error) {
      if (error.name == DATA_CLONE_ERR && error.code == 25) return error.constructor;
    }
  }();

  var NativeDOMExceptionPrototype = NativeDOMException$1 && NativeDOMException$1.prototype;
  var ErrorPrototype = Error$3.prototype;
  var setInternalState$2 = internalState.set;
  var getInternalState = internalState.getterFor(DOM_EXCEPTION$2);
  var HAS_STACK = ('stack' in Error$3(DOM_EXCEPTION$2));

  var codeFor = function codeFor(name) {
    return hasOwnProperty_1(domExceptionConstants, name) && domExceptionConstants[name].m ? domExceptionConstants[name].c : 0;
  };

  var $DOMException$1 = function DOMException() {
    anInstance(this, DOMExceptionPrototype$1);
    var argumentsLength = arguments.length;
    var message = normalizeStringArgument(argumentsLength < 1 ? undefined : arguments[0]);
    var name = normalizeStringArgument(argumentsLength < 2 ? undefined : arguments[1], 'Error');
    var code = codeFor(name);
    setInternalState$2(this, {
      type: DOM_EXCEPTION$2,
      name: name,
      message: message,
      code: code
    });

    if (!descriptors) {
      this.name = name;
      this.message = message;
      this.code = code;
    }

    if (HAS_STACK) {
      var error = Error$3(message);
      error.name = DOM_EXCEPTION$2;
      defineProperty$1(this, 'stack', createPropertyDescriptor(1, clearErrorStack(error.stack, 1)));
    }
  };

  var DOMExceptionPrototype$1 = $DOMException$1.prototype = objectCreate(ErrorPrototype);

  var createGetterDescriptor = function createGetterDescriptor(get) {
    return {
      enumerable: true,
      configurable: true,
      get: get
    };
  };

  var getterFor = function getterFor(key) {
    return createGetterDescriptor(function () {
      return getInternalState(this)[key];
    });
  };

  if (descriptors) defineProperties$1(DOMExceptionPrototype$1, {
    name: getterFor('name'),
    message: getterFor('message'),
    code: getterFor('code')
  });
  defineProperty$1(DOMExceptionPrototype$1, 'constructor', createPropertyDescriptor(1, $DOMException$1)); // FF36- DOMException is a function, but can't be constructed

  var INCORRECT_CONSTRUCTOR = fails(function () {
    return !(new NativeDOMException$1() instanceof Error$3);
  }); // Safari 10.1 / Chrome 32- / IE8- DOMException.prototype.toString bugs

  var INCORRECT_TO_STRING = INCORRECT_CONSTRUCTOR || fails(function () {
    return ErrorPrototype.toString !== errorToString || String(new NativeDOMException$1(1, 2)) !== '2: 1';
  }); // Deno 1.6.3- DOMException.prototype.code just missed

  var INCORRECT_CODE = INCORRECT_CONSTRUCTOR || fails(function () {
    return new NativeDOMException$1(1, 'DataCloneError').code !== 25;
  }); // Deno 1.6.3- DOMException constants just missed

  INCORRECT_CONSTRUCTOR || NativeDOMException$1[DATA_CLONE_ERR] !== 25 || NativeDOMExceptionPrototype[DATA_CLONE_ERR] !== 25;
  var FORCED_CONSTRUCTOR$1 = INCORRECT_CONSTRUCTOR; // `DOMException` constructor
  // https://webidl.spec.whatwg.org/#idl-DOMException

  _export({
    global: true,
    forced: FORCED_CONSTRUCTOR$1
  }, {
    DOMException: FORCED_CONSTRUCTOR$1 ? $DOMException$1 : NativeDOMException$1
  });
  var PolyfilledDOMException$1 = getBuiltIn(DOM_EXCEPTION$2);
  var PolyfilledDOMExceptionPrototype$1 = PolyfilledDOMException$1.prototype;

  if (INCORRECT_TO_STRING && (NativeDOMException$1 === PolyfilledDOMException$1)) {
    redefine(PolyfilledDOMExceptionPrototype$1, 'toString', errorToString);
  }

  if (INCORRECT_CODE && descriptors && NativeDOMException$1 === PolyfilledDOMException$1) {
    defineProperty$1(PolyfilledDOMExceptionPrototype$1, 'code', createGetterDescriptor(function () {
      return codeFor(anObject(this).name);
    }));
  }

  for (var key$1 in domExceptionConstants) {
    if (hasOwnProperty_1(domExceptionConstants, key$1)) {
      var constant$7 = domExceptionConstants[key$1];
      var constantName$1 = constant$7.s;
      var descriptor = createPropertyDescriptor(6, constant$7.c);

      if (!hasOwnProperty_1(PolyfilledDOMException$1, constantName$1)) {
        defineProperty$1(PolyfilledDOMException$1, constantName$1, descriptor);
      }

      if (!hasOwnProperty_1(PolyfilledDOMExceptionPrototype$1, constantName$1)) {
        defineProperty$1(PolyfilledDOMExceptionPrototype$1, constantName$1, descriptor);
      }
    }
  }

  var defineProperty = objectDefineProperty.f;
  var DOM_EXCEPTION$1 = 'DOMException';
  var Error$2 = getBuiltIn('Error');
  var NativeDOMException = getBuiltIn(DOM_EXCEPTION$1);

  var $DOMException = function DOMException() {
    anInstance(this, DOMExceptionPrototype);
    var argumentsLength = arguments.length;
    var message = normalizeStringArgument(argumentsLength < 1 ? undefined : arguments[0]);
    var name = normalizeStringArgument(argumentsLength < 2 ? undefined : arguments[1], 'Error');
    var that = new NativeDOMException(message, name);
    var error = Error$2(message);
    error.name = DOM_EXCEPTION$1;
    defineProperty(that, 'stack', createPropertyDescriptor(1, clearErrorStack(error.stack, 1)));
    inheritIfRequired(that, this, $DOMException);
    return that;
  };

  var DOMExceptionPrototype = $DOMException.prototype = NativeDOMException.prototype;
  var ERROR_HAS_STACK = ('stack' in Error$2(DOM_EXCEPTION$1));
  var DOM_EXCEPTION_HAS_STACK = ('stack' in new NativeDOMException(1, 2));
  var FORCED_CONSTRUCTOR = ERROR_HAS_STACK && !DOM_EXCEPTION_HAS_STACK; // `DOMException` constructor patch for `.stack` where it's required
  // https://webidl.spec.whatwg.org/#es-DOMException-specialness

  _export({
    global: true,
    forced: FORCED_CONSTRUCTOR
  }, {
    // TODO: fix export logic
    DOMException: FORCED_CONSTRUCTOR ? $DOMException : NativeDOMException
  });
  var PolyfilledDOMException = getBuiltIn(DOM_EXCEPTION$1);
  var PolyfilledDOMExceptionPrototype = PolyfilledDOMException.prototype;

  if (PolyfilledDOMExceptionPrototype.constructor !== PolyfilledDOMException) {
    {
      defineProperty(PolyfilledDOMExceptionPrototype, 'constructor', createPropertyDescriptor(1, PolyfilledDOMException));
    }

    for (var key in domExceptionConstants) {
      if (hasOwnProperty_1(domExceptionConstants, key)) {
        var constant$6 = domExceptionConstants[key];
        var constantName = constant$6.s;

        if (!hasOwnProperty_1(PolyfilledDOMException, constantName)) {
          defineProperty(PolyfilledDOMException, constantName, createPropertyDescriptor(6, constant$6.c));
        }
      }
    }
  }

  var DOM_EXCEPTION = 'DOMException';
  setToStringTag(getBuiltIn(DOM_EXCEPTION), DOM_EXCEPTION);

  var FORCED = !global$1.setImmediate || !global$1.clearImmediate; // http://w3c.github.io/setImmediate/

  _export({
    global: true,
    bind: true,
    enumerable: true,
    forced: FORCED
  }, {
    // `setImmediate` method
    // http://w3c.github.io/setImmediate/#si-setImmediate
    setImmediate: task$1.set,
    // `clearImmediate` method
    // http://w3c.github.io/setImmediate/#si-clearImmediate
    clearImmediate: task$1.clear
  });

  var process$1 = global$1.process; // `queueMicrotask` method
  // https://html.spec.whatwg.org/multipage/timers-and-user-prompts.html#dom-queuemicrotask

  _export({
    global: true,
    enumerable: true,
    noTargetGet: true
  }, {
    queueMicrotask: function queueMicrotask(fn) {
      validateArgumentsLength(arguments.length, 1);
      aCallable(fn);
      var domain = engineIsNode && process$1.domain;
      microtask(domain ? domain.bind(fn) : fn);
    }
  });

  var Object$1 = global$1.Object;
  var Date$1 = global$1.Date;
  var Error$1 = global$1.Error;
  var EvalError = global$1.EvalError;
  var RangeError$1 = global$1.RangeError;
  var ReferenceError$1 = global$1.ReferenceError;
  var SyntaxError$1 = global$1.SyntaxError;
  var TypeError$3 = global$1.TypeError;
  var URIError = global$1.URIError;
  var PerformanceMark = global$1.PerformanceMark;
  var WebAssembly = global$1.WebAssembly;
  var CompileError = WebAssembly && WebAssembly.CompileError || Error$1;
  var LinkError = WebAssembly && WebAssembly.LinkError || Error$1;
  var RuntimeError = WebAssembly && WebAssembly.RuntimeError || Error$1;
  var DOMException = getBuiltIn('DOMException');
  var Set$1 = getBuiltIn('Set');
  var Map$1 = getBuiltIn('Map');
  var MapPrototype = Map$1.prototype;
  var mapHas = functionUncurryThis(MapPrototype.has);
  var mapGet = functionUncurryThis(MapPrototype.get);
  var mapSet = functionUncurryThis(MapPrototype.set);
  var setAdd = functionUncurryThis(Set$1.prototype.add);
  var objectKeys = getBuiltIn('Object', 'keys');
  var push$3 = functionUncurryThis([].push);
  var booleanValueOf = functionUncurryThis(true.valueOf);
  var numberValueOf = functionUncurryThis(1.0.valueOf);
  var stringValueOf = functionUncurryThis(''.valueOf);
  var getFlags = functionUncurryThis(regexpFlags);
  var getTime = functionUncurryThis(Date$1.prototype.getTime);
  var PERFORMANCE_MARK = uid('structuredClone');
  var DATA_CLONE_ERROR = 'DataCloneError';
  var TRANSFERRING = 'Transferring';

  var checkBasicSemantic = function checkBasicSemantic(structuredCloneImplementation) {
    return !fails(function () {
      var set1 = new global$1.Set([7]);
      var set2 = structuredCloneImplementation(set1);
      var number = structuredCloneImplementation(Object$1(7));
      return set2 == set1 || !set2.has(7) || _typeof(number) != 'object' || number != 7;
    }) && structuredCloneImplementation;
  }; // https://github.com/whatwg/html/pull/5749


  var checkNewErrorsSemantic = function checkNewErrorsSemantic(structuredCloneImplementation) {
    return !fails(function () {
      var test = structuredCloneImplementation(new global$1.AggregateError([1], PERFORMANCE_MARK, {
        cause: 3
      }));
      return test.name != 'AggregateError' || test.errors[0] != 1 || test.message != PERFORMANCE_MARK || test.cause != 3;
    }) && structuredCloneImplementation;
  }; // FF94+, Safari TP134+, Chrome Canary 98+, NodeJS 17.0+, Deno 1.13+
  // current FF and Safari implementations can't clone errors
  // https://bugzilla.mozilla.org/show_bug.cgi?id=1556604
  // no one of current implementations supports new (html/5749) error cloning semantic


  var nativeStructuredClone = global$1.structuredClone;
  var FORCED_REPLACEMENT = !checkNewErrorsSemantic(nativeStructuredClone); // Chrome 82+, Safari 14.1+, Deno 1.11+
  // Chrome 78-81 implementation swaps `.name` and `.message` of cloned `DOMException`
  // Safari 14.1 implementation doesn't clone some `RegExp` flags, so requires a workaround
  // current Safari implementation can't clone errors
  // Deno 1.2-1.10 implementations too naive
  // NodeJS 16.0+ does not have `PerformanceMark` constructor, structured cloning implementation
  //   from `performance.mark` is too naive and can't clone, for example, `RegExp` or some boxed primitives
  //   https://github.com/nodejs/node/issues/40840
  // no one of current implementations supports new (html/5749) error cloning semantic

  var structuredCloneFromMark = !nativeStructuredClone && checkBasicSemantic(function (value) {
    return new PerformanceMark(PERFORMANCE_MARK, {
      detail: value
    }).detail;
  });
  var nativeRestrictedStructuredClone = checkBasicSemantic(nativeStructuredClone) || structuredCloneFromMark;

  var throwUncloneable = function throwUncloneable(type) {
    throw new DOMException('Uncloneable type: ' + type, DATA_CLONE_ERROR);
  };

  var throwUnpolyfillable = function throwUnpolyfillable(type, kind) {
    throw new DOMException((kind || 'Cloning') + ' of ' + type + ' cannot be properly polyfilled in this engine', DATA_CLONE_ERROR);
  };

  var structuredCloneInternal = function structuredCloneInternal(value, map) {
    if (isSymbol(value)) throwUncloneable('Symbol');
    if (!isObject(value)) return value; // effectively preserves circular references

    if (map) {
      if (mapHas(map, value)) return mapGet(map, value);
    } else map = new Map$1();

    var type = classof(value);
    var deep = false;
    var C, name, cloned, dataTransfer, i, length, keys, key, source, target;

    switch (type) {
      case 'Array':
        cloned = [];
        deep = true;
        break;

      case 'Object':
        cloned = {};
        deep = true;
        break;

      case 'Map':
        cloned = new Map$1();
        deep = true;
        break;

      case 'Set':
        cloned = new Set$1();
        deep = true;
        break;

      case 'RegExp':
        // in this block because of a Safari 14.1 bug
        // old FF does not clone regexes passed to the constructor, so get the source and flags directly
        cloned = new RegExp(value.source, 'flags' in value ? value.flags : getFlags(value));
        break;

      case 'Error':
        name = value.name;

        switch (name) {
          case 'AggregateError':
            cloned = getBuiltIn('AggregateError')([]);
            break;

          case 'EvalError':
            cloned = EvalError();
            break;

          case 'RangeError':
            cloned = RangeError$1();
            break;

          case 'ReferenceError':
            cloned = ReferenceError$1();
            break;

          case 'SyntaxError':
            cloned = SyntaxError$1();
            break;

          case 'TypeError':
            cloned = TypeError$3();
            break;

          case 'URIError':
            cloned = URIError();
            break;

          case 'CompileError':
            cloned = CompileError();
            break;

          case 'LinkError':
            cloned = LinkError();
            break;

          case 'RuntimeError':
            cloned = RuntimeError();
            break;

          default:
            cloned = Error$1();
        }

        deep = true;
        break;

      case 'DOMException':
        cloned = new DOMException(value.message, value.name);
        deep = true;
        break;

      case 'DataView':
      case 'Int8Array':
      case 'Uint8Array':
      case 'Uint8ClampedArray':
      case 'Int16Array':
      case 'Uint16Array':
      case 'Int32Array':
      case 'Uint32Array':
      case 'Float32Array':
      case 'Float64Array':
      case 'BigInt64Array':
      case 'BigUint64Array':
        C = global$1[type]; // in some old engines like Safari 9, typeof C is 'object'
        // on Uint8ClampedArray or some other constructors

        if (!isObject(C)) throwUnpolyfillable(type);
        cloned = new C( // this is safe, since arraybuffer cannot have circular references
        structuredCloneInternal(value.buffer, map), value.byteOffset, type === 'DataView' ? value.byteLength : value.length);
        break;

      case 'DOMQuad':
        try {
          cloned = new DOMQuad(structuredCloneInternal(value.p1, map), structuredCloneInternal(value.p2, map), structuredCloneInternal(value.p3, map), structuredCloneInternal(value.p4, map));
        } catch (error) {
          if (nativeRestrictedStructuredClone) {
            cloned = nativeRestrictedStructuredClone(value);
          } else throwUnpolyfillable(type);
        }

        break;

      case 'FileList':
        C = global$1.DataTransfer;

        if (isConstructor(C)) {
          dataTransfer = new C();

          for (i = 0, length = lengthOfArrayLike(value); i < length; i++) {
            dataTransfer.items.add(structuredCloneInternal(value[i], map));
          }

          cloned = dataTransfer.files;
        } else if (nativeRestrictedStructuredClone) {
          cloned = nativeRestrictedStructuredClone(value);
        } else throwUnpolyfillable(type);

        break;

      case 'ImageData':
        // Safari 9 ImageData is a constructor, but typeof ImageData is 'object'
        try {
          cloned = new ImageData(structuredCloneInternal(value.data, map), value.width, value.height, {
            colorSpace: value.colorSpace
          });
        } catch (error) {
          if (nativeRestrictedStructuredClone) {
            cloned = nativeRestrictedStructuredClone(value);
          } else throwUnpolyfillable(type);
        }

        break;

      default:
        if (nativeRestrictedStructuredClone) {
          cloned = nativeRestrictedStructuredClone(value);
        } else switch (type) {
          case 'BigInt':
            // can be a 3rd party polyfill
            cloned = Object$1(value.valueOf());
            break;

          case 'Boolean':
            cloned = Object$1(booleanValueOf(value));
            break;

          case 'Number':
            cloned = Object$1(numberValueOf(value));
            break;

          case 'String':
            cloned = Object$1(stringValueOf(value));
            break;

          case 'Date':
            cloned = new Date$1(getTime(value));
            break;

          case 'ArrayBuffer':
            C = global$1.DataView; // `ArrayBuffer#slice` is not available in IE10
            // `ArrayBuffer#slice` and `DataView` are not available in old FF

            if (!C && typeof value.slice != 'function') throwUnpolyfillable(type); // detached buffers throws in `DataView` and `.slice`

            try {
              if (typeof value.slice == 'function') {
                cloned = value.slice(0);
              } else {
                length = value.byteLength;
                cloned = new ArrayBuffer(length);
                source = new C(value);
                target = new C(cloned);

                for (i = 0; i < length; i++) {
                  target.setUint8(i, source.getUint8(i));
                }
              }
            } catch (error) {
              throw new DOMException('ArrayBuffer is detached', DATA_CLONE_ERROR);
            }

            break;

          case 'SharedArrayBuffer':
            // SharedArrayBuffer should use shared memory, we can't polyfill it, so return the original
            cloned = value;
            break;

          case 'Blob':
            try {
              cloned = value.slice(0, value.size, value.type);
            } catch (error) {
              throwUnpolyfillable(type);
            }

            break;

          case 'DOMPoint':
          case 'DOMPointReadOnly':
            C = global$1[type];

            try {
              cloned = C.fromPoint ? C.fromPoint(value) : new C(value.x, value.y, value.z, value.w);
            } catch (error) {
              throwUnpolyfillable(type);
            }

            break;

          case 'DOMRect':
          case 'DOMRectReadOnly':
            C = global$1[type];

            try {
              cloned = C.fromRect ? C.fromRect(value) : new C(value.x, value.y, value.width, value.height);
            } catch (error) {
              throwUnpolyfillable(type);
            }

            break;

          case 'DOMMatrix':
          case 'DOMMatrixReadOnly':
            C = global$1[type];

            try {
              cloned = C.fromMatrix ? C.fromMatrix(value) : new C(value);
            } catch (error) {
              throwUnpolyfillable(type);
            }

            break;

          case 'AudioData':
          case 'VideoFrame':
            if (!isCallable(value.clone)) throwUnpolyfillable(type);

            try {
              cloned = value.clone();
            } catch (error) {
              throwUncloneable(type);
            }

            break;

          case 'File':
            try {
              cloned = new File([value], value.name, value);
            } catch (error) {
              throwUnpolyfillable(type);
            }

            break;

          case 'CryptoKey':
          case 'GPUCompilationMessage':
          case 'GPUCompilationInfo':
          case 'ImageBitmap':
          case 'RTCCertificate':
          case 'WebAssembly.Module':
            throwUnpolyfillable(type);
          // break omitted

          default:
            throwUncloneable(type);
        }

    }

    mapSet(map, value, cloned);
    if (deep) switch (type) {
      case 'Array':
      case 'Object':
        keys = objectKeys(value);

        for (i = 0, length = lengthOfArrayLike(keys); i < length; i++) {
          key = keys[i];
          createProperty(cloned, key, structuredCloneInternal(value[key], map));
        }

        break;

      case 'Map':
        value.forEach(function (v, k) {
          mapSet(cloned, structuredCloneInternal(k, map), structuredCloneInternal(v, map));
        });
        break;

      case 'Set':
        value.forEach(function (v) {
          setAdd(cloned, structuredCloneInternal(v, map));
        });
        break;

      case 'Error':
        createNonEnumerableProperty(cloned, 'message', structuredCloneInternal(value.message, map));

        if (hasOwnProperty_1(value, 'cause')) {
          createNonEnumerableProperty(cloned, 'cause', structuredCloneInternal(value.cause, map));
        }

        if (name == 'AggregateError') {
          cloned.errors = structuredCloneInternal(value.errors, map);
        }

      // break omitted

      case 'DOMException':
        if (errorStackInstallable) {
          createNonEnumerableProperty(cloned, 'stack', structuredCloneInternal(value.stack, map));
        }

    }
    return cloned;
  };

  var PROPER_TRANSFER = nativeStructuredClone && !fails(function () {
    var buffer = new ArrayBuffer(8);
    var clone = nativeStructuredClone(buffer, {
      transfer: [buffer]
    });
    return buffer.byteLength != 0 || clone.byteLength != 8;
  });

  var tryToTransfer = function tryToTransfer(rawTransfer, map) {
    if (!isObject(rawTransfer)) throw TypeError$3('Transfer option cannot be converted to a sequence');
    var transfer = [];
    iterate(rawTransfer, function (value) {
      push$3(transfer, anObject(value));
    });
    var i = 0;
    var length = lengthOfArrayLike(transfer);
    var value, type, C, transferredArray, transferred, canvas, context;

    if (PROPER_TRANSFER) {
      transferredArray = nativeStructuredClone(transfer, {
        transfer: transfer
      });

      while (i < length) {
        mapSet(map, transfer[i], transferredArray[i++]);
      }
    } else while (i < length) {
      value = transfer[i++];
      if (mapHas(map, value)) throw new DOMException('Duplicate transferable', DATA_CLONE_ERROR);
      type = classof(value);

      switch (type) {
        case 'ImageBitmap':
          C = global$1.OffscreenCanvas;
          if (!isConstructor(C)) throwUnpolyfillable(type, TRANSFERRING);

          try {
            canvas = new C(value.width, value.height);
            context = canvas.getContext('bitmaprenderer');
            context.transferFromImageBitmap(value);
            transferred = canvas.transferToImageBitmap();
          } catch (error) {
            /* empty */
          }

          break;

        case 'AudioData':
        case 'VideoFrame':
          if (!isCallable(value.clone) || !isCallable(value.close)) throwUnpolyfillable(type, TRANSFERRING);

          try {
            transferred = value.clone();
            value.close();
          } catch (error) {
            /* empty */
          }

          break;

        case 'ArrayBuffer':
        case 'MessagePort':
        case 'OffscreenCanvas':
        case 'ReadableStream':
        case 'TransformStream':
        case 'WritableStream':
          throwUnpolyfillable(type, TRANSFERRING);
      }

      if (transferred === undefined) throw new DOMException('This object cannot be transferred: ' + type, DATA_CLONE_ERROR);
      mapSet(map, value, transferred);
    }
  };

  _export({
    global: true,
    enumerable: true,
    sham: !PROPER_TRANSFER,
    forced: FORCED_REPLACEMENT
  }, {
    structuredClone: function structuredClone(value
    /* , { transfer } */
    ) {
      var options = validateArgumentsLength(arguments.length, 1) > 1 ? anObject(arguments[1]) : undefined;
      var transfer = options ? options.transfer : undefined;
      var map;

      if (transfer !== undefined) {
        map = new Map$1();
        tryToTransfer(transfer, map);
      }

      return structuredCloneInternal(value, map);
    }
  });

  var ITERATOR$1 = wellKnownSymbol('iterator');
  var nativeUrl = !fails(function () {
    // eslint-disable-next-line unicorn/relative-url-style -- required for testing
    var url = new URL('b?a=1&b=2&c=3', 'http://a');
    var searchParams = url.searchParams;
    var result = '';
    url.pathname = 'c%20d';
    searchParams.forEach(function (value, key) {
      searchParams['delete']('b');
      result += key + value;
    });
    return isPure && !url.toJSON || !searchParams.sort || url.href !== 'http://a/c%20d?a=1&c=3' || searchParams.get('c') !== '3' || String(new URLSearchParams('?a=1')) !== 'a=1' || !searchParams[ITERATOR$1] // throws in Edge
    || new URL('https://a@b').username !== 'a' || new URLSearchParams(new URLSearchParams('a=b')).get('a') !== 'b' // not punycoded in Edge
    || new URL('http://тест').host !== 'xn--e1aybc' // not escaped in Chrome 62-
    || new URL('http://a#б').hash !== '#%D0%B1' // fails in Chrome 66-
    || result !== 'a1c3' // throws in Safari
    || new URL('http://x', undefined).host !== 'x';
  });

  var maxInt = 2147483647; // aka. 0x7FFFFFFF or 2^31-1

  var base = 36;
  var tMin = 1;
  var tMax = 26;
  var skew = 38;
  var damp = 700;
  var initialBias = 72;
  var initialN = 128; // 0x80

  var delimiter = '-'; // '\x2D'

  var regexNonASCII = /[^\0-\u007E]/; // non-ASCII chars

  var regexSeparators = /[.\u3002\uFF0E\uFF61]/g; // RFC 3490 separators

  var OVERFLOW_ERROR = 'Overflow: input needs wider integers to process';
  var baseMinusTMin = base - tMin;
  var RangeError = global$1.RangeError;
  var exec$1 = functionUncurryThis(regexSeparators.exec);
  var floor$1 = Math.floor;
  var fromCharCode = String.fromCharCode;
  var charCodeAt = functionUncurryThis(''.charCodeAt);
  var join$2 = functionUncurryThis([].join);
  var push$2 = functionUncurryThis([].push);
  var replace$2 = functionUncurryThis(''.replace);
  var split$2 = functionUncurryThis(''.split);
  var toLowerCase$1 = functionUncurryThis(''.toLowerCase);
  /**
   * Creates an array containing the numeric code points of each Unicode
   * character in the string. While JavaScript uses UCS-2 internally,
   * this function will convert a pair of surrogate halves (each of which
   * UCS-2 exposes as separate characters) into a single code point,
   * matching UTF-16.
   */

  var ucs2decode = function ucs2decode(string) {
    var output = [];
    var counter = 0;
    var length = string.length;

    while (counter < length) {
      var value = charCodeAt(string, counter++);

      if (value >= 0xD800 && value <= 0xDBFF && counter < length) {
        // It's a high surrogate, and there is a next character.
        var extra = charCodeAt(string, counter++);

        if ((extra & 0xFC00) == 0xDC00) {
          // Low surrogate.
          push$2(output, ((value & 0x3FF) << 10) + (extra & 0x3FF) + 0x10000);
        } else {
          // It's an unmatched surrogate; only append this code unit, in case the
          // next code unit is the high surrogate of a surrogate pair.
          push$2(output, value);
          counter--;
        }
      } else {
        push$2(output, value);
      }
    }

    return output;
  };
  /**
   * Converts a digit/integer into a basic code point.
   */


  var digitToBasic = function digitToBasic(digit) {
    //  0..25 map to ASCII a..z or A..Z
    // 26..35 map to ASCII 0..9
    return digit + 22 + 75 * (digit < 26);
  };
  /**
   * Bias adaptation function as per section 3.4 of RFC 3492.
   * https://tools.ietf.org/html/rfc3492#section-3.4
   */


  var adapt = function adapt(delta, numPoints, firstTime) {
    var k = 0;
    delta = firstTime ? floor$1(delta / damp) : delta >> 1;
    delta += floor$1(delta / numPoints);

    while (delta > baseMinusTMin * tMax >> 1) {
      delta = floor$1(delta / baseMinusTMin);
      k += base;
    }

    return floor$1(k + (baseMinusTMin + 1) * delta / (delta + skew));
  };
  /**
   * Converts a string of Unicode symbols (e.g. a domain name label) to a
   * Punycode string of ASCII-only symbols.
   */


  var encode = function encode(input) {
    var output = []; // Convert the input in UCS-2 to an array of Unicode code points.

    input = ucs2decode(input); // Cache the length.

    var inputLength = input.length; // Initialize the state.

    var n = initialN;
    var delta = 0;
    var bias = initialBias;
    var i, currentValue; // Handle the basic code points.

    for (i = 0; i < input.length; i++) {
      currentValue = input[i];

      if (currentValue < 0x80) {
        push$2(output, fromCharCode(currentValue));
      }
    }

    var basicLength = output.length; // number of basic code points.

    var handledCPCount = basicLength; // number of code points that have been handled;
    // Finish the basic string with a delimiter unless it's empty.

    if (basicLength) {
      push$2(output, delimiter);
    } // Main encoding loop:


    while (handledCPCount < inputLength) {
      // All non-basic code points < n have been handled already. Find the next larger one:
      var m = maxInt;

      for (i = 0; i < input.length; i++) {
        currentValue = input[i];

        if (currentValue >= n && currentValue < m) {
          m = currentValue;
        }
      } // Increase `delta` enough to advance the decoder's <n,i> state to <m,0>, but guard against overflow.


      var handledCPCountPlusOne = handledCPCount + 1;

      if (m - n > floor$1((maxInt - delta) / handledCPCountPlusOne)) {
        throw RangeError(OVERFLOW_ERROR);
      }

      delta += (m - n) * handledCPCountPlusOne;
      n = m;

      for (i = 0; i < input.length; i++) {
        currentValue = input[i];

        if (currentValue < n && ++delta > maxInt) {
          throw RangeError(OVERFLOW_ERROR);
        }

        if (currentValue == n) {
          // Represent delta as a generalized variable-length integer.
          var q = delta;
          var k = base;

          while (true) {
            var t = k <= bias ? tMin : k >= bias + tMax ? tMax : k - bias;
            if (q < t) break;
            var qMinusT = q - t;
            var baseMinusT = base - t;
            push$2(output, fromCharCode(digitToBasic(t + qMinusT % baseMinusT)));
            q = floor$1(qMinusT / baseMinusT);
            k += base;
          }

          push$2(output, fromCharCode(digitToBasic(q)));
          bias = adapt(delta, handledCPCountPlusOne, handledCPCount == basicLength);
          delta = 0;
          handledCPCount++;
        }
      }

      delta++;
      n++;
    }

    return join$2(output, '');
  };

  var stringPunycodeToAscii = function stringPunycodeToAscii(input) {
    var encoded = [];
    var labels = split$2(replace$2(toLowerCase$1(input), regexSeparators, "."), '.');
    var i, label;

    for (i = 0; i < labels.length; i++) {
      label = labels[i];
      push$2(encoded, exec$1(regexNonASCII, label) ? 'xn--' + encode(label) : label);
    }

    return join$2(encoded, '.');
  };

  var ITERATOR = wellKnownSymbol('iterator');
  var URL_SEARCH_PARAMS = 'URLSearchParams';
  var URL_SEARCH_PARAMS_ITERATOR = URL_SEARCH_PARAMS + 'Iterator';
  var setInternalState$1 = internalState.set;
  var getInternalParamsState = internalState.getterFor(URL_SEARCH_PARAMS);
  var getInternalIteratorState = internalState.getterFor(URL_SEARCH_PARAMS_ITERATOR);
  var n$Fetch = getBuiltIn('fetch');
  var N$Request = getBuiltIn('Request');
  var Headers = getBuiltIn('Headers');
  var RequestPrototype = N$Request && N$Request.prototype;
  var HeadersPrototype = Headers && Headers.prototype;
  var RegExp$1 = global$1.RegExp;
  var TypeError$2 = global$1.TypeError;
  var decodeURIComponent = global$1.decodeURIComponent;
  var encodeURIComponent$1 = global$1.encodeURIComponent;
  var charAt$1 = functionUncurryThis(''.charAt);
  var join$1 = functionUncurryThis([].join);
  var push$1 = functionUncurryThis([].push);
  var replace$1 = functionUncurryThis(''.replace);
  var shift$1 = functionUncurryThis([].shift);
  var splice = functionUncurryThis([].splice);
  var split$1 = functionUncurryThis(''.split);
  var stringSlice$1 = functionUncurryThis(''.slice);
  var plus = /\+/g;
  var sequences = Array(4);

  var percentSequence = function percentSequence(bytes) {
    return sequences[bytes - 1] || (sequences[bytes - 1] = RegExp$1('((?:%[\\da-f]{2}){' + bytes + '})', 'gi'));
  };

  var percentDecode = function percentDecode(sequence) {
    try {
      return decodeURIComponent(sequence);
    } catch (error) {
      return sequence;
    }
  };

  var deserialize = function deserialize(it) {
    var result = replace$1(it, plus, ' ');
    var bytes = 4;

    try {
      return decodeURIComponent(result);
    } catch (error) {
      while (bytes) {
        result = replace$1(result, percentSequence(bytes--), percentDecode);
      }

      return result;
    }
  };

  var find$1 = /[!'()~]|%20/g;
  var replacements = {
    '!': '%21',
    "'": '%27',
    '(': '%28',
    ')': '%29',
    '~': '%7E',
    '%20': '+'
  };

  var replacer = function replacer(match) {
    return replacements[match];
  };

  var _serialize = function serialize(it) {
    return replace$1(encodeURIComponent$1(it), find$1, replacer);
  };

  var URLSearchParamsIterator = createIteratorConstructor(function Iterator(params, kind) {
    setInternalState$1(this, {
      type: URL_SEARCH_PARAMS_ITERATOR,
      iterator: getIterator(getInternalParamsState(params).entries),
      kind: kind
    });
  }, 'Iterator', function next() {
    var state = getInternalIteratorState(this);
    var kind = state.kind;
    var step = state.iterator.next();
    var entry = step.value;

    if (!step.done) {
      step.value = kind === 'keys' ? entry.key : kind === 'values' ? entry.value : [entry.key, entry.value];
    }

    return step;
  }, true);

  var URLSearchParamsState = function URLSearchParamsState(init) {
    this.entries = [];
    this.url = null;

    if (init !== undefined) {
      if (isObject(init)) this.parseObject(init);else this.parseQuery(typeof init == 'string' ? charAt$1(init, 0) === '?' ? stringSlice$1(init, 1) : init : toString(init));
    }
  };

  URLSearchParamsState.prototype = {
    type: URL_SEARCH_PARAMS,
    bindURL: function bindURL(url) {
      this.url = url;
      this.update();
    },
    parseObject: function parseObject(object) {
      var iteratorMethod = getIteratorMethod(object);
      var iterator, next, step, entryIterator, entryNext, first, second;

      if (iteratorMethod) {
        iterator = getIterator(object, iteratorMethod);
        next = iterator.next;

        while (!(step = functionCall(next, iterator)).done) {
          entryIterator = getIterator(anObject(step.value));
          entryNext = entryIterator.next;
          if ((first = functionCall(entryNext, entryIterator)).done || (second = functionCall(entryNext, entryIterator)).done || !functionCall(entryNext, entryIterator).done) throw TypeError$2('Expected sequence with length 2');
          push$1(this.entries, {
            key: toString(first.value),
            value: toString(second.value)
          });
        }
      } else for (var key in object) {
        if (hasOwnProperty_1(object, key)) {
          push$1(this.entries, {
            key: key,
            value: toString(object[key])
          });
        }
      }
    },
    parseQuery: function parseQuery(query) {
      if (query) {
        var attributes = split$1(query, '&');
        var index = 0;
        var attribute, entry;

        while (index < attributes.length) {
          attribute = attributes[index++];

          if (attribute.length) {
            entry = split$1(attribute, '=');
            push$1(this.entries, {
              key: deserialize(shift$1(entry)),
              value: deserialize(join$1(entry, '='))
            });
          }
        }
      }
    },
    serialize: function serialize() {
      var entries = this.entries;
      var result = [];
      var index = 0;
      var entry;

      while (index < entries.length) {
        entry = entries[index++];
        push$1(result, _serialize(entry.key) + '=' + _serialize(entry.value));
      }

      return join$1(result, '&');
    },
    update: function update() {
      this.entries.length = 0;
      this.parseQuery(this.url.query);
    },
    updateURL: function updateURL() {
      if (this.url) this.url.update();
    }
  }; // `URLSearchParams` constructor
  // https://url.spec.whatwg.org/#interface-urlsearchparams

  var URLSearchParamsConstructor = function
    /* init */
  URLSearchParams() {
    anInstance(this, URLSearchParamsPrototype);
    var init = arguments.length > 0 ? arguments[0] : undefined;
    setInternalState$1(this, new URLSearchParamsState(init));
  };

  var URLSearchParamsPrototype = URLSearchParamsConstructor.prototype;
  redefineAll(URLSearchParamsPrototype, {
    // `URLSearchParams.prototype.append` method
    // https://url.spec.whatwg.org/#dom-urlsearchparams-append
    append: function append(name, value) {
      validateArgumentsLength(arguments.length, 2);
      var state = getInternalParamsState(this);
      push$1(state.entries, {
        key: toString(name),
        value: toString(value)
      });
      state.updateURL();
    },
    // `URLSearchParams.prototype.delete` method
    // https://url.spec.whatwg.org/#dom-urlsearchparams-delete
    'delete': function _delete(name) {
      validateArgumentsLength(arguments.length, 1);
      var state = getInternalParamsState(this);
      var entries = state.entries;
      var key = toString(name);
      var index = 0;

      while (index < entries.length) {
        if (entries[index].key === key) splice(entries, index, 1);else index++;
      }

      state.updateURL();
    },
    // `URLSearchParams.prototype.get` method
    // https://url.spec.whatwg.org/#dom-urlsearchparams-get
    get: function get(name) {
      validateArgumentsLength(arguments.length, 1);
      var entries = getInternalParamsState(this).entries;
      var key = toString(name);
      var index = 0;

      for (; index < entries.length; index++) {
        if (entries[index].key === key) return entries[index].value;
      }

      return null;
    },
    // `URLSearchParams.prototype.getAll` method
    // https://url.spec.whatwg.org/#dom-urlsearchparams-getall
    getAll: function getAll(name) {
      validateArgumentsLength(arguments.length, 1);
      var entries = getInternalParamsState(this).entries;
      var key = toString(name);
      var result = [];
      var index = 0;

      for (; index < entries.length; index++) {
        if (entries[index].key === key) push$1(result, entries[index].value);
      }

      return result;
    },
    // `URLSearchParams.prototype.has` method
    // https://url.spec.whatwg.org/#dom-urlsearchparams-has
    has: function has(name) {
      validateArgumentsLength(arguments.length, 1);
      var entries = getInternalParamsState(this).entries;
      var key = toString(name);
      var index = 0;

      while (index < entries.length) {
        if (entries[index++].key === key) return true;
      }

      return false;
    },
    // `URLSearchParams.prototype.set` method
    // https://url.spec.whatwg.org/#dom-urlsearchparams-set
    set: function set(name, value) {
      validateArgumentsLength(arguments.length, 1);
      var state = getInternalParamsState(this);
      var entries = state.entries;
      var found = false;
      var key = toString(name);
      var val = toString(value);
      var index = 0;
      var entry;

      for (; index < entries.length; index++) {
        entry = entries[index];

        if (entry.key === key) {
          if (found) splice(entries, index--, 1);else {
            found = true;
            entry.value = val;
          }
        }
      }

      if (!found) push$1(entries, {
        key: key,
        value: val
      });
      state.updateURL();
    },
    // `URLSearchParams.prototype.sort` method
    // https://url.spec.whatwg.org/#dom-urlsearchparams-sort
    sort: function sort() {
      var state = getInternalParamsState(this);
      arraySort(state.entries, function (a, b) {
        return a.key > b.key ? 1 : -1;
      });
      state.updateURL();
    },
    // `URLSearchParams.prototype.forEach` method
    forEach: function forEach(callback
    /* , thisArg */
    ) {
      var entries = getInternalParamsState(this).entries;
      var boundFunction = functionBindContext(callback, arguments.length > 1 ? arguments[1] : undefined);
      var index = 0;
      var entry;

      while (index < entries.length) {
        entry = entries[index++];
        boundFunction(entry.value, entry.key, this);
      }
    },
    // `URLSearchParams.prototype.keys` method
    keys: function keys() {
      return new URLSearchParamsIterator(this, 'keys');
    },
    // `URLSearchParams.prototype.values` method
    values: function values() {
      return new URLSearchParamsIterator(this, 'values');
    },
    // `URLSearchParams.prototype.entries` method
    entries: function entries() {
      return new URLSearchParamsIterator(this, 'entries');
    }
  }, {
    enumerable: true
  }); // `URLSearchParams.prototype[@@iterator]` method

  redefine(URLSearchParamsPrototype, ITERATOR, URLSearchParamsPrototype.entries, {
    name: 'entries'
  }); // `URLSearchParams.prototype.toString` method
  // https://url.spec.whatwg.org/#urlsearchparams-stringification-behavior

  redefine(URLSearchParamsPrototype, 'toString', function toString() {
    return getInternalParamsState(this).serialize();
  }, {
    enumerable: true
  });
  setToStringTag(URLSearchParamsConstructor, URL_SEARCH_PARAMS);
  _export({
    global: true,
    forced: !nativeUrl
  }, {
    URLSearchParams: URLSearchParamsConstructor
  }); // Wrap `fetch` and `Request` for correct work with polyfilled `URLSearchParams`

  if (!nativeUrl && isCallable(Headers)) {
    var headersHas = functionUncurryThis(HeadersPrototype.has);
    var headersSet = functionUncurryThis(HeadersPrototype.set);

    var wrapRequestOptions = function wrapRequestOptions(init) {
      if (isObject(init)) {
        var body = init.body;
        var headers;

        if (classof(body) === URL_SEARCH_PARAMS) {
          headers = init.headers ? new Headers(init.headers) : new Headers();

          if (!headersHas(headers, 'content-type')) {
            headersSet(headers, 'content-type', 'application/x-www-form-urlencoded;charset=UTF-8');
          }

          return objectCreate(init, {
            body: createPropertyDescriptor(0, toString(body)),
            headers: createPropertyDescriptor(0, headers)
          });
        }
      }

      return init;
    };

    if (isCallable(n$Fetch)) {
      _export({
        global: true,
        enumerable: true,
        forced: true
      }, {
        fetch: function fetch(input
        /* , init */
        ) {
          return n$Fetch(input, arguments.length > 1 ? wrapRequestOptions(arguments[1]) : {});
        }
      });
    }

    if (isCallable(N$Request)) {
      var RequestConstructor = function Request(input
      /* , init */
      ) {
        anInstance(this, RequestPrototype);
        return new N$Request(input, arguments.length > 1 ? wrapRequestOptions(arguments[1]) : {});
      };

      RequestPrototype.constructor = RequestConstructor;
      RequestConstructor.prototype = RequestPrototype;
      _export({
        global: true,
        forced: true
      }, {
        Request: RequestConstructor
      });
    }
  }

  var web_urlSearchParams = {
    URLSearchParams: URLSearchParamsConstructor,
    getState: getInternalParamsState
  };

  var defineProperties = objectDefineProperties.f;
  var codeAt = stringMultibyte.codeAt;
  var setInternalState = internalState.set;
  var getInternalURLState = internalState.getterFor('URL');
  var URLSearchParams$1 = web_urlSearchParams.URLSearchParams;
  var getInternalSearchParamsState = web_urlSearchParams.getState;
  var NativeURL = global$1.URL;
  var TypeError$1 = global$1.TypeError;
  var parseInt$1 = global$1.parseInt;
  var floor = Math.floor;
  var pow = Math.pow;
  var charAt = functionUncurryThis(''.charAt);
  var exec = functionUncurryThis(/./.exec);
  var join = functionUncurryThis([].join);
  var numberToString = functionUncurryThis(1.0.toString);
  var pop = functionUncurryThis([].pop);
  var push = functionUncurryThis([].push);
  var replace = functionUncurryThis(''.replace);
  var shift = functionUncurryThis([].shift);
  var split = functionUncurryThis(''.split);
  var stringSlice = functionUncurryThis(''.slice);
  var toLowerCase = functionUncurryThis(''.toLowerCase);
  var unshift = functionUncurryThis([].unshift);
  var INVALID_AUTHORITY = 'Invalid authority';
  var INVALID_SCHEME = 'Invalid scheme';
  var INVALID_HOST = 'Invalid host';
  var INVALID_PORT = 'Invalid port';
  var ALPHA = /[a-z]/i; // eslint-disable-next-line regexp/no-obscure-range -- safe

  var ALPHANUMERIC = /[\d+-.a-z]/i;
  var DIGIT = /\d/;
  var HEX_START = /^0x/i;
  var OCT = /^[0-7]+$/;
  var DEC = /^\d+$/;
  var HEX = /^[\da-f]+$/i;
  /* eslint-disable regexp/no-control-character -- safe */

  var FORBIDDEN_HOST_CODE_POINT = /[\0\t\n\r #%/:<>?@[\\\]^|]/;
  var FORBIDDEN_HOST_CODE_POINT_EXCLUDING_PERCENT = /[\0\t\n\r #/:<>?@[\\\]^|]/;
  var LEADING_AND_TRAILING_C0_CONTROL_OR_SPACE = /^[\u0000-\u0020]+|[\u0000-\u0020]+$/g;
  var TAB_AND_NEW_LINE = /[\t\n\r]/g;
  /* eslint-enable regexp/no-control-character -- safe */

  var EOF; // https://url.spec.whatwg.org/#ipv4-number-parser

  var parseIPv4 = function parseIPv4(input) {
    var parts = split(input, '.');
    var partsLength, numbers, index, part, radix, number, ipv4;

    if (parts.length && parts[parts.length - 1] == '') {
      parts.length--;
    }

    partsLength = parts.length;
    if (partsLength > 4) return input;
    numbers = [];

    for (index = 0; index < partsLength; index++) {
      part = parts[index];
      if (part == '') return input;
      radix = 10;

      if (part.length > 1 && charAt(part, 0) == '0') {
        radix = exec(HEX_START, part) ? 16 : 8;
        part = stringSlice(part, radix == 8 ? 1 : 2);
      }

      if (part === '') {
        number = 0;
      } else {
        if (!exec(radix == 10 ? DEC : radix == 8 ? OCT : HEX, part)) return input;
        number = parseInt$1(part, radix);
      }

      push(numbers, number);
    }

    for (index = 0; index < partsLength; index++) {
      number = numbers[index];

      if (index == partsLength - 1) {
        if (number >= pow(256, 5 - partsLength)) return null;
      } else if (number > 255) return null;
    }

    ipv4 = pop(numbers);

    for (index = 0; index < numbers.length; index++) {
      ipv4 += numbers[index] * pow(256, 3 - index);
    }

    return ipv4;
  }; // https://url.spec.whatwg.org/#concept-ipv6-parser
  // eslint-disable-next-line max-statements -- TODO


  var parseIPv6 = function parseIPv6(input) {
    var address = [0, 0, 0, 0, 0, 0, 0, 0];
    var pieceIndex = 0;
    var compress = null;
    var pointer = 0;
    var value, length, numbersSeen, ipv4Piece, number, swaps, swap;

    var chr = function chr() {
      return charAt(input, pointer);
    };

    if (chr() == ':') {
      if (charAt(input, 1) != ':') return;
      pointer += 2;
      pieceIndex++;
      compress = pieceIndex;
    }

    while (chr()) {
      if (pieceIndex == 8) return;

      if (chr() == ':') {
        if (compress !== null) return;
        pointer++;
        pieceIndex++;
        compress = pieceIndex;
        continue;
      }

      value = length = 0;

      while (length < 4 && exec(HEX, chr())) {
        value = value * 16 + parseInt$1(chr(), 16);
        pointer++;
        length++;
      }

      if (chr() == '.') {
        if (length == 0) return;
        pointer -= length;
        if (pieceIndex > 6) return;
        numbersSeen = 0;

        while (chr()) {
          ipv4Piece = null;

          if (numbersSeen > 0) {
            if (chr() == '.' && numbersSeen < 4) pointer++;else return;
          }

          if (!exec(DIGIT, chr())) return;

          while (exec(DIGIT, chr())) {
            number = parseInt$1(chr(), 10);
            if (ipv4Piece === null) ipv4Piece = number;else if (ipv4Piece == 0) return;else ipv4Piece = ipv4Piece * 10 + number;
            if (ipv4Piece > 255) return;
            pointer++;
          }

          address[pieceIndex] = address[pieceIndex] * 256 + ipv4Piece;
          numbersSeen++;
          if (numbersSeen == 2 || numbersSeen == 4) pieceIndex++;
        }

        if (numbersSeen != 4) return;
        break;
      } else if (chr() == ':') {
        pointer++;
        if (!chr()) return;
      } else if (chr()) return;

      address[pieceIndex++] = value;
    }

    if (compress !== null) {
      swaps = pieceIndex - compress;
      pieceIndex = 7;

      while (pieceIndex != 0 && swaps > 0) {
        swap = address[pieceIndex];
        address[pieceIndex--] = address[compress + swaps - 1];
        address[compress + --swaps] = swap;
      }
    } else if (pieceIndex != 8) return;

    return address;
  };

  var findLongestZeroSequence = function findLongestZeroSequence(ipv6) {
    var maxIndex = null;
    var maxLength = 1;
    var currStart = null;
    var currLength = 0;
    var index = 0;

    for (; index < 8; index++) {
      if (ipv6[index] !== 0) {
        if (currLength > maxLength) {
          maxIndex = currStart;
          maxLength = currLength;
        }

        currStart = null;
        currLength = 0;
      } else {
        if (currStart === null) currStart = index;
        ++currLength;
      }
    }

    if (currLength > maxLength) {
      maxIndex = currStart;
      maxLength = currLength;
    }

    return maxIndex;
  }; // https://url.spec.whatwg.org/#host-serializing


  var serializeHost = function serializeHost(host) {
    var result, index, compress, ignore0; // ipv4

    if (typeof host == 'number') {
      result = [];

      for (index = 0; index < 4; index++) {
        unshift(result, host % 256);
        host = floor(host / 256);
      }

      return join(result, '.'); // ipv6
    } else if (_typeof(host) == 'object') {
      result = '';
      compress = findLongestZeroSequence(host);

      for (index = 0; index < 8; index++) {
        if (ignore0 && host[index] === 0) continue;
        if (ignore0) ignore0 = false;

        if (compress === index) {
          result += index ? ':' : '::';
          ignore0 = true;
        } else {
          result += numberToString(host[index], 16);
          if (index < 7) result += ':';
        }
      }

      return '[' + result + ']';
    }

    return host;
  };

  var C0ControlPercentEncodeSet = {};
  var fragmentPercentEncodeSet = objectAssign({}, C0ControlPercentEncodeSet, {
    ' ': 1,
    '"': 1,
    '<': 1,
    '>': 1,
    '`': 1
  });
  var pathPercentEncodeSet = objectAssign({}, fragmentPercentEncodeSet, {
    '#': 1,
    '?': 1,
    '{': 1,
    '}': 1
  });
  var userinfoPercentEncodeSet = objectAssign({}, pathPercentEncodeSet, {
    '/': 1,
    ':': 1,
    ';': 1,
    '=': 1,
    '@': 1,
    '[': 1,
    '\\': 1,
    ']': 1,
    '^': 1,
    '|': 1
  });

  var percentEncode = function percentEncode(chr, set) {
    var code = codeAt(chr, 0);
    return code > 0x20 && code < 0x7F && !hasOwnProperty_1(set, chr) ? chr : encodeURIComponent(chr);
  }; // https://url.spec.whatwg.org/#special-scheme


  var specialSchemes = {
    ftp: 21,
    file: null,
    http: 80,
    https: 443,
    ws: 80,
    wss: 443
  }; // https://url.spec.whatwg.org/#windows-drive-letter

  var isWindowsDriveLetter = function isWindowsDriveLetter(string, normalized) {
    var second;
    return string.length == 2 && exec(ALPHA, charAt(string, 0)) && ((second = charAt(string, 1)) == ':' || !normalized && second == '|');
  }; // https://url.spec.whatwg.org/#start-with-a-windows-drive-letter


  var startsWithWindowsDriveLetter = function startsWithWindowsDriveLetter(string) {
    var third;
    return string.length > 1 && isWindowsDriveLetter(stringSlice(string, 0, 2)) && (string.length == 2 || (third = charAt(string, 2)) === '/' || third === '\\' || third === '?' || third === '#');
  }; // https://url.spec.whatwg.org/#single-dot-path-segment


  var isSingleDot = function isSingleDot(segment) {
    return segment === '.' || toLowerCase(segment) === '%2e';
  }; // https://url.spec.whatwg.org/#double-dot-path-segment


  var isDoubleDot = function isDoubleDot(segment) {
    segment = toLowerCase(segment);
    return segment === '..' || segment === '%2e.' || segment === '.%2e' || segment === '%2e%2e';
  }; // States:


  var SCHEME_START = {};
  var SCHEME = {};
  var NO_SCHEME = {};
  var SPECIAL_RELATIVE_OR_AUTHORITY = {};
  var PATH_OR_AUTHORITY = {};
  var RELATIVE = {};
  var RELATIVE_SLASH = {};
  var SPECIAL_AUTHORITY_SLASHES = {};
  var SPECIAL_AUTHORITY_IGNORE_SLASHES = {};
  var AUTHORITY = {};
  var HOST = {};
  var HOSTNAME = {};
  var PORT = {};
  var FILE = {};
  var FILE_SLASH = {};
  var FILE_HOST = {};
  var PATH_START = {};
  var PATH = {};
  var CANNOT_BE_A_BASE_URL_PATH = {};
  var QUERY = {};
  var FRAGMENT = {};

  var URLState = function URLState(url, isBase, base) {
    var urlString = toString(url);
    var baseState, failure, searchParams;

    if (isBase) {
      failure = this.parse(urlString);
      if (failure) throw TypeError$1(failure);
      this.searchParams = null;
    } else {
      if (base !== undefined) baseState = new URLState(base, true);
      failure = this.parse(urlString, null, baseState);
      if (failure) throw TypeError$1(failure);
      searchParams = getInternalSearchParamsState(new URLSearchParams$1());
      searchParams.bindURL(this);
      this.searchParams = searchParams;
    }
  };

  URLState.prototype = {
    type: 'URL',
    // https://url.spec.whatwg.org/#url-parsing
    // eslint-disable-next-line max-statements -- TODO
    parse: function parse(input, stateOverride, base) {
      var url = this;
      var state = stateOverride || SCHEME_START;
      var pointer = 0;
      var buffer = '';
      var seenAt = false;
      var seenBracket = false;
      var seenPasswordToken = false;
      var codePoints, chr, bufferCodePoints, failure;
      input = toString(input);

      if (!stateOverride) {
        url.scheme = '';
        url.username = '';
        url.password = '';
        url.host = null;
        url.port = null;
        url.path = [];
        url.query = null;
        url.fragment = null;
        url.cannotBeABaseURL = false;
        input = replace(input, LEADING_AND_TRAILING_C0_CONTROL_OR_SPACE, '');
      }

      input = replace(input, TAB_AND_NEW_LINE, '');
      codePoints = arrayFrom(input);

      while (pointer <= codePoints.length) {
        chr = codePoints[pointer];

        switch (state) {
          case SCHEME_START:
            if (chr && exec(ALPHA, chr)) {
              buffer += toLowerCase(chr);
              state = SCHEME;
            } else if (!stateOverride) {
              state = NO_SCHEME;
              continue;
            } else return INVALID_SCHEME;

            break;

          case SCHEME:
            if (chr && (exec(ALPHANUMERIC, chr) || chr == '+' || chr == '-' || chr == '.')) {
              buffer += toLowerCase(chr);
            } else if (chr == ':') {
              if (stateOverride && (url.isSpecial() != hasOwnProperty_1(specialSchemes, buffer) || buffer == 'file' && (url.includesCredentials() || url.port !== null) || url.scheme == 'file' && !url.host)) return;
              url.scheme = buffer;

              if (stateOverride) {
                if (url.isSpecial() && specialSchemes[url.scheme] == url.port) url.port = null;
                return;
              }

              buffer = '';

              if (url.scheme == 'file') {
                state = FILE;
              } else if (url.isSpecial() && base && base.scheme == url.scheme) {
                state = SPECIAL_RELATIVE_OR_AUTHORITY;
              } else if (url.isSpecial()) {
                state = SPECIAL_AUTHORITY_SLASHES;
              } else if (codePoints[pointer + 1] == '/') {
                state = PATH_OR_AUTHORITY;
                pointer++;
              } else {
                url.cannotBeABaseURL = true;
                push(url.path, '');
                state = CANNOT_BE_A_BASE_URL_PATH;
              }
            } else if (!stateOverride) {
              buffer = '';
              state = NO_SCHEME;
              pointer = 0;
              continue;
            } else return INVALID_SCHEME;

            break;

          case NO_SCHEME:
            if (!base || base.cannotBeABaseURL && chr != '#') return INVALID_SCHEME;

            if (base.cannotBeABaseURL && chr == '#') {
              url.scheme = base.scheme;
              url.path = arraySliceSimple(base.path);
              url.query = base.query;
              url.fragment = '';
              url.cannotBeABaseURL = true;
              state = FRAGMENT;
              break;
            }

            state = base.scheme == 'file' ? FILE : RELATIVE;
            continue;

          case SPECIAL_RELATIVE_OR_AUTHORITY:
            if (chr == '/' && codePoints[pointer + 1] == '/') {
              state = SPECIAL_AUTHORITY_IGNORE_SLASHES;
              pointer++;
            } else {
              state = RELATIVE;
              continue;
            }

            break;

          case PATH_OR_AUTHORITY:
            if (chr == '/') {
              state = AUTHORITY;
              break;
            } else {
              state = PATH;
              continue;
            }

          case RELATIVE:
            url.scheme = base.scheme;

            if (chr == EOF) {
              url.username = base.username;
              url.password = base.password;
              url.host = base.host;
              url.port = base.port;
              url.path = arraySliceSimple(base.path);
              url.query = base.query;
            } else if (chr == '/' || chr == '\\' && url.isSpecial()) {
              state = RELATIVE_SLASH;
            } else if (chr == '?') {
              url.username = base.username;
              url.password = base.password;
              url.host = base.host;
              url.port = base.port;
              url.path = arraySliceSimple(base.path);
              url.query = '';
              state = QUERY;
            } else if (chr == '#') {
              url.username = base.username;
              url.password = base.password;
              url.host = base.host;
              url.port = base.port;
              url.path = arraySliceSimple(base.path);
              url.query = base.query;
              url.fragment = '';
              state = FRAGMENT;
            } else {
              url.username = base.username;
              url.password = base.password;
              url.host = base.host;
              url.port = base.port;
              url.path = arraySliceSimple(base.path);
              url.path.length--;
              state = PATH;
              continue;
            }

            break;

          case RELATIVE_SLASH:
            if (url.isSpecial() && (chr == '/' || chr == '\\')) {
              state = SPECIAL_AUTHORITY_IGNORE_SLASHES;
            } else if (chr == '/') {
              state = AUTHORITY;
            } else {
              url.username = base.username;
              url.password = base.password;
              url.host = base.host;
              url.port = base.port;
              state = PATH;
              continue;
            }

            break;

          case SPECIAL_AUTHORITY_SLASHES:
            state = SPECIAL_AUTHORITY_IGNORE_SLASHES;
            if (chr != '/' || charAt(buffer, pointer + 1) != '/') continue;
            pointer++;
            break;

          case SPECIAL_AUTHORITY_IGNORE_SLASHES:
            if (chr != '/' && chr != '\\') {
              state = AUTHORITY;
              continue;
            }

            break;

          case AUTHORITY:
            if (chr == '@') {
              if (seenAt) buffer = '%40' + buffer;
              seenAt = true;
              bufferCodePoints = arrayFrom(buffer);

              for (var i = 0; i < bufferCodePoints.length; i++) {
                var codePoint = bufferCodePoints[i];

                if (codePoint == ':' && !seenPasswordToken) {
                  seenPasswordToken = true;
                  continue;
                }

                var encodedCodePoints = percentEncode(codePoint, userinfoPercentEncodeSet);
                if (seenPasswordToken) url.password += encodedCodePoints;else url.username += encodedCodePoints;
              }

              buffer = '';
            } else if (chr == EOF || chr == '/' || chr == '?' || chr == '#' || chr == '\\' && url.isSpecial()) {
              if (seenAt && buffer == '') return INVALID_AUTHORITY;
              pointer -= arrayFrom(buffer).length + 1;
              buffer = '';
              state = HOST;
            } else buffer += chr;

            break;

          case HOST:
          case HOSTNAME:
            if (stateOverride && url.scheme == 'file') {
              state = FILE_HOST;
              continue;
            } else if (chr == ':' && !seenBracket) {
              if (buffer == '') return INVALID_HOST;
              failure = url.parseHost(buffer);
              if (failure) return failure;
              buffer = '';
              state = PORT;
              if (stateOverride == HOSTNAME) return;
            } else if (chr == EOF || chr == '/' || chr == '?' || chr == '#' || chr == '\\' && url.isSpecial()) {
              if (url.isSpecial() && buffer == '') return INVALID_HOST;
              if (stateOverride && buffer == '' && (url.includesCredentials() || url.port !== null)) return;
              failure = url.parseHost(buffer);
              if (failure) return failure;
              buffer = '';
              state = PATH_START;
              if (stateOverride) return;
              continue;
            } else {
              if (chr == '[') seenBracket = true;else if (chr == ']') seenBracket = false;
              buffer += chr;
            }

            break;

          case PORT:
            if (exec(DIGIT, chr)) {
              buffer += chr;
            } else if (chr == EOF || chr == '/' || chr == '?' || chr == '#' || chr == '\\' && url.isSpecial() || stateOverride) {
              if (buffer != '') {
                var port = parseInt$1(buffer, 10);
                if (port > 0xFFFF) return INVALID_PORT;
                url.port = url.isSpecial() && port === specialSchemes[url.scheme] ? null : port;
                buffer = '';
              }

              if (stateOverride) return;
              state = PATH_START;
              continue;
            } else return INVALID_PORT;

            break;

          case FILE:
            url.scheme = 'file';
            if (chr == '/' || chr == '\\') state = FILE_SLASH;else if (base && base.scheme == 'file') {
              if (chr == EOF) {
                url.host = base.host;
                url.path = arraySliceSimple(base.path);
                url.query = base.query;
              } else if (chr == '?') {
                url.host = base.host;
                url.path = arraySliceSimple(base.path);
                url.query = '';
                state = QUERY;
              } else if (chr == '#') {
                url.host = base.host;
                url.path = arraySliceSimple(base.path);
                url.query = base.query;
                url.fragment = '';
                state = FRAGMENT;
              } else {
                if (!startsWithWindowsDriveLetter(join(arraySliceSimple(codePoints, pointer), ''))) {
                  url.host = base.host;
                  url.path = arraySliceSimple(base.path);
                  url.shortenPath();
                }

                state = PATH;
                continue;
              }
            } else {
              state = PATH;
              continue;
            }
            break;

          case FILE_SLASH:
            if (chr == '/' || chr == '\\') {
              state = FILE_HOST;
              break;
            }

            if (base && base.scheme == 'file' && !startsWithWindowsDriveLetter(join(arraySliceSimple(codePoints, pointer), ''))) {
              if (isWindowsDriveLetter(base.path[0], true)) push(url.path, base.path[0]);else url.host = base.host;
            }

            state = PATH;
            continue;

          case FILE_HOST:
            if (chr == EOF || chr == '/' || chr == '\\' || chr == '?' || chr == '#') {
              if (!stateOverride && isWindowsDriveLetter(buffer)) {
                state = PATH;
              } else if (buffer == '') {
                url.host = '';
                if (stateOverride) return;
                state = PATH_START;
              } else {
                failure = url.parseHost(buffer);
                if (failure) return failure;
                if (url.host == 'localhost') url.host = '';
                if (stateOverride) return;
                buffer = '';
                state = PATH_START;
              }

              continue;
            } else buffer += chr;

            break;

          case PATH_START:
            if (url.isSpecial()) {
              state = PATH;
              if (chr != '/' && chr != '\\') continue;
            } else if (!stateOverride && chr == '?') {
              url.query = '';
              state = QUERY;
            } else if (!stateOverride && chr == '#') {
              url.fragment = '';
              state = FRAGMENT;
            } else if (chr != EOF) {
              state = PATH;
              if (chr != '/') continue;
            }

            break;

          case PATH:
            if (chr == EOF || chr == '/' || chr == '\\' && url.isSpecial() || !stateOverride && (chr == '?' || chr == '#')) {
              if (isDoubleDot(buffer)) {
                url.shortenPath();

                if (chr != '/' && !(chr == '\\' && url.isSpecial())) {
                  push(url.path, '');
                }
              } else if (isSingleDot(buffer)) {
                if (chr != '/' && !(chr == '\\' && url.isSpecial())) {
                  push(url.path, '');
                }
              } else {
                if (url.scheme == 'file' && !url.path.length && isWindowsDriveLetter(buffer)) {
                  if (url.host) url.host = '';
                  buffer = charAt(buffer, 0) + ':'; // normalize windows drive letter
                }

                push(url.path, buffer);
              }

              buffer = '';

              if (url.scheme == 'file' && (chr == EOF || chr == '?' || chr == '#')) {
                while (url.path.length > 1 && url.path[0] === '') {
                  shift(url.path);
                }
              }

              if (chr == '?') {
                url.query = '';
                state = QUERY;
              } else if (chr == '#') {
                url.fragment = '';
                state = FRAGMENT;
              }
            } else {
              buffer += percentEncode(chr, pathPercentEncodeSet);
            }

            break;

          case CANNOT_BE_A_BASE_URL_PATH:
            if (chr == '?') {
              url.query = '';
              state = QUERY;
            } else if (chr == '#') {
              url.fragment = '';
              state = FRAGMENT;
            } else if (chr != EOF) {
              url.path[0] += percentEncode(chr, C0ControlPercentEncodeSet);
            }

            break;

          case QUERY:
            if (!stateOverride && chr == '#') {
              url.fragment = '';
              state = FRAGMENT;
            } else if (chr != EOF) {
              if (chr == "'" && url.isSpecial()) url.query += '%27';else if (chr == '#') url.query += '%23';else url.query += percentEncode(chr, C0ControlPercentEncodeSet);
            }

            break;

          case FRAGMENT:
            if (chr != EOF) url.fragment += percentEncode(chr, fragmentPercentEncodeSet);
            break;
        }

        pointer++;
      }
    },
    // https://url.spec.whatwg.org/#host-parsing
    parseHost: function parseHost(input) {
      var result, codePoints, index;

      if (charAt(input, 0) == '[') {
        if (charAt(input, input.length - 1) != ']') return INVALID_HOST;
        result = parseIPv6(stringSlice(input, 1, -1));
        if (!result) return INVALID_HOST;
        this.host = result; // opaque host
      } else if (!this.isSpecial()) {
        if (exec(FORBIDDEN_HOST_CODE_POINT_EXCLUDING_PERCENT, input)) return INVALID_HOST;
        result = '';
        codePoints = arrayFrom(input);

        for (index = 0; index < codePoints.length; index++) {
          result += percentEncode(codePoints[index], C0ControlPercentEncodeSet);
        }

        this.host = result;
      } else {
        input = stringPunycodeToAscii(input);
        if (exec(FORBIDDEN_HOST_CODE_POINT, input)) return INVALID_HOST;
        result = parseIPv4(input);
        if (result === null) return INVALID_HOST;
        this.host = result;
      }
    },
    // https://url.spec.whatwg.org/#cannot-have-a-username-password-port
    cannotHaveUsernamePasswordPort: function cannotHaveUsernamePasswordPort() {
      return !this.host || this.cannotBeABaseURL || this.scheme == 'file';
    },
    // https://url.spec.whatwg.org/#include-credentials
    includesCredentials: function includesCredentials() {
      return this.username != '' || this.password != '';
    },
    // https://url.spec.whatwg.org/#is-special
    isSpecial: function isSpecial() {
      return hasOwnProperty_1(specialSchemes, this.scheme);
    },
    // https://url.spec.whatwg.org/#shorten-a-urls-path
    shortenPath: function shortenPath() {
      var path = this.path;
      var pathSize = path.length;

      if (pathSize && (this.scheme != 'file' || pathSize != 1 || !isWindowsDriveLetter(path[0], true))) {
        path.length--;
      }
    },
    // https://url.spec.whatwg.org/#concept-url-serializer
    serialize: function serialize() {
      var url = this;
      var scheme = url.scheme;
      var username = url.username;
      var password = url.password;
      var host = url.host;
      var port = url.port;
      var path = url.path;
      var query = url.query;
      var fragment = url.fragment;
      var output = scheme + ':';

      if (host !== null) {
        output += '//';

        if (url.includesCredentials()) {
          output += username + (password ? ':' + password : '') + '@';
        }

        output += serializeHost(host);
        if (port !== null) output += ':' + port;
      } else if (scheme == 'file') output += '//';

      output += url.cannotBeABaseURL ? path[0] : path.length ? '/' + join(path, '/') : '';
      if (query !== null) output += '?' + query;
      if (fragment !== null) output += '#' + fragment;
      return output;
    },
    // https://url.spec.whatwg.org/#dom-url-href
    setHref: function setHref(href) {
      var failure = this.parse(href);
      if (failure) throw TypeError$1(failure);
      this.searchParams.update();
    },
    // https://url.spec.whatwg.org/#dom-url-origin
    getOrigin: function getOrigin() {
      var scheme = this.scheme;
      var port = this.port;
      if (scheme == 'blob') try {
        return new URLConstructor(scheme.path[0]).origin;
      } catch (error) {
        return 'null';
      }
      if (scheme == 'file' || !this.isSpecial()) return 'null';
      return scheme + '://' + serializeHost(this.host) + (port !== null ? ':' + port : '');
    },
    // https://url.spec.whatwg.org/#dom-url-protocol
    getProtocol: function getProtocol() {
      return this.scheme + ':';
    },
    setProtocol: function setProtocol(protocol) {
      this.parse(toString(protocol) + ':', SCHEME_START);
    },
    // https://url.spec.whatwg.org/#dom-url-username
    getUsername: function getUsername() {
      return this.username;
    },
    setUsername: function setUsername(username) {
      var codePoints = arrayFrom(toString(username));
      if (this.cannotHaveUsernamePasswordPort()) return;
      this.username = '';

      for (var i = 0; i < codePoints.length; i++) {
        this.username += percentEncode(codePoints[i], userinfoPercentEncodeSet);
      }
    },
    // https://url.spec.whatwg.org/#dom-url-password
    getPassword: function getPassword() {
      return this.password;
    },
    setPassword: function setPassword(password) {
      var codePoints = arrayFrom(toString(password));
      if (this.cannotHaveUsernamePasswordPort()) return;
      this.password = '';

      for (var i = 0; i < codePoints.length; i++) {
        this.password += percentEncode(codePoints[i], userinfoPercentEncodeSet);
      }
    },
    // https://url.spec.whatwg.org/#dom-url-host
    getHost: function getHost() {
      var host = this.host;
      var port = this.port;
      return host === null ? '' : port === null ? serializeHost(host) : serializeHost(host) + ':' + port;
    },
    setHost: function setHost(host) {
      if (this.cannotBeABaseURL) return;
      this.parse(host, HOST);
    },
    // https://url.spec.whatwg.org/#dom-url-hostname
    getHostname: function getHostname() {
      var host = this.host;
      return host === null ? '' : serializeHost(host);
    },
    setHostname: function setHostname(hostname) {
      if (this.cannotBeABaseURL) return;
      this.parse(hostname, HOSTNAME);
    },
    // https://url.spec.whatwg.org/#dom-url-port
    getPort: function getPort() {
      var port = this.port;
      return port === null ? '' : toString(port);
    },
    setPort: function setPort(port) {
      if (this.cannotHaveUsernamePasswordPort()) return;
      port = toString(port);
      if (port == '') this.port = null;else this.parse(port, PORT);
    },
    // https://url.spec.whatwg.org/#dom-url-pathname
    getPathname: function getPathname() {
      var path = this.path;
      return this.cannotBeABaseURL ? path[0] : path.length ? '/' + join(path, '/') : '';
    },
    setPathname: function setPathname(pathname) {
      if (this.cannotBeABaseURL) return;
      this.path = [];
      this.parse(pathname, PATH_START);
    },
    // https://url.spec.whatwg.org/#dom-url-search
    getSearch: function getSearch() {
      var query = this.query;
      return query ? '?' + query : '';
    },
    setSearch: function setSearch(search) {
      search = toString(search);

      if (search == '') {
        this.query = null;
      } else {
        if ('?' == charAt(search, 0)) search = stringSlice(search, 1);
        this.query = '';
        this.parse(search, QUERY);
      }

      this.searchParams.update();
    },
    // https://url.spec.whatwg.org/#dom-url-searchparams
    getSearchParams: function getSearchParams() {
      return this.searchParams.facade;
    },
    // https://url.spec.whatwg.org/#dom-url-hash
    getHash: function getHash() {
      var fragment = this.fragment;
      return fragment ? '#' + fragment : '';
    },
    setHash: function setHash(hash) {
      hash = toString(hash);

      if (hash == '') {
        this.fragment = null;
        return;
      }

      if ('#' == charAt(hash, 0)) hash = stringSlice(hash, 1);
      this.fragment = '';
      this.parse(hash, FRAGMENT);
    },
    update: function update() {
      this.query = this.searchParams.serialize() || null;
    }
  }; // `URL` constructor
  // https://url.spec.whatwg.org/#url-class

  var URLConstructor = function URL(url
  /* , base */
  ) {
    var that = anInstance(this, URLPrototype);
    var base = validateArgumentsLength(arguments.length, 1) > 1 ? arguments[1] : undefined;
    var state = setInternalState(that, new URLState(url, false, base));

    if (!descriptors) {
      that.href = state.serialize();
      that.origin = state.getOrigin();
      that.protocol = state.getProtocol();
      that.username = state.getUsername();
      that.password = state.getPassword();
      that.host = state.getHost();
      that.hostname = state.getHostname();
      that.port = state.getPort();
      that.pathname = state.getPathname();
      that.search = state.getSearch();
      that.searchParams = state.getSearchParams();
      that.hash = state.getHash();
    }
  };

  var URLPrototype = URLConstructor.prototype;

  var accessorDescriptor = function accessorDescriptor(getter, setter) {
    return {
      get: function get() {
        return getInternalURLState(this)[getter]();
      },
      set: setter && function (value) {
        return getInternalURLState(this)[setter](value);
      },
      configurable: true,
      enumerable: true
    };
  };

  if (descriptors) {
    defineProperties(URLPrototype, {
      // `URL.prototype.href` accessors pair
      // https://url.spec.whatwg.org/#dom-url-href
      href: accessorDescriptor('serialize', 'setHref'),
      // `URL.prototype.origin` getter
      // https://url.spec.whatwg.org/#dom-url-origin
      origin: accessorDescriptor('getOrigin'),
      // `URL.prototype.protocol` accessors pair
      // https://url.spec.whatwg.org/#dom-url-protocol
      protocol: accessorDescriptor('getProtocol', 'setProtocol'),
      // `URL.prototype.username` accessors pair
      // https://url.spec.whatwg.org/#dom-url-username
      username: accessorDescriptor('getUsername', 'setUsername'),
      // `URL.prototype.password` accessors pair
      // https://url.spec.whatwg.org/#dom-url-password
      password: accessorDescriptor('getPassword', 'setPassword'),
      // `URL.prototype.host` accessors pair
      // https://url.spec.whatwg.org/#dom-url-host
      host: accessorDescriptor('getHost', 'setHost'),
      // `URL.prototype.hostname` accessors pair
      // https://url.spec.whatwg.org/#dom-url-hostname
      hostname: accessorDescriptor('getHostname', 'setHostname'),
      // `URL.prototype.port` accessors pair
      // https://url.spec.whatwg.org/#dom-url-port
      port: accessorDescriptor('getPort', 'setPort'),
      // `URL.prototype.pathname` accessors pair
      // https://url.spec.whatwg.org/#dom-url-pathname
      pathname: accessorDescriptor('getPathname', 'setPathname'),
      // `URL.prototype.search` accessors pair
      // https://url.spec.whatwg.org/#dom-url-search
      search: accessorDescriptor('getSearch', 'setSearch'),
      // `URL.prototype.searchParams` getter
      // https://url.spec.whatwg.org/#dom-url-searchparams
      searchParams: accessorDescriptor('getSearchParams'),
      // `URL.prototype.hash` accessors pair
      // https://url.spec.whatwg.org/#dom-url-hash
      hash: accessorDescriptor('getHash', 'setHash')
    });
  } // `URL.prototype.toJSON` method
  // https://url.spec.whatwg.org/#dom-url-tojson


  redefine(URLPrototype, 'toJSON', function toJSON() {
    return getInternalURLState(this).serialize();
  }, {
    enumerable: true
  }); // `URL.prototype.toString` method
  // https://url.spec.whatwg.org/#URL-stringification-behavior

  redefine(URLPrototype, 'toString', function toString() {
    return getInternalURLState(this).serialize();
  }, {
    enumerable: true
  });

  if (NativeURL) {
    var nativeCreateObjectURL = NativeURL.createObjectURL;
    var nativeRevokeObjectURL = NativeURL.revokeObjectURL; // `URL.createObjectURL` method
    // https://developer.mozilla.org/en-US/docs/Web/API/URL/createObjectURL

    if (nativeCreateObjectURL) redefine(URLConstructor, 'createObjectURL', functionBindContext(nativeCreateObjectURL, NativeURL)); // `URL.revokeObjectURL` method
    // https://developer.mozilla.org/en-US/docs/Web/API/URL/revokeObjectURL

    if (nativeRevokeObjectURL) redefine(URLConstructor, 'revokeObjectURL', functionBindContext(nativeRevokeObjectURL, NativeURL));
  }

  setToStringTag(URLConstructor, 'URL');
  _export({
    global: true,
    forced: !nativeUrl,
    sham: !descriptors
  }, {
    URL: URLConstructor
  });

  // https://url.spec.whatwg.org/#dom-url-tojson


  _export({
    target: 'URL',
    proto: true,
    enumerable: true
  }, {
    toJSON: function toJSON() {
      return functionCall(URL.prototype.toString, this);
    }
  });

  createCommonjsModule(function (module) {
    var runtime = function (exports) {

      var Op = Object.prototype;
      var hasOwn = Op.hasOwnProperty;
      var undefined$1; // More compressible than void 0.

      var $Symbol = typeof Symbol === "function" ? Symbol : {};
      var iteratorSymbol = $Symbol.iterator || "@@iterator";
      var asyncIteratorSymbol = $Symbol.asyncIterator || "@@asyncIterator";
      var toStringTagSymbol = $Symbol.toStringTag || "@@toStringTag";

      function define(obj, key, value) {
        Object.defineProperty(obj, key, {
          value: value,
          enumerable: true,
          configurable: true,
          writable: true
        });
        return obj[key];
      }

      try {
        // IE 8 has a broken Object.defineProperty that only works on DOM objects.
        define({}, "");
      } catch (err) {
        define = function define(obj, key, value) {
          return obj[key] = value;
        };
      }

      function wrap(innerFn, outerFn, self, tryLocsList) {
        // If outerFn provided and outerFn.prototype is a Generator, then outerFn.prototype instanceof Generator.
        var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator;
        var generator = Object.create(protoGenerator.prototype);
        var context = new Context(tryLocsList || []); // The ._invoke method unifies the implementations of the .next,
        // .throw, and .return methods.

        generator._invoke = makeInvokeMethod(innerFn, self, context);
        return generator;
      }

      exports.wrap = wrap; // Try/catch helper to minimize deoptimizations. Returns a completion
      // record like context.tryEntries[i].completion. This interface could
      // have been (and was previously) designed to take a closure to be
      // invoked without arguments, but in all the cases we care about we
      // already have an existing method we want to call, so there's no need
      // to create a new function object. We can even get away with assuming
      // the method takes exactly one argument, since that happens to be true
      // in every case, so we don't have to touch the arguments object. The
      // only additional allocation required is the completion record, which
      // has a stable shape and so hopefully should be cheap to allocate.

      function tryCatch(fn, obj, arg) {
        try {
          return {
            type: "normal",
            arg: fn.call(obj, arg)
          };
        } catch (err) {
          return {
            type: "throw",
            arg: err
          };
        }
      }

      var GenStateSuspendedStart = "suspendedStart";
      var GenStateSuspendedYield = "suspendedYield";
      var GenStateExecuting = "executing";
      var GenStateCompleted = "completed"; // Returning this object from the innerFn has the same effect as
      // breaking out of the dispatch switch statement.

      var ContinueSentinel = {}; // Dummy constructor functions that we use as the .constructor and
      // .constructor.prototype properties for functions that return Generator
      // objects. For full spec compliance, you may wish to configure your
      // minifier not to mangle the names of these two functions.

      function Generator() {}

      function GeneratorFunction() {}

      function GeneratorFunctionPrototype() {} // This is a polyfill for %IteratorPrototype% for environments that
      // don't natively support it.


      var IteratorPrototype = {};
      define(IteratorPrototype, iteratorSymbol, function () {
        return this;
      });
      var getProto = Object.getPrototypeOf;
      var NativeIteratorPrototype = getProto && getProto(getProto(values([])));

      if (NativeIteratorPrototype && NativeIteratorPrototype !== Op && hasOwn.call(NativeIteratorPrototype, iteratorSymbol)) {
        // This environment has a native %IteratorPrototype%; use it instead
        // of the polyfill.
        IteratorPrototype = NativeIteratorPrototype;
      }

      var Gp = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(IteratorPrototype);
      GeneratorFunction.prototype = GeneratorFunctionPrototype;
      define(Gp, "constructor", GeneratorFunctionPrototype);
      define(GeneratorFunctionPrototype, "constructor", GeneratorFunction);
      GeneratorFunction.displayName = define(GeneratorFunctionPrototype, toStringTagSymbol, "GeneratorFunction"); // Helper for defining the .next, .throw, and .return methods of the
      // Iterator interface in terms of a single ._invoke method.

      function defineIteratorMethods(prototype) {
        ["next", "throw", "return"].forEach(function (method) {
          define(prototype, method, function (arg) {
            return this._invoke(method, arg);
          });
        });
      }

      exports.isGeneratorFunction = function (genFun) {
        var ctor = typeof genFun === "function" && genFun.constructor;
        return ctor ? ctor === GeneratorFunction || // For the native GeneratorFunction constructor, the best we can
        // do is to check its .name property.
        (ctor.displayName || ctor.name) === "GeneratorFunction" : false;
      };

      exports.mark = function (genFun) {
        if (Object.setPrototypeOf) {
          Object.setPrototypeOf(genFun, GeneratorFunctionPrototype);
        } else {
          genFun.__proto__ = GeneratorFunctionPrototype;
          define(genFun, toStringTagSymbol, "GeneratorFunction");
        }

        genFun.prototype = Object.create(Gp);
        return genFun;
      }; // Within the body of any async function, `await x` is transformed to
      // `yield regeneratorRuntime.awrap(x)`, so that the runtime can test
      // `hasOwn.call(value, "__await")` to determine if the yielded value is
      // meant to be awaited.


      exports.awrap = function (arg) {
        return {
          __await: arg
        };
      };

      function AsyncIterator(generator, PromiseImpl) {
        function invoke(method, arg, resolve, reject) {
          var record = tryCatch(generator[method], generator, arg);

          if (record.type === "throw") {
            reject(record.arg);
          } else {
            var result = record.arg;
            var value = result.value;

            if (value && _typeof(value) === "object" && hasOwn.call(value, "__await")) {
              return PromiseImpl.resolve(value.__await).then(function (value) {
                invoke("next", value, resolve, reject);
              }, function (err) {
                invoke("throw", err, resolve, reject);
              });
            }

            return PromiseImpl.resolve(value).then(function (unwrapped) {
              // When a yielded Promise is resolved, its final value becomes
              // the .value of the Promise<{value,done}> result for the
              // current iteration.
              result.value = unwrapped;
              resolve(result);
            }, function (error) {
              // If a rejected Promise was yielded, throw the rejection back
              // into the async generator function so it can be handled there.
              return invoke("throw", error, resolve, reject);
            });
          }
        }

        var previousPromise;

        function enqueue(method, arg) {
          function callInvokeWithMethodAndArg() {
            return new PromiseImpl(function (resolve, reject) {
              invoke(method, arg, resolve, reject);
            });
          }

          return previousPromise = // If enqueue has been called before, then we want to wait until
          // all previous Promises have been resolved before calling invoke,
          // so that results are always delivered in the correct order. If
          // enqueue has not been called before, then it is important to
          // call invoke immediately, without waiting on a callback to fire,
          // so that the async generator function has the opportunity to do
          // any necessary setup in a predictable way. This predictability
          // is why the Promise constructor synchronously invokes its
          // executor callback, and why async functions synchronously
          // execute code before the first await. Since we implement simple
          // async functions in terms of async generators, it is especially
          // important to get this right, even though it requires care.
          previousPromise ? previousPromise.then(callInvokeWithMethodAndArg, // Avoid propagating failures to Promises returned by later
          // invocations of the iterator.
          callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg();
        } // Define the unified helper method that is used to implement .next,
        // .throw, and .return (see defineIteratorMethods).


        this._invoke = enqueue;
      }

      defineIteratorMethods(AsyncIterator.prototype);
      define(AsyncIterator.prototype, asyncIteratorSymbol, function () {
        return this;
      });
      exports.AsyncIterator = AsyncIterator; // Note that simple async functions are implemented on top of
      // AsyncIterator objects; they just return a Promise for the value of
      // the final result produced by the iterator.

      exports.async = function (innerFn, outerFn, self, tryLocsList, PromiseImpl) {
        if (PromiseImpl === void 0) PromiseImpl = Promise;
        var iter = new AsyncIterator(wrap(innerFn, outerFn, self, tryLocsList), PromiseImpl);
        return exports.isGeneratorFunction(outerFn) ? iter // If outerFn is a generator, return the full iterator.
        : iter.next().then(function (result) {
          return result.done ? result.value : iter.next();
        });
      };

      function makeInvokeMethod(innerFn, self, context) {
        var state = GenStateSuspendedStart;
        return function invoke(method, arg) {
          if (state === GenStateExecuting) {
            throw new Error("Generator is already running");
          }

          if (state === GenStateCompleted) {
            if (method === "throw") {
              throw arg;
            } // Be forgiving, per 25.3.3.3.3 of the spec:
            // https://people.mozilla.org/~jorendorff/es6-draft.html#sec-generatorresume


            return doneResult();
          }

          context.method = method;
          context.arg = arg;

          while (true) {
            var delegate = context.delegate;

            if (delegate) {
              var delegateResult = maybeInvokeDelegate(delegate, context);

              if (delegateResult) {
                if (delegateResult === ContinueSentinel) continue;
                return delegateResult;
              }
            }

            if (context.method === "next") {
              // Setting context._sent for legacy support of Babel's
              // function.sent implementation.
              context.sent = context._sent = context.arg;
            } else if (context.method === "throw") {
              if (state === GenStateSuspendedStart) {
                state = GenStateCompleted;
                throw context.arg;
              }

              context.dispatchException(context.arg);
            } else if (context.method === "return") {
              context.abrupt("return", context.arg);
            }

            state = GenStateExecuting;
            var record = tryCatch(innerFn, self, context);

            if (record.type === "normal") {
              // If an exception is thrown from innerFn, we leave state ===
              // GenStateExecuting and loop back for another invocation.
              state = context.done ? GenStateCompleted : GenStateSuspendedYield;

              if (record.arg === ContinueSentinel) {
                continue;
              }

              return {
                value: record.arg,
                done: context.done
              };
            } else if (record.type === "throw") {
              state = GenStateCompleted; // Dispatch the exception by looping back around to the
              // context.dispatchException(context.arg) call above.

              context.method = "throw";
              context.arg = record.arg;
            }
          }
        };
      } // Call delegate.iterator[context.method](context.arg) and handle the
      // result, either by returning a { value, done } result from the
      // delegate iterator, or by modifying context.method and context.arg,
      // setting context.delegate to null, and returning the ContinueSentinel.


      function maybeInvokeDelegate(delegate, context) {
        var method = delegate.iterator[context.method];

        if (method === undefined$1) {
          // A .throw or .return when the delegate iterator has no .throw
          // method always terminates the yield* loop.
          context.delegate = null;

          if (context.method === "throw") {
            // Note: ["return"] must be used for ES3 parsing compatibility.
            if (delegate.iterator["return"]) {
              // If the delegate iterator has a return method, give it a
              // chance to clean up.
              context.method = "return";
              context.arg = undefined$1;
              maybeInvokeDelegate(delegate, context);

              if (context.method === "throw") {
                // If maybeInvokeDelegate(context) changed context.method from
                // "return" to "throw", let that override the TypeError below.
                return ContinueSentinel;
              }
            }

            context.method = "throw";
            context.arg = new TypeError("The iterator does not provide a 'throw' method");
          }

          return ContinueSentinel;
        }

        var record = tryCatch(method, delegate.iterator, context.arg);

        if (record.type === "throw") {
          context.method = "throw";
          context.arg = record.arg;
          context.delegate = null;
          return ContinueSentinel;
        }

        var info = record.arg;

        if (!info) {
          context.method = "throw";
          context.arg = new TypeError("iterator result is not an object");
          context.delegate = null;
          return ContinueSentinel;
        }

        if (info.done) {
          // Assign the result of the finished delegate to the temporary
          // variable specified by delegate.resultName (see delegateYield).
          context[delegate.resultName] = info.value; // Resume execution at the desired location (see delegateYield).

          context.next = delegate.nextLoc; // If context.method was "throw" but the delegate handled the
          // exception, let the outer generator proceed normally. If
          // context.method was "next", forget context.arg since it has been
          // "consumed" by the delegate iterator. If context.method was
          // "return", allow the original .return call to continue in the
          // outer generator.

          if (context.method !== "return") {
            context.method = "next";
            context.arg = undefined$1;
          }
        } else {
          // Re-yield the result returned by the delegate method.
          return info;
        } // The delegate iterator is finished, so forget it and continue with
        // the outer generator.


        context.delegate = null;
        return ContinueSentinel;
      } // Define Generator.prototype.{next,throw,return} in terms of the
      // unified ._invoke helper method.


      defineIteratorMethods(Gp);
      define(Gp, toStringTagSymbol, "Generator"); // A Generator should always return itself as the iterator object when the
      // @@iterator function is called on it. Some browsers' implementations of the
      // iterator prototype chain incorrectly implement this, causing the Generator
      // object to not be returned from this call. This ensures that doesn't happen.
      // See https://github.com/facebook/regenerator/issues/274 for more details.

      define(Gp, iteratorSymbol, function () {
        return this;
      });
      define(Gp, "toString", function () {
        return "[object Generator]";
      });

      function pushTryEntry(locs) {
        var entry = {
          tryLoc: locs[0]
        };

        if (1 in locs) {
          entry.catchLoc = locs[1];
        }

        if (2 in locs) {
          entry.finallyLoc = locs[2];
          entry.afterLoc = locs[3];
        }

        this.tryEntries.push(entry);
      }

      function resetTryEntry(entry) {
        var record = entry.completion || {};
        record.type = "normal";
        delete record.arg;
        entry.completion = record;
      }

      function Context(tryLocsList) {
        // The root entry object (effectively a try statement without a catch
        // or a finally block) gives us a place to store values thrown from
        // locations where there is no enclosing try statement.
        this.tryEntries = [{
          tryLoc: "root"
        }];
        tryLocsList.forEach(pushTryEntry, this);
        this.reset(true);
      }

      exports.keys = function (object) {
        var keys = [];

        for (var key in object) {
          keys.push(key);
        }

        keys.reverse(); // Rather than returning an object with a next method, we keep
        // things simple and return the next function itself.

        return function next() {
          while (keys.length) {
            var key = keys.pop();

            if (key in object) {
              next.value = key;
              next.done = false;
              return next;
            }
          } // To avoid creating an additional object, we just hang the .value
          // and .done properties off the next function object itself. This
          // also ensures that the minifier will not anonymize the function.


          next.done = true;
          return next;
        };
      };

      function values(iterable) {
        if (iterable) {
          var iteratorMethod = iterable[iteratorSymbol];

          if (iteratorMethod) {
            return iteratorMethod.call(iterable);
          }

          if (typeof iterable.next === "function") {
            return iterable;
          }

          if (!isNaN(iterable.length)) {
            var i = -1,
                next = function next() {
              while (++i < iterable.length) {
                if (hasOwn.call(iterable, i)) {
                  next.value = iterable[i];
                  next.done = false;
                  return next;
                }
              }

              next.value = undefined$1;
              next.done = true;
              return next;
            };

            return next.next = next;
          }
        } // Return an iterator with no values.


        return {
          next: doneResult
        };
      }

      exports.values = values;

      function doneResult() {
        return {
          value: undefined$1,
          done: true
        };
      }

      Context.prototype = {
        constructor: Context,
        reset: function reset(skipTempReset) {
          this.prev = 0;
          this.next = 0; // Resetting context._sent for legacy support of Babel's
          // function.sent implementation.

          this.sent = this._sent = undefined$1;
          this.done = false;
          this.delegate = null;
          this.method = "next";
          this.arg = undefined$1;
          this.tryEntries.forEach(resetTryEntry);

          if (!skipTempReset) {
            for (var name in this) {
              // Not sure about the optimal order of these conditions:
              if (name.charAt(0) === "t" && hasOwn.call(this, name) && !isNaN(+name.slice(1))) {
                this[name] = undefined$1;
              }
            }
          }
        },
        stop: function stop() {
          this.done = true;
          var rootEntry = this.tryEntries[0];
          var rootRecord = rootEntry.completion;

          if (rootRecord.type === "throw") {
            throw rootRecord.arg;
          }

          return this.rval;
        },
        dispatchException: function dispatchException(exception) {
          if (this.done) {
            throw exception;
          }

          var context = this;

          function handle(loc, caught) {
            record.type = "throw";
            record.arg = exception;
            context.next = loc;

            if (caught) {
              // If the dispatched exception was caught by a catch block,
              // then let that catch block handle the exception normally.
              context.method = "next";
              context.arg = undefined$1;
            }

            return !!caught;
          }

          for (var i = this.tryEntries.length - 1; i >= 0; --i) {
            var entry = this.tryEntries[i];
            var record = entry.completion;

            if (entry.tryLoc === "root") {
              // Exception thrown outside of any try block that could handle
              // it, so set the completion value of the entire function to
              // throw the exception.
              return handle("end");
            }

            if (entry.tryLoc <= this.prev) {
              var hasCatch = hasOwn.call(entry, "catchLoc");
              var hasFinally = hasOwn.call(entry, "finallyLoc");

              if (hasCatch && hasFinally) {
                if (this.prev < entry.catchLoc) {
                  return handle(entry.catchLoc, true);
                } else if (this.prev < entry.finallyLoc) {
                  return handle(entry.finallyLoc);
                }
              } else if (hasCatch) {
                if (this.prev < entry.catchLoc) {
                  return handle(entry.catchLoc, true);
                }
              } else if (hasFinally) {
                if (this.prev < entry.finallyLoc) {
                  return handle(entry.finallyLoc);
                }
              } else {
                throw new Error("try statement without catch or finally");
              }
            }
          }
        },
        abrupt: function abrupt(type, arg) {
          for (var i = this.tryEntries.length - 1; i >= 0; --i) {
            var entry = this.tryEntries[i];

            if (entry.tryLoc <= this.prev && hasOwn.call(entry, "finallyLoc") && this.prev < entry.finallyLoc) {
              var finallyEntry = entry;
              break;
            }
          }

          if (finallyEntry && (type === "break" || type === "continue") && finallyEntry.tryLoc <= arg && arg <= finallyEntry.finallyLoc) {
            // Ignore the finally entry if control is not jumping to a
            // location outside the try/catch block.
            finallyEntry = null;
          }

          var record = finallyEntry ? finallyEntry.completion : {};
          record.type = type;
          record.arg = arg;

          if (finallyEntry) {
            this.method = "next";
            this.next = finallyEntry.finallyLoc;
            return ContinueSentinel;
          }

          return this.complete(record);
        },
        complete: function complete(record, afterLoc) {
          if (record.type === "throw") {
            throw record.arg;
          }

          if (record.type === "break" || record.type === "continue") {
            this.next = record.arg;
          } else if (record.type === "return") {
            this.rval = this.arg = record.arg;
            this.method = "return";
            this.next = "end";
          } else if (record.type === "normal" && afterLoc) {
            this.next = afterLoc;
          }

          return ContinueSentinel;
        },
        finish: function finish(finallyLoc) {
          for (var i = this.tryEntries.length - 1; i >= 0; --i) {
            var entry = this.tryEntries[i];

            if (entry.finallyLoc === finallyLoc) {
              this.complete(entry.completion, entry.afterLoc);
              resetTryEntry(entry);
              return ContinueSentinel;
            }
          }
        },
        "catch": function _catch(tryLoc) {
          for (var i = this.tryEntries.length - 1; i >= 0; --i) {
            var entry = this.tryEntries[i];

            if (entry.tryLoc === tryLoc) {
              var record = entry.completion;

              if (record.type === "throw") {
                var thrown = record.arg;
                resetTryEntry(entry);
              }

              return thrown;
            }
          } // The context.catch method must only be called with a location
          // argument that corresponds to a known catch block.


          throw new Error("illegal catch attempt");
        },
        delegateYield: function delegateYield(iterable, resultName, nextLoc) {
          this.delegate = {
            iterator: values(iterable),
            resultName: resultName,
            nextLoc: nextLoc
          };

          if (this.method === "next") {
            // Deliberately forget the last sent value so that we don't
            // accidentally pass it on to the delegate.
            this.arg = undefined$1;
          }

          return ContinueSentinel;
        }
      }; // Regardless of whether this script is executing as a CommonJS module
      // or not, return the runtime object so that we can declare the variable
      // regeneratorRuntime in the outer scope, which allows this module to be
      // injected easily by `bin/regenerator --include-runtime script.js`.

      return exports;
    }( // If this script is executing as a CommonJS module, use module.exports
    // as the regeneratorRuntime namespace. Otherwise create a new empty
    // object. Either way, the resulting object will be used to initialize
    // the regeneratorRuntime variable at the top of this file.
    module.exports );

    try {
      regeneratorRuntime = runtime;
    } catch (accidentalStrictMode) {
      // This module should not be running in strict mode, so the above
      // assignment should always work unless something is misconfigured. Just
      // in case runtime.js accidentally runs in strict mode, in modern engines
      // we can explicitly access globalThis. In older engines we can escape
      // strict mode using a global Function call. This could conceivably fail
      // if a Content Security Policy forbids using Function, but in that case
      // the proper solution is to fix the accidental strict mode problem. If
      // you've misconfigured your bundler to force strict mode and applied a
      // CSP to forbid Function, and you're not willing to fix either of those
      // problems, please detail your unique predicament in a GitHub issue.
      if ((typeof globalThis === "undefined" ? "undefined" : _typeof(globalThis)) === "object") {
        globalThis.regeneratorRuntime = runtime;
      } else {
        Function("r", "regeneratorRuntime = r")(runtime);
      }
    }
  });

  /**
  @license @nocompile
  Copyright (c) 2018 The Polymer Project Authors. All rights reserved.
  This code may only be used under the BSD style license found at http://polymer.github.io/LICENSE.txt
  The complete set of authors may be found at http://polymer.github.io/AUTHORS.txt
  The complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt
  Code distributed by Google as part of the polymer project is also
  subject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt
  */
  (function () {

    (function () {
      if (void 0 === window.Reflect || void 0 === window.customElements || window.customElements.polyfillWrapFlushCallback) return;
      var a = HTMLElement;
      window.HTMLElement = {
        HTMLElement: function HTMLElement() {
          return Reflect.construct(a, [], this.constructor);
        }
      }.HTMLElement, HTMLElement.prototype = a.prototype, HTMLElement.prototype.constructor = HTMLElement, Object.setPrototypeOf(HTMLElement, a);
    })();
  })();

  (function () {

    var v;

    function ba(a) {
      var b = 0;
      return function () {
        return b < a.length ? {
          done: !1,
          value: a[b++]
        } : {
          done: !0
        };
      };
    }

    var ca = "function" == typeof Object.defineProperties ? Object.defineProperty : function (a, b, c) {
      if (a == Array.prototype || a == Object.prototype) return a;
      a[b] = c.value;
      return a;
    };

    function da(a) {
      a = ["object" == (typeof globalThis === "undefined" ? "undefined" : _typeof(globalThis)) && globalThis, a, "object" == (typeof window === "undefined" ? "undefined" : _typeof(window)) && window, "object" == (typeof self === "undefined" ? "undefined" : _typeof(self)) && self, "object" == _typeof(commonjsGlobal) && commonjsGlobal];

      for (var b = 0; b < a.length; ++b) {
        var c = a[b];
        if (c && c.Math == Math) return c;
      }

      throw Error("Cannot find global object");
    }

    var ea = da(this);

    function ia(a, b) {
      if (b) a: {
        var c = ea;
        a = a.split(".");

        for (var d = 0; d < a.length - 1; d++) {
          var e = a[d];
          if (!(e in c)) break a;
          c = c[e];
        }

        a = a[a.length - 1];
        d = c[a];
        b = b(d);
        b != d && null != b && ca(c, a, {
          configurable: !0,
          writable: !0,
          value: b
        });
      }
    }

    ia("Symbol", function (a) {
      function b(e) {
        if (this instanceof b) throw new TypeError("Symbol is not a constructor");
        return new c("jscomp_symbol_" + (e || "") + "_" + d++, e);
      }

      function c(e, f) {
        this.g = e;
        ca(this, "description", {
          configurable: !0,
          writable: !0,
          value: f
        });
      }

      if (a) return a;

      c.prototype.toString = function () {
        return this.g;
      };

      var d = 0;
      return b;
    });
    ia("Symbol.iterator", function (a) {
      if (a) return a;
      a = Symbol("Symbol.iterator");

      for (var b = "Array Int8Array Uint8Array Uint8ClampedArray Int16Array Uint16Array Int32Array Uint32Array Float32Array Float64Array".split(" "), c = 0; c < b.length; c++) {
        var d = ea[b[c]];
        "function" === typeof d && "function" != typeof d.prototype[a] && ca(d.prototype, a, {
          configurable: !0,
          writable: !0,
          value: function value() {
            return ja(ba(this));
          }
        });
      }

      return a;
    });

    function ja(a) {
      a = {
        next: a
      };

      a[Symbol.iterator] = function () {
        return this;
      };

      return a;
    }

    function ka(a) {
      var b = "undefined" != typeof Symbol && Symbol.iterator && a[Symbol.iterator];
      return b ? b.call(a) : {
        next: ba(a)
      };
    }

    function x(a) {
      if (!(a instanceof Array)) {
        a = ka(a);

        for (var b, c = []; !(b = a.next()).done;) {
          c.push(b.value);
        }

        a = c;
      }

      return a;
    }

    var ma;
    if ("function" == typeof Object.setPrototypeOf) ma = Object.setPrototypeOf;else {
      var na;

      a: {
        var oa = {
          a: !0
        },
            pa = {};

        try {
          pa.__proto__ = oa;
          na = pa.a;
          break a;
        } catch (a) {}

        na = !1;
      }

      ma = na ? function (a, b) {
        a.__proto__ = b;
        if (a.__proto__ !== b) throw new TypeError(a + " is not extensible");
        return a;
      } : null;
    }
    var qa = ma;

    function ra() {
      this.u = !1;
      this.h = null;
      this.Ka = void 0;
      this.g = 1;
      this.da = 0;
      this.i = null;
    }

    function ua(a) {
      if (a.u) throw new TypeError("Generator is already running");
      a.u = !0;
    }

    ra.prototype.O = function (a) {
      this.Ka = a;
    };

    function xa(a, b) {
      a.i = {
        Wa: b,
        $a: !0
      };
      a.g = a.da;
    }

    ra.prototype.return = function (a) {
      this.i = {
        return: a
      };
      this.g = this.da;
    };

    function ya(a, b) {
      a.g = 3;
      return {
        value: b
      };
    }

    function za(a) {
      this.g = new ra();
      this.h = a;
    }

    function Aa(a, b) {
      ua(a.g);
      var c = a.g.h;
      if (c) return Ba(a, "return" in c ? c["return"] : function (d) {
        return {
          value: d,
          done: !0
        };
      }, b, a.g.return);
      a.g.return(b);
      return Ca(a);
    }

    function Ba(a, b, c, d) {
      try {
        var e = b.call(a.g.h, c);
        if (!(e instanceof Object)) throw new TypeError("Iterator result " + e + " is not an object");
        if (!e.done) return a.g.u = !1, e;
        var f = e.value;
      } catch (g) {
        return a.g.h = null, xa(a.g, g), Ca(a);
      }

      a.g.h = null;
      d.call(a.g, f);
      return Ca(a);
    }

    function Ca(a) {
      for (; a.g.g;) {
        try {
          var b = a.h(a.g);
          if (b) return a.g.u = !1, {
            value: b.value,
            done: !1
          };
        } catch (c) {
          a.g.Ka = void 0, xa(a.g, c);
        }
      }

      a.g.u = !1;

      if (a.g.i) {
        b = a.g.i;
        a.g.i = null;
        if (b.$a) throw b.Wa;
        return {
          value: b.return,
          done: !0
        };
      }

      return {
        value: void 0,
        done: !0
      };
    }

    function Da(a) {
      this.next = function (b) {
        ua(a.g);
        a.g.h ? b = Ba(a, a.g.h.next, b, a.g.O) : (a.g.O(b), b = Ca(a));
        return b;
      };

      this.throw = function (b) {
        ua(a.g);
        a.g.h ? b = Ba(a, a.g.h["throw"], b, a.g.O) : (xa(a.g, b), b = Ca(a));
        return b;
      };

      this.return = function (b) {
        return Aa(a, b);
      };

      this[Symbol.iterator] = function () {
        return this;
      };
    }

    function Ea(a, b) {
      b = new Da(new za(b));
      qa && a.prototype && qa(b, a.prototype);
      return b;
    }

    Array.from || (Array.from = function (a) {
      return [].slice.call(a);
    });
    Object.assign || (Object.assign = function (a) {
      for (var b = [].slice.call(arguments, 1), c = 0, d; c < b.length; c++) {
        if (d = b[c]) for (var e = a, f = Object.keys(d), g = 0; g < f.length; g++) {
          var h = f[g];
          e[h] = d[h];
        }
      }

      return a;
    });
    var Fa = setTimeout;

    function Ga() {}

    function Ha(a, b) {
      return function () {
        a.apply(b, arguments);
      };
    }

    function A(a) {
      if (!(this instanceof A)) throw new TypeError("Promises must be constructed via new");
      if ("function" !== typeof a) throw new TypeError("not a function");
      this.N = 0;
      this.Ea = !1;
      this.I = void 0;
      this.ba = [];
      Ia(a, this);
    }

    function Ja(a, b) {
      for (; 3 === a.N;) {
        a = a.I;
      }

      0 === a.N ? a.ba.push(b) : (a.Ea = !0, Ka(function () {
        var c = 1 === a.N ? b.bb : b.cb;
        if (null === c) (1 === a.N ? La : Ma)(b.promise, a.I);else {
          try {
            var d = c(a.I);
          } catch (e) {
            Ma(b.promise, e);
            return;
          }

          La(b.promise, d);
        }
      }));
    }

    function La(a, b) {
      try {
        if (b === a) throw new TypeError("A promise cannot be resolved with itself.");

        if (b && ("object" === _typeof(b) || "function" === typeof b)) {
          var c = b.then;

          if (b instanceof A) {
            a.N = 3;
            a.I = b;
            Na(a);
            return;
          }

          if ("function" === typeof c) {
            Ia(Ha(c, b), a);
            return;
          }
        }

        a.N = 1;
        a.I = b;
        Na(a);
      } catch (d) {
        Ma(a, d);
      }
    }

    function Ma(a, b) {
      a.N = 2;
      a.I = b;
      Na(a);
    }

    function Na(a) {
      2 === a.N && 0 === a.ba.length && Ka(function () {
        a.Ea || "undefined" !== typeof console && console && console.warn("Possible Unhandled Promise Rejection:", a.I);
      });

      for (var b = 0, c = a.ba.length; b < c; b++) {
        Ja(a, a.ba[b]);
      }

      a.ba = null;
    }

    function Oa(a, b, c) {
      this.bb = "function" === typeof a ? a : null;
      this.cb = "function" === typeof b ? b : null;
      this.promise = c;
    }

    function Ia(a, b) {
      var c = !1;

      try {
        a(function (d) {
          c || (c = !0, La(b, d));
        }, function (d) {
          c || (c = !0, Ma(b, d));
        });
      } catch (d) {
        c || (c = !0, Ma(b, d));
      }
    }

    A.prototype["catch"] = function (a) {
      return this.then(null, a);
    };

    A.prototype.then = function (a, b) {
      var c = new this.constructor(Ga);
      Ja(this, new Oa(a, b, c));
      return c;
    };

    A.prototype["finally"] = function (a) {
      var b = this.constructor;
      return this.then(function (c) {
        return b.resolve(a()).then(function () {
          return c;
        });
      }, function (c) {
        return b.resolve(a()).then(function () {
          return b.reject(c);
        });
      });
    };

    function Pa(a) {
      return new A(function (b, c) {
        function d(h, k) {
          try {
            if (k && ("object" === _typeof(k) || "function" === typeof k)) {
              var l = k.then;

              if ("function" === typeof l) {
                l.call(k, function (m) {
                  d(h, m);
                }, c);
                return;
              }
            }

            e[h] = k;
            0 === --f && b(e);
          } catch (m) {
            c(m);
          }
        }

        if (!a || "undefined" === typeof a.length) return c(new TypeError("Promise.all accepts an array"));
        var e = Array.prototype.slice.call(a);
        if (0 === e.length) return b([]);

        for (var f = e.length, g = 0; g < e.length; g++) {
          d(g, e[g]);
        }
      });
    }

    function Qa(a) {
      return a && "object" === _typeof(a) && a.constructor === A ? a : new A(function (b) {
        b(a);
      });
    }

    function Ra(a) {
      return new A(function (b, c) {
        c(a);
      });
    }

    function Sa(a) {
      return new A(function (b, c) {
        if (!a || "undefined" === typeof a.length) return c(new TypeError("Promise.race accepts an array"));

        for (var d = 0, e = a.length; d < e; d++) {
          Qa(a[d]).then(b, c);
        }
      });
    }

    var Ka = "function" === typeof setImmediate && function (a) {
      setImmediate(a);
    } || function (a) {
      Fa(a, 0);
    };
    /*
    Copyright (c) 2017 The Polymer Project Authors. All rights reserved.
    This code may only be used under the BSD style license found at
    http://polymer.github.io/LICENSE.txt The complete set of authors may be found at
    http://polymer.github.io/AUTHORS.txt The complete set of contributors may be
    found at http://polymer.github.io/CONTRIBUTORS.txt Code distributed by Google as
    part of the polymer project is also subject to an additional IP rights grant
    found at http://polymer.github.io/PATENTS.txt
    */


    if (!window.Promise) {
      window.Promise = A;
      A.prototype.then = A.prototype.then;
      A.all = Pa;
      A.race = Sa;
      A.resolve = Qa;
      A.reject = Ra;
      var Ta = document.createTextNode(""),
          Va = [];
      new MutationObserver(function () {
        for (var a = Va.length, b = 0; b < a; b++) {
          Va[b]();
        }

        Va.splice(0, a);
      }).observe(Ta, {
        characterData: !0
      });

      Ka = function Ka(a) {
        Va.push(a);
        Ta.textContent = 0 < Ta.textContent.length ? "" : "a";
      };
    }
    /*
    Copyright (C) 2015 by WebReflection
    Permission is hereby granted, free of charge, to any person obtaining a copy
    of this software and associated documentation files (the "Software"), to deal
    in the Software without restriction, including without limitation the rights
    to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
    copies of the Software, and to permit persons to whom the Software is
    furnished to do so, subject to the following conditions:
    The above copyright notice and this permission notice shall be included in
    all copies or substantial portions of the Software.
    THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
    IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
    FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
    AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
    LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
    OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
    THE SOFTWARE.
    */

    (function (a, b) {
      if (!(b in a)) {
        var c = _typeof(commonjsGlobal) === _typeof(c) ? window : commonjsGlobal,
            d = 0,
            e = String(Math.random()),
            f = "__\x01symbol@@" + e,
            g = a.getOwnPropertyNames,
            h = a.getOwnPropertyDescriptor,
            k = a.create,
            l = a.keys,
            m = a.freeze || a,
            q = a.defineProperty,
            H = a.defineProperties,
            C = h(a, "getOwnPropertyNames"),
            t = a.prototype,
            F = t.hasOwnProperty,
            E = t.propertyIsEnumerable,
            M = t.toString,
            y = function y(I, u, G) {
          F.call(I, f) || q(I, f, {
            enumerable: !1,
            configurable: !1,
            writable: !1,
            value: {}
          });
          I[f]["@@" + u] = G;
        },
            W = function W(I, u) {
          var G = k(I);
          g(u).forEach(function (p) {
            sa.call(u, p) && Ua(G, p, u[p]);
          });
          return G;
        },
            w = function w() {},
            ta = function ta(I) {
          return I != f && !F.call(fa, I);
        },
            ha = function ha(I) {
          return I != f && F.call(fa, I);
        },
            sa = function sa(I) {
          var u = String(I);
          return ha(u) ? F.call(this, u) && !!this[f] && this[f]["@@" + u] : E.call(this, I);
        },
            n = function n(I) {
          q(t, I, {
            enumerable: !1,
            configurable: !0,
            get: w,
            set: function set(u) {
              wa(this, I, {
                enumerable: !1,
                configurable: !0,
                writable: !0,
                value: u
              });
              y(this, I, !0);
            }
          });
          fa[I] = q(a(I), "constructor", gc);
          return m(fa[I]);
        },
            J = function G(u) {
          if (this instanceof G) throw new TypeError("Symbol is not a constructor");
          return n("__\x01symbol:".concat(u || "", e, ++d));
        },
            fa = k(null),
            gc = {
          value: J
        },
            fb = function fb(u) {
          return fa[u];
        },
            Ua = function Ua(u, G, p) {
          var r = String(G);

          if (ha(r)) {
            G = wa;

            if (p.enumerable) {
              var B = k(p);
              B.enumerable = !1;
            } else B = p;

            G(u, r, B);
            y(u, r, !!p.enumerable);
          } else q(u, G, p);

          return u;
        },
            gb = function gb(u) {
          return g(u).filter(ha).map(fb);
        };

        C.value = Ua;
        q(a, "defineProperty", C);
        C.value = gb;
        q(a, b, C);

        C.value = function (u) {
          return g(u).filter(ta);
        };

        q(a, "getOwnPropertyNames", C);

        C.value = function (u, G) {
          var p = gb(G);
          p.length ? l(G).concat(p).forEach(function (r) {
            sa.call(G, r) && Ua(u, r, G[r]);
          }) : H(u, G);
          return u;
        };

        q(a, "defineProperties", C);
        C.value = sa;
        q(t, "propertyIsEnumerable", C);
        C.value = J;
        q(c, "Symbol", C);

        C.value = function (u) {
          u = "__\x01symbol:".concat("__\x01symbol:", u, e);
          return u in t ? fa[u] : n(u);
        };

        q(J, "for", C);

        C.value = function (u) {
          if (ta(u)) throw new TypeError(u + " is not a symbol");
          if (F.call(fa, u) && (u = u.slice(10), "__\x01symbol:" === u.slice(0, 10) && (u = u.slice(10), u !== e))) return u = u.slice(0, u.length - e.length), 0 < u.length ? u : void 0;
        };

        q(J, "keyFor", C);

        C.value = function (u, G) {
          var p = h(u, G);
          p && ha(G) && (p.enumerable = sa.call(u, G));
          return p;
        };

        q(a, "getOwnPropertyDescriptor", C);

        C.value = function (u, G) {
          return 1 === arguments.length || "undefined" === typeof G ? k(u) : W(u, G);
        };

        q(a, "create", C);

        C.value = function () {
          var u = M.call(this);
          return "[object String]" === u && ha(this) ? "[object Symbol]" : u;
        };

        q(t, "toString", C);

        try {
          if (!0 === k(q({}, "__\x01symbol:", {
            get: function get() {
              return q(this, "__\x01symbol:", {
                value: !0
              })["__\x01symbol:"];
            }
          }))["__\x01symbol:"]) var wa = q;else throw "IE11";
        } catch (u) {
          wa = function wa(G, p, r) {
            var B = h(t, p);
            delete t[p];
            q(G, p, r);
            q(t, p, B);
          };
        }
      }
    })(Object, "getOwnPropertySymbols");

    (function (a, b) {
      var c = a.defineProperty,
          d = a.prototype,
          e = d.toString,
          f;
      "iterator match replace search split hasInstance isConcatSpreadable unscopables species toPrimitive toStringTag".split(" ").forEach(function (g) {
        g in b || (c(b, g, {
          value: b(g)
        }), "toStringTag" === g && (f = a.getOwnPropertyDescriptor(d, "toString"), f.value = function () {
          var h = e.call(this),
              k = null == this ? this : this[b.toStringTag];
          return null == k ? h : "[object " + k + "]";
        }, c(d, "toString", f)));
      });
    })(Object, Symbol);

    (function (a, b, c) {
      function d() {
        return this;
      }

      b[a] || (b[a] = function () {
        var e = 0,
            f = this,
            g = {
          next: function next() {
            var h = f.length <= e;
            return h ? {
              done: h
            } : {
              done: h,
              value: f[e++]
            };
          }
        };
        g[a] = d;
        return g;
      });
      c[a] || (c[a] = function () {
        var e = String.fromCodePoint,
            f = this,
            g = 0,
            h = f.length,
            k = {
          next: function next() {
            var l = h <= g,
                m = l ? "" : e(f.codePointAt(g));
            g += m.length;
            return l ? {
              done: l
            } : {
              done: l,
              value: m
            };
          }
        };
        k[a] = d;
        return k;
      });
    })(Symbol.iterator, Array.prototype, String.prototype);
    /*
    Copyright (c) 2018 The Polymer Project Authors. All rights reserved.
    This code may only be used under the BSD style license found at
    http://polymer.github.io/LICENSE.txt The complete set of authors may be found at
    http://polymer.github.io/AUTHORS.txt The complete set of contributors may be
    found at http://polymer.github.io/CONTRIBUTORS.txt Code distributed by Google as
    part of the polymer project is also subject to an additional IP rights grant
    found at http://polymer.github.io/PATENTS.txt
    */


    var Wa = Object.prototype.toString;

    Object.prototype.toString = function () {
      return void 0 === this ? "[object Undefined]" : null === this ? "[object Null]" : Wa.call(this);
    };

    Object.keys = function (a) {
      return Object.getOwnPropertyNames(a).filter(function (b) {
        return (b = Object.getOwnPropertyDescriptor(a, b)) && b.enumerable;
      });
    };

    String.prototype[Symbol.iterator] && String.prototype.codePointAt || (String.prototype[Symbol.iterator] = function Xa() {
      var b,
          c = this;
      return Ea(Xa, function (d) {
        1 == d.g && (b = 0);
        if (3 != d.g) return b < c.length ? d = ya(d, c[b]) : (d.g = 0, d = void 0), d;
        b++;
        d.g = 2;
      });
    });
    Set.prototype[Symbol.iterator] || (Set.prototype[Symbol.iterator] = function Ya() {
      var b,
          c = this,
          d;
      return Ea(Ya, function (e) {
        1 == e.g && (b = [], c.forEach(function (f) {
          b.push(f);
        }), d = 0);
        if (3 != e.g) return d < b.length ? e = ya(e, b[d]) : (e.g = 0, e = void 0), e;
        d++;
        e.g = 2;
      });
    });
    Map.prototype[Symbol.iterator] || (Map.prototype[Symbol.iterator] = function Za() {
      var b,
          c = this,
          d;
      return Ea(Za, function (e) {
        1 == e.g && (b = [], c.forEach(function (f, g) {
          b.push([g, f]);
        }), d = 0);
        if (3 != e.g) return d < b.length ? e = ya(e, b[d]) : (e.g = 0, e = void 0), e;
        d++;
        e.g = 2;
      });
    });
    /*
    Copyright (c) 2020 The Polymer Project Authors. All rights reserved.
    This code may only be used under the BSD style license found at http://polymer.github.io/LICENSE.txt
    The complete set of authors may be found at http://polymer.github.io/AUTHORS.txt
    The complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt
    Code distributed by Google as part of the polymer project is also
    subject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt
    */

    var $a = document.createEvent("Event");
    $a.initEvent("foo", !0, !0);
    $a.preventDefault();

    if (!$a.defaultPrevented) {
      var ab = Event.prototype.preventDefault;

      Event.prototype.preventDefault = function () {
        this.cancelable && (ab.call(this), Object.defineProperty(this, "defaultPrevented", {
          get: function get() {
            return !0;
          },
          configurable: !0
        }));
      };
    }

    var bb = /Trident/.test(navigator.userAgent);

    if (!window.Event || bb && "function" !== typeof window.Event) {
      var cb = window.Event;

      window.Event = function (a, b) {
        b = b || {};
        var c = document.createEvent("Event");
        c.initEvent(a, !!b.bubbles, !!b.cancelable);
        return c;
      };

      if (cb) {
        for (var db in cb) {
          window.Event[db] = cb[db];
        }

        window.Event.prototype = cb.prototype;
      }
    }

    if (!window.CustomEvent || bb && "function" !== typeof window.CustomEvent) window.CustomEvent = function (a, b) {
      b = b || {};
      var c = document.createEvent("CustomEvent");
      c.initCustomEvent(a, !!b.bubbles, !!b.cancelable, b.detail);
      return c;
    }, window.CustomEvent.prototype = window.Event.prototype;

    if (!window.MouseEvent || bb && "function" !== typeof window.MouseEvent) {
      var eb = window.MouseEvent;

      window.MouseEvent = function (a, b) {
        b = b || {};
        var c = document.createEvent("MouseEvent");
        c.initMouseEvent(a, !!b.bubbles, !!b.cancelable, b.view || window, b.detail, b.screenX, b.screenY, b.clientX, b.clientY, b.ctrlKey, b.altKey, b.shiftKey, b.metaKey, b.button, b.relatedTarget);
        return c;
      };

      if (eb) for (var hb in eb) {
        window.MouseEvent[hb] = eb[hb];
      }
      window.MouseEvent.prototype = eb.prototype;
    }
    Object.getOwnPropertyDescriptor(Node.prototype, "baseURI") || Object.defineProperty(Node.prototype, "baseURI", {
      get: function get() {
        var a = (this.ownerDocument || this).querySelector("base[href]");
        return a && a.href || window.location.href;
      },
      configurable: !0,
      enumerable: !0
    });
    /*
    Copyright (c) 2020 The Polymer Project Authors. All rights reserved.
    This code may only be used under the BSD style license found at
    http://polymer.github.io/LICENSE.txt The complete set of authors may be found at
    http://polymer.github.io/AUTHORS.txt The complete set of contributors may be
    found at http://polymer.github.io/CONTRIBUTORS.txt Code distributed by Google as
    part of the polymer project is also subject to an additional IP rights grant
    found at http://polymer.github.io/PATENTS.txt
    */

    var ib,
        jb,
        kb = Element.prototype,
        nb = null !== (ib = Object.getOwnPropertyDescriptor(kb, "attributes")) && void 0 !== ib ? ib : Object.getOwnPropertyDescriptor(Node.prototype, "attributes"),
        ob = null !== (jb = null === nb || void 0 === nb ? void 0 : nb.get) && void 0 !== jb ? jb : function () {
      return this.attributes;
    },
        pb = Array.prototype.map;
    kb.hasOwnProperty("getAttributeNames") || (kb.getAttributeNames = function () {
      return pb.call(ob.call(this), function (a) {
        return a.name;
      });
    });
    var qb,
        rb = Element.prototype;
    rb.hasOwnProperty("matches") || (rb.matches = null !== (qb = rb.webkitMatchesSelector) && void 0 !== qb ? qb : rb.msMatchesSelector);
    var sb = Node.prototype.appendChild;

    function tb(a) {
      a = a.prototype;
      a.hasOwnProperty("append") || Object.defineProperty(a, "append", {
        configurable: !0,
        enumerable: !0,
        writable: !0,
        value: function value(b) {
          for (var c = [], d = 0; d < arguments.length; ++d) {
            c[d] = arguments[d];
          }

          c = ka(c);

          for (d = c.next(); !d.done; d = c.next()) {
            d = d.value, sb.call(this, "string" === typeof d ? document.createTextNode(d) : d);
          }
        }
      });
    }

    tb(Document);
    tb(DocumentFragment);
    tb(Element);
    var ub,
        vb,
        wb = Node.prototype.insertBefore,
        xb = null !== (vb = null === (ub = Object.getOwnPropertyDescriptor(Node.prototype, "firstChild")) || void 0 === ub ? void 0 : ub.get) && void 0 !== vb ? vb : function () {
      return this.firstChild;
    };

    function yb(a) {
      a = a.prototype;
      a.hasOwnProperty("prepend") || Object.defineProperty(a, "prepend", {
        configurable: !0,
        enumerable: !0,
        writable: !0,
        value: function value(b) {
          for (var c = [], d = 0; d < arguments.length; ++d) {
            c[d] = arguments[d];
          }

          d = xb.call(this);
          c = ka(c);

          for (var e = c.next(); !e.done; e = c.next()) {
            e = e.value, wb.call(this, "string" === typeof e ? document.createTextNode(e) : e, d);
          }
        }
      });
    }

    yb(Document);
    yb(DocumentFragment);
    yb(Element);
    var zb,
        Ab,
        Bb = Node.prototype.appendChild,
        Cb = Node.prototype.removeChild,
        Db = null !== (Ab = null === (zb = Object.getOwnPropertyDescriptor(Node.prototype, "firstChild")) || void 0 === zb ? void 0 : zb.get) && void 0 !== Ab ? Ab : function () {
      return this.firstChild;
    };

    function Eb(a) {
      a = a.prototype;
      a.hasOwnProperty("replaceChildren") || Object.defineProperty(a, "replaceChildren", {
        configurable: !0,
        enumerable: !0,
        writable: !0,
        value: function value(b) {
          for (var c = [], d = 0; d < arguments.length; ++d) {
            c[d] = arguments[d];
          }

          for (; null !== (d = Db.call(this));) {
            Cb.call(this, d);
          }

          c = ka(c);

          for (d = c.next(); !d.done; d = c.next()) {
            d = d.value, Bb.call(this, "string" === typeof d ? document.createTextNode(d) : d);
          }
        }
      });
    }

    Eb(Document);
    Eb(DocumentFragment);
    Eb(Element);
    var Fb,
        Gb,
        Hb,
        Ib,
        Jb = Node.prototype.insertBefore,
        Kb = null !== (Gb = null === (Fb = Object.getOwnPropertyDescriptor(Node.prototype, "parentNode")) || void 0 === Fb ? void 0 : Fb.get) && void 0 !== Gb ? Gb : function () {
      return this.parentNode;
    },
        Lb = null !== (Ib = null === (Hb = Object.getOwnPropertyDescriptor(Node.prototype, "nextSibling")) || void 0 === Hb ? void 0 : Hb.get) && void 0 !== Ib ? Ib : function () {
      return this.nextSibling;
    };

    function Mb(a) {
      a = a.prototype;
      a.hasOwnProperty("after") || Object.defineProperty(a, "after", {
        configurable: !0,
        enumerable: !0,
        writable: !0,
        value: function value(b) {
          for (var c = [], d = 0; d < arguments.length; ++d) {
            c[d] = arguments[d];
          }

          d = Kb.call(this);

          if (null !== d) {
            var e = Lb.call(this);
            c = ka(c);

            for (var f = c.next(); !f.done; f = c.next()) {
              f = f.value, Jb.call(d, "string" === typeof f ? document.createTextNode(f) : f, e);
            }
          }
        }
      });
    }

    Mb(CharacterData);
    Mb(Element);
    var Nb,
        Ob,
        Pb = Node.prototype.insertBefore,
        Qb = null !== (Ob = null === (Nb = Object.getOwnPropertyDescriptor(Node.prototype, "parentNode")) || void 0 === Nb ? void 0 : Nb.get) && void 0 !== Ob ? Ob : function () {
      return this.parentNode;
    };

    function Rb(a) {
      a = a.prototype;
      a.hasOwnProperty("before") || Object.defineProperty(a, "before", {
        configurable: !0,
        enumerable: !0,
        writable: !0,
        value: function value(b) {
          for (var c = [], d = 0; d < arguments.length; ++d) {
            c[d] = arguments[d];
          }

          d = Qb.call(this);

          if (null !== d) {
            c = ka(c);

            for (var e = c.next(); !e.done; e = c.next()) {
              e = e.value, Pb.call(d, "string" === typeof e ? document.createTextNode(e) : e, this);
            }
          }
        }
      });
    }

    Rb(CharacterData);
    Rb(Element);
    var Sb,
        Tb,
        Ub = Node.prototype.removeChild,
        Vb = null !== (Tb = null === (Sb = Object.getOwnPropertyDescriptor(Node.prototype, "parentNode")) || void 0 === Sb ? void 0 : Sb.get) && void 0 !== Tb ? Tb : function () {
      return this.parentNode;
    };

    function Wb(a) {
      a = a.prototype;
      a.hasOwnProperty("remove") || Object.defineProperty(a, "remove", {
        configurable: !0,
        enumerable: !0,
        writable: !0,
        value: function value() {
          var b = Vb.call(this);
          b && Ub.call(b, this);
        }
      });
    }

    Wb(CharacterData);
    Wb(Element);
    var Xb,
        Yb,
        Zb = Node.prototype.insertBefore,
        $b = Node.prototype.removeChild,
        ac = null !== (Yb = null === (Xb = Object.getOwnPropertyDescriptor(Node.prototype, "parentNode")) || void 0 === Xb ? void 0 : Xb.get) && void 0 !== Yb ? Yb : function () {
      return this.parentNode;
    };

    function bc(a) {
      a = a.prototype;
      a.hasOwnProperty("replaceWith") || Object.defineProperty(a, "replaceWith", {
        configurable: !0,
        enumerable: !0,
        writable: !0,
        value: function value(b) {
          for (var c = [], d = 0; d < arguments.length; ++d) {
            c[d] = arguments[d];
          }

          d = ac.call(this);

          if (null !== d) {
            c = ka(c);

            for (var e = c.next(); !e.done; e = c.next()) {
              e = e.value, Zb.call(d, "string" === typeof e ? document.createTextNode(e) : e, this);
            }

            $b.call(d, this);
          }
        }
      });
    }

    bc(CharacterData);
    bc(Element);
    var cc = window.Element.prototype,
        dc = window.HTMLElement.prototype,
        ec = window.SVGElement.prototype;
    !dc.hasOwnProperty("classList") || cc.hasOwnProperty("classList") || ec.hasOwnProperty("classList") || Object.defineProperty(cc, "classList", Object.getOwnPropertyDescriptor(dc, "classList"));
    /*
    Copyright (c) 2014 The Polymer Project Authors. All rights reserved.
    This code may only be used under the BSD style license found at
    http://polymer.github.io/LICENSE.txt The complete set of authors may be found
    at http://polymer.github.io/AUTHORS.txt The complete set of contributors may
    be found at http://polymer.github.io/CONTRIBUTORS.txt Code distributed by
    Google as part of the polymer project is also subject to an additional IP
    rights grant found at http://polymer.github.io/PATENTS.txt
    */

    var fc = document.createElement("style");
    fc.textContent = "body {transition: opacity ease-in 0.2s; } \nbody[unresolved] {opacity: 0; display: block; overflow: hidden; position: relative; } \n";
    var hc = document.querySelector("head");
    hc.insertBefore(fc, hc.firstChild);
    var ic = window;
    ic.WebComponents = ic.WebComponents || {
      flags: {}
    };
    var jc = document.querySelector('script[src*="webcomponents-bundle"]'),
        kc = /wc-(.+)/,
        lc = {};

    if (!lc.noOpts) {
      location.search.slice(1).split("&").forEach(function (a) {
        a = a.split("=");
        var b;
        a[0] && (b = a[0].match(kc)) && (lc[b[1]] = a[1] || !0);
      });
      if (jc) for (var mc = 0, nc = void 0; nc = jc.attributes[mc]; mc++) {
        "src" !== nc.name && (lc[nc.name] = nc.value || !0);
      }
      var oc = {};
      lc.log && lc.log.split && lc.log.split(",").forEach(function (a) {
        oc[a] = !0;
      });
      lc.log = oc;
    }

    ic.WebComponents.flags = lc;
    var pc = lc.shadydom;

    if (pc) {
      ic.ShadyDOM = ic.ShadyDOM || {};
      ic.ShadyDOM.force = pc;
      var qc = lc.noPatch;
      ic.ShadyDOM.noPatch = "true" === qc ? !0 : qc;
    }

    var rc = lc.register || lc.ce;
    rc && window.customElements && (ic.customElements.forcePolyfill = rc);
    /*
    Copyright (c) 2016 The Polymer Project Authors. All rights reserved.
    This code may only be used under the BSD style license found at http://polymer.github.io/LICENSE.txt
    The complete set of authors may be found at http://polymer.github.io/AUTHORS.txt
    The complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt
    Code distributed by Google as part of the polymer project is also
    subject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt
    */

    (function () {
      function a() {}

      function b(p, r) {
        if (!p.childNodes.length) return [];

        switch (p.nodeType) {
          case Node.DOCUMENT_NODE:
            return F.call(p, r);

          case Node.DOCUMENT_FRAGMENT_NODE:
            return E.call(p, r);

          default:
            return t.call(p, r);
        }
      }

      var c = "undefined" === typeof HTMLTemplateElement,
          d = !(document.createDocumentFragment().cloneNode() instanceof DocumentFragment),
          e = !1;
      /Trident/.test(navigator.userAgent) && function () {
        function p(z, R) {
          if (z instanceof DocumentFragment) for (var lb; lb = z.firstChild;) {
            B.call(this, lb, R);
          } else B.call(this, z, R);
          return z;
        }

        e = !0;
        var r = Node.prototype.cloneNode;

        Node.prototype.cloneNode = function (z) {
          z = r.call(this, z);
          this instanceof DocumentFragment && (z.__proto__ = DocumentFragment.prototype);
          return z;
        };

        DocumentFragment.prototype.querySelectorAll = HTMLElement.prototype.querySelectorAll;
        DocumentFragment.prototype.querySelector = HTMLElement.prototype.querySelector;
        Object.defineProperties(DocumentFragment.prototype, {
          nodeType: {
            get: function get() {
              return Node.DOCUMENT_FRAGMENT_NODE;
            },
            configurable: !0
          },
          localName: {
            get: function get() {},
            configurable: !0
          },
          nodeName: {
            get: function get() {
              return "#document-fragment";
            },
            configurable: !0
          }
        });
        var B = Node.prototype.insertBefore;
        Node.prototype.insertBefore = p;
        var K = Node.prototype.appendChild;

        Node.prototype.appendChild = function (z) {
          z instanceof DocumentFragment ? p.call(this, z, null) : K.call(this, z);
          return z;
        };

        var aa = Node.prototype.removeChild,
            la = Node.prototype.replaceChild;

        Node.prototype.replaceChild = function (z, R) {
          z instanceof DocumentFragment ? (p.call(this, z, R), aa.call(this, R)) : la.call(this, z, R);
          return R;
        };

        Document.prototype.createDocumentFragment = function () {
          var z = this.createElement("df");
          z.__proto__ = DocumentFragment.prototype;
          return z;
        };

        var va = Document.prototype.importNode;

        Document.prototype.importNode = function (z, R) {
          R = va.call(this, z, R || !1);
          z instanceof DocumentFragment && (R.__proto__ = DocumentFragment.prototype);
          return R;
        };
      }();

      var f = Node.prototype.cloneNode,
          g = Document.prototype.createElement,
          h = Document.prototype.importNode,
          k = Node.prototype.removeChild,
          l = Node.prototype.appendChild,
          m = Node.prototype.replaceChild,
          q = DOMParser.prototype.parseFromString,
          H = Object.getOwnPropertyDescriptor(window.HTMLElement.prototype, "innerHTML") || {
        get: function get() {
          return this.innerHTML;
        },
        set: function set(p) {
          this.innerHTML = p;
        }
      },
          C = Object.getOwnPropertyDescriptor(window.Node.prototype, "childNodes") || {
        get: function get() {
          return this.childNodes;
        }
      },
          t = Element.prototype.querySelectorAll,
          F = Document.prototype.querySelectorAll,
          E = DocumentFragment.prototype.querySelectorAll,
          M = function () {
        if (!c) {
          var p = document.createElement("template"),
              r = document.createElement("template");
          r.content.appendChild(document.createElement("div"));
          p.content.appendChild(r);
          p = p.cloneNode(!0);
          return 0 === p.content.childNodes.length || 0 === p.content.firstChild.content.childNodes.length || d;
        }
      }();

      if (c) {
        var y = document.implementation.createHTMLDocument("template"),
            W = !0,
            w = document.createElement("style");
        w.textContent = "template{display:none;}";
        var ta = document.head;
        ta.insertBefore(w, ta.firstElementChild);
        a.prototype = Object.create(HTMLElement.prototype);
        var ha = !document.createElement("div").hasOwnProperty("innerHTML");

        a.Z = function (p) {
          if (!p.content && p.namespaceURI === document.documentElement.namespaceURI) {
            p.content = y.createDocumentFragment();

            for (var r; r = p.firstChild;) {
              l.call(p.content, r);
            }

            if (ha) p.__proto__ = a.prototype;else if (p.cloneNode = function (B) {
              return a.sa(this, B);
            }, W) try {
              n(p), J(p);
            } catch (B) {
              W = !1;
            }
            a.bootstrap(p.content);
          }
        };

        var sa = {
          option: ["select"],
          thead: ["table"],
          col: ["colgroup", "table"],
          tr: ["tbody", "table"],
          th: ["tr", "tbody", "table"],
          td: ["tr", "tbody", "table"]
        },
            n = function n(p) {
          Object.defineProperty(p, "innerHTML", {
            get: function get() {
              return wa(this);
            },
            set: function set(r) {
              var B = sa[(/<([a-z][^/\0>\x20\t\r\n\f]+)/i.exec(r) || ["", ""])[1].toLowerCase()];
              if (B) for (var K = 0; K < B.length; K++) {
                r = "<" + B[K] + ">" + r + "</" + B[K] + ">";
              }
              y.body.innerHTML = r;

              for (a.bootstrap(y); this.content.firstChild;) {
                k.call(this.content, this.content.firstChild);
              }

              r = y.body;
              if (B) for (K = 0; K < B.length; K++) {
                r = r.lastChild;
              }

              for (; r.firstChild;) {
                l.call(this.content, r.firstChild);
              }
            },
            configurable: !0
          });
        },
            J = function J(p) {
          Object.defineProperty(p, "outerHTML", {
            get: function get() {
              return "<template>" + this.innerHTML + "</template>";
            },
            set: function set(r) {
              if (this.parentNode) {
                y.body.innerHTML = r;

                for (r = this.ownerDocument.createDocumentFragment(); y.body.firstChild;) {
                  l.call(r, y.body.firstChild);
                }

                m.call(this.parentNode, r, this);
              } else throw Error("Failed to set the 'outerHTML' property on 'Element': This element has no parent node.");
            },
            configurable: !0
          });
        };

        n(a.prototype);
        J(a.prototype);

        a.bootstrap = function (p) {
          p = b(p, "template");

          for (var r = 0, B = p.length, K; r < B && (K = p[r]); r++) {
            a.Z(K);
          }
        };

        document.addEventListener("DOMContentLoaded", function () {
          a.bootstrap(document);
        });

        Document.prototype.createElement = function () {
          var p = g.apply(this, arguments);
          "template" === p.localName && a.Z(p);
          return p;
        };

        DOMParser.prototype.parseFromString = function () {
          var p = q.apply(this, arguments);
          a.bootstrap(p);
          return p;
        };

        Object.defineProperty(HTMLElement.prototype, "innerHTML", {
          get: function get() {
            return wa(this);
          },
          set: function set(p) {
            H.set.call(this, p);
            a.bootstrap(this);
          },
          configurable: !0,
          enumerable: !0
        });

        var fa = /[&\u00A0"]/g,
            gc = /[&\u00A0<>]/g,
            fb = function fb(p) {
          switch (p) {
            case "&":
              return "&amp;";

            case "<":
              return "&lt;";

            case ">":
              return "&gt;";

            case '"':
              return "&quot;";

            case "\xA0":
              return "&nbsp;";
          }
        };

        w = function w(p) {
          for (var r = {}, B = 0; B < p.length; B++) {
            r[p[B]] = !0;
          }

          return r;
        };

        var Ua = w("area base br col command embed hr img input keygen link meta param source track wbr".split(" ")),
            gb = w("style script xmp iframe noembed noframes plaintext noscript".split(" ")),
            wa = function wa(p, r) {
          "template" === p.localName && (p = p.content);

          for (var B = "", K = r ? r(p) : C.get.call(p), aa = 0, la = K.length, va; aa < la && (va = K[aa]); aa++) {
            a: {
              var z = va;
              var R = p;
              var lb = r;

              switch (z.nodeType) {
                case Node.ELEMENT_NODE:
                  for (var Fc = z.localName, mb = "<" + Fc, Bh = z.attributes, oe = 0; R = Bh[oe]; oe++) {
                    mb += " " + R.name + '="' + R.value.replace(fa, fb) + '"';
                  }

                  mb += ">";
                  z = Ua[Fc] ? mb : mb + wa(z, lb) + "</" + Fc + ">";
                  break a;

                case Node.TEXT_NODE:
                  z = z.data;
                  z = R && gb[R.localName] ? z : z.replace(gc, fb);
                  break a;

                case Node.COMMENT_NODE:
                  z = "\x3c!--" + z.data + "--\x3e";
                  break a;

                default:
                  throw window.console.error(z), Error("not implemented");
              }
            }

            B += z;
          }

          return B;
        };
      }

      if (c || M) {
        a.sa = function (p, r) {
          var B = f.call(p, !1);
          this.Z && this.Z(B);
          r && (l.call(B.content, f.call(p.content, !0)), I(B.content, p.content));
          return B;
        };

        var I = function I(p, r) {
          if (r.querySelectorAll && (r = b(r, "template"), 0 !== r.length)) {
            p = b(p, "template");

            for (var B = 0, K = p.length, aa, la; B < K; B++) {
              la = r[B], aa = p[B], a && a.Z && a.Z(la), m.call(aa.parentNode, u.call(la, !0), aa);
            }
          }
        },
            u = Node.prototype.cloneNode = function (p) {
          if (!e && d && this instanceof DocumentFragment) {
            if (p) var r = G.call(this.ownerDocument, this, !0);else return this.ownerDocument.createDocumentFragment();
          } else this.nodeType === Node.ELEMENT_NODE && "template" === this.localName && this.namespaceURI == document.documentElement.namespaceURI ? r = a.sa(this, p) : r = f.call(this, p);
          p && I(r, this);
          return r;
        },
            G = Document.prototype.importNode = function (p, r) {
          r = r || !1;
          if ("template" === p.localName) return a.sa(p, r);
          var B = h.call(this, p, r);

          if (r) {
            I(B, p);
            p = b(B, 'script:not([type]),script[type="application/javascript"],script[type="text/javascript"]');

            for (var K, aa = 0; aa < p.length; aa++) {
              K = p[aa];
              r = g.call(document, "script");
              r.textContent = K.textContent;

              for (var la = K.attributes, va = 0, z; va < la.length; va++) {
                z = la[va], r.setAttribute(z.name, z.value);
              }

              m.call(K.parentNode, r, K);
            }
          }

          return B;
        };
      }

      c && (window.HTMLTemplateElement = a);
    })();
    /*
    Copyright (c) 2016 The Polymer Project Authors. All rights reserved.
    This code may only be used under the BSD style license found at http://polymer.github.io/LICENSE.txt
    The complete set of authors may be found at http://polymer.github.io/AUTHORS.txt
    The complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt
    Code distributed by Google as part of the polymer project is also
    subject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt
    */


    function sc() {}

    sc.prototype.toJSON = function () {
      return {};
    };

    function D(a) {
      a.__shady || (a.__shady = new sc());
      return a.__shady;
    }

    function L(a) {
      return a && a.__shady;
    }
    var N = window.ShadyDOM || {};
    N.Ya = !(!Element.prototype.attachShadow || !Node.prototype.getRootNode);
    var tc = Object.getOwnPropertyDescriptor(Node.prototype, "firstChild");
    N.H = !!(tc && tc.configurable && tc.get);
    N.ya = N.force || !N.Ya;
    N.J = N.noPatch || !1;
    N.fa = N.preferPerformance;
    N.Aa = "on-demand" === N.J;
    N.Na = navigator.userAgent.match("Trident");

    function uc() {
      return Document.prototype.msElementsFromPoint ? "msElementsFromPoint" : "elementsFromPoint";
    }

    function vc(a) {
      return (a = L(a)) && void 0 !== a.firstChild;
    }

    function O(a) {
      return a instanceof ShadowRoot;
    }

    function wc(a) {
      return (a = (a = L(a)) && a.root) && xc(a);
    }

    var yc = Element.prototype,
        zc = yc.matches || yc.matchesSelector || yc.mozMatchesSelector || yc.msMatchesSelector || yc.oMatchesSelector || yc.webkitMatchesSelector,
        Ac = document.createTextNode(""),
        Bc = 0,
        Cc = [];
    new MutationObserver(function () {
      for (; Cc.length;) {
        try {
          Cc.shift()();
        } catch (a) {
          throw Ac.textContent = Bc++, a;
        }
      }
    }).observe(Ac, {
      characterData: !0
    });

    function Dc(a) {
      Cc.push(a);
      Ac.textContent = Bc++;
    }

    var Ec = document.contains ? function (a, b) {
      return a.__shady_native_contains(b);
    } : function (a, b) {
      return a === b || a.documentElement && a.documentElement.__shady_native_contains(b);
    };

    function Gc(a, b) {
      for (; b;) {
        if (b == a) return !0;
        b = b.__shady_parentNode;
      }

      return !1;
    }

    function Hc(a) {
      for (var b = a.length - 1; 0 <= b; b--) {
        var c = a[b],
            d = c.getAttribute("id") || c.getAttribute("name");
        d && "length" !== d && isNaN(d) && (a[d] = c);
      }

      a.item = function (e) {
        return a[e];
      };

      a.namedItem = function (e) {
        if ("length" !== e && isNaN(e) && a[e]) return a[e];

        for (var f = ka(a), g = f.next(); !g.done; g = f.next()) {
          if (g = g.value, (g.getAttribute("id") || g.getAttribute("name")) == e) return g;
        }

        return null;
      };

      return a;
    }

    function Ic(a) {
      var b = [];

      for (a = a.__shady_native_firstChild; a; a = a.__shady_native_nextSibling) {
        b.push(a);
      }

      return b;
    }

    function Jc(a) {
      var b = [];

      for (a = a.__shady_firstChild; a; a = a.__shady_nextSibling) {
        b.push(a);
      }

      return b;
    }

    function Kc(a, b, c) {
      c.configurable = !0;
      if (c.value) a[b] = c.value;else try {
        Object.defineProperty(a, b, c);
      } catch (d) {}
    }

    function P(a, b, c, d) {
      c = void 0 === c ? "" : c;

      for (var e in b) {
        d && 0 <= d.indexOf(e) || Kc(a, c + e, b[e]);
      }
    }

    function Lc(a, b) {
      for (var c in b) {
        c in a && Kc(a, c, b[c]);
      }
    }

    function Q(a) {
      var b = {};
      Object.getOwnPropertyNames(a).forEach(function (c) {
        b[c] = Object.getOwnPropertyDescriptor(a, c);
      });
      return b;
    }

    function Mc(a, b) {
      for (var c = Object.getOwnPropertyNames(b), d = 0, e; d < c.length; d++) {
        e = c[d], a[e] = b[e];
      }
    }

    function Nc(a) {
      return a instanceof Node ? a : document.createTextNode("" + a);
    }

    function Oc(a) {
      for (var b = [], c = 0; c < arguments.length; ++c) {
        b[c] = arguments[c];
      }

      if (1 === b.length) return Nc(b[0]);
      c = document.createDocumentFragment();
      b = ka(b);

      for (var d = b.next(); !d.done; d = b.next()) {
        c.appendChild(Nc(d.value));
      }

      return c;
    }
    var Pc = [],
        Qc;

    function Rc(a) {
      Qc || (Qc = !0, Dc(Sc));
      Pc.push(a);
    }

    function Sc() {
      Qc = !1;

      for (var a = !!Pc.length; Pc.length;) {
        Pc.shift()();
      }

      return a;
    }

    Sc.list = Pc;

    function Tc() {
      this.g = !1;
      this.addedNodes = [];
      this.removedNodes = [];
      this.oa = new Set();
    }

    function Uc(a) {
      a.g || (a.g = !0, Dc(function () {
        a.flush();
      }));
    }

    Tc.prototype.flush = function () {
      if (this.g) {
        this.g = !1;
        var a = this.takeRecords();
        a.length && this.oa.forEach(function (b) {
          b(a);
        });
      }
    };

    Tc.prototype.takeRecords = function () {
      if (this.addedNodes.length || this.removedNodes.length) {
        var a = [{
          addedNodes: this.addedNodes,
          removedNodes: this.removedNodes
        }];
        this.addedNodes = [];
        this.removedNodes = [];
        return a;
      }

      return [];
    };

    function Vc(a, b) {
      var c = D(a);
      c.ea || (c.ea = new Tc());
      c.ea.oa.add(b);
      var d = c.ea;
      return {
        Ra: b,
        X: d,
        Sa: a,
        takeRecords: function takeRecords() {
          return d.takeRecords();
        }
      };
    }

    function Wc(a) {
      var b = a && a.X;
      b && (b.oa.delete(a.Ra), b.oa.size || (D(a.Sa).ea = null));
    }

    function Xc(a, b) {
      var c = b.getRootNode();
      return a.map(function (d) {
        var e = c === d.target.getRootNode();

        if (e && d.addedNodes) {
          if (e = [].slice.call(d.addedNodes).filter(function (f) {
            return c === f.getRootNode();
          }), e.length) return d = Object.create(d), Object.defineProperty(d, "addedNodes", {
            value: e,
            configurable: !0
          }), d;
        } else if (e) return d;
      }).filter(function (d) {
        return d;
      });
    }
    var Yc = /[&\u00A0"]/g,
        Zc = /[&\u00A0<>]/g;

    function $c(a) {
      switch (a) {
        case "&":
          return "&amp;";

        case "<":
          return "&lt;";

        case ">":
          return "&gt;";

        case '"':
          return "&quot;";

        case "\xA0":
          return "&nbsp;";
      }
    }

    function ad(a) {
      for (var b = {}, c = 0; c < a.length; c++) {
        b[a[c]] = !0;
      }

      return b;
    }

    var bd = ad("area base br col command embed hr img input keygen link meta param source track wbr".split(" ")),
        cd = ad("style script xmp iframe noembed noframes plaintext noscript".split(" "));

    function dd(a, b) {
      "template" === a.localName && (a = a.content);

      for (var c = "", d = b ? b(a) : a.childNodes, e = 0, f = d.length, g = void 0; e < f && (g = d[e]); e++) {
        a: {
          var h = g;
          var k = a,
              l = b;

          switch (h.nodeType) {
            case Node.ELEMENT_NODE:
              k = h.localName;

              for (var m = "<" + k, q = h.attributes, H = 0, C; C = q[H]; H++) {
                m += " " + C.name + '="' + C.value.replace(Yc, $c) + '"';
              }

              m += ">";
              h = bd[k] ? m : m + dd(h, l) + "</" + k + ">";
              break a;

            case Node.TEXT_NODE:
              h = h.data;
              h = k && cd[k.localName] ? h : h.replace(Zc, $c);
              break a;

            case Node.COMMENT_NODE:
              h = "\x3c!--" + h.data + "--\x3e";
              break a;

            default:
              throw window.console.error(h), Error("not implemented");
          }
        }

        c += h;
      }

      return c;
    }
    var ed = N.H,
        fd = {
      querySelector: function querySelector(a) {
        return this.__shady_native_querySelector(a);
      },
      querySelectorAll: function querySelectorAll(a) {
        return this.__shady_native_querySelectorAll(a);
      }
    },
        gd = {};

    function hd(a) {
      gd[a] = function (b) {
        return b["__shady_native_" + a];
      };
    }

    function id(a, b) {
      P(a, b, "__shady_native_");

      for (var c in b) {
        hd(c);
      }
    }

    function S(a, b) {
      b = void 0 === b ? [] : b;

      for (var c = 0; c < b.length; c++) {
        var d = b[c],
            e = Object.getOwnPropertyDescriptor(a, d);
        e && (Object.defineProperty(a, "__shady_native_" + d, e), e.value ? fd[d] || (fd[d] = e.value) : hd(d));
      }
    }

    var jd = document.createTreeWalker(document, NodeFilter.SHOW_ALL, null, !1),
        kd = document.createTreeWalker(document, NodeFilter.SHOW_ELEMENT, null, !1),
        ld = document.implementation.createHTMLDocument("inert");

    function md(a) {
      for (var b; b = a.__shady_native_firstChild;) {
        a.__shady_native_removeChild(b);
      }
    }

    var nd = ["firstElementChild", "lastElementChild", "children", "childElementCount"],
        od = ["querySelector", "querySelectorAll", "append", "prepend", "replaceChildren"];

    function pd() {
      var a = ["dispatchEvent", "addEventListener", "removeEventListener"];
      window.EventTarget ? (S(window.EventTarget.prototype, a), void 0 === window.__shady_native_addEventListener && S(Window.prototype, a)) : (S(Node.prototype, a), S(Window.prototype, a));
      ed ? S(Node.prototype, "parentNode firstChild lastChild previousSibling nextSibling childNodes parentElement textContent".split(" ")) : id(Node.prototype, {
        parentNode: {
          get: function get() {
            jd.currentNode = this;
            return jd.parentNode();
          }
        },
        firstChild: {
          get: function get() {
            jd.currentNode = this;
            return jd.firstChild();
          }
        },
        lastChild: {
          get: function get() {
            jd.currentNode = this;
            return jd.lastChild();
          }
        },
        previousSibling: {
          get: function get() {
            jd.currentNode = this;
            return jd.previousSibling();
          }
        },
        nextSibling: {
          get: function get() {
            jd.currentNode = this;
            return jd.nextSibling();
          }
        },
        childNodes: {
          get: function get() {
            var b = [];
            jd.currentNode = this;

            for (var c = jd.firstChild(); c;) {
              b.push(c), c = jd.nextSibling();
            }

            return b;
          }
        },
        parentElement: {
          get: function get() {
            kd.currentNode = this;
            return kd.parentNode();
          }
        },
        textContent: {
          get: function get() {
            switch (this.nodeType) {
              case Node.ELEMENT_NODE:
              case Node.DOCUMENT_FRAGMENT_NODE:
                for (var b = document.createTreeWalker(this, NodeFilter.SHOW_TEXT, null, !1), c = "", d; d = b.nextNode();) {
                  c += d.nodeValue;
                }

                return c;

              default:
                return this.nodeValue;
            }
          },
          set: function set(b) {
            if ("undefined" === typeof b || null === b) b = "";

            switch (this.nodeType) {
              case Node.ELEMENT_NODE:
              case Node.DOCUMENT_FRAGMENT_NODE:
                md(this);
                (0 < b.length || this.nodeType === Node.ELEMENT_NODE) && this.__shady_native_insertBefore(document.createTextNode(b), void 0);
                break;

              default:
                this.nodeValue = b;
            }
          }
        }
      });
      S(Node.prototype, "appendChild insertBefore removeChild replaceChild cloneNode contains".split(" "));
      S(HTMLElement.prototype, ["parentElement", "contains"]);
      a = {
        firstElementChild: {
          get: function get() {
            kd.currentNode = this;
            return kd.firstChild();
          }
        },
        lastElementChild: {
          get: function get() {
            kd.currentNode = this;
            return kd.lastChild();
          }
        },
        children: {
          get: function get() {
            var b = [];
            kd.currentNode = this;

            for (var c = kd.firstChild(); c;) {
              b.push(c), c = kd.nextSibling();
            }

            return Hc(b);
          }
        },
        childElementCount: {
          get: function get() {
            return this.children ? this.children.length : 0;
          }
        }
      };
      ed ? (S(Element.prototype, nd), S(Element.prototype, ["previousElementSibling", "nextElementSibling", "innerHTML", "className"]), S(HTMLElement.prototype, ["children", "innerHTML", "className"])) : (id(Element.prototype, a), id(Element.prototype, {
        previousElementSibling: {
          get: function get() {
            kd.currentNode = this;
            return kd.previousSibling();
          }
        },
        nextElementSibling: {
          get: function get() {
            kd.currentNode = this;
            return kd.nextSibling();
          }
        },
        innerHTML: {
          get: function get() {
            return dd(this, Ic);
          },
          set: function set(b) {
            var c = "template" === this.localName ? this.content : this;
            md(c);
            var d = this.localName || "div";
            d = this.namespaceURI && this.namespaceURI !== ld.namespaceURI ? ld.createElementNS(this.namespaceURI, d) : ld.createElement(d);
            d.innerHTML = b;

            for (b = "template" === this.localName ? d.content : d; d = b.__shady_native_firstChild;) {
              c.__shady_native_insertBefore(d, void 0);
            }
          }
        },
        className: {
          get: function get() {
            return this.getAttribute("class") || "";
          },
          set: function set(b) {
            this.setAttribute("class", b);
          }
        }
      }));
      S(Element.prototype, "setAttribute getAttribute hasAttribute removeAttribute focus blur".split(" "));
      S(Element.prototype, od);
      S(HTMLElement.prototype, ["focus", "blur"]);
      window.HTMLTemplateElement && S(window.HTMLTemplateElement.prototype, ["innerHTML"]);
      ed ? S(DocumentFragment.prototype, nd) : id(DocumentFragment.prototype, a);
      S(DocumentFragment.prototype, od);
      ed ? (S(Document.prototype, nd), S(Document.prototype, ["activeElement"])) : id(Document.prototype, a);
      S(Document.prototype, ["importNode", "getElementById", "elementFromPoint", uc()]);
      S(Document.prototype, od);
    }
    var qd = Q({
      get childNodes() {
        return this.__shady_childNodes;
      },

      get firstChild() {
        return this.__shady_firstChild;
      },

      get lastChild() {
        return this.__shady_lastChild;
      },

      get childElementCount() {
        return this.__shady_childElementCount;
      },

      get children() {
        return this.__shady_children;
      },

      get firstElementChild() {
        return this.__shady_firstElementChild;
      },

      get lastElementChild() {
        return this.__shady_lastElementChild;
      },

      get shadowRoot() {
        return this.__shady_shadowRoot;
      }

    }),
        rd = Q({
      get textContent() {
        return this.__shady_textContent;
      },

      set textContent(a) {
        this.__shady_textContent = a;
      },

      get innerHTML() {
        return this.__shady_innerHTML;
      },

      set innerHTML(a) {
        this.__shady_innerHTML = a;
      }

    }),
        sd = Q({
      get parentElement() {
        return this.__shady_parentElement;
      },

      get parentNode() {
        return this.__shady_parentNode;
      },

      get nextSibling() {
        return this.__shady_nextSibling;
      },

      get previousSibling() {
        return this.__shady_previousSibling;
      },

      get nextElementSibling() {
        return this.__shady_nextElementSibling;
      },

      get previousElementSibling() {
        return this.__shady_previousElementSibling;
      },

      get className() {
        return this.__shady_className;
      },

      set className(a) {
        this.__shady_className = a;
      }

    });

    function td(a) {
      for (var b in a) {
        var c = a[b];
        c && (c.enumerable = !1);
      }
    }

    td(qd);
    td(rd);
    td(sd);
    var ud = N.H || !0 === N.J,
        vd = ud ? function () {} : function (a) {
      var b = D(a);
      b.Pa || (b.Pa = !0, Lc(a, sd));
    },
        wd = ud ? function () {} : function (a) {
      var b = D(a);
      b.Oa || (b.Oa = !0, Lc(a, qd), window.customElements && window.customElements.polyfillWrapFlushCallback && !N.J || Lc(a, rd));
    };

    var xd = "__eventWrappers" + Date.now(),
        yd = function () {
      var a = Object.getOwnPropertyDescriptor(Event.prototype, "composed");
      return a ? function (b) {
        return a.get.call(b);
      } : null;
    }(),
        zd = function () {
      function a() {}

      var b = !1,
          c = {
        get capture() {
          b = !0;
          return !1;
        }

      };
      window.addEventListener("test", a, c);
      window.removeEventListener("test", a, c);
      return b;
    }();

    function Ad(a) {
      if (a && "object" === _typeof(a)) {
        var b = !!a.capture;
        var c = !!a.once;
        var d = !!a.passive;
        var e = a.U;
      } else b = !!a, d = c = !1;

      return {
        La: e,
        capture: b,
        once: c,
        passive: d,
        Ja: zd ? a : b
      };
    }

    var Bd = {
      blur: !0,
      focus: !0,
      focusin: !0,
      focusout: !0,
      click: !0,
      dblclick: !0,
      mousedown: !0,
      mouseenter: !0,
      mouseleave: !0,
      mousemove: !0,
      mouseout: !0,
      mouseover: !0,
      mouseup: !0,
      wheel: !0,
      beforeinput: !0,
      input: !0,
      keydown: !0,
      keyup: !0,
      compositionstart: !0,
      compositionupdate: !0,
      compositionend: !0,
      touchstart: !0,
      touchend: !0,
      touchmove: !0,
      touchcancel: !0,
      pointerover: !0,
      pointerenter: !0,
      pointerdown: !0,
      pointermove: !0,
      pointerup: !0,
      pointercancel: !0,
      pointerout: !0,
      pointerleave: !0,
      gotpointercapture: !0,
      lostpointercapture: !0,
      dragstart: !0,
      drag: !0,
      dragenter: !0,
      dragleave: !0,
      dragover: !0,
      drop: !0,
      dragend: !0,
      DOMActivate: !0,
      DOMFocusIn: !0,
      DOMFocusOut: !0,
      keypress: !0
    },
        Cd = {
      DOMAttrModified: !0,
      DOMAttributeNameChanged: !0,
      DOMCharacterDataModified: !0,
      DOMElementNameChanged: !0,
      DOMNodeInserted: !0,
      DOMNodeInsertedIntoDocument: !0,
      DOMNodeRemoved: !0,
      DOMNodeRemovedFromDocument: !0,
      DOMSubtreeModified: !0
    };

    function Dd(a) {
      return a instanceof Node ? a.__shady_getRootNode() : a;
    }

    function Ed(a, b) {
      var c = [],
          d = a;

      for (a = Dd(a); d;) {
        c.push(d), d = d.__shady_assignedSlot ? d.__shady_assignedSlot : d.nodeType === Node.DOCUMENT_FRAGMENT_NODE && d.host && (b || d !== a) ? d.host : d.__shady_parentNode;
      }

      c[c.length - 1] === document && c.push(window);
      return c;
    }

    function Fd(a) {
      a.__composedPath || (a.__composedPath = Ed(a.target, !0));
      return a.__composedPath;
    }

    function Gd(a, b) {
      if (!O) return a;
      a = Ed(a, !0);

      for (var c = 0, d, e = void 0, f, g = void 0; c < b.length; c++) {
        if (d = b[c], f = Dd(d), f !== e && (g = a.indexOf(f), e = f), !O(f) || -1 < g) return d;
      }
    }

    function Hd(a) {
      function b(c, d) {
        c = new a(c, d);
        c.__composed = d && !!d.composed;
        return c;
      }

      b.__proto__ = a;
      b.prototype = a.prototype;
      return b;
    }

    var Id = {
      focus: !0,
      blur: !0
    };

    function Jd(a) {
      return a.__target !== a.target || a.__relatedTarget !== a.relatedTarget;
    }

    function Kd(a, b, c) {
      if (c = b.__handlers && b.__handlers[a.type] && b.__handlers[a.type][c]) for (var d = 0, e; (e = c[d]) && (!Jd(a) || a.target !== a.relatedTarget) && (e.call(b, a), !a.__immediatePropagationStopped); d++) {
      }
    }

    function Ld(a) {
      var b = a.composedPath(),
          c = b.map(function (k) {
        return Gd(k, b);
      }),
          d = a.bubbles;
      Object.defineProperty(a, "currentTarget", {
        configurable: !0,
        enumerable: !0,
        get: function get() {
          return g;
        }
      });
      var e = Event.CAPTURING_PHASE;
      Object.defineProperty(a, "eventPhase", {
        configurable: !0,
        enumerable: !0,
        get: function get() {
          return e;
        }
      });

      for (var f = b.length - 1; 0 <= f; f--) {
        var g = b[f];
        e = g === c[f] ? Event.AT_TARGET : Event.CAPTURING_PHASE;
        Kd(a, g, "capture");
        if (a.ra) return;
      }

      for (f = 0; f < b.length; f++) {
        g = b[f];
        var h = g === c[f];
        if (h || d) if (e = h ? Event.AT_TARGET : Event.BUBBLING_PHASE, Kd(a, g, "bubble"), a.ra) return;
      }

      e = 0;
      g = null;
    }

    function Md(a, b, c, d, e, f) {
      for (var g = 0; g < a.length; g++) {
        var h = a[g],
            k = h.type,
            l = h.capture,
            m = h.once,
            q = h.passive;
        if (b === h.node && c === k && d === l && e === m && f === q) return g;
      }

      return -1;
    }

    function Nd(a) {
      Sc();
      return !N.fa && this instanceof Node && !Ec(document, this) ? (a.__target || Od(a, this), Ld(a)) : this.__shady_native_dispatchEvent(a);
    }

    function Pd(a, b, c) {
      var d = Ad(c),
          e = d.capture,
          f = d.once,
          g = d.passive,
          h = d.La;
      d = d.Ja;

      if (b) {
        var k = _typeof(b);

        if ("function" === k || "object" === k) if ("object" !== k || b.handleEvent && "function" === typeof b.handleEvent) {
          if (Cd[a]) return this.__shady_native_addEventListener(a, b, d);
          var l = h || this;

          if (h = b[xd]) {
            if (-1 < Md(h, l, a, e, f, g)) return;
          } else b[xd] = [];

          h = function h(m) {
            f && this.__shady_removeEventListener(a, b, c);
            m.__target || Od(m);

            if (l !== this) {
              var q = Object.getOwnPropertyDescriptor(m, "currentTarget");
              Object.defineProperty(m, "currentTarget", {
                get: function get() {
                  return l;
                },
                configurable: !0
              });
              var H = Object.getOwnPropertyDescriptor(m, "eventPhase");
              Object.defineProperty(m, "eventPhase", {
                configurable: !0,
                enumerable: !0,
                get: function get() {
                  return e ? Event.CAPTURING_PHASE : Event.BUBBLING_PHASE;
                }
              });
            }

            m.__previousCurrentTarget = m.currentTarget;
            if (!O(l) && "slot" !== l.localName || -1 != m.composedPath().indexOf(l)) if (m.composed || -1 < m.composedPath().indexOf(l)) if (Jd(m) && m.target === m.relatedTarget) m.eventPhase === Event.BUBBLING_PHASE && m.stopImmediatePropagation();else if (m.eventPhase === Event.CAPTURING_PHASE || m.bubbles || m.target === l || l instanceof Window) {
              var C = "function" === k ? b.call(l, m) : b.handleEvent && b.handleEvent(m);
              l !== this && (q ? (Object.defineProperty(m, "currentTarget", q), q = null) : delete m.currentTarget, H ? (Object.defineProperty(m, "eventPhase", H), H = null) : delete m.eventPhase);
              return C;
            }
          };

          b[xd].push({
            node: l,
            type: a,
            capture: e,
            once: f,
            passive: g,
            pb: h
          });
          this.__handlers = this.__handlers || {};
          this.__handlers[a] = this.__handlers[a] || {
            capture: [],
            bubble: []
          };

          this.__handlers[a][e ? "capture" : "bubble"].push(h);

          Id[a] || this.__shady_native_addEventListener(a, h, d);
        }
      }
    }

    function Qd(a, b, c) {
      if (b) {
        var d = Ad(c);
        c = d.capture;
        var e = d.once,
            f = d.passive,
            g = d.La;
        d = d.Ja;
        if (Cd[a]) return this.__shady_native_removeEventListener(a, b, d);
        var h = g || this;
        g = void 0;
        var k = null;

        try {
          k = b[xd];
        } catch (l) {}

        k && (e = Md(k, h, a, c, e, f), -1 < e && (g = k.splice(e, 1)[0].pb, k.length || (b[xd] = void 0)));

        this.__shady_native_removeEventListener(a, g || b, d);

        g && this.__handlers && this.__handlers[a] && (a = this.__handlers[a][c ? "capture" : "bubble"], b = a.indexOf(g), -1 < b && a.splice(b, 1));
      }
    }

    function Rd() {
      for (var a in Id) {
        window.__shady_native_addEventListener(a, function (b) {
          b.__target || (Od(b), Ld(b));
        }, !0);
      }
    }

    var Sd = Q({
      get composed() {
        void 0 === this.__composed && (yd ? this.__composed = "focusin" === this.type || "focusout" === this.type || yd(this) : !1 !== this.isTrusted && (this.__composed = Bd[this.type]));
        return this.__composed || !1;
      },

      composedPath: function composedPath() {
        this.__composedPath || (this.__composedPath = Ed(this.__target, this.composed));
        return this.__composedPath;
      },

      get target() {
        return Gd(this.currentTarget || this.__previousCurrentTarget, this.composedPath());
      },

      get relatedTarget() {
        if (!this.__relatedTarget) return null;
        this.__relatedTargetComposedPath || (this.__relatedTargetComposedPath = Ed(this.__relatedTarget, !0));
        return Gd(this.currentTarget || this.__previousCurrentTarget, this.__relatedTargetComposedPath);
      },

      stopPropagation: function stopPropagation() {
        Event.prototype.stopPropagation.call(this);
        this.ra = !0;
      },
      stopImmediatePropagation: function stopImmediatePropagation() {
        Event.prototype.stopImmediatePropagation.call(this);
        this.ra = this.__immediatePropagationStopped = !0;
      }
    });

    function Od(a, b) {
      b = void 0 === b ? a.target : b;
      a.__target = b;
      a.__relatedTarget = a.relatedTarget;

      if (N.H) {
        b = Object.getPrototypeOf(a);

        if (!b.hasOwnProperty("__shady_patchedProto")) {
          var c = Object.create(b);
          c.__shady_sourceProto = b;
          P(c, Sd);
          b.__shady_patchedProto = c;
        }

        a.__proto__ = b.__shady_patchedProto;
      } else P(a, Sd);
    }

    var Td = Hd(Event),
        Ud = Hd(CustomEvent),
        Vd = Hd(MouseEvent);

    function Wd() {
      if (!yd && Object.getOwnPropertyDescriptor(Event.prototype, "isTrusted")) {
        var a = function a() {
          var b = new MouseEvent("click", {
            bubbles: !0,
            cancelable: !0,
            composed: !0
          });

          this.__shady_dispatchEvent(b);
        };

        Element.prototype.click ? Element.prototype.click = a : HTMLElement.prototype.click && (HTMLElement.prototype.click = a);
      }
    }

    var Xd = Object.getOwnPropertyNames(Element.prototype).filter(function (a) {
      return "on" === a.substring(0, 2);
    }),
        Yd = Object.getOwnPropertyNames(HTMLElement.prototype).filter(function (a) {
      return "on" === a.substring(0, 2);
    });

    function Zd(a) {
      return {
        set: function set(b) {
          var c = D(this),
              d = a.substring(2);
          c.T || (c.T = {});
          c.T[a] && this.removeEventListener(d, c.T[a]);

          this.__shady_addEventListener(d, b);

          c.T[a] = b;
        },
        get: function get() {
          var b = L(this);
          return b && b.T && b.T[a];
        },
        configurable: !0
      };
    }

    function $d(a, b) {
      return {
        index: a,
        ga: [],
        na: b
      };
    }

    function ae(a, b, c, d) {
      var e = 0,
          f = 0,
          g = 0,
          h = 0,
          k = Math.min(b - e, d - f);
      if (0 == e && 0 == f) a: {
        for (g = 0; g < k; g++) {
          if (a[g] !== c[g]) break a;
        }

        g = k;
      }

      if (b == a.length && d == c.length) {
        h = a.length;

        for (var l = c.length, m = 0; m < k - g && be(a[--h], c[--l]);) {
          m++;
        }

        h = m;
      }

      e += g;
      f += g;
      b -= h;
      d -= h;
      if (0 == b - e && 0 == d - f) return [];

      if (e == b) {
        for (b = $d(e, 0); f < d;) {
          b.ga.push(c[f++]);
        }

        return [b];
      }

      if (f == d) return [$d(e, b - e)];
      k = e;
      g = f;
      d = d - g + 1;
      h = b - k + 1;
      b = Array(d);

      for (l = 0; l < d; l++) {
        b[l] = Array(h), b[l][0] = l;
      }

      for (l = 0; l < h; l++) {
        b[0][l] = l;
      }

      for (l = 1; l < d; l++) {
        for (m = 1; m < h; m++) {
          if (a[k + m - 1] === c[g + l - 1]) b[l][m] = b[l - 1][m - 1];else {
            var q = b[l - 1][m] + 1,
                H = b[l][m - 1] + 1;
            b[l][m] = q < H ? q : H;
          }
        }
      }

      k = b.length - 1;
      g = b[0].length - 1;
      d = b[k][g];

      for (a = []; 0 < k || 0 < g;) {
        0 == k ? (a.push(2), g--) : 0 == g ? (a.push(3), k--) : (h = b[k - 1][g - 1], l = b[k - 1][g], m = b[k][g - 1], q = l < m ? l < h ? l : h : m < h ? m : h, q == h ? (h == d ? a.push(0) : (a.push(1), d = h), k--, g--) : q == l ? (a.push(3), k--, d = l) : (a.push(2), g--, d = m));
      }

      a.reverse();
      b = void 0;
      k = [];

      for (g = 0; g < a.length; g++) {
        switch (a[g]) {
          case 0:
            b && (k.push(b), b = void 0);
            e++;
            f++;
            break;

          case 1:
            b || (b = $d(e, 0));
            b.na++;
            e++;
            b.ga.push(c[f]);
            f++;
            break;

          case 2:
            b || (b = $d(e, 0));
            b.na++;
            e++;
            break;

          case 3:
            b || (b = $d(e, 0)), b.ga.push(c[f]), f++;
        }
      }

      b && k.push(b);
      return k;
    }

    function be(a, b) {
      return a === b;
    }
    var ce = Q({
      dispatchEvent: Nd,
      addEventListener: Pd,
      removeEventListener: Qd
    });
    var de = null;

    function ee() {
      de || (de = window.ShadyCSS && window.ShadyCSS.ScopingShim);
      return de || null;
    }

    function fe(a, b, c) {
      var d = ee();
      return d && "class" === b ? (d.setElementClass(a, c), !0) : !1;
    }

    function ge(a, b) {
      var c = ee();
      c && c.unscopeNode(a, b);
    }

    function he(a, b) {
      var c = ee();
      if (!c) return !0;

      if (a.nodeType === Node.DOCUMENT_FRAGMENT_NODE) {
        c = !0;

        for (a = a.__shady_firstChild; a; a = a.__shady_nextSibling) {
          c = c && he(a, b);
        }

        return c;
      }

      return a.nodeType !== Node.ELEMENT_NODE ? !0 : c.currentScopeForNode(a) === b;
    }

    function ie(a) {
      if (a.nodeType !== Node.ELEMENT_NODE) return "";
      var b = ee();
      return b ? b.currentScopeForNode(a) : "";
    }

    function je(a, b) {
      if (a) for (a.nodeType === Node.ELEMENT_NODE && b(a), a = a.__shady_firstChild; a; a = a.__shady_nextSibling) {
        a.nodeType === Node.ELEMENT_NODE && je(a, b);
      }
    }
    var ke = window.document,
        le = N.fa,
        me = Object.getOwnPropertyDescriptor(Node.prototype, "isConnected"),
        ne = me && me.get;

    function pe(a) {
      for (var b; b = a.__shady_firstChild;) {
        a.__shady_removeChild(b);
      }
    }

    function qe(a) {
      var b = L(a);
      if (b && void 0 !== b.qa) for (b = a.__shady_firstChild; b; b = b.__shady_nextSibling) {
        qe(b);
      }
      if (a = L(a)) a.qa = void 0;
    }

    function re(a) {
      var b = a;

      if (a && "slot" === a.localName) {
        var c = L(a);
        (c = c && c.aa) && (b = c.length ? c[0] : re(a.__shady_nextSibling));
      }

      return b;
    }

    function se(a, b, c) {
      if (a = (a = L(a)) && a.ea) {
        if (b) if (b.nodeType === Node.DOCUMENT_FRAGMENT_NODE) for (var d = 0, e = b.childNodes.length; d < e; d++) {
          a.addedNodes.push(b.childNodes[d]);
        } else a.addedNodes.push(b);
        c && a.removedNodes.push(c);
        Uc(a);
      }
    }

    var ze = Q({
      get parentNode() {
        var a = L(this);
        a = a && a.parentNode;
        return void 0 !== a ? a : this.__shady_native_parentNode;
      },

      get firstChild() {
        var a = L(this);
        a = a && a.firstChild;
        return void 0 !== a ? a : this.__shady_native_firstChild;
      },

      get lastChild() {
        var a = L(this);
        a = a && a.lastChild;
        return void 0 !== a ? a : this.__shady_native_lastChild;
      },

      get nextSibling() {
        var a = L(this);
        a = a && a.nextSibling;
        return void 0 !== a ? a : this.__shady_native_nextSibling;
      },

      get previousSibling() {
        var a = L(this);
        a = a && a.previousSibling;
        return void 0 !== a ? a : this.__shady_native_previousSibling;
      },

      get childNodes() {
        if (vc(this)) {
          var a = L(this);

          if (!a.childNodes) {
            a.childNodes = [];

            for (var b = this.__shady_firstChild; b; b = b.__shady_nextSibling) {
              a.childNodes.push(b);
            }
          }

          var c = a.childNodes;
        } else c = this.__shady_native_childNodes;

        c.item = function (d) {
          return c[d];
        };

        return c;
      },

      get parentElement() {
        var a = L(this);
        (a = a && a.parentNode) && a.nodeType !== Node.ELEMENT_NODE && (a = null);
        return void 0 !== a ? a : this.__shady_native_parentElement;
      },

      get isConnected() {
        if (ne && ne.call(this)) return !0;
        if (this.nodeType == Node.DOCUMENT_FRAGMENT_NODE) return !1;
        var a = this.ownerDocument;
        if (null === a || Ec(a, this)) return !0;

        for (a = this; a && !(a instanceof Document);) {
          a = a.__shady_parentNode || (O(a) ? a.host : void 0);
        }

        return !!(a && a instanceof Document);
      },

      get textContent() {
        if (vc(this)) {
          for (var a = [], b = this.__shady_firstChild; b; b = b.__shady_nextSibling) {
            b.nodeType !== Node.COMMENT_NODE && a.push(b.__shady_textContent);
          }

          return a.join("");
        }

        return this.__shady_native_textContent;
      },

      set textContent(a) {
        if ("undefined" === typeof a || null === a) a = "";

        switch (this.nodeType) {
          case Node.ELEMENT_NODE:
          case Node.DOCUMENT_FRAGMENT_NODE:
            if (!vc(this) && N.H) {
              var b = this.__shady_firstChild;
              (b != this.__shady_lastChild || b && b.nodeType != Node.TEXT_NODE) && pe(this);
              this.__shady_native_textContent = a;
            } else pe(this), (0 < a.length || this.nodeType === Node.ELEMENT_NODE) && this.__shady_insertBefore(document.createTextNode(a));

            break;

          default:
            this.nodeValue = a;
        }
      },

      insertBefore: function insertBefore(a, b) {
        if (this.ownerDocument !== ke && a.ownerDocument !== ke) return this.__shady_native_insertBefore(a, b), a;
        if (a === this) throw Error("Failed to execute 'appendChild' on 'Node': The new child element contains the parent.");

        if (b) {
          var c = L(b);
          c = c && c.parentNode;
          if (void 0 !== c && c !== this || void 0 === c && b.__shady_native_parentNode !== this) throw Error("Failed to execute 'insertBefore' on 'Node': The node before which the new node is to be inserted is not a child of this node.");
        }

        if (b === a) return a;
        se(this, a);
        var d = [],
            e = (c = te(this)) ? c.host.localName : ie(this),
            f = a.__shady_parentNode;

        if (f) {
          var g = ie(a);
          var h = !!c || !te(a) || le && void 0 !== this.__noInsertionPoint;

          f.__shady_removeChild(a, h);
        }

        f = !0;
        var k = (!le || void 0 === a.__noInsertionPoint && void 0 === this.__noInsertionPoint) && !he(a, e),
            l = c && !a.__noInsertionPoint && (!le || a.nodeType === Node.DOCUMENT_FRAGMENT_NODE);
        if (l || k) k && (g = g || ie(a)), je(a, function (m) {
          l && "slot" === m.localName && d.push(m);

          if (k) {
            var q = g;
            ee() && (q && ge(m, q), (q = ee()) && q.scopeNode(m, e));
          }
        });
        d.length && (ue(c), c.i.push.apply(c.i, x(d)), ve(c));
        vc(this) && (we(a, this, b), h = L(this), h.root ? (f = !1, wc(this) && ve(h.root)) : c && "slot" === this.localName && (f = !1, ve(c)));
        f ? (c = O(this) ? this.host : this, b ? (b = re(b), c.__shady_native_insertBefore(a, b)) : c.__shady_native_appendChild(a)) : a.ownerDocument !== this.ownerDocument && this.ownerDocument.adoptNode(a);
        return a;
      },
      appendChild: function appendChild(a) {
        if (this != a || !O(a)) return this.__shady_insertBefore(a);
      },
      removeChild: function removeChild(a, b) {
        b = void 0 === b ? !1 : b;
        if (this.ownerDocument !== ke) return this.__shady_native_removeChild(a);
        if (a.__shady_parentNode !== this) throw Error("The node to be removed is not a child of this node: " + a);
        se(this, null, a);
        var c = te(a),
            d = c && xe(c, a),
            e = L(this);

        if (vc(this) && (ye(a, this), wc(this))) {
          ve(e.root);
          var f = !0;
        }

        if (ee() && !b && c && a.nodeType !== Node.TEXT_NODE) {
          var g = ie(a);
          je(a, function (h) {
            ge(h, g);
          });
        }

        qe(a);
        c && ((b = "slot" === this.localName) && (f = !0), (d || b) && ve(c));
        f || (f = O(this) ? this.host : this, (!e.root && "slot" !== a.localName || f === a.__shady_native_parentNode) && f.__shady_native_removeChild(a));
        return a;
      },
      replaceChild: function replaceChild(a, b) {
        this.__shady_insertBefore(a, b);

        this.__shady_removeChild(b);

        return a;
      },
      cloneNode: function cloneNode(a) {
        if ("template" == this.localName) return this.__shady_native_cloneNode(a);

        var b = this.__shady_native_cloneNode(!1);

        if (a && b.nodeType !== Node.ATTRIBUTE_NODE) {
          a = this.__shady_firstChild;

          for (var c; a; a = a.__shady_nextSibling) {
            c = a.__shady_cloneNode(!0), b.__shady_appendChild(c);
          }
        }

        return b;
      },
      getRootNode: function getRootNode(a) {
        if (this && this.nodeType) {
          var b = D(this),
              c = b.qa;
          void 0 === c && (O(this) ? (c = this, b.qa = c) : (c = (c = this.__shady_parentNode) ? c.__shady_getRootNode(a) : this, document.documentElement.__shady_native_contains(this) && (b.qa = c)));
          return c;
        }
      },
      contains: function contains(a) {
        return Gc(this, a);
      }
    });
    var Be = Q({
      get assignedSlot() {
        var a = this.__shady_parentNode;
        (a = a && a.__shady_shadowRoot) && Ae(a);
        return (a = L(this)) && a.assignedSlot || null;
      }

    });

    function Ce(a, b, c) {
      var d = [];
      De(a, b, c, d);
      return d;
    }

    function De(a, b, c, d) {
      for (a = a.__shady_firstChild; a; a = a.__shady_nextSibling) {
        var e;

        if (e = a.nodeType === Node.ELEMENT_NODE) {
          e = a;
          var f = b,
              g = c,
              h = d,
              k = f(e);
          k && h.push(e);
          g && g(k) ? e = k : (De(e, f, g, h), e = void 0);
        }

        if (e) break;
      }
    }

    var Ee = {
      get firstElementChild() {
        var a = L(this);

        if (a && void 0 !== a.firstChild) {
          for (a = this.__shady_firstChild; a && a.nodeType !== Node.ELEMENT_NODE;) {
            a = a.__shady_nextSibling;
          }

          return a;
        }

        return this.__shady_native_firstElementChild;
      },

      get lastElementChild() {
        var a = L(this);

        if (a && void 0 !== a.lastChild) {
          for (a = this.__shady_lastChild; a && a.nodeType !== Node.ELEMENT_NODE;) {
            a = a.__shady_previousSibling;
          }

          return a;
        }

        return this.__shady_native_lastElementChild;
      },

      get children() {
        return vc(this) ? Hc(Array.prototype.filter.call(Jc(this), function (a) {
          return a.nodeType === Node.ELEMENT_NODE;
        })) : this.__shady_native_children;
      },

      get childElementCount() {
        var a = this.__shady_children;
        return a ? a.length : 0;
      }

    },
        Fe = Q((Ee.append = function (a) {
      for (var b = [], c = 0; c < arguments.length; ++c) {
        b[c] = arguments[c];
      }

      this.__shady_insertBefore(Oc.apply(null, x(b)), null);
    }, Ee.prepend = function (a) {
      for (var b = [], c = 0; c < arguments.length; ++c) {
        b[c] = arguments[c];
      }

      this.__shady_insertBefore(Oc.apply(null, x(b)), this.__shady_firstChild);
    }, Ee.replaceChildren = function (a) {
      for (var b = [], c = 0; c < arguments.length; ++c) {
        b[c] = arguments[c];
      }

      for (; null !== (c = this.__shady_firstChild);) {
        this.__shady_removeChild(c);
      }

      this.__shady_insertBefore(Oc.apply(null, x(b)), null);
    }, Ee)),
        Ge = Q({
      querySelector: function querySelector(a) {
        return Ce(this, function (b) {
          return zc.call(b, a);
        }, function (b) {
          return !!b;
        })[0] || null;
      },
      querySelectorAll: function querySelectorAll(a, b) {
        if (b) {
          b = Array.prototype.slice.call(this.__shady_native_querySelectorAll(a));

          var c = this.__shady_getRootNode();

          return Hc(b.filter(function (d) {
            return d.__shady_getRootNode() == c;
          }));
        }

        return Hc(Ce(this, function (d) {
          return zc.call(d, a);
        }));
      }
    }),
        He = N.fa && !N.J ? Mc({}, Fe) : Fe;
    Mc(Fe, Ge);
    var Ie = Q({
      after: function after(a) {
        for (var b = [], c = 0; c < arguments.length; ++c) {
          b[c] = arguments[c];
        }

        c = this.__shady_parentNode;

        if (null !== c) {
          var d = this.__shady_nextSibling;

          c.__shady_insertBefore(Oc.apply(null, x(b)), d);
        }
      },
      before: function before(a) {
        for (var b = [], c = 0; c < arguments.length; ++c) {
          b[c] = arguments[c];
        }

        c = this.__shady_parentNode;
        null !== c && c.__shady_insertBefore(Oc.apply(null, x(b)), this);
      },
      remove: function remove() {
        var a = this.__shady_parentNode;
        null !== a && a.__shady_removeChild(this);
      },
      replaceWith: function replaceWith(a) {
        for (var b = [], c = 0; c < arguments.length; ++c) {
          b[c] = arguments[c];
        }

        c = this.__shady_parentNode;

        if (null !== c) {
          var d = this.__shady_nextSibling;

          c.__shady_removeChild(this);

          c.__shady_insertBefore(Oc.apply(null, x(b)), d);
        }
      }
    });
    var Je = window.document;

    function Ke(a, b) {
      if ("slot" === b) a = a.__shady_parentNode, wc(a) && ve(L(a).root);else if ("slot" === a.localName && "name" === b && (b = te(a))) {
        if (b.g) {
          Le(b);
          var c = a.Qa,
              d = Me(a);

          if (d !== c) {
            c = b.h[c];
            var e = c.indexOf(a);
            0 <= e && c.splice(e, 1);
            c = b.h[d] || (b.h[d] = []);
            c.push(a);
            1 < c.length && (b.h[d] = Ne(c));
          }
        }

        ve(b);
      }
    }

    var Oe = Q({
      get previousElementSibling() {
        var a = L(this);

        if (a && void 0 !== a.previousSibling) {
          for (a = this.__shady_previousSibling; a && a.nodeType !== Node.ELEMENT_NODE;) {
            a = a.__shady_previousSibling;
          }

          return a;
        }

        return this.__shady_native_previousElementSibling;
      },

      get nextElementSibling() {
        var a = L(this);

        if (a && void 0 !== a.nextSibling) {
          for (a = this.__shady_nextSibling; a && a.nodeType !== Node.ELEMENT_NODE;) {
            a = a.__shady_nextSibling;
          }

          return a;
        }

        return this.__shady_native_nextElementSibling;
      },

      get slot() {
        return this.getAttribute("slot");
      },

      set slot(a) {
        this.__shady_setAttribute("slot", a);
      },

      get className() {
        return this.getAttribute("class") || "";
      },

      set className(a) {
        this.__shady_setAttribute("class", a);
      },

      setAttribute: function setAttribute(a, b) {
        this.ownerDocument !== Je ? this.__shady_native_setAttribute(a, b) : fe(this, a, b) || (this.__shady_native_setAttribute(a, b), Ke(this, a));
      },
      removeAttribute: function removeAttribute(a) {
        this.ownerDocument !== Je ? this.__shady_native_removeAttribute(a) : fe(this, a, "") ? "" === this.getAttribute(a) && this.__shady_native_removeAttribute(a) : (this.__shady_native_removeAttribute(a), Ke(this, a));
      }
    });
    N.fa || Xd.forEach(function (a) {
      Oe[a] = Zd(a);
    });
    var Te = Q({
      attachShadow: function attachShadow(a) {
        if (!this) throw Error("Must provide a host.");
        if (!a) throw Error("Not enough arguments.");

        if (a.shadyUpgradeFragment && !N.Na) {
          var b = a.shadyUpgradeFragment;
          b.__proto__ = ShadowRoot.prototype;
          Pe(b, this, a);
          Qe(b, b);
          a = b.__noInsertionPoint ? null : b.querySelectorAll("slot");
          b.__noInsertionPoint = void 0;

          if (a && a.length) {
            var c = b;
            ue(c);
            c.i.push.apply(c.i, x(a));
            ve(b);
          }

          b.host.__shady_native_appendChild(b);
        } else b = new Re(Se, this, a);

        return this.__CE_shadowRoot = b;
      },

      get shadowRoot() {
        var a = L(this);
        return a && a.gb || null;
      }

    });
    Mc(Oe, Te);
    var Ue = document.implementation.createHTMLDocument("inert"),
        Ve = Q({
      get innerHTML() {
        return vc(this) ? dd("template" === this.localName ? this.content : this, Jc) : this.__shady_native_innerHTML;
      },

      set innerHTML(a) {
        if ("template" === this.localName) this.__shady_native_innerHTML = a;else {
          pe(this);
          var b = this.localName || "div";
          b = this.namespaceURI && this.namespaceURI !== Ue.namespaceURI ? Ue.createElementNS(this.namespaceURI, b) : Ue.createElement(b);

          for (N.H ? b.__shady_native_innerHTML = a : b.innerHTML = a; a = b.__shady_firstChild;) {
            this.__shady_insertBefore(a);
          }
        }
      }

    });
    var We = Q({
      blur: function blur() {
        var a = L(this);
        (a = (a = a && a.root) && a.activeElement) ? a.__shady_blur() : this.__shady_native_blur();
      }
    });
    N.fa || Yd.forEach(function (a) {
      We[a] = Zd(a);
    });
    var Xe = Q({
      assignedNodes: function assignedNodes(a) {
        if ("slot" === this.localName) {
          var b = this.__shady_getRootNode();

          b && O(b) && Ae(b);
          return (b = L(this)) ? (a && a.flatten ? b.aa : b.assignedNodes) || [] : [];
        }
      },
      addEventListener: function addEventListener(a, b, c) {
        if ("slot" !== this.localName || "slotchange" === a) Pd.call(this, a, b, c);else {
          "object" !== _typeof(c) && (c = {
            capture: !!c
          });
          var d = this.__shady_parentNode;
          if (!d) throw Error("ShadyDOM cannot attach event to slot unless it has a `parentNode`");
          c.U = this;

          d.__shady_addEventListener(a, b, c);
        }
      },
      removeEventListener: function removeEventListener(a, b, c) {
        if ("slot" !== this.localName || "slotchange" === a) Qd.call(this, a, b, c);else {
          "object" !== _typeof(c) && (c = {
            capture: !!c
          });
          var d = this.__shady_parentNode;
          if (!d) throw Error("ShadyDOM cannot attach event to slot unless it has a `parentNode`");
          c.U = this;

          d.__shady_removeEventListener(a, b, c);
        }
      }
    });
    var Ye = Q({
      getElementById: function getElementById(a) {
        return "" === a ? null : Ce(this, function (b) {
          return b.id == a;
        }, function (b) {
          return !!b;
        })[0] || null;
      }
    });

    function Ze(a, b) {
      for (var c; b && !a.has(c = b.__shady_getRootNode());) {
        b = c.host;
      }

      return b;
    }

    function $e(a) {
      var b = new Set();

      for (b.add(a); O(a) && a.host;) {
        a = a.host.__shady_getRootNode(), b.add(a);
      }

      return b;
    }

    var af = "__shady_native_" + uc(),
        bf = Q({
      get activeElement() {
        var a = N.H ? document.__shady_native_activeElement : document.activeElement;
        if (!a || !a.nodeType) return null;
        var b = !!O(this);
        if (!(this === document || b && this.host !== a && this.host.__shady_native_contains(a))) return null;

        for (b = te(a); b && b !== this;) {
          a = b.host, b = te(a);
        }

        return this === document ? b ? null : a : b === this ? a : null;
      },

      elementsFromPoint: function elementsFromPoint(a, b) {
        a = [].slice.call(document[af](a, b));
        b = $e(this);

        for (var c = new Set(), d = 0; d < a.length; d++) {
          c.add(Ze(b, a[d]));
        }

        var e = [];
        c.forEach(function (f) {
          return e.push(f);
        });
        return e;
      },
      elementFromPoint: function elementFromPoint(a, b) {
        return this.__shady_elementsFromPoint(a, b)[0] || null;
      }
    });
    var cf = window.document,
        df = Q({
      importNode: function importNode(a, b) {
        if (a.ownerDocument !== cf || "template" === a.localName) return this.__shady_native_importNode(a, b);

        var c = this.__shady_native_importNode(a, !1);

        if (b) for (a = a.__shady_firstChild; a; a = a.__shady_nextSibling) {
          b = this.__shady_importNode(a, !0), c.__shady_appendChild(b);
        }
        return c;
      }
    });
    var ef = Q({
      dispatchEvent: Nd,
      addEventListener: Pd.bind(window),
      removeEventListener: Qd.bind(window)
    });
    var ff = {};
    Object.getOwnPropertyDescriptor(HTMLElement.prototype, "parentElement") && (ff.parentElement = ze.parentElement);
    Object.getOwnPropertyDescriptor(HTMLElement.prototype, "contains") && (ff.contains = ze.contains);
    Object.getOwnPropertyDescriptor(HTMLElement.prototype, "children") && (ff.children = Fe.children);
    Object.getOwnPropertyDescriptor(HTMLElement.prototype, "innerHTML") && (ff.innerHTML = Ve.innerHTML);
    Object.getOwnPropertyDescriptor(HTMLElement.prototype, "className") && (ff.className = Oe.className);
    var gf = {
      EventTarget: [ce],
      Node: [ze, window.EventTarget ? null : ce],
      Text: [Be],
      Comment: [Be],
      CDATASection: [Be],
      ProcessingInstruction: [Be],
      Element: [Oe, Fe, Ie, Be, !N.H || "innerHTML" in Element.prototype ? Ve : null, window.HTMLSlotElement ? null : Xe],
      HTMLElement: [We, ff],
      HTMLSlotElement: [Xe],
      DocumentFragment: [He, Ye],
      Document: [df, He, Ye, bf],
      Window: [ef],
      CharacterData: [Ie]
    },
        hf = N.H ? null : ["innerHTML", "textContent"];

    function jf(a, b, c, d) {
      b.forEach(function (e) {
        return a && e && P(a, e, c, d);
      });
    }

    function kf(a) {
      var b = a ? null : hf,
          c;

      for (c in gf) {
        jf(window[c] && window[c].prototype, gf[c], a, b);
      }
    }

    ["Text", "Comment", "CDATASection", "ProcessingInstruction"].forEach(function (a) {
      var b = window[a],
          c = Object.create(b.prototype);
      c.__shady_protoIsPatched = !0;
      jf(c, gf.EventTarget);
      jf(c, gf.Node);
      gf[a] && jf(c, gf[a]);
      b.prototype.__shady_patchedProto = c;
    });

    function lf(a) {
      a.__shady_protoIsPatched = !0;
      jf(a, gf.EventTarget);
      jf(a, gf.Node);
      jf(a, gf.Element);
      jf(a, gf.HTMLElement);
      jf(a, gf.HTMLSlotElement);
      return a;
    }
    var mf = N.Aa,
        nf = N.H;

    function of(a, b) {
      if (mf && !a.__shady_protoIsPatched && !O(a)) {
        var c = Object.getPrototypeOf(a),
            d = c.hasOwnProperty("__shady_patchedProto") && c.__shady_patchedProto;

        d || (d = Object.create(c), lf(d), c.__shady_patchedProto = d);
        Object.setPrototypeOf(a, d);
      }

      nf || (1 === b ? vd(a) : 2 === b && wd(a));
    }

    function pf(a, b, c, d) {
      of(a, 1);
      d = d || null;
      var e = D(a),
          f = d ? D(d) : null;
      e.previousSibling = d ? f.previousSibling : b.__shady_lastChild;
      if (f = L(e.previousSibling)) f.nextSibling = a;
      if (f = L(e.nextSibling = d)) f.previousSibling = a;
      e.parentNode = b;
      d ? d === c.firstChild && (c.firstChild = a) : (c.lastChild = a, c.firstChild || (c.firstChild = a));
      c.childNodes = null;
    }

    function we(a, b, c) {
      of(b, 2);
      var d = D(b);
      void 0 !== d.firstChild && (d.childNodes = null);
      if (a.nodeType === Node.DOCUMENT_FRAGMENT_NODE) for (a = a.__shady_native_firstChild; a; a = a.__shady_native_nextSibling) {
        pf(a, b, d, c);
      } else pf(a, b, d, c);
    }

    function ye(a, b) {
      var c = D(a);
      b = D(b);
      a === b.firstChild && (b.firstChild = c.nextSibling);
      a === b.lastChild && (b.lastChild = c.previousSibling);
      a = c.previousSibling;
      var d = c.nextSibling;
      a && (D(a).nextSibling = d);
      d && (D(d).previousSibling = a);
      c.parentNode = c.previousSibling = c.nextSibling = void 0;
      void 0 !== b.childNodes && (b.childNodes = null);
    }

    function Qe(a, b) {
      var c = D(a);

      if (b || void 0 === c.firstChild) {
        c.childNodes = null;
        var d = c.firstChild = a.__shady_native_firstChild;
        c.lastChild = a.__shady_native_lastChild;
        of(a, 2);
        c = d;

        for (d = void 0; c; c = c.__shady_native_nextSibling) {
          var e = D(c);
          e.parentNode = b || a;
          e.nextSibling = c.__shady_native_nextSibling;
          e.previousSibling = d || null;
          d = c;
          of(c, 1);
        }
      }
    }
    var qf = Q({
      addEventListener: function addEventListener(a, b, c) {
        "object" !== _typeof(c) && (c = {
          capture: !!c
        });
        c.U = c.U || this;

        this.host.__shady_addEventListener(a, b, c);
      },
      removeEventListener: function removeEventListener(a, b, c) {
        "object" !== _typeof(c) && (c = {
          capture: !!c
        });
        c.U = c.U || this;

        this.host.__shady_removeEventListener(a, b, c);
      }
    });

    function rf(a, b) {
      P(a, qf, b);
      P(a, bf, b);
      P(a, Ve, b);
      P(a, Fe, b);
      N.J && !b ? (P(a, ze, b), P(a, Ye, b)) : N.H || (P(a, sd), P(a, qd), P(a, rd));
    }
    var Se = {},
        sf = N.deferConnectionCallbacks && "loading" === document.readyState,
        tf;

    function uf(a) {
      var b = [];

      do {
        b.unshift(a);
      } while (a = a.__shady_parentNode);

      return b;
    }

    function Re(a, b, c) {
      if (a !== Se) throw new TypeError("Illegal constructor");
      this.g = null;
      Pe(this, b, c);
    }

    function Pe(a, b, c) {
      a.host = b;
      a.mode = c && c.mode;
      Qe(a.host);
      b = D(a.host);
      b.root = a;
      b.gb = "closed" !== a.mode ? a : null;
      b = D(a);
      b.firstChild = b.lastChild = b.parentNode = b.nextSibling = b.previousSibling = null;
      if (N.preferPerformance) for (; b = a.host.__shady_native_firstChild;) {
        a.host.__shady_native_removeChild(b);
      } else ve(a);
    }

    function ve(a) {
      a.Y || (a.Y = !0, Rc(function () {
        return Ae(a);
      }));
    }

    function Ae(a) {
      var b;

      if (b = a.Y) {
        for (var c; a;) {
          a: {
            a.Y && (c = a), b = a;
            a = b.host.__shady_getRootNode();
            if (O(a) && (b = L(b.host)) && 0 < b.ia) break a;
            a = void 0;
          }
        }

        b = c;
      }

      (c = b) && c._renderSelf();
    }

    Re.prototype._renderSelf = function () {
      var a = sf;
      sf = !0;
      this.Y = !1;

      if (this.g) {
        Le(this);

        for (var b = 0, c; b < this.g.length; b++) {
          c = this.g[b];
          var d = L(c),
              e = d.assignedNodes;
          d.assignedNodes = [];
          d.aa = [];
          if (d.Ga = e) for (d = 0; d < e.length; d++) {
            var f = L(e[d]);
            f.ua = f.assignedSlot;
            f.assignedSlot === c && (f.assignedSlot = null);
          }
        }

        for (b = this.host.__shady_firstChild; b; b = b.__shady_nextSibling) {
          vf(this, b);
        }

        for (b = 0; b < this.g.length; b++) {
          c = this.g[b];
          e = L(c);
          if (!e.assignedNodes.length) for (d = c.__shady_firstChild; d; d = d.__shady_nextSibling) {
            vf(this, d, c);
          }
          (d = (d = L(c.__shady_parentNode)) && d.root) && (xc(d) || d.Y) && d._renderSelf();
          wf(this, e.aa, e.assignedNodes);

          if (d = e.Ga) {
            for (f = 0; f < d.length; f++) {
              L(d[f]).ua = null;
            }

            e.Ga = null;
            d.length > e.assignedNodes.length && (e.xa = !0);
          }

          e.xa && (e.xa = !1, xf(this, c));
        }

        c = this.g;
        b = [];

        for (e = 0; e < c.length; e++) {
          d = c[e].__shady_parentNode, (f = L(d)) && f.root || !(0 > b.indexOf(d)) || b.push(d);
        }

        for (c = 0; c < b.length; c++) {
          f = b[c];
          e = f === this ? this.host : f;
          d = [];

          for (f = f.__shady_firstChild; f; f = f.__shady_nextSibling) {
            if ("slot" == f.localName) for (var g = L(f).aa, h = 0; h < g.length; h++) {
              d.push(g[h]);
            } else d.push(f);
          }

          f = Ic(e);
          g = ae(d, d.length, f, f.length);

          for (var k = h = 0, l = void 0; h < g.length && (l = g[h]); h++) {
            for (var m = 0, q = void 0; m < l.ga.length && (q = l.ga[m]); m++) {
              q.__shady_native_parentNode === e && e.__shady_native_removeChild(q), f.splice(l.index + k, 1);
            }

            k -= l.na;
          }

          k = 0;

          for (l = void 0; k < g.length && (l = g[k]); k++) {
            for (h = f[l.index], m = l.index; m < l.index + l.na; m++) {
              q = d[m], e.__shady_native_insertBefore(q, h), f.splice(m, 0, q);
            }
          }
        }
      }

      if (!N.preferPerformance && !this.Fa) for (b = this.host.__shady_firstChild; b; b = b.__shady_nextSibling) {
        c = L(b), b.__shady_native_parentNode !== this.host || "slot" !== b.localName && c.assignedSlot || this.host.__shady_native_removeChild(b);
      }
      this.Fa = !0;
      sf = a;
      tf && tf();
    };

    function vf(a, b, c) {
      var d = D(b),
          e = d.ua;
      d.ua = null;
      c || (c = (a = a.h[b.__shady_slot || "__catchall"]) && a[0]);
      c ? (D(c).assignedNodes.push(b), d.assignedSlot = c) : d.assignedSlot = void 0;
      e !== d.assignedSlot && d.assignedSlot && (D(d.assignedSlot).xa = !0);
    }

    function wf(a, b, c) {
      for (var d = 0, e = void 0; d < c.length && (e = c[d]); d++) {
        if ("slot" == e.localName) {
          var f = L(e).assignedNodes;
          f && f.length && wf(a, b, f);
        } else b.push(c[d]);
      }
    }

    function xf(a, b) {
      b.__shady_native_dispatchEvent(new Event("slotchange"));

      b = L(b);
      b.assignedSlot && xf(a, b.assignedSlot);
    }

    function ue(a) {
      a.i = a.i || [];
      a.g = a.g || [];
      a.h = a.h || {};
    }

    function Le(a) {
      if (a.i && a.i.length) {
        for (var b = a.i, c, d = 0; d < b.length; d++) {
          var e = b[d];
          Qe(e);
          var f = e.__shady_parentNode;
          Qe(f);
          f = L(f);
          f.ia = (f.ia || 0) + 1;
          f = Me(e);
          a.h[f] ? (c = c || {}, c[f] = !0, a.h[f].push(e)) : a.h[f] = [e];
          a.g.push(e);
        }

        if (c) for (var g in c) {
          a.h[g] = Ne(a.h[g]);
        }
        a.i = [];
      }
    }

    function Me(a) {
      var b = a.name || a.getAttribute("name") || "__catchall";
      return a.Qa = b;
    }

    function Ne(a) {
      return a.sort(function (b, c) {
        b = uf(b);

        for (var d = uf(c), e = 0; e < b.length; e++) {
          c = b[e];
          var f = d[e];
          if (c !== f) return b = Jc(c.__shady_parentNode), b.indexOf(c) - b.indexOf(f);
        }
      });
    }

    function xe(a, b) {
      if (a.g) {
        Le(a);
        var c = a.h,
            d;

        for (d in c) {
          for (var e = c[d], f = 0; f < e.length; f++) {
            var g = e[f];

            if (Gc(b, g)) {
              e.splice(f, 1);
              var h = a.g.indexOf(g);
              0 <= h && (a.g.splice(h, 1), (h = L(g.__shady_parentNode)) && h.ia && h.ia--);
              f--;
              g = L(g);
              if (h = g.aa) for (var k = 0; k < h.length; k++) {
                var l = h[k],
                    m = l.__shady_native_parentNode;
                m && m.__shady_native_removeChild(l);
              }
              g.aa = [];
              g.assignedNodes = [];
              h = !0;
            }
          }
        }

        return h;
      }
    }

    function xc(a) {
      Le(a);
      return !(!a.g || !a.g.length);
    }

    (function (a) {
      a.__proto__ = DocumentFragment.prototype;
      rf(a, "__shady_");
      rf(a);
      Object.defineProperties(a, {
        nodeType: {
          value: Node.DOCUMENT_FRAGMENT_NODE,
          configurable: !0
        },
        nodeName: {
          value: "#document-fragment",
          configurable: !0
        },
        nodeValue: {
          value: null,
          configurable: !0
        }
      });
      ["localName", "namespaceURI", "prefix"].forEach(function (b) {
        Object.defineProperty(a, b, {
          value: void 0,
          configurable: !0
        });
      });
      ["ownerDocument", "baseURI", "isConnected"].forEach(function (b) {
        Object.defineProperty(a, b, {
          get: function get() {
            return this.host[b];
          },
          configurable: !0
        });
      });
    })(Re.prototype);

    if (window.customElements && window.customElements.define && N.ya && !N.preferPerformance) {
      var yf = new Map();

      tf = function tf() {
        var a = [];
        yf.forEach(function (d, e) {
          a.push([e, d]);
        });
        yf.clear();

        for (var b = 0; b < a.length; b++) {
          var c = a[b][0];
          a[b][1] ? c.__shadydom_connectedCallback() : c.__shadydom_disconnectedCallback();
        }
      };

      sf && document.addEventListener("readystatechange", function () {
        sf = !1;
        tf();
      }, {
        once: !0
      });

      var zf = function zf(a, b, c) {
        var d = 0,
            e = "__isConnected" + d++;
        if (b || c) a.prototype.connectedCallback = a.prototype.__shadydom_connectedCallback = function () {
          sf ? yf.set(this, !0) : this[e] || (this[e] = !0, b && b.call(this));
        }, a.prototype.disconnectedCallback = a.prototype.__shadydom_disconnectedCallback = function () {
          sf ? this.isConnected || yf.set(this, !1) : this[e] && (this[e] = !1, c && c.call(this));
        };
        return a;
      },
          Af = window.customElements.define,
          Bf = function Bf(a, b) {
        var c = b.prototype.connectedCallback,
            d = b.prototype.disconnectedCallback;
        Af.call(window.customElements, a, zf(b, c, d));
        b.prototype.connectedCallback = c;
        b.prototype.disconnectedCallback = d;
      };

      window.customElements.define = Bf;
      Object.defineProperty(window.CustomElementRegistry.prototype, "define", {
        value: Bf,
        configurable: !0
      });
    }

    function te(a) {
      a = a.__shady_getRootNode();
      if (O(a)) return a;
    }

    function Cf(a) {
      this.node = a;
    }

    v = Cf.prototype;

    v.addEventListener = function (a, b, c) {
      return this.node.__shady_addEventListener(a, b, c);
    };

    v.removeEventListener = function (a, b, c) {
      return this.node.__shady_removeEventListener(a, b, c);
    };

    v.appendChild = function (a) {
      return this.node.__shady_appendChild(a);
    };

    v.insertBefore = function (a, b) {
      return this.node.__shady_insertBefore(a, b);
    };

    v.removeChild = function (a) {
      return this.node.__shady_removeChild(a);
    };

    v.replaceChild = function (a, b) {
      return this.node.__shady_replaceChild(a, b);
    };

    v.cloneNode = function (a) {
      return this.node.__shady_cloneNode(a);
    };

    v.getRootNode = function (a) {
      return this.node.__shady_getRootNode(a);
    };

    v.contains = function (a) {
      return this.node.__shady_contains(a);
    };

    v.dispatchEvent = function (a) {
      return this.node.__shady_dispatchEvent(a);
    };

    v.setAttribute = function (a, b) {
      this.node.__shady_setAttribute(a, b);
    };

    v.getAttribute = function (a) {
      return this.node.__shady_native_getAttribute(a);
    };

    v.hasAttribute = function (a) {
      return this.node.__shady_native_hasAttribute(a);
    };

    v.removeAttribute = function (a) {
      this.node.__shady_removeAttribute(a);
    };

    v.attachShadow = function (a) {
      return this.node.__shady_attachShadow(a);
    };

    v.focus = function () {
      this.node.__shady_native_focus();
    };

    v.blur = function () {
      this.node.__shady_blur();
    };

    v.importNode = function (a, b) {
      if (this.node.nodeType === Node.DOCUMENT_NODE) return this.node.__shady_importNode(a, b);
    };

    v.getElementById = function (a) {
      if (this.node.nodeType === Node.DOCUMENT_NODE) return this.node.__shady_getElementById(a);
    };

    v.elementsFromPoint = function (a, b) {
      return this.node.__shady_elementsFromPoint(a, b);
    };

    v.elementFromPoint = function (a, b) {
      return this.node.__shady_elementFromPoint(a, b);
    };

    v.querySelector = function (a) {
      return this.node.__shady_querySelector(a);
    };

    v.querySelectorAll = function (a, b) {
      return this.node.__shady_querySelectorAll(a, b);
    };

    v.assignedNodes = function (a) {
      if ("slot" === this.node.localName) return this.node.__shady_assignedNodes(a);
    };

    v.append = function (a) {
      for (var b = [], c = 0; c < arguments.length; ++c) {
        b[c] = arguments[c];
      }

      return this.node.__shady_append.apply(this.node, x(b));
    };

    v.prepend = function (a) {
      for (var b = [], c = 0; c < arguments.length; ++c) {
        b[c] = arguments[c];
      }

      return this.node.__shady_prepend.apply(this.node, x(b));
    };

    v.after = function (a) {
      for (var b = [], c = 0; c < arguments.length; ++c) {
        b[c] = arguments[c];
      }

      return this.node.__shady_after.apply(this.node, x(b));
    };

    v.before = function (a) {
      for (var b = [], c = 0; c < arguments.length; ++c) {
        b[c] = arguments[c];
      }

      return this.node.__shady_before.apply(this.node, x(b));
    };

    v.remove = function () {
      return this.node.__shady_remove();
    };

    v.replaceWith = function (a) {
      for (var b = [], c = 0; c < arguments.length; ++c) {
        b[c] = arguments[c];
      }

      return this.node.__shady_replaceWith.apply(this.node, x(b));
    };

    ea.Object.defineProperties(Cf.prototype, {
      activeElement: {
        configurable: !0,
        enumerable: !0,
        get: function get() {
          if (O(this.node) || this.node.nodeType === Node.DOCUMENT_NODE) return this.node.__shady_activeElement;
        }
      },
      _activeElement: {
        configurable: !0,
        enumerable: !0,
        get: function get() {
          return this.activeElement;
        }
      },
      host: {
        configurable: !0,
        enumerable: !0,
        get: function get() {
          if (O(this.node)) return this.node.host;
        }
      },
      parentNode: {
        configurable: !0,
        enumerable: !0,
        get: function get() {
          return this.node.__shady_parentNode;
        }
      },
      firstChild: {
        configurable: !0,
        enumerable: !0,
        get: function get() {
          return this.node.__shady_firstChild;
        }
      },
      lastChild: {
        configurable: !0,
        enumerable: !0,
        get: function get() {
          return this.node.__shady_lastChild;
        }
      },
      nextSibling: {
        configurable: !0,
        enumerable: !0,
        get: function get() {
          return this.node.__shady_nextSibling;
        }
      },
      previousSibling: {
        configurable: !0,
        enumerable: !0,
        get: function get() {
          return this.node.__shady_previousSibling;
        }
      },
      childNodes: {
        configurable: !0,
        enumerable: !0,
        get: function get() {
          return this.node.__shady_childNodes;
        }
      },
      parentElement: {
        configurable: !0,
        enumerable: !0,
        get: function get() {
          return this.node.__shady_parentElement;
        }
      },
      firstElementChild: {
        configurable: !0,
        enumerable: !0,
        get: function get() {
          return this.node.__shady_firstElementChild;
        }
      },
      lastElementChild: {
        configurable: !0,
        enumerable: !0,
        get: function get() {
          return this.node.__shady_lastElementChild;
        }
      },
      nextElementSibling: {
        configurable: !0,
        enumerable: !0,
        get: function get() {
          return this.node.__shady_nextElementSibling;
        }
      },
      previousElementSibling: {
        configurable: !0,
        enumerable: !0,
        get: function get() {
          return this.node.__shady_previousElementSibling;
        }
      },
      children: {
        configurable: !0,
        enumerable: !0,
        get: function get() {
          return this.node.__shady_children;
        }
      },
      childElementCount: {
        configurable: !0,
        enumerable: !0,
        get: function get() {
          return this.node.__shady_childElementCount;
        }
      },
      shadowRoot: {
        configurable: !0,
        enumerable: !0,
        get: function get() {
          return this.node.__shady_shadowRoot;
        }
      },
      assignedSlot: {
        configurable: !0,
        enumerable: !0,
        get: function get() {
          return this.node.__shady_assignedSlot;
        }
      },
      isConnected: {
        configurable: !0,
        enumerable: !0,
        get: function get() {
          return this.node.__shady_isConnected;
        }
      },
      innerHTML: {
        configurable: !0,
        enumerable: !0,
        get: function get() {
          return this.node.__shady_innerHTML;
        },
        set: function set(a) {
          this.node.__shady_innerHTML = a;
        }
      },
      textContent: {
        configurable: !0,
        enumerable: !0,
        get: function get() {
          return this.node.__shady_textContent;
        },
        set: function set(a) {
          this.node.__shady_textContent = a;
        }
      },
      slot: {
        configurable: !0,
        enumerable: !0,
        get: function get() {
          return this.node.__shady_slot;
        },
        set: function set(a) {
          this.node.__shady_slot = a;
        }
      },
      className: {
        configurable: !0,
        enumerable: !0,
        get: function get() {
          return this.node.__shady_className;
        },
        set: function set(a) {
          this.node.__shady_className = a;
        }
      }
    });

    function Df(a) {
      Object.defineProperty(Cf.prototype, a, {
        get: function get() {
          return this.node["__shady_" + a];
        },
        set: function set(b) {
          this.node["__shady_" + a] = b;
        },
        configurable: !0
      });
    }

    Xd.forEach(function (a) {
      return Df(a);
    });
    Yd.forEach(function (a) {
      return Df(a);
    });
    var Ef = new WeakMap();

    function Ff(a) {
      if (O(a) || a instanceof Cf) return a;
      var b = Ef.get(a);
      b || (b = new Cf(a), Ef.set(a, b));
      return b;
    }

    if (N.ya) {
      var Gf = N.H ? function (a) {
        return a;
      } : function (a) {
        wd(a);
        vd(a);
        return a;
      },
          ShadyDOM = {
        inUse: N.ya,
        patch: Gf,
        isShadyRoot: O,
        enqueue: Rc,
        flush: Sc,
        flushInitial: function flushInitial(a) {
          !a.Fa && a.Y && Ae(a);
        },
        settings: N,
        filterMutations: Xc,
        observeChildren: Vc,
        unobserveChildren: Wc,
        deferConnectionCallbacks: N.deferConnectionCallbacks,
        preferPerformance: N.preferPerformance,
        handlesDynamicScoping: !0,
        wrap: N.J ? Ff : Gf,
        wrapIfNeeded: !0 === N.J ? Ff : function (a) {
          return a;
        },
        Wrapper: Cf,
        composedPath: Fd,
        noPatch: N.J,
        patchOnDemand: N.Aa,
        nativeMethods: fd,
        nativeTree: gd,
        patchElementProto: lf
      };
      window.ShadyDOM = ShadyDOM;
      pd();
      kf("__shady_");
      Object.defineProperty(document, "_activeElement", bf.activeElement);
      P(Window.prototype, ef, "__shady_");
      N.J ? N.Aa && P(Element.prototype, Te) : (kf(), Wd());
      Rd();
      window.Event = Td;
      window.CustomEvent = Ud;
      window.MouseEvent = Vd;
      window.ShadowRoot = Re;
    }
    var Hf = window.Document.prototype.createElement,
        If = window.Document.prototype.createElementNS,
        Jf = window.Document.prototype.importNode,
        Kf = window.Document.prototype.prepend,
        Lf = window.Document.prototype.append,
        Mf = window.DocumentFragment.prototype.prepend,
        Nf = window.DocumentFragment.prototype.append,
        Of = window.Node.prototype.cloneNode,
        Pf = window.Node.prototype.appendChild,
        Qf = window.Node.prototype.insertBefore,
        Rf = window.Node.prototype.removeChild,
        Sf = window.Node.prototype.replaceChild,
        Tf = Object.getOwnPropertyDescriptor(window.Node.prototype, "textContent"),
        Uf = window.Element.prototype.attachShadow,
        Vf = Object.getOwnPropertyDescriptor(window.Element.prototype, "innerHTML"),
        Wf = window.Element.prototype.getAttribute,
        Xf = window.Element.prototype.setAttribute,
        Yf = window.Element.prototype.removeAttribute,
        Zf = window.Element.prototype.getAttributeNS,
        $f = window.Element.prototype.setAttributeNS,
        ag = window.Element.prototype.removeAttributeNS,
        bg = window.Element.prototype.insertAdjacentElement,
        cg = window.Element.prototype.insertAdjacentHTML,
        dg = window.Element.prototype.prepend,
        eg = window.Element.prototype.append,
        fg = window.Element.prototype.before,
        gg = window.Element.prototype.after,
        hg = window.Element.prototype.replaceWith,
        ig = window.Element.prototype.remove,
        jg = window.HTMLElement,
        kg = Object.getOwnPropertyDescriptor(window.HTMLElement.prototype, "innerHTML"),
        lg = window.HTMLElement.prototype.insertAdjacentElement,
        mg = window.HTMLElement.prototype.insertAdjacentHTML;
    var ng = new Set();
    "annotation-xml color-profile font-face font-face-src font-face-uri font-face-format font-face-name missing-glyph".split(" ").forEach(function (a) {
      return ng.add(a);
    });

    function og(a) {
      var b = ng.has(a);
      a = /^[a-z][.0-9_a-z]*-[-.0-9_a-z]*$/.test(a);
      return !b && a;
    }

    var pg = document.contains ? document.contains.bind(document) : document.documentElement.contains.bind(document.documentElement);

    function T(a) {
      var b = a.isConnected;
      if (void 0 !== b) return b;
      if (pg(a)) return !0;

      for (; a && !(a.__CE_isImportDocument || a instanceof Document);) {
        a = a.parentNode || (window.ShadowRoot && a instanceof ShadowRoot ? a.host : void 0);
      }

      return !(!a || !(a.__CE_isImportDocument || a instanceof Document));
    }

    function qg(a) {
      var b = a.children;
      if (b) return Array.prototype.slice.call(b);
      b = [];

      for (a = a.firstChild; a; a = a.nextSibling) {
        a.nodeType === Node.ELEMENT_NODE && b.push(a);
      }

      return b;
    }

    function rg(a, b) {
      for (; b && b !== a && !b.nextSibling;) {
        b = b.parentNode;
      }

      return b && b !== a ? b.nextSibling : null;
    }

    function sg(a, b, c) {
      for (var d = a; d;) {
        if (d.nodeType === Node.ELEMENT_NODE) {
          var e = d;
          b(e);
          var f = e.localName;

          if ("link" === f && "import" === e.getAttribute("rel")) {
            d = e.import;
            void 0 === c && (c = new Set());
            if (d instanceof Node && !c.has(d)) for (c.add(d), d = d.firstChild; d; d = d.nextSibling) {
              sg(d, b, c);
            }
            d = rg(a, e);
            continue;
          } else if ("template" === f) {
            d = rg(a, e);
            continue;
          }

          if (e = e.__CE_shadowRoot) for (e = e.firstChild; e; e = e.nextSibling) {
            sg(e, b, c);
          }
        }

        d = d.firstChild ? d.firstChild : rg(a, d);
      }
    }

    function tg() {
      var a = !(null === ug || void 0 === ug || !ug.noDocumentConstructionObserver),
          b = !(null === ug || void 0 === ug || !ug.shadyDomFastWalk);
      this.ca = [];
      this.g = [];
      this.W = !1;
      this.shadyDomFastWalk = b;
      this.nb = !a;
    }

    function vg(a, b, c, d) {
      var e = window.ShadyDOM;

      if (a.shadyDomFastWalk && e && e.inUse) {
        if (b.nodeType === Node.ELEMENT_NODE && c(b), b.querySelectorAll) for (a = e.nativeMethods.querySelectorAll.call(b, "*"), b = 0; b < a.length; b++) {
          c(a[b]);
        }
      } else sg(b, c, d);
    }

    function wg(a, b) {
      a.W = !0;
      a.ca.push(b);
    }

    function xg(a, b) {
      a.W = !0;
      a.g.push(b);
    }

    function yg(a, b) {
      a.W && vg(a, b, function (c) {
        return zg(a, c);
      });
    }

    function zg(a, b) {
      if (a.W && !b.__CE_patched) {
        b.__CE_patched = !0;

        for (var c = 0; c < a.ca.length; c++) {
          a.ca[c](b);
        }

        for (c = 0; c < a.g.length; c++) {
          a.g[c](b);
        }
      }
    }

    function Ag(a, b) {
      var c = [];
      vg(a, b, function (e) {
        return c.push(e);
      });

      for (b = 0; b < c.length; b++) {
        var d = c[b];
        1 === d.__CE_state ? a.connectedCallback(d) : Bg(a, d);
      }
    }

    function Cg(a, b) {
      var c = [];
      vg(a, b, function (e) {
        return c.push(e);
      });

      for (b = 0; b < c.length; b++) {
        var d = c[b];
        1 === d.__CE_state && a.disconnectedCallback(d);
      }
    }

    function Dg(a, b, c) {
      c = void 0 === c ? {} : c;

      var d = c.ob,
          e = c.upgrade || function (g) {
        return Bg(a, g);
      },
          f = [];

      vg(a, b, function (g) {
        a.W && zg(a, g);

        if ("link" === g.localName && "import" === g.getAttribute("rel")) {
          var h = g.import;
          h instanceof Node && (h.__CE_isImportDocument = !0, h.__CE_registry = document.__CE_registry);
          h && "complete" === h.readyState ? h.__CE_documentLoadHandled = !0 : g.addEventListener("load", function () {
            var k = g.import;

            if (!k.__CE_documentLoadHandled) {
              k.__CE_documentLoadHandled = !0;
              var l = new Set();
              d && (d.forEach(function (m) {
                return l.add(m);
              }), l.delete(k));
              Dg(a, k, {
                ob: l,
                upgrade: e
              });
            }
          });
        } else f.push(g);
      }, d);

      for (b = 0; b < f.length; b++) {
        e(f[b]);
      }
    }

    function Bg(a, b) {
      try {
        var c = b.ownerDocument,
            d = c.__CE_registry;
        var e = d && (c.defaultView || c.__CE_isImportDocument) ? Eg(d, b.localName) : void 0;

        if (e && void 0 === b.__CE_state) {
          e.constructionStack.push(b);

          try {
            try {
              if (new e.constructorFunction() !== b) throw Error("The custom element constructor did not produce the element being upgraded.");
            } finally {
              e.constructionStack.pop();
            }
          } catch (k) {
            throw b.__CE_state = 2, k;
          }

          b.__CE_state = 1;
          b.__CE_definition = e;

          if (e.attributeChangedCallback && b.hasAttributes()) {
            var f = e.observedAttributes;

            for (e = 0; e < f.length; e++) {
              var g = f[e],
                  h = b.getAttribute(g);
              null !== h && a.attributeChangedCallback(b, g, null, h, null);
            }
          }

          T(b) && a.connectedCallback(b);
        }
      } catch (k) {
        Fg(k);
      }
    }

    tg.prototype.connectedCallback = function (a) {
      var b = a.__CE_definition;
      if (b.connectedCallback) try {
        b.connectedCallback.call(a);
      } catch (c) {
        Fg(c);
      }
    };

    tg.prototype.disconnectedCallback = function (a) {
      var b = a.__CE_definition;
      if (b.disconnectedCallback) try {
        b.disconnectedCallback.call(a);
      } catch (c) {
        Fg(c);
      }
    };

    tg.prototype.attributeChangedCallback = function (a, b, c, d, e) {
      var f = a.__CE_definition;
      if (f.attributeChangedCallback && -1 < f.observedAttributes.indexOf(b)) try {
        f.attributeChangedCallback.call(a, b, c, d, e);
      } catch (g) {
        Fg(g);
      }
    };

    function Gg(a, b, c, d) {
      var e = b.__CE_registry;
      if (e && (null === d || "http://www.w3.org/1999/xhtml" === d) && (e = Eg(e, c))) try {
        var f = new e.constructorFunction();
        if (void 0 === f.__CE_state || void 0 === f.__CE_definition) throw Error("Failed to construct '" + c + "': The returned value was not constructed with the HTMLElement constructor.");
        if ("http://www.w3.org/1999/xhtml" !== f.namespaceURI) throw Error("Failed to construct '" + c + "': The constructed element's namespace must be the HTML namespace.");
        if (f.hasAttributes()) throw Error("Failed to construct '" + c + "': The constructed element must not have any attributes.");
        if (null !== f.firstChild) throw Error("Failed to construct '" + c + "': The constructed element must not have any children.");
        if (null !== f.parentNode) throw Error("Failed to construct '" + c + "': The constructed element must not have a parent node.");
        if (f.ownerDocument !== b) throw Error("Failed to construct '" + c + "': The constructed element's owner document is incorrect.");
        if (f.localName !== c) throw Error("Failed to construct '" + c + "': The constructed element's local name is incorrect.");
        return f;
      } catch (g) {
        return Fg(g), b = null === d ? Hf.call(b, c) : If.call(b, d, c), Object.setPrototypeOf(b, HTMLUnknownElement.prototype), b.__CE_state = 2, b.__CE_definition = void 0, zg(a, b), b;
      }
      b = null === d ? Hf.call(b, c) : If.call(b, d, c);
      zg(a, b);
      return b;
    }

    function Fg(a) {
      var b = a.message,
          c = a.sourceURL || a.fileName || "",
          d = a.line || a.lineNumber || 0,
          e = a.column || a.columnNumber || 0,
          f = void 0;
      void 0 === ErrorEvent.prototype.initErrorEvent ? f = new ErrorEvent("error", {
        cancelable: !0,
        message: b,
        filename: c,
        lineno: d,
        colno: e,
        error: a
      }) : (f = document.createEvent("ErrorEvent"), f.initErrorEvent("error", !1, !0, b, c, d), f.preventDefault = function () {
        Object.defineProperty(this, "defaultPrevented", {
          configurable: !0,
          get: function get() {
            return !0;
          }
        });
      });
      void 0 === f.error && Object.defineProperty(f, "error", {
        configurable: !0,
        enumerable: !0,
        get: function get() {
          return a;
        }
      });
      window.dispatchEvent(f);
      f.defaultPrevented || console.error(a);
    }

    function Hg() {
      var a = this;
      this.I = void 0;
      this.Ha = new Promise(function (b) {
        a.g = b;
      });
    }

    Hg.prototype.resolve = function (a) {
      if (this.I) throw Error("Already resolved.");
      this.I = a;
      this.g(a);
    };

    function Ig(a) {
      var b = document;
      this.X = void 0;
      this.S = a;
      this.g = b;
      Dg(this.S, this.g);
      "loading" === this.g.readyState && (this.X = new MutationObserver(this.h.bind(this)), this.X.observe(this.g, {
        childList: !0,
        subtree: !0
      }));
    }

    function Jg(a) {
      a.X && a.X.disconnect();
    }

    Ig.prototype.h = function (a) {
      var b = this.g.readyState;
      "interactive" !== b && "complete" !== b || Jg(this);

      for (b = 0; b < a.length; b++) {
        for (var c = a[b].addedNodes, d = 0; d < c.length; d++) {
          Dg(this.S, c[d]);
        }
      }
    };

    function U(a) {
      this.ka = new Map();
      this.la = new Map();
      this.Ca = new Map();
      this.ta = !1;
      this.wa = new Map();

      this.ja = function (b) {
        return b();
      };

      this.V = !1;
      this.ma = [];
      this.S = a;
      this.Da = a.nb ? new Ig(a) : void 0;
    }

    v = U.prototype;

    v.eb = function (a, b) {
      var c = this;
      if (!(b instanceof Function)) throw new TypeError("Custom element constructor getters must be functions.");
      Kg(this, a);
      this.ka.set(a, b);
      this.ma.push(a);
      this.V || (this.V = !0, this.ja(function () {
        return Lg(c);
      }));
    };

    v.define = function (a, b) {
      var c = this;
      if (!(b instanceof Function)) throw new TypeError("Custom element constructors must be functions.");
      Kg(this, a);
      Mg(this, a, b);
      this.ma.push(a);
      this.V || (this.V = !0, this.ja(function () {
        return Lg(c);
      }));
    };

    function Kg(a, b) {
      if (!og(b)) throw new SyntaxError("The element name '" + b + "' is not valid.");
      if (Eg(a, b)) throw Error("A custom element with name '" + (b + "' has already been defined."));
      if (a.ta) throw Error("A custom element is already being defined.");
    }

    function Mg(a, b, c) {
      a.ta = !0;
      var d;

      try {
        var e = c.prototype;
        if (!(e instanceof Object)) throw new TypeError("The custom element constructor's prototype is not an object.");

        var f = function f(m) {
          var q = e[m];
          if (void 0 !== q && !(q instanceof Function)) throw Error("The '" + m + "' callback must be a function.");
          return q;
        };

        var g = f("connectedCallback");
        var h = f("disconnectedCallback");
        var k = f("adoptedCallback");
        var l = (d = f("attributeChangedCallback")) && c.observedAttributes || [];
      } catch (m) {
        throw m;
      } finally {
        a.ta = !1;
      }

      c = {
        localName: b,
        constructorFunction: c,
        connectedCallback: g,
        disconnectedCallback: h,
        adoptedCallback: k,
        attributeChangedCallback: d,
        observedAttributes: l,
        constructionStack: []
      };
      a.la.set(b, c);
      a.Ca.set(c.constructorFunction, c);
      return c;
    }

    v.upgrade = function (a) {
      Dg(this.S, a);
    };

    function Lg(a) {
      if (!1 !== a.V) {
        a.V = !1;

        for (var b = [], c = a.ma, d = new Map(), e = 0; e < c.length; e++) {
          d.set(c[e], []);
        }

        Dg(a.S, document, {
          upgrade: function upgrade(k) {
            if (void 0 === k.__CE_state) {
              var l = k.localName,
                  m = d.get(l);
              m ? m.push(k) : a.la.has(l) && b.push(k);
            }
          }
        });

        for (e = 0; e < b.length; e++) {
          Bg(a.S, b[e]);
        }

        for (e = 0; e < c.length; e++) {
          for (var f = c[e], g = d.get(f), h = 0; h < g.length; h++) {
            Bg(a.S, g[h]);
          }

          (f = a.wa.get(f)) && f.resolve(void 0);
        }

        c.length = 0;
      }
    }

    v.get = function (a) {
      if (a = Eg(this, a)) return a.constructorFunction;
    };

    v.whenDefined = function (a) {
      if (!og(a)) return Promise.reject(new SyntaxError("'" + a + "' is not a valid custom element name."));
      var b = this.wa.get(a);
      if (b) return b.Ha;
      b = new Hg();
      this.wa.set(a, b);
      var c = this.la.has(a) || this.ka.has(a);
      a = -1 === this.ma.indexOf(a);
      c && a && b.resolve(void 0);
      return b.Ha;
    };

    v.polyfillWrapFlushCallback = function (a) {
      this.Da && Jg(this.Da);
      var b = this.ja;

      this.ja = function (c) {
        return a(function () {
          return b(c);
        });
      };
    };

    function Eg(a, b) {
      var c = a.la.get(b);
      if (c) return c;

      if (c = a.ka.get(b)) {
        a.ka.delete(b);

        try {
          return Mg(a, b, c());
        } catch (d) {
          Fg(d);
        }
      }
    }

    window.CustomElementRegistry = U;
    U.prototype.define = U.prototype.define;
    U.prototype.upgrade = U.prototype.upgrade;
    U.prototype.get = U.prototype.get;
    U.prototype.whenDefined = U.prototype.whenDefined;
    U.prototype.polyfillDefineLazy = U.prototype.eb;
    U.prototype.polyfillWrapFlushCallback = U.prototype.polyfillWrapFlushCallback;

    function Ng(a, b, c) {
      function d(e) {
        return function (f) {
          for (var g = [], h = 0; h < arguments.length; ++h) {
            g[h] = arguments[h];
          }

          h = [];

          for (var k = [], l = 0; l < g.length; l++) {
            var m = g[l];
            m instanceof Element && T(m) && k.push(m);
            if (m instanceof DocumentFragment) for (m = m.firstChild; m; m = m.nextSibling) {
              h.push(m);
            } else h.push(m);
          }

          e.apply(this, g);

          for (g = 0; g < k.length; g++) {
            Cg(a, k[g]);
          }

          if (T(this)) for (g = 0; g < h.length; g++) {
            k = h[g], k instanceof Element && Ag(a, k);
          }
        };
      }

      void 0 !== c.prepend && (b.prepend = d(c.prepend));
      void 0 !== c.append && (b.append = d(c.append));
    }

    function Og(a) {
      Document.prototype.createElement = function (b) {
        return Gg(a, this, b, null);
      };

      Document.prototype.importNode = function (b, c) {
        b = Jf.call(this, b, !!c);
        this.__CE_registry ? Dg(a, b) : yg(a, b);
        return b;
      };

      Document.prototype.createElementNS = function (b, c) {
        return Gg(a, this, c, b);
      };

      Ng(a, Document.prototype, {
        prepend: Kf,
        append: Lf
      });
    }

    function Pg(a) {
      function b(d) {
        return function (e) {
          for (var f = [], g = 0; g < arguments.length; ++g) {
            f[g] = arguments[g];
          }

          g = [];

          for (var h = [], k = 0; k < f.length; k++) {
            var l = f[k];
            l instanceof Element && T(l) && h.push(l);
            if (l instanceof DocumentFragment) for (l = l.firstChild; l; l = l.nextSibling) {
              g.push(l);
            } else g.push(l);
          }

          d.apply(this, f);

          for (f = 0; f < h.length; f++) {
            Cg(a, h[f]);
          }

          if (T(this)) for (f = 0; f < g.length; f++) {
            h = g[f], h instanceof Element && Ag(a, h);
          }
        };
      }

      var c = Element.prototype;
      void 0 !== fg && (c.before = b(fg));
      void 0 !== gg && (c.after = b(gg));
      void 0 !== hg && (c.replaceWith = function (d) {
        for (var e = [], f = 0; f < arguments.length; ++f) {
          e[f] = arguments[f];
        }

        f = [];

        for (var g = [], h = 0; h < e.length; h++) {
          var k = e[h];
          k instanceof Element && T(k) && g.push(k);
          if (k instanceof DocumentFragment) for (k = k.firstChild; k; k = k.nextSibling) {
            f.push(k);
          } else f.push(k);
        }

        h = T(this);
        hg.apply(this, e);

        for (e = 0; e < g.length; e++) {
          Cg(a, g[e]);
        }

        if (h) for (Cg(a, this), e = 0; e < f.length; e++) {
          g = f[e], g instanceof Element && Ag(a, g);
        }
      });
      void 0 !== ig && (c.remove = function () {
        var d = T(this);
        ig.call(this);
        d && Cg(a, this);
      });
    }

    function Qg(a) {
      function b(e, f) {
        Object.defineProperty(e, "innerHTML", {
          enumerable: f.enumerable,
          configurable: !0,
          get: f.get,
          set: function set(g) {
            var h = this,
                k = void 0;
            T(this) && (k = [], vg(a, this, function (q) {
              q !== h && k.push(q);
            }));
            f.set.call(this, g);
            if (k) for (var l = 0; l < k.length; l++) {
              var m = k[l];
              1 === m.__CE_state && a.disconnectedCallback(m);
            }
            this.ownerDocument.__CE_registry ? Dg(a, this) : yg(a, this);
            return g;
          }
        });
      }

      function c(e, f) {
        e.insertAdjacentElement = function (g, h) {
          var k = T(h);
          g = f.call(this, g, h);
          k && Cg(a, h);
          T(g) && Ag(a, h);
          return g;
        };
      }

      function d(e, f) {
        function g(h, k) {
          for (var l = []; h !== k; h = h.nextSibling) {
            l.push(h);
          }

          for (k = 0; k < l.length; k++) {
            Dg(a, l[k]);
          }
        }

        e.insertAdjacentHTML = function (h, k) {
          h = h.toLowerCase();

          if ("beforebegin" === h) {
            var l = this.previousSibling;
            f.call(this, h, k);
            g(l || this.parentNode.firstChild, this);
          } else if ("afterbegin" === h) l = this.firstChild, f.call(this, h, k), g(this.firstChild, l);else if ("beforeend" === h) l = this.lastChild, f.call(this, h, k), g(l || this.firstChild, null);else if ("afterend" === h) l = this.nextSibling, f.call(this, h, k), g(this.nextSibling, l);else throw new SyntaxError("The value provided (" + String(h) + ") is not one of 'beforebegin', 'afterbegin', 'beforeend', or 'afterend'.");
        };
      }

      Uf && (Element.prototype.attachShadow = function (e) {
        e = Uf.call(this, e);

        if (a.W && !e.__CE_patched) {
          e.__CE_patched = !0;

          for (var f = 0; f < a.ca.length; f++) {
            a.ca[f](e);
          }
        }

        return this.__CE_shadowRoot = e;
      });
      Vf && Vf.get ? b(Element.prototype, Vf) : kg && kg.get ? b(HTMLElement.prototype, kg) : xg(a, function (e) {
        b(e, {
          enumerable: !0,
          configurable: !0,
          get: function get() {
            return Of.call(this, !0).innerHTML;
          },
          set: function set(f) {
            var g = "template" === this.localName,
                h = g ? this.content : this,
                k = If.call(document, this.namespaceURI, this.localName);

            for (k.innerHTML = f; 0 < h.childNodes.length;) {
              Rf.call(h, h.childNodes[0]);
            }

            for (f = g ? k.content : k; 0 < f.childNodes.length;) {
              Pf.call(h, f.childNodes[0]);
            }
          }
        });
      });

      Element.prototype.setAttribute = function (e, f) {
        if (1 !== this.__CE_state) return Xf.call(this, e, f);
        var g = Wf.call(this, e);
        Xf.call(this, e, f);
        f = Wf.call(this, e);
        a.attributeChangedCallback(this, e, g, f, null);
      };

      Element.prototype.setAttributeNS = function (e, f, g) {
        if (1 !== this.__CE_state) return $f.call(this, e, f, g);
        var h = Zf.call(this, e, f);
        $f.call(this, e, f, g);
        g = Zf.call(this, e, f);
        a.attributeChangedCallback(this, f, h, g, e);
      };

      Element.prototype.removeAttribute = function (e) {
        if (1 !== this.__CE_state) return Yf.call(this, e);
        var f = Wf.call(this, e);
        Yf.call(this, e);
        null !== f && a.attributeChangedCallback(this, e, f, null, null);
      };

      Element.prototype.removeAttributeNS = function (e, f) {
        if (1 !== this.__CE_state) return ag.call(this, e, f);
        var g = Zf.call(this, e, f);
        ag.call(this, e, f);
        var h = Zf.call(this, e, f);
        g !== h && a.attributeChangedCallback(this, f, g, h, e);
      };

      lg ? c(HTMLElement.prototype, lg) : bg && c(Element.prototype, bg);
      mg ? d(HTMLElement.prototype, mg) : cg && d(Element.prototype, cg);
      Ng(a, Element.prototype, {
        prepend: dg,
        append: eg
      });
      Pg(a);
    }
    var Rg = {};

    function Sg(a) {
      function b() {
        var c = this.constructor;

        var d = document.__CE_registry.Ca.get(c);

        if (!d) throw Error("Failed to construct a custom element: The constructor was not registered with `customElements`.");
        var e = d.constructionStack;
        if (0 === e.length) return e = Hf.call(document, d.localName), Object.setPrototypeOf(e, c.prototype), e.__CE_state = 1, e.__CE_definition = d, zg(a, e), e;
        var f = e.length - 1,
            g = e[f];
        if (g === Rg) throw Error("Failed to construct '" + d.localName + "': This element was already constructed.");
        e[f] = Rg;
        Object.setPrototypeOf(g, c.prototype);
        zg(a, g);
        return g;
      }

      b.prototype = jg.prototype;
      Object.defineProperty(HTMLElement.prototype, "constructor", {
        writable: !0,
        configurable: !0,
        enumerable: !1,
        value: b
      });
      window.HTMLElement = b;
    }

    function Tg(a) {
      function b(c, d) {
        Object.defineProperty(c, "textContent", {
          enumerable: d.enumerable,
          configurable: !0,
          get: d.get,
          set: function set(e) {
            if (this.nodeType === Node.TEXT_NODE) d.set.call(this, e);else {
              var f = void 0;

              if (this.firstChild) {
                var g = this.childNodes,
                    h = g.length;

                if (0 < h && T(this)) {
                  f = Array(h);

                  for (var k = 0; k < h; k++) {
                    f[k] = g[k];
                  }
                }
              }

              d.set.call(this, e);
              if (f) for (e = 0; e < f.length; e++) {
                Cg(a, f[e]);
              }
            }
          }
        });
      }

      Node.prototype.insertBefore = function (c, d) {
        if (c instanceof DocumentFragment) {
          var e = qg(c);
          c = Qf.call(this, c, d);
          if (T(this)) for (d = 0; d < e.length; d++) {
            Ag(a, e[d]);
          }
          return c;
        }

        e = c instanceof Element && T(c);
        d = Qf.call(this, c, d);
        e && Cg(a, c);
        T(this) && Ag(a, c);
        return d;
      };

      Node.prototype.appendChild = function (c) {
        if (c instanceof DocumentFragment) {
          var d = qg(c);
          c = Pf.call(this, c);
          if (T(this)) for (var e = 0; e < d.length; e++) {
            Ag(a, d[e]);
          }
          return c;
        }

        d = c instanceof Element && T(c);
        e = Pf.call(this, c);
        d && Cg(a, c);
        T(this) && Ag(a, c);
        return e;
      };

      Node.prototype.cloneNode = function (c) {
        c = Of.call(this, !!c);
        this.ownerDocument.__CE_registry ? Dg(a, c) : yg(a, c);
        return c;
      };

      Node.prototype.removeChild = function (c) {
        var d = c instanceof Element && T(c),
            e = Rf.call(this, c);
        d && Cg(a, c);
        return e;
      };

      Node.prototype.replaceChild = function (c, d) {
        if (c instanceof DocumentFragment) {
          var e = qg(c);
          c = Sf.call(this, c, d);
          if (T(this)) for (Cg(a, d), d = 0; d < e.length; d++) {
            Ag(a, e[d]);
          }
          return c;
        }

        e = c instanceof Element && T(c);
        var f = Sf.call(this, c, d),
            g = T(this);
        g && Cg(a, d);
        e && Cg(a, c);
        g && Ag(a, c);
        return f;
      };

      Tf && Tf.get ? b(Node.prototype, Tf) : wg(a, function (c) {
        b(c, {
          enumerable: !0,
          configurable: !0,
          get: function get() {
            for (var d = [], e = this.firstChild; e; e = e.nextSibling) {
              e.nodeType !== Node.COMMENT_NODE && d.push(e.textContent);
            }

            return d.join("");
          },
          set: function set(d) {
            for (; this.firstChild;) {
              Rf.call(this, this.firstChild);
            }

            null != d && "" !== d && Pf.call(this, document.createTextNode(d));
          }
        });
      });
    }
    var ug = window.customElements;

    function Ug() {
      var a = new tg();
      Sg(a);
      Og(a);
      Ng(a, DocumentFragment.prototype, {
        prepend: Mf,
        append: Nf
      });
      Tg(a);
      Qg(a);
      a = new U(a);
      document.__CE_registry = a;
      Object.defineProperty(window, "customElements", {
        configurable: !0,
        enumerable: !0,
        value: a
      });
    }

    ug && !ug.forcePolyfill && "function" == typeof ug.define && "function" == typeof ug.get || Ug();
    window.__CE_installPolyfill = Ug;
    /*
    Copyright (c) 2017 The Polymer Project Authors. All rights reserved.
    This code may only be used under the BSD style license found at http://polymer.github.io/LICENSE.txt
    The complete set of authors may be found at http://polymer.github.io/AUTHORS.txt
    The complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt
    Code distributed by Google as part of the polymer project is also
    subject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt
    */

    function Vg() {
      this.end = this.start = 0;
      this.rules = this.parent = this.previous = null;
      this.cssText = this.parsedCssText = "";
      this.atRule = !1;
      this.type = 0;
      this.parsedSelector = this.selector = this.keyframesName = "";
    }

    function Wg(a) {
      var b = a = a.replace(Xg, "").replace(Yg, ""),
          c = new Vg();
      c.start = 0;
      c.end = b.length;

      for (var d = c, e = 0, f = b.length; e < f; e++) {
        if ("{" === b[e]) {
          d.rules || (d.rules = []);
          var g = d,
              h = g.rules[g.rules.length - 1] || null;
          d = new Vg();
          d.start = e + 1;
          d.parent = g;
          d.previous = h;
          g.rules.push(d);
        } else "}" === b[e] && (d.end = e + 1, d = d.parent || c);
      }

      return Zg(c, a);
    }

    function Zg(a, b) {
      var c = b.substring(a.start, a.end - 1);
      a.parsedCssText = a.cssText = c.trim();
      a.parent && (c = b.substring(a.previous ? a.previous.end : a.parent.start, a.start - 1), c = $g(c), c = c.replace(ah, " "), c = c.substring(c.lastIndexOf(";") + 1), c = a.parsedSelector = a.selector = c.trim(), a.atRule = 0 === c.indexOf("@"), a.atRule ? 0 === c.indexOf("@media") ? a.type = bh : c.match(ch) && (a.type = dh, a.keyframesName = a.selector.split(ah).pop()) : a.type = 0 === c.indexOf("--") ? eh : fh);
      if (c = a.rules) for (var d = 0, e = c.length, f = void 0; d < e && (f = c[d]); d++) {
        Zg(f, b);
      }
      return a;
    }

    function $g(a) {
      return a.replace(/\\([0-9a-f]{1,6})\s/gi, function (b, c) {
        b = c;

        for (c = 6 - b.length; c--;) {
          b = "0" + b;
        }

        return "\\" + b;
      });
    }

    function gh(a, b, c) {
      c = void 0 === c ? "" : c;
      var d = "";

      if (a.cssText || a.rules) {
        var e = a.rules,
            f;
        if (f = e) f = e[0], f = !(f && f.selector && 0 === f.selector.indexOf("--"));

        if (f) {
          f = 0;

          for (var g = e.length, h = void 0; f < g && (h = e[f]); f++) {
            d = gh(h, b, d);
          }
        } else b ? b = a.cssText : (b = a.cssText, b = b.replace(hh, "").replace(ih, ""), b = b.replace(jh, "").replace(kh, "")), (d = b.trim()) && (d = "  " + d + "\n");
      }

      d && (a.selector && (c += a.selector + " {\n"), c += d, a.selector && (c += "}\n\n"));
      return c;
    }

    var fh = 1,
        dh = 7,
        bh = 4,
        eh = 1E3,
        Xg = /\/\*[^*]*\*+([^/*][^*]*\*+)*\//gim,
        Yg = /@import[^;]*;/gim,
        hh = /(?:^[^;\-\s}]+)?--[^;{}]*?:[^{};]*?(?:[;\n]|$)/gim,
        ih = /(?:^[^;\-\s}]+)?--[^;{}]*?:[^{};]*?{[^}]*?}(?:[;\n]|$)?/gim,
        jh = /@apply\s*\(?[^);]*\)?\s*(?:[;\n]|$)?/gim,
        kh = /[^;:]*?:[^;]*?var\([^;]*\)(?:[;\n]|$)?/gim,
        ch = /^@[^\s]*keyframes/,
        ah = /\s+/g;
    var V = !(window.ShadyDOM && window.ShadyDOM.inUse),
        lh;

    function mh(a) {
      lh = a && a.shimcssproperties ? !1 : V || !(navigator.userAgent.match(/AppleWebKit\/601|Edge\/15/) || !window.CSS || !CSS.supports || !CSS.supports("box-shadow", "0 0 0 var(--foo)"));
    }

    var nh;
    window.ShadyCSS && void 0 !== window.ShadyCSS.cssBuild && (nh = window.ShadyCSS.cssBuild);
    var oh = !(!window.ShadyCSS || !window.ShadyCSS.disableRuntime);
    window.ShadyCSS && void 0 !== window.ShadyCSS.nativeCss ? lh = window.ShadyCSS.nativeCss : window.ShadyCSS ? (mh(window.ShadyCSS), window.ShadyCSS = void 0) : mh(window.WebComponents && window.WebComponents.flags);
    var X = lh;
    var ph = /(?:^|[;\s{]\s*)(--[\w-]*?)\s*:\s*(?:((?:'(?:\\'|.)*?'|"(?:\\"|.)*?"|\([^)]*?\)|[^};{])+)|\{([^}]*)\}(?:(?=[;\s}])|$))/gi,
        qh = /(?:^|\W+)@apply\s*\(?([^);\n]*)\)?/gi,
        rh = /(--[\w-]+)\s*([:,;)]|$)/gi,
        sh = /(animation\s*:)|(animation-name\s*:)/,
        th = /@media\s(.*)/,
        uh = /\{[^}]*\}/g;
    var vh = new Set();

    function wh(a, b) {
      if (!a) return "";
      "string" === typeof a && (a = Wg(a));
      b && xh(a, b);
      return gh(a, X);
    }

    function yh(a) {
      !a.__cssRules && a.textContent && (a.__cssRules = Wg(a.textContent));
      return a.__cssRules || null;
    }

    function zh(a) {
      return !!a.parent && a.parent.type === dh;
    }

    function xh(a, b, c, d) {
      if (a) {
        var e = !1,
            f = a.type;

        if (d && f === bh) {
          var g = a.selector.match(th);
          g && (window.matchMedia(g[1]).matches || (e = !0));
        }

        f === fh ? b(a) : c && f === dh ? c(a) : f === eh && (e = !0);
        if ((a = a.rules) && !e) for (e = 0, f = a.length, g = void 0; e < f && (g = a[e]); e++) {
          xh(g, b, c, d);
        }
      }
    }

    function Ah(a, b, c, d) {
      var e = document.createElement("style");
      b && e.setAttribute("scope", b);
      e.textContent = a;
      Ch(e, c, d);
      return e;
    }

    var Dh = null;

    function Eh(a) {
      a = document.createComment(" Shady DOM styles for " + a + " ");
      var b = document.head;
      b.insertBefore(a, (Dh ? Dh.nextSibling : null) || b.firstChild);
      return Dh = a;
    }

    function Ch(a, b, c) {
      b = b || document.head;
      b.insertBefore(a, c && c.nextSibling || b.firstChild);
      Dh ? a.compareDocumentPosition(Dh) === Node.DOCUMENT_POSITION_PRECEDING && (Dh = a) : Dh = a;
    }

    function Fh(a, b) {
      for (var c = 0, d = a.length; b < d; b++) {
        if ("(" === a[b]) c++;else if (")" === a[b] && 0 === --c) return b;
      }

      return -1;
    }

    function Gh(a, b) {
      var c = a.indexOf("var(");
      if (-1 === c) return b(a, "", "", "");
      var d = Fh(a, c + 3),
          e = a.substring(c + 4, d);
      c = a.substring(0, c);
      a = Gh(a.substring(d + 1), b);
      d = e.indexOf(",");
      return -1 === d ? b(c, e.trim(), "", a) : b(c, e.substring(0, d).trim(), e.substring(d + 1).trim(), a);
    }

    function Hh(a, b) {
      V ? a.setAttribute("class", b) : window.ShadyDOM.nativeMethods.setAttribute.call(a, "class", b);
    }

    var Ih = window.ShadyDOM && window.ShadyDOM.wrap || function (a) {
      return a;
    };

    function Jh(a) {
      var b = a.localName,
          c = "";
      b ? -1 < b.indexOf("-") || (c = b, b = a.getAttribute && a.getAttribute("is") || "") : (b = a.is, c = a.extends);
      return {
        is: b,
        ha: c
      };
    }

    function Kh(a) {
      for (var b = [], c = "", d = 0; 0 <= d && d < a.length; d++) {
        if ("(" === a[d]) {
          var e = Fh(a, d);
          c += a.slice(d, e + 1);
          d = e;
        } else "," === a[d] ? (b.push(c), c = "") : c += a[d];
      }

      c && b.push(c);
      return b;
    }

    function Lh(a) {
      if (void 0 !== nh) return nh;

      if (void 0 === a.__cssBuild) {
        var b = a.getAttribute("css-build");
        if (b) a.__cssBuild = b;else {
          a: {
            b = "template" === a.localName ? a.content.firstChild : a.firstChild;

            if (b instanceof Comment && (b = b.textContent.trim().split(":"), "css-build" === b[0])) {
              b = b[1];
              break a;
            }

            b = "";
          }

          if ("" !== b) {
            var c = "template" === a.localName ? a.content.firstChild : a.firstChild;
            c.parentNode.removeChild(c);
          }

          a.__cssBuild = b;
        }
      }

      return a.__cssBuild || "";
    }

    function Mh(a) {
      a = void 0 === a ? "" : a;
      return "" !== a && X ? V ? "shadow" === a : "shady" === a : !1;
    }

    function Nh() {}

    function Oh(a, b) {
      Ph(Qh, a, function (c) {
        Rh(c, b || "");
      });
    }

    function Ph(a, b, c) {
      b.nodeType === Node.ELEMENT_NODE && c(b);
      var d;
      "template" === b.localName ? d = (b.content || b._content || b).childNodes : d = b.children || b.childNodes;
      if (d) for (b = 0; b < d.length; b++) {
        Ph(a, d[b], c);
      }
    }

    function Rh(a, b, c) {
      if (b) if (a.classList) c ? (a.classList.remove("style-scope"), a.classList.remove(b)) : (a.classList.add("style-scope"), a.classList.add(b));else if (a.getAttribute) {
        var d = a.getAttribute("class");
        c ? d && (b = d.replace("style-scope", "").replace(b, ""), Hh(a, b)) : Hh(a, (d ? d + " " : "") + "style-scope " + b);
      }
    }

    function Sh(a, b, c) {
      Ph(Qh, a, function (d) {
        Rh(d, b, !0);
        Rh(d, c);
      });
    }

    function Th(a, b) {
      Ph(Qh, a, function (c) {
        Rh(c, b || "", !0);
      });
    }

    function Uh(a, b, c, d, e) {
      var f = Qh;
      e = void 0 === e ? "" : e;
      "" === e && (V || "shady" === (void 0 === d ? "" : d) ? e = wh(b, c) : (a = Jh(a), e = Vh(f, b, a.is, a.ha, c) + "\n\n"));
      return e.trim();
    }

    function Vh(a, b, c, d, e) {
      var f = Wh(c, d);
      c = c ? "." + c : "";
      return wh(b, function (g) {
        g.i || (g.selector = g.F = Xh(a, g, a.h, c, f), g.i = !0);
        e && e(g, c, f);
      });
    }

    function Wh(a, b) {
      return b ? "[is=" + a + "]" : a;
    }

    function Xh(a, b, c, d, e) {
      var f = Kh(b.selector);

      if (!zh(b)) {
        b = 0;

        for (var g = f.length, h = void 0; b < g && (h = f[b]); b++) {
          f[b] = c.call(a, h, d, e);
        }
      }

      return f.filter(function (k) {
        return !!k;
      }).join(",");
    }

    function Yh(a) {
      return a.replace(Zh, function (b, c, d) {
        -1 < d.indexOf("+") ? d = d.replace(/\+/g, "___") : -1 < d.indexOf("___") && (d = d.replace(/___/g, "+"));
        return ":" + c + "(" + d + ")";
      });
    }

    function $h(a) {
      for (var b = [], c; c = a.match(ai);) {
        var d = c.index,
            e = Fh(a, d);
        if (-1 === e) throw Error(c.input + " selector missing ')'");
        c = a.slice(d, e + 1);
        a = a.replace(c, "\uE000");
        b.push(c);
      }

      return {
        Ba: a,
        matches: b
      };
    }

    function bi(a, b) {
      var c = a.split("\uE000");
      return b.reduce(function (d, e, f) {
        return d + e + c[f + 1];
      }, c[0]);
    }

    Nh.prototype.h = function (a, b, c) {
      var d = !1;
      a = a.trim();
      var e = Zh.test(a);
      e && (a = a.replace(Zh, function (h, k, l) {
        return ":" + k + "(" + l.replace(/\s/g, "") + ")";
      }), a = Yh(a));
      var f = ai.test(a);

      if (f) {
        var g = $h(a);
        a = g.Ba;
        g = g.matches;
      }

      a = a.replace(ci, ":host $1");
      a = a.replace(di, function (h, k, l) {
        d || (h = ei(l, k, b, c), d = d || h.stop, k = h.Ua, l = h.value);
        return k + l;
      });
      f && (a = bi(a, g));
      e && (a = Yh(a));
      return a = a.replace(fi, function (h, k, l, m) {
        return '[dir="' + l + '"] ' + k + m + ", " + k + '[dir="' + l + '"]' + m;
      });
    };

    function ei(a, b, c, d) {
      var e = a.indexOf("::slotted");
      0 <= a.indexOf(":host") ? a = gi(a, d) : 0 !== e && (a = c ? hi(a, c) : a);
      c = !1;
      0 <= e && (b = "", c = !0);

      if (c) {
        var f = !0;
        c && (a = a.replace(ii, function (g, h) {
          return " > " + h;
        }));
      }

      return {
        value: a,
        Ua: b,
        stop: f
      };
    }

    function hi(a, b) {
      a = a.split(/(\[.+?\])/);

      for (var c = [], d = 0; d < a.length; d++) {
        if (1 === d % 2) c.push(a[d]);else {
          var e = a[d];
          if ("" !== e || d !== a.length - 1) e = e.split(":"), e[0] += b, c.push(e.join(":"));
        }
      }

      return c.join("");
    }

    function gi(a, b) {
      var c = a.match(ji);
      return (c = c && c[2].trim() || "") ? c[0].match(ki) ? a.replace(ji, function (d, e, f) {
        return b + f;
      }) : c.split(ki)[0] === b ? c : "should_not_match" : a.replace(":host", b);
    }

    function li(a) {
      ":root" === a.selector && (a.selector = "html");
    }

    Nh.prototype.i = function (a) {
      return a.match(":host") ? "" : a.match("::slotted") ? this.h(a, ":not(.style-scope)") : hi(a.trim(), ":not(.style-scope)");
    };

    ea.Object.defineProperties(Nh.prototype, {
      g: {
        configurable: !0,
        enumerable: !0,
        get: function get() {
          return "style-scope";
        }
      }
    });
    var Zh = /:(nth[-\w]+)\(([^)]+)\)/,
        di = /(^|[\s>+~]+)((?:\[.+?\]|[^\s>+~=[])+)/g,
        ki = /[[.:#*]/,
        ci = /^(::slotted)/,
        ji = /(:host)(?:\(((?:\([^)(]*\)|[^)(]*)+?)\))/,
        ii = /(?:::slotted)(?:\(((?:\([^)(]*\)|[^)(]*)+?)\))/,
        fi = /(.*):dir\((?:(ltr|rtl))\)(.*)/,
        ai = /:(?:matches|any|-(?:webkit|moz)-any)/,
        Qh = new Nh();

    function mi(a, b, c, d, e) {
      this.M = a || null;
      this.h = b || null;
      this.za = c || [];
      this.K = null;
      this.cssBuild = e || "";
      this.ha = d || "";
      this.g = this.L = this.R = null;
    }

    function ni(a) {
      return a ? a.__styleInfo : null;
    }

    function oi(a, b) {
      return a.__styleInfo = b;
    }

    mi.prototype.i = function () {
      return this.M;
    };

    mi.prototype._getStyleRules = mi.prototype.i;

    function pi(a) {
      var b = this.matches || this.matchesSelector || this.mozMatchesSelector || this.msMatchesSelector || this.oMatchesSelector || this.webkitMatchesSelector;
      return b && b.call(this, a);
    }

    var qi = /:host\s*>\s*/,
        ri = navigator.userAgent.match("Trident");

    function si() {}

    function ti(a) {
      var b = {},
          c = [],
          d = 0;
      xh(a, function (f) {
        ui(f);
        f.index = d++;
        f = f.D.cssText;

        for (var g; g = rh.exec(f);) {
          var h = g[1];
          ":" !== g[2] && (b[h] = !0);
        }
      }, function (f) {
        c.push(f);
      });
      a.h = c;
      a = [];

      for (var e in b) {
        a.push(e);
      }

      return a;
    }

    function ui(a) {
      if (!a.D) {
        var b = {},
            c = {};
        vi(a, c) && (b.P = c, a.rules = null);
        b.cssText = a.parsedCssText.replace(uh, "").replace(ph, "");
        a.D = b;
      }
    }

    function vi(a, b) {
      var c = a.D;

      if (c) {
        if (c.P) return Object.assign(b, c.P), !0;
      } else {
        c = a.parsedCssText;

        for (var d; a = ph.exec(c);) {
          d = (a[2] || a[3]).trim();
          if ("inherit" !== d || "unset" !== d) b[a[1].trim()] = d;
          d = !0;
        }

        return d;
      }
    }

    function wi(a, b, c) {
      b && (b = 0 <= b.indexOf(";") ? xi(a, b, c) : Gh(b, function (d, e, f, g) {
        if (!e) return d + g;
        (e = wi(a, c[e], c)) && "initial" !== e ? "apply-shim-inherit" === e && (e = "inherit") : e = wi(a, c[f] || f, c) || f;
        return d + (e || "") + g;
      }));
      return b && b.trim() || "";
    }

    function xi(a, b, c) {
      b = b.split(";");

      for (var d = 0, e, f; d < b.length; d++) {
        if (e = b[d]) {
          qh.lastIndex = 0;
          if (f = qh.exec(e)) e = wi(a, c[f[1]], c);else if (f = e.indexOf(":"), -1 !== f) {
            var g = e.substring(f);
            g = g.trim();
            g = wi(a, g, c) || g;
            e = e.substring(0, f) + g;
          }
          b[d] = e && e.lastIndexOf(";") === e.length - 1 ? e.slice(0, -1) : e || "";
        }
      }

      return b.join(";");
    }

    function yi(a, b) {
      var c = {},
          d = [];
      xh(a, function (e) {
        e.D || ui(e);
        var f = e.F || e.parsedSelector;
        b && e.D.P && f && pi.call(b, f) && (vi(e, c), e = e.index, f = parseInt(e / 32, 10), d[f] = (d[f] || 0) | 1 << e % 32);
      }, null, !0);
      return {
        P: c,
        key: d
      };
    }

    function zi(a, b, c, d) {
      b.D || ui(b);

      if (b.D.P) {
        var e = Jh(a);
        a = e.is;
        e = e.ha;
        e = a ? Wh(a, e) : "html";
        var f = b.parsedSelector;
        var g = !!f.match(qi) || "html" === e && -1 < f.indexOf("html");
        var h = 0 === f.indexOf(":host") && !g;
        "shady" === c && (g = f === e + " > *." + e || -1 !== f.indexOf("html"), h = !g && 0 === f.indexOf(e));
        if (g || h) c = e, h && (b.F || (b.F = Xh(Qh, b, Qh.h, a ? "." + a : "", e)), c = b.F || e), g && "html" === e && (c = b.F || b.O), d({
          Ba: c,
          ab: h,
          qb: g
        });
      }
    }

    function Ai(a, b, c) {
      var d = {},
          e = {};
      xh(b, function (f) {
        zi(a, f, c, function (g) {
          pi.call(a._element || a, g.Ba) && (g.ab ? vi(f, d) : vi(f, e));
        });
      }, null, !0);
      return {
        hb: e,
        Za: d
      };
    }

    function Bi(a, b, c, d) {
      var e = Jh(b),
          f = Wh(e.is, e.ha),
          g = new RegExp("(?:^|[^.#[:])" + (b.extends ? "\\" + f.slice(0, -1) + "\\]" : f) + "($|[.:[\\s>+~])"),
          h = ni(b);
      e = h.M;
      h = h.cssBuild;
      var k = Ci(e, d);
      return Uh(b, e, function (l) {
        var m = "";
        l.D || ui(l);
        l.D.cssText && (m = xi(a, l.D.cssText, c));
        l.cssText = m;

        if (!V && !zh(l) && l.cssText) {
          var q = m = l.cssText;
          null == l.Ia && (l.Ia = sh.test(m));
          if (l.Ia) if (null == l.pa) {
            l.pa = [];

            for (var H in k) {
              q = k[H], q = q(m), m !== q && (m = q, l.pa.push(H));
            }
          } else {
            for (H = 0; H < l.pa.length; ++H) {
              q = k[l.pa[H]], m = q(m);
            }

            q = m;
          }
          l.cssText = q;
          l.F = l.F || l.selector;
          m = "." + d;
          H = Kh(l.F);
          q = 0;

          for (var C = H.length, t = void 0; q < C && (t = H[q]); q++) {
            H[q] = t.match(g) ? t.replace(f, m) : m + " " + t;
          }

          l.selector = H.join(",");
        }
      }, h);
    }

    function Ci(a, b) {
      a = a.h;
      var c = {};
      if (!V && a) for (var d = 0, e = a[d]; d < a.length; e = a[++d]) {
        var f = e,
            g = b;
        f.u = new RegExp("\\b" + f.keyframesName + "(?!\\B|-)", "g");
        f.g = f.keyframesName + "-" + g;
        f.F = f.F || f.selector;
        f.selector = f.F.replace(f.keyframesName, f.g);
        c[e.keyframesName] = Di(e);
      }
      return c;
    }

    function Di(a) {
      return function (b) {
        return b.replace(a.u, a.g);
      };
    }

    function Ei(a, b) {
      var c = Fi,
          d = yh(a);
      a.textContent = wh(d, function (e) {
        var f = e.cssText = e.parsedCssText;
        e.D && e.D.cssText && (f = f.replace(hh, "").replace(ih, ""), e.cssText = xi(c, f, b));
      });
    }

    ea.Object.defineProperties(si.prototype, {
      g: {
        configurable: !0,
        enumerable: !0,
        get: function get() {
          return "x-scope";
        }
      }
    });
    var Fi = new si();
    var Gi = {};

    function Ji() {
      this.cache = {};
    }

    Ji.prototype.store = function (a, b, c, d) {
      var e = this.cache[a] || [];
      e.push({
        P: b,
        styleElement: c,
        L: d
      });
      100 < e.length && e.shift();
      this.cache[a] = e;
    };

    function Ki() {}

    var Li = new RegExp(Qh.g + "\\s*([^\\s]*)");

    function Mi(a) {
      return (a = (a.classList && a.classList.value ? a.classList.value : a.getAttribute("class") || "").match(Li)) ? a[1] : "";
    }

    function Ni(a) {
      var b = Ih(a).getRootNode();
      return b === a || b === a.ownerDocument ? "" : (a = b.host) ? Jh(a).is : "";
    }

    function Oi(a) {
      for (var b = 0; b < a.length; b++) {
        var c = a[b];
        if (c.target !== document.documentElement && c.target !== document.head) for (var d = 0; d < c.addedNodes.length; d++) {
          var e = c.addedNodes[d];

          if (e.nodeType === Node.ELEMENT_NODE) {
            var f = e.getRootNode(),
                g = Mi(e);
            if (g && f === e.ownerDocument && ("style" !== e.localName && "template" !== e.localName || "" === Lh(e))) Th(e, g);else if (f instanceof ShadowRoot) for (f = Ni(e), f !== g && Sh(e, g, f), e = window.ShadyDOM.nativeMethods.querySelectorAll.call(e, ":not(." + Qh.g + ")"), g = 0; g < e.length; g++) {
              f = e[g];
              var h = Ni(f);
              h && Rh(f, h);
            }
          }
        }
      }
    }

    if (!(V || window.ShadyDOM && window.ShadyDOM.handlesDynamicScoping)) {
      var Pi = new MutationObserver(Oi),
          Qi = function Qi(a) {
        Pi.observe(a, {
          childList: !0,
          subtree: !0
        });
      };

      if (window.customElements && !window.customElements.polyfillWrapFlushCallback) Qi(document);else {
        var Ri = function Ri() {
          Qi(document.body);
        };

        window.HTMLImports ? window.HTMLImports.whenReady(Ri) : requestAnimationFrame(function () {
          if ("loading" === document.readyState) {
            var a = function a() {
              Ri();
              document.removeEventListener("readystatechange", a);
            };

            document.addEventListener("readystatechange", a);
          } else Ri();
        });
      }

      Ki = function Ki() {
        Oi(Pi.takeRecords());
      };
    }
    var Si = {};
    var Ti = Promise.resolve();

    function Ui(a) {
      if (a = Si[a]) a._applyShimCurrentVersion = a._applyShimCurrentVersion || 0, a._applyShimValidatingVersion = a._applyShimValidatingVersion || 0, a._applyShimNextVersion = (a._applyShimNextVersion || 0) + 1;
    }

    function Vi(a) {
      return a._applyShimCurrentVersion === a._applyShimNextVersion;
    }

    function Wi(a) {
      a._applyShimValidatingVersion = a._applyShimNextVersion;
      a._validating || (a._validating = !0, Ti.then(function () {
        a._applyShimCurrentVersion = a._applyShimNextVersion;
        a._validating = !1;
      }));
    }
    var Xi = {},
        Yi = new Ji();

    function Y() {
      this.da = {};
      this.i = document.documentElement;
      var a = new Vg();
      a.rules = [];
      this.u = oi(this.i, new mi(a));
      this.O = !1;
      this.g = this.h = null;
    }

    v = Y.prototype;

    v.flush = function () {
      Ki();
    };

    v.Xa = function (a) {
      return yh(a);
    };

    v.lb = function (a) {
      return wh(a);
    };

    v.prepareTemplate = function (a, b, c) {
      this.prepareTemplateDom(a, b);
      this.prepareTemplateStyles(a, b, c);
    };

    v.prepareTemplateStyles = function (a, b, c) {
      if (!a._prepared && !oh) {
        V || Gi[b] || (Gi[b] = Eh(b));
        a._prepared = !0;
        a.name = b;
        a.extends = c;
        Si[b] = a;
        var d = Lh(a),
            e = Mh(d);
        c = {
          is: b,
          extends: c
        };

        for (var f = [], g = a.content.querySelectorAll("style"), h = 0; h < g.length; h++) {
          var k = g[h];

          if (k.hasAttribute("shady-unscoped")) {
            if (!V) {
              var l = k.textContent;

              if (!vh.has(l)) {
                vh.add(l);
                var m = document.createElement("style");
                m.setAttribute("shady-unscoped", "");
                m.textContent = l;
                document.head.appendChild(m);
              }

              k.parentNode.removeChild(k);
            }
          } else f.push(k.textContent), k.parentNode.removeChild(k);
        }

        f = f.join("").trim() + (Xi[b] || "");
        Zi(this);

        if (!e) {
          if (g = !d) g = qh.test(f) || ph.test(f), qh.lastIndex = 0, ph.lastIndex = 0;
          h = Wg(f);
          g && X && this.h && this.h.transformRules(h, b);
          a._styleAst = h;
        }

        g = [];
        X || (g = ti(a._styleAst));
        if (!g.length || X) h = V ? a.content : null, b = Gi[b] || null, d = Uh(c, a._styleAst, null, d, e ? f : ""), d = d.length ? Ah(d, c.is, h, b) : null, a._style = d;
        a.g = g;
      }
    };

    v.fb = function (a, b) {
      Xi[b] = a.join(" ");
    };

    v.prepareTemplateDom = function (a, b) {
      if (!oh) {
        var c = Lh(a);
        V || "shady" === c || a._domPrepared || (a._domPrepared = !0, Oh(a.content, b));
      }
    };

    function $i(a) {
      var b = Jh(a),
          c = b.is;
      b = b.ha;
      var d = Gi[c] || null,
          e = Si[c];

      if (e) {
        c = e._styleAst;
        var f = e.g;
        e = Lh(e);
        b = new mi(c, d, f, b, e);
        oi(a, b);
        return b;
      }
    }

    function aj(a) {
      !a.g && window.ShadyCSS && window.ShadyCSS.CustomStyleInterface && (a.g = window.ShadyCSS.CustomStyleInterface, a.g.transformCallback = function (b) {
        a.Ma(b);
      }, a.g.validateCallback = function () {
        requestAnimationFrame(function () {
          (a.g.enqueued || a.O) && a.flushCustomStyles();
        });
      });
    }

    function Zi(a) {
      if (!a.h && window.ShadyCSS && window.ShadyCSS.ApplyShim) {
        a.h = window.ShadyCSS.ApplyShim;
        a.h.invalidCallback = Ui;
        var b = !0;
      } else b = !1;

      aj(a);
      return b;
    }

    v.flushCustomStyles = function () {
      if (!oh) {
        var a = Zi(this);

        if (this.g) {
          var b = this.g.processStyles();

          if ((a || this.g.enqueued) && !Mh(this.u.cssBuild)) {
            if (X) {
              if (!this.u.cssBuild) for (a = 0; a < b.length; a++) {
                var c = this.g.getStyleForCustomStyle(b[a]);

                if (c && X && this.h) {
                  var d = yh(c);
                  Zi(this);
                  this.h.transformRules(d);
                  c.textContent = wh(d);
                }
              }
            } else {
              bj(this, b);
              cj(this, this.i, this.u);

              for (a = 0; a < b.length; a++) {
                (c = this.g.getStyleForCustomStyle(b[a])) && Ei(c, this.u.R);
              }

              this.O && this.styleDocument();
            }

            this.g.enqueued = !1;
          }
        }
      }
    };

    function bj(a, b) {
      b = b.map(function (c) {
        return a.g.getStyleForCustomStyle(c);
      }).filter(function (c) {
        return !!c;
      });
      b.sort(function (c, d) {
        c = d.compareDocumentPosition(c);
        return c & Node.DOCUMENT_POSITION_FOLLOWING ? 1 : c & Node.DOCUMENT_POSITION_PRECEDING ? -1 : 0;
      });
      a.u.M.rules = b.map(function (c) {
        return yh(c);
      });
    }

    v.styleElement = function (a, b) {
      if (oh) {
        if (b) {
          ni(a) || oi(a, new mi(null));
          var c = ni(a);
          c.K = c.K || {};
          Object.assign(c.K, b);
          dj(this, a, c);
        }
      } else if (c = ni(a) || $i(a)) if (a !== this.i && (this.O = !0), b && (c.K = c.K || {}, Object.assign(c.K, b)), X) dj(this, a, c);else if (this.flush(), cj(this, a, c), c.za && c.za.length) {
        b = Jh(a).is;
        var d;

        a: {
          if (d = Yi.cache[b]) for (var e = d.length - 1; 0 <= e; e--) {
            var f = d[e];

            b: {
              var g = c.za;

              for (var h = 0; h < g.length; h++) {
                var k = g[h];

                if (f.P[k] !== c.R[k]) {
                  g = !1;
                  break b;
                }
              }

              g = !0;
            }

            if (g) {
              d = f;
              break a;
            }
          }
          d = void 0;
        }

        g = d ? d.styleElement : null;
        e = c.L;
        (f = d && d.L) || (f = this.da[b] = (this.da[b] || 0) + 1, f = b + "-" + f);
        c.L = f;
        f = c.L;
        h = Fi;
        h = g ? g.textContent || "" : Bi(h, a, c.R, f);
        k = ni(a);
        var l = k.g;
        l && !V && l !== g && (l._useCount--, 0 >= l._useCount && l.parentNode && l.parentNode.removeChild(l));
        V ? k.g ? (k.g.textContent = h, g = k.g) : h && (g = Ah(h, f, a.shadowRoot, k.h)) : g ? g.parentNode || (ri && -1 < h.indexOf("@media") && (g.textContent = h), Ch(g, null, k.h)) : h && (g = Ah(h, f, null, k.h));
        g && (g._useCount = g._useCount || 0, k.g != g && g._useCount++, k.g = g);
        f = g;
        V || (g = c.L, k = h = a.getAttribute("class") || "", e && (k = h.replace(new RegExp("\\s*x-scope\\s*" + e + "\\s*", "g"), " ")), k += (k ? " " : "") + "x-scope " + g, h !== k && Hh(a, k));
        d || Yi.store(b, c.R, f, c.L);
      }
    };

    function dj(a, b, c) {
      var d = Jh(b).is;

      if (c.K) {
        var e = c.K,
            f;

        for (f in e) {
          null === f ? b.style.removeProperty(f) : b.style.setProperty(f, e[f]);
        }
      }

      e = Si[d];

      if (!(!e && b !== a.i || e && "" !== Lh(e)) && e && e._style && !Vi(e)) {
        if (Vi(e) || e._applyShimValidatingVersion !== e._applyShimNextVersion) Zi(a), a.h && a.h.transformRules(e._styleAst, d), e._style.textContent = Uh(b, c.M), Wi(e);
        V && (a = b.shadowRoot) && (a = a.querySelector("style")) && (a.textContent = Uh(b, c.M));
        c.M = e._styleAst;
      }
    }

    function ej(a, b) {
      return (b = Ih(b).getRootNode().host) ? ni(b) || $i(b) ? b : ej(a, b) : a.i;
    }

    function cj(a, b, c) {
      var d = ej(a, b),
          e = ni(d),
          f = e.R;
      d === a.i || f || (cj(a, d, e), f = e.R);
      a = Object.create(f || null);
      d = Ai(b, c.M, c.cssBuild);
      b = yi(e.M, b).P;
      Object.assign(a, d.Za, b, d.hb);
      b = c.K;

      for (var g in b) {
        if ((e = b[g]) || 0 === e) a[g] = e;
      }

      g = Fi;
      b = Object.getOwnPropertyNames(a);

      for (e = 0; e < b.length; e++) {
        d = b[e], a[d] = wi(g, a[d], a);
      }

      c.R = a;
    }

    v.styleDocument = function (a) {
      this.styleSubtree(this.i, a);
    };

    v.styleSubtree = function (a, b) {
      var c = Ih(a),
          d = c.shadowRoot,
          e = a === this.i;
      (d || e) && this.styleElement(a, b);
      if (a = e ? c : d) for (a = Array.from(a.querySelectorAll("*")).filter(function (f) {
        return Ih(f).shadowRoot;
      }), b = 0; b < a.length; b++) {
        this.styleSubtree(a[b]);
      }
    };

    v.Ma = function (a) {
      var b = this,
          c = Lh(a);
      c !== this.u.cssBuild && (this.u.cssBuild = c);

      if (!Mh(c)) {
        var d = yh(a);
        xh(d, function (e) {
          if (V) li(e);else {
            var f = Qh;
            e.selector = e.parsedSelector;
            li(e);
            e.selector = e.F = Xh(f, e, f.i, void 0, void 0);
          }
          X && "" === c && (Zi(b), b.h && b.h.transformRule(e));
        });
        X ? a.textContent = wh(d) : this.u.M.rules.push(d);
      }
    };

    v.getComputedStyleValue = function (a, b) {
      var c;
      X || (c = (ni(a) || ni(ej(this, a))).R[b]);
      return (c = c || window.getComputedStyle(a).getPropertyValue(b)) ? c.trim() : "";
    };

    v.kb = function (a, b) {
      var c = Ih(a).getRootNode();
      b = b ? ("string" === typeof b ? b : String(b)).split(/\s/) : [];
      c = c.host && c.host.localName;

      if (!c) {
        var d = a.getAttribute("class");

        if (d) {
          d = d.split(/\s/);

          for (var e = 0; e < d.length; e++) {
            if (d[e] === Qh.g) {
              c = d[e + 1];
              break;
            }
          }
        }
      }

      c && b.push(Qh.g, c);
      X || (c = ni(a)) && c.L && b.push(Fi.g, c.L);
      Hh(a, b.join(" "));
    };

    v.Ta = function (a) {
      return ni(a);
    };

    v.jb = function (a, b) {
      Rh(a, b);
    };

    v.mb = function (a, b) {
      Rh(a, b, !0);
    };

    v.ib = function (a) {
      return Ni(a);
    };

    v.Va = function (a) {
      return Mi(a);
    };

    Y.prototype.flush = Y.prototype.flush;
    Y.prototype.prepareTemplate = Y.prototype.prepareTemplate;
    Y.prototype.styleElement = Y.prototype.styleElement;
    Y.prototype.styleDocument = Y.prototype.styleDocument;
    Y.prototype.styleSubtree = Y.prototype.styleSubtree;
    Y.prototype.getComputedStyleValue = Y.prototype.getComputedStyleValue;
    Y.prototype.setElementClass = Y.prototype.kb;
    Y.prototype._styleInfoForNode = Y.prototype.Ta;
    Y.prototype.transformCustomStyleForDocument = Y.prototype.Ma;
    Y.prototype.getStyleAst = Y.prototype.Xa;
    Y.prototype.styleAstToString = Y.prototype.lb;
    Y.prototype.flushCustomStyles = Y.prototype.flushCustomStyles;
    Y.prototype.scopeNode = Y.prototype.jb;
    Y.prototype.unscopeNode = Y.prototype.mb;
    Y.prototype.scopeForNode = Y.prototype.ib;
    Y.prototype.currentScopeForNode = Y.prototype.Va;
    Y.prototype.prepareAdoptedCssText = Y.prototype.fb;
    Object.defineProperties(Y.prototype, {
      nativeShadow: {
        get: function get() {
          return V;
        }
      },
      nativeCss: {
        get: function get() {
          return X;
        }
      }
    });
    var Z = new Y(),
        fj,
        gj;
    window.ShadyCSS && (fj = window.ShadyCSS.ApplyShim, gj = window.ShadyCSS.CustomStyleInterface);
    window.ShadyCSS = {
      ScopingShim: Z,
      prepareTemplate: function prepareTemplate(a, b, c) {
        Z.flushCustomStyles();
        Z.prepareTemplate(a, b, c);
      },
      prepareTemplateDom: function prepareTemplateDom(a, b) {
        Z.prepareTemplateDom(a, b);
      },
      prepareTemplateStyles: function prepareTemplateStyles(a, b, c) {
        Z.flushCustomStyles();
        Z.prepareTemplateStyles(a, b, c);
      },
      styleSubtree: function styleSubtree(a, b) {
        Z.flushCustomStyles();
        Z.styleSubtree(a, b);
      },
      styleElement: function styleElement(a) {
        Z.flushCustomStyles();
        Z.styleElement(a);
      },
      styleDocument: function styleDocument(a) {
        Z.flushCustomStyles();
        Z.styleDocument(a);
      },
      flushCustomStyles: function flushCustomStyles() {
        Z.flushCustomStyles();
      },
      getComputedStyleValue: function getComputedStyleValue(a, b) {
        return Z.getComputedStyleValue(a, b);
      },
      nativeCss: X,
      nativeShadow: V,
      cssBuild: nh,
      disableRuntime: oh
    };
    fj && (window.ShadyCSS.ApplyShim = fj);
    gj && (window.ShadyCSS.CustomStyleInterface = gj);

    (function (a) {
      function b(t) {
        "" == t && (f.call(this), this.m = !0);
        return t.toLowerCase();
      }

      function c(t) {
        var F = t.charCodeAt(0);
        return 32 < F && 127 > F && -1 == [34, 35, 60, 62, 63, 96].indexOf(F) ? t : encodeURIComponent(t);
      }

      function d(t) {
        var F = t.charCodeAt(0);
        return 32 < F && 127 > F && -1 == [34, 35, 60, 62, 96].indexOf(F) ? t : encodeURIComponent(t);
      }

      function e(t, F, E) {
        function M(fa) {
        }

        var y = F || "scheme start",
            W = 0,
            w = "",
            ta = !1,
            ha = !1;

        a: for (; (void 0 != t[W - 1] || 0 == W) && !this.m;) {
          var n = t[W];

          switch (y) {
            case "scheme start":
              if (n && q.test(n)) w += n.toLowerCase(), y = "scheme";else if (F) {
                break a;
              } else {
                w = "";
                y = "no scheme";
                continue;
              }
              break;

            case "scheme":
              if (n && H.test(n)) w += n.toLowerCase();else if (":" == n) {
                this.l = w;
                w = "";
                if (F) break a;
                void 0 !== l[this.l] && (this.G = !0);
                y = "file" == this.l ? "relative" : this.G && E && E.l == this.l ? "relative or authority" : this.G ? "authority first slash" : "scheme data";
              } else if (F) {
                break a;
              } else {
                w = "";
                W = 0;
                y = "no scheme";
                continue;
              }
              break;

            case "scheme data":
              "?" == n ? (this.A = "?", y = "query") : "#" == n ? (this.C = "#", y = "fragment") : void 0 != n && "\t" != n && "\n" != n && "\r" != n && (this.va += c(n));
              break;

            case "no scheme":
              if (E && void 0 !== l[E.l]) {
                y = "relative";
                continue;
              } else f.call(this), this.m = !0;

              break;

            case "relative or authority":
              if ("/" == n && "/" == t[W + 1]) y = "authority ignore slashes";else {
                y = "relative";
                continue;
              }
              break;

            case "relative":
              this.G = !0;
              "file" != this.l && (this.l = E.l);

              if (void 0 == n) {
                this.o = E.o;
                this.v = E.v;
                this.s = E.s.slice();
                this.A = E.A;
                this.B = E.B;
                this.j = E.j;
                break a;
              } else if ("/" == n || "\\" == n) y = "relative slash";else if ("?" == n) this.o = E.o, this.v = E.v, this.s = E.s.slice(), this.A = "?", this.B = E.B, this.j = E.j, y = "query";else if ("#" == n) this.o = E.o, this.v = E.v, this.s = E.s.slice(), this.A = E.A, this.C = "#", this.B = E.B, this.j = E.j, y = "fragment";else {
                y = t[W + 1];
                var J = t[W + 2];
                if ("file" != this.l || !q.test(n) || ":" != y && "|" != y || void 0 != J && "/" != J && "\\" != J && "?" != J && "#" != J) this.o = E.o, this.v = E.v, this.B = E.B, this.j = E.j, this.s = E.s.slice(), this.s.pop();
                y = "relative path";
                continue;
              }

              break;

            case "relative slash":
              if ("/" == n || "\\" == n) y = "file" == this.l ? "file host" : "authority ignore slashes";else {
                "file" != this.l && (this.o = E.o, this.v = E.v, this.B = E.B, this.j = E.j);
                y = "relative path";
                continue;
              }
              break;

            case "authority first slash":
              if ("/" == n) y = "authority second slash";else {
                y = "authority ignore slashes";
                continue;
              }
              break;

            case "authority second slash":
              y = "authority ignore slashes";

              if ("/" != n) {
                continue;
              }

              break;

            case "authority ignore slashes":
              if ("/" != n && "\\" != n) {
                y = "authority";
                continue;
              }

              break;

            case "authority":
              if ("@" == n) {
                ta && (w += "%40");
                ta = !0;

                for (n = 0; n < w.length; n++) {
                  J = w[n], "\t" == J || "\n" == J || "\r" == J ? M() : ":" == J && null === this.j ? this.j = "" : (J = c(J), null !== this.j ? this.j += J : this.B += J);
                }

                w = "";
              } else if (void 0 == n || "/" == n || "\\" == n || "?" == n || "#" == n) {
                W -= w.length;
                w = "";
                y = "host";
                continue;
              } else w += n;

              break;

            case "file host":
              if (void 0 == n || "/" == n || "\\" == n || "?" == n || "#" == n) {
                2 != w.length || !q.test(w[0]) || ":" != w[1] && "|" != w[1] ? (0 != w.length && (this.o = b.call(this, w), w = ""), y = "relative path start") : y = "relative path";
                continue;
              } else "\t" == n || "\n" == n || "\r" == n ? M() : w += n;

              break;

            case "host":
            case "hostname":
              if (":" != n || ha) {
                if (void 0 == n || "/" == n || "\\" == n || "?" == n || "#" == n) {
                  this.o = b.call(this, w);
                  w = "";
                  y = "relative path start";
                  if (F) break a;
                  continue;
                } else "\t" != n && "\n" != n && "\r" != n ? ("[" == n ? ha = !0 : "]" == n && (ha = !1), w += n) : M();
              } else if (this.o = b.call(this, w), w = "", y = "port", "hostname" == F) break a;
              break;

            case "port":
              if (/[0-9]/.test(n)) w += n;else if (void 0 == n || "/" == n || "\\" == n || "?" == n || "#" == n || F) {
                "" != w && (w = parseInt(w, 10), w != l[this.l] && (this.v = w + ""), w = "");
                if (F) break a;
                y = "relative path start";
                continue;
              } else "\t" == n || "\n" == n || "\r" == n ? M() : (f.call(this), this.m = !0);
              break;

            case "relative path start":
              y = "relative path";
              if ("/" != n && "\\" != n) continue;
              break;

            case "relative path":
              if (void 0 != n && "/" != n && "\\" != n && (F || "?" != n && "#" != n)) "\t" != n && "\n" != n && "\r" != n && (w += c(n));else {
                if (J = m[w.toLowerCase()]) w = J;
                ".." == w ? (this.s.pop(), "/" != n && "\\" != n && this.s.push("")) : "." == w && "/" != n && "\\" != n ? this.s.push("") : "." != w && ("file" == this.l && 0 == this.s.length && 2 == w.length && q.test(w[0]) && "|" == w[1] && (w = w[0] + ":"), this.s.push(w));
                w = "";
                "?" == n ? (this.A = "?", y = "query") : "#" == n && (this.C = "#", y = "fragment");
              }
              break;

            case "query":
              F || "#" != n ? void 0 != n && "\t" != n && "\n" != n && "\r" != n && (this.A += d(n)) : (this.C = "#", y = "fragment");
              break;

            case "fragment":
              void 0 != n && "\t" != n && "\n" != n && "\r" != n && (this.C += n);
          }

          W++;
        }
      }

      function f() {
        this.B = this.va = this.l = "";
        this.j = null;
        this.v = this.o = "";
        this.s = [];
        this.C = this.A = "";
        this.G = this.m = !1;
      }

      function g(t, F) {
        void 0 === F || F instanceof g || (F = new g(String(F)));
        this.g = t;
        f.call(this);
        e.call(this, this.g.replace(/^[ \t\r\n\f]+|[ \t\r\n\f]+$/g, ""), null, F);
      }

      var h = !1;

      try {
        var k = new URL("b", "http://a");
        k.pathname = "c%20d";
        h = "http://a/c%20d" === k.href;
      } catch (t) {}

      if (!h) {
        var l = Object.create(null);
        l.ftp = 21;
        l.file = 0;
        l.gopher = 70;
        l.http = 80;
        l.https = 443;
        l.ws = 80;
        l.wss = 443;
        var m = Object.create(null);
        m["%2e"] = ".";
        m[".%2e"] = "..";
        m["%2e."] = "..";
        m["%2e%2e"] = "..";
        var q = /[a-zA-Z]/,
            H = /[a-zA-Z0-9+\-.]/;
        g.prototype = {
          toString: function toString() {
            return this.href;
          },

          get href() {
            if (this.m) return this.g;
            var t = "";
            if ("" != this.B || null != this.j) t = this.B + (null != this.j ? ":" + this.j : "") + "@";
            return this.protocol + (this.G ? "//" + t + this.host : "") + this.pathname + this.A + this.C;
          },

          set href(t) {
            f.call(this);
            e.call(this, t);
          },

          get protocol() {
            return this.l + ":";
          },

          set protocol(t) {
            this.m || e.call(this, t + ":", "scheme start");
          },

          get host() {
            return this.m ? "" : this.v ? this.o + ":" + this.v : this.o;
          },

          set host(t) {
            !this.m && this.G && e.call(this, t, "host");
          },

          get hostname() {
            return this.o;
          },

          set hostname(t) {
            !this.m && this.G && e.call(this, t, "hostname");
          },

          get port() {
            return this.v;
          },

          set port(t) {
            !this.m && this.G && e.call(this, t, "port");
          },

          get pathname() {
            return this.m ? "" : this.G ? "/" + this.s.join("/") : this.va;
          },

          set pathname(t) {
            !this.m && this.G && (this.s = [], e.call(this, t, "relative path start"));
          },

          get search() {
            return this.m || !this.A || "?" == this.A ? "" : this.A;
          },

          set search(t) {
            !this.m && this.G && (this.A = "?", "?" == t[0] && (t = t.slice(1)), e.call(this, t, "query"));
          },

          get hash() {
            return this.m || !this.C || "#" == this.C ? "" : this.C;
          },

          set hash(t) {
            this.m || (t ? (this.C = "#", "#" == t[0] && (t = t.slice(1)), e.call(this, t, "fragment")) : this.C = "");
          },

          get origin() {
            var t;
            if (this.m || !this.l) return "";

            switch (this.l) {
              case "data":
              case "file":
              case "javascript":
              case "mailto":
                return "null";
            }

            return (t = this.host) ? this.l + "://" + t : "";
          }

        };
        var C = a.URL;
        C && (g.createObjectURL = function (t) {
          return C.createObjectURL.apply(C, arguments);
        }, g.revokeObjectURL = function (t) {
          C.revokeObjectURL(t);
        });
        a.URL = g;
      }
    })(window);
    /*
    Copyright (c) 2018 The Polymer Project Authors. All rights reserved.
    This code may only be used under the BSD style license found at http://polymer.github.io/LICENSE.txt
    The complete set of authors may be found at http://polymer.github.io/AUTHORS.txt
    The complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt
    Code distributed by Google as part of the polymer project is also
    subject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt
    */


    var hj = window.customElements,
        ij = !1,
        jj = null;
    hj.polyfillWrapFlushCallback && hj.polyfillWrapFlushCallback(function (a) {
      jj = a;
      ij && a();
    });

    function kj() {
      window.HTMLTemplateElement.bootstrap && window.HTMLTemplateElement.bootstrap(window.document);
      jj && jj();
      ij = !0;
      window.WebComponents.ready = !0;
      document.dispatchEvent(new CustomEvent("WebComponentsReady", {
        bubbles: !0
      }));
    }

    "complete" !== document.readyState ? (window.addEventListener("load", kj), window.addEventListener("DOMContentLoaded", function () {
      window.removeEventListener("load", kj);
      kj();
    })) : kj();
  }).call(commonjsGlobal);

  !function (i) {
    "function" == typeof define && define.amd ? define(i) : i();
  }(function () {

    var i;
    i = function i() {
      var i, n;
      i = function i() {
        /**
                            * @license
                            * Copyright 2017 Google LLC
                            * SPDX-License-Identifier: BSD-3-Clause
                            */
        var i,
            n = "__scoped";
        null !== (i = globalThis.reactiveElementPolyfillSupport) && void 0 !== i || (globalThis.reactiveElementPolyfillSupport = function (i) {
          var o = i.ReactiveElement;

          if (void 0 !== window.ShadyCSS && (!window.ShadyCSS.nativeShadow || window.ShadyCSS.ApplyShim)) {
            var t = o.prototype;
            window.ShadyDOM && window.ShadyDOM.inUse && !0 === window.ShadyDOM.noPatch && window.ShadyDOM.patchElementProto(t);
            var d = t.createRenderRoot;

            t.createRenderRoot = function () {
              var i,
                  o,
                  t,
                  e = this.localName;
              if (window.ShadyCSS.nativeShadow) return d.call(this);

              if (!this.constructor.hasOwnProperty(n)) {
                this.constructor[n] = !0;
                var u = this.constructor.elementStyles.map(function (i) {
                  return i instanceof CSSStyleSheet ? Array.from(i.cssRules).reduce(function (i, n) {
                    return i + n.cssText;
                  }, "") : i.cssText;
                });
                null === (o = null === (i = window.ShadyCSS) || void 0 === i ? void 0 : i.ScopingShim) || void 0 === o || o.prepareAdoptedCssText(u, e), void 0 === this.constructor._$AJ && window.ShadyCSS.prepareTemplateStyles(document.createElement("template"), e);
              }

              return null !== (t = this.shadowRoot) && void 0 !== t ? t : this.attachShadow(this.constructor.shadowRootOptions);
            };

            var e = t.connectedCallback;

            t.connectedCallback = function () {
              e.call(this), this.hasUpdated && window.ShadyCSS.styleElement(this);
            };

            var u = t._$AE;

            t._$AE = function (i) {
              this.hasUpdated || window.ShadyCSS.styleElement(this), u.call(this, i);
            };
          }
        });
      }, "function" == typeof define && define.amd ? define(i) : i(), function (i) {
        "function" == typeof define && define.amd ? define(i) : i();
      }(function () {
        /**
                            * @license
                            * Copyright 2017 Google LLC
                            * SPDX-License-Identifier: BSD-3-Clause
                            */
        var i,
            n = new Set(),
            o = new Map();
        null !== (i = globalThis.litHtmlPolyfillSupport) && void 0 !== i || (globalThis.litHtmlPolyfillSupport = function (i, t) {
          if (void 0 !== window.ShadyCSS && (!window.ShadyCSS.nativeShadow || window.ShadyCSS.ApplyShim)) {
            var d = function d(i) {
              return void 0 !== i && !n.has(i);
            },
                e = function e(i) {
              var n = o.get(i);
              return void 0 === n && o.set(i, n = []), n;
            },
                u = new Map(),
                v = i.createElement;

            i.createElement = function (n, o) {
              var t = v.call(i, n, o),
                  u = null == o ? void 0 : o.scope;

              if (void 0 !== u && (window.ShadyCSS.nativeShadow || window.ShadyCSS.prepareTemplateDom(t, u), d(u))) {
                var f = e(u),
                    r = t.content.querySelectorAll("style");
                f.push.apply(f, Array.from(r).map(function (i) {
                  var n;
                  return null === (n = i.parentNode) || void 0 === n || n.removeChild(i), i.textContent;
                }));
              }

              return t;
            };

            var f = document.createDocumentFragment(),
                r = document.createComment(""),
                w = t.prototype,
                l = w._$AI;
            w._$AI = function (i, t) {
              var u, v, w;
              void 0 === t && (t = this);
              var s = this._$AA.parentNode,
                  a = null === (u = this.options) || void 0 === u ? void 0 : u.scope;

              if (s instanceof ShadowRoot && d(a)) {
                var h = this._$AA,
                    c = this._$AB;
                f.appendChild(r), this._$AA = r, this._$AB = null, l.call(this, i, t);
                var y = (null === (v = i) || void 0 === v ? void 0 : v._$litType$) ? this._$AH._$AD.el : document.createElement("template");

                if (function (i, t) {
                  var d,
                      u = e(i),
                      v = 0 !== u.length;
                  v && ((d = document.createElement("style")).textContent = u.join("\n"), t.content.appendChild(d)), n.add(i), o.delete(i), window.ShadyCSS.prepareTemplateStyles(t, i), v && window.ShadyCSS.nativeShadow && null !== (d = t.content.querySelector("style")) && t.content.appendChild(d);
                }(a, y), f.removeChild(r), null === (w = window.ShadyCSS) || void 0 === w ? void 0 : w.nativeShadow) {
                  var p = y.content.querySelector("style");
                  null !== p && f.appendChild(p.cloneNode(!0));
                }

                s.insertBefore(f, c), this._$AA = h, this._$AB = c;
              } else l.call(this, i, t);
            }, w._$AC = function (n) {
              var o,
                  t = null === (o = this.options) || void 0 === o ? void 0 : o.scope,
                  d = u.get(t);
              void 0 === d && u.set(t, d = new Map());
              var e = d.get(n.strings);
              return void 0 === e && d.set(n.strings, e = new i(n, this.options)), e;
            };
          }
        });
      }), null !== (n = globalThis.litElementPolyfillSupport) && void 0 !== n || (globalThis.litElementPolyfillSupport = function (i) {
        var n = i.LitElement;

        if (void 0 !== window.ShadyCSS && (!window.ShadyCSS.nativeShadow || window.ShadyCSS.ApplyShim)) {
          n._$AJ = !0;
          var o = n.prototype,
              t = o.createRenderRoot;

          o.createRenderRoot = function () {
            return this.renderOptions.scope = this.localName, t.call(this);
          };
        }
      });
    }, "function" == typeof define && define.amd ? define(i) : i();
  });

  var top$1 = 'top';
  var bottom$1 = 'bottom';
  var right$1 = 'right';
  var left$1 = 'left';
  var auto = 'auto';
  var basePlacements = [top$1, bottom$1, right$1, left$1];
  var start$1 = 'start';
  var end = 'end';
  var clippingParents = 'clippingParents';
  var viewport = 'viewport';
  var popper = 'popper';
  var reference = 'reference';
  var variationPlacements = /*#__PURE__*/basePlacements.reduce(function (acc, placement) {
    return acc.concat([placement + "-" + start$1, placement + "-" + end]);
  }, []);
  var placements = /*#__PURE__*/[].concat(basePlacements, [auto]).reduce(function (acc, placement) {
    return acc.concat([placement, placement + "-" + start$1, placement + "-" + end]);
  }, []); // modifiers that need to read the DOM

  var beforeRead = 'beforeRead';
  var read = 'read';
  var afterRead = 'afterRead'; // pure-logic modifiers

  var beforeMain = 'beforeMain';
  var main = 'main';
  var afterMain = 'afterMain'; // modifier with the purpose to write to the DOM (or write into a framework state)

  var beforeWrite = 'beforeWrite';
  var write = 'write';
  var afterWrite = 'afterWrite';
  var modifierPhases = [beforeRead, read, afterRead, beforeMain, main, afterMain, beforeWrite, write, afterWrite];

  function getNodeName(element) {
    return element ? (element.nodeName || '').toLowerCase() : null;
  }

  function getWindow(node) {
    if (node == null) {
      return window;
    }

    if (node.toString() !== '[object Window]') {
      var ownerDocument = node.ownerDocument;
      return ownerDocument ? ownerDocument.defaultView || window : window;
    }

    return node;
  }

  function isElement$1(node) {
    var OwnElement = getWindow(node).Element;
    return node instanceof OwnElement || node instanceof Element;
  }

  function isHTMLElement(node) {
    var OwnElement = getWindow(node).HTMLElement;
    return node instanceof OwnElement || node instanceof HTMLElement;
  }

  function isShadowRoot(node) {
    // IE 11 has no ShadowRoot
    if (typeof ShadowRoot === 'undefined') {
      return false;
    }

    var OwnElement = getWindow(node).ShadowRoot;
    return node instanceof OwnElement || node instanceof ShadowRoot;
  }

  // and applies them to the HTMLElements such as popper and arrow

  function applyStyles(_ref) {
    var state = _ref.state;
    Object.keys(state.elements).forEach(function (name) {
      var style = state.styles[name] || {};
      var attributes = state.attributes[name] || {};
      var element = state.elements[name]; // arrow is optional + virtual elements

      if (!isHTMLElement(element) || !getNodeName(element)) {
        return;
      } // Flow doesn't support to extend this property, but it's the most
      // effective way to apply styles to an HTMLElement
      // $FlowFixMe[cannot-write]


      Object.assign(element.style, style);
      Object.keys(attributes).forEach(function (name) {
        var value = attributes[name];

        if (value === false) {
          element.removeAttribute(name);
        } else {
          element.setAttribute(name, value === true ? '' : value);
        }
      });
    });
  }

  function effect$2(_ref2) {
    var state = _ref2.state;
    var initialStyles = {
      popper: {
        position: state.options.strategy,
        left: '0',
        top: '0',
        margin: '0'
      },
      arrow: {
        position: 'absolute'
      },
      reference: {}
    };
    Object.assign(state.elements.popper.style, initialStyles.popper);
    state.styles = initialStyles;

    if (state.elements.arrow) {
      Object.assign(state.elements.arrow.style, initialStyles.arrow);
    }

    return function () {
      Object.keys(state.elements).forEach(function (name) {
        var element = state.elements[name];
        var attributes = state.attributes[name] || {};
        var styleProperties = Object.keys(state.styles.hasOwnProperty(name) ? state.styles[name] : initialStyles[name]); // Set all values to an empty string to unset them

        var style = styleProperties.reduce(function (style, property) {
          style[property] = '';
          return style;
        }, {}); // arrow is optional + virtual elements

        if (!isHTMLElement(element) || !getNodeName(element)) {
          return;
        }

        Object.assign(element.style, style);
        Object.keys(attributes).forEach(function (attribute) {
          element.removeAttribute(attribute);
        });
      });
    };
  } // eslint-disable-next-line import/no-unused-modules


  var applyStyles$1 = {
    name: 'applyStyles',
    enabled: true,
    phase: 'write',
    fn: applyStyles,
    effect: effect$2,
    requires: ['computeStyles']
  };

  function getBasePlacement(placement) {
    return placement.split('-')[0];
  }

  var max = Math.max;
  var min = Math.min;
  var round = Math.round;

  function getBoundingClientRect(element, includeScale) {
    if (includeScale === void 0) {
      includeScale = false;
    }

    var rect = element.getBoundingClientRect();
    var scaleX = 1;
    var scaleY = 1;

    if (isHTMLElement(element) && includeScale) {
      var offsetHeight = element.offsetHeight;
      var offsetWidth = element.offsetWidth; // Do not attempt to divide by 0, otherwise we get `Infinity` as scale
      // Fallback to 1 in case both values are `0`

      if (offsetWidth > 0) {
        scaleX = round(rect.width) / offsetWidth || 1;
      }

      if (offsetHeight > 0) {
        scaleY = round(rect.height) / offsetHeight || 1;
      }
    }

    return {
      width: rect.width / scaleX,
      height: rect.height / scaleY,
      top: rect.top / scaleY,
      right: rect.right / scaleX,
      bottom: rect.bottom / scaleY,
      left: rect.left / scaleX,
      x: rect.left / scaleX,
      y: rect.top / scaleY
    };
  }

  // means it doesn't take into account transforms.

  function getLayoutRect(element) {
    var clientRect = getBoundingClientRect(element); // Use the clientRect sizes if it's not been transformed.
    // Fixes https://github.com/popperjs/popper-core/issues/1223

    var width = element.offsetWidth;
    var height = element.offsetHeight;

    if (Math.abs(clientRect.width - width) <= 1) {
      width = clientRect.width;
    }

    if (Math.abs(clientRect.height - height) <= 1) {
      height = clientRect.height;
    }

    return {
      x: element.offsetLeft,
      y: element.offsetTop,
      width: width,
      height: height
    };
  }

  function contains$1(parent, child) {
    var rootNode = child.getRootNode && child.getRootNode(); // First, attempt with faster native method

    if (parent.contains(child)) {
      return true;
    } // then fallback to custom implementation with Shadow DOM support
    else if (rootNode && isShadowRoot(rootNode)) {
      var next = child;

      do {
        if (next && parent.isSameNode(next)) {
          return true;
        } // $FlowFixMe[prop-missing]: need a better way to handle this...


        next = next.parentNode || next.host;
      } while (next);
    } // Give up, the result is false


    return false;
  }

  function getComputedStyle$1(element) {
    return getWindow(element).getComputedStyle(element);
  }

  function isTableElement(element) {
    return ['table', 'td', 'th'].indexOf(getNodeName(element)) >= 0;
  }

  function getDocumentElement(element) {
    // $FlowFixMe[incompatible-return]: assume body is always available
    return ((isElement$1(element) ? element.ownerDocument : // $FlowFixMe[prop-missing]
    element.document) || window.document).documentElement;
  }

  function getParentNode(element) {
    if (getNodeName(element) === 'html') {
      return element;
    }

    return (// this is a quicker (but less type safe) way to save quite some bytes from the bundle
      // $FlowFixMe[incompatible-return]
      // $FlowFixMe[prop-missing]
      element.assignedSlot || // step into the shadow DOM of the parent of a slotted node
      element.parentNode || ( // DOM Element detected
      isShadowRoot(element) ? element.host : null) || // ShadowRoot detected
      // $FlowFixMe[incompatible-call]: HTMLElement is a Node
      getDocumentElement(element) // fallback

    );
  }

  function getTrueOffsetParent(element) {
    if (!isHTMLElement(element) || // https://github.com/popperjs/popper-core/issues/837
    getComputedStyle$1(element).position === 'fixed') {
      return null;
    }

    return element.offsetParent;
  } // `.offsetParent` reports `null` for fixed elements, while absolute elements
  // return the containing block


  function getContainingBlock(element) {
    var isFirefox = navigator.userAgent.toLowerCase().indexOf('firefox') !== -1;
    var isIE = navigator.userAgent.indexOf('Trident') !== -1;

    if (isIE && isHTMLElement(element)) {
      // In IE 9, 10 and 11 fixed elements containing block is always established by the viewport
      var elementCss = getComputedStyle$1(element);

      if (elementCss.position === 'fixed') {
        return null;
      }
    }

    var currentNode = getParentNode(element);

    if (isShadowRoot(currentNode)) {
      currentNode = currentNode.host;
    }

    while (isHTMLElement(currentNode) && ['html', 'body'].indexOf(getNodeName(currentNode)) < 0) {
      var css = getComputedStyle$1(currentNode); // This is non-exhaustive but covers the most common CSS properties that
      // create a containing block.
      // https://developer.mozilla.org/en-US/docs/Web/CSS/Containing_block#identifying_the_containing_block

      if (css.transform !== 'none' || css.perspective !== 'none' || css.contain === 'paint' || ['transform', 'perspective'].indexOf(css.willChange) !== -1 || isFirefox && css.willChange === 'filter' || isFirefox && css.filter && css.filter !== 'none') {
        return currentNode;
      } else {
        currentNode = currentNode.parentNode;
      }
    }

    return null;
  } // Gets the closest ancestor positioned element. Handles some edge cases,
  // such as table ancestors and cross browser bugs.


  function getOffsetParent(element) {
    var window = getWindow(element);
    var offsetParent = getTrueOffsetParent(element);

    while (offsetParent && isTableElement(offsetParent) && getComputedStyle$1(offsetParent).position === 'static') {
      offsetParent = getTrueOffsetParent(offsetParent);
    }

    if (offsetParent && (getNodeName(offsetParent) === 'html' || getNodeName(offsetParent) === 'body' && getComputedStyle$1(offsetParent).position === 'static')) {
      return window;
    }

    return offsetParent || getContainingBlock(element) || window;
  }

  function getMainAxisFromPlacement(placement) {
    return ['top', 'bottom'].indexOf(placement) >= 0 ? 'x' : 'y';
  }

  function within$1(min$1, value, max$1) {
    return max(min$1, min(value, max$1));
  }
  function withinMaxClamp(min, value, max) {
    var v = within$1(min, value, max);
    return v > max ? max : v;
  }

  function getFreshSideObject() {
    return {
      top: 0,
      right: 0,
      bottom: 0,
      left: 0
    };
  }

  function mergePaddingObject(paddingObject) {
    return Object.assign({}, getFreshSideObject(), paddingObject);
  }

  function expandToHashMap(value, keys) {
    return keys.reduce(function (hashMap, key) {
      hashMap[key] = value;
      return hashMap;
    }, {});
  }

  var toPaddingObject = function toPaddingObject(padding, state) {
    padding = typeof padding === 'function' ? padding(Object.assign({}, state.rects, {
      placement: state.placement
    })) : padding;
    return mergePaddingObject(typeof padding !== 'number' ? padding : expandToHashMap(padding, basePlacements));
  };

  function arrow(_ref) {
    var _state$modifiersData$;

    var state = _ref.state,
        name = _ref.name,
        options = _ref.options;
    var arrowElement = state.elements.arrow;
    var popperOffsets = state.modifiersData.popperOffsets;
    var basePlacement = getBasePlacement(state.placement);
    var axis = getMainAxisFromPlacement(basePlacement);
    var isVertical = [left$1, right$1].indexOf(basePlacement) >= 0;
    var len = isVertical ? 'height' : 'width';

    if (!arrowElement || !popperOffsets) {
      return;
    }

    var paddingObject = toPaddingObject(options.padding, state);
    var arrowRect = getLayoutRect(arrowElement);
    var minProp = axis === 'y' ? top$1 : left$1;
    var maxProp = axis === 'y' ? bottom$1 : right$1;
    var endDiff = state.rects.reference[len] + state.rects.reference[axis] - popperOffsets[axis] - state.rects.popper[len];
    var startDiff = popperOffsets[axis] - state.rects.reference[axis];
    var arrowOffsetParent = getOffsetParent(arrowElement);
    var clientSize = arrowOffsetParent ? axis === 'y' ? arrowOffsetParent.clientHeight || 0 : arrowOffsetParent.clientWidth || 0 : 0;
    var centerToReference = endDiff / 2 - startDiff / 2; // Make sure the arrow doesn't overflow the popper if the center point is
    // outside of the popper bounds

    var min = paddingObject[minProp];
    var max = clientSize - arrowRect[len] - paddingObject[maxProp];
    var center = clientSize / 2 - arrowRect[len] / 2 + centerToReference;
    var offset = within$1(min, center, max); // Prevents breaking syntax highlighting...

    var axisProp = axis;
    state.modifiersData[name] = (_state$modifiersData$ = {}, _state$modifiersData$[axisProp] = offset, _state$modifiersData$.centerOffset = offset - center, _state$modifiersData$);
  }

  function effect$1(_ref2) {
    var state = _ref2.state,
        options = _ref2.options;
    var _options$element = options.element,
        arrowElement = _options$element === void 0 ? '[data-popper-arrow]' : _options$element;

    if (arrowElement == null) {
      return;
    } // CSS selector


    if (typeof arrowElement === 'string') {
      arrowElement = state.elements.popper.querySelector(arrowElement);

      if (!arrowElement) {
        return;
      }
    }

    if (process.env.NODE_ENV !== "production") {
      if (!isHTMLElement(arrowElement)) {
        console.error(['Popper: "arrow" element must be an HTMLElement (not an SVGElement).', 'To use an SVG arrow, wrap it in an HTMLElement that will be used as', 'the arrow.'].join(' '));
      }
    }

    if (!contains$1(state.elements.popper, arrowElement)) {
      if (process.env.NODE_ENV !== "production") {
        console.error(['Popper: "arrow" modifier\'s `element` must be a child of the popper', 'element.'].join(' '));
      }

      return;
    }

    state.elements.arrow = arrowElement;
  } // eslint-disable-next-line import/no-unused-modules


  var arrow$1 = {
    name: 'arrow',
    enabled: true,
    phase: 'main',
    fn: arrow,
    effect: effect$1,
    requires: ['popperOffsets'],
    requiresIfExists: ['preventOverflow']
  };

  function getVariation(placement) {
    return placement.split('-')[1];
  }

  var unsetSides = {
    top: 'auto',
    right: 'auto',
    bottom: 'auto',
    left: 'auto'
  }; // Round the offsets to the nearest suitable subpixel based on the DPR.
  // Zooming can change the DPR, but it seems to report a value that will
  // cleanly divide the values into the appropriate subpixels.

  function roundOffsetsByDPR(_ref) {
    var x = _ref.x,
        y = _ref.y;
    var win = window;
    var dpr = win.devicePixelRatio || 1;
    return {
      x: round(x * dpr) / dpr || 0,
      y: round(y * dpr) / dpr || 0
    };
  }

  function mapToStyles(_ref2) {
    var _Object$assign2;

    var popper = _ref2.popper,
        popperRect = _ref2.popperRect,
        placement = _ref2.placement,
        variation = _ref2.variation,
        offsets = _ref2.offsets,
        position = _ref2.position,
        gpuAcceleration = _ref2.gpuAcceleration,
        adaptive = _ref2.adaptive,
        roundOffsets = _ref2.roundOffsets,
        isFixed = _ref2.isFixed;
    var _offsets$x = offsets.x,
        x = _offsets$x === void 0 ? 0 : _offsets$x,
        _offsets$y = offsets.y,
        y = _offsets$y === void 0 ? 0 : _offsets$y;

    var _ref3 = typeof roundOffsets === 'function' ? roundOffsets({
      x: x,
      y: y
    }) : {
      x: x,
      y: y
    };

    x = _ref3.x;
    y = _ref3.y;
    var hasX = offsets.hasOwnProperty('x');
    var hasY = offsets.hasOwnProperty('y');
    var sideX = left$1;
    var sideY = top$1;
    var win = window;

    if (adaptive) {
      var offsetParent = getOffsetParent(popper);
      var heightProp = 'clientHeight';
      var widthProp = 'clientWidth';

      if (offsetParent === getWindow(popper)) {
        offsetParent = getDocumentElement(popper);

        if (getComputedStyle$1(offsetParent).position !== 'static' && position === 'absolute') {
          heightProp = 'scrollHeight';
          widthProp = 'scrollWidth';
        }
      } // $FlowFixMe[incompatible-cast]: force type refinement, we compare offsetParent with window above, but Flow doesn't detect it


      offsetParent = offsetParent;

      if (placement === top$1 || (placement === left$1 || placement === right$1) && variation === end) {
        sideY = bottom$1;
        var offsetY = isFixed && offsetParent === win && win.visualViewport ? win.visualViewport.height : // $FlowFixMe[prop-missing]
        offsetParent[heightProp];
        y -= offsetY - popperRect.height;
        y *= gpuAcceleration ? 1 : -1;
      }

      if (placement === left$1 || (placement === top$1 || placement === bottom$1) && variation === end) {
        sideX = right$1;
        var offsetX = isFixed && offsetParent === win && win.visualViewport ? win.visualViewport.width : // $FlowFixMe[prop-missing]
        offsetParent[widthProp];
        x -= offsetX - popperRect.width;
        x *= gpuAcceleration ? 1 : -1;
      }
    }

    var commonStyles = Object.assign({
      position: position
    }, adaptive && unsetSides);

    var _ref4 = roundOffsets === true ? roundOffsetsByDPR({
      x: x,
      y: y
    }) : {
      x: x,
      y: y
    };

    x = _ref4.x;
    y = _ref4.y;

    if (gpuAcceleration) {
      var _Object$assign;

      return Object.assign({}, commonStyles, (_Object$assign = {}, _Object$assign[sideY] = hasY ? '0' : '', _Object$assign[sideX] = hasX ? '0' : '', _Object$assign.transform = (win.devicePixelRatio || 1) <= 1 ? "translate(" + x + "px, " + y + "px)" : "translate3d(" + x + "px, " + y + "px, 0)", _Object$assign));
    }

    return Object.assign({}, commonStyles, (_Object$assign2 = {}, _Object$assign2[sideY] = hasY ? y + "px" : '', _Object$assign2[sideX] = hasX ? x + "px" : '', _Object$assign2.transform = '', _Object$assign2));
  }

  function computeStyles(_ref5) {
    var state = _ref5.state,
        options = _ref5.options;
    var _options$gpuAccelerat = options.gpuAcceleration,
        gpuAcceleration = _options$gpuAccelerat === void 0 ? true : _options$gpuAccelerat,
        _options$adaptive = options.adaptive,
        adaptive = _options$adaptive === void 0 ? true : _options$adaptive,
        _options$roundOffsets = options.roundOffsets,
        roundOffsets = _options$roundOffsets === void 0 ? true : _options$roundOffsets;

    if (process.env.NODE_ENV !== "production") {
      var transitionProperty = getComputedStyle$1(state.elements.popper).transitionProperty || '';

      if (adaptive && ['transform', 'top', 'right', 'bottom', 'left'].some(function (property) {
        return transitionProperty.indexOf(property) >= 0;
      })) {
        console.warn(['Popper: Detected CSS transitions on at least one of the following', 'CSS properties: "transform", "top", "right", "bottom", "left".', '\n\n', 'Disable the "computeStyles" modifier\'s `adaptive` option to allow', 'for smooth transitions, or remove these properties from the CSS', 'transition declaration on the popper element if only transitioning', 'opacity or background-color for example.', '\n\n', 'We recommend using the popper element as a wrapper around an inner', 'element that can have any CSS property transitioned for animations.'].join(' '));
      }
    }

    var commonStyles = {
      placement: getBasePlacement(state.placement),
      variation: getVariation(state.placement),
      popper: state.elements.popper,
      popperRect: state.rects.popper,
      gpuAcceleration: gpuAcceleration,
      isFixed: state.options.strategy === 'fixed'
    };

    if (state.modifiersData.popperOffsets != null) {
      state.styles.popper = Object.assign({}, state.styles.popper, mapToStyles(Object.assign({}, commonStyles, {
        offsets: state.modifiersData.popperOffsets,
        position: state.options.strategy,
        adaptive: adaptive,
        roundOffsets: roundOffsets
      })));
    }

    if (state.modifiersData.arrow != null) {
      state.styles.arrow = Object.assign({}, state.styles.arrow, mapToStyles(Object.assign({}, commonStyles, {
        offsets: state.modifiersData.arrow,
        position: 'absolute',
        adaptive: false,
        roundOffsets: roundOffsets
      })));
    }

    state.attributes.popper = Object.assign({}, state.attributes.popper, {
      'data-popper-placement': state.placement
    });
  } // eslint-disable-next-line import/no-unused-modules


  var computeStyles$1 = {
    name: 'computeStyles',
    enabled: true,
    phase: 'beforeWrite',
    fn: computeStyles,
    data: {}
  };

  var passive = {
    passive: true
  };

  function effect(_ref) {
    var state = _ref.state,
        instance = _ref.instance,
        options = _ref.options;
    var _options$scroll = options.scroll,
        scroll = _options$scroll === void 0 ? true : _options$scroll,
        _options$resize = options.resize,
        resize = _options$resize === void 0 ? true : _options$resize;
    var window = getWindow(state.elements.popper);
    var scrollParents = [].concat(state.scrollParents.reference, state.scrollParents.popper);

    if (scroll) {
      scrollParents.forEach(function (scrollParent) {
        scrollParent.addEventListener('scroll', instance.update, passive);
      });
    }

    if (resize) {
      window.addEventListener('resize', instance.update, passive);
    }

    return function () {
      if (scroll) {
        scrollParents.forEach(function (scrollParent) {
          scrollParent.removeEventListener('scroll', instance.update, passive);
        });
      }

      if (resize) {
        window.removeEventListener('resize', instance.update, passive);
      }
    };
  } // eslint-disable-next-line import/no-unused-modules


  var eventListeners = {
    name: 'eventListeners',
    enabled: true,
    phase: 'write',
    fn: function fn() {},
    effect: effect,
    data: {}
  };

  var hash$1 = {
    left: 'right',
    right: 'left',
    bottom: 'top',
    top: 'bottom'
  };
  function getOppositePlacement(placement) {
    return placement.replace(/left|right|bottom|top/g, function (matched) {
      return hash$1[matched];
    });
  }

  var hash = {
    start: 'end',
    end: 'start'
  };
  function getOppositeVariationPlacement(placement) {
    return placement.replace(/start|end/g, function (matched) {
      return hash[matched];
    });
  }

  function getWindowScroll(node) {
    var win = getWindow(node);
    var scrollLeft = win.pageXOffset;
    var scrollTop = win.pageYOffset;
    return {
      scrollLeft: scrollLeft,
      scrollTop: scrollTop
    };
  }

  function getWindowScrollBarX(element) {
    // If <html> has a CSS width greater than the viewport, then this will be
    // incorrect for RTL.
    // Popper 1 is broken in this case and never had a bug report so let's assume
    // it's not an issue. I don't think anyone ever specifies width on <html>
    // anyway.
    // Browsers where the left scrollbar doesn't cause an issue report `0` for
    // this (e.g. Edge 2019, IE11, Safari)
    return getBoundingClientRect(getDocumentElement(element)).left + getWindowScroll(element).scrollLeft;
  }

  function getViewportRect(element) {
    var win = getWindow(element);
    var html = getDocumentElement(element);
    var visualViewport = win.visualViewport;
    var width = html.clientWidth;
    var height = html.clientHeight;
    var x = 0;
    var y = 0; // NB: This isn't supported on iOS <= 12. If the keyboard is open, the popper
    // can be obscured underneath it.
    // Also, `html.clientHeight` adds the bottom bar height in Safari iOS, even
    // if it isn't open, so if this isn't available, the popper will be detected
    // to overflow the bottom of the screen too early.

    if (visualViewport) {
      width = visualViewport.width;
      height = visualViewport.height; // Uses Layout Viewport (like Chrome; Safari does not currently)
      // In Chrome, it returns a value very close to 0 (+/-) but contains rounding
      // errors due to floating point numbers, so we need to check precision.
      // Safari returns a number <= 0, usually < -1 when pinch-zoomed
      // Feature detection fails in mobile emulation mode in Chrome.
      // Math.abs(win.innerWidth / visualViewport.scale - visualViewport.width) <
      // 0.001
      // Fallback here: "Not Safari" userAgent

      if (!/^((?!chrome|android).)*safari/i.test(navigator.userAgent)) {
        x = visualViewport.offsetLeft;
        y = visualViewport.offsetTop;
      }
    }

    return {
      width: width,
      height: height,
      x: x + getWindowScrollBarX(element),
      y: y
    };
  }

  // of the `<html>` and `<body>` rect bounds if horizontally scrollable

  function getDocumentRect(element) {
    var _element$ownerDocumen;

    var html = getDocumentElement(element);
    var winScroll = getWindowScroll(element);
    var body = (_element$ownerDocumen = element.ownerDocument) == null ? void 0 : _element$ownerDocumen.body;
    var width = max(html.scrollWidth, html.clientWidth, body ? body.scrollWidth : 0, body ? body.clientWidth : 0);
    var height = max(html.scrollHeight, html.clientHeight, body ? body.scrollHeight : 0, body ? body.clientHeight : 0);
    var x = -winScroll.scrollLeft + getWindowScrollBarX(element);
    var y = -winScroll.scrollTop;

    if (getComputedStyle$1(body || html).direction === 'rtl') {
      x += max(html.clientWidth, body ? body.clientWidth : 0) - width;
    }

    return {
      width: width,
      height: height,
      x: x,
      y: y
    };
  }

  function isScrollParent(element) {
    // Firefox wants us to check `-x` and `-y` variations as well
    var _getComputedStyle = getComputedStyle$1(element),
        overflow = _getComputedStyle.overflow,
        overflowX = _getComputedStyle.overflowX,
        overflowY = _getComputedStyle.overflowY;

    return /auto|scroll|overlay|hidden/.test(overflow + overflowY + overflowX);
  }

  function getScrollParent(node) {
    if (['html', 'body', '#document'].indexOf(getNodeName(node)) >= 0) {
      // $FlowFixMe[incompatible-return]: assume body is always available
      return node.ownerDocument.body;
    }

    if (isHTMLElement(node) && isScrollParent(node)) {
      return node;
    }

    return getScrollParent(getParentNode(node));
  }

  /*
  given a DOM element, return the list of all scroll parents, up the list of ancesors
  until we get to the top window object. This list is what we attach scroll listeners
  to, because if any of these parent elements scroll, we'll need to re-calculate the
  reference element's position.
  */

  function listScrollParents(element, list) {
    var _element$ownerDocumen;

    if (list === void 0) {
      list = [];
    }

    var scrollParent = getScrollParent(element);
    var isBody = scrollParent === ((_element$ownerDocumen = element.ownerDocument) == null ? void 0 : _element$ownerDocumen.body);
    var win = getWindow(scrollParent);
    var target = isBody ? [win].concat(win.visualViewport || [], isScrollParent(scrollParent) ? scrollParent : []) : scrollParent;
    var updatedList = list.concat(target);
    return isBody ? updatedList : // $FlowFixMe[incompatible-call]: isBody tells us target will be an HTMLElement here
    updatedList.concat(listScrollParents(getParentNode(target)));
  }

  function rectToClientRect(rect) {
    return Object.assign({}, rect, {
      left: rect.x,
      top: rect.y,
      right: rect.x + rect.width,
      bottom: rect.y + rect.height
    });
  }

  function getInnerBoundingClientRect(element) {
    var rect = getBoundingClientRect(element);
    rect.top = rect.top + element.clientTop;
    rect.left = rect.left + element.clientLeft;
    rect.bottom = rect.top + element.clientHeight;
    rect.right = rect.left + element.clientWidth;
    rect.width = element.clientWidth;
    rect.height = element.clientHeight;
    rect.x = rect.left;
    rect.y = rect.top;
    return rect;
  }

  function getClientRectFromMixedType(element, clippingParent) {
    return clippingParent === viewport ? rectToClientRect(getViewportRect(element)) : isElement$1(clippingParent) ? getInnerBoundingClientRect(clippingParent) : rectToClientRect(getDocumentRect(getDocumentElement(element)));
  } // A "clipping parent" is an overflowable container with the characteristic of
  // clipping (or hiding) overflowing elements with a position different from
  // `initial`


  function getClippingParents(element) {
    var clippingParents = listScrollParents(getParentNode(element));
    var canEscapeClipping = ['absolute', 'fixed'].indexOf(getComputedStyle$1(element).position) >= 0;
    var clipperElement = canEscapeClipping && isHTMLElement(element) ? getOffsetParent(element) : element;

    if (!isElement$1(clipperElement)) {
      return [];
    } // $FlowFixMe[incompatible-return]: https://github.com/facebook/flow/issues/1414


    return clippingParents.filter(function (clippingParent) {
      return isElement$1(clippingParent) && contains$1(clippingParent, clipperElement) && getNodeName(clippingParent) !== 'body';
    });
  } // Gets the maximum area that the element is visible in due to any number of
  // clipping parents


  function getClippingRect(element, boundary, rootBoundary) {
    var mainClippingParents = boundary === 'clippingParents' ? getClippingParents(element) : [].concat(boundary);
    var clippingParents = [].concat(mainClippingParents, [rootBoundary]);
    var firstClippingParent = clippingParents[0];
    var clippingRect = clippingParents.reduce(function (accRect, clippingParent) {
      var rect = getClientRectFromMixedType(element, clippingParent);
      accRect.top = max(rect.top, accRect.top);
      accRect.right = min(rect.right, accRect.right);
      accRect.bottom = min(rect.bottom, accRect.bottom);
      accRect.left = max(rect.left, accRect.left);
      return accRect;
    }, getClientRectFromMixedType(element, firstClippingParent));
    clippingRect.width = clippingRect.right - clippingRect.left;
    clippingRect.height = clippingRect.bottom - clippingRect.top;
    clippingRect.x = clippingRect.left;
    clippingRect.y = clippingRect.top;
    return clippingRect;
  }

  function computeOffsets(_ref) {
    var reference = _ref.reference,
        element = _ref.element,
        placement = _ref.placement;
    var basePlacement = placement ? getBasePlacement(placement) : null;
    var variation = placement ? getVariation(placement) : null;
    var commonX = reference.x + reference.width / 2 - element.width / 2;
    var commonY = reference.y + reference.height / 2 - element.height / 2;
    var offsets;

    switch (basePlacement) {
      case top$1:
        offsets = {
          x: commonX,
          y: reference.y - element.height
        };
        break;

      case bottom$1:
        offsets = {
          x: commonX,
          y: reference.y + reference.height
        };
        break;

      case right$1:
        offsets = {
          x: reference.x + reference.width,
          y: commonY
        };
        break;

      case left$1:
        offsets = {
          x: reference.x - element.width,
          y: commonY
        };
        break;

      default:
        offsets = {
          x: reference.x,
          y: reference.y
        };
    }

    var mainAxis = basePlacement ? getMainAxisFromPlacement(basePlacement) : null;

    if (mainAxis != null) {
      var len = mainAxis === 'y' ? 'height' : 'width';

      switch (variation) {
        case start$1:
          offsets[mainAxis] = offsets[mainAxis] - (reference[len] / 2 - element[len] / 2);
          break;

        case end:
          offsets[mainAxis] = offsets[mainAxis] + (reference[len] / 2 - element[len] / 2);
          break;
      }
    }

    return offsets;
  }

  function detectOverflow(state, options) {
    if (options === void 0) {
      options = {};
    }

    var _options = options,
        _options$placement = _options.placement,
        placement = _options$placement === void 0 ? state.placement : _options$placement,
        _options$boundary = _options.boundary,
        boundary = _options$boundary === void 0 ? clippingParents : _options$boundary,
        _options$rootBoundary = _options.rootBoundary,
        rootBoundary = _options$rootBoundary === void 0 ? viewport : _options$rootBoundary,
        _options$elementConte = _options.elementContext,
        elementContext = _options$elementConte === void 0 ? popper : _options$elementConte,
        _options$altBoundary = _options.altBoundary,
        altBoundary = _options$altBoundary === void 0 ? false : _options$altBoundary,
        _options$padding = _options.padding,
        padding = _options$padding === void 0 ? 0 : _options$padding;
    var paddingObject = mergePaddingObject(typeof padding !== 'number' ? padding : expandToHashMap(padding, basePlacements));
    var altContext = elementContext === popper ? reference : popper;
    var popperRect = state.rects.popper;
    var element = state.elements[altBoundary ? altContext : elementContext];
    var clippingClientRect = getClippingRect(isElement$1(element) ? element : element.contextElement || getDocumentElement(state.elements.popper), boundary, rootBoundary);
    var referenceClientRect = getBoundingClientRect(state.elements.reference);
    var popperOffsets = computeOffsets({
      reference: referenceClientRect,
      element: popperRect,
      strategy: 'absolute',
      placement: placement
    });
    var popperClientRect = rectToClientRect(Object.assign({}, popperRect, popperOffsets));
    var elementClientRect = elementContext === popper ? popperClientRect : referenceClientRect; // positive = overflowing the clipping rect
    // 0 or negative = within the clipping rect

    var overflowOffsets = {
      top: clippingClientRect.top - elementClientRect.top + paddingObject.top,
      bottom: elementClientRect.bottom - clippingClientRect.bottom + paddingObject.bottom,
      left: clippingClientRect.left - elementClientRect.left + paddingObject.left,
      right: elementClientRect.right - clippingClientRect.right + paddingObject.right
    };
    var offsetData = state.modifiersData.offset; // Offsets can be applied only to the popper element

    if (elementContext === popper && offsetData) {
      var offset = offsetData[placement];
      Object.keys(overflowOffsets).forEach(function (key) {
        var multiply = [right$1, bottom$1].indexOf(key) >= 0 ? 1 : -1;
        var axis = [top$1, bottom$1].indexOf(key) >= 0 ? 'y' : 'x';
        overflowOffsets[key] += offset[axis] * multiply;
      });
    }

    return overflowOffsets;
  }

  function computeAutoPlacement(state, options) {
    if (options === void 0) {
      options = {};
    }

    var _options = options,
        placement = _options.placement,
        boundary = _options.boundary,
        rootBoundary = _options.rootBoundary,
        padding = _options.padding,
        flipVariations = _options.flipVariations,
        _options$allowedAutoP = _options.allowedAutoPlacements,
        allowedAutoPlacements = _options$allowedAutoP === void 0 ? placements : _options$allowedAutoP;
    var variation = getVariation(placement);
    var placements$1 = variation ? flipVariations ? variationPlacements : variationPlacements.filter(function (placement) {
      return getVariation(placement) === variation;
    }) : basePlacements;
    var allowedPlacements = placements$1.filter(function (placement) {
      return allowedAutoPlacements.indexOf(placement) >= 0;
    });

    if (allowedPlacements.length === 0) {
      allowedPlacements = placements$1;

      if (process.env.NODE_ENV !== "production") {
        console.error(['Popper: The `allowedAutoPlacements` option did not allow any', 'placements. Ensure the `placement` option matches the variation', 'of the allowed placements.', 'For example, "auto" cannot be used to allow "bottom-start".', 'Use "auto-start" instead.'].join(' '));
      }
    } // $FlowFixMe[incompatible-type]: Flow seems to have problems with two array unions...


    var overflows = allowedPlacements.reduce(function (acc, placement) {
      acc[placement] = detectOverflow(state, {
        placement: placement,
        boundary: boundary,
        rootBoundary: rootBoundary,
        padding: padding
      })[getBasePlacement(placement)];
      return acc;
    }, {});
    return Object.keys(overflows).sort(function (a, b) {
      return overflows[a] - overflows[b];
    });
  }

  function getExpandedFallbackPlacements(placement) {
    if (getBasePlacement(placement) === auto) {
      return [];
    }

    var oppositePlacement = getOppositePlacement(placement);
    return [getOppositeVariationPlacement(placement), oppositePlacement, getOppositeVariationPlacement(oppositePlacement)];
  }

  function flip(_ref) {
    var state = _ref.state,
        options = _ref.options,
        name = _ref.name;

    if (state.modifiersData[name]._skip) {
      return;
    }

    var _options$mainAxis = options.mainAxis,
        checkMainAxis = _options$mainAxis === void 0 ? true : _options$mainAxis,
        _options$altAxis = options.altAxis,
        checkAltAxis = _options$altAxis === void 0 ? true : _options$altAxis,
        specifiedFallbackPlacements = options.fallbackPlacements,
        padding = options.padding,
        boundary = options.boundary,
        rootBoundary = options.rootBoundary,
        altBoundary = options.altBoundary,
        _options$flipVariatio = options.flipVariations,
        flipVariations = _options$flipVariatio === void 0 ? true : _options$flipVariatio,
        allowedAutoPlacements = options.allowedAutoPlacements;
    var preferredPlacement = state.options.placement;
    var basePlacement = getBasePlacement(preferredPlacement);
    var isBasePlacement = basePlacement === preferredPlacement;
    var fallbackPlacements = specifiedFallbackPlacements || (isBasePlacement || !flipVariations ? [getOppositePlacement(preferredPlacement)] : getExpandedFallbackPlacements(preferredPlacement));
    var placements = [preferredPlacement].concat(fallbackPlacements).reduce(function (acc, placement) {
      return acc.concat(getBasePlacement(placement) === auto ? computeAutoPlacement(state, {
        placement: placement,
        boundary: boundary,
        rootBoundary: rootBoundary,
        padding: padding,
        flipVariations: flipVariations,
        allowedAutoPlacements: allowedAutoPlacements
      }) : placement);
    }, []);
    var referenceRect = state.rects.reference;
    var popperRect = state.rects.popper;
    var checksMap = new Map();
    var makeFallbackChecks = true;
    var firstFittingPlacement = placements[0];

    for (var i = 0; i < placements.length; i++) {
      var placement = placements[i];

      var _basePlacement = getBasePlacement(placement);

      var isStartVariation = getVariation(placement) === start$1;
      var isVertical = [top$1, bottom$1].indexOf(_basePlacement) >= 0;
      var len = isVertical ? 'width' : 'height';
      var overflow = detectOverflow(state, {
        placement: placement,
        boundary: boundary,
        rootBoundary: rootBoundary,
        altBoundary: altBoundary,
        padding: padding
      });
      var mainVariationSide = isVertical ? isStartVariation ? right$1 : left$1 : isStartVariation ? bottom$1 : top$1;

      if (referenceRect[len] > popperRect[len]) {
        mainVariationSide = getOppositePlacement(mainVariationSide);
      }

      var altVariationSide = getOppositePlacement(mainVariationSide);
      var checks = [];

      if (checkMainAxis) {
        checks.push(overflow[_basePlacement] <= 0);
      }

      if (checkAltAxis) {
        checks.push(overflow[mainVariationSide] <= 0, overflow[altVariationSide] <= 0);
      }

      if (checks.every(function (check) {
        return check;
      })) {
        firstFittingPlacement = placement;
        makeFallbackChecks = false;
        break;
      }

      checksMap.set(placement, checks);
    }

    if (makeFallbackChecks) {
      // `2` may be desired in some cases – research later
      var numberOfChecks = flipVariations ? 3 : 1;

      var _loop = function _loop(_i) {
        var fittingPlacement = placements.find(function (placement) {
          var checks = checksMap.get(placement);

          if (checks) {
            return checks.slice(0, _i).every(function (check) {
              return check;
            });
          }
        });

        if (fittingPlacement) {
          firstFittingPlacement = fittingPlacement;
          return "break";
        }
      };

      for (var _i = numberOfChecks; _i > 0; _i--) {
        var _ret = _loop(_i);

        if (_ret === "break") break;
      }
    }

    if (state.placement !== firstFittingPlacement) {
      state.modifiersData[name]._skip = true;
      state.placement = firstFittingPlacement;
      state.reset = true;
    }
  } // eslint-disable-next-line import/no-unused-modules


  var flip$1 = {
    name: 'flip',
    enabled: true,
    phase: 'main',
    fn: flip,
    requiresIfExists: ['offset'],
    data: {
      _skip: false
    }
  };

  function getSideOffsets(overflow, rect, preventedOffsets) {
    if (preventedOffsets === void 0) {
      preventedOffsets = {
        x: 0,
        y: 0
      };
    }

    return {
      top: overflow.top - rect.height - preventedOffsets.y,
      right: overflow.right - rect.width + preventedOffsets.x,
      bottom: overflow.bottom - rect.height + preventedOffsets.y,
      left: overflow.left - rect.width - preventedOffsets.x
    };
  }

  function isAnySideFullyClipped(overflow) {
    return [top$1, right$1, bottom$1, left$1].some(function (side) {
      return overflow[side] >= 0;
    });
  }

  function hide(_ref) {
    var state = _ref.state,
        name = _ref.name;
    var referenceRect = state.rects.reference;
    var popperRect = state.rects.popper;
    var preventedOffsets = state.modifiersData.preventOverflow;
    var referenceOverflow = detectOverflow(state, {
      elementContext: 'reference'
    });
    var popperAltOverflow = detectOverflow(state, {
      altBoundary: true
    });
    var referenceClippingOffsets = getSideOffsets(referenceOverflow, referenceRect);
    var popperEscapeOffsets = getSideOffsets(popperAltOverflow, popperRect, preventedOffsets);
    var isReferenceHidden = isAnySideFullyClipped(referenceClippingOffsets);
    var hasPopperEscaped = isAnySideFullyClipped(popperEscapeOffsets);
    state.modifiersData[name] = {
      referenceClippingOffsets: referenceClippingOffsets,
      popperEscapeOffsets: popperEscapeOffsets,
      isReferenceHidden: isReferenceHidden,
      hasPopperEscaped: hasPopperEscaped
    };
    state.attributes.popper = Object.assign({}, state.attributes.popper, {
      'data-popper-reference-hidden': isReferenceHidden,
      'data-popper-escaped': hasPopperEscaped
    });
  } // eslint-disable-next-line import/no-unused-modules


  var hide$1 = {
    name: 'hide',
    enabled: true,
    phase: 'main',
    requiresIfExists: ['preventOverflow'],
    fn: hide
  };

  function distanceAndSkiddingToXY(placement, rects, offset) {
    var basePlacement = getBasePlacement(placement);
    var invertDistance = [left$1, top$1].indexOf(basePlacement) >= 0 ? -1 : 1;

    var _ref = typeof offset === 'function' ? offset(Object.assign({}, rects, {
      placement: placement
    })) : offset,
        skidding = _ref[0],
        distance = _ref[1];

    skidding = skidding || 0;
    distance = (distance || 0) * invertDistance;
    return [left$1, right$1].indexOf(basePlacement) >= 0 ? {
      x: distance,
      y: skidding
    } : {
      x: skidding,
      y: distance
    };
  }

  function offset(_ref2) {
    var state = _ref2.state,
        options = _ref2.options,
        name = _ref2.name;
    var _options$offset = options.offset,
        offset = _options$offset === void 0 ? [0, 0] : _options$offset;
    var data = placements.reduce(function (acc, placement) {
      acc[placement] = distanceAndSkiddingToXY(placement, state.rects, offset);
      return acc;
    }, {});
    var _data$state$placement = data[state.placement],
        x = _data$state$placement.x,
        y = _data$state$placement.y;

    if (state.modifiersData.popperOffsets != null) {
      state.modifiersData.popperOffsets.x += x;
      state.modifiersData.popperOffsets.y += y;
    }

    state.modifiersData[name] = data;
  } // eslint-disable-next-line import/no-unused-modules


  var offset$1 = {
    name: 'offset',
    enabled: true,
    phase: 'main',
    requires: ['popperOffsets'],
    fn: offset
  };

  function popperOffsets(_ref) {
    var state = _ref.state,
        name = _ref.name; // Offsets are the actual position the popper needs to have to be
    // properly positioned near its reference element
    // This is the most basic placement, and will be adjusted by
    // the modifiers in the next step

    state.modifiersData[name] = computeOffsets({
      reference: state.rects.reference,
      element: state.rects.popper,
      strategy: 'absolute',
      placement: state.placement
    });
  } // eslint-disable-next-line import/no-unused-modules


  var popperOffsets$1 = {
    name: 'popperOffsets',
    enabled: true,
    phase: 'read',
    fn: popperOffsets,
    data: {}
  };

  function getAltAxis(axis) {
    return axis === 'x' ? 'y' : 'x';
  }

  function preventOverflow(_ref) {
    var state = _ref.state,
        options = _ref.options,
        name = _ref.name;
    var _options$mainAxis = options.mainAxis,
        checkMainAxis = _options$mainAxis === void 0 ? true : _options$mainAxis,
        _options$altAxis = options.altAxis,
        checkAltAxis = _options$altAxis === void 0 ? false : _options$altAxis,
        boundary = options.boundary,
        rootBoundary = options.rootBoundary,
        altBoundary = options.altBoundary,
        padding = options.padding,
        _options$tether = options.tether,
        tether = _options$tether === void 0 ? true : _options$tether,
        _options$tetherOffset = options.tetherOffset,
        tetherOffset = _options$tetherOffset === void 0 ? 0 : _options$tetherOffset;
    var overflow = detectOverflow(state, {
      boundary: boundary,
      rootBoundary: rootBoundary,
      padding: padding,
      altBoundary: altBoundary
    });
    var basePlacement = getBasePlacement(state.placement);
    var variation = getVariation(state.placement);
    var isBasePlacement = !variation;
    var mainAxis = getMainAxisFromPlacement(basePlacement);
    var altAxis = getAltAxis(mainAxis);
    var popperOffsets = state.modifiersData.popperOffsets;
    var referenceRect = state.rects.reference;
    var popperRect = state.rects.popper;
    var tetherOffsetValue = typeof tetherOffset === 'function' ? tetherOffset(Object.assign({}, state.rects, {
      placement: state.placement
    })) : tetherOffset;
    var normalizedTetherOffsetValue = typeof tetherOffsetValue === 'number' ? {
      mainAxis: tetherOffsetValue,
      altAxis: tetherOffsetValue
    } : Object.assign({
      mainAxis: 0,
      altAxis: 0
    }, tetherOffsetValue);
    var offsetModifierState = state.modifiersData.offset ? state.modifiersData.offset[state.placement] : null;
    var data = {
      x: 0,
      y: 0
    };

    if (!popperOffsets) {
      return;
    }

    if (checkMainAxis) {
      var _offsetModifierState$;

      var mainSide = mainAxis === 'y' ? top$1 : left$1;
      var altSide = mainAxis === 'y' ? bottom$1 : right$1;
      var len = mainAxis === 'y' ? 'height' : 'width';
      var offset = popperOffsets[mainAxis];
      var min$1 = offset + overflow[mainSide];
      var max$1 = offset - overflow[altSide];
      var additive = tether ? -popperRect[len] / 2 : 0;
      var minLen = variation === start$1 ? referenceRect[len] : popperRect[len];
      var maxLen = variation === start$1 ? -popperRect[len] : -referenceRect[len]; // We need to include the arrow in the calculation so the arrow doesn't go
      // outside the reference bounds

      var arrowElement = state.elements.arrow;
      var arrowRect = tether && arrowElement ? getLayoutRect(arrowElement) : {
        width: 0,
        height: 0
      };
      var arrowPaddingObject = state.modifiersData['arrow#persistent'] ? state.modifiersData['arrow#persistent'].padding : getFreshSideObject();
      var arrowPaddingMin = arrowPaddingObject[mainSide];
      var arrowPaddingMax = arrowPaddingObject[altSide]; // If the reference length is smaller than the arrow length, we don't want
      // to include its full size in the calculation. If the reference is small
      // and near the edge of a boundary, the popper can overflow even if the
      // reference is not overflowing as well (e.g. virtual elements with no
      // width or height)

      var arrowLen = within$1(0, referenceRect[len], arrowRect[len]);
      var minOffset = isBasePlacement ? referenceRect[len] / 2 - additive - arrowLen - arrowPaddingMin - normalizedTetherOffsetValue.mainAxis : minLen - arrowLen - arrowPaddingMin - normalizedTetherOffsetValue.mainAxis;
      var maxOffset = isBasePlacement ? -referenceRect[len] / 2 + additive + arrowLen + arrowPaddingMax + normalizedTetherOffsetValue.mainAxis : maxLen + arrowLen + arrowPaddingMax + normalizedTetherOffsetValue.mainAxis;
      var arrowOffsetParent = state.elements.arrow && getOffsetParent(state.elements.arrow);
      var clientOffset = arrowOffsetParent ? mainAxis === 'y' ? arrowOffsetParent.clientTop || 0 : arrowOffsetParent.clientLeft || 0 : 0;
      var offsetModifierValue = (_offsetModifierState$ = offsetModifierState == null ? void 0 : offsetModifierState[mainAxis]) != null ? _offsetModifierState$ : 0;
      var tetherMin = offset + minOffset - offsetModifierValue - clientOffset;
      var tetherMax = offset + maxOffset - offsetModifierValue;
      var preventedOffset = within$1(tether ? min(min$1, tetherMin) : min$1, offset, tether ? max(max$1, tetherMax) : max$1);
      popperOffsets[mainAxis] = preventedOffset;
      data[mainAxis] = preventedOffset - offset;
    }

    if (checkAltAxis) {
      var _offsetModifierState$2;

      var _mainSide = mainAxis === 'x' ? top$1 : left$1;

      var _altSide = mainAxis === 'x' ? bottom$1 : right$1;

      var _offset = popperOffsets[altAxis];

      var _len = altAxis === 'y' ? 'height' : 'width';

      var _min = _offset + overflow[_mainSide];

      var _max = _offset - overflow[_altSide];

      var isOriginSide = [top$1, left$1].indexOf(basePlacement) !== -1;

      var _offsetModifierValue = (_offsetModifierState$2 = offsetModifierState == null ? void 0 : offsetModifierState[altAxis]) != null ? _offsetModifierState$2 : 0;

      var _tetherMin = isOriginSide ? _min : _offset - referenceRect[_len] - popperRect[_len] - _offsetModifierValue + normalizedTetherOffsetValue.altAxis;

      var _tetherMax = isOriginSide ? _offset + referenceRect[_len] + popperRect[_len] - _offsetModifierValue - normalizedTetherOffsetValue.altAxis : _max;

      var _preventedOffset = tether && isOriginSide ? withinMaxClamp(_tetherMin, _offset, _tetherMax) : within$1(tether ? _tetherMin : _min, _offset, tether ? _tetherMax : _max);

      popperOffsets[altAxis] = _preventedOffset;
      data[altAxis] = _preventedOffset - _offset;
    }

    state.modifiersData[name] = data;
  } // eslint-disable-next-line import/no-unused-modules


  var preventOverflow$1 = {
    name: 'preventOverflow',
    enabled: true,
    phase: 'main',
    fn: preventOverflow,
    requiresIfExists: ['offset']
  };

  function getHTMLElementScroll(element) {
    return {
      scrollLeft: element.scrollLeft,
      scrollTop: element.scrollTop
    };
  }

  function getNodeScroll(node) {
    if (node === getWindow(node) || !isHTMLElement(node)) {
      return getWindowScroll(node);
    } else {
      return getHTMLElementScroll(node);
    }
  }

  function isElementScaled(element) {
    var rect = element.getBoundingClientRect();
    var scaleX = round(rect.width) / element.offsetWidth || 1;
    var scaleY = round(rect.height) / element.offsetHeight || 1;
    return scaleX !== 1 || scaleY !== 1;
  } // Returns the composite rect of an element relative to its offsetParent.
  // Composite means it takes into account transforms as well as layout.


  function getCompositeRect(elementOrVirtualElement, offsetParent, isFixed) {
    if (isFixed === void 0) {
      isFixed = false;
    }

    var isOffsetParentAnElement = isHTMLElement(offsetParent);
    var offsetParentIsScaled = isHTMLElement(offsetParent) && isElementScaled(offsetParent);
    var documentElement = getDocumentElement(offsetParent);
    var rect = getBoundingClientRect(elementOrVirtualElement, offsetParentIsScaled);
    var scroll = {
      scrollLeft: 0,
      scrollTop: 0
    };
    var offsets = {
      x: 0,
      y: 0
    };

    if (isOffsetParentAnElement || !isOffsetParentAnElement && !isFixed) {
      if (getNodeName(offsetParent) !== 'body' || // https://github.com/popperjs/popper-core/issues/1078
      isScrollParent(documentElement)) {
        scroll = getNodeScroll(offsetParent);
      }

      if (isHTMLElement(offsetParent)) {
        offsets = getBoundingClientRect(offsetParent, true);
        offsets.x += offsetParent.clientLeft;
        offsets.y += offsetParent.clientTop;
      } else if (documentElement) {
        offsets.x = getWindowScrollBarX(documentElement);
      }
    }

    return {
      x: rect.left + scroll.scrollLeft - offsets.x,
      y: rect.top + scroll.scrollTop - offsets.y,
      width: rect.width,
      height: rect.height
    };
  }

  function order(modifiers) {
    var map = new Map();
    var visited = new Set();
    var result = [];
    modifiers.forEach(function (modifier) {
      map.set(modifier.name, modifier);
    }); // On visiting object, check for its dependencies and visit them recursively

    function sort(modifier) {
      visited.add(modifier.name);
      var requires = [].concat(modifier.requires || [], modifier.requiresIfExists || []);
      requires.forEach(function (dep) {
        if (!visited.has(dep)) {
          var depModifier = map.get(dep);

          if (depModifier) {
            sort(depModifier);
          }
        }
      });
      result.push(modifier);
    }

    modifiers.forEach(function (modifier) {
      if (!visited.has(modifier.name)) {
        // check for visited object
        sort(modifier);
      }
    });
    return result;
  }

  function orderModifiers(modifiers) {
    // order based on dependencies
    var orderedModifiers = order(modifiers); // order based on phase

    return modifierPhases.reduce(function (acc, phase) {
      return acc.concat(orderedModifiers.filter(function (modifier) {
        return modifier.phase === phase;
      }));
    }, []);
  }

  function debounce(fn) {
    var pending;
    return function () {
      if (!pending) {
        pending = new Promise(function (resolve) {
          Promise.resolve().then(function () {
            pending = undefined;
            resolve(fn());
          });
        });
      }

      return pending;
    };
  }

  function format$1(str) {
    for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
      args[_key - 1] = arguments[_key];
    }

    return [].concat(args).reduce(function (p, c) {
      return p.replace(/%s/, c);
    }, str);
  }

  var INVALID_MODIFIER_ERROR = 'Popper: modifier "%s" provided an invalid %s property, expected %s but got %s';
  var MISSING_DEPENDENCY_ERROR = 'Popper: modifier "%s" requires "%s", but "%s" modifier is not available';
  var VALID_PROPERTIES = ['name', 'enabled', 'phase', 'fn', 'effect', 'requires', 'options'];
  function validateModifiers(modifiers) {
    modifiers.forEach(function (modifier) {
      [].concat(Object.keys(modifier), VALID_PROPERTIES) // IE11-compatible replacement for `new Set(iterable)`
      .filter(function (value, index, self) {
        return self.indexOf(value) === index;
      }).forEach(function (key) {
        switch (key) {
          case 'name':
            if (typeof modifier.name !== 'string') {
              console.error(format$1(INVALID_MODIFIER_ERROR, String(modifier.name), '"name"', '"string"', "\"" + String(modifier.name) + "\""));
            }

            break;

          case 'enabled':
            if (typeof modifier.enabled !== 'boolean') {
              console.error(format$1(INVALID_MODIFIER_ERROR, modifier.name, '"enabled"', '"boolean"', "\"" + String(modifier.enabled) + "\""));
            }

            break;

          case 'phase':
            if (modifierPhases.indexOf(modifier.phase) < 0) {
              console.error(format$1(INVALID_MODIFIER_ERROR, modifier.name, '"phase"', "either " + modifierPhases.join(', '), "\"" + String(modifier.phase) + "\""));
            }

            break;

          case 'fn':
            if (typeof modifier.fn !== 'function') {
              console.error(format$1(INVALID_MODIFIER_ERROR, modifier.name, '"fn"', '"function"', "\"" + String(modifier.fn) + "\""));
            }

            break;

          case 'effect':
            if (modifier.effect != null && typeof modifier.effect !== 'function') {
              console.error(format$1(INVALID_MODIFIER_ERROR, modifier.name, '"effect"', '"function"', "\"" + String(modifier.fn) + "\""));
            }

            break;

          case 'requires':
            if (modifier.requires != null && !Array.isArray(modifier.requires)) {
              console.error(format$1(INVALID_MODIFIER_ERROR, modifier.name, '"requires"', '"array"', "\"" + String(modifier.requires) + "\""));
            }

            break;

          case 'requiresIfExists':
            if (!Array.isArray(modifier.requiresIfExists)) {
              console.error(format$1(INVALID_MODIFIER_ERROR, modifier.name, '"requiresIfExists"', '"array"', "\"" + String(modifier.requiresIfExists) + "\""));
            }

            break;

          case 'options':
          case 'data':
            break;

          default:
            console.error("PopperJS: an invalid property has been provided to the \"" + modifier.name + "\" modifier, valid properties are " + VALID_PROPERTIES.map(function (s) {
              return "\"" + s + "\"";
            }).join(', ') + "; but \"" + key + "\" was provided.");
        }

        modifier.requires && modifier.requires.forEach(function (requirement) {
          if (modifiers.find(function (mod) {
            return mod.name === requirement;
          }) == null) {
            console.error(format$1(MISSING_DEPENDENCY_ERROR, String(modifier.name), requirement, requirement));
          }
        });
      });
    });
  }

  function uniqueBy(arr, fn) {
    var identifiers = new Set();
    return arr.filter(function (item) {
      var identifier = fn(item);

      if (!identifiers.has(identifier)) {
        identifiers.add(identifier);
        return true;
      }
    });
  }

  function mergeByName(modifiers) {
    var merged = modifiers.reduce(function (merged, current) {
      var existing = merged[current.name];
      merged[current.name] = existing ? Object.assign({}, existing, current, {
        options: Object.assign({}, existing.options, current.options),
        data: Object.assign({}, existing.data, current.data)
      }) : current;
      return merged;
    }, {}); // IE11 does not support Object.values

    return Object.keys(merged).map(function (key) {
      return merged[key];
    });
  }

  var INVALID_ELEMENT_ERROR = 'Popper: Invalid reference or popper argument provided. They must be either a DOM element or virtual element.';
  var INFINITE_LOOP_ERROR = 'Popper: An infinite loop in the modifiers cycle has been detected! The cycle has been interrupted to prevent a browser crash.';
  var DEFAULT_OPTIONS = {
    placement: 'bottom',
    modifiers: [],
    strategy: 'absolute'
  };

  function areValidElements() {
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    return !args.some(function (element) {
      return !(element && typeof element.getBoundingClientRect === 'function');
    });
  }

  function popperGenerator(generatorOptions) {
    if (generatorOptions === void 0) {
      generatorOptions = {};
    }

    var _generatorOptions = generatorOptions,
        _generatorOptions$def = _generatorOptions.defaultModifiers,
        defaultModifiers = _generatorOptions$def === void 0 ? [] : _generatorOptions$def,
        _generatorOptions$def2 = _generatorOptions.defaultOptions,
        defaultOptions = _generatorOptions$def2 === void 0 ? DEFAULT_OPTIONS : _generatorOptions$def2;
    return function createPopper(reference, popper, options) {
      if (options === void 0) {
        options = defaultOptions;
      }

      var state = {
        placement: 'bottom',
        orderedModifiers: [],
        options: Object.assign({}, DEFAULT_OPTIONS, defaultOptions),
        modifiersData: {},
        elements: {
          reference: reference,
          popper: popper
        },
        attributes: {},
        styles: {}
      };
      var effectCleanupFns = [];
      var isDestroyed = false;
      var instance = {
        state: state,
        setOptions: function setOptions(setOptionsAction) {
          var options = typeof setOptionsAction === 'function' ? setOptionsAction(state.options) : setOptionsAction;
          cleanupModifierEffects();
          state.options = Object.assign({}, defaultOptions, state.options, options);
          state.scrollParents = {
            reference: isElement$1(reference) ? listScrollParents(reference) : reference.contextElement ? listScrollParents(reference.contextElement) : [],
            popper: listScrollParents(popper)
          }; // Orders the modifiers based on their dependencies and `phase`
          // properties

          var orderedModifiers = orderModifiers(mergeByName([].concat(defaultModifiers, state.options.modifiers))); // Strip out disabled modifiers

          state.orderedModifiers = orderedModifiers.filter(function (m) {
            return m.enabled;
          }); // Validate the provided modifiers so that the consumer will get warned
          // if one of the modifiers is invalid for any reason

          if (process.env.NODE_ENV !== "production") {
            var modifiers = uniqueBy([].concat(orderedModifiers, state.options.modifiers), function (_ref) {
              var name = _ref.name;
              return name;
            });
            validateModifiers(modifiers);

            if (getBasePlacement(state.options.placement) === auto) {
              var flipModifier = state.orderedModifiers.find(function (_ref2) {
                var name = _ref2.name;
                return name === 'flip';
              });

              if (!flipModifier) {
                console.error(['Popper: "auto" placements require the "flip" modifier be', 'present and enabled to work.'].join(' '));
              }
            }

            var _getComputedStyle = getComputedStyle$1(popper),
                marginTop = _getComputedStyle.marginTop,
                marginRight = _getComputedStyle.marginRight,
                marginBottom = _getComputedStyle.marginBottom,
                marginLeft = _getComputedStyle.marginLeft; // We no longer take into account `margins` on the popper, and it can
            // cause bugs with positioning, so we'll warn the consumer


            if ([marginTop, marginRight, marginBottom, marginLeft].some(function (margin) {
              return parseFloat(margin);
            })) {
              console.warn(['Popper: CSS "margin" styles cannot be used to apply padding', 'between the popper and its reference element or boundary.', 'To replicate margin, use the `offset` modifier, as well as', 'the `padding` option in the `preventOverflow` and `flip`', 'modifiers.'].join(' '));
            }
          }

          runModifierEffects();
          return instance.update();
        },
        // Sync update – it will always be executed, even if not necessary. This
        // is useful for low frequency updates where sync behavior simplifies the
        // logic.
        // For high frequency updates (e.g. `resize` and `scroll` events), always
        // prefer the async Popper#update method
        forceUpdate: function forceUpdate() {
          if (isDestroyed) {
            return;
          }

          var _state$elements = state.elements,
              reference = _state$elements.reference,
              popper = _state$elements.popper; // Don't proceed if `reference` or `popper` are not valid elements
          // anymore

          if (!areValidElements(reference, popper)) {
            if (process.env.NODE_ENV !== "production") {
              console.error(INVALID_ELEMENT_ERROR);
            }

            return;
          } // Store the reference and popper rects to be read by modifiers


          state.rects = {
            reference: getCompositeRect(reference, getOffsetParent(popper), state.options.strategy === 'fixed'),
            popper: getLayoutRect(popper)
          }; // Modifiers have the ability to reset the current update cycle. The
          // most common use case for this is the `flip` modifier changing the
          // placement, which then needs to re-run all the modifiers, because the
          // logic was previously ran for the previous placement and is therefore
          // stale/incorrect

          state.reset = false;
          state.placement = state.options.placement; // On each update cycle, the `modifiersData` property for each modifier
          // is filled with the initial data specified by the modifier. This means
          // it doesn't persist and is fresh on each update.
          // To ensure persistent data, use `${name}#persistent`

          state.orderedModifiers.forEach(function (modifier) {
            return state.modifiersData[modifier.name] = Object.assign({}, modifier.data);
          });
          var __debug_loops__ = 0;

          for (var index = 0; index < state.orderedModifiers.length; index++) {
            if (process.env.NODE_ENV !== "production") {
              __debug_loops__ += 1;

              if (__debug_loops__ > 100) {
                console.error(INFINITE_LOOP_ERROR);
                break;
              }
            }

            if (state.reset === true) {
              state.reset = false;
              index = -1;
              continue;
            }

            var _state$orderedModifie = state.orderedModifiers[index],
                fn = _state$orderedModifie.fn,
                _state$orderedModifie2 = _state$orderedModifie.options,
                _options = _state$orderedModifie2 === void 0 ? {} : _state$orderedModifie2,
                name = _state$orderedModifie.name;

            if (typeof fn === 'function') {
              state = fn({
                state: state,
                options: _options,
                name: name,
                instance: instance
              }) || state;
            }
          }
        },
        // Async and optimistically optimized update – it will not be executed if
        // not necessary (debounced to run at most once-per-tick)
        update: debounce(function () {
          return new Promise(function (resolve) {
            instance.forceUpdate();
            resolve(state);
          });
        }),
        destroy: function destroy() {
          cleanupModifierEffects();
          isDestroyed = true;
        }
      };

      if (!areValidElements(reference, popper)) {
        if (process.env.NODE_ENV !== "production") {
          console.error(INVALID_ELEMENT_ERROR);
        }

        return instance;
      }

      instance.setOptions(options).then(function (state) {
        if (!isDestroyed && options.onFirstUpdate) {
          options.onFirstUpdate(state);
        }
      }); // Modifiers have the ability to execute arbitrary code before the first
      // update cycle runs. They will be executed in the same order as the update
      // cycle. This is useful when a modifier adds some persistent data that
      // other modifiers need to use, but the modifier is run after the dependent
      // one.

      function runModifierEffects() {
        state.orderedModifiers.forEach(function (_ref3) {
          var name = _ref3.name,
              _ref3$options = _ref3.options,
              options = _ref3$options === void 0 ? {} : _ref3$options,
              effect = _ref3.effect;

          if (typeof effect === 'function') {
            var cleanupFn = effect({
              state: state,
              name: name,
              instance: instance,
              options: options
            });

            var noopFn = function noopFn() {};

            effectCleanupFns.push(cleanupFn || noopFn);
          }
        });
      }

      function cleanupModifierEffects() {
        effectCleanupFns.forEach(function (fn) {
          return fn();
        });
        effectCleanupFns = [];
      }

      return instance;
    };
  }
  var createPopper$2 = /*#__PURE__*/popperGenerator(); // eslint-disable-next-line import/no-unused-modules

  var defaultModifiers$1 = [eventListeners, popperOffsets$1, computeStyles$1, applyStyles$1];
  var createPopper$1 = /*#__PURE__*/popperGenerator({
    defaultModifiers: defaultModifiers$1
  }); // eslint-disable-next-line import/no-unused-modules

  var defaultModifiers = [eventListeners, popperOffsets$1, computeStyles$1, applyStyles$1, offset$1, flip$1, preventOverflow$1, arrow$1, hide$1];
  var createPopper = /*#__PURE__*/popperGenerator({
    defaultModifiers: defaultModifiers
  }); // eslint-disable-next-line import/no-unused-modules

  var Popper = /*#__PURE__*/Object.freeze({
    __proto__: null,
    popperGenerator: popperGenerator,
    detectOverflow: detectOverflow,
    createPopperBase: createPopper$2,
    createPopper: createPopper,
    createPopperLite: createPopper$1,
    top: top$1,
    bottom: bottom$1,
    right: right$1,
    left: left$1,
    auto: auto,
    basePlacements: basePlacements,
    start: start$1,
    end: end,
    clippingParents: clippingParents,
    viewport: viewport,
    popper: popper,
    reference: reference,
    variationPlacements: variationPlacements,
    placements: placements,
    beforeRead: beforeRead,
    read: read,
    afterRead: afterRead,
    beforeMain: beforeMain,
    main: main,
    afterMain: afterMain,
    beforeWrite: beforeWrite,
    write: write,
    afterWrite: afterWrite,
    modifierPhases: modifierPhases,
    applyStyles: applyStyles$1,
    arrow: arrow$1,
    computeStyles: computeStyles$1,
    eventListeners: eventListeners,
    flip: flip$1,
    hide: hide$1,
    offset: offset$1,
    popperOffsets: popperOffsets$1,
    preventOverflow: preventOverflow$1
  });

  var _KEY_TO_DIRECTION;
  /**
   * --------------------------------------------------------------------------
   * Bootstrap (v5.1.3): util/index.js
   * Licensed under MIT (https://github.com/twbs/bootstrap/blob/main/LICENSE)
   * --------------------------------------------------------------------------
   */

  var MAX_UID = 1000000;
  var MILLISECONDS_MULTIPLIER = 1000;
  var TRANSITION_END = 'transitionend'; // Shoutout AngusCroll (https://goo.gl/pxwQGp)

  var toType = function toType(obj) {
    if (obj === null || obj === undefined) {
      return "".concat(obj);
    }

    return {}.toString.call(obj).match(/\s([a-z]+)/i)[1].toLowerCase();
  };
  /**
   * --------------------------------------------------------------------------
   * Public Util Api
   * --------------------------------------------------------------------------
   */


  var getUID = function getUID(prefix) {
    do {
      prefix += Math.floor(Math.random() * MAX_UID);
    } while (document.getElementById(prefix));

    return prefix;
  };

  var getSelector = function getSelector(element) {
    var selector = element.getAttribute('data-bs-target');

    if (!selector || selector === '#') {
      var hrefAttr = element.getAttribute('href'); // The only valid content that could double as a selector are IDs or classes,
      // so everything starting with `#` or `.`. If a "real" URL is used as the selector,
      // `document.querySelector` will rightfully complain it is invalid.
      // See https://github.com/twbs/bootstrap/issues/32273

      if (!hrefAttr || !hrefAttr.includes('#') && !hrefAttr.startsWith('.')) {
        return null;
      } // Just in case some CMS puts out a full URL with the anchor appended


      if (hrefAttr.includes('#') && !hrefAttr.startsWith('#')) {
        hrefAttr = "#".concat(hrefAttr.split('#')[1]);
      }

      selector = hrefAttr && hrefAttr !== '#' ? hrefAttr.trim() : null;
    }

    return selector;
  };

  var getSelectorFromElement = function getSelectorFromElement(element) {
    var selector = getSelector(element);

    if (selector) {
      return document.querySelector(selector) ? selector : null;
    }

    return null;
  };

  var getElementFromSelector = function getElementFromSelector(element) {
    var selector = getSelector(element);
    return selector ? document.querySelector(selector) : null;
  };

  var getTransitionDurationFromElement = function getTransitionDurationFromElement(element) {
    if (!element) {
      return 0;
    } // Get transition-duration of the element


    var _window$getComputedSt = window.getComputedStyle(element),
        transitionDuration = _window$getComputedSt.transitionDuration,
        transitionDelay = _window$getComputedSt.transitionDelay;

    var floatTransitionDuration = Number.parseFloat(transitionDuration);
    var floatTransitionDelay = Number.parseFloat(transitionDelay); // Return 0 if element or transition duration is not found

    if (!floatTransitionDuration && !floatTransitionDelay) {
      return 0;
    } // If multiple durations are defined, take the first


    transitionDuration = transitionDuration.split(',')[0];
    transitionDelay = transitionDelay.split(',')[0];
    return (Number.parseFloat(transitionDuration) + Number.parseFloat(transitionDelay)) * MILLISECONDS_MULTIPLIER;
  };

  var triggerTransitionEnd = function triggerTransitionEnd(element) {
    element.dispatchEvent(new Event(TRANSITION_END));
  };

  var isElement = function isElement(obj) {
    if (!obj || _typeof(obj) !== 'object') {
      return false;
    }

    if (typeof obj.jquery !== 'undefined') {
      obj = obj[0];
    }

    return typeof obj.nodeType !== 'undefined';
  };

  var getElement = function getElement(obj) {
    if (isElement(obj)) {
      // it's a jQuery object or a node element
      return obj.jquery ? obj[0] : obj;
    }

    if (typeof obj === 'string' && obj.length > 0) {
      return document.querySelector(obj);
    }

    return null;
  };

  var typeCheckConfig = function typeCheckConfig(componentName, config, configTypes) {
    Object.keys(configTypes).forEach(function (property) {
      var expectedTypes = configTypes[property];
      var value = config[property];
      var valueType = value && isElement(value) ? 'element' : toType(value);

      if (!new RegExp(expectedTypes).test(valueType)) {
        throw new TypeError("".concat(componentName.toUpperCase(), ": Option \"").concat(property, "\" provided type \"").concat(valueType, "\" but expected type \"").concat(expectedTypes, "\"."));
      }
    });
  };

  var isVisible = function isVisible(element) {
    if (!isElement(element) || element.getClientRects().length === 0) {
      return false;
    }

    return getComputedStyle(element).getPropertyValue('visibility') === 'visible';
  };

  var isDisabled = function isDisabled(element) {
    if (!element || element.nodeType !== Node.ELEMENT_NODE) {
      return true;
    }

    if (element.classList.contains('disabled')) {
      return true;
    }

    if (typeof element.disabled !== 'undefined') {
      return element.disabled;
    }

    return element.hasAttribute('disabled') && element.getAttribute('disabled') !== 'false';
  };

  var findShadowRoot = function findShadowRoot(element) {
    if (!document.documentElement.attachShadow) {
      return null;
    } // Can find the shadow root otherwise it'll return the document


    if (typeof element.getRootNode === 'function') {
      var root = element.getRootNode();
      return root instanceof ShadowRoot ? root : null;
    }

    if (element instanceof ShadowRoot) {
      return element;
    } // when we don't find a shadow root


    if (!element.parentNode) {
      return null;
    }

    return findShadowRoot(element.parentNode);
  };

  var noop$3 = function noop() {};
  /**
   * Trick to restart an element's animation
   *
   * @param {HTMLElement} element
   * @return void
   *
   * @see https://www.charistheo.io/blog/2021/02/restart-a-css-animation-with-javascript/#restarting-a-css-animation
   */


  var reflow = function reflow(element) {
    // eslint-disable-next-line no-unused-expressions
    element.offsetHeight;
  };

  var getjQuery = function getjQuery() {
    var _window = window,
        jQuery = _window.jQuery;

    if (jQuery && !document.body.hasAttribute('data-bs-no-jquery')) {
      return jQuery;
    }

    return null;
  };

  var DOMContentLoadedCallbacks = [];

  var onDOMContentLoaded = function onDOMContentLoaded(callback) {
    if (document.readyState === 'loading') {
      // add listener on the first call when the document is in loading state
      if (!DOMContentLoadedCallbacks.length) {
        document.addEventListener('DOMContentLoaded', function () {
          DOMContentLoadedCallbacks.forEach(function (callback) {
            return callback();
          });
        });
      }

      DOMContentLoadedCallbacks.push(callback);
    } else {
      callback();
    }
  };

  var isRTL = function isRTL() {
    return document.documentElement.dir === 'rtl';
  };

  var defineJQueryPlugin = function defineJQueryPlugin(plugin) {
    onDOMContentLoaded(function () {
      var $ = getjQuery();
      /* istanbul ignore if */

      if ($) {
        var name = plugin.NAME;
        var JQUERY_NO_CONFLICT = $.fn[name];
        $.fn[name] = plugin.jQueryInterface;
        $.fn[name].Constructor = plugin;

        $.fn[name].noConflict = function () {
          $.fn[name] = JQUERY_NO_CONFLICT;
          return plugin.jQueryInterface;
        };
      }
    });
  };

  var execute = function execute(callback) {
    if (typeof callback === 'function') {
      callback();
    }
  };

  var executeAfterTransition = function executeAfterTransition(callback, transitionElement) {
    var waitForTransition = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;

    if (!waitForTransition) {
      execute(callback);
      return;
    }

    var durationPadding = 5;
    var emulatedDuration = getTransitionDurationFromElement(transitionElement) + durationPadding;
    var called = false;

    var handler = function handler(_ref) {
      var target = _ref.target;

      if (target !== transitionElement) {
        return;
      }

      called = true;
      transitionElement.removeEventListener(TRANSITION_END, handler);
      execute(callback);
    };

    transitionElement.addEventListener(TRANSITION_END, handler);
    setTimeout(function () {
      if (!called) {
        triggerTransitionEnd(transitionElement);
      }
    }, emulatedDuration);
  };
  /**
   * Return the previous/next element of a list.
   *
   * @param {array} list    The list of elements
   * @param activeElement   The active element
   * @param shouldGetNext   Choose to get next or previous element
   * @param isCycleAllowed
   * @return {Element|elem} The proper element
   */


  var getNextActiveElement = function getNextActiveElement(list, activeElement, shouldGetNext, isCycleAllowed) {
    var index = list.indexOf(activeElement); // if the element does not exist in the list return an element depending on the direction and if cycle is allowed

    if (index === -1) {
      return list[!shouldGetNext && isCycleAllowed ? list.length - 1 : 0];
    }

    var listLength = list.length;
    index += shouldGetNext ? 1 : -1;

    if (isCycleAllowed) {
      index = (index + listLength) % listLength;
    }

    return list[Math.max(0, Math.min(index, listLength - 1))];
  };
  /**
   * --------------------------------------------------------------------------
   * Bootstrap (v5.1.3): dom/event-handler.js
   * Licensed under MIT (https://github.com/twbs/bootstrap/blob/main/LICENSE)
   * --------------------------------------------------------------------------
   */

  /**
   * ------------------------------------------------------------------------
   * Constants
   * ------------------------------------------------------------------------
   */


  var namespaceRegex = /[^.]*(?=\..*)\.|.*/;
  var stripNameRegex = /\..*/;
  var stripUidRegex = /::\d+$/;
  var eventRegistry = {}; // Events storage

  var uidEvent = 1;
  var customEvents = {
    mouseenter: 'mouseover',
    mouseleave: 'mouseout'
  };
  var customEventsRegex = /^(mouseenter|mouseleave)/i;
  var nativeEvents = new Set(['click', 'dblclick', 'mouseup', 'mousedown', 'contextmenu', 'mousewheel', 'DOMMouseScroll', 'mouseover', 'mouseout', 'mousemove', 'selectstart', 'selectend', 'keydown', 'keypress', 'keyup', 'orientationchange', 'touchstart', 'touchmove', 'touchend', 'touchcancel', 'pointerdown', 'pointermove', 'pointerup', 'pointerleave', 'pointercancel', 'gesturestart', 'gesturechange', 'gestureend', 'focus', 'blur', 'change', 'reset', 'select', 'submit', 'focusin', 'focusout', 'load', 'unload', 'beforeunload', 'resize', 'move', 'DOMContentLoaded', 'readystatechange', 'error', 'abort', 'scroll']);
  /**
   * ------------------------------------------------------------------------
   * Private methods
   * ------------------------------------------------------------------------
   */

  function getUidEvent(element, uid) {
    return uid && "".concat(uid, "::").concat(uidEvent++) || element.uidEvent || uidEvent++;
  }

  function getEvent(element) {
    var uid = getUidEvent(element);
    element.uidEvent = uid;
    eventRegistry[uid] = eventRegistry[uid] || {};
    return eventRegistry[uid];
  }

  function bootstrapHandler(element, fn) {
    return function handler(event) {
      event.delegateTarget = element;

      if (handler.oneOff) {
        EventHandler.off(element, event.type, fn);
      }

      return fn.apply(element, [event]);
    };
  }

  function bootstrapDelegationHandler(element, selector, fn) {
    return function handler(event) {
      var domElements = element.querySelectorAll(selector);

      for (var target = event.target; target && target !== this; target = target.parentNode) {
        for (var i = domElements.length; i--;) {
          if (domElements[i] === target) {
            event.delegateTarget = target;

            if (handler.oneOff) {
              EventHandler.off(element, event.type, selector, fn);
            }

            return fn.apply(target, [event]);
          }
        }
      } // To please ESLint


      return null;
    };
  }

  function findHandler(events, handler) {
    var delegationSelector = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;
    var uidEventList = Object.keys(events);

    for (var i = 0, len = uidEventList.length; i < len; i++) {
      var event = events[uidEventList[i]];

      if (event.originalHandler === handler && event.delegationSelector === delegationSelector) {
        return event;
      }
    }

    return null;
  }

  function normalizeParams(originalTypeEvent, handler, delegationFn) {
    var delegation = typeof handler === 'string';
    var originalHandler = delegation ? delegationFn : handler;
    var typeEvent = getTypeEvent(originalTypeEvent);
    var isNative = nativeEvents.has(typeEvent);

    if (!isNative) {
      typeEvent = originalTypeEvent;
    }

    return [delegation, originalHandler, typeEvent];
  }

  function addHandler(element, originalTypeEvent, handler, delegationFn, oneOff) {
    if (typeof originalTypeEvent !== 'string' || !element) {
      return;
    }

    if (!handler) {
      handler = delegationFn;
      delegationFn = null;
    } // in case of mouseenter or mouseleave wrap the handler within a function that checks for its DOM position
    // this prevents the handler from being dispatched the same way as mouseover or mouseout does


    if (customEventsRegex.test(originalTypeEvent)) {
      var wrapFn = function wrapFn(fn) {
        return function (event) {
          if (!event.relatedTarget || event.relatedTarget !== event.delegateTarget && !event.delegateTarget.contains(event.relatedTarget)) {
            return fn.call(this, event);
          }
        };
      };

      if (delegationFn) {
        delegationFn = wrapFn(delegationFn);
      } else {
        handler = wrapFn(handler);
      }
    }

    var _normalizeParams = normalizeParams(originalTypeEvent, handler, delegationFn),
        _normalizeParams2 = _slicedToArray(_normalizeParams, 3),
        delegation = _normalizeParams2[0],
        originalHandler = _normalizeParams2[1],
        typeEvent = _normalizeParams2[2];

    var events = getEvent(element);
    var handlers = events[typeEvent] || (events[typeEvent] = {});
    var previousFn = findHandler(handlers, originalHandler, delegation ? handler : null);

    if (previousFn) {
      previousFn.oneOff = previousFn.oneOff && oneOff;
      return;
    }

    var uid = getUidEvent(originalHandler, originalTypeEvent.replace(namespaceRegex, ''));
    var fn = delegation ? bootstrapDelegationHandler(element, handler, delegationFn) : bootstrapHandler(element, handler);
    fn.delegationSelector = delegation ? handler : null;
    fn.originalHandler = originalHandler;
    fn.oneOff = oneOff;
    fn.uidEvent = uid;
    handlers[uid] = fn;
    element.addEventListener(typeEvent, fn, delegation);
  }

  function removeHandler(element, events, typeEvent, handler, delegationSelector) {
    var fn = findHandler(events[typeEvent], handler, delegationSelector);

    if (!fn) {
      return;
    }

    element.removeEventListener(typeEvent, fn, Boolean(delegationSelector));
    delete events[typeEvent][fn.uidEvent];
  }

  function removeNamespacedHandlers(element, events, typeEvent, namespace) {
    var storeElementEvent = events[typeEvent] || {};
    Object.keys(storeElementEvent).forEach(function (handlerKey) {
      if (handlerKey.includes(namespace)) {
        var event = storeElementEvent[handlerKey];
        removeHandler(element, events, typeEvent, event.originalHandler, event.delegationSelector);
      }
    });
  }

  function getTypeEvent(event) {
    // allow to get the native events from namespaced events ('click.bs.button' --> 'click')
    event = event.replace(stripNameRegex, '');
    return customEvents[event] || event;
  }

  var EventHandler = {
    on: function on(element, event, handler, delegationFn) {
      addHandler(element, event, handler, delegationFn, false);
    },
    one: function one(element, event, handler, delegationFn) {
      addHandler(element, event, handler, delegationFn, true);
    },
    off: function off(element, originalTypeEvent, handler, delegationFn) {
      if (typeof originalTypeEvent !== 'string' || !element) {
        return;
      }

      var _normalizeParams3 = normalizeParams(originalTypeEvent, handler, delegationFn),
          _normalizeParams4 = _slicedToArray(_normalizeParams3, 3),
          delegation = _normalizeParams4[0],
          originalHandler = _normalizeParams4[1],
          typeEvent = _normalizeParams4[2];

      var inNamespace = typeEvent !== originalTypeEvent;
      var events = getEvent(element);
      var isNamespace = originalTypeEvent.startsWith('.');

      if (typeof originalHandler !== 'undefined') {
        // Simplest case: handler is passed, remove that listener ONLY.
        if (!events || !events[typeEvent]) {
          return;
        }

        removeHandler(element, events, typeEvent, originalHandler, delegation ? handler : null);
        return;
      }

      if (isNamespace) {
        Object.keys(events).forEach(function (elementEvent) {
          removeNamespacedHandlers(element, events, elementEvent, originalTypeEvent.slice(1));
        });
      }

      var storeElementEvent = events[typeEvent] || {};
      Object.keys(storeElementEvent).forEach(function (keyHandlers) {
        var handlerKey = keyHandlers.replace(stripUidRegex, '');

        if (!inNamespace || originalTypeEvent.includes(handlerKey)) {
          var event = storeElementEvent[keyHandlers];
          removeHandler(element, events, typeEvent, event.originalHandler, event.delegationSelector);
        }
      });
    },
    trigger: function trigger(element, event, args) {
      if (typeof event !== 'string' || !element) {
        return null;
      }

      var $ = getjQuery();
      var typeEvent = getTypeEvent(event);
      var inNamespace = event !== typeEvent;
      var isNative = nativeEvents.has(typeEvent);
      var jQueryEvent;
      var bubbles = true;
      var nativeDispatch = true;
      var defaultPrevented = false;
      var evt = null;

      if (inNamespace && $) {
        jQueryEvent = $.Event(event, args);
        $(element).trigger(jQueryEvent);
        bubbles = !jQueryEvent.isPropagationStopped();
        nativeDispatch = !jQueryEvent.isImmediatePropagationStopped();
        defaultPrevented = jQueryEvent.isDefaultPrevented();
      }

      if (isNative) {
        evt = document.createEvent('HTMLEvents');
        evt.initEvent(typeEvent, bubbles, true);
      } else {
        evt = new CustomEvent(event, {
          bubbles: bubbles,
          cancelable: true
        });
      } // merge custom information in our event


      if (typeof args !== 'undefined') {
        Object.keys(args).forEach(function (key) {
          Object.defineProperty(evt, key, {
            get: function get() {
              return args[key];
            }
          });
        });
      }

      if (defaultPrevented) {
        evt.preventDefault();
      }

      if (nativeDispatch) {
        element.dispatchEvent(evt);
      }

      if (evt.defaultPrevented && typeof jQueryEvent !== 'undefined') {
        jQueryEvent.preventDefault();
      }

      return evt;
    }
  };
  /**
   * --------------------------------------------------------------------------
   * Bootstrap (v5.1.3): dom/data.js
   * Licensed under MIT (https://github.com/twbs/bootstrap/blob/main/LICENSE)
   * --------------------------------------------------------------------------
   */

  /**
   * ------------------------------------------------------------------------
   * Constants
   * ------------------------------------------------------------------------
   */

  var elementMap = new Map();
  var Data = {
    set: function set(element, key, instance) {
      if (!elementMap.has(element)) {
        elementMap.set(element, new Map());
      }

      var instanceMap = elementMap.get(element); // make it clear we only want one instance per element
      // can be removed later when multiple key/instances are fine to be used

      if (!instanceMap.has(key) && instanceMap.size !== 0) {
        // eslint-disable-next-line no-console
        console.error("Bootstrap doesn't allow more than one instance per element. Bound instance: ".concat(Array.from(instanceMap.keys())[0], "."));
        return;
      }

      instanceMap.set(key, instance);
    },
    get: function get(element, key) {
      if (elementMap.has(element)) {
        return elementMap.get(element).get(key) || null;
      }

      return null;
    },
    remove: function remove(element, key) {
      if (!elementMap.has(element)) {
        return;
      }

      var instanceMap = elementMap.get(element);
      instanceMap.delete(key); // free up element references if there are no instances left for an element

      if (instanceMap.size === 0) {
        elementMap.delete(element);
      }
    }
  };
  /**
   * --------------------------------------------------------------------------
   * Bootstrap (v5.1.3): base-component.js
   * Licensed under MIT (https://github.com/twbs/bootstrap/blob/main/LICENSE)
   * --------------------------------------------------------------------------
   */

  /**
   * ------------------------------------------------------------------------
   * Constants
   * ------------------------------------------------------------------------
   */

  var VERSION = '5.1.3';

  var BaseComponent = /*#__PURE__*/function () {
    function BaseComponent(element) {
      _classCallCheck(this, BaseComponent);

      element = getElement(element);

      if (!element) {
        return;
      }

      this._element = element;
      Data.set(this._element, this.constructor.DATA_KEY, this);
    }

    _createClass(BaseComponent, [{
      key: "dispose",
      value: function dispose() {
        var _this = this;

        Data.remove(this._element, this.constructor.DATA_KEY);
        EventHandler.off(this._element, this.constructor.EVENT_KEY);
        Object.getOwnPropertyNames(this).forEach(function (propertyName) {
          _this[propertyName] = null;
        });
      }
    }, {
      key: "_queueCallback",
      value: function _queueCallback(callback, element) {
        var isAnimated = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;
        executeAfterTransition(callback, element, isAnimated);
      }
      /** Static */

    }], [{
      key: "getInstance",
      value: function getInstance(element) {
        return Data.get(getElement(element), this.DATA_KEY);
      }
    }, {
      key: "getOrCreateInstance",
      value: function getOrCreateInstance(element) {
        var config = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
        return this.getInstance(element) || new this(element, _typeof(config) === 'object' ? config : null);
      }
    }, {
      key: "VERSION",
      get: function get() {
        return VERSION;
      }
    }, {
      key: "NAME",
      get: function get() {
        throw new Error('You have to implement the static method "NAME", for each component!');
      }
    }, {
      key: "DATA_KEY",
      get: function get() {
        return "bs.".concat(this.NAME);
      }
    }, {
      key: "EVENT_KEY",
      get: function get() {
        return ".".concat(this.DATA_KEY);
      }
    }]);

    return BaseComponent;
  }();
  /**
   * --------------------------------------------------------------------------
   * Bootstrap (v5.1.3): util/component-functions.js
   * Licensed under MIT (https://github.com/twbs/bootstrap/blob/main/LICENSE)
   * --------------------------------------------------------------------------
   */


  var enableDismissTrigger = function enableDismissTrigger(component) {
    var method = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'hide';
    var clickEvent = "click.dismiss".concat(component.EVENT_KEY);
    var name = component.NAME;
    EventHandler.on(document, clickEvent, "[data-bs-dismiss=\"".concat(name, "\"]"), function (event) {
      if (['A', 'AREA'].includes(this.tagName)) {
        event.preventDefault();
      }

      if (isDisabled(this)) {
        return;
      }

      var target = getElementFromSelector(this) || this.closest(".".concat(name));
      var instance = component.getOrCreateInstance(target); // Method argument is left, for Alert and only, as it doesn't implement the 'hide' method

      instance[method]();
    });
  };
  /**
   * --------------------------------------------------------------------------
   * Bootstrap (v5.1.3): alert.js
   * Licensed under MIT (https://github.com/twbs/bootstrap/blob/main/LICENSE)
   * --------------------------------------------------------------------------
   */

  /**
   * ------------------------------------------------------------------------
   * Constants
   * ------------------------------------------------------------------------
   */


  var NAME$d = 'alert';
  var DATA_KEY$c = 'bs.alert';
  var EVENT_KEY$c = ".".concat(DATA_KEY$c);
  var EVENT_CLOSE = "close".concat(EVENT_KEY$c);
  var EVENT_CLOSED = "closed".concat(EVENT_KEY$c);
  var CLASS_NAME_FADE$5 = 'fade';
  var CLASS_NAME_SHOW$8 = 'show';
  /**
   * ------------------------------------------------------------------------
   * Class Definition
   * ------------------------------------------------------------------------
   */

  var Alert = /*#__PURE__*/function (_BaseComponent) {
    _inherits(Alert, _BaseComponent);

    var _super = _createSuper(Alert);

    function Alert() {
      _classCallCheck(this, Alert);

      return _super.apply(this, arguments);
    }

    _createClass(Alert, [{
      key: "close",
      value: // Public
      function close() {
        var _this2 = this;

        var closeEvent = EventHandler.trigger(this._element, EVENT_CLOSE);

        if (closeEvent.defaultPrevented) {
          return;
        }

        this._element.classList.remove(CLASS_NAME_SHOW$8);

        var isAnimated = this._element.classList.contains(CLASS_NAME_FADE$5);

        this._queueCallback(function () {
          return _this2._destroyElement();
        }, this._element, isAnimated);
      } // Private

    }, {
      key: "_destroyElement",
      value: function _destroyElement() {
        this._element.remove();

        EventHandler.trigger(this._element, EVENT_CLOSED);
        this.dispose();
      } // Static

    }], [{
      key: "NAME",
      get: // Getters
      function get() {
        return NAME$d;
      }
    }, {
      key: "jQueryInterface",
      value: function jQueryInterface(config) {
        return this.each(function () {
          var data = Alert.getOrCreateInstance(this);

          if (typeof config !== 'string') {
            return;
          }

          if (data[config] === undefined || config.startsWith('_') || config === 'constructor') {
            throw new TypeError("No method named \"".concat(config, "\""));
          }

          data[config](this);
        });
      }
    }]);

    return Alert;
  }(BaseComponent);
  /**
   * ------------------------------------------------------------------------
   * Data Api implementation
   * ------------------------------------------------------------------------
   */


  enableDismissTrigger(Alert, 'close');
  /**
   * ------------------------------------------------------------------------
   * jQuery
   * ------------------------------------------------------------------------
   * add .Alert to jQuery only if jQuery is present
   */

  defineJQueryPlugin(Alert);
  /**
   * --------------------------------------------------------------------------
   * Bootstrap (v5.1.3): button.js
   * Licensed under MIT (https://github.com/twbs/bootstrap/blob/main/LICENSE)
   * --------------------------------------------------------------------------
   */

  /**
   * ------------------------------------------------------------------------
   * Constants
   * ------------------------------------------------------------------------
   */

  var NAME$c = 'button';
  var DATA_KEY$b = 'bs.button';
  var EVENT_KEY$b = ".".concat(DATA_KEY$b);
  var DATA_API_KEY$7 = '.data-api';
  var CLASS_NAME_ACTIVE$3 = 'active';
  var SELECTOR_DATA_TOGGLE$5 = '[data-bs-toggle="button"]';
  var EVENT_CLICK_DATA_API$6 = "click".concat(EVENT_KEY$b).concat(DATA_API_KEY$7);
  /**
   * ------------------------------------------------------------------------
   * Class Definition
   * ------------------------------------------------------------------------
   */

  var Button = /*#__PURE__*/function (_BaseComponent2) {
    _inherits(Button, _BaseComponent2);

    var _super2 = _createSuper(Button);

    function Button() {
      _classCallCheck(this, Button);

      return _super2.apply(this, arguments);
    }

    _createClass(Button, [{
      key: "toggle",
      value: // Public
      function toggle() {
        // Toggle class and sync the `aria-pressed` attribute with the return value of the `.toggle()` method
        this._element.setAttribute('aria-pressed', this._element.classList.toggle(CLASS_NAME_ACTIVE$3));
      } // Static

    }], [{
      key: "NAME",
      get: // Getters
      function get() {
        return NAME$c;
      }
    }, {
      key: "jQueryInterface",
      value: function jQueryInterface(config) {
        return this.each(function () {
          var data = Button.getOrCreateInstance(this);

          if (config === 'toggle') {
            data[config]();
          }
        });
      }
    }]);

    return Button;
  }(BaseComponent);
  /**
   * ------------------------------------------------------------------------
   * Data Api implementation
   * ------------------------------------------------------------------------
   */


  EventHandler.on(document, EVENT_CLICK_DATA_API$6, SELECTOR_DATA_TOGGLE$5, function (event) {
    event.preventDefault();
    var button = event.target.closest(SELECTOR_DATA_TOGGLE$5);
    var data = Button.getOrCreateInstance(button);
    data.toggle();
  });
  /**
   * ------------------------------------------------------------------------
   * jQuery
   * ------------------------------------------------------------------------
   * add .Button to jQuery only if jQuery is present
   */

  defineJQueryPlugin(Button);
  /**
   * --------------------------------------------------------------------------
   * Bootstrap (v5.1.3): dom/manipulator.js
   * Licensed under MIT (https://github.com/twbs/bootstrap/blob/main/LICENSE)
   * --------------------------------------------------------------------------
   */

  function normalizeData(val) {
    if (val === 'true') {
      return true;
    }

    if (val === 'false') {
      return false;
    }

    if (val === Number(val).toString()) {
      return Number(val);
    }

    if (val === '' || val === 'null') {
      return null;
    }

    return val;
  }

  function normalizeDataKey(key) {
    return key.replace(/[A-Z]/g, function (chr) {
      return "-".concat(chr.toLowerCase());
    });
  }

  var Manipulator = {
    setDataAttribute: function setDataAttribute(element, key, value) {
      element.setAttribute("data-bs-".concat(normalizeDataKey(key)), value);
    },
    removeDataAttribute: function removeDataAttribute(element, key) {
      element.removeAttribute("data-bs-".concat(normalizeDataKey(key)));
    },
    getDataAttributes: function getDataAttributes(element) {
      if (!element) {
        return {};
      }

      var attributes = {};
      Object.keys(element.dataset).filter(function (key) {
        return key.startsWith('bs');
      }).forEach(function (key) {
        var pureKey = key.replace(/^bs/, '');
        pureKey = pureKey.charAt(0).toLowerCase() + pureKey.slice(1, pureKey.length);
        attributes[pureKey] = normalizeData(element.dataset[key]);
      });
      return attributes;
    },
    getDataAttribute: function getDataAttribute(element, key) {
      return normalizeData(element.getAttribute("data-bs-".concat(normalizeDataKey(key))));
    },
    offset: function offset(element) {
      var rect = element.getBoundingClientRect();
      return {
        top: rect.top + window.pageYOffset,
        left: rect.left + window.pageXOffset
      };
    },
    position: function position(element) {
      return {
        top: element.offsetTop,
        left: element.offsetLeft
      };
    }
  };
  /**
   * --------------------------------------------------------------------------
   * Bootstrap (v5.1.3): dom/selector-engine.js
   * Licensed under MIT (https://github.com/twbs/bootstrap/blob/main/LICENSE)
   * --------------------------------------------------------------------------
   */

  var NODE_TEXT = 3;
  var SelectorEngine = {
    find: function find(selector) {
      var _ref2;

      var element = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : document.documentElement;
      return (_ref2 = []).concat.apply(_ref2, _toConsumableArray(Element.prototype.querySelectorAll.call(element, selector)));
    },
    findOne: function findOne(selector) {
      var element = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : document.documentElement;
      return Element.prototype.querySelector.call(element, selector);
    },
    children: function children(element, selector) {
      var _ref3;

      return (_ref3 = []).concat.apply(_ref3, _toConsumableArray(element.children)).filter(function (child) {
        return child.matches(selector);
      });
    },
    parents: function parents(element, selector) {
      var parents = [];
      var ancestor = element.parentNode;

      while (ancestor && ancestor.nodeType === Node.ELEMENT_NODE && ancestor.nodeType !== NODE_TEXT) {
        if (ancestor.matches(selector)) {
          parents.push(ancestor);
        }

        ancestor = ancestor.parentNode;
      }

      return parents;
    },
    prev: function prev(element, selector) {
      var previous = element.previousElementSibling;

      while (previous) {
        if (previous.matches(selector)) {
          return [previous];
        }

        previous = previous.previousElementSibling;
      }

      return [];
    },
    next: function next(element, selector) {
      var next = element.nextElementSibling;

      while (next) {
        if (next.matches(selector)) {
          return [next];
        }

        next = next.nextElementSibling;
      }

      return [];
    },
    focusableChildren: function focusableChildren(element) {
      var focusables = ['a', 'button', 'input', 'textarea', 'select', 'details', '[tabindex]', '[contenteditable="true"]'].map(function (selector) {
        return "".concat(selector, ":not([tabindex^=\"-\"])");
      }).join(', ');
      return this.find(focusables, element).filter(function (el) {
        return !isDisabled(el) && isVisible(el);
      });
    }
  };
  /**
   * --------------------------------------------------------------------------
   * Bootstrap (v5.1.3): carousel.js
   * Licensed under MIT (https://github.com/twbs/bootstrap/blob/main/LICENSE)
   * --------------------------------------------------------------------------
   */

  /**
   * ------------------------------------------------------------------------
   * Constants
   * ------------------------------------------------------------------------
   */

  var NAME$b = 'carousel';
  var DATA_KEY$a = 'bs.carousel';
  var EVENT_KEY$a = ".".concat(DATA_KEY$a);
  var DATA_API_KEY$6 = '.data-api';
  var ARROW_LEFT_KEY = 'ArrowLeft';
  var ARROW_RIGHT_KEY = 'ArrowRight';
  var TOUCHEVENT_COMPAT_WAIT = 500; // Time for mouse compat events to fire after touch

  var SWIPE_THRESHOLD = 40;
  var Default$a = {
    interval: 5000,
    keyboard: true,
    slide: false,
    pause: 'hover',
    wrap: true,
    touch: true
  };
  var DefaultType$a = {
    interval: '(number|boolean)',
    keyboard: 'boolean',
    slide: '(boolean|string)',
    pause: '(string|boolean)',
    wrap: 'boolean',
    touch: 'boolean'
  };
  var ORDER_NEXT = 'next';
  var ORDER_PREV = 'prev';
  var DIRECTION_LEFT = 'left';
  var DIRECTION_RIGHT = 'right';
  var KEY_TO_DIRECTION = (_KEY_TO_DIRECTION = {}, _defineProperty(_KEY_TO_DIRECTION, ARROW_LEFT_KEY, DIRECTION_RIGHT), _defineProperty(_KEY_TO_DIRECTION, ARROW_RIGHT_KEY, DIRECTION_LEFT), _KEY_TO_DIRECTION);
  var EVENT_SLIDE = "slide".concat(EVENT_KEY$a);
  var EVENT_SLID = "slid".concat(EVENT_KEY$a);
  var EVENT_KEYDOWN = "keydown".concat(EVENT_KEY$a);
  var EVENT_MOUSEENTER = "mouseenter".concat(EVENT_KEY$a);
  var EVENT_MOUSELEAVE = "mouseleave".concat(EVENT_KEY$a);
  var EVENT_TOUCHSTART = "touchstart".concat(EVENT_KEY$a);
  var EVENT_TOUCHMOVE = "touchmove".concat(EVENT_KEY$a);
  var EVENT_TOUCHEND = "touchend".concat(EVENT_KEY$a);
  var EVENT_POINTERDOWN = "pointerdown".concat(EVENT_KEY$a);
  var EVENT_POINTERUP = "pointerup".concat(EVENT_KEY$a);
  var EVENT_DRAG_START = "dragstart".concat(EVENT_KEY$a);
  var EVENT_LOAD_DATA_API$2 = "load".concat(EVENT_KEY$a).concat(DATA_API_KEY$6);
  var EVENT_CLICK_DATA_API$5 = "click".concat(EVENT_KEY$a).concat(DATA_API_KEY$6);
  var CLASS_NAME_CAROUSEL = 'carousel';
  var CLASS_NAME_ACTIVE$2 = 'active';
  var CLASS_NAME_SLIDE = 'slide';
  var CLASS_NAME_END = 'carousel-item-end';
  var CLASS_NAME_START = 'carousel-item-start';
  var CLASS_NAME_NEXT = 'carousel-item-next';
  var CLASS_NAME_PREV = 'carousel-item-prev';
  var CLASS_NAME_POINTER_EVENT = 'pointer-event';
  var SELECTOR_ACTIVE$1 = '.active';
  var SELECTOR_ACTIVE_ITEM = '.active.carousel-item';
  var SELECTOR_ITEM = '.carousel-item';
  var SELECTOR_ITEM_IMG = '.carousel-item img';
  var SELECTOR_NEXT_PREV = '.carousel-item-next, .carousel-item-prev';
  var SELECTOR_INDICATORS = '.carousel-indicators';
  var SELECTOR_INDICATOR = '[data-bs-target]';
  var SELECTOR_DATA_SLIDE = '[data-bs-slide], [data-bs-slide-to]';
  var SELECTOR_DATA_RIDE = '[data-bs-ride="carousel"]';
  var POINTER_TYPE_TOUCH = 'touch';
  var POINTER_TYPE_PEN = 'pen';
  /**
   * ------------------------------------------------------------------------
   * Class Definition
   * ------------------------------------------------------------------------
   */

  var Carousel = /*#__PURE__*/function (_BaseComponent3) {
    _inherits(Carousel, _BaseComponent3);

    var _super3 = _createSuper(Carousel);

    function Carousel(element, config) {
      var _this3;

      _classCallCheck(this, Carousel);

      _this3 = _super3.call(this, element);
      _this3._items = null;
      _this3._interval = null;
      _this3._activeElement = null;
      _this3._isPaused = false;
      _this3._isSliding = false;
      _this3.touchTimeout = null;
      _this3.touchStartX = 0;
      _this3.touchDeltaX = 0;
      _this3._config = _this3._getConfig(config);
      _this3._indicatorsElement = SelectorEngine.findOne(SELECTOR_INDICATORS, _this3._element);
      _this3._touchSupported = 'ontouchstart' in document.documentElement || navigator.maxTouchPoints > 0;
      _this3._pointerEvent = Boolean(window.PointerEvent);

      _this3._addEventListeners();

      return _this3;
    } // Getters


    _createClass(Carousel, [{
      key: "next",
      value: // Public
      function next() {
        this._slide(ORDER_NEXT);
      }
    }, {
      key: "nextWhenVisible",
      value: function nextWhenVisible() {
        // Don't call next when the page isn't visible
        // or the carousel or its parent isn't visible
        if (!document.hidden && isVisible(this._element)) {
          this.next();
        }
      }
    }, {
      key: "prev",
      value: function prev() {
        this._slide(ORDER_PREV);
      }
    }, {
      key: "pause",
      value: function pause(event) {
        if (!event) {
          this._isPaused = true;
        }

        if (SelectorEngine.findOne(SELECTOR_NEXT_PREV, this._element)) {
          triggerTransitionEnd(this._element);
          this.cycle(true);
        }

        clearInterval(this._interval);
        this._interval = null;
      }
    }, {
      key: "cycle",
      value: function cycle(event) {
        if (!event) {
          this._isPaused = false;
        }

        if (this._interval) {
          clearInterval(this._interval);
          this._interval = null;
        }

        if (this._config && this._config.interval && !this._isPaused) {
          this._updateInterval();

          this._interval = setInterval((document.visibilityState ? this.nextWhenVisible : this.next).bind(this), this._config.interval);
        }
      }
    }, {
      key: "to",
      value: function to(index) {
        var _this4 = this;

        this._activeElement = SelectorEngine.findOne(SELECTOR_ACTIVE_ITEM, this._element);

        var activeIndex = this._getItemIndex(this._activeElement);

        if (index > this._items.length - 1 || index < 0) {
          return;
        }

        if (this._isSliding) {
          EventHandler.one(this._element, EVENT_SLID, function () {
            return _this4.to(index);
          });
          return;
        }

        if (activeIndex === index) {
          this.pause();
          this.cycle();
          return;
        }

        var order = index > activeIndex ? ORDER_NEXT : ORDER_PREV;

        this._slide(order, this._items[index]);
      } // Private

    }, {
      key: "_getConfig",
      value: function _getConfig(config) {
        config = _objectSpread2(_objectSpread2(_objectSpread2({}, Default$a), Manipulator.getDataAttributes(this._element)), _typeof(config) === 'object' ? config : {});
        typeCheckConfig(NAME$b, config, DefaultType$a);
        return config;
      }
    }, {
      key: "_handleSwipe",
      value: function _handleSwipe() {
        var absDeltax = Math.abs(this.touchDeltaX);

        if (absDeltax <= SWIPE_THRESHOLD) {
          return;
        }

        var direction = absDeltax / this.touchDeltaX;
        this.touchDeltaX = 0;

        if (!direction) {
          return;
        }

        this._slide(direction > 0 ? DIRECTION_RIGHT : DIRECTION_LEFT);
      }
    }, {
      key: "_addEventListeners",
      value: function _addEventListeners() {
        var _this5 = this;

        if (this._config.keyboard) {
          EventHandler.on(this._element, EVENT_KEYDOWN, function (event) {
            return _this5._keydown(event);
          });
        }

        if (this._config.pause === 'hover') {
          EventHandler.on(this._element, EVENT_MOUSEENTER, function (event) {
            return _this5.pause(event);
          });
          EventHandler.on(this._element, EVENT_MOUSELEAVE, function (event) {
            return _this5.cycle(event);
          });
        }

        if (this._config.touch && this._touchSupported) {
          this._addTouchEventListeners();
        }
      }
    }, {
      key: "_addTouchEventListeners",
      value: function _addTouchEventListeners() {
        var _this6 = this;

        var hasPointerPenTouch = function hasPointerPenTouch(event) {
          return _this6._pointerEvent && (event.pointerType === POINTER_TYPE_PEN || event.pointerType === POINTER_TYPE_TOUCH);
        };

        var start = function start(event) {
          if (hasPointerPenTouch(event)) {
            _this6.touchStartX = event.clientX;
          } else if (!_this6._pointerEvent) {
            _this6.touchStartX = event.touches[0].clientX;
          }
        };

        var move = function move(event) {
          // ensure swiping with one touch and not pinching
          _this6.touchDeltaX = event.touches && event.touches.length > 1 ? 0 : event.touches[0].clientX - _this6.touchStartX;
        };

        var end = function end(event) {
          if (hasPointerPenTouch(event)) {
            _this6.touchDeltaX = event.clientX - _this6.touchStartX;
          }

          _this6._handleSwipe();

          if (_this6._config.pause === 'hover') {
            // If it's a touch-enabled device, mouseenter/leave are fired as
            // part of the mouse compatibility events on first tap - the carousel
            // would stop cycling until user tapped out of it;
            // here, we listen for touchend, explicitly pause the carousel
            // (as if it's the second time we tap on it, mouseenter compat event
            // is NOT fired) and after a timeout (to allow for mouse compatibility
            // events to fire) we explicitly restart cycling
            _this6.pause();

            if (_this6.touchTimeout) {
              clearTimeout(_this6.touchTimeout);
            }

            _this6.touchTimeout = setTimeout(function (event) {
              return _this6.cycle(event);
            }, TOUCHEVENT_COMPAT_WAIT + _this6._config.interval);
          }
        };

        SelectorEngine.find(SELECTOR_ITEM_IMG, this._element).forEach(function (itemImg) {
          EventHandler.on(itemImg, EVENT_DRAG_START, function (event) {
            return event.preventDefault();
          });
        });

        if (this._pointerEvent) {
          EventHandler.on(this._element, EVENT_POINTERDOWN, function (event) {
            return start(event);
          });
          EventHandler.on(this._element, EVENT_POINTERUP, function (event) {
            return end(event);
          });

          this._element.classList.add(CLASS_NAME_POINTER_EVENT);
        } else {
          EventHandler.on(this._element, EVENT_TOUCHSTART, function (event) {
            return start(event);
          });
          EventHandler.on(this._element, EVENT_TOUCHMOVE, function (event) {
            return move(event);
          });
          EventHandler.on(this._element, EVENT_TOUCHEND, function (event) {
            return end(event);
          });
        }
      }
    }, {
      key: "_keydown",
      value: function _keydown(event) {
        if (/input|textarea/i.test(event.target.tagName)) {
          return;
        }

        var direction = KEY_TO_DIRECTION[event.key];

        if (direction) {
          event.preventDefault();

          this._slide(direction);
        }
      }
    }, {
      key: "_getItemIndex",
      value: function _getItemIndex(element) {
        this._items = element && element.parentNode ? SelectorEngine.find(SELECTOR_ITEM, element.parentNode) : [];
        return this._items.indexOf(element);
      }
    }, {
      key: "_getItemByOrder",
      value: function _getItemByOrder(order, activeElement) {
        var isNext = order === ORDER_NEXT;
        return getNextActiveElement(this._items, activeElement, isNext, this._config.wrap);
      }
    }, {
      key: "_triggerSlideEvent",
      value: function _triggerSlideEvent(relatedTarget, eventDirectionName) {
        var targetIndex = this._getItemIndex(relatedTarget);

        var fromIndex = this._getItemIndex(SelectorEngine.findOne(SELECTOR_ACTIVE_ITEM, this._element));

        return EventHandler.trigger(this._element, EVENT_SLIDE, {
          relatedTarget: relatedTarget,
          direction: eventDirectionName,
          from: fromIndex,
          to: targetIndex
        });
      }
    }, {
      key: "_setActiveIndicatorElement",
      value: function _setActiveIndicatorElement(element) {
        if (this._indicatorsElement) {
          var activeIndicator = SelectorEngine.findOne(SELECTOR_ACTIVE$1, this._indicatorsElement);
          activeIndicator.classList.remove(CLASS_NAME_ACTIVE$2);
          activeIndicator.removeAttribute('aria-current');
          var indicators = SelectorEngine.find(SELECTOR_INDICATOR, this._indicatorsElement);

          for (var i = 0; i < indicators.length; i++) {
            if (Number.parseInt(indicators[i].getAttribute('data-bs-slide-to'), 10) === this._getItemIndex(element)) {
              indicators[i].classList.add(CLASS_NAME_ACTIVE$2);
              indicators[i].setAttribute('aria-current', 'true');
              break;
            }
          }
        }
      }
    }, {
      key: "_updateInterval",
      value: function _updateInterval() {
        var element = this._activeElement || SelectorEngine.findOne(SELECTOR_ACTIVE_ITEM, this._element);

        if (!element) {
          return;
        }

        var elementInterval = Number.parseInt(element.getAttribute('data-bs-interval'), 10);

        if (elementInterval) {
          this._config.defaultInterval = this._config.defaultInterval || this._config.interval;
          this._config.interval = elementInterval;
        } else {
          this._config.interval = this._config.defaultInterval || this._config.interval;
        }
      }
    }, {
      key: "_slide",
      value: function _slide(directionOrOrder, element) {
        var _this7 = this;

        var order = this._directionToOrder(directionOrOrder);

        var activeElement = SelectorEngine.findOne(SELECTOR_ACTIVE_ITEM, this._element);

        var activeElementIndex = this._getItemIndex(activeElement);

        var nextElement = element || this._getItemByOrder(order, activeElement);

        var nextElementIndex = this._getItemIndex(nextElement);

        var isCycling = Boolean(this._interval);
        var isNext = order === ORDER_NEXT;
        var directionalClassName = isNext ? CLASS_NAME_START : CLASS_NAME_END;
        var orderClassName = isNext ? CLASS_NAME_NEXT : CLASS_NAME_PREV;

        var eventDirectionName = this._orderToDirection(order);

        if (nextElement && nextElement.classList.contains(CLASS_NAME_ACTIVE$2)) {
          this._isSliding = false;
          return;
        }

        if (this._isSliding) {
          return;
        }

        var slideEvent = this._triggerSlideEvent(nextElement, eventDirectionName);

        if (slideEvent.defaultPrevented) {
          return;
        }

        if (!activeElement || !nextElement) {
          // Some weirdness is happening, so we bail
          return;
        }

        this._isSliding = true;

        if (isCycling) {
          this.pause();
        }

        this._setActiveIndicatorElement(nextElement);

        this._activeElement = nextElement;

        var triggerSlidEvent = function triggerSlidEvent() {
          EventHandler.trigger(_this7._element, EVENT_SLID, {
            relatedTarget: nextElement,
            direction: eventDirectionName,
            from: activeElementIndex,
            to: nextElementIndex
          });
        };

        if (this._element.classList.contains(CLASS_NAME_SLIDE)) {
          nextElement.classList.add(orderClassName);
          reflow(nextElement);
          activeElement.classList.add(directionalClassName);
          nextElement.classList.add(directionalClassName);

          var completeCallBack = function completeCallBack() {
            nextElement.classList.remove(directionalClassName, orderClassName);
            nextElement.classList.add(CLASS_NAME_ACTIVE$2);
            activeElement.classList.remove(CLASS_NAME_ACTIVE$2, orderClassName, directionalClassName);
            _this7._isSliding = false;
            setTimeout(triggerSlidEvent, 0);
          };

          this._queueCallback(completeCallBack, activeElement, true);
        } else {
          activeElement.classList.remove(CLASS_NAME_ACTIVE$2);
          nextElement.classList.add(CLASS_NAME_ACTIVE$2);
          this._isSliding = false;
          triggerSlidEvent();
        }

        if (isCycling) {
          this.cycle();
        }
      }
    }, {
      key: "_directionToOrder",
      value: function _directionToOrder(direction) {
        if (![DIRECTION_RIGHT, DIRECTION_LEFT].includes(direction)) {
          return direction;
        }

        if (isRTL()) {
          return direction === DIRECTION_LEFT ? ORDER_PREV : ORDER_NEXT;
        }

        return direction === DIRECTION_LEFT ? ORDER_NEXT : ORDER_PREV;
      }
    }, {
      key: "_orderToDirection",
      value: function _orderToDirection(order) {
        if (![ORDER_NEXT, ORDER_PREV].includes(order)) {
          return order;
        }

        if (isRTL()) {
          return order === ORDER_PREV ? DIRECTION_LEFT : DIRECTION_RIGHT;
        }

        return order === ORDER_PREV ? DIRECTION_RIGHT : DIRECTION_LEFT;
      } // Static

    }], [{
      key: "Default",
      get: function get() {
        return Default$a;
      }
    }, {
      key: "NAME",
      get: function get() {
        return NAME$b;
      }
    }, {
      key: "carouselInterface",
      value: function carouselInterface(element, config) {
        var data = Carousel.getOrCreateInstance(element, config);
        var _config = data._config;

        if (_typeof(config) === 'object') {
          _config = _objectSpread2(_objectSpread2({}, _config), config);
        }

        var action = typeof config === 'string' ? config : _config.slide;

        if (typeof config === 'number') {
          data.to(config);
        } else if (typeof action === 'string') {
          if (typeof data[action] === 'undefined') {
            throw new TypeError("No method named \"".concat(action, "\""));
          }

          data[action]();
        } else if (_config.interval && _config.ride) {
          data.pause();
          data.cycle();
        }
      }
    }, {
      key: "jQueryInterface",
      value: function jQueryInterface(config) {
        return this.each(function () {
          Carousel.carouselInterface(this, config);
        });
      }
    }, {
      key: "dataApiClickHandler",
      value: function dataApiClickHandler(event) {
        var target = getElementFromSelector(this);

        if (!target || !target.classList.contains(CLASS_NAME_CAROUSEL)) {
          return;
        }

        var config = _objectSpread2(_objectSpread2({}, Manipulator.getDataAttributes(target)), Manipulator.getDataAttributes(this));

        var slideIndex = this.getAttribute('data-bs-slide-to');

        if (slideIndex) {
          config.interval = false;
        }

        Carousel.carouselInterface(target, config);

        if (slideIndex) {
          Carousel.getInstance(target).to(slideIndex);
        }

        event.preventDefault();
      }
    }]);

    return Carousel;
  }(BaseComponent);
  /**
   * ------------------------------------------------------------------------
   * Data Api implementation
   * ------------------------------------------------------------------------
   */


  EventHandler.on(document, EVENT_CLICK_DATA_API$5, SELECTOR_DATA_SLIDE, Carousel.dataApiClickHandler);
  EventHandler.on(window, EVENT_LOAD_DATA_API$2, function () {
    var carousels = SelectorEngine.find(SELECTOR_DATA_RIDE);

    for (var i = 0, len = carousels.length; i < len; i++) {
      Carousel.carouselInterface(carousels[i], Carousel.getInstance(carousels[i]));
    }
  });
  /**
   * ------------------------------------------------------------------------
   * jQuery
   * ------------------------------------------------------------------------
   * add .Carousel to jQuery only if jQuery is present
   */

  defineJQueryPlugin(Carousel);
  /**
   * --------------------------------------------------------------------------
   * Bootstrap (v5.1.3): collapse.js
   * Licensed under MIT (https://github.com/twbs/bootstrap/blob/main/LICENSE)
   * --------------------------------------------------------------------------
   */

  /**
   * ------------------------------------------------------------------------
   * Constants
   * ------------------------------------------------------------------------
   */

  var NAME$a = 'collapse';
  var DATA_KEY$9 = 'bs.collapse';
  var EVENT_KEY$9 = ".".concat(DATA_KEY$9);
  var DATA_API_KEY$5 = '.data-api';
  var Default$9 = {
    toggle: true,
    parent: null
  };
  var DefaultType$9 = {
    toggle: 'boolean',
    parent: '(null|element)'
  };
  var EVENT_SHOW$5 = "show".concat(EVENT_KEY$9);
  var EVENT_SHOWN$5 = "shown".concat(EVENT_KEY$9);
  var EVENT_HIDE$5 = "hide".concat(EVENT_KEY$9);
  var EVENT_HIDDEN$5 = "hidden".concat(EVENT_KEY$9);
  var EVENT_CLICK_DATA_API$4 = "click".concat(EVENT_KEY$9).concat(DATA_API_KEY$5);
  var CLASS_NAME_SHOW$7 = 'show';
  var CLASS_NAME_COLLAPSE = 'collapse';
  var CLASS_NAME_COLLAPSING = 'collapsing';
  var CLASS_NAME_COLLAPSED = 'collapsed';
  var CLASS_NAME_DEEPER_CHILDREN = ":scope .".concat(CLASS_NAME_COLLAPSE, " .").concat(CLASS_NAME_COLLAPSE);
  var CLASS_NAME_HORIZONTAL = 'collapse-horizontal';
  var WIDTH = 'width';
  var HEIGHT = 'height';
  var SELECTOR_ACTIVES = '.collapse.show, .collapse.collapsing';
  var SELECTOR_DATA_TOGGLE$4 = '[data-bs-toggle="collapse"]';
  /**
   * ------------------------------------------------------------------------
   * Class Definition
   * ------------------------------------------------------------------------
   */

  var Collapse = /*#__PURE__*/function (_BaseComponent4) {
    _inherits(Collapse, _BaseComponent4);

    var _super4 = _createSuper(Collapse);

    function Collapse(element, config) {
      var _this8;

      _classCallCheck(this, Collapse);

      _this8 = _super4.call(this, element);
      _this8._isTransitioning = false;
      _this8._config = _this8._getConfig(config);
      _this8._triggerArray = [];
      var toggleList = SelectorEngine.find(SELECTOR_DATA_TOGGLE$4);

      for (var i = 0, len = toggleList.length; i < len; i++) {
        var elem = toggleList[i];
        var selector = getSelectorFromElement(elem);
        var filterElement = SelectorEngine.find(selector).filter(function (foundElem) {
          return foundElem === _this8._element;
        });

        if (selector !== null && filterElement.length) {
          _this8._selector = selector;

          _this8._triggerArray.push(elem);
        }
      }

      _this8._initializeChildren();

      if (!_this8._config.parent) {
        _this8._addAriaAndCollapsedClass(_this8._triggerArray, _this8._isShown());
      }

      if (_this8._config.toggle) {
        _this8.toggle();
      }

      return _this8;
    } // Getters


    _createClass(Collapse, [{
      key: "toggle",
      value: // Public
      function toggle() {
        if (this._isShown()) {
          this.hide();
        } else {
          this.show();
        }
      }
    }, {
      key: "show",
      value: function show() {
        var _this9 = this;

        if (this._isTransitioning || this._isShown()) {
          return;
        }

        var actives = [];
        var activesData;

        if (this._config.parent) {
          var children = SelectorEngine.find(CLASS_NAME_DEEPER_CHILDREN, this._config.parent);
          actives = SelectorEngine.find(SELECTOR_ACTIVES, this._config.parent).filter(function (elem) {
            return !children.includes(elem);
          }); // remove children if greater depth
        }

        var container = SelectorEngine.findOne(this._selector);

        if (actives.length) {
          var tempActiveData = actives.find(function (elem) {
            return container !== elem;
          });
          activesData = tempActiveData ? Collapse.getInstance(tempActiveData) : null;

          if (activesData && activesData._isTransitioning) {
            return;
          }
        }

        var startEvent = EventHandler.trigger(this._element, EVENT_SHOW$5);

        if (startEvent.defaultPrevented) {
          return;
        }

        actives.forEach(function (elemActive) {
          if (container !== elemActive) {
            Collapse.getOrCreateInstance(elemActive, {
              toggle: false
            }).hide();
          }

          if (!activesData) {
            Data.set(elemActive, DATA_KEY$9, null);
          }
        });

        var dimension = this._getDimension();

        this._element.classList.remove(CLASS_NAME_COLLAPSE);

        this._element.classList.add(CLASS_NAME_COLLAPSING);

        this._element.style[dimension] = 0;

        this._addAriaAndCollapsedClass(this._triggerArray, true);

        this._isTransitioning = true;

        var complete = function complete() {
          _this9._isTransitioning = false;

          _this9._element.classList.remove(CLASS_NAME_COLLAPSING);

          _this9._element.classList.add(CLASS_NAME_COLLAPSE, CLASS_NAME_SHOW$7);

          _this9._element.style[dimension] = '';
          EventHandler.trigger(_this9._element, EVENT_SHOWN$5);
        };

        var capitalizedDimension = dimension[0].toUpperCase() + dimension.slice(1);
        var scrollSize = "scroll".concat(capitalizedDimension);

        this._queueCallback(complete, this._element, true);

        this._element.style[dimension] = "".concat(this._element[scrollSize], "px");
      }
    }, {
      key: "hide",
      value: function hide() {
        var _this10 = this;

        if (this._isTransitioning || !this._isShown()) {
          return;
        }

        var startEvent = EventHandler.trigger(this._element, EVENT_HIDE$5);

        if (startEvent.defaultPrevented) {
          return;
        }

        var dimension = this._getDimension();

        this._element.style[dimension] = "".concat(this._element.getBoundingClientRect()[dimension], "px");
        reflow(this._element);

        this._element.classList.add(CLASS_NAME_COLLAPSING);

        this._element.classList.remove(CLASS_NAME_COLLAPSE, CLASS_NAME_SHOW$7);

        var triggerArrayLength = this._triggerArray.length;

        for (var i = 0; i < triggerArrayLength; i++) {
          var trigger = this._triggerArray[i];
          var elem = getElementFromSelector(trigger);

          if (elem && !this._isShown(elem)) {
            this._addAriaAndCollapsedClass([trigger], false);
          }
        }

        this._isTransitioning = true;

        var complete = function complete() {
          _this10._isTransitioning = false;

          _this10._element.classList.remove(CLASS_NAME_COLLAPSING);

          _this10._element.classList.add(CLASS_NAME_COLLAPSE);

          EventHandler.trigger(_this10._element, EVENT_HIDDEN$5);
        };

        this._element.style[dimension] = '';

        this._queueCallback(complete, this._element, true);
      }
    }, {
      key: "_isShown",
      value: function _isShown() {
        var element = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this._element;
        return element.classList.contains(CLASS_NAME_SHOW$7);
      } // Private

    }, {
      key: "_getConfig",
      value: function _getConfig(config) {
        config = _objectSpread2(_objectSpread2(_objectSpread2({}, Default$9), Manipulator.getDataAttributes(this._element)), config);
        config.toggle = Boolean(config.toggle); // Coerce string values

        config.parent = getElement(config.parent);
        typeCheckConfig(NAME$a, config, DefaultType$9);
        return config;
      }
    }, {
      key: "_getDimension",
      value: function _getDimension() {
        return this._element.classList.contains(CLASS_NAME_HORIZONTAL) ? WIDTH : HEIGHT;
      }
    }, {
      key: "_initializeChildren",
      value: function _initializeChildren() {
        var _this11 = this;

        if (!this._config.parent) {
          return;
        }

        var children = SelectorEngine.find(CLASS_NAME_DEEPER_CHILDREN, this._config.parent);
        SelectorEngine.find(SELECTOR_DATA_TOGGLE$4, this._config.parent).filter(function (elem) {
          return !children.includes(elem);
        }).forEach(function (element) {
          var selected = getElementFromSelector(element);

          if (selected) {
            _this11._addAriaAndCollapsedClass([element], _this11._isShown(selected));
          }
        });
      }
    }, {
      key: "_addAriaAndCollapsedClass",
      value: function _addAriaAndCollapsedClass(triggerArray, isOpen) {
        if (!triggerArray.length) {
          return;
        }

        triggerArray.forEach(function (elem) {
          if (isOpen) {
            elem.classList.remove(CLASS_NAME_COLLAPSED);
          } else {
            elem.classList.add(CLASS_NAME_COLLAPSED);
          }

          elem.setAttribute('aria-expanded', isOpen);
        });
      } // Static

    }], [{
      key: "Default",
      get: function get() {
        return Default$9;
      }
    }, {
      key: "NAME",
      get: function get() {
        return NAME$a;
      }
    }, {
      key: "jQueryInterface",
      value: function jQueryInterface(config) {
        return this.each(function () {
          var _config = {};

          if (typeof config === 'string' && /show|hide/.test(config)) {
            _config.toggle = false;
          }

          var data = Collapse.getOrCreateInstance(this, _config);

          if (typeof config === 'string') {
            if (typeof data[config] === 'undefined') {
              throw new TypeError("No method named \"".concat(config, "\""));
            }

            data[config]();
          }
        });
      }
    }]);

    return Collapse;
  }(BaseComponent);
  /**
   * ------------------------------------------------------------------------
   * Data Api implementation
   * ------------------------------------------------------------------------
   */


  EventHandler.on(document, EVENT_CLICK_DATA_API$4, SELECTOR_DATA_TOGGLE$4, function (event) {
    // preventDefault only for <a> elements (which change the URL) not inside the collapsible element
    if (event.target.tagName === 'A' || event.delegateTarget && event.delegateTarget.tagName === 'A') {
      event.preventDefault();
    }

    var selector = getSelectorFromElement(this);
    var selectorElements = SelectorEngine.find(selector);
    selectorElements.forEach(function (element) {
      Collapse.getOrCreateInstance(element, {
        toggle: false
      }).toggle();
    });
  });
  /**
   * ------------------------------------------------------------------------
   * jQuery
   * ------------------------------------------------------------------------
   * add .Collapse to jQuery only if jQuery is present
   */

  defineJQueryPlugin(Collapse);
  /**
   * --------------------------------------------------------------------------
   * Bootstrap (v5.1.3): dropdown.js
   * Licensed under MIT (https://github.com/twbs/bootstrap/blob/main/LICENSE)
   * --------------------------------------------------------------------------
   */

  /**
   * ------------------------------------------------------------------------
   * Constants
   * ------------------------------------------------------------------------
   */

  var NAME$9 = 'dropdown';
  var DATA_KEY$8 = 'bs.dropdown';
  var EVENT_KEY$8 = ".".concat(DATA_KEY$8);
  var DATA_API_KEY$4 = '.data-api';
  var ESCAPE_KEY$2 = 'Escape';
  var SPACE_KEY = 'Space';
  var TAB_KEY$1 = 'Tab';
  var ARROW_UP_KEY = 'ArrowUp';
  var ARROW_DOWN_KEY = 'ArrowDown';
  var RIGHT_MOUSE_BUTTON = 2; // MouseEvent.button value for the secondary button, usually the right button

  var REGEXP_KEYDOWN = new RegExp("".concat(ARROW_UP_KEY, "|").concat(ARROW_DOWN_KEY, "|").concat(ESCAPE_KEY$2));
  var EVENT_HIDE$4 = "hide".concat(EVENT_KEY$8);
  var EVENT_HIDDEN$4 = "hidden".concat(EVENT_KEY$8);
  var EVENT_SHOW$4 = "show".concat(EVENT_KEY$8);
  var EVENT_SHOWN$4 = "shown".concat(EVENT_KEY$8);
  var EVENT_CLICK_DATA_API$3 = "click".concat(EVENT_KEY$8).concat(DATA_API_KEY$4);
  var EVENT_KEYDOWN_DATA_API = "keydown".concat(EVENT_KEY$8).concat(DATA_API_KEY$4);
  var EVENT_KEYUP_DATA_API = "keyup".concat(EVENT_KEY$8).concat(DATA_API_KEY$4);
  var CLASS_NAME_SHOW$6 = 'show';
  var CLASS_NAME_DROPUP = 'dropup';
  var CLASS_NAME_DROPEND = 'dropend';
  var CLASS_NAME_DROPSTART = 'dropstart';
  var CLASS_NAME_NAVBAR = 'navbar';
  var SELECTOR_DATA_TOGGLE$3 = '[data-bs-toggle="dropdown"]';
  var SELECTOR_MENU = '.dropdown-menu';
  var SELECTOR_NAVBAR_NAV = '.navbar-nav';
  var SELECTOR_VISIBLE_ITEMS = '.dropdown-menu .dropdown-item:not(.disabled):not(:disabled)';
  var PLACEMENT_TOP = isRTL() ? 'top-end' : 'top-start';
  var PLACEMENT_TOPEND = isRTL() ? 'top-start' : 'top-end';
  var PLACEMENT_BOTTOM = isRTL() ? 'bottom-end' : 'bottom-start';
  var PLACEMENT_BOTTOMEND = isRTL() ? 'bottom-start' : 'bottom-end';
  var PLACEMENT_RIGHT = isRTL() ? 'left-start' : 'right-start';
  var PLACEMENT_LEFT = isRTL() ? 'right-start' : 'left-start';
  var Default$8 = {
    offset: [0, 2],
    boundary: 'clippingParents',
    reference: 'toggle',
    display: 'dynamic',
    popperConfig: null,
    autoClose: true
  };
  var DefaultType$8 = {
    offset: '(array|string|function)',
    boundary: '(string|element)',
    reference: '(string|element|object)',
    display: 'string',
    popperConfig: '(null|object|function)',
    autoClose: '(boolean|string)'
  };
  /**
   * ------------------------------------------------------------------------
   * Class Definition
   * ------------------------------------------------------------------------
   */

  var Dropdown = /*#__PURE__*/function (_BaseComponent5) {
    _inherits(Dropdown, _BaseComponent5);

    var _super5 = _createSuper(Dropdown);

    function Dropdown(element, config) {
      var _this12;

      _classCallCheck(this, Dropdown);

      _this12 = _super5.call(this, element);
      _this12._popper = null;
      _this12._config = _this12._getConfig(config);
      _this12._menu = _this12._getMenuElement();
      _this12._inNavbar = _this12._detectNavbar();
      return _this12;
    } // Getters


    _createClass(Dropdown, [{
      key: "toggle",
      value: // Public
      function toggle() {
        return this._isShown() ? this.hide() : this.show();
      }
    }, {
      key: "show",
      value: function show() {
        if (isDisabled(this._element) || this._isShown(this._menu)) {
          return;
        }

        var relatedTarget = {
          relatedTarget: this._element
        };
        var showEvent = EventHandler.trigger(this._element, EVENT_SHOW$4, relatedTarget);

        if (showEvent.defaultPrevented) {
          return;
        }

        var parent = Dropdown.getParentFromElement(this._element); // Totally disable Popper for Dropdowns in Navbar

        if (this._inNavbar) {
          Manipulator.setDataAttribute(this._menu, 'popper', 'none');
        } else {
          this._createPopper(parent);
        } // If this is a touch-enabled device we add extra
        // empty mouseover listeners to the body's immediate children;
        // only needed because of broken event delegation on iOS
        // https://www.quirksmode.org/blog/archives/2014/02/mouse_event_bub.html


        if ('ontouchstart' in document.documentElement && !parent.closest(SELECTOR_NAVBAR_NAV)) {
          var _ref4;

          (_ref4 = []).concat.apply(_ref4, _toConsumableArray(document.body.children)).forEach(function (elem) {
            return EventHandler.on(elem, 'mouseover', noop$3);
          });
        }

        this._element.focus();

        this._element.setAttribute('aria-expanded', true);

        this._menu.classList.add(CLASS_NAME_SHOW$6);

        this._element.classList.add(CLASS_NAME_SHOW$6);

        EventHandler.trigger(this._element, EVENT_SHOWN$4, relatedTarget);
      }
    }, {
      key: "hide",
      value: function hide() {
        if (isDisabled(this._element) || !this._isShown(this._menu)) {
          return;
        }

        var relatedTarget = {
          relatedTarget: this._element
        };

        this._completeHide(relatedTarget);
      }
    }, {
      key: "dispose",
      value: function dispose() {
        if (this._popper) {
          this._popper.destroy();
        }

        _get(_getPrototypeOf(Dropdown.prototype), "dispose", this).call(this);
      }
    }, {
      key: "update",
      value: function update() {
        this._inNavbar = this._detectNavbar();

        if (this._popper) {
          this._popper.update();
        }
      } // Private

    }, {
      key: "_completeHide",
      value: function _completeHide(relatedTarget) {
        var hideEvent = EventHandler.trigger(this._element, EVENT_HIDE$4, relatedTarget);

        if (hideEvent.defaultPrevented) {
          return;
        } // If this is a touch-enabled device we remove the extra
        // empty mouseover listeners we added for iOS support


        if ('ontouchstart' in document.documentElement) {
          var _ref5;

          (_ref5 = []).concat.apply(_ref5, _toConsumableArray(document.body.children)).forEach(function (elem) {
            return EventHandler.off(elem, 'mouseover', noop$3);
          });
        }

        if (this._popper) {
          this._popper.destroy();
        }

        this._menu.classList.remove(CLASS_NAME_SHOW$6);

        this._element.classList.remove(CLASS_NAME_SHOW$6);

        this._element.setAttribute('aria-expanded', 'false');

        Manipulator.removeDataAttribute(this._menu, 'popper');
        EventHandler.trigger(this._element, EVENT_HIDDEN$4, relatedTarget);
      }
    }, {
      key: "_getConfig",
      value: function _getConfig(config) {
        config = _objectSpread2(_objectSpread2(_objectSpread2({}, this.constructor.Default), Manipulator.getDataAttributes(this._element)), config);
        typeCheckConfig(NAME$9, config, this.constructor.DefaultType);

        if (_typeof(config.reference) === 'object' && !isElement(config.reference) && typeof config.reference.getBoundingClientRect !== 'function') {
          // Popper virtual elements require a getBoundingClientRect method
          throw new TypeError("".concat(NAME$9.toUpperCase(), ": Option \"reference\" provided type \"object\" without a required \"getBoundingClientRect\" method."));
        }

        return config;
      }
    }, {
      key: "_createPopper",
      value: function _createPopper(parent) {
        if (typeof Popper === 'undefined') {
          throw new TypeError('Bootstrap\'s dropdowns require Popper (https://popper.js.org)');
        }

        var referenceElement = this._element;

        if (this._config.reference === 'parent') {
          referenceElement = parent;
        } else if (isElement(this._config.reference)) {
          referenceElement = getElement(this._config.reference);
        } else if (_typeof(this._config.reference) === 'object') {
          referenceElement = this._config.reference;
        }

        var popperConfig = this._getPopperConfig();

        var isDisplayStatic = popperConfig.modifiers.find(function (modifier) {
          return modifier.name === 'applyStyles' && modifier.enabled === false;
        });
        this._popper = createPopper(referenceElement, this._menu, popperConfig);

        if (isDisplayStatic) {
          Manipulator.setDataAttribute(this._menu, 'popper', 'static');
        }
      }
    }, {
      key: "_isShown",
      value: function _isShown() {
        var element = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this._element;
        return element.classList.contains(CLASS_NAME_SHOW$6);
      }
    }, {
      key: "_getMenuElement",
      value: function _getMenuElement() {
        return SelectorEngine.next(this._element, SELECTOR_MENU)[0];
      }
    }, {
      key: "_getPlacement",
      value: function _getPlacement() {
        var parentDropdown = this._element.parentNode;

        if (parentDropdown.classList.contains(CLASS_NAME_DROPEND)) {
          return PLACEMENT_RIGHT;
        }

        if (parentDropdown.classList.contains(CLASS_NAME_DROPSTART)) {
          return PLACEMENT_LEFT;
        } // We need to trim the value because custom properties can also include spaces


        var isEnd = getComputedStyle(this._menu).getPropertyValue('--bs-position').trim() === 'end';

        if (parentDropdown.classList.contains(CLASS_NAME_DROPUP)) {
          return isEnd ? PLACEMENT_TOPEND : PLACEMENT_TOP;
        }

        return isEnd ? PLACEMENT_BOTTOMEND : PLACEMENT_BOTTOM;
      }
    }, {
      key: "_detectNavbar",
      value: function _detectNavbar() {
        return this._element.closest(".".concat(CLASS_NAME_NAVBAR)) !== null;
      }
    }, {
      key: "_getOffset",
      value: function _getOffset() {
        var _this13 = this;

        var offset = this._config.offset;

        if (typeof offset === 'string') {
          return offset.split(',').map(function (val) {
            return Number.parseInt(val, 10);
          });
        }

        if (typeof offset === 'function') {
          return function (popperData) {
            return offset(popperData, _this13._element);
          };
        }

        return offset;
      }
    }, {
      key: "_getPopperConfig",
      value: function _getPopperConfig() {
        var defaultBsPopperConfig = {
          placement: this._getPlacement(),
          modifiers: [{
            name: 'preventOverflow',
            options: {
              boundary: this._config.boundary
            }
          }, {
            name: 'offset',
            options: {
              offset: this._getOffset()
            }
          }]
        }; // Disable Popper if we have a static display

        if (this._config.display === 'static') {
          defaultBsPopperConfig.modifiers = [{
            name: 'applyStyles',
            enabled: false
          }];
        }

        return _objectSpread2(_objectSpread2({}, defaultBsPopperConfig), typeof this._config.popperConfig === 'function' ? this._config.popperConfig(defaultBsPopperConfig) : this._config.popperConfig);
      }
    }, {
      key: "_selectMenuItem",
      value: function _selectMenuItem(_ref6) {
        var key = _ref6.key,
            target = _ref6.target;
        var items = SelectorEngine.find(SELECTOR_VISIBLE_ITEMS, this._menu).filter(isVisible);

        if (!items.length) {
          return;
        } // if target isn't included in items (e.g. when expanding the dropdown)
        // allow cycling to get the last item in case key equals ARROW_UP_KEY


        getNextActiveElement(items, target, key === ARROW_DOWN_KEY, !items.includes(target)).focus();
      } // Static

    }], [{
      key: "Default",
      get: function get() {
        return Default$8;
      }
    }, {
      key: "DefaultType",
      get: function get() {
        return DefaultType$8;
      }
    }, {
      key: "NAME",
      get: function get() {
        return NAME$9;
      }
    }, {
      key: "jQueryInterface",
      value: function jQueryInterface(config) {
        return this.each(function () {
          var data = Dropdown.getOrCreateInstance(this, config);

          if (typeof config !== 'string') {
            return;
          }

          if (typeof data[config] === 'undefined') {
            throw new TypeError("No method named \"".concat(config, "\""));
          }

          data[config]();
        });
      }
    }, {
      key: "clearMenus",
      value: function clearMenus(event) {
        if (event && (event.button === RIGHT_MOUSE_BUTTON || event.type === 'keyup' && event.key !== TAB_KEY$1)) {
          return;
        }

        var toggles = SelectorEngine.find(SELECTOR_DATA_TOGGLE$3);

        for (var i = 0, len = toggles.length; i < len; i++) {
          var context = Dropdown.getInstance(toggles[i]);

          if (!context || context._config.autoClose === false) {
            continue;
          }

          if (!context._isShown()) {
            continue;
          }

          var relatedTarget = {
            relatedTarget: context._element
          };

          if (event) {
            var composedPath = event.composedPath();
            var isMenuTarget = composedPath.includes(context._menu);

            if (composedPath.includes(context._element) || context._config.autoClose === 'inside' && !isMenuTarget || context._config.autoClose === 'outside' && isMenuTarget) {
              continue;
            } // Tab navigation through the dropdown menu or events from contained inputs shouldn't close the menu


            if (context._menu.contains(event.target) && (event.type === 'keyup' && event.key === TAB_KEY$1 || /input|select|option|textarea|form/i.test(event.target.tagName))) {
              continue;
            }

            if (event.type === 'click') {
              relatedTarget.clickEvent = event;
            }
          }

          context._completeHide(relatedTarget);
        }
      }
    }, {
      key: "getParentFromElement",
      value: function getParentFromElement(element) {
        return getElementFromSelector(element) || element.parentNode;
      }
    }, {
      key: "dataApiKeydownHandler",
      value: function dataApiKeydownHandler(event) {
        // If not input/textarea:
        //  - And not a key in REGEXP_KEYDOWN => not a dropdown command
        // If input/textarea:
        //  - If space key => not a dropdown command
        //  - If key is other than escape
        //    - If key is not up or down => not a dropdown command
        //    - If trigger inside the menu => not a dropdown command
        if (/input|textarea/i.test(event.target.tagName) ? event.key === SPACE_KEY || event.key !== ESCAPE_KEY$2 && (event.key !== ARROW_DOWN_KEY && event.key !== ARROW_UP_KEY || event.target.closest(SELECTOR_MENU)) : !REGEXP_KEYDOWN.test(event.key)) {
          return;
        }

        var isActive = this.classList.contains(CLASS_NAME_SHOW$6);

        if (!isActive && event.key === ESCAPE_KEY$2) {
          return;
        }

        event.preventDefault();
        event.stopPropagation();

        if (isDisabled(this)) {
          return;
        }

        var getToggleButton = this.matches(SELECTOR_DATA_TOGGLE$3) ? this : SelectorEngine.prev(this, SELECTOR_DATA_TOGGLE$3)[0];
        var instance = Dropdown.getOrCreateInstance(getToggleButton);

        if (event.key === ESCAPE_KEY$2) {
          instance.hide();
          return;
        }

        if (event.key === ARROW_UP_KEY || event.key === ARROW_DOWN_KEY) {
          if (!isActive) {
            instance.show();
          }

          instance._selectMenuItem(event);

          return;
        }

        if (!isActive || event.key === SPACE_KEY) {
          Dropdown.clearMenus();
        }
      }
    }]);

    return Dropdown;
  }(BaseComponent);
  /**
   * ------------------------------------------------------------------------
   * Data Api implementation
   * ------------------------------------------------------------------------
   */


  EventHandler.on(document, EVENT_KEYDOWN_DATA_API, SELECTOR_DATA_TOGGLE$3, Dropdown.dataApiKeydownHandler);
  EventHandler.on(document, EVENT_KEYDOWN_DATA_API, SELECTOR_MENU, Dropdown.dataApiKeydownHandler);
  EventHandler.on(document, EVENT_CLICK_DATA_API$3, Dropdown.clearMenus);
  EventHandler.on(document, EVENT_KEYUP_DATA_API, Dropdown.clearMenus);
  EventHandler.on(document, EVENT_CLICK_DATA_API$3, SELECTOR_DATA_TOGGLE$3, function (event) {
    event.preventDefault();
    Dropdown.getOrCreateInstance(this).toggle();
  });
  /**
   * ------------------------------------------------------------------------
   * jQuery
   * ------------------------------------------------------------------------
   * add .Dropdown to jQuery only if jQuery is present
   */

  defineJQueryPlugin(Dropdown);
  /**
   * --------------------------------------------------------------------------
   * Bootstrap (v5.1.3): util/scrollBar.js
   * Licensed under MIT (https://github.com/twbs/bootstrap/blob/main/LICENSE)
   * --------------------------------------------------------------------------
   */

  var SELECTOR_FIXED_CONTENT = '.fixed-top, .fixed-bottom, .is-fixed, .sticky-top';
  var SELECTOR_STICKY_CONTENT = '.sticky-top';

  var ScrollBarHelper = /*#__PURE__*/function () {
    function ScrollBarHelper() {
      _classCallCheck(this, ScrollBarHelper);

      this._element = document.body;
    }

    _createClass(ScrollBarHelper, [{
      key: "getWidth",
      value: function getWidth() {
        // https://developer.mozilla.org/en-US/docs/Web/API/Window/innerWidth#usage_notes
        var documentWidth = document.documentElement.clientWidth;
        return Math.abs(window.innerWidth - documentWidth);
      }
    }, {
      key: "hide",
      value: function hide() {
        var width = this.getWidth();

        this._disableOverFlow(); // give padding to element to balance the hidden scrollbar width


        this._setElementAttributes(this._element, 'paddingRight', function (calculatedValue) {
          return calculatedValue + width;
        }); // trick: We adjust positive paddingRight and negative marginRight to sticky-top elements to keep showing fullwidth


        this._setElementAttributes(SELECTOR_FIXED_CONTENT, 'paddingRight', function (calculatedValue) {
          return calculatedValue + width;
        });

        this._setElementAttributes(SELECTOR_STICKY_CONTENT, 'marginRight', function (calculatedValue) {
          return calculatedValue - width;
        });
      }
    }, {
      key: "_disableOverFlow",
      value: function _disableOverFlow() {
        this._saveInitialAttribute(this._element, 'overflow');

        this._element.style.overflow = 'hidden';
      }
    }, {
      key: "_setElementAttributes",
      value: function _setElementAttributes(selector, styleProp, callback) {
        var _this14 = this;

        var scrollbarWidth = this.getWidth();

        var manipulationCallBack = function manipulationCallBack(element) {
          if (element !== _this14._element && window.innerWidth > element.clientWidth + scrollbarWidth) {
            return;
          }

          _this14._saveInitialAttribute(element, styleProp);

          var calculatedValue = window.getComputedStyle(element)[styleProp];
          element.style[styleProp] = "".concat(callback(Number.parseFloat(calculatedValue)), "px");
        };

        this._applyManipulationCallback(selector, manipulationCallBack);
      }
    }, {
      key: "reset",
      value: function reset() {
        this._resetElementAttributes(this._element, 'overflow');

        this._resetElementAttributes(this._element, 'paddingRight');

        this._resetElementAttributes(SELECTOR_FIXED_CONTENT, 'paddingRight');

        this._resetElementAttributes(SELECTOR_STICKY_CONTENT, 'marginRight');
      }
    }, {
      key: "_saveInitialAttribute",
      value: function _saveInitialAttribute(element, styleProp) {
        var actualValue = element.style[styleProp];

        if (actualValue) {
          Manipulator.setDataAttribute(element, styleProp, actualValue);
        }
      }
    }, {
      key: "_resetElementAttributes",
      value: function _resetElementAttributes(selector, styleProp) {
        var manipulationCallBack = function manipulationCallBack(element) {
          var value = Manipulator.getDataAttribute(element, styleProp);

          if (typeof value === 'undefined') {
            element.style.removeProperty(styleProp);
          } else {
            Manipulator.removeDataAttribute(element, styleProp);
            element.style[styleProp] = value;
          }
        };

        this._applyManipulationCallback(selector, manipulationCallBack);
      }
    }, {
      key: "_applyManipulationCallback",
      value: function _applyManipulationCallback(selector, callBack) {
        if (isElement(selector)) {
          callBack(selector);
        } else {
          SelectorEngine.find(selector, this._element).forEach(callBack);
        }
      }
    }, {
      key: "isOverflowing",
      value: function isOverflowing() {
        return this.getWidth() > 0;
      }
    }]);

    return ScrollBarHelper;
  }();
  /**
   * --------------------------------------------------------------------------
   * Bootstrap (v5.1.3): util/backdrop.js
   * Licensed under MIT (https://github.com/twbs/bootstrap/blob/main/LICENSE)
   * --------------------------------------------------------------------------
   */


  var Default$7 = {
    className: 'modal-backdrop',
    isVisible: true,
    // if false, we use the backdrop helper without adding any element to the dom
    isAnimated: false,
    rootElement: 'body',
    // give the choice to place backdrop under different elements
    clickCallback: null
  };
  var DefaultType$7 = {
    className: 'string',
    isVisible: 'boolean',
    isAnimated: 'boolean',
    rootElement: '(element|string)',
    clickCallback: '(function|null)'
  };
  var NAME$8 = 'backdrop';
  var CLASS_NAME_FADE$4 = 'fade';
  var CLASS_NAME_SHOW$5 = 'show';
  var EVENT_MOUSEDOWN = "mousedown.bs.".concat(NAME$8);

  var Backdrop = /*#__PURE__*/function () {
    function Backdrop(config) {
      _classCallCheck(this, Backdrop);

      this._config = this._getConfig(config);
      this._isAppended = false;
      this._element = null;
    }

    _createClass(Backdrop, [{
      key: "show",
      value: function show(callback) {
        if (!this._config.isVisible) {
          execute(callback);
          return;
        }

        this._append();

        if (this._config.isAnimated) {
          reflow(this._getElement());
        }

        this._getElement().classList.add(CLASS_NAME_SHOW$5);

        this._emulateAnimation(function () {
          execute(callback);
        });
      }
    }, {
      key: "hide",
      value: function hide(callback) {
        var _this15 = this;

        if (!this._config.isVisible) {
          execute(callback);
          return;
        }

        this._getElement().classList.remove(CLASS_NAME_SHOW$5);

        this._emulateAnimation(function () {
          _this15.dispose();

          execute(callback);
        });
      } // Private

    }, {
      key: "_getElement",
      value: function _getElement() {
        if (!this._element) {
          var backdrop = document.createElement('div');
          backdrop.className = this._config.className;

          if (this._config.isAnimated) {
            backdrop.classList.add(CLASS_NAME_FADE$4);
          }

          this._element = backdrop;
        }

        return this._element;
      }
    }, {
      key: "_getConfig",
      value: function _getConfig(config) {
        config = _objectSpread2(_objectSpread2({}, Default$7), _typeof(config) === 'object' ? config : {}); // use getElement() with the default "body" to get a fresh Element on each instantiation

        config.rootElement = getElement(config.rootElement);
        typeCheckConfig(NAME$8, config, DefaultType$7);
        return config;
      }
    }, {
      key: "_append",
      value: function _append() {
        var _this16 = this;

        if (this._isAppended) {
          return;
        }

        this._config.rootElement.append(this._getElement());

        EventHandler.on(this._getElement(), EVENT_MOUSEDOWN, function () {
          execute(_this16._config.clickCallback);
        });
        this._isAppended = true;
      }
    }, {
      key: "dispose",
      value: function dispose() {
        if (!this._isAppended) {
          return;
        }

        EventHandler.off(this._element, EVENT_MOUSEDOWN);

        this._element.remove();

        this._isAppended = false;
      }
    }, {
      key: "_emulateAnimation",
      value: function _emulateAnimation(callback) {
        executeAfterTransition(callback, this._getElement(), this._config.isAnimated);
      }
    }]);

    return Backdrop;
  }();
  /**
   * --------------------------------------------------------------------------
   * Bootstrap (v5.1.3): util/focustrap.js
   * Licensed under MIT (https://github.com/twbs/bootstrap/blob/main/LICENSE)
   * --------------------------------------------------------------------------
   */


  var Default$6 = {
    trapElement: null,
    // The element to trap focus inside of
    autofocus: true
  };
  var DefaultType$6 = {
    trapElement: 'element',
    autofocus: 'boolean'
  };
  var NAME$7 = 'focustrap';
  var DATA_KEY$7 = 'bs.focustrap';
  var EVENT_KEY$7 = ".".concat(DATA_KEY$7);
  var EVENT_FOCUSIN$1 = "focusin".concat(EVENT_KEY$7);
  var EVENT_KEYDOWN_TAB = "keydown.tab".concat(EVENT_KEY$7);
  var TAB_KEY = 'Tab';
  var TAB_NAV_FORWARD = 'forward';
  var TAB_NAV_BACKWARD = 'backward';

  var FocusTrap = /*#__PURE__*/function () {
    function FocusTrap(config) {
      _classCallCheck(this, FocusTrap);

      this._config = this._getConfig(config);
      this._isActive = false;
      this._lastTabNavDirection = null;
    }

    _createClass(FocusTrap, [{
      key: "activate",
      value: function activate() {
        var _this17 = this;

        var _this$_config = this._config,
            trapElement = _this$_config.trapElement,
            autofocus = _this$_config.autofocus;

        if (this._isActive) {
          return;
        }

        if (autofocus) {
          trapElement.focus();
        }

        EventHandler.off(document, EVENT_KEY$7); // guard against infinite focus loop

        EventHandler.on(document, EVENT_FOCUSIN$1, function (event) {
          return _this17._handleFocusin(event);
        });
        EventHandler.on(document, EVENT_KEYDOWN_TAB, function (event) {
          return _this17._handleKeydown(event);
        });
        this._isActive = true;
      }
    }, {
      key: "deactivate",
      value: function deactivate() {
        if (!this._isActive) {
          return;
        }

        this._isActive = false;
        EventHandler.off(document, EVENT_KEY$7);
      } // Private

    }, {
      key: "_handleFocusin",
      value: function _handleFocusin(event) {
        var target = event.target;
        var trapElement = this._config.trapElement;

        if (target === document || target === trapElement || trapElement.contains(target)) {
          return;
        }

        var elements = SelectorEngine.focusableChildren(trapElement);

        if (elements.length === 0) {
          trapElement.focus();
        } else if (this._lastTabNavDirection === TAB_NAV_BACKWARD) {
          elements[elements.length - 1].focus();
        } else {
          elements[0].focus();
        }
      }
    }, {
      key: "_handleKeydown",
      value: function _handleKeydown(event) {
        if (event.key !== TAB_KEY) {
          return;
        }

        this._lastTabNavDirection = event.shiftKey ? TAB_NAV_BACKWARD : TAB_NAV_FORWARD;
      }
    }, {
      key: "_getConfig",
      value: function _getConfig(config) {
        config = _objectSpread2(_objectSpread2({}, Default$6), _typeof(config) === 'object' ? config : {});
        typeCheckConfig(NAME$7, config, DefaultType$6);
        return config;
      }
    }]);

    return FocusTrap;
  }();
  /**
   * --------------------------------------------------------------------------
   * Bootstrap (v5.1.3): modal.js
   * Licensed under MIT (https://github.com/twbs/bootstrap/blob/main/LICENSE)
   * --------------------------------------------------------------------------
   */

  /**
   * ------------------------------------------------------------------------
   * Constants
   * ------------------------------------------------------------------------
   */


  var NAME$6 = 'modal';
  var DATA_KEY$6 = 'bs.modal';
  var EVENT_KEY$6 = ".".concat(DATA_KEY$6);
  var DATA_API_KEY$3 = '.data-api';
  var ESCAPE_KEY$1 = 'Escape';
  var Default$5 = {
    backdrop: true,
    keyboard: true,
    focus: true
  };
  var DefaultType$5 = {
    backdrop: '(boolean|string)',
    keyboard: 'boolean',
    focus: 'boolean'
  };
  var EVENT_HIDE$3 = "hide".concat(EVENT_KEY$6);
  var EVENT_HIDE_PREVENTED = "hidePrevented".concat(EVENT_KEY$6);
  var EVENT_HIDDEN$3 = "hidden".concat(EVENT_KEY$6);
  var EVENT_SHOW$3 = "show".concat(EVENT_KEY$6);
  var EVENT_SHOWN$3 = "shown".concat(EVENT_KEY$6);
  var EVENT_RESIZE = "resize".concat(EVENT_KEY$6);
  var EVENT_CLICK_DISMISS = "click.dismiss".concat(EVENT_KEY$6);
  var EVENT_KEYDOWN_DISMISS$1 = "keydown.dismiss".concat(EVENT_KEY$6);
  var EVENT_MOUSEUP_DISMISS = "mouseup.dismiss".concat(EVENT_KEY$6);
  var EVENT_MOUSEDOWN_DISMISS = "mousedown.dismiss".concat(EVENT_KEY$6);
  var EVENT_CLICK_DATA_API$2 = "click".concat(EVENT_KEY$6).concat(DATA_API_KEY$3);
  var CLASS_NAME_OPEN = 'modal-open';
  var CLASS_NAME_FADE$3 = 'fade';
  var CLASS_NAME_SHOW$4 = 'show';
  var CLASS_NAME_STATIC = 'modal-static';
  var OPEN_SELECTOR$1 = '.modal.show';
  var SELECTOR_DIALOG = '.modal-dialog';
  var SELECTOR_MODAL_BODY = '.modal-body';
  var SELECTOR_DATA_TOGGLE$2 = '[data-bs-toggle="modal"]';
  /**
   * ------------------------------------------------------------------------
   * Class Definition
   * ------------------------------------------------------------------------
   */

  var Modal = /*#__PURE__*/function (_BaseComponent6) {
    _inherits(Modal, _BaseComponent6);

    var _super6 = _createSuper(Modal);

    function Modal(element, config) {
      var _this18;

      _classCallCheck(this, Modal);

      _this18 = _super6.call(this, element);
      _this18._config = _this18._getConfig(config);
      _this18._dialog = SelectorEngine.findOne(SELECTOR_DIALOG, _this18._element);
      _this18._backdrop = _this18._initializeBackDrop();
      _this18._focustrap = _this18._initializeFocusTrap();
      _this18._isShown = false;
      _this18._ignoreBackdropClick = false;
      _this18._isTransitioning = false;
      _this18._scrollBar = new ScrollBarHelper();
      return _this18;
    } // Getters


    _createClass(Modal, [{
      key: "toggle",
      value: // Public
      function toggle(relatedTarget) {
        return this._isShown ? this.hide() : this.show(relatedTarget);
      }
    }, {
      key: "show",
      value: function show(relatedTarget) {
        var _this19 = this;

        if (this._isShown || this._isTransitioning) {
          return;
        }

        var showEvent = EventHandler.trigger(this._element, EVENT_SHOW$3, {
          relatedTarget: relatedTarget
        });

        if (showEvent.defaultPrevented) {
          return;
        }

        this._isShown = true;

        if (this._isAnimated()) {
          this._isTransitioning = true;
        }

        this._scrollBar.hide();

        document.body.classList.add(CLASS_NAME_OPEN);

        this._adjustDialog();

        this._setEscapeEvent();

        this._setResizeEvent();

        EventHandler.on(this._dialog, EVENT_MOUSEDOWN_DISMISS, function () {
          EventHandler.one(_this19._element, EVENT_MOUSEUP_DISMISS, function (event) {
            if (event.target === _this19._element) {
              _this19._ignoreBackdropClick = true;
            }
          });
        });

        this._showBackdrop(function () {
          return _this19._showElement(relatedTarget);
        });
      }
    }, {
      key: "hide",
      value: function hide() {
        var _this20 = this;

        if (!this._isShown || this._isTransitioning) {
          return;
        }

        var hideEvent = EventHandler.trigger(this._element, EVENT_HIDE$3);

        if (hideEvent.defaultPrevented) {
          return;
        }

        this._isShown = false;

        var isAnimated = this._isAnimated();

        if (isAnimated) {
          this._isTransitioning = true;
        }

        this._setEscapeEvent();

        this._setResizeEvent();

        this._focustrap.deactivate();

        this._element.classList.remove(CLASS_NAME_SHOW$4);

        EventHandler.off(this._element, EVENT_CLICK_DISMISS);
        EventHandler.off(this._dialog, EVENT_MOUSEDOWN_DISMISS);

        this._queueCallback(function () {
          return _this20._hideModal();
        }, this._element, isAnimated);
      }
    }, {
      key: "dispose",
      value: function dispose() {
        [window, this._dialog].forEach(function (htmlElement) {
          return EventHandler.off(htmlElement, EVENT_KEY$6);
        });

        this._backdrop.dispose();

        this._focustrap.deactivate();

        _get(_getPrototypeOf(Modal.prototype), "dispose", this).call(this);
      }
    }, {
      key: "handleUpdate",
      value: function handleUpdate() {
        this._adjustDialog();
      } // Private

    }, {
      key: "_initializeBackDrop",
      value: function _initializeBackDrop() {
        return new Backdrop({
          isVisible: Boolean(this._config.backdrop),
          // 'static' option will be translated to true, and booleans will keep their value
          isAnimated: this._isAnimated()
        });
      }
    }, {
      key: "_initializeFocusTrap",
      value: function _initializeFocusTrap() {
        return new FocusTrap({
          trapElement: this._element
        });
      }
    }, {
      key: "_getConfig",
      value: function _getConfig(config) {
        config = _objectSpread2(_objectSpread2(_objectSpread2({}, Default$5), Manipulator.getDataAttributes(this._element)), _typeof(config) === 'object' ? config : {});
        typeCheckConfig(NAME$6, config, DefaultType$5);
        return config;
      }
    }, {
      key: "_showElement",
      value: function _showElement(relatedTarget) {
        var _this21 = this;

        var isAnimated = this._isAnimated();

        var modalBody = SelectorEngine.findOne(SELECTOR_MODAL_BODY, this._dialog);

        if (!this._element.parentNode || this._element.parentNode.nodeType !== Node.ELEMENT_NODE) {
          // Don't move modal's DOM position
          document.body.append(this._element);
        }

        this._element.style.display = 'block';

        this._element.removeAttribute('aria-hidden');

        this._element.setAttribute('aria-modal', true);

        this._element.setAttribute('role', 'dialog');

        this._element.scrollTop = 0;

        if (modalBody) {
          modalBody.scrollTop = 0;
        }

        if (isAnimated) {
          reflow(this._element);
        }

        this._element.classList.add(CLASS_NAME_SHOW$4);

        var transitionComplete = function transitionComplete() {
          if (_this21._config.focus) {
            _this21._focustrap.activate();
          }

          _this21._isTransitioning = false;
          EventHandler.trigger(_this21._element, EVENT_SHOWN$3, {
            relatedTarget: relatedTarget
          });
        };

        this._queueCallback(transitionComplete, this._dialog, isAnimated);
      }
    }, {
      key: "_setEscapeEvent",
      value: function _setEscapeEvent() {
        var _this22 = this;

        if (this._isShown) {
          EventHandler.on(this._element, EVENT_KEYDOWN_DISMISS$1, function (event) {
            if (_this22._config.keyboard && event.key === ESCAPE_KEY$1) {
              event.preventDefault();

              _this22.hide();
            } else if (!_this22._config.keyboard && event.key === ESCAPE_KEY$1) {
              _this22._triggerBackdropTransition();
            }
          });
        } else {
          EventHandler.off(this._element, EVENT_KEYDOWN_DISMISS$1);
        }
      }
    }, {
      key: "_setResizeEvent",
      value: function _setResizeEvent() {
        var _this23 = this;

        if (this._isShown) {
          EventHandler.on(window, EVENT_RESIZE, function () {
            return _this23._adjustDialog();
          });
        } else {
          EventHandler.off(window, EVENT_RESIZE);
        }
      }
    }, {
      key: "_hideModal",
      value: function _hideModal() {
        var _this24 = this;

        this._element.style.display = 'none';

        this._element.setAttribute('aria-hidden', true);

        this._element.removeAttribute('aria-modal');

        this._element.removeAttribute('role');

        this._isTransitioning = false;

        this._backdrop.hide(function () {
          document.body.classList.remove(CLASS_NAME_OPEN);

          _this24._resetAdjustments();

          _this24._scrollBar.reset();

          EventHandler.trigger(_this24._element, EVENT_HIDDEN$3);
        });
      }
    }, {
      key: "_showBackdrop",
      value: function _showBackdrop(callback) {
        var _this25 = this;

        EventHandler.on(this._element, EVENT_CLICK_DISMISS, function (event) {
          if (_this25._ignoreBackdropClick) {
            _this25._ignoreBackdropClick = false;
            return;
          }

          if (event.target !== event.currentTarget) {
            return;
          }

          if (_this25._config.backdrop === true) {
            _this25.hide();
          } else if (_this25._config.backdrop === 'static') {
            _this25._triggerBackdropTransition();
          }
        });

        this._backdrop.show(callback);
      }
    }, {
      key: "_isAnimated",
      value: function _isAnimated() {
        return this._element.classList.contains(CLASS_NAME_FADE$3);
      }
    }, {
      key: "_triggerBackdropTransition",
      value: function _triggerBackdropTransition() {
        var _this26 = this;

        var hideEvent = EventHandler.trigger(this._element, EVENT_HIDE_PREVENTED);

        if (hideEvent.defaultPrevented) {
          return;
        }

        var _this$_element = this._element,
            classList = _this$_element.classList,
            scrollHeight = _this$_element.scrollHeight,
            style = _this$_element.style;
        var isModalOverflowing = scrollHeight > document.documentElement.clientHeight; // return if the following background transition hasn't yet completed

        if (!isModalOverflowing && style.overflowY === 'hidden' || classList.contains(CLASS_NAME_STATIC)) {
          return;
        }

        if (!isModalOverflowing) {
          style.overflowY = 'hidden';
        }

        classList.add(CLASS_NAME_STATIC);

        this._queueCallback(function () {
          classList.remove(CLASS_NAME_STATIC);

          if (!isModalOverflowing) {
            _this26._queueCallback(function () {
              style.overflowY = '';
            }, _this26._dialog);
          }
        }, this._dialog);

        this._element.focus();
      } // ----------------------------------------------------------------------
      // the following methods are used to handle overflowing modals
      // ----------------------------------------------------------------------

    }, {
      key: "_adjustDialog",
      value: function _adjustDialog() {
        var isModalOverflowing = this._element.scrollHeight > document.documentElement.clientHeight;

        var scrollbarWidth = this._scrollBar.getWidth();

        var isBodyOverflowing = scrollbarWidth > 0;

        if (!isBodyOverflowing && isModalOverflowing && !isRTL() || isBodyOverflowing && !isModalOverflowing && isRTL()) {
          this._element.style.paddingLeft = "".concat(scrollbarWidth, "px");
        }

        if (isBodyOverflowing && !isModalOverflowing && !isRTL() || !isBodyOverflowing && isModalOverflowing && isRTL()) {
          this._element.style.paddingRight = "".concat(scrollbarWidth, "px");
        }
      }
    }, {
      key: "_resetAdjustments",
      value: function _resetAdjustments() {
        this._element.style.paddingLeft = '';
        this._element.style.paddingRight = '';
      } // Static

    }], [{
      key: "Default",
      get: function get() {
        return Default$5;
      }
    }, {
      key: "NAME",
      get: function get() {
        return NAME$6;
      }
    }, {
      key: "jQueryInterface",
      value: function jQueryInterface(config, relatedTarget) {
        return this.each(function () {
          var data = Modal.getOrCreateInstance(this, config);

          if (typeof config !== 'string') {
            return;
          }

          if (typeof data[config] === 'undefined') {
            throw new TypeError("No method named \"".concat(config, "\""));
          }

          data[config](relatedTarget);
        });
      }
    }]);

    return Modal;
  }(BaseComponent);
  /**
   * ------------------------------------------------------------------------
   * Data Api implementation
   * ------------------------------------------------------------------------
   */


  EventHandler.on(document, EVENT_CLICK_DATA_API$2, SELECTOR_DATA_TOGGLE$2, function (event) {
    var _this27 = this;

    var target = getElementFromSelector(this);

    if (['A', 'AREA'].includes(this.tagName)) {
      event.preventDefault();
    }

    EventHandler.one(target, EVENT_SHOW$3, function (showEvent) {
      if (showEvent.defaultPrevented) {
        // only register focus restorer if modal will actually get shown
        return;
      }

      EventHandler.one(target, EVENT_HIDDEN$3, function () {
        if (isVisible(_this27)) {
          _this27.focus();
        }
      });
    }); // avoid conflict when clicking moddal toggler while another one is open

    var allReadyOpen = SelectorEngine.findOne(OPEN_SELECTOR$1);

    if (allReadyOpen) {
      Modal.getInstance(allReadyOpen).hide();
    }

    var data = Modal.getOrCreateInstance(target);
    data.toggle(this);
  });
  enableDismissTrigger(Modal);
  /**
   * ------------------------------------------------------------------------
   * jQuery
   * ------------------------------------------------------------------------
   * add .Modal to jQuery only if jQuery is present
   */

  defineJQueryPlugin(Modal);
  /**
   * --------------------------------------------------------------------------
   * Bootstrap (v5.1.3): offcanvas.js
   * Licensed under MIT (https://github.com/twbs/bootstrap/blob/main/LICENSE)
   * --------------------------------------------------------------------------
   */

  /**
   * ------------------------------------------------------------------------
   * Constants
   * ------------------------------------------------------------------------
   */

  var NAME$5 = 'offcanvas';
  var DATA_KEY$5 = 'bs.offcanvas';
  var EVENT_KEY$5 = ".".concat(DATA_KEY$5);
  var DATA_API_KEY$2 = '.data-api';
  var EVENT_LOAD_DATA_API$1 = "load".concat(EVENT_KEY$5).concat(DATA_API_KEY$2);
  var ESCAPE_KEY = 'Escape';
  var Default$4 = {
    backdrop: true,
    keyboard: true,
    scroll: false
  };
  var DefaultType$4 = {
    backdrop: 'boolean',
    keyboard: 'boolean',
    scroll: 'boolean'
  };
  var CLASS_NAME_SHOW$3 = 'show';
  var CLASS_NAME_BACKDROP = 'offcanvas-backdrop';
  var OPEN_SELECTOR = '.offcanvas.show';
  var EVENT_SHOW$2 = "show".concat(EVENT_KEY$5);
  var EVENT_SHOWN$2 = "shown".concat(EVENT_KEY$5);
  var EVENT_HIDE$2 = "hide".concat(EVENT_KEY$5);
  var EVENT_HIDDEN$2 = "hidden".concat(EVENT_KEY$5);
  var EVENT_CLICK_DATA_API$1 = "click".concat(EVENT_KEY$5).concat(DATA_API_KEY$2);
  var EVENT_KEYDOWN_DISMISS = "keydown.dismiss".concat(EVENT_KEY$5);
  var SELECTOR_DATA_TOGGLE$1 = '[data-bs-toggle="offcanvas"]';
  /**
   * ------------------------------------------------------------------------
   * Class Definition
   * ------------------------------------------------------------------------
   */

  var Offcanvas = /*#__PURE__*/function (_BaseComponent7) {
    _inherits(Offcanvas, _BaseComponent7);

    var _super7 = _createSuper(Offcanvas);

    function Offcanvas(element, config) {
      var _this28;

      _classCallCheck(this, Offcanvas);

      _this28 = _super7.call(this, element);
      _this28._config = _this28._getConfig(config);
      _this28._isShown = false;
      _this28._backdrop = _this28._initializeBackDrop();
      _this28._focustrap = _this28._initializeFocusTrap();

      _this28._addEventListeners();

      return _this28;
    } // Getters


    _createClass(Offcanvas, [{
      key: "toggle",
      value: // Public
      function toggle(relatedTarget) {
        return this._isShown ? this.hide() : this.show(relatedTarget);
      }
    }, {
      key: "show",
      value: function show(relatedTarget) {
        var _this29 = this;

        if (this._isShown) {
          return;
        }

        var showEvent = EventHandler.trigger(this._element, EVENT_SHOW$2, {
          relatedTarget: relatedTarget
        });

        if (showEvent.defaultPrevented) {
          return;
        }

        this._isShown = true;
        this._element.style.visibility = 'visible';

        this._backdrop.show();

        if (!this._config.scroll) {
          new ScrollBarHelper().hide();
        }

        this._element.removeAttribute('aria-hidden');

        this._element.setAttribute('aria-modal', true);

        this._element.setAttribute('role', 'dialog');

        this._element.classList.add(CLASS_NAME_SHOW$3);

        var completeCallBack = function completeCallBack() {
          if (!_this29._config.scroll) {
            _this29._focustrap.activate();
          }

          EventHandler.trigger(_this29._element, EVENT_SHOWN$2, {
            relatedTarget: relatedTarget
          });
        };

        this._queueCallback(completeCallBack, this._element, true);
      }
    }, {
      key: "hide",
      value: function hide() {
        var _this30 = this;

        if (!this._isShown) {
          return;
        }

        var hideEvent = EventHandler.trigger(this._element, EVENT_HIDE$2);

        if (hideEvent.defaultPrevented) {
          return;
        }

        this._focustrap.deactivate();

        this._element.blur();

        this._isShown = false;

        this._element.classList.remove(CLASS_NAME_SHOW$3);

        this._backdrop.hide();

        var completeCallback = function completeCallback() {
          _this30._element.setAttribute('aria-hidden', true);

          _this30._element.removeAttribute('aria-modal');

          _this30._element.removeAttribute('role');

          _this30._element.style.visibility = 'hidden';

          if (!_this30._config.scroll) {
            new ScrollBarHelper().reset();
          }

          EventHandler.trigger(_this30._element, EVENT_HIDDEN$2);
        };

        this._queueCallback(completeCallback, this._element, true);
      }
    }, {
      key: "dispose",
      value: function dispose() {
        this._backdrop.dispose();

        this._focustrap.deactivate();

        _get(_getPrototypeOf(Offcanvas.prototype), "dispose", this).call(this);
      } // Private

    }, {
      key: "_getConfig",
      value: function _getConfig(config) {
        config = _objectSpread2(_objectSpread2(_objectSpread2({}, Default$4), Manipulator.getDataAttributes(this._element)), _typeof(config) === 'object' ? config : {});
        typeCheckConfig(NAME$5, config, DefaultType$4);
        return config;
      }
    }, {
      key: "_initializeBackDrop",
      value: function _initializeBackDrop() {
        var _this31 = this;

        return new Backdrop({
          className: CLASS_NAME_BACKDROP,
          isVisible: this._config.backdrop,
          isAnimated: true,
          rootElement: this._element.parentNode,
          clickCallback: function clickCallback() {
            return _this31.hide();
          }
        });
      }
    }, {
      key: "_initializeFocusTrap",
      value: function _initializeFocusTrap() {
        return new FocusTrap({
          trapElement: this._element
        });
      }
    }, {
      key: "_addEventListeners",
      value: function _addEventListeners() {
        var _this32 = this;

        EventHandler.on(this._element, EVENT_KEYDOWN_DISMISS, function (event) {
          if (_this32._config.keyboard && event.key === ESCAPE_KEY) {
            _this32.hide();
          }
        });
      } // Static

    }], [{
      key: "NAME",
      get: function get() {
        return NAME$5;
      }
    }, {
      key: "Default",
      get: function get() {
        return Default$4;
      }
    }, {
      key: "jQueryInterface",
      value: function jQueryInterface(config) {
        return this.each(function () {
          var data = Offcanvas.getOrCreateInstance(this, config);

          if (typeof config !== 'string') {
            return;
          }

          if (data[config] === undefined || config.startsWith('_') || config === 'constructor') {
            throw new TypeError("No method named \"".concat(config, "\""));
          }

          data[config](this);
        });
      }
    }]);

    return Offcanvas;
  }(BaseComponent);
  /**
   * ------------------------------------------------------------------------
   * Data Api implementation
   * ------------------------------------------------------------------------
   */


  EventHandler.on(document, EVENT_CLICK_DATA_API$1, SELECTOR_DATA_TOGGLE$1, function (event) {
    var _this33 = this;

    var target = getElementFromSelector(this);

    if (['A', 'AREA'].includes(this.tagName)) {
      event.preventDefault();
    }

    if (isDisabled(this)) {
      return;
    }

    EventHandler.one(target, EVENT_HIDDEN$2, function () {
      // focus on trigger when it is closed
      if (isVisible(_this33)) {
        _this33.focus();
      }
    }); // avoid conflict when clicking a toggler of an offcanvas, while another is open

    var allReadyOpen = SelectorEngine.findOne(OPEN_SELECTOR);

    if (allReadyOpen && allReadyOpen !== target) {
      Offcanvas.getInstance(allReadyOpen).hide();
    }

    var data = Offcanvas.getOrCreateInstance(target);
    data.toggle(this);
  });
  EventHandler.on(window, EVENT_LOAD_DATA_API$1, function () {
    return SelectorEngine.find(OPEN_SELECTOR).forEach(function (el) {
      return Offcanvas.getOrCreateInstance(el).show();
    });
  });
  enableDismissTrigger(Offcanvas);
  /**
   * ------------------------------------------------------------------------
   * jQuery
   * ------------------------------------------------------------------------
   */

  defineJQueryPlugin(Offcanvas);
  /**
   * --------------------------------------------------------------------------
   * Bootstrap (v5.1.3): util/sanitizer.js
   * Licensed under MIT (https://github.com/twbs/bootstrap/blob/main/LICENSE)
   * --------------------------------------------------------------------------
   */

  var uriAttributes = new Set(['background', 'cite', 'href', 'itemtype', 'longdesc', 'poster', 'src', 'xlink:href']);
  var ARIA_ATTRIBUTE_PATTERN = /^aria-[\w-]*$/i;
  /**
   * A pattern that recognizes a commonly useful subset of URLs that are safe.
   *
   * Shoutout to Angular https://github.com/angular/angular/blob/12.2.x/packages/core/src/sanitization/url_sanitizer.ts
   */

  var SAFE_URL_PATTERN = /^(?:(?:https?|mailto|ftp|tel|file|sms):|[^#&/:?]*(?:[#/?]|$))/i;
  /**
   * A pattern that matches safe data URLs. Only matches image, video and audio types.
   *
   * Shoutout to Angular https://github.com/angular/angular/blob/12.2.x/packages/core/src/sanitization/url_sanitizer.ts
   */

  var DATA_URL_PATTERN = /^data:(?:image\/(?:bmp|gif|jpeg|jpg|png|tiff|webp)|video\/(?:mpeg|mp4|ogg|webm)|audio\/(?:mp3|oga|ogg|opus));base64,[\d+/a-z]+=*$/i;

  var allowedAttribute = function allowedAttribute(attribute, allowedAttributeList) {
    var attributeName = attribute.nodeName.toLowerCase();

    if (allowedAttributeList.includes(attributeName)) {
      if (uriAttributes.has(attributeName)) {
        return Boolean(SAFE_URL_PATTERN.test(attribute.nodeValue) || DATA_URL_PATTERN.test(attribute.nodeValue));
      }

      return true;
    }

    var regExp = allowedAttributeList.filter(function (attributeRegex) {
      return attributeRegex instanceof RegExp;
    }); // Check if a regular expression validates the attribute.

    for (var i = 0, len = regExp.length; i < len; i++) {
      if (regExp[i].test(attributeName)) {
        return true;
      }
    }

    return false;
  };

  var DefaultAllowlist = {
    // Global attributes allowed on any supplied element below.
    '*': ['class', 'dir', 'id', 'lang', 'role', ARIA_ATTRIBUTE_PATTERN],
    a: ['target', 'href', 'title', 'rel'],
    area: [],
    b: [],
    br: [],
    col: [],
    code: [],
    div: [],
    em: [],
    hr: [],
    h1: [],
    h2: [],
    h3: [],
    h4: [],
    h5: [],
    h6: [],
    i: [],
    img: ['src', 'srcset', 'alt', 'title', 'width', 'height'],
    li: [],
    ol: [],
    p: [],
    pre: [],
    s: [],
    small: [],
    span: [],
    sub: [],
    sup: [],
    strong: [],
    u: [],
    ul: []
  };

  function sanitizeHtml(unsafeHtml, allowList, sanitizeFn) {
    var _ref7;

    if (!unsafeHtml.length) {
      return unsafeHtml;
    }

    if (sanitizeFn && typeof sanitizeFn === 'function') {
      return sanitizeFn(unsafeHtml);
    }

    var domParser = new window.DOMParser();
    var createdDocument = domParser.parseFromString(unsafeHtml, 'text/html');

    var elements = (_ref7 = []).concat.apply(_ref7, _toConsumableArray(createdDocument.body.querySelectorAll('*')));

    var _loop = function _loop(i, len) {
      var _ref8;

      var element = elements[i];
      var elementName = element.nodeName.toLowerCase();

      if (!Object.keys(allowList).includes(elementName)) {
        element.remove();
        return "continue";
      }

      var attributeList = (_ref8 = []).concat.apply(_ref8, _toConsumableArray(element.attributes));

      var allowedAttributes = [].concat(allowList['*'] || [], allowList[elementName] || []);
      attributeList.forEach(function (attribute) {
        if (!allowedAttribute(attribute, allowedAttributes)) {
          element.removeAttribute(attribute.nodeName);
        }
      });
    };

    for (var i = 0, len = elements.length; i < len; i++) {
      var _ret = _loop(i);

      if (_ret === "continue") continue;
    }

    return createdDocument.body.innerHTML;
  }
  /**
   * --------------------------------------------------------------------------
   * Bootstrap (v5.1.3): tooltip.js
   * Licensed under MIT (https://github.com/twbs/bootstrap/blob/main/LICENSE)
   * --------------------------------------------------------------------------
   */

  /**
   * ------------------------------------------------------------------------
   * Constants
   * ------------------------------------------------------------------------
   */


  var NAME$4 = 'tooltip';
  var DATA_KEY$4 = 'bs.tooltip';
  var EVENT_KEY$4 = ".".concat(DATA_KEY$4);
  var CLASS_PREFIX$1 = 'bs-tooltip';
  var DISALLOWED_ATTRIBUTES = new Set(['sanitize', 'allowList', 'sanitizeFn']);
  var DefaultType$3 = {
    animation: 'boolean',
    template: 'string',
    title: '(string|element|function)',
    trigger: 'string',
    delay: '(number|object)',
    html: 'boolean',
    selector: '(string|boolean)',
    placement: '(string|function)',
    offset: '(array|string|function)',
    container: '(string|element|boolean)',
    fallbackPlacements: 'array',
    boundary: '(string|element)',
    customClass: '(string|function)',
    sanitize: 'boolean',
    sanitizeFn: '(null|function)',
    allowList: 'object',
    popperConfig: '(null|object|function)'
  };
  var AttachmentMap = {
    AUTO: 'auto',
    TOP: 'top',
    RIGHT: isRTL() ? 'left' : 'right',
    BOTTOM: 'bottom',
    LEFT: isRTL() ? 'right' : 'left'
  };
  var Default$3 = {
    animation: true,
    template: '<div class="tooltip" role="tooltip">' + '<div class="tooltip-arrow"></div>' + '<div class="tooltip-inner"></div>' + '</div>',
    trigger: 'hover focus',
    title: '',
    delay: 0,
    html: false,
    selector: false,
    placement: 'top',
    offset: [0, 0],
    container: false,
    fallbackPlacements: ['top', 'right', 'bottom', 'left'],
    boundary: 'clippingParents',
    customClass: '',
    sanitize: true,
    sanitizeFn: null,
    allowList: DefaultAllowlist,
    popperConfig: null
  };
  var Event$2 = {
    HIDE: "hide".concat(EVENT_KEY$4),
    HIDDEN: "hidden".concat(EVENT_KEY$4),
    SHOW: "show".concat(EVENT_KEY$4),
    SHOWN: "shown".concat(EVENT_KEY$4),
    INSERTED: "inserted".concat(EVENT_KEY$4),
    CLICK: "click".concat(EVENT_KEY$4),
    FOCUSIN: "focusin".concat(EVENT_KEY$4),
    FOCUSOUT: "focusout".concat(EVENT_KEY$4),
    MOUSEENTER: "mouseenter".concat(EVENT_KEY$4),
    MOUSELEAVE: "mouseleave".concat(EVENT_KEY$4)
  };
  var CLASS_NAME_FADE$2 = 'fade';
  var CLASS_NAME_MODAL = 'modal';
  var CLASS_NAME_SHOW$2 = 'show';
  var HOVER_STATE_SHOW = 'show';
  var HOVER_STATE_OUT = 'out';
  var SELECTOR_TOOLTIP_INNER = '.tooltip-inner';
  var SELECTOR_MODAL = ".".concat(CLASS_NAME_MODAL);
  var EVENT_MODAL_HIDE = 'hide.bs.modal';
  var TRIGGER_HOVER = 'hover';
  var TRIGGER_FOCUS = 'focus';
  var TRIGGER_CLICK = 'click';
  var TRIGGER_MANUAL = 'manual';
  /**
   * ------------------------------------------------------------------------
   * Class Definition
   * ------------------------------------------------------------------------
   */

  var Tooltip = /*#__PURE__*/function (_BaseComponent8) {
    _inherits(Tooltip, _BaseComponent8);

    var _super8 = _createSuper(Tooltip);

    function Tooltip(element, config) {
      var _this34;

      _classCallCheck(this, Tooltip);

      if (typeof Popper === 'undefined') {
        throw new TypeError('Bootstrap\'s tooltips require Popper (https://popper.js.org)');
      }

      _this34 = _super8.call(this, element); // private

      _this34._isEnabled = true;
      _this34._timeout = 0;
      _this34._hoverState = '';
      _this34._activeTrigger = {};
      _this34._popper = null; // Protected

      _this34._config = _this34._getConfig(config);
      _this34.tip = null;

      _this34._setListeners();

      return _this34;
    } // Getters


    _createClass(Tooltip, [{
      key: "enable",
      value: // Public
      function enable() {
        this._isEnabled = true;
      }
    }, {
      key: "disable",
      value: function disable() {
        this._isEnabled = false;
      }
    }, {
      key: "toggleEnabled",
      value: function toggleEnabled() {
        this._isEnabled = !this._isEnabled;
      }
    }, {
      key: "toggle",
      value: function toggle(event) {
        if (!this._isEnabled) {
          return;
        }

        if (event) {
          var context = this._initializeOnDelegatedTarget(event);

          context._activeTrigger.click = !context._activeTrigger.click;

          if (context._isWithActiveTrigger()) {
            context._enter(null, context);
          } else {
            context._leave(null, context);
          }
        } else {
          if (this.getTipElement().classList.contains(CLASS_NAME_SHOW$2)) {
            this._leave(null, this);

            return;
          }

          this._enter(null, this);
        }
      }
    }, {
      key: "dispose",
      value: function dispose() {
        clearTimeout(this._timeout);
        EventHandler.off(this._element.closest(SELECTOR_MODAL), EVENT_MODAL_HIDE, this._hideModalHandler);

        if (this.tip) {
          this.tip.remove();
        }

        this._disposePopper();

        _get(_getPrototypeOf(Tooltip.prototype), "dispose", this).call(this);
      }
    }, {
      key: "show",
      value: function show() {
        var _this35 = this;

        if (this._element.style.display === 'none') {
          throw new Error('Please use show on visible elements');
        }

        if (!(this.isWithContent() && this._isEnabled)) {
          return;
        }

        var showEvent = EventHandler.trigger(this._element, this.constructor.Event.SHOW);
        var shadowRoot = findShadowRoot(this._element);
        var isInTheDom = shadowRoot === null ? this._element.ownerDocument.documentElement.contains(this._element) : shadowRoot.contains(this._element);

        if (showEvent.defaultPrevented || !isInTheDom) {
          return;
        } // A trick to recreate a tooltip in case a new title is given by using the NOT documented `data-bs-original-title`
        // This will be removed later in favor of a `setContent` method


        if (this.constructor.NAME === 'tooltip' && this.tip && this.getTitle() !== this.tip.querySelector(SELECTOR_TOOLTIP_INNER).innerHTML) {
          this._disposePopper();

          this.tip.remove();
          this.tip = null;
        }

        var tip = this.getTipElement();
        var tipId = getUID(this.constructor.NAME);
        tip.setAttribute('id', tipId);

        this._element.setAttribute('aria-describedby', tipId);

        if (this._config.animation) {
          tip.classList.add(CLASS_NAME_FADE$2);
        }

        var placement = typeof this._config.placement === 'function' ? this._config.placement.call(this, tip, this._element) : this._config.placement;

        var attachment = this._getAttachment(placement);

        this._addAttachmentClass(attachment);

        var container = this._config.container;
        Data.set(tip, this.constructor.DATA_KEY, this);

        if (!this._element.ownerDocument.documentElement.contains(this.tip)) {
          container.append(tip);
          EventHandler.trigger(this._element, this.constructor.Event.INSERTED);
        }

        if (this._popper) {
          this._popper.update();
        } else {
          this._popper = createPopper(this._element, tip, this._getPopperConfig(attachment));
        }

        tip.classList.add(CLASS_NAME_SHOW$2);

        var customClass = this._resolvePossibleFunction(this._config.customClass);

        if (customClass) {
          var _tip$classList;

          (_tip$classList = tip.classList).add.apply(_tip$classList, _toConsumableArray(customClass.split(' ')));
        } // If this is a touch-enabled device we add extra
        // empty mouseover listeners to the body's immediate children;
        // only needed because of broken event delegation on iOS
        // https://www.quirksmode.org/blog/archives/2014/02/mouse_event_bub.html


        if ('ontouchstart' in document.documentElement) {
          var _ref9;

          (_ref9 = []).concat.apply(_ref9, _toConsumableArray(document.body.children)).forEach(function (element) {
            EventHandler.on(element, 'mouseover', noop$3);
          });
        }

        var complete = function complete() {
          var prevHoverState = _this35._hoverState;
          _this35._hoverState = null;
          EventHandler.trigger(_this35._element, _this35.constructor.Event.SHOWN);

          if (prevHoverState === HOVER_STATE_OUT) {
            _this35._leave(null, _this35);
          }
        };

        var isAnimated = this.tip.classList.contains(CLASS_NAME_FADE$2);

        this._queueCallback(complete, this.tip, isAnimated);
      }
    }, {
      key: "hide",
      value: function hide() {
        var _this36 = this;

        if (!this._popper) {
          return;
        }

        var tip = this.getTipElement();

        var complete = function complete() {
          if (_this36._isWithActiveTrigger()) {
            return;
          }

          if (_this36._hoverState !== HOVER_STATE_SHOW) {
            tip.remove();
          }

          _this36._cleanTipClass();

          _this36._element.removeAttribute('aria-describedby');

          EventHandler.trigger(_this36._element, _this36.constructor.Event.HIDDEN);

          _this36._disposePopper();
        };

        var hideEvent = EventHandler.trigger(this._element, this.constructor.Event.HIDE);

        if (hideEvent.defaultPrevented) {
          return;
        }

        tip.classList.remove(CLASS_NAME_SHOW$2); // If this is a touch-enabled device we remove the extra
        // empty mouseover listeners we added for iOS support

        if ('ontouchstart' in document.documentElement) {
          var _ref10;

          (_ref10 = []).concat.apply(_ref10, _toConsumableArray(document.body.children)).forEach(function (element) {
            return EventHandler.off(element, 'mouseover', noop$3);
          });
        }

        this._activeTrigger[TRIGGER_CLICK] = false;
        this._activeTrigger[TRIGGER_FOCUS] = false;
        this._activeTrigger[TRIGGER_HOVER] = false;
        var isAnimated = this.tip.classList.contains(CLASS_NAME_FADE$2);

        this._queueCallback(complete, this.tip, isAnimated);

        this._hoverState = '';
      }
    }, {
      key: "update",
      value: function update() {
        if (this._popper !== null) {
          this._popper.update();
        }
      } // Protected

    }, {
      key: "isWithContent",
      value: function isWithContent() {
        return Boolean(this.getTitle());
      }
    }, {
      key: "getTipElement",
      value: function getTipElement() {
        if (this.tip) {
          return this.tip;
        }

        var element = document.createElement('div');
        element.innerHTML = this._config.template;
        var tip = element.children[0];
        this.setContent(tip);
        tip.classList.remove(CLASS_NAME_FADE$2, CLASS_NAME_SHOW$2);
        this.tip = tip;
        return this.tip;
      }
    }, {
      key: "setContent",
      value: function setContent(tip) {
        this._sanitizeAndSetContent(tip, this.getTitle(), SELECTOR_TOOLTIP_INNER);
      }
    }, {
      key: "_sanitizeAndSetContent",
      value: function _sanitizeAndSetContent(template, content, selector) {
        var templateElement = SelectorEngine.findOne(selector, template);

        if (!content && templateElement) {
          templateElement.remove();
          return;
        } // we use append for html objects to maintain js events


        this.setElementContent(templateElement, content);
      }
    }, {
      key: "setElementContent",
      value: function setElementContent(element, content) {
        if (element === null) {
          return;
        }

        if (isElement(content)) {
          content = getElement(content); // content is a DOM node or a jQuery

          if (this._config.html) {
            if (content.parentNode !== element) {
              element.innerHTML = '';
              element.append(content);
            }
          } else {
            element.textContent = content.textContent;
          }

          return;
        }

        if (this._config.html) {
          if (this._config.sanitize) {
            content = sanitizeHtml(content, this._config.allowList, this._config.sanitizeFn);
          }

          element.innerHTML = content;
        } else {
          element.textContent = content;
        }
      }
    }, {
      key: "getTitle",
      value: function getTitle() {
        var title = this._element.getAttribute('data-bs-original-title') || this._config.title;

        return this._resolvePossibleFunction(title);
      }
    }, {
      key: "updateAttachment",
      value: function updateAttachment(attachment) {
        if (attachment === 'right') {
          return 'end';
        }

        if (attachment === 'left') {
          return 'start';
        }

        return attachment;
      } // Private

    }, {
      key: "_initializeOnDelegatedTarget",
      value: function _initializeOnDelegatedTarget(event, context) {
        return context || this.constructor.getOrCreateInstance(event.delegateTarget, this._getDelegateConfig());
      }
    }, {
      key: "_getOffset",
      value: function _getOffset() {
        var _this37 = this;

        var offset = this._config.offset;

        if (typeof offset === 'string') {
          return offset.split(',').map(function (val) {
            return Number.parseInt(val, 10);
          });
        }

        if (typeof offset === 'function') {
          return function (popperData) {
            return offset(popperData, _this37._element);
          };
        }

        return offset;
      }
    }, {
      key: "_resolvePossibleFunction",
      value: function _resolvePossibleFunction(content) {
        return typeof content === 'function' ? content.call(this._element) : content;
      }
    }, {
      key: "_getPopperConfig",
      value: function _getPopperConfig(attachment) {
        var _this38 = this;

        var defaultBsPopperConfig = {
          placement: attachment,
          modifiers: [{
            name: 'flip',
            options: {
              fallbackPlacements: this._config.fallbackPlacements
            }
          }, {
            name: 'offset',
            options: {
              offset: this._getOffset()
            }
          }, {
            name: 'preventOverflow',
            options: {
              boundary: this._config.boundary
            }
          }, {
            name: 'arrow',
            options: {
              element: ".".concat(this.constructor.NAME, "-arrow")
            }
          }, {
            name: 'onChange',
            enabled: true,
            phase: 'afterWrite',
            fn: function fn(data) {
              return _this38._handlePopperPlacementChange(data);
            }
          }],
          onFirstUpdate: function onFirstUpdate(data) {
            if (data.options.placement !== data.placement) {
              _this38._handlePopperPlacementChange(data);
            }
          }
        };
        return _objectSpread2(_objectSpread2({}, defaultBsPopperConfig), typeof this._config.popperConfig === 'function' ? this._config.popperConfig(defaultBsPopperConfig) : this._config.popperConfig);
      }
    }, {
      key: "_addAttachmentClass",
      value: function _addAttachmentClass(attachment) {
        this.getTipElement().classList.add("".concat(this._getBasicClassPrefix(), "-").concat(this.updateAttachment(attachment)));
      }
    }, {
      key: "_getAttachment",
      value: function _getAttachment(placement) {
        return AttachmentMap[placement.toUpperCase()];
      }
    }, {
      key: "_setListeners",
      value: function _setListeners() {
        var _this39 = this;

        var triggers = this._config.trigger.split(' ');

        triggers.forEach(function (trigger) {
          if (trigger === 'click') {
            EventHandler.on(_this39._element, _this39.constructor.Event.CLICK, _this39._config.selector, function (event) {
              return _this39.toggle(event);
            });
          } else if (trigger !== TRIGGER_MANUAL) {
            var eventIn = trigger === TRIGGER_HOVER ? _this39.constructor.Event.MOUSEENTER : _this39.constructor.Event.FOCUSIN;
            var eventOut = trigger === TRIGGER_HOVER ? _this39.constructor.Event.MOUSELEAVE : _this39.constructor.Event.FOCUSOUT;
            EventHandler.on(_this39._element, eventIn, _this39._config.selector, function (event) {
              return _this39._enter(event);
            });
            EventHandler.on(_this39._element, eventOut, _this39._config.selector, function (event) {
              return _this39._leave(event);
            });
          }
        });

        this._hideModalHandler = function () {
          if (_this39._element) {
            _this39.hide();
          }
        };

        EventHandler.on(this._element.closest(SELECTOR_MODAL), EVENT_MODAL_HIDE, this._hideModalHandler);

        if (this._config.selector) {
          this._config = _objectSpread2(_objectSpread2({}, this._config), {}, {
            trigger: 'manual',
            selector: ''
          });
        } else {
          this._fixTitle();
        }
      }
    }, {
      key: "_fixTitle",
      value: function _fixTitle() {
        var title = this._element.getAttribute('title');

        var originalTitleType = _typeof(this._element.getAttribute('data-bs-original-title'));

        if (title || originalTitleType !== 'string') {
          this._element.setAttribute('data-bs-original-title', title || '');

          if (title && !this._element.getAttribute('aria-label') && !this._element.textContent) {
            this._element.setAttribute('aria-label', title);
          }

          this._element.setAttribute('title', '');
        }
      }
    }, {
      key: "_enter",
      value: function _enter(event, context) {
        context = this._initializeOnDelegatedTarget(event, context);

        if (event) {
          context._activeTrigger[event.type === 'focusin' ? TRIGGER_FOCUS : TRIGGER_HOVER] = true;
        }

        if (context.getTipElement().classList.contains(CLASS_NAME_SHOW$2) || context._hoverState === HOVER_STATE_SHOW) {
          context._hoverState = HOVER_STATE_SHOW;
          return;
        }

        clearTimeout(context._timeout);
        context._hoverState = HOVER_STATE_SHOW;

        if (!context._config.delay || !context._config.delay.show) {
          context.show();
          return;
        }

        context._timeout = setTimeout(function () {
          if (context._hoverState === HOVER_STATE_SHOW) {
            context.show();
          }
        }, context._config.delay.show);
      }
    }, {
      key: "_leave",
      value: function _leave(event, context) {
        context = this._initializeOnDelegatedTarget(event, context);

        if (event) {
          context._activeTrigger[event.type === 'focusout' ? TRIGGER_FOCUS : TRIGGER_HOVER] = context._element.contains(event.relatedTarget);
        }

        if (context._isWithActiveTrigger()) {
          return;
        }

        clearTimeout(context._timeout);
        context._hoverState = HOVER_STATE_OUT;

        if (!context._config.delay || !context._config.delay.hide) {
          context.hide();
          return;
        }

        context._timeout = setTimeout(function () {
          if (context._hoverState === HOVER_STATE_OUT) {
            context.hide();
          }
        }, context._config.delay.hide);
      }
    }, {
      key: "_isWithActiveTrigger",
      value: function _isWithActiveTrigger() {
        for (var trigger in this._activeTrigger) {
          if (this._activeTrigger[trigger]) {
            return true;
          }
        }

        return false;
      }
    }, {
      key: "_getConfig",
      value: function _getConfig(config) {
        var dataAttributes = Manipulator.getDataAttributes(this._element);
        Object.keys(dataAttributes).forEach(function (dataAttr) {
          if (DISALLOWED_ATTRIBUTES.has(dataAttr)) {
            delete dataAttributes[dataAttr];
          }
        });
        config = _objectSpread2(_objectSpread2(_objectSpread2({}, this.constructor.Default), dataAttributes), _typeof(config) === 'object' && config ? config : {});
        config.container = config.container === false ? document.body : getElement(config.container);

        if (typeof config.delay === 'number') {
          config.delay = {
            show: config.delay,
            hide: config.delay
          };
        }

        if (typeof config.title === 'number') {
          config.title = config.title.toString();
        }

        if (typeof config.content === 'number') {
          config.content = config.content.toString();
        }

        typeCheckConfig(NAME$4, config, this.constructor.DefaultType);

        if (config.sanitize) {
          config.template = sanitizeHtml(config.template, config.allowList, config.sanitizeFn);
        }

        return config;
      }
    }, {
      key: "_getDelegateConfig",
      value: function _getDelegateConfig() {
        var config = {};

        for (var key in this._config) {
          if (this.constructor.Default[key] !== this._config[key]) {
            config[key] = this._config[key];
          }
        } // In the future can be replaced with:
        // const keysWithDifferentValues = Object.entries(this._config).filter(entry => this.constructor.Default[entry[0]] !== this._config[entry[0]])
        // `Object.fromEntries(keysWithDifferentValues)`


        return config;
      }
    }, {
      key: "_cleanTipClass",
      value: function _cleanTipClass() {
        var tip = this.getTipElement();
        var basicClassPrefixRegex = new RegExp("(^|\\s)".concat(this._getBasicClassPrefix(), "\\S+"), 'g');
        var tabClass = tip.getAttribute('class').match(basicClassPrefixRegex);

        if (tabClass !== null && tabClass.length > 0) {
          tabClass.map(function (token) {
            return token.trim();
          }).forEach(function (tClass) {
            return tip.classList.remove(tClass);
          });
        }
      }
    }, {
      key: "_getBasicClassPrefix",
      value: function _getBasicClassPrefix() {
        return CLASS_PREFIX$1;
      }
    }, {
      key: "_handlePopperPlacementChange",
      value: function _handlePopperPlacementChange(popperData) {
        var state = popperData.state;

        if (!state) {
          return;
        }

        this.tip = state.elements.popper;

        this._cleanTipClass();

        this._addAttachmentClass(this._getAttachment(state.placement));
      }
    }, {
      key: "_disposePopper",
      value: function _disposePopper() {
        if (this._popper) {
          this._popper.destroy();

          this._popper = null;
        }
      } // Static

    }], [{
      key: "Default",
      get: function get() {
        return Default$3;
      }
    }, {
      key: "NAME",
      get: function get() {
        return NAME$4;
      }
    }, {
      key: "Event",
      get: function get() {
        return Event$2;
      }
    }, {
      key: "DefaultType",
      get: function get() {
        return DefaultType$3;
      }
    }, {
      key: "jQueryInterface",
      value: function jQueryInterface(config) {
        return this.each(function () {
          var data = Tooltip.getOrCreateInstance(this, config);

          if (typeof config === 'string') {
            if (typeof data[config] === 'undefined') {
              throw new TypeError("No method named \"".concat(config, "\""));
            }

            data[config]();
          }
        });
      }
    }]);

    return Tooltip;
  }(BaseComponent);
  /**
   * ------------------------------------------------------------------------
   * jQuery
   * ------------------------------------------------------------------------
   * add .Tooltip to jQuery only if jQuery is present
   */


  defineJQueryPlugin(Tooltip);
  /**
   * --------------------------------------------------------------------------
   * Bootstrap (v5.1.3): popover.js
   * Licensed under MIT (https://github.com/twbs/bootstrap/blob/main/LICENSE)
   * --------------------------------------------------------------------------
   */

  /**
   * ------------------------------------------------------------------------
   * Constants
   * ------------------------------------------------------------------------
   */

  var NAME$3 = 'popover';
  var DATA_KEY$3 = 'bs.popover';
  var EVENT_KEY$3 = ".".concat(DATA_KEY$3);
  var CLASS_PREFIX = 'bs-popover';

  var Default$2 = _objectSpread2(_objectSpread2({}, Tooltip.Default), {}, {
    placement: 'right',
    offset: [0, 8],
    trigger: 'click',
    content: '',
    template: '<div class="popover" role="tooltip">' + '<div class="popover-arrow"></div>' + '<h3 class="popover-header"></h3>' + '<div class="popover-body"></div>' + '</div>'
  });

  var DefaultType$2 = _objectSpread2(_objectSpread2({}, Tooltip.DefaultType), {}, {
    content: '(string|element|function)'
  });

  var Event$1 = {
    HIDE: "hide".concat(EVENT_KEY$3),
    HIDDEN: "hidden".concat(EVENT_KEY$3),
    SHOW: "show".concat(EVENT_KEY$3),
    SHOWN: "shown".concat(EVENT_KEY$3),
    INSERTED: "inserted".concat(EVENT_KEY$3),
    CLICK: "click".concat(EVENT_KEY$3),
    FOCUSIN: "focusin".concat(EVENT_KEY$3),
    FOCUSOUT: "focusout".concat(EVENT_KEY$3),
    MOUSEENTER: "mouseenter".concat(EVENT_KEY$3),
    MOUSELEAVE: "mouseleave".concat(EVENT_KEY$3)
  };
  var SELECTOR_TITLE = '.popover-header';
  var SELECTOR_CONTENT = '.popover-body';
  /**
   * ------------------------------------------------------------------------
   * Class Definition
   * ------------------------------------------------------------------------
   */

  var Popover = /*#__PURE__*/function (_Tooltip) {
    _inherits(Popover, _Tooltip);

    var _super9 = _createSuper(Popover);

    function Popover() {
      _classCallCheck(this, Popover);

      return _super9.apply(this, arguments);
    }

    _createClass(Popover, [{
      key: "isWithContent",
      value: // Overrides
      function isWithContent() {
        return this.getTitle() || this._getContent();
      }
    }, {
      key: "setContent",
      value: function setContent(tip) {
        this._sanitizeAndSetContent(tip, this.getTitle(), SELECTOR_TITLE);

        this._sanitizeAndSetContent(tip, this._getContent(), SELECTOR_CONTENT);
      } // Private

    }, {
      key: "_getContent",
      value: function _getContent() {
        return this._resolvePossibleFunction(this._config.content);
      }
    }, {
      key: "_getBasicClassPrefix",
      value: function _getBasicClassPrefix() {
        return CLASS_PREFIX;
      } // Static

    }], [{
      key: "Default",
      get: // Getters
      function get() {
        return Default$2;
      }
    }, {
      key: "NAME",
      get: function get() {
        return NAME$3;
      }
    }, {
      key: "Event",
      get: function get() {
        return Event$1;
      }
    }, {
      key: "DefaultType",
      get: function get() {
        return DefaultType$2;
      }
    }, {
      key: "jQueryInterface",
      value: function jQueryInterface(config) {
        return this.each(function () {
          var data = Popover.getOrCreateInstance(this, config);

          if (typeof config === 'string') {
            if (typeof data[config] === 'undefined') {
              throw new TypeError("No method named \"".concat(config, "\""));
            }

            data[config]();
          }
        });
      }
    }]);

    return Popover;
  }(Tooltip);
  /**
   * ------------------------------------------------------------------------
   * jQuery
   * ------------------------------------------------------------------------
   * add .Popover to jQuery only if jQuery is present
   */


  defineJQueryPlugin(Popover);
  /**
   * --------------------------------------------------------------------------
   * Bootstrap (v5.1.3): scrollspy.js
   * Licensed under MIT (https://github.com/twbs/bootstrap/blob/main/LICENSE)
   * --------------------------------------------------------------------------
   */

  /**
   * ------------------------------------------------------------------------
   * Constants
   * ------------------------------------------------------------------------
   */

  var NAME$2 = 'scrollspy';
  var DATA_KEY$2 = 'bs.scrollspy';
  var EVENT_KEY$2 = ".".concat(DATA_KEY$2);
  var DATA_API_KEY$1 = '.data-api';
  var Default$1 = {
    offset: 10,
    method: 'auto',
    target: ''
  };
  var DefaultType$1 = {
    offset: 'number',
    method: 'string',
    target: '(string|element)'
  };
  var EVENT_ACTIVATE = "activate".concat(EVENT_KEY$2);
  var EVENT_SCROLL = "scroll".concat(EVENT_KEY$2);
  var EVENT_LOAD_DATA_API = "load".concat(EVENT_KEY$2).concat(DATA_API_KEY$1);
  var CLASS_NAME_DROPDOWN_ITEM = 'dropdown-item';
  var CLASS_NAME_ACTIVE$1 = 'active';
  var SELECTOR_DATA_SPY = '[data-bs-spy="scroll"]';
  var SELECTOR_NAV_LIST_GROUP$1 = '.nav, .list-group';
  var SELECTOR_NAV_LINKS = '.nav-link';
  var SELECTOR_NAV_ITEMS = '.nav-item';
  var SELECTOR_LIST_ITEMS = '.list-group-item';
  var SELECTOR_LINK_ITEMS = "".concat(SELECTOR_NAV_LINKS, ", ").concat(SELECTOR_LIST_ITEMS, ", .").concat(CLASS_NAME_DROPDOWN_ITEM);
  var SELECTOR_DROPDOWN$1 = '.dropdown';
  var SELECTOR_DROPDOWN_TOGGLE$1 = '.dropdown-toggle';
  var METHOD_OFFSET = 'offset';
  var METHOD_POSITION = 'position';
  /**
   * ------------------------------------------------------------------------
   * Class Definition
   * ------------------------------------------------------------------------
   */

  var ScrollSpy = /*#__PURE__*/function (_BaseComponent9) {
    _inherits(ScrollSpy, _BaseComponent9);

    var _super10 = _createSuper(ScrollSpy);

    function ScrollSpy(element, config) {
      var _this40;

      _classCallCheck(this, ScrollSpy);

      _this40 = _super10.call(this, element);
      _this40._scrollElement = _this40._element.tagName === 'BODY' ? window : _this40._element;
      _this40._config = _this40._getConfig(config);
      _this40._offsets = [];
      _this40._targets = [];
      _this40._activeTarget = null;
      _this40._scrollHeight = 0;
      EventHandler.on(_this40._scrollElement, EVENT_SCROLL, function () {
        return _this40._process();
      });

      _this40.refresh();

      _this40._process();

      return _this40;
    } // Getters


    _createClass(ScrollSpy, [{
      key: "refresh",
      value: // Public
      function refresh() {
        var _this41 = this;

        var autoMethod = this._scrollElement === this._scrollElement.window ? METHOD_OFFSET : METHOD_POSITION;
        var offsetMethod = this._config.method === 'auto' ? autoMethod : this._config.method;
        var offsetBase = offsetMethod === METHOD_POSITION ? this._getScrollTop() : 0;
        this._offsets = [];
        this._targets = [];
        this._scrollHeight = this._getScrollHeight();
        var targets = SelectorEngine.find(SELECTOR_LINK_ITEMS, this._config.target);
        targets.map(function (element) {
          var targetSelector = getSelectorFromElement(element);
          var target = targetSelector ? SelectorEngine.findOne(targetSelector) : null;

          if (target) {
            var targetBCR = target.getBoundingClientRect();

            if (targetBCR.width || targetBCR.height) {
              return [Manipulator[offsetMethod](target).top + offsetBase, targetSelector];
            }
          }

          return null;
        }).filter(function (item) {
          return item;
        }).sort(function (a, b) {
          return a[0] - b[0];
        }).forEach(function (item) {
          _this41._offsets.push(item[0]);

          _this41._targets.push(item[1]);
        });
      }
    }, {
      key: "dispose",
      value: function dispose() {
        EventHandler.off(this._scrollElement, EVENT_KEY$2);

        _get(_getPrototypeOf(ScrollSpy.prototype), "dispose", this).call(this);
      } // Private

    }, {
      key: "_getConfig",
      value: function _getConfig(config) {
        config = _objectSpread2(_objectSpread2(_objectSpread2({}, Default$1), Manipulator.getDataAttributes(this._element)), _typeof(config) === 'object' && config ? config : {});
        config.target = getElement(config.target) || document.documentElement;
        typeCheckConfig(NAME$2, config, DefaultType$1);
        return config;
      }
    }, {
      key: "_getScrollTop",
      value: function _getScrollTop() {
        return this._scrollElement === window ? this._scrollElement.pageYOffset : this._scrollElement.scrollTop;
      }
    }, {
      key: "_getScrollHeight",
      value: function _getScrollHeight() {
        return this._scrollElement.scrollHeight || Math.max(document.body.scrollHeight, document.documentElement.scrollHeight);
      }
    }, {
      key: "_getOffsetHeight",
      value: function _getOffsetHeight() {
        return this._scrollElement === window ? window.innerHeight : this._scrollElement.getBoundingClientRect().height;
      }
    }, {
      key: "_process",
      value: function _process() {
        var scrollTop = this._getScrollTop() + this._config.offset;

        var scrollHeight = this._getScrollHeight();

        var maxScroll = this._config.offset + scrollHeight - this._getOffsetHeight();

        if (this._scrollHeight !== scrollHeight) {
          this.refresh();
        }

        if (scrollTop >= maxScroll) {
          var target = this._targets[this._targets.length - 1];

          if (this._activeTarget !== target) {
            this._activate(target);
          }

          return;
        }

        if (this._activeTarget && scrollTop < this._offsets[0] && this._offsets[0] > 0) {
          this._activeTarget = null;

          this._clear();

          return;
        }

        for (var i = this._offsets.length; i--;) {
          var isActiveTarget = this._activeTarget !== this._targets[i] && scrollTop >= this._offsets[i] && (typeof this._offsets[i + 1] === 'undefined' || scrollTop < this._offsets[i + 1]);

          if (isActiveTarget) {
            this._activate(this._targets[i]);
          }
        }
      }
    }, {
      key: "_activate",
      value: function _activate(target) {
        this._activeTarget = target;

        this._clear();

        var queries = SELECTOR_LINK_ITEMS.split(',').map(function (selector) {
          return "".concat(selector, "[data-bs-target=\"").concat(target, "\"],").concat(selector, "[href=\"").concat(target, "\"]");
        });
        var link = SelectorEngine.findOne(queries.join(','), this._config.target);
        link.classList.add(CLASS_NAME_ACTIVE$1);

        if (link.classList.contains(CLASS_NAME_DROPDOWN_ITEM)) {
          SelectorEngine.findOne(SELECTOR_DROPDOWN_TOGGLE$1, link.closest(SELECTOR_DROPDOWN$1)).classList.add(CLASS_NAME_ACTIVE$1);
        } else {
          SelectorEngine.parents(link, SELECTOR_NAV_LIST_GROUP$1).forEach(function (listGroup) {
            // Set triggered links parents as active
            // With both <ul> and <nav> markup a parent is the previous sibling of any nav ancestor
            SelectorEngine.prev(listGroup, "".concat(SELECTOR_NAV_LINKS, ", ").concat(SELECTOR_LIST_ITEMS)).forEach(function (item) {
              return item.classList.add(CLASS_NAME_ACTIVE$1);
            }); // Handle special case when .nav-link is inside .nav-item

            SelectorEngine.prev(listGroup, SELECTOR_NAV_ITEMS).forEach(function (navItem) {
              SelectorEngine.children(navItem, SELECTOR_NAV_LINKS).forEach(function (item) {
                return item.classList.add(CLASS_NAME_ACTIVE$1);
              });
            });
          });
        }

        EventHandler.trigger(this._scrollElement, EVENT_ACTIVATE, {
          relatedTarget: target
        });
      }
    }, {
      key: "_clear",
      value: function _clear() {
        SelectorEngine.find(SELECTOR_LINK_ITEMS, this._config.target).filter(function (node) {
          return node.classList.contains(CLASS_NAME_ACTIVE$1);
        }).forEach(function (node) {
          return node.classList.remove(CLASS_NAME_ACTIVE$1);
        });
      } // Static

    }], [{
      key: "Default",
      get: function get() {
        return Default$1;
      }
    }, {
      key: "NAME",
      get: function get() {
        return NAME$2;
      }
    }, {
      key: "jQueryInterface",
      value: function jQueryInterface(config) {
        return this.each(function () {
          var data = ScrollSpy.getOrCreateInstance(this, config);

          if (typeof config !== 'string') {
            return;
          }

          if (typeof data[config] === 'undefined') {
            throw new TypeError("No method named \"".concat(config, "\""));
          }

          data[config]();
        });
      }
    }]);

    return ScrollSpy;
  }(BaseComponent);
  /**
   * ------------------------------------------------------------------------
   * Data Api implementation
   * ------------------------------------------------------------------------
   */


  EventHandler.on(window, EVENT_LOAD_DATA_API, function () {
    SelectorEngine.find(SELECTOR_DATA_SPY).forEach(function (spy) {
      return new ScrollSpy(spy);
    });
  });
  /**
   * ------------------------------------------------------------------------
   * jQuery
   * ------------------------------------------------------------------------
   * add .ScrollSpy to jQuery only if jQuery is present
   */

  defineJQueryPlugin(ScrollSpy);
  /**
   * --------------------------------------------------------------------------
   * Bootstrap (v5.1.3): tab.js
   * Licensed under MIT (https://github.com/twbs/bootstrap/blob/main/LICENSE)
   * --------------------------------------------------------------------------
   */

  /**
   * ------------------------------------------------------------------------
   * Constants
   * ------------------------------------------------------------------------
   */

  var NAME$1 = 'tab';
  var DATA_KEY$1 = 'bs.tab';
  var EVENT_KEY$1 = ".".concat(DATA_KEY$1);
  var DATA_API_KEY = '.data-api';
  var EVENT_HIDE$1 = "hide".concat(EVENT_KEY$1);
  var EVENT_HIDDEN$1 = "hidden".concat(EVENT_KEY$1);
  var EVENT_SHOW$1 = "show".concat(EVENT_KEY$1);
  var EVENT_SHOWN$1 = "shown".concat(EVENT_KEY$1);
  var EVENT_CLICK_DATA_API = "click".concat(EVENT_KEY$1).concat(DATA_API_KEY);
  var CLASS_NAME_DROPDOWN_MENU = 'dropdown-menu';
  var CLASS_NAME_ACTIVE = 'active';
  var CLASS_NAME_FADE$1 = 'fade';
  var CLASS_NAME_SHOW$1 = 'show';
  var SELECTOR_DROPDOWN = '.dropdown';
  var SELECTOR_NAV_LIST_GROUP = '.nav, .list-group';
  var SELECTOR_ACTIVE = '.active';
  var SELECTOR_ACTIVE_UL = ':scope > li > .active';
  var SELECTOR_DATA_TOGGLE = '[data-bs-toggle="tab"], [data-bs-toggle="pill"], [data-bs-toggle="list"]';
  var SELECTOR_DROPDOWN_TOGGLE = '.dropdown-toggle';
  var SELECTOR_DROPDOWN_ACTIVE_CHILD = ':scope > .dropdown-menu .active';
  /**
   * ------------------------------------------------------------------------
   * Class Definition
   * ------------------------------------------------------------------------
   */

  var Tab = /*#__PURE__*/function (_BaseComponent10) {
    _inherits(Tab, _BaseComponent10);

    var _super11 = _createSuper(Tab);

    function Tab() {
      _classCallCheck(this, Tab);

      return _super11.apply(this, arguments);
    }

    _createClass(Tab, [{
      key: "show",
      value: // Public
      function show() {
        var _this42 = this;

        if (this._element.parentNode && this._element.parentNode.nodeType === Node.ELEMENT_NODE && this._element.classList.contains(CLASS_NAME_ACTIVE)) {
          return;
        }

        var previous;
        var target = getElementFromSelector(this._element);

        var listElement = this._element.closest(SELECTOR_NAV_LIST_GROUP);

        if (listElement) {
          var itemSelector = listElement.nodeName === 'UL' || listElement.nodeName === 'OL' ? SELECTOR_ACTIVE_UL : SELECTOR_ACTIVE;
          previous = SelectorEngine.find(itemSelector, listElement);
          previous = previous[previous.length - 1];
        }

        var hideEvent = previous ? EventHandler.trigger(previous, EVENT_HIDE$1, {
          relatedTarget: this._element
        }) : null;
        var showEvent = EventHandler.trigger(this._element, EVENT_SHOW$1, {
          relatedTarget: previous
        });

        if (showEvent.defaultPrevented || hideEvent !== null && hideEvent.defaultPrevented) {
          return;
        }

        this._activate(this._element, listElement);

        var complete = function complete() {
          EventHandler.trigger(previous, EVENT_HIDDEN$1, {
            relatedTarget: _this42._element
          });
          EventHandler.trigger(_this42._element, EVENT_SHOWN$1, {
            relatedTarget: previous
          });
        };

        if (target) {
          this._activate(target, target.parentNode, complete);
        } else {
          complete();
        }
      } // Private

    }, {
      key: "_activate",
      value: function _activate(element, container, callback) {
        var _this43 = this;

        var activeElements = container && (container.nodeName === 'UL' || container.nodeName === 'OL') ? SelectorEngine.find(SELECTOR_ACTIVE_UL, container) : SelectorEngine.children(container, SELECTOR_ACTIVE);
        var active = activeElements[0];
        var isTransitioning = callback && active && active.classList.contains(CLASS_NAME_FADE$1);

        var complete = function complete() {
          return _this43._transitionComplete(element, active, callback);
        };

        if (active && isTransitioning) {
          active.classList.remove(CLASS_NAME_SHOW$1);

          this._queueCallback(complete, element, true);
        } else {
          complete();
        }
      }
    }, {
      key: "_transitionComplete",
      value: function _transitionComplete(element, active, callback) {
        if (active) {
          active.classList.remove(CLASS_NAME_ACTIVE);
          var dropdownChild = SelectorEngine.findOne(SELECTOR_DROPDOWN_ACTIVE_CHILD, active.parentNode);

          if (dropdownChild) {
            dropdownChild.classList.remove(CLASS_NAME_ACTIVE);
          }

          if (active.getAttribute('role') === 'tab') {
            active.setAttribute('aria-selected', false);
          }
        }

        element.classList.add(CLASS_NAME_ACTIVE);

        if (element.getAttribute('role') === 'tab') {
          element.setAttribute('aria-selected', true);
        }

        reflow(element);

        if (element.classList.contains(CLASS_NAME_FADE$1)) {
          element.classList.add(CLASS_NAME_SHOW$1);
        }

        var parent = element.parentNode;

        if (parent && parent.nodeName === 'LI') {
          parent = parent.parentNode;
        }

        if (parent && parent.classList.contains(CLASS_NAME_DROPDOWN_MENU)) {
          var dropdownElement = element.closest(SELECTOR_DROPDOWN);

          if (dropdownElement) {
            SelectorEngine.find(SELECTOR_DROPDOWN_TOGGLE, dropdownElement).forEach(function (dropdown) {
              return dropdown.classList.add(CLASS_NAME_ACTIVE);
            });
          }

          element.setAttribute('aria-expanded', true);
        }

        if (callback) {
          callback();
        }
      } // Static

    }], [{
      key: "NAME",
      get: // Getters
      function get() {
        return NAME$1;
      }
    }, {
      key: "jQueryInterface",
      value: function jQueryInterface(config) {
        return this.each(function () {
          var data = Tab.getOrCreateInstance(this);

          if (typeof config === 'string') {
            if (typeof data[config] === 'undefined') {
              throw new TypeError("No method named \"".concat(config, "\""));
            }

            data[config]();
          }
        });
      }
    }]);

    return Tab;
  }(BaseComponent);
  /**
   * ------------------------------------------------------------------------
   * Data Api implementation
   * ------------------------------------------------------------------------
   */


  EventHandler.on(document, EVENT_CLICK_DATA_API, SELECTOR_DATA_TOGGLE, function (event) {
    if (['A', 'AREA'].includes(this.tagName)) {
      event.preventDefault();
    }

    if (isDisabled(this)) {
      return;
    }

    var data = Tab.getOrCreateInstance(this);
    data.show();
  });
  /**
   * ------------------------------------------------------------------------
   * jQuery
   * ------------------------------------------------------------------------
   * add .Tab to jQuery only if jQuery is present
   */

  defineJQueryPlugin(Tab);
  /**
   * --------------------------------------------------------------------------
   * Bootstrap (v5.1.3): toast.js
   * Licensed under MIT (https://github.com/twbs/bootstrap/blob/main/LICENSE)
   * --------------------------------------------------------------------------
   */

  /**
   * ------------------------------------------------------------------------
   * Constants
   * ------------------------------------------------------------------------
   */

  var NAME = 'toast';
  var DATA_KEY = 'bs.toast';
  var EVENT_KEY = ".".concat(DATA_KEY);
  var EVENT_MOUSEOVER = "mouseover".concat(EVENT_KEY);
  var EVENT_MOUSEOUT = "mouseout".concat(EVENT_KEY);
  var EVENT_FOCUSIN = "focusin".concat(EVENT_KEY);
  var EVENT_FOCUSOUT = "focusout".concat(EVENT_KEY);
  var EVENT_HIDE = "hide".concat(EVENT_KEY);
  var EVENT_HIDDEN = "hidden".concat(EVENT_KEY);
  var EVENT_SHOW = "show".concat(EVENT_KEY);
  var EVENT_SHOWN = "shown".concat(EVENT_KEY);
  var CLASS_NAME_FADE = 'fade';
  var CLASS_NAME_HIDE = 'hide'; // @deprecated - kept here only for backwards compatibility

  var CLASS_NAME_SHOW = 'show';
  var CLASS_NAME_SHOWING = 'showing';
  var DefaultType = {
    animation: 'boolean',
    autohide: 'boolean',
    delay: 'number'
  };
  var Default = {
    animation: true,
    autohide: true,
    delay: 5000
  };
  /**
   * ------------------------------------------------------------------------
   * Class Definition
   * ------------------------------------------------------------------------
   */

  var Toast = /*#__PURE__*/function (_BaseComponent11) {
    _inherits(Toast, _BaseComponent11);

    var _super12 = _createSuper(Toast);

    function Toast(element, config) {
      var _this44;

      _classCallCheck(this, Toast);

      _this44 = _super12.call(this, element);
      _this44._config = _this44._getConfig(config);
      _this44._timeout = null;
      _this44._hasMouseInteraction = false;
      _this44._hasKeyboardInteraction = false;

      _this44._setListeners();

      return _this44;
    } // Getters


    _createClass(Toast, [{
      key: "show",
      value: // Public
      function show() {
        var _this45 = this;

        var showEvent = EventHandler.trigger(this._element, EVENT_SHOW);

        if (showEvent.defaultPrevented) {
          return;
        }

        this._clearTimeout();

        if (this._config.animation) {
          this._element.classList.add(CLASS_NAME_FADE);
        }

        var complete = function complete() {
          _this45._element.classList.remove(CLASS_NAME_SHOWING);

          EventHandler.trigger(_this45._element, EVENT_SHOWN);

          _this45._maybeScheduleHide();
        };

        this._element.classList.remove(CLASS_NAME_HIDE); // @deprecated


        reflow(this._element);

        this._element.classList.add(CLASS_NAME_SHOW);

        this._element.classList.add(CLASS_NAME_SHOWING);

        this._queueCallback(complete, this._element, this._config.animation);
      }
    }, {
      key: "hide",
      value: function hide() {
        var _this46 = this;

        if (!this._element.classList.contains(CLASS_NAME_SHOW)) {
          return;
        }

        var hideEvent = EventHandler.trigger(this._element, EVENT_HIDE);

        if (hideEvent.defaultPrevented) {
          return;
        }

        var complete = function complete() {
          _this46._element.classList.add(CLASS_NAME_HIDE); // @deprecated


          _this46._element.classList.remove(CLASS_NAME_SHOWING);

          _this46._element.classList.remove(CLASS_NAME_SHOW);

          EventHandler.trigger(_this46._element, EVENT_HIDDEN);
        };

        this._element.classList.add(CLASS_NAME_SHOWING);

        this._queueCallback(complete, this._element, this._config.animation);
      }
    }, {
      key: "dispose",
      value: function dispose() {
        this._clearTimeout();

        if (this._element.classList.contains(CLASS_NAME_SHOW)) {
          this._element.classList.remove(CLASS_NAME_SHOW);
        }

        _get(_getPrototypeOf(Toast.prototype), "dispose", this).call(this);
      } // Private

    }, {
      key: "_getConfig",
      value: function _getConfig(config) {
        config = _objectSpread2(_objectSpread2(_objectSpread2({}, Default), Manipulator.getDataAttributes(this._element)), _typeof(config) === 'object' && config ? config : {});
        typeCheckConfig(NAME, config, this.constructor.DefaultType);
        return config;
      }
    }, {
      key: "_maybeScheduleHide",
      value: function _maybeScheduleHide() {
        var _this47 = this;

        if (!this._config.autohide) {
          return;
        }

        if (this._hasMouseInteraction || this._hasKeyboardInteraction) {
          return;
        }

        this._timeout = setTimeout(function () {
          _this47.hide();
        }, this._config.delay);
      }
    }, {
      key: "_onInteraction",
      value: function _onInteraction(event, isInteracting) {
        switch (event.type) {
          case 'mouseover':
          case 'mouseout':
            this._hasMouseInteraction = isInteracting;
            break;

          case 'focusin':
          case 'focusout':
            this._hasKeyboardInteraction = isInteracting;
            break;
        }

        if (isInteracting) {
          this._clearTimeout();

          return;
        }

        var nextElement = event.relatedTarget;

        if (this._element === nextElement || this._element.contains(nextElement)) {
          return;
        }

        this._maybeScheduleHide();
      }
    }, {
      key: "_setListeners",
      value: function _setListeners() {
        var _this48 = this;

        EventHandler.on(this._element, EVENT_MOUSEOVER, function (event) {
          return _this48._onInteraction(event, true);
        });
        EventHandler.on(this._element, EVENT_MOUSEOUT, function (event) {
          return _this48._onInteraction(event, false);
        });
        EventHandler.on(this._element, EVENT_FOCUSIN, function (event) {
          return _this48._onInteraction(event, true);
        });
        EventHandler.on(this._element, EVENT_FOCUSOUT, function (event) {
          return _this48._onInteraction(event, false);
        });
      }
    }, {
      key: "_clearTimeout",
      value: function _clearTimeout() {
        clearTimeout(this._timeout);
        this._timeout = null;
      } // Static

    }], [{
      key: "DefaultType",
      get: function get() {
        return DefaultType;
      }
    }, {
      key: "Default",
      get: function get() {
        return Default;
      }
    }, {
      key: "NAME",
      get: function get() {
        return NAME;
      }
    }, {
      key: "jQueryInterface",
      value: function jQueryInterface(config) {
        return this.each(function () {
          var data = Toast.getOrCreateInstance(this, config);

          if (typeof config === 'string') {
            if (typeof data[config] === 'undefined') {
              throw new TypeError("No method named \"".concat(config, "\""));
            }

            data[config](this);
          }
        });
      }
    }]);

    return Toast;
  }(BaseComponent);

  enableDismissTrigger(Toast);
  /**
   * ------------------------------------------------------------------------
   * jQuery
   * ------------------------------------------------------------------------
   * add .Toast to jQuery only if jQuery is present
   */

  defineJQueryPlugin(Toast);

  /**
   * @license
   * Copyright 2019 Google LLC
   * SPDX-License-Identifier: BSD-3-Clause
   */
  var t$1 = window.ShadowRoot && (void 0 === window.ShadyCSS || window.ShadyCSS.nativeShadow) && "adoptedStyleSheets" in Document.prototype && "replace" in CSSStyleSheet.prototype,
      e$2 = Symbol(),
      n$3 = new Map();

  var s$3 = /*#__PURE__*/function () {
    function s(t, n) {
      _classCallCheck(this, s);

      if (this._$cssResult$ = !0, n !== e$2) throw Error("CSSResult is not constructable. Use `unsafeCSS` or `css` instead.");
      this.cssText = t;
    }

    _createClass(s, [{
      key: "styleSheet",
      get: function get() {
        var e = n$3.get(this.cssText);
        return t$1 && void 0 === e && (n$3.set(this.cssText, e = new CSSStyleSheet()), e.replaceSync(this.cssText)), e;
      }
    }, {
      key: "toString",
      value: function toString() {
        return this.cssText;
      }
    }]);

    return s;
  }();

  var o$3 = function o(t) {
    return new s$3("string" == typeof t ? t : t + "", e$2);
  },
      r$2 = function r(t) {
    for (var _len = arguments.length, n = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
      n[_key - 1] = arguments[_key];
    }

    var o = 1 === t.length ? t[0] : n.reduce(function (e, n, s) {
      return e + function (t) {
        if (!0 === t._$cssResult$) return t.cssText;
        if ("number" == typeof t) return t;
        throw Error("Value passed to 'css' function must be a 'css' function result: " + t + ". Use 'unsafeCSS' to pass non-literal values, but take care to ensure page security.");
      }(n) + t[s + 1];
    }, t[0]);
    return new s$3(o, e$2);
  },
      i$1 = function i(e, n) {
    t$1 ? e.adoptedStyleSheets = n.map(function (t) {
      return t instanceof CSSStyleSheet ? t : t.styleSheet;
    }) : n.forEach(function (t) {
      var n = document.createElement("style"),
          s = window.litNonce;
      void 0 !== s && n.setAttribute("nonce", s), n.textContent = t.cssText, e.appendChild(n);
    });
  },
      S$1 = t$1 ? function (t) {
    return t;
  } : function (t) {
    return t instanceof CSSStyleSheet ? function (t) {
      var e = "";

      var _iterator = _createForOfIteratorHelper(t.cssRules),
          _step;

      try {
        for (_iterator.s(); !(_step = _iterator.n()).done;) {
          var _n = _step.value;
          e += _n.cssText;
        }
      } catch (err) {
        _iterator.e(err);
      } finally {
        _iterator.f();
      }

      return o$3(e);
    }(t) : t;
  };

  /**
   * @license
   * Copyright 2017 Google LLC
   * SPDX-License-Identifier: BSD-3-Clause
   */

  var s$2;

  var e$1 = window.trustedTypes,
      r$1 = e$1 ? e$1.emptyScript : "",
      h$1 = window.reactiveElementPolyfillSupport,
      o$2 = {
    toAttribute: function toAttribute(t, i) {
      switch (i) {
        case Boolean:
          t = t ? r$1 : null;
          break;

        case Object:
        case Array:
          t = null == t ? t : JSON.stringify(t);
      }

      return t;
    },
    fromAttribute: function fromAttribute(t, i) {
      var s = t;

      switch (i) {
        case Boolean:
          s = null !== t;
          break;

        case Number:
          s = null === t ? null : Number(t);
          break;

        case Object:
        case Array:
          try {
            s = JSON.parse(t);
          } catch (t) {
            s = null;
          }

      }

      return s;
    }
  },
      n$2 = function n(t, i) {
    return i !== t && (i == i || t == t);
  },
      l$3 = {
    attribute: !0,
    type: String,
    converter: o$2,
    reflect: !1,
    hasChanged: n$2
  };

  var a$1 = /*#__PURE__*/function (_HTMLElement) {
    _inherits(a, _HTMLElement);

    var _super = _createSuper(a);

    function a() {
      var _this;

      _classCallCheck(this, a);

      _this = _super.call(this), _this._$Et = new Map(), _this.isUpdatePending = !1, _this.hasUpdated = !1, _this._$Ei = null, _this.o();
      return _this;
    }

    _createClass(a, [{
      key: "o",
      value: function o() {
        var _this2 = this;

        var t;
        this._$Ep = new Promise(function (t) {
          return _this2.enableUpdating = t;
        }), this._$AL = new Map(), this._$Em(), this.requestUpdate(), null === (t = this.constructor.l) || void 0 === t || t.forEach(function (t) {
          return t(_this2);
        });
      }
    }, {
      key: "addController",
      value: function addController(t) {
        var i, s;
        (null !== (i = this._$Eg) && void 0 !== i ? i : this._$Eg = []).push(t), void 0 !== this.renderRoot && this.isConnected && (null === (s = t.hostConnected) || void 0 === s || s.call(t));
      }
    }, {
      key: "removeController",
      value: function removeController(t) {
        var i;
        null === (i = this._$Eg) || void 0 === i || i.splice(this._$Eg.indexOf(t) >>> 0, 1);
      }
    }, {
      key: "_$Em",
      value: function _$Em() {
        var _this3 = this;

        this.constructor.elementProperties.forEach(function (t, i) {
          _this3.hasOwnProperty(i) && (_this3._$Et.set(i, _this3[i]), delete _this3[i]);
        });
      }
    }, {
      key: "createRenderRoot",
      value: function createRenderRoot() {
        var t;
        var s = null !== (t = this.shadowRoot) && void 0 !== t ? t : this.attachShadow(this.constructor.shadowRootOptions);
        return i$1(s, this.constructor.elementStyles), s;
      }
    }, {
      key: "connectedCallback",
      value: function connectedCallback() {
        var t;
        void 0 === this.renderRoot && (this.renderRoot = this.createRenderRoot()), this.enableUpdating(!0), null === (t = this._$Eg) || void 0 === t || t.forEach(function (t) {
          var i;
          return null === (i = t.hostConnected) || void 0 === i ? void 0 : i.call(t);
        });
      }
    }, {
      key: "enableUpdating",
      value: function enableUpdating(t) {}
    }, {
      key: "disconnectedCallback",
      value: function disconnectedCallback() {
        var t;
        null === (t = this._$Eg) || void 0 === t || t.forEach(function (t) {
          var i;
          return null === (i = t.hostDisconnected) || void 0 === i ? void 0 : i.call(t);
        });
      }
    }, {
      key: "attributeChangedCallback",
      value: function attributeChangedCallback(t, i, s) {
        this._$AK(t, s);
      }
    }, {
      key: "_$ES",
      value: function _$ES(t, i) {
        var s = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : l$3;
        var e, r;

        var h = this.constructor._$Eh(t, s);

        if (void 0 !== h && !0 === s.reflect) {
          var _n = (null !== (r = null === (e = s.converter) || void 0 === e ? void 0 : e.toAttribute) && void 0 !== r ? r : o$2.toAttribute)(i, s.type);

          this._$Ei = t, null == _n ? this.removeAttribute(h) : this.setAttribute(h, _n), this._$Ei = null;
        }
      }
    }, {
      key: "_$AK",
      value: function _$AK(t, i) {
        var s, e, r;

        var h = this.constructor,
            n = h._$Eu.get(t);

        if (void 0 !== n && this._$Ei !== n) {
          var _t = h.getPropertyOptions(n),
              _l = _t.converter,
              _a2 = null !== (r = null !== (e = null === (s = _l) || void 0 === s ? void 0 : s.fromAttribute) && void 0 !== e ? e : "function" == typeof _l ? _l : null) && void 0 !== r ? r : o$2.fromAttribute;

          this._$Ei = n, this[n] = _a2(i, _t.type), this._$Ei = null;
        }
      }
    }, {
      key: "requestUpdate",
      value: function requestUpdate(t, i, s) {
        var e = !0;
        void 0 !== t && (((s = s || this.constructor.getPropertyOptions(t)).hasChanged || n$2)(this[t], i) ? (this._$AL.has(t) || this._$AL.set(t, i), !0 === s.reflect && this._$Ei !== t && (void 0 === this._$EC && (this._$EC = new Map()), this._$EC.set(t, s))) : e = !1), !this.isUpdatePending && e && (this._$Ep = this._$E_());
      }
    }, {
      key: "_$E_",
      value: function () {
        var _$E_2 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee() {
          var t;
          return regeneratorRuntime.wrap(function _callee$(_context) {
            while (1) {
              switch (_context.prev = _context.next) {
                case 0:
                  this.isUpdatePending = !0;
                  _context.prev = 1;
                  _context.next = 4;
                  return this._$Ep;

                case 4:
                  _context.next = 9;
                  break;

                case 6:
                  _context.prev = 6;
                  _context.t0 = _context["catch"](1);
                  Promise.reject(_context.t0);

                case 9:
                  t = this.scheduleUpdate();
                  _context.t1 = null != t;

                  if (!_context.t1) {
                    _context.next = 14;
                    break;
                  }

                  _context.next = 14;
                  return t;

                case 14:
                  return _context.abrupt("return", !this.isUpdatePending);

                case 15:
                case "end":
                  return _context.stop();
              }
            }
          }, _callee, this, [[1, 6]]);
        }));

        function _$E_() {
          return _$E_2.apply(this, arguments);
        }

        return _$E_;
      }()
    }, {
      key: "scheduleUpdate",
      value: function scheduleUpdate() {
        return this.performUpdate();
      }
    }, {
      key: "performUpdate",
      value: function performUpdate() {
        var _this4 = this;

        var t;
        if (!this.isUpdatePending) return;
        this.hasUpdated, this._$Et && (this._$Et.forEach(function (t, i) {
          return _this4[i] = t;
        }), this._$Et = void 0);
        var i = !1;
        var s = this._$AL;

        try {
          i = this.shouldUpdate(s), i ? (this.willUpdate(s), null === (t = this._$Eg) || void 0 === t || t.forEach(function (t) {
            var i;
            return null === (i = t.hostUpdate) || void 0 === i ? void 0 : i.call(t);
          }), this.update(s)) : this._$EU();
        } catch (t) {
          throw i = !1, this._$EU(), t;
        }

        i && this._$AE(s);
      }
    }, {
      key: "willUpdate",
      value: function willUpdate(t) {}
    }, {
      key: "_$AE",
      value: function _$AE(t) {
        var i;
        null === (i = this._$Eg) || void 0 === i || i.forEach(function (t) {
          var i;
          return null === (i = t.hostUpdated) || void 0 === i ? void 0 : i.call(t);
        }), this.hasUpdated || (this.hasUpdated = !0, this.firstUpdated(t)), this.updated(t);
      }
    }, {
      key: "_$EU",
      value: function _$EU() {
        this._$AL = new Map(), this.isUpdatePending = !1;
      }
    }, {
      key: "updateComplete",
      get: function get() {
        return this.getUpdateComplete();
      }
    }, {
      key: "getUpdateComplete",
      value: function getUpdateComplete() {
        return this._$Ep;
      }
    }, {
      key: "shouldUpdate",
      value: function shouldUpdate(t) {
        return !0;
      }
    }, {
      key: "update",
      value: function update(t) {
        var _this5 = this;

        void 0 !== this._$EC && (this._$EC.forEach(function (t, i) {
          return _this5._$ES(i, _this5[i], t);
        }), this._$EC = void 0), this._$EU();
      }
    }, {
      key: "updated",
      value: function updated(t) {}
    }, {
      key: "firstUpdated",
      value: function firstUpdated(t) {}
    }], [{
      key: "addInitializer",
      value: function addInitializer(t) {
        var i;
        null !== (i = this.l) && void 0 !== i || (this.l = []), this.l.push(t);
      }
    }, {
      key: "observedAttributes",
      get: function get() {
        var _this6 = this;

        this.finalize();
        var t = [];
        return this.elementProperties.forEach(function (i, s) {
          var e = _this6._$Eh(s, i);

          void 0 !== e && (_this6._$Eu.set(e, s), t.push(e));
        }), t;
      }
    }, {
      key: "createProperty",
      value: function createProperty(t) {
        var i = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : l$3;

        if (i.state && (i.attribute = !1), this.finalize(), this.elementProperties.set(t, i), !i.noAccessor && !this.prototype.hasOwnProperty(t)) {
          var _s = "symbol" == _typeof(t) ? Symbol() : "__" + t,
              _e = this.getPropertyDescriptor(t, _s, i);

          void 0 !== _e && Object.defineProperty(this.prototype, t, _e);
        }
      }
    }, {
      key: "getPropertyDescriptor",
      value: function getPropertyDescriptor(t, i, s) {
        return {
          get: function get() {
            return this[i];
          },
          set: function set(e) {
            var r = this[t];
            this[i] = e, this.requestUpdate(t, r, s);
          },
          configurable: !0,
          enumerable: !0
        };
      }
    }, {
      key: "getPropertyOptions",
      value: function getPropertyOptions(t) {
        return this.elementProperties.get(t) || l$3;
      }
    }, {
      key: "finalize",
      value: function finalize() {
        if (this.hasOwnProperty("finalized")) return !1;
        this.finalized = !0;
        var t = Object.getPrototypeOf(this);

        if (t.finalize(), this.elementProperties = new Map(t.elementProperties), this._$Eu = new Map(), this.hasOwnProperty("properties")) {
          var _t2 = this.properties,
              _i = [].concat(_toConsumableArray(Object.getOwnPropertyNames(_t2)), _toConsumableArray(Object.getOwnPropertySymbols(_t2)));

          var _iterator = _createForOfIteratorHelper(_i),
              _step;

          try {
            for (_iterator.s(); !(_step = _iterator.n()).done;) {
              var _s2 = _step.value;
              this.createProperty(_s2, _t2[_s2]);
            }
          } catch (err) {
            _iterator.e(err);
          } finally {
            _iterator.f();
          }
        }

        return this.elementStyles = this.finalizeStyles(this.styles), !0;
      }
    }, {
      key: "finalizeStyles",
      value: function finalizeStyles(i) {
        var s = [];

        if (Array.isArray(i)) {
          var _e2 = new Set(i.flat(1 / 0).reverse());

          var _iterator2 = _createForOfIteratorHelper(_e2),
              _step2;

          try {
            for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {
              var _i2 = _step2.value;
              s.unshift(S$1(_i2));
            }
          } catch (err) {
            _iterator2.e(err);
          } finally {
            _iterator2.f();
          }
        } else void 0 !== i && s.push(S$1(i));

        return s;
      }
    }, {
      key: "_$Eh",
      value: function _$Eh(t, i) {
        var s = i.attribute;
        return !1 === s ? void 0 : "string" == typeof s ? s : "string" == typeof t ? t.toLowerCase() : void 0;
      }
    }]);

    return a;
  }( /*#__PURE__*/_wrapNativeSuper(HTMLElement));

  a$1.finalized = !0, a$1.elementProperties = new Map(), a$1.elementStyles = [], a$1.shadowRootOptions = {
    mode: "open"
  }, null == h$1 || h$1({
    ReactiveElement: a$1
  }), (null !== (s$2 = globalThis.reactiveElementVersions) && void 0 !== s$2 ? s$2 : globalThis.reactiveElementVersions = []).push("1.3.1");

  /**
   * @license
   * Copyright 2017 Google LLC
   * SPDX-License-Identifier: BSD-3-Clause
   */
  var t;

  var i = globalThis.trustedTypes,
      s$1 = i ? i.createPolicy("lit-html", {
    createHTML: function createHTML(t) {
      return t;
    }
  }) : void 0,
      e = "lit$".concat((Math.random() + "").slice(9), "$"),
      o$1 = "?" + e,
      n$1 = "<".concat(o$1, ">"),
      l$2 = document,
      h = function h() {
    var t = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : "";
    return l$2.createComment(t);
  },
      r = function r(t) {
    return null === t || "object" != _typeof(t) && "function" != typeof t;
  },
      d = Array.isArray,
      u = function u(t) {
    var i;
    return d(t) || "function" == typeof (null === (i = t) || void 0 === i ? void 0 : i[Symbol.iterator]);
  },
      c = /<(?:(!--|\/[^a-zA-Z])|(\/?[a-zA-Z][^>\s]*)|(\/?$))/g,
      v = /-->/g,
      a = />/g,
      f = />|[ 	\n\r](?:([^\s"'>=/]+)([ 	\n\r]*=[ 	\n\r]*(?:[^ 	\n\r"'`<>=]|("|')|))|$)/g,
      _ = /'/g,
      m = /"/g,
      g = /^(?:script|style|textarea|title)$/i,
      p = function p(t) {
    return function (i) {
      for (var _len = arguments.length, s = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
        s[_key - 1] = arguments[_key];
      }

      return {
        _$litType$: t,
        strings: i,
        values: s
      };
    };
  },
      $ = p(1),
      y$1 = p(2),
      b = Symbol.for("lit-noChange"),
      w = Symbol.for("lit-nothing"),
      T = new WeakMap(),
      x$1 = function x(t, i, s) {
    var e, o;
    var n = null !== (e = null == s ? void 0 : s.renderBefore) && void 0 !== e ? e : i;
    var l = n._$litPart$;

    if (void 0 === l) {
      var _t = null !== (o = null == s ? void 0 : s.renderBefore) && void 0 !== o ? o : null;

      n._$litPart$ = l = new N(i.insertBefore(h(), _t), _t, void 0, null != s ? s : {});
    }

    return l._$AI(t), l;
  },
      A = l$2.createTreeWalker(l$2, 129, null, !1),
      C = function C(t, i) {
    var o = t.length - 1,
        l = [];
    var h,
        r = 2 === i ? "<svg>" : "",
        d = c;

    for (var _i = 0; _i < o; _i++) {
      var _s = t[_i];

      var _o = void 0,
          _u = void 0,
          _p = -1,
          _$ = 0;

      for (; _$ < _s.length && (d.lastIndex = _$, _u = d.exec(_s), null !== _u);) {
        _$ = d.lastIndex, d === c ? "!--" === _u[1] ? d = v : void 0 !== _u[1] ? d = a : void 0 !== _u[2] ? (g.test(_u[2]) && (h = RegExp("</" + _u[2], "g")), d = f) : void 0 !== _u[3] && (d = f) : d === f ? ">" === _u[0] ? (d = null != h ? h : c, _p = -1) : void 0 === _u[1] ? _p = -2 : (_p = d.lastIndex - _u[2].length, _o = _u[1], d = void 0 === _u[3] ? f : '"' === _u[3] ? m : _) : d === m || d === _ ? d = f : d === v || d === a ? d = c : (d = f, h = void 0);
      }

      var _y = d === f && t[_i + 1].startsWith("/>") ? " " : "";

      r += d === c ? _s + n$1 : _p >= 0 ? (l.push(_o), _s.slice(0, _p) + "$lit$" + _s.slice(_p) + e + _y) : _s + e + (-2 === _p ? (l.push(void 0), _i) : _y);
    }

    var u = r + (t[o] || "<?>") + (2 === i ? "</svg>" : "");
    if (!Array.isArray(t) || !t.hasOwnProperty("raw")) throw Error("invalid template strings array");
    return [void 0 !== s$1 ? s$1.createHTML(u) : u, l];
  };

  var E = /*#__PURE__*/function () {
    function E(_ref, n) {
      var t = _ref.strings,
          s = _ref._$litType$;

      _classCallCheck(this, E);

      var l;
      this.parts = [];
      var r = 0,
          d = 0;

      var u = t.length - 1,
          c = this.parts,
          _C = C(t, s),
          _C2 = _slicedToArray(_C, 2),
          v = _C2[0],
          a = _C2[1];

      if (this.el = E.createElement(v, n), A.currentNode = this.el.content, 2 === s) {
        var _t2 = this.el.content,
            _i2 = _t2.firstChild;
        _i2.remove(), _t2.append.apply(_t2, _toConsumableArray(_i2.childNodes));
      }

      for (; null !== (l = A.nextNode()) && c.length < u;) {
        if (1 === l.nodeType) {
          if (l.hasAttributes()) {
            var _t3 = [];

            var _iterator = _createForOfIteratorHelper(l.getAttributeNames()),
                _step;

            try {
              for (_iterator.s(); !(_step = _iterator.n()).done;) {
                var _i5 = _step.value;

                if (_i5.endsWith("$lit$") || _i5.startsWith(e)) {
                  var _s2 = a[d++];

                  if (_t3.push(_i5), void 0 !== _s2) {
                    var _t5 = l.getAttribute(_s2.toLowerCase() + "$lit$").split(e),
                        _i6 = /([.?@])?(.*)/.exec(_s2);

                    c.push({
                      type: 1,
                      index: r,
                      name: _i6[2],
                      strings: _t5,
                      ctor: "." === _i6[1] ? M : "?" === _i6[1] ? H : "@" === _i6[1] ? I : S
                    });
                  } else c.push({
                    type: 6,
                    index: r
                  });
                }
              }
            } catch (err) {
              _iterator.e(err);
            } finally {
              _iterator.f();
            }

            for (var _i3 = 0, _t4 = _t3; _i3 < _t4.length; _i3++) {
              var _i4 = _t4[_i3];
              l.removeAttribute(_i4);
            }
          }

          if (g.test(l.tagName)) {
            var _t6 = l.textContent.split(e),
                _s3 = _t6.length - 1;

            if (_s3 > 0) {
              l.textContent = i ? i.emptyScript : "";

              for (var _i7 = 0; _i7 < _s3; _i7++) {
                l.append(_t6[_i7], h()), A.nextNode(), c.push({
                  type: 2,
                  index: ++r
                });
              }

              l.append(_t6[_s3], h());
            }
          }
        } else if (8 === l.nodeType) if (l.data === o$1) c.push({
          type: 2,
          index: r
        });else {
          var _t7 = -1;

          for (; -1 !== (_t7 = l.data.indexOf(e, _t7 + 1));) {
            c.push({
              type: 7,
              index: r
            }), _t7 += e.length - 1;
          }
        }

        r++;
      }
    }

    _createClass(E, null, [{
      key: "createElement",
      value: function createElement(t, i) {
        var s = l$2.createElement("template");
        return s.innerHTML = t, s;
      }
    }]);

    return E;
  }();

  function P(t, i) {
    var s = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : t;
    var e = arguments.length > 3 ? arguments[3] : undefined;
    var o, n, l, h;
    if (i === b) return i;
    var d = void 0 !== e ? null === (o = s._$Cl) || void 0 === o ? void 0 : o[e] : s._$Cu;
    var u = r(i) ? void 0 : i._$litDirective$;
    return (null == d ? void 0 : d.constructor) !== u && (null === (n = null == d ? void 0 : d._$AO) || void 0 === n || n.call(d, !1), void 0 === u ? d = void 0 : (d = new u(t), d._$AT(t, s, e)), void 0 !== e ? (null !== (l = (h = s)._$Cl) && void 0 !== l ? l : h._$Cl = [])[e] = d : s._$Cu = d), void 0 !== d && (i = P(t, d._$AS(t, i.values), d, e)), i;
  }

  var V = /*#__PURE__*/function () {
    function V(t, i) {
      _classCallCheck(this, V);

      this.v = [], this._$AN = void 0, this._$AD = t, this._$AM = i;
    }

    _createClass(V, [{
      key: "parentNode",
      get: function get() {
        return this._$AM.parentNode;
      }
    }, {
      key: "_$AU",
      get: function get() {
        return this._$AM._$AU;
      }
    }, {
      key: "p",
      value: function p(t) {
        var i;
        var _this$_$AD = this._$AD,
            s = _this$_$AD.el.content,
            e = _this$_$AD.parts,
            o = (null !== (i = null == t ? void 0 : t.creationScope) && void 0 !== i ? i : l$2).importNode(s, !0);
        A.currentNode = o;
        var n = A.nextNode(),
            h = 0,
            r = 0,
            d = e[0];

        for (; void 0 !== d;) {
          if (h === d.index) {
            var _i8 = void 0;

            2 === d.type ? _i8 = new N(n, n.nextSibling, this, t) : 1 === d.type ? _i8 = new d.ctor(n, d.name, d.strings, this, t) : 6 === d.type && (_i8 = new L(n, this, t)), this.v.push(_i8), d = e[++r];
          }

          h !== (null == d ? void 0 : d.index) && (n = A.nextNode(), h++);
        }

        return o;
      }
    }, {
      key: "m",
      value: function m(t) {
        var i = 0;

        var _iterator2 = _createForOfIteratorHelper(this.v),
            _step2;

        try {
          for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {
            var _s4 = _step2.value;
            void 0 !== _s4 && (void 0 !== _s4.strings ? (_s4._$AI(t, _s4, i), i += _s4.strings.length - 2) : _s4._$AI(t[i])), i++;
          }
        } catch (err) {
          _iterator2.e(err);
        } finally {
          _iterator2.f();
        }
      }
    }]);

    return V;
  }();

  var N = /*#__PURE__*/function () {
    function N(t, i, s, e) {
      _classCallCheck(this, N);

      var o;
      this.type = 2, this._$AH = w, this._$AN = void 0, this._$AA = t, this._$AB = i, this._$AM = s, this.options = e, this._$Cg = null === (o = null == e ? void 0 : e.isConnected) || void 0 === o || o;
    }

    _createClass(N, [{
      key: "_$AU",
      get: function get() {
        var t, i;
        return null !== (i = null === (t = this._$AM) || void 0 === t ? void 0 : t._$AU) && void 0 !== i ? i : this._$Cg;
      }
    }, {
      key: "parentNode",
      get: function get() {
        var t = this._$AA.parentNode;
        var i = this._$AM;
        return void 0 !== i && 11 === t.nodeType && (t = i.parentNode), t;
      }
    }, {
      key: "startNode",
      get: function get() {
        return this._$AA;
      }
    }, {
      key: "endNode",
      get: function get() {
        return this._$AB;
      }
    }, {
      key: "_$AI",
      value: function _$AI(t) {
        var i = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this;
        t = P(this, t, i), r(t) ? t === w || null == t || "" === t ? (this._$AH !== w && this._$AR(), this._$AH = w) : t !== this._$AH && t !== b && this.$(t) : void 0 !== t._$litType$ ? this.T(t) : void 0 !== t.nodeType ? this.k(t) : u(t) ? this.S(t) : this.$(t);
      }
    }, {
      key: "A",
      value: function A(t) {
        var i = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this._$AB;
        return this._$AA.parentNode.insertBefore(t, i);
      }
    }, {
      key: "k",
      value: function k(t) {
        this._$AH !== t && (this._$AR(), this._$AH = this.A(t));
      }
    }, {
      key: "$",
      value: function $(t) {
        this._$AH !== w && r(this._$AH) ? this._$AA.nextSibling.data = t : this.k(l$2.createTextNode(t)), this._$AH = t;
      }
    }, {
      key: "T",
      value: function T(t) {
        var i;
        var s = t.values,
            e = t._$litType$,
            o = "number" == typeof e ? this._$AC(t) : (void 0 === e.el && (e.el = E.createElement(e.h, this.options)), e);
        if ((null === (i = this._$AH) || void 0 === i ? void 0 : i._$AD) === o) this._$AH.m(s);else {
          var _t8 = new V(o, this),
              _i9 = _t8.p(this.options);

          _t8.m(s), this.k(_i9), this._$AH = _t8;
        }
      }
    }, {
      key: "_$AC",
      value: function _$AC(t) {
        var i = T.get(t.strings);
        return void 0 === i && T.set(t.strings, i = new E(t)), i;
      }
    }, {
      key: "S",
      value: function S(t) {
        d(this._$AH) || (this._$AH = [], this._$AR());
        var i = this._$AH;
        var s,
            e = 0;

        var _iterator3 = _createForOfIteratorHelper(t),
            _step3;

        try {
          for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {
            var _o2 = _step3.value;
            e === i.length ? i.push(s = new N(this.A(h()), this.A(h()), this, this.options)) : s = i[e], s._$AI(_o2), e++;
          }
        } catch (err) {
          _iterator3.e(err);
        } finally {
          _iterator3.f();
        }

        e < i.length && (this._$AR(s && s._$AB.nextSibling, e), i.length = e);
      }
    }, {
      key: "_$AR",
      value: function _$AR() {
        var t = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this._$AA.nextSibling;
        var i = arguments.length > 1 ? arguments[1] : undefined;
        var s;

        for (null === (s = this._$AP) || void 0 === s || s.call(this, !1, !0, i); t && t !== this._$AB;) {
          var _i10 = t.nextSibling;
          t.remove(), t = _i10;
        }
      }
    }, {
      key: "setConnected",
      value: function setConnected(t) {
        var i;
        void 0 === this._$AM && (this._$Cg = t, null === (i = this._$AP) || void 0 === i || i.call(this, t));
      }
    }]);

    return N;
  }();

  var S = /*#__PURE__*/function () {
    function S(t, i, s, e, o) {
      _classCallCheck(this, S);

      this.type = 1, this._$AH = w, this._$AN = void 0, this.element = t, this.name = i, this._$AM = e, this.options = o, s.length > 2 || "" !== s[0] || "" !== s[1] ? (this._$AH = Array(s.length - 1).fill(new String()), this.strings = s) : this._$AH = w;
    }

    _createClass(S, [{
      key: "tagName",
      get: function get() {
        return this.element.tagName;
      }
    }, {
      key: "_$AU",
      get: function get() {
        return this._$AM._$AU;
      }
    }, {
      key: "_$AI",
      value: function _$AI(t) {
        var i = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this;
        var s = arguments.length > 2 ? arguments[2] : undefined;
        var e = arguments.length > 3 ? arguments[3] : undefined;
        var o = this.strings;
        var n = !1;
        if (void 0 === o) t = P(this, t, i, 0), n = !r(t) || t !== this._$AH && t !== b, n && (this._$AH = t);else {
          var _e = t;

          var _l, _h;

          for (t = o[0], _l = 0; _l < o.length - 1; _l++) {
            _h = P(this, _e[s + _l], i, _l), _h === b && (_h = this._$AH[_l]), n || (n = !r(_h) || _h !== this._$AH[_l]), _h === w ? t = w : t !== w && (t += (null != _h ? _h : "") + o[_l + 1]), this._$AH[_l] = _h;
          }
        }
        n && !e && this.C(t);
      }
    }, {
      key: "C",
      value: function C(t) {
        t === w ? this.element.removeAttribute(this.name) : this.element.setAttribute(this.name, null != t ? t : "");
      }
    }]);

    return S;
  }();

  var M = /*#__PURE__*/function (_S) {
    _inherits(M, _S);

    var _super = _createSuper(M);

    function M() {
      var _this;

      _classCallCheck(this, M);

      _this = _super.apply(this, arguments), _this.type = 3;
      return _this;
    }

    _createClass(M, [{
      key: "C",
      value: function C(t) {
        this.element[this.name] = t === w ? void 0 : t;
      }
    }]);

    return M;
  }(S);

  var k = i ? i.emptyScript : "";

  var H = /*#__PURE__*/function (_S2) {
    _inherits(H, _S2);

    var _super2 = _createSuper(H);

    function H() {
      var _this2;

      _classCallCheck(this, H);

      _this2 = _super2.apply(this, arguments), _this2.type = 4;
      return _this2;
    }

    _createClass(H, [{
      key: "C",
      value: function C(t) {
        t && t !== w ? this.element.setAttribute(this.name, k) : this.element.removeAttribute(this.name);
      }
    }]);

    return H;
  }(S);

  var I = /*#__PURE__*/function (_S3) {
    _inherits(I, _S3);

    var _super3 = _createSuper(I);

    function I(t, i, s, e, o) {
      var _this3;

      _classCallCheck(this, I);

      _this3 = _super3.call(this, t, i, s, e, o), _this3.type = 5;
      return _this3;
    }

    _createClass(I, [{
      key: "_$AI",
      value: function _$AI(t) {
        var i = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this;
        var s;
        if ((t = null !== (s = P(this, t, i, 0)) && void 0 !== s ? s : w) === b) return;
        var e = this._$AH,
            o = t === w && e !== w || t.capture !== e.capture || t.once !== e.once || t.passive !== e.passive,
            n = t !== w && (e === w || o);
        o && this.element.removeEventListener(this.name, this, e), n && this.element.addEventListener(this.name, this, t), this._$AH = t;
      }
    }, {
      key: "handleEvent",
      value: function handleEvent(t) {
        var i, s;
        "function" == typeof this._$AH ? this._$AH.call(null !== (s = null === (i = this.options) || void 0 === i ? void 0 : i.host) && void 0 !== s ? s : this.element, t) : this._$AH.handleEvent(t);
      }
    }]);

    return I;
  }(S);

  var L = /*#__PURE__*/function () {
    function L(t, i, s) {
      _classCallCheck(this, L);

      this.element = t, this.type = 6, this._$AN = void 0, this._$AM = i, this.options = s;
    }

    _createClass(L, [{
      key: "_$AU",
      get: function get() {
        return this._$AM._$AU;
      }
    }, {
      key: "_$AI",
      value: function _$AI(t) {
        P(this, t);
      }
    }]);

    return L;
  }();

  var z = window.litHtmlPolyfillSupport;
  null == z || z(E, N), (null !== (t = globalThis.litHtmlVersions) && void 0 !== t ? t : globalThis.litHtmlVersions = []).push("2.2.1");

  /**
   * @license
   * Copyright 2017 Google LLC
   * SPDX-License-Identifier: BSD-3-Clause
   */

  var l$1, o;

  var s = /*#__PURE__*/function (_t) {
    _inherits(s, _t);

    var _super = _createSuper(s);

    function s() {
      var _this;

      _classCallCheck(this, s);

      _this = _super.apply(this, arguments), _this.renderOptions = {
        host: _assertThisInitialized(_this)
      }, _this._$Dt = void 0;
      return _this;
    }

    _createClass(s, [{
      key: "createRenderRoot",
      value: function createRenderRoot() {
        var t, e;

        var i = _get(_getPrototypeOf(s.prototype), "createRenderRoot", this).call(this);

        return null !== (t = (e = this.renderOptions).renderBefore) && void 0 !== t || (e.renderBefore = i.firstChild), i;
      }
    }, {
      key: "update",
      value: function update(t) {
        var i = this.render();
        this.hasUpdated || (this.renderOptions.isConnected = this.isConnected), _get(_getPrototypeOf(s.prototype), "update", this).call(this, t), this._$Dt = x$1(i, this.renderRoot, this.renderOptions);
      }
    }, {
      key: "connectedCallback",
      value: function connectedCallback() {
        var t;
        _get(_getPrototypeOf(s.prototype), "connectedCallback", this).call(this), null === (t = this._$Dt) || void 0 === t || t.setConnected(!0);
      }
    }, {
      key: "disconnectedCallback",
      value: function disconnectedCallback() {
        var t;
        _get(_getPrototypeOf(s.prototype), "disconnectedCallback", this).call(this), null === (t = this._$Dt) || void 0 === t || t.setConnected(!1);
      }
    }, {
      key: "render",
      value: function render() {
        return b;
      }
    }]);

    return s;
  }(a$1);

  s.finalized = !0, s._$litElement$ = !0, null === (l$1 = globalThis.litElementHydrateSupport) || void 0 === l$1 || l$1.call(globalThis, {
    LitElement: s
  });
  var n = globalThis.litElementPolyfillSupport;
  null == n || n({
    LitElement: s
  });
  (null !== (o = globalThis.litElementVersions) && void 0 !== o ? o : globalThis.litElementVersions = []).push("3.2.0");

  function ascending$2(a, b) {
    return a == null || b == null ? NaN : a < b ? -1 : a > b ? 1 : a >= b ? 0 : NaN;
  }

  function bisector(f) {
    var delta = f;
    var compare1 = f;
    var compare2 = f;

    if (f.length !== 2) {
      delta = function delta(d, x) {
        return f(d) - x;
      };

      compare1 = ascending$2;

      compare2 = function compare2(d, x) {
        return ascending$2(f(d), x);
      };
    }

    function left(a, x) {
      var lo = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;
      var hi = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : a.length;

      if (lo < hi) {
        if (compare1(x, x) !== 0) return hi;

        do {
          var mid = lo + hi >>> 1;
          if (compare2(a[mid], x) < 0) lo = mid + 1;else hi = mid;
        } while (lo < hi);
      }

      return lo;
    }

    function right(a, x) {
      var lo = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;
      var hi = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : a.length;

      if (lo < hi) {
        if (compare1(x, x) !== 0) return hi;

        do {
          var mid = lo + hi >>> 1;
          if (compare2(a[mid], x) <= 0) lo = mid + 1;else hi = mid;
        } while (lo < hi);
      }

      return lo;
    }

    function center(a, x) {
      var lo = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;
      var hi = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : a.length;
      var i = left(a, x, lo, hi - 1);
      return i > lo && delta(a[i - 1], x) > -delta(a[i], x) ? i - 1 : i;
    }

    return {
      left: left,
      center: center,
      right: right
    };
  }

  function number$2(x) {
    return x === null ? NaN : +x;
  }

  var ascendingBisect = bisector(ascending$2);
  var bisectRight = ascendingBisect.right;
  bisector(number$2).center;
  var bisect = bisectRight;

  function count(values, valueof) {
    var count = 0;

    if (valueof === undefined) {
      var _iterator = _createForOfIteratorHelper(values),
          _step;

      try {
        for (_iterator.s(); !(_step = _iterator.n()).done;) {
          var value = _step.value;

          if (value != null && (value = +value) >= value) {
            ++count;
          }
        }
      } catch (err) {
        _iterator.e(err);
      } finally {
        _iterator.f();
      }
    } else {
      var index = -1;

      var _iterator2 = _createForOfIteratorHelper(values),
          _step2;

      try {
        for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {
          var _value = _step2.value;

          if ((_value = valueof(_value, ++index, values)) != null && (_value = +_value) >= _value) {
            ++count;
          }
        }
      } catch (err) {
        _iterator2.e(err);
      } finally {
        _iterator2.f();
      }
    }

    return count;
  }

  function extent(values, valueof) {
    var min;
    var max;

    if (valueof === undefined) {
      var _iterator = _createForOfIteratorHelper(values),
          _step;

      try {
        for (_iterator.s(); !(_step = _iterator.n()).done;) {
          var value = _step.value;

          if (value != null) {
            if (min === undefined) {
              if (value >= value) min = max = value;
            } else {
              if (min > value) min = value;
              if (max < value) max = value;
            }
          }
        }
      } catch (err) {
        _iterator.e(err);
      } finally {
        _iterator.f();
      }
    } else {
      var index = -1;

      var _iterator2 = _createForOfIteratorHelper(values),
          _step2;

      try {
        for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {
          var _value = _step2.value;

          if ((_value = valueof(_value, ++index, values)) != null) {
            if (min === undefined) {
              if (_value >= _value) min = max = _value;
            } else {
              if (min > _value) min = _value;
              if (max < _value) max = _value;
            }
          }
        }
      } catch (err) {
        _iterator2.e(err);
      } finally {
        _iterator2.f();
      }
    }

    return [min, max];
  }

  // https://github.com/python/cpython/blob/a74eea238f5baba15797e2e8b570d153bc8690a7/Modules/mathmodule.c#L1423
  var Adder = /*#__PURE__*/function () {
    function Adder() {
      _classCallCheck(this, Adder);

      this._partials = new Float64Array(32);
      this._n = 0;
    }

    _createClass(Adder, [{
      key: "add",
      value: function add(x) {
        var p = this._partials;
        var i = 0;

        for (var j = 0; j < this._n && j < 32; j++) {
          var y = p[j],
              hi = x + y,
              lo = Math.abs(x) < Math.abs(y) ? x - (hi - y) : y - (hi - x);
          if (lo) p[i++] = lo;
          x = hi;
        }

        p[i] = x;
        this._n = i + 1;
        return this;
      }
    }, {
      key: "valueOf",
      value: function valueOf() {
        var p = this._partials;
        var n = this._n,
            x,
            y,
            lo,
            hi = 0;

        if (n > 0) {
          hi = p[--n];

          while (n > 0) {
            x = hi;
            y = p[--n];
            hi = x + y;
            lo = y - (hi - x);
            if (lo) break;
          }

          if (n > 0 && (lo < 0 && p[n - 1] < 0 || lo > 0 && p[n - 1] > 0)) {
            y = lo * 2;
            x = hi + y;
            if (y == x - hi) hi = x;
          }
        }

        return hi;
      }
    }]);

    return Adder;
  }();

  function identity$6(x) {
    return x;
  }

  var array$3 = Array.prototype;
  var slice$1 = array$3.slice;

  function constant$5(x) {
    return function () {
      return x;
    };
  }

  var e10 = Math.sqrt(50),
      e5 = Math.sqrt(10),
      e2 = Math.sqrt(2);
  function ticks(start, stop, count) {
    var reverse,
        i = -1,
        n,
        ticks,
        step;
    stop = +stop, start = +start, count = +count;
    if (start === stop && count > 0) return [start];
    if (reverse = stop < start) n = start, start = stop, stop = n;
    if ((step = tickIncrement(start, stop, count)) === 0 || !isFinite(step)) return [];

    if (step > 0) {
      var r0 = Math.round(start / step),
          r1 = Math.round(stop / step);
      if (r0 * step < start) ++r0;
      if (r1 * step > stop) --r1;
      ticks = new Array(n = r1 - r0 + 1);

      while (++i < n) {
        ticks[i] = (r0 + i) * step;
      }
    } else {
      step = -step;

      var _r = Math.round(start * step),
          _r2 = Math.round(stop * step);

      if (_r / step < start) ++_r;
      if (_r2 / step > stop) --_r2;
      ticks = new Array(n = _r2 - _r + 1);

      while (++i < n) {
        ticks[i] = (_r + i) / step;
      }
    }

    if (reverse) ticks.reverse();
    return ticks;
  }
  function tickIncrement(start, stop, count) {
    var step = (stop - start) / Math.max(0, count),
        power = Math.floor(Math.log(step) / Math.LN10),
        error = step / Math.pow(10, power);
    return power >= 0 ? (error >= e10 ? 10 : error >= e5 ? 5 : error >= e2 ? 2 : 1) * Math.pow(10, power) : -Math.pow(10, -power) / (error >= e10 ? 10 : error >= e5 ? 5 : error >= e2 ? 2 : 1);
  }
  function tickStep(start, stop, count) {
    var step0 = Math.abs(stop - start) / Math.max(0, count),
        step1 = Math.pow(10, Math.floor(Math.log(step0) / Math.LN10)),
        error = step0 / step1;
    if (error >= e10) step1 *= 10;else if (error >= e5) step1 *= 5;else if (error >= e2) step1 *= 2;
    return stop < start ? -step1 : step1;
  }

  function nice(start, stop, count) {
    var prestep;

    while (true) {
      var step = tickIncrement(start, stop, count);

      if (step === prestep || step === 0 || !isFinite(step)) {
        return [start, stop];
      } else if (step > 0) {
        start = Math.floor(start / step) * step;
        stop = Math.ceil(stop / step) * step;
      } else if (step < 0) {
        start = Math.ceil(start * step) / step;
        stop = Math.floor(stop * step) / step;
      }

      prestep = step;
    }
  }

  function thresholdSturges(values) {
    return Math.ceil(Math.log(count(values)) / Math.LN2) + 1;
  }

  function bin() {
    var value = identity$6,
        domain = extent,
        threshold = thresholdSturges;

    function histogram(data) {
      if (!Array.isArray(data)) data = Array.from(data);
      var i,
          n = data.length,
          x,
          values = new Array(n);

      for (i = 0; i < n; ++i) {
        values[i] = value(data[i], i, data);
      }

      var xz = domain(values),
          x0 = xz[0],
          x1 = xz[1],
          tz = threshold(values, x0, x1); // Convert number of thresholds into uniform thresholds, and nice the
      // default domain accordingly.

      if (!Array.isArray(tz)) {
        var max = x1,
            tn = +tz;

        if (domain === extent) {
          var _nice = nice(x0, x1, tn);

          var _nice2 = _slicedToArray(_nice, 2);

          x0 = _nice2[0];
          x1 = _nice2[1];
        }

        tz = ticks(x0, x1, tn); // If the last threshold is coincident with the domain’s upper bound, the
        // last bin will be zero-width. If the default domain is used, and this
        // last threshold is coincident with the maximum input value, we can
        // extend the niced upper bound by one tick to ensure uniform bin widths;
        // otherwise, we simply remove the last threshold. Note that we don’t
        // coerce values or the domain to numbers, and thus must be careful to
        // compare order (>=) rather than strict equality (===)!

        if (tz[tz.length - 1] >= x1) {
          if (max >= x1 && domain === extent) {
            var step = tickIncrement(x0, x1, tn);

            if (isFinite(step)) {
              if (step > 0) {
                x1 = (Math.floor(x1 / step) + 1) * step;
              } else if (step < 0) {
                x1 = (Math.ceil(x1 * -step) + 1) / -step;
              }
            }
          } else {
            tz.pop();
          }
        }
      } // Remove any thresholds outside the domain.


      var m = tz.length;

      while (tz[0] <= x0) {
        tz.shift(), --m;
      }

      while (tz[m - 1] > x1) {
        tz.pop(), --m;
      }

      var bins = new Array(m + 1),
          bin; // Initialize bins.

      for (i = 0; i <= m; ++i) {
        bin = bins[i] = [];
        bin.x0 = i > 0 ? tz[i - 1] : x0;
        bin.x1 = i < m ? tz[i] : x1;
      } // Assign data to bins by value, ignoring any outside the domain.


      for (i = 0; i < n; ++i) {
        x = values[i];

        if (x != null && x0 <= x && x <= x1) {
          bins[bisect(tz, x, 0, m)].push(data[i]);
        }
      }

      return bins;
    }

    histogram.value = function (_) {
      return arguments.length ? (value = typeof _ === "function" ? _ : constant$5(_), histogram) : value;
    };

    histogram.domain = function (_) {
      return arguments.length ? (domain = typeof _ === "function" ? _ : constant$5([_[0], _[1]]), histogram) : domain;
    };

    histogram.thresholds = function (_) {
      return arguments.length ? (threshold = typeof _ === "function" ? _ : Array.isArray(_) ? constant$5(slice$1.call(_)) : constant$5(_), histogram) : threshold;
    };

    return histogram;
  }

  var _marked$1 = /*#__PURE__*/regeneratorRuntime.mark(flatten);

  function flatten(arrays) {
    var _iterator, _step, array;

    return regeneratorRuntime.wrap(function flatten$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            _iterator = _createForOfIteratorHelper(arrays);
            _context.prev = 1;

            _iterator.s();

          case 3:
            if ((_step = _iterator.n()).done) {
              _context.next = 8;
              break;
            }

            array = _step.value;
            return _context.delegateYield(array, "t0", 6);

          case 6:
            _context.next = 3;
            break;

          case 8:
            _context.next = 13;
            break;

          case 10:
            _context.prev = 10;
            _context.t1 = _context["catch"](1);

            _iterator.e(_context.t1);

          case 13:
            _context.prev = 13;

            _iterator.f();

            return _context.finish(13);

          case 16:
          case "end":
            return _context.stop();
        }
      }
    }, _marked$1, null, [[1, 10, 13, 16]]);
  }

  function merge(arrays) {
    return Array.from(flatten(arrays));
  }

  function range(start, stop, step) {
    start = +start, stop = +stop, step = (n = arguments.length) < 2 ? (stop = start, start = 0, 1) : n < 3 ? 1 : +step;
    var i = -1,
        n = Math.max(0, Math.ceil((stop - start) / step)) | 0,
        range = new Array(n);

    while (++i < n) {
      range[i] = start + i * step;
    }

    return range;
  }

  function identity$5 (x) {
    return x;
  }

  var top = 1,
      right = 2,
      bottom = 3,
      left = 4,
      epsilon$2 = 1e-6;

  function translateX(x) {
    return "translate(" + x + ",0)";
  }

  function translateY(y) {
    return "translate(0," + y + ")";
  }

  function number$1(scale) {
    return function (d) {
      return +scale(d);
    };
  }

  function center(scale, offset) {
    offset = Math.max(0, scale.bandwidth() - offset * 2) / 2;
    if (scale.round()) offset = Math.round(offset);
    return function (d) {
      return +scale(d) + offset;
    };
  }

  function entering() {
    return !this.__axis;
  }

  function axis(orient, scale) {
    var tickArguments = [],
        tickValues = null,
        tickFormat = null,
        tickSizeInner = 6,
        tickSizeOuter = 6,
        tickPadding = 3,
        offset = typeof window !== "undefined" && window.devicePixelRatio > 1 ? 0 : 0.5,
        k = orient === top || orient === left ? -1 : 1,
        x = orient === left || orient === right ? "x" : "y",
        transform = orient === top || orient === bottom ? translateX : translateY;

    function axis(context) {
      var values = tickValues == null ? scale.ticks ? scale.ticks.apply(scale, tickArguments) : scale.domain() : tickValues,
          format = tickFormat == null ? scale.tickFormat ? scale.tickFormat.apply(scale, tickArguments) : identity$5 : tickFormat,
          spacing = Math.max(tickSizeInner, 0) + tickPadding,
          range = scale.range(),
          range0 = +range[0] + offset,
          range1 = +range[range.length - 1] + offset,
          position = (scale.bandwidth ? center : number$1)(scale.copy(), offset),
          selection = context.selection ? context.selection() : context,
          path = selection.selectAll(".domain").data([null]),
          tick = selection.selectAll(".tick").data(values, scale).order(),
          tickExit = tick.exit(),
          tickEnter = tick.enter().append("g").attr("class", "tick"),
          line = tick.select("line"),
          text = tick.select("text");
      path = path.merge(path.enter().insert("path", ".tick").attr("class", "domain").attr("stroke", "currentColor"));
      tick = tick.merge(tickEnter);
      line = line.merge(tickEnter.append("line").attr("stroke", "currentColor").attr(x + "2", k * tickSizeInner));
      text = text.merge(tickEnter.append("text").attr("fill", "currentColor").attr(x, k * spacing).attr("dy", orient === top ? "0em" : orient === bottom ? "0.71em" : "0.32em"));

      if (context !== selection) {
        path = path.transition(context);
        tick = tick.transition(context);
        line = line.transition(context);
        text = text.transition(context);
        tickExit = tickExit.transition(context).attr("opacity", epsilon$2).attr("transform", function (d) {
          return isFinite(d = position(d)) ? transform(d + offset) : this.getAttribute("transform");
        });
        tickEnter.attr("opacity", epsilon$2).attr("transform", function (d) {
          var p = this.parentNode.__axis;
          return transform((p && isFinite(p = p(d)) ? p : position(d)) + offset);
        });
      }

      tickExit.remove();
      path.attr("d", orient === left || orient === right ? tickSizeOuter ? "M" + k * tickSizeOuter + "," + range0 + "H" + offset + "V" + range1 + "H" + k * tickSizeOuter : "M" + offset + "," + range0 + "V" + range1 : tickSizeOuter ? "M" + range0 + "," + k * tickSizeOuter + "V" + offset + "H" + range1 + "V" + k * tickSizeOuter : "M" + range0 + "," + offset + "H" + range1);
      tick.attr("opacity", 1).attr("transform", function (d) {
        return transform(position(d) + offset);
      });
      line.attr(x + "2", k * tickSizeInner);
      text.attr(x, k * spacing).text(format);
      selection.filter(entering).attr("fill", "none").attr("font-size", 10).attr("font-family", "sans-serif").attr("text-anchor", orient === right ? "start" : orient === left ? "end" : "middle");
      selection.each(function () {
        this.__axis = position;
      });
    }

    axis.scale = function (_) {
      return arguments.length ? (scale = _, axis) : scale;
    };

    axis.ticks = function () {
      return tickArguments = Array.from(arguments), axis;
    };

    axis.tickArguments = function (_) {
      return arguments.length ? (tickArguments = _ == null ? [] : Array.from(_), axis) : tickArguments.slice();
    };

    axis.tickValues = function (_) {
      return arguments.length ? (tickValues = _ == null ? null : Array.from(_), axis) : tickValues && tickValues.slice();
    };

    axis.tickFormat = function (_) {
      return arguments.length ? (tickFormat = _, axis) : tickFormat;
    };

    axis.tickSize = function (_) {
      return arguments.length ? (tickSizeInner = tickSizeOuter = +_, axis) : tickSizeInner;
    };

    axis.tickSizeInner = function (_) {
      return arguments.length ? (tickSizeInner = +_, axis) : tickSizeInner;
    };

    axis.tickSizeOuter = function (_) {
      return arguments.length ? (tickSizeOuter = +_, axis) : tickSizeOuter;
    };

    axis.tickPadding = function (_) {
      return arguments.length ? (tickPadding = +_, axis) : tickPadding;
    };

    axis.offset = function (_) {
      return arguments.length ? (offset = +_, axis) : offset;
    };

    return axis;
  }
  function axisRight(scale) {
    return axis(right, scale);
  }
  function axisBottom(scale) {
    return axis(bottom, scale);
  }
  function axisLeft(scale) {
    return axis(left, scale);
  }

  var noop$2 = {
    value: function value() {}
  };

  function dispatch() {
    for (var i = 0, n = arguments.length, _ = {}, t; i < n; ++i) {
      if (!(t = arguments[i] + "") || t in _ || /[\s.]/.test(t)) throw new Error("illegal type: " + t);
      _[t] = [];
    }

    return new Dispatch(_);
  }

  function Dispatch(_) {
    this._ = _;
  }

  function parseTypenames$1(typenames, types) {
    return typenames.trim().split(/^|\s+/).map(function (t) {
      var name = "",
          i = t.indexOf(".");
      if (i >= 0) name = t.slice(i + 1), t = t.slice(0, i);
      if (t && !types.hasOwnProperty(t)) throw new Error("unknown type: " + t);
      return {
        type: t,
        name: name
      };
    });
  }

  Dispatch.prototype = dispatch.prototype = {
    constructor: Dispatch,
    on: function on(typename, callback) {
      var _ = this._,
          T = parseTypenames$1(typename + "", _),
          t,
          i = -1,
          n = T.length; // If no callback was specified, return the callback of the given type and name.

      if (arguments.length < 2) {
        while (++i < n) {
          if ((t = (typename = T[i]).type) && (t = get$1(_[t], typename.name))) return t;
        }

        return;
      } // If a type was specified, set the callback for the given type and name.
      // Otherwise, if a null callback was specified, remove callbacks of the given name.


      if (callback != null && typeof callback !== "function") throw new Error("invalid callback: " + callback);

      while (++i < n) {
        if (t = (typename = T[i]).type) _[t] = set$1(_[t], typename.name, callback);else if (callback == null) for (t in _) {
          _[t] = set$1(_[t], typename.name, null);
        }
      }

      return this;
    },
    copy: function copy() {
      var copy = {},
          _ = this._;

      for (var t in _) {
        copy[t] = _[t].slice();
      }

      return new Dispatch(copy);
    },
    call: function call(type, that) {
      if ((n = arguments.length - 2) > 0) for (var args = new Array(n), i = 0, n, t; i < n; ++i) {
        args[i] = arguments[i + 2];
      }
      if (!this._.hasOwnProperty(type)) throw new Error("unknown type: " + type);

      for (t = this._[type], i = 0, n = t.length; i < n; ++i) {
        t[i].value.apply(that, args);
      }
    },
    apply: function apply(type, that, args) {
      if (!this._.hasOwnProperty(type)) throw new Error("unknown type: " + type);

      for (var t = this._[type], i = 0, n = t.length; i < n; ++i) {
        t[i].value.apply(that, args);
      }
    }
  };

  function get$1(type, name) {
    for (var i = 0, n = type.length, c; i < n; ++i) {
      if ((c = type[i]).name === name) {
        return c.value;
      }
    }
  }

  function set$1(type, name, callback) {
    for (var i = 0, n = type.length; i < n; ++i) {
      if (type[i].name === name) {
        type[i] = noop$2, type = type.slice(0, i).concat(type.slice(i + 1));
        break;
      }
    }

    if (callback != null) type.push({
      name: name,
      value: callback
    });
    return type;
  }

  var xhtml = "http://www.w3.org/1999/xhtml";
  var namespaces = {
    svg: "http://www.w3.org/2000/svg",
    xhtml: xhtml,
    xlink: "http://www.w3.org/1999/xlink",
    xml: "http://www.w3.org/XML/1998/namespace",
    xmlns: "http://www.w3.org/2000/xmlns/"
  };

  function namespace (name) {
    var prefix = name += "",
        i = prefix.indexOf(":");
    if (i >= 0 && (prefix = name.slice(0, i)) !== "xmlns") name = name.slice(i + 1);
    return namespaces.hasOwnProperty(prefix) ? {
      space: namespaces[prefix],
      local: name
    } : name; // eslint-disable-line no-prototype-builtins
  }

  function creatorInherit(name) {
    return function () {
      var document = this.ownerDocument,
          uri = this.namespaceURI;
      return uri === xhtml && document.documentElement.namespaceURI === xhtml ? document.createElement(name) : document.createElementNS(uri, name);
    };
  }

  function creatorFixed(fullname) {
    return function () {
      return this.ownerDocument.createElementNS(fullname.space, fullname.local);
    };
  }

  function creator (name) {
    var fullname = namespace(name);
    return (fullname.local ? creatorFixed : creatorInherit)(fullname);
  }

  function none() {}

  function selector (selector) {
    return selector == null ? none : function () {
      return this.querySelector(selector);
    };
  }

  function selection_select (select) {
    if (typeof select !== "function") select = selector(select);

    for (var groups = this._groups, m = groups.length, subgroups = new Array(m), j = 0; j < m; ++j) {
      for (var group = groups[j], n = group.length, subgroup = subgroups[j] = new Array(n), node, subnode, i = 0; i < n; ++i) {
        if ((node = group[i]) && (subnode = select.call(node, node.__data__, i, group))) {
          if ("__data__" in node) subnode.__data__ = node.__data__;
          subgroup[i] = subnode;
        }
      }
    }

    return new Selection$1(subgroups, this._parents);
  }

  // Given something array like (or null), returns something that is strictly an
  // array. This is used to ensure that array-like objects passed to d3.selectAll
  // or selection.selectAll are converted into proper arrays when creating a
  // selection; we don’t ever want to create a selection backed by a live
  // HTMLCollection or NodeList. However, note that selection.selectAll will use a
  // static NodeList as a group, since it safely derived from querySelectorAll.
  function array$2(x) {
    return x == null ? [] : Array.isArray(x) ? x : Array.from(x);
  }

  function empty() {
    return [];
  }

  function selectorAll (selector) {
    return selector == null ? empty : function () {
      return this.querySelectorAll(selector);
    };
  }

  function arrayAll(select) {
    return function () {
      return array$2(select.apply(this, arguments));
    };
  }

  function selection_selectAll (select) {
    if (typeof select === "function") select = arrayAll(select);else select = selectorAll(select);

    for (var groups = this._groups, m = groups.length, subgroups = [], parents = [], j = 0; j < m; ++j) {
      for (var group = groups[j], n = group.length, node, i = 0; i < n; ++i) {
        if (node = group[i]) {
          subgroups.push(select.call(node, node.__data__, i, group));
          parents.push(node);
        }
      }
    }

    return new Selection$1(subgroups, parents);
  }

  function matcher (selector) {
    return function () {
      return this.matches(selector);
    };
  }
  function childMatcher(selector) {
    return function (node) {
      return node.matches(selector);
    };
  }

  var find = Array.prototype.find;

  function childFind(match) {
    return function () {
      return find.call(this.children, match);
    };
  }

  function childFirst() {
    return this.firstElementChild;
  }

  function selection_selectChild (match) {
    return this.select(match == null ? childFirst : childFind(typeof match === "function" ? match : childMatcher(match)));
  }

  var filter = Array.prototype.filter;

  function children() {
    return Array.from(this.children);
  }

  function childrenFilter(match) {
    return function () {
      return filter.call(this.children, match);
    };
  }

  function selection_selectChildren (match) {
    return this.selectAll(match == null ? children : childrenFilter(typeof match === "function" ? match : childMatcher(match)));
  }

  function selection_filter (match) {
    if (typeof match !== "function") match = matcher(match);

    for (var groups = this._groups, m = groups.length, subgroups = new Array(m), j = 0; j < m; ++j) {
      for (var group = groups[j], n = group.length, subgroup = subgroups[j] = [], node, i = 0; i < n; ++i) {
        if ((node = group[i]) && match.call(node, node.__data__, i, group)) {
          subgroup.push(node);
        }
      }
    }

    return new Selection$1(subgroups, this._parents);
  }

  function sparse (update) {
    return new Array(update.length);
  }

  function selection_enter () {
    return new Selection$1(this._enter || this._groups.map(sparse), this._parents);
  }
  function EnterNode(parent, datum) {
    this.ownerDocument = parent.ownerDocument;
    this.namespaceURI = parent.namespaceURI;
    this._next = null;
    this._parent = parent;
    this.__data__ = datum;
  }
  EnterNode.prototype = {
    constructor: EnterNode,
    appendChild: function appendChild(child) {
      return this._parent.insertBefore(child, this._next);
    },
    insertBefore: function insertBefore(child, next) {
      return this._parent.insertBefore(child, next);
    },
    querySelector: function querySelector(selector) {
      return this._parent.querySelector(selector);
    },
    querySelectorAll: function querySelectorAll(selector) {
      return this._parent.querySelectorAll(selector);
    }
  };

  function constant$4 (x) {
    return function () {
      return x;
    };
  }

  function bindIndex(parent, group, enter, update, exit, data) {
    var i = 0,
        node,
        groupLength = group.length,
        dataLength = data.length; // Put any non-null nodes that fit into update.
    // Put any null nodes into enter.
    // Put any remaining data into enter.

    for (; i < dataLength; ++i) {
      if (node = group[i]) {
        node.__data__ = data[i];
        update[i] = node;
      } else {
        enter[i] = new EnterNode(parent, data[i]);
      }
    } // Put any non-null nodes that don’t fit into exit.


    for (; i < groupLength; ++i) {
      if (node = group[i]) {
        exit[i] = node;
      }
    }
  }

  function bindKey(parent, group, enter, update, exit, data, key) {
    var i,
        node,
        nodeByKeyValue = new Map(),
        groupLength = group.length,
        dataLength = data.length,
        keyValues = new Array(groupLength),
        keyValue; // Compute the key for each node.
    // If multiple nodes have the same key, the duplicates are added to exit.

    for (i = 0; i < groupLength; ++i) {
      if (node = group[i]) {
        keyValues[i] = keyValue = key.call(node, node.__data__, i, group) + "";

        if (nodeByKeyValue.has(keyValue)) {
          exit[i] = node;
        } else {
          nodeByKeyValue.set(keyValue, node);
        }
      }
    } // Compute the key for each datum.
    // If there a node associated with this key, join and add it to update.
    // If there is not (or the key is a duplicate), add it to enter.


    for (i = 0; i < dataLength; ++i) {
      keyValue = key.call(parent, data[i], i, data) + "";

      if (node = nodeByKeyValue.get(keyValue)) {
        update[i] = node;
        node.__data__ = data[i];
        nodeByKeyValue.delete(keyValue);
      } else {
        enter[i] = new EnterNode(parent, data[i]);
      }
    } // Add any remaining nodes that were not bound to data to exit.


    for (i = 0; i < groupLength; ++i) {
      if ((node = group[i]) && nodeByKeyValue.get(keyValues[i]) === node) {
        exit[i] = node;
      }
    }
  }

  function datum(node) {
    return node.__data__;
  }

  function selection_data (value, key) {
    if (!arguments.length) return Array.from(this, datum);
    var bind = key ? bindKey : bindIndex,
        parents = this._parents,
        groups = this._groups;
    if (typeof value !== "function") value = constant$4(value);

    for (var m = groups.length, update = new Array(m), enter = new Array(m), exit = new Array(m), j = 0; j < m; ++j) {
      var parent = parents[j],
          group = groups[j],
          groupLength = group.length,
          data = arraylike(value.call(parent, parent && parent.__data__, j, parents)),
          dataLength = data.length,
          enterGroup = enter[j] = new Array(dataLength),
          updateGroup = update[j] = new Array(dataLength),
          exitGroup = exit[j] = new Array(groupLength);
      bind(parent, group, enterGroup, updateGroup, exitGroup, data, key); // Now connect the enter nodes to their following update node, such that
      // appendChild can insert the materialized enter node before this node,
      // rather than at the end of the parent node.

      for (var i0 = 0, i1 = 0, previous, next; i0 < dataLength; ++i0) {
        if (previous = enterGroup[i0]) {
          if (i0 >= i1) i1 = i0 + 1;

          while (!(next = updateGroup[i1]) && ++i1 < dataLength) {
          }

          previous._next = next || null;
        }
      }
    }

    update = new Selection$1(update, parents);
    update._enter = enter;
    update._exit = exit;
    return update;
  } // Given some data, this returns an array-like view of it: an object that
  // exposes a length property and allows numeric indexing. Note that unlike
  // selectAll, this isn’t worried about “live” collections because the resulting
  // array will only be used briefly while data is being bound. (It is possible to
  // cause the data to change while iterating by using a key function, but please
  // don’t; we’d rather avoid a gratuitous copy.)

  function arraylike(data) {
    return _typeof(data) === "object" && "length" in data ? data // Array, TypedArray, NodeList, array-like
    : Array.from(data); // Map, Set, iterable, string, or anything else
  }

  function selection_exit () {
    return new Selection$1(this._exit || this._groups.map(sparse), this._parents);
  }

  function selection_join (onenter, onupdate, onexit) {
    var enter = this.enter(),
        update = this,
        exit = this.exit();

    if (typeof onenter === "function") {
      enter = onenter(enter);
      if (enter) enter = enter.selection();
    } else {
      enter = enter.append(onenter + "");
    }

    if (onupdate != null) {
      update = onupdate(update);
      if (update) update = update.selection();
    }

    if (onexit == null) exit.remove();else onexit(exit);
    return enter && update ? enter.merge(update).order() : update;
  }

  function selection_merge (context) {
    var selection = context.selection ? context.selection() : context;

    for (var groups0 = this._groups, groups1 = selection._groups, m0 = groups0.length, m1 = groups1.length, m = Math.min(m0, m1), merges = new Array(m0), j = 0; j < m; ++j) {
      for (var group0 = groups0[j], group1 = groups1[j], n = group0.length, merge = merges[j] = new Array(n), node, i = 0; i < n; ++i) {
        if (node = group0[i] || group1[i]) {
          merge[i] = node;
        }
      }
    }

    for (; j < m0; ++j) {
      merges[j] = groups0[j];
    }

    return new Selection$1(merges, this._parents);
  }

  function selection_order () {
    for (var groups = this._groups, j = -1, m = groups.length; ++j < m;) {
      for (var group = groups[j], i = group.length - 1, next = group[i], node; --i >= 0;) {
        if (node = group[i]) {
          if (next && node.compareDocumentPosition(next) ^ 4) next.parentNode.insertBefore(node, next);
          next = node;
        }
      }
    }

    return this;
  }

  function selection_sort (compare) {
    if (!compare) compare = ascending$1;

    function compareNode(a, b) {
      return a && b ? compare(a.__data__, b.__data__) : !a - !b;
    }

    for (var groups = this._groups, m = groups.length, sortgroups = new Array(m), j = 0; j < m; ++j) {
      for (var group = groups[j], n = group.length, sortgroup = sortgroups[j] = new Array(n), node, i = 0; i < n; ++i) {
        if (node = group[i]) {
          sortgroup[i] = node;
        }
      }

      sortgroup.sort(compareNode);
    }

    return new Selection$1(sortgroups, this._parents).order();
  }

  function ascending$1(a, b) {
    return a < b ? -1 : a > b ? 1 : a >= b ? 0 : NaN;
  }

  function selection_call () {
    var callback = arguments[0];
    arguments[0] = this;
    callback.apply(null, arguments);
    return this;
  }

  function selection_nodes () {
    return Array.from(this);
  }

  function selection_node () {
    for (var groups = this._groups, j = 0, m = groups.length; j < m; ++j) {
      for (var group = groups[j], i = 0, n = group.length; i < n; ++i) {
        var node = group[i];
        if (node) return node;
      }
    }

    return null;
  }

  function selection_size () {
    var size = 0;

    var _iterator = _createForOfIteratorHelper(this),
        _step;

    try {
      for (_iterator.s(); !(_step = _iterator.n()).done;) {
        var node = _step.value;
        ++size;
      } // eslint-disable-line no-unused-vars

    } catch (err) {
      _iterator.e(err);
    } finally {
      _iterator.f();
    }

    return size;
  }

  function selection_empty () {
    return !this.node();
  }

  function selection_each (callback) {
    for (var groups = this._groups, j = 0, m = groups.length; j < m; ++j) {
      for (var group = groups[j], i = 0, n = group.length, node; i < n; ++i) {
        if (node = group[i]) callback.call(node, node.__data__, i, group);
      }
    }

    return this;
  }

  function attrRemove$1(name) {
    return function () {
      this.removeAttribute(name);
    };
  }

  function attrRemoveNS$1(fullname) {
    return function () {
      this.removeAttributeNS(fullname.space, fullname.local);
    };
  }

  function attrConstant$1(name, value) {
    return function () {
      this.setAttribute(name, value);
    };
  }

  function attrConstantNS$1(fullname, value) {
    return function () {
      this.setAttributeNS(fullname.space, fullname.local, value);
    };
  }

  function attrFunction$1(name, value) {
    return function () {
      var v = value.apply(this, arguments);
      if (v == null) this.removeAttribute(name);else this.setAttribute(name, v);
    };
  }

  function attrFunctionNS$1(fullname, value) {
    return function () {
      var v = value.apply(this, arguments);
      if (v == null) this.removeAttributeNS(fullname.space, fullname.local);else this.setAttributeNS(fullname.space, fullname.local, v);
    };
  }

  function selection_attr (name, value) {
    var fullname = namespace(name);

    if (arguments.length < 2) {
      var node = this.node();
      return fullname.local ? node.getAttributeNS(fullname.space, fullname.local) : node.getAttribute(fullname);
    }

    return this.each((value == null ? fullname.local ? attrRemoveNS$1 : attrRemove$1 : typeof value === "function" ? fullname.local ? attrFunctionNS$1 : attrFunction$1 : fullname.local ? attrConstantNS$1 : attrConstant$1)(fullname, value));
  }

  function defaultView (node) {
    return node.ownerDocument && node.ownerDocument.defaultView // node is a Node
    || node.document && node // node is a Window
    || node.defaultView; // node is a Document
  }

  function styleRemove$1(name) {
    return function () {
      this.style.removeProperty(name);
    };
  }

  function styleConstant$1(name, value, priority) {
    return function () {
      this.style.setProperty(name, value, priority);
    };
  }

  function styleFunction$1(name, value, priority) {
    return function () {
      var v = value.apply(this, arguments);
      if (v == null) this.style.removeProperty(name);else this.style.setProperty(name, v, priority);
    };
  }

  function selection_style (name, value, priority) {
    return arguments.length > 1 ? this.each((value == null ? styleRemove$1 : typeof value === "function" ? styleFunction$1 : styleConstant$1)(name, value, priority == null ? "" : priority)) : styleValue(this.node(), name);
  }
  function styleValue(node, name) {
    return node.style.getPropertyValue(name) || defaultView(node).getComputedStyle(node, null).getPropertyValue(name);
  }

  function propertyRemove(name) {
    return function () {
      delete this[name];
    };
  }

  function propertyConstant(name, value) {
    return function () {
      this[name] = value;
    };
  }

  function propertyFunction(name, value) {
    return function () {
      var v = value.apply(this, arguments);
      if (v == null) delete this[name];else this[name] = v;
    };
  }

  function selection_property (name, value) {
    return arguments.length > 1 ? this.each((value == null ? propertyRemove : typeof value === "function" ? propertyFunction : propertyConstant)(name, value)) : this.node()[name];
  }

  function classArray(string) {
    return string.trim().split(/^|\s+/);
  }

  function classList(node) {
    return node.classList || new ClassList(node);
  }

  function ClassList(node) {
    this._node = node;
    this._names = classArray(node.getAttribute("class") || "");
  }

  ClassList.prototype = {
    add: function add(name) {
      var i = this._names.indexOf(name);

      if (i < 0) {
        this._names.push(name);

        this._node.setAttribute("class", this._names.join(" "));
      }
    },
    remove: function remove(name) {
      var i = this._names.indexOf(name);

      if (i >= 0) {
        this._names.splice(i, 1);

        this._node.setAttribute("class", this._names.join(" "));
      }
    },
    contains: function contains(name) {
      return this._names.indexOf(name) >= 0;
    }
  };

  function classedAdd(node, names) {
    var list = classList(node),
        i = -1,
        n = names.length;

    while (++i < n) {
      list.add(names[i]);
    }
  }

  function classedRemove(node, names) {
    var list = classList(node),
        i = -1,
        n = names.length;

    while (++i < n) {
      list.remove(names[i]);
    }
  }

  function classedTrue(names) {
    return function () {
      classedAdd(this, names);
    };
  }

  function classedFalse(names) {
    return function () {
      classedRemove(this, names);
    };
  }

  function classedFunction(names, value) {
    return function () {
      (value.apply(this, arguments) ? classedAdd : classedRemove)(this, names);
    };
  }

  function selection_classed (name, value) {
    var names = classArray(name + "");

    if (arguments.length < 2) {
      var list = classList(this.node()),
          i = -1,
          n = names.length;

      while (++i < n) {
        if (!list.contains(names[i])) return false;
      }

      return true;
    }

    return this.each((typeof value === "function" ? classedFunction : value ? classedTrue : classedFalse)(names, value));
  }

  function textRemove() {
    this.textContent = "";
  }

  function textConstant$1(value) {
    return function () {
      this.textContent = value;
    };
  }

  function textFunction$1(value) {
    return function () {
      var v = value.apply(this, arguments);
      this.textContent = v == null ? "" : v;
    };
  }

  function selection_text (value) {
    return arguments.length ? this.each(value == null ? textRemove : (typeof value === "function" ? textFunction$1 : textConstant$1)(value)) : this.node().textContent;
  }

  function htmlRemove() {
    this.innerHTML = "";
  }

  function htmlConstant(value) {
    return function () {
      this.innerHTML = value;
    };
  }

  function htmlFunction(value) {
    return function () {
      var v = value.apply(this, arguments);
      this.innerHTML = v == null ? "" : v;
    };
  }

  function selection_html (value) {
    return arguments.length ? this.each(value == null ? htmlRemove : (typeof value === "function" ? htmlFunction : htmlConstant)(value)) : this.node().innerHTML;
  }

  function raise() {
    if (this.nextSibling) this.parentNode.appendChild(this);
  }

  function selection_raise () {
    return this.each(raise);
  }

  function lower() {
    if (this.previousSibling) this.parentNode.insertBefore(this, this.parentNode.firstChild);
  }

  function selection_lower () {
    return this.each(lower);
  }

  function selection_append (name) {
    var create = typeof name === "function" ? name : creator(name);
    return this.select(function () {
      return this.appendChild(create.apply(this, arguments));
    });
  }

  function constantNull() {
    return null;
  }

  function selection_insert (name, before) {
    var create = typeof name === "function" ? name : creator(name),
        select = before == null ? constantNull : typeof before === "function" ? before : selector(before);
    return this.select(function () {
      return this.insertBefore(create.apply(this, arguments), select.apply(this, arguments) || null);
    });
  }

  function remove() {
    var parent = this.parentNode;
    if (parent) parent.removeChild(this);
  }

  function selection_remove () {
    return this.each(remove);
  }

  function selection_cloneShallow() {
    var clone = this.cloneNode(false),
        parent = this.parentNode;
    return parent ? parent.insertBefore(clone, this.nextSibling) : clone;
  }

  function selection_cloneDeep() {
    var clone = this.cloneNode(true),
        parent = this.parentNode;
    return parent ? parent.insertBefore(clone, this.nextSibling) : clone;
  }

  function selection_clone (deep) {
    return this.select(deep ? selection_cloneDeep : selection_cloneShallow);
  }

  function selection_datum (value) {
    return arguments.length ? this.property("__data__", value) : this.node().__data__;
  }

  function contextListener(listener) {
    return function (event) {
      listener.call(this, event, this.__data__);
    };
  }

  function parseTypenames(typenames) {
    return typenames.trim().split(/^|\s+/).map(function (t) {
      var name = "",
          i = t.indexOf(".");
      if (i >= 0) name = t.slice(i + 1), t = t.slice(0, i);
      return {
        type: t,
        name: name
      };
    });
  }

  function onRemove(typename) {
    return function () {
      var on = this.__on;
      if (!on) return;

      for (var j = 0, i = -1, m = on.length, o; j < m; ++j) {
        if (o = on[j], (!typename.type || o.type === typename.type) && o.name === typename.name) {
          this.removeEventListener(o.type, o.listener, o.options);
        } else {
          on[++i] = o;
        }
      }

      if (++i) on.length = i;else delete this.__on;
    };
  }

  function onAdd(typename, value, options) {
    return function () {
      var on = this.__on,
          o,
          listener = contextListener(value);
      if (on) for (var j = 0, m = on.length; j < m; ++j) {
        if ((o = on[j]).type === typename.type && o.name === typename.name) {
          this.removeEventListener(o.type, o.listener, o.options);
          this.addEventListener(o.type, o.listener = listener, o.options = options);
          o.value = value;
          return;
        }
      }
      this.addEventListener(typename.type, listener, options);
      o = {
        type: typename.type,
        name: typename.name,
        value: value,
        listener: listener,
        options: options
      };
      if (!on) this.__on = [o];else on.push(o);
    };
  }

  function selection_on (typename, value, options) {
    var typenames = parseTypenames(typename + ""),
        i,
        n = typenames.length,
        t;

    if (arguments.length < 2) {
      var on = this.node().__on;

      if (on) for (var j = 0, m = on.length, o; j < m; ++j) {
        for (i = 0, o = on[j]; i < n; ++i) {
          if ((t = typenames[i]).type === o.type && t.name === o.name) {
            return o.value;
          }
        }
      }
      return;
    }

    on = value ? onAdd : onRemove;

    for (i = 0; i < n; ++i) {
      this.each(on(typenames[i], value, options));
    }

    return this;
  }

  function dispatchEvent(node, type, params) {
    var window = defaultView(node),
        event = window.CustomEvent;

    if (typeof event === "function") {
      event = new event(type, params);
    } else {
      event = window.document.createEvent("Event");
      if (params) event.initEvent(type, params.bubbles, params.cancelable), event.detail = params.detail;else event.initEvent(type, false, false);
    }

    node.dispatchEvent(event);
  }

  function dispatchConstant(type, params) {
    return function () {
      return dispatchEvent(this, type, params);
    };
  }

  function dispatchFunction(type, params) {
    return function () {
      return dispatchEvent(this, type, params.apply(this, arguments));
    };
  }

  function selection_dispatch (type, params) {
    return this.each((typeof params === "function" ? dispatchFunction : dispatchConstant)(type, params));
  }

  var _marked = /*#__PURE__*/regeneratorRuntime.mark(_callee);

  function _callee() {
    var groups, j, m, group, i, n, node;
    return regeneratorRuntime.wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            groups = this._groups, j = 0, m = groups.length;

          case 1:
            if (!(j < m)) {
              _context.next = 13;
              break;
            }

            group = groups[j], i = 0, n = group.length;

          case 3:
            if (!(i < n)) {
              _context.next = 10;
              break;
            }

            if (!(node = group[i])) {
              _context.next = 7;
              break;
            }

            _context.next = 7;
            return node;

          case 7:
            ++i;
            _context.next = 3;
            break;

          case 10:
            ++j;
            _context.next = 1;
            break;

          case 13:
          case "end":
            return _context.stop();
        }
      }
    }, _marked, this);
  }

  var root = [null];
  function Selection$1(groups, parents) {
    this._groups = groups;
    this._parents = parents;
  }

  function selection() {
    return new Selection$1([[document.documentElement]], root);
  }

  function selection_selection() {
    return this;
  }

  Selection$1.prototype = selection.prototype = _defineProperty({
    constructor: Selection$1,
    select: selection_select,
    selectAll: selection_selectAll,
    selectChild: selection_selectChild,
    selectChildren: selection_selectChildren,
    filter: selection_filter,
    data: selection_data,
    enter: selection_enter,
    exit: selection_exit,
    join: selection_join,
    merge: selection_merge,
    selection: selection_selection,
    order: selection_order,
    sort: selection_sort,
    call: selection_call,
    nodes: selection_nodes,
    node: selection_node,
    size: selection_size,
    empty: selection_empty,
    each: selection_each,
    attr: selection_attr,
    style: selection_style,
    property: selection_property,
    classed: selection_classed,
    text: selection_text,
    html: selection_html,
    raise: selection_raise,
    lower: selection_lower,
    append: selection_append,
    insert: selection_insert,
    remove: selection_remove,
    clone: selection_clone,
    datum: selection_datum,
    on: selection_on,
    dispatch: selection_dispatch
  }, Symbol.iterator, _callee);

  function select (selector) {
    return typeof selector === "string" ? new Selection$1([[document.querySelector(selector)]], [document.documentElement]) : new Selection$1([[selector]], root);
  }

  function sourceEvent (event) {
    var sourceEvent;

    while (sourceEvent = event.sourceEvent) {
      event = sourceEvent;
    }

    return event;
  }

  function pointer (event, node) {
    event = sourceEvent(event);
    if (node === undefined) node = event.currentTarget;

    if (node) {
      var svg = node.ownerSVGElement || node;

      if (svg.createSVGPoint) {
        var point = svg.createSVGPoint();
        point.x = event.clientX, point.y = event.clientY;
        point = point.matrixTransform(node.getScreenCTM().inverse());
        return [point.x, point.y];
      }

      if (node.getBoundingClientRect) {
        var rect = node.getBoundingClientRect();
        return [event.clientX - rect.left - node.clientLeft, event.clientY - rect.top - node.clientTop];
      }
    }

    return [event.pageX, event.pageY];
  }

  // These are typically used in conjunction with noevent to ensure that we can
  // preventDefault on the event.
  var nonpassive = {
    passive: false
  };
  var nonpassivecapture = {
    capture: true,
    passive: false
  };
  function nopropagation(event) {
    event.stopImmediatePropagation();
  }
  function noevent (event) {
    event.preventDefault();
    event.stopImmediatePropagation();
  }

  function dragDisable (view) {
    var root = view.document.documentElement,
        selection = select(view).on("dragstart.drag", noevent, nonpassivecapture);

    if ("onselectstart" in root) {
      selection.on("selectstart.drag", noevent, nonpassivecapture);
    } else {
      root.__noselect = root.style.MozUserSelect;
      root.style.MozUserSelect = "none";
    }
  }
  function yesdrag(view, noclick) {
    var root = view.document.documentElement,
        selection = select(view).on("dragstart.drag", null);

    if (noclick) {
      selection.on("click.drag", noevent, nonpassivecapture);
      setTimeout(function () {
        selection.on("click.drag", null);
      }, 0);
    }

    if ("onselectstart" in root) {
      selection.on("selectstart.drag", null);
    } else {
      root.style.MozUserSelect = root.__noselect;
      delete root.__noselect;
    }
  }

  var constant$3 = (function (x) {
    return function () {
      return x;
    };
  });

  function DragEvent(type, _ref) {
    var sourceEvent = _ref.sourceEvent,
        subject = _ref.subject,
        target = _ref.target,
        identifier = _ref.identifier,
        active = _ref.active,
        x = _ref.x,
        y = _ref.y,
        dx = _ref.dx,
        dy = _ref.dy,
        dispatch = _ref.dispatch;
    Object.defineProperties(this, {
      type: {
        value: type,
        enumerable: true,
        configurable: true
      },
      sourceEvent: {
        value: sourceEvent,
        enumerable: true,
        configurable: true
      },
      subject: {
        value: subject,
        enumerable: true,
        configurable: true
      },
      target: {
        value: target,
        enumerable: true,
        configurable: true
      },
      identifier: {
        value: identifier,
        enumerable: true,
        configurable: true
      },
      active: {
        value: active,
        enumerable: true,
        configurable: true
      },
      x: {
        value: x,
        enumerable: true,
        configurable: true
      },
      y: {
        value: y,
        enumerable: true,
        configurable: true
      },
      dx: {
        value: dx,
        enumerable: true,
        configurable: true
      },
      dy: {
        value: dy,
        enumerable: true,
        configurable: true
      },
      _: {
        value: dispatch
      }
    });
  }

  DragEvent.prototype.on = function () {
    var value = this._.on.apply(this._, arguments);

    return value === this._ ? this : value;
  };

  function defaultFilter(event) {
    return !event.ctrlKey && !event.button;
  }

  function defaultContainer() {
    return this.parentNode;
  }

  function defaultSubject(event, d) {
    return d == null ? {
      x: event.x,
      y: event.y
    } : d;
  }

  function defaultTouchable() {
    return navigator.maxTouchPoints || "ontouchstart" in this;
  }

  function drag () {
    var filter = defaultFilter,
        container = defaultContainer,
        subject = defaultSubject,
        touchable = defaultTouchable,
        gestures = {},
        listeners = dispatch("start", "drag", "end"),
        active = 0,
        mousedownx,
        mousedowny,
        mousemoving,
        touchending,
        clickDistance2 = 0;

    function drag(selection) {
      selection.on("mousedown.drag", mousedowned).filter(touchable).on("touchstart.drag", touchstarted).on("touchmove.drag", touchmoved, nonpassive).on("touchend.drag touchcancel.drag", touchended).style("touch-action", "none").style("-webkit-tap-highlight-color", "rgba(0,0,0,0)");
    }

    function mousedowned(event, d) {
      if (touchending || !filter.call(this, event, d)) return;
      var gesture = beforestart(this, container.call(this, event, d), event, d, "mouse");
      if (!gesture) return;
      select(event.view).on("mousemove.drag", mousemoved, nonpassivecapture).on("mouseup.drag", mouseupped, nonpassivecapture);
      dragDisable(event.view);
      nopropagation(event);
      mousemoving = false;
      mousedownx = event.clientX;
      mousedowny = event.clientY;
      gesture("start", event);
    }

    function mousemoved(event) {
      noevent(event);

      if (!mousemoving) {
        var dx = event.clientX - mousedownx,
            dy = event.clientY - mousedowny;
        mousemoving = dx * dx + dy * dy > clickDistance2;
      }

      gestures.mouse("drag", event);
    }

    function mouseupped(event) {
      select(event.view).on("mousemove.drag mouseup.drag", null);
      yesdrag(event.view, mousemoving);
      noevent(event);
      gestures.mouse("end", event);
    }

    function touchstarted(event, d) {
      if (!filter.call(this, event, d)) return;
      var touches = event.changedTouches,
          c = container.call(this, event, d),
          n = touches.length,
          i,
          gesture;

      for (i = 0; i < n; ++i) {
        if (gesture = beforestart(this, c, event, d, touches[i].identifier, touches[i])) {
          nopropagation(event);
          gesture("start", event, touches[i]);
        }
      }
    }

    function touchmoved(event) {
      var touches = event.changedTouches,
          n = touches.length,
          i,
          gesture;

      for (i = 0; i < n; ++i) {
        if (gesture = gestures[touches[i].identifier]) {
          noevent(event);
          gesture("drag", event, touches[i]);
        }
      }
    }

    function touchended(event) {
      var touches = event.changedTouches,
          n = touches.length,
          i,
          gesture;
      if (touchending) clearTimeout(touchending);
      touchending = setTimeout(function () {
        touchending = null;
      }, 500); // Ghost clicks are delayed!

      for (i = 0; i < n; ++i) {
        if (gesture = gestures[touches[i].identifier]) {
          nopropagation(event);
          gesture("end", event, touches[i]);
        }
      }
    }

    function beforestart(that, container, event, d, identifier, touch) {
      var dispatch = listeners.copy(),
          p = pointer(touch || event, container),
          dx,
          dy,
          s;
      if ((s = subject.call(that, new DragEvent("beforestart", {
        sourceEvent: event,
        target: drag,
        identifier: identifier,
        active: active,
        x: p[0],
        y: p[1],
        dx: 0,
        dy: 0,
        dispatch: dispatch
      }), d)) == null) return;
      dx = s.x - p[0] || 0;
      dy = s.y - p[1] || 0;
      return function gesture(type, event, touch) {
        var p0 = p,
            n;

        switch (type) {
          case "start":
            gestures[identifier] = gesture, n = active++;
            break;

          case "end":
            delete gestures[identifier], --active;
          // falls through

          case "drag":
            p = pointer(touch || event, container), n = active;
            break;
        }

        dispatch.call(type, that, new DragEvent(type, {
          sourceEvent: event,
          subject: s,
          target: drag,
          identifier: identifier,
          active: n,
          x: p[0] + dx,
          y: p[1] + dy,
          dx: p[0] - p0[0],
          dy: p[1] - p0[1],
          dispatch: dispatch
        }), d);
      };
    }

    drag.filter = function (_) {
      return arguments.length ? (filter = typeof _ === "function" ? _ : constant$3(!!_), drag) : filter;
    };

    drag.container = function (_) {
      return arguments.length ? (container = typeof _ === "function" ? _ : constant$3(_), drag) : container;
    };

    drag.subject = function (_) {
      return arguments.length ? (subject = typeof _ === "function" ? _ : constant$3(_), drag) : subject;
    };

    drag.touchable = function (_) {
      return arguments.length ? (touchable = typeof _ === "function" ? _ : constant$3(!!_), drag) : touchable;
    };

    drag.on = function () {
      var value = listeners.on.apply(listeners, arguments);
      return value === listeners ? drag : value;
    };

    drag.clickDistance = function (_) {
      return arguments.length ? (clickDistance2 = (_ = +_) * _, drag) : Math.sqrt(clickDistance2);
    };

    return drag;
  }

  function define$1 (constructor, factory, prototype) {
    constructor.prototype = factory.prototype = prototype;
    prototype.constructor = constructor;
  }
  function extend(parent, definition) {
    var prototype = Object.create(parent.prototype);

    for (var key in definition) {
      prototype[key] = definition[key];
    }

    return prototype;
  }

  function Color() {}
  var _darker = 0.7;

  var _brighter = 1 / _darker;
  var reI = "\\s*([+-]?\\d+)\\s*",
      reN = "\\s*([+-]?\\d*\\.?\\d+(?:[eE][+-]?\\d+)?)\\s*",
      reP = "\\s*([+-]?\\d*\\.?\\d+(?:[eE][+-]?\\d+)?)%\\s*",
      reHex = /^#([0-9a-f]{3,8})$/,
      reRgbInteger = new RegExp("^rgb\\(" + [reI, reI, reI] + "\\)$"),
      reRgbPercent = new RegExp("^rgb\\(" + [reP, reP, reP] + "\\)$"),
      reRgbaInteger = new RegExp("^rgba\\(" + [reI, reI, reI, reN] + "\\)$"),
      reRgbaPercent = new RegExp("^rgba\\(" + [reP, reP, reP, reN] + "\\)$"),
      reHslPercent = new RegExp("^hsl\\(" + [reN, reP, reP] + "\\)$"),
      reHslaPercent = new RegExp("^hsla\\(" + [reN, reP, reP, reN] + "\\)$");
  var named = {
    aliceblue: 0xf0f8ff,
    antiquewhite: 0xfaebd7,
    aqua: 0x00ffff,
    aquamarine: 0x7fffd4,
    azure: 0xf0ffff,
    beige: 0xf5f5dc,
    bisque: 0xffe4c4,
    black: 0x000000,
    blanchedalmond: 0xffebcd,
    blue: 0x0000ff,
    blueviolet: 0x8a2be2,
    brown: 0xa52a2a,
    burlywood: 0xdeb887,
    cadetblue: 0x5f9ea0,
    chartreuse: 0x7fff00,
    chocolate: 0xd2691e,
    coral: 0xff7f50,
    cornflowerblue: 0x6495ed,
    cornsilk: 0xfff8dc,
    crimson: 0xdc143c,
    cyan: 0x00ffff,
    darkblue: 0x00008b,
    darkcyan: 0x008b8b,
    darkgoldenrod: 0xb8860b,
    darkgray: 0xa9a9a9,
    darkgreen: 0x006400,
    darkgrey: 0xa9a9a9,
    darkkhaki: 0xbdb76b,
    darkmagenta: 0x8b008b,
    darkolivegreen: 0x556b2f,
    darkorange: 0xff8c00,
    darkorchid: 0x9932cc,
    darkred: 0x8b0000,
    darksalmon: 0xe9967a,
    darkseagreen: 0x8fbc8f,
    darkslateblue: 0x483d8b,
    darkslategray: 0x2f4f4f,
    darkslategrey: 0x2f4f4f,
    darkturquoise: 0x00ced1,
    darkviolet: 0x9400d3,
    deeppink: 0xff1493,
    deepskyblue: 0x00bfff,
    dimgray: 0x696969,
    dimgrey: 0x696969,
    dodgerblue: 0x1e90ff,
    firebrick: 0xb22222,
    floralwhite: 0xfffaf0,
    forestgreen: 0x228b22,
    fuchsia: 0xff00ff,
    gainsboro: 0xdcdcdc,
    ghostwhite: 0xf8f8ff,
    gold: 0xffd700,
    goldenrod: 0xdaa520,
    gray: 0x808080,
    green: 0x008000,
    greenyellow: 0xadff2f,
    grey: 0x808080,
    honeydew: 0xf0fff0,
    hotpink: 0xff69b4,
    indianred: 0xcd5c5c,
    indigo: 0x4b0082,
    ivory: 0xfffff0,
    khaki: 0xf0e68c,
    lavender: 0xe6e6fa,
    lavenderblush: 0xfff0f5,
    lawngreen: 0x7cfc00,
    lemonchiffon: 0xfffacd,
    lightblue: 0xadd8e6,
    lightcoral: 0xf08080,
    lightcyan: 0xe0ffff,
    lightgoldenrodyellow: 0xfafad2,
    lightgray: 0xd3d3d3,
    lightgreen: 0x90ee90,
    lightgrey: 0xd3d3d3,
    lightpink: 0xffb6c1,
    lightsalmon: 0xffa07a,
    lightseagreen: 0x20b2aa,
    lightskyblue: 0x87cefa,
    lightslategray: 0x778899,
    lightslategrey: 0x778899,
    lightsteelblue: 0xb0c4de,
    lightyellow: 0xffffe0,
    lime: 0x00ff00,
    limegreen: 0x32cd32,
    linen: 0xfaf0e6,
    magenta: 0xff00ff,
    maroon: 0x800000,
    mediumaquamarine: 0x66cdaa,
    mediumblue: 0x0000cd,
    mediumorchid: 0xba55d3,
    mediumpurple: 0x9370db,
    mediumseagreen: 0x3cb371,
    mediumslateblue: 0x7b68ee,
    mediumspringgreen: 0x00fa9a,
    mediumturquoise: 0x48d1cc,
    mediumvioletred: 0xc71585,
    midnightblue: 0x191970,
    mintcream: 0xf5fffa,
    mistyrose: 0xffe4e1,
    moccasin: 0xffe4b5,
    navajowhite: 0xffdead,
    navy: 0x000080,
    oldlace: 0xfdf5e6,
    olive: 0x808000,
    olivedrab: 0x6b8e23,
    orange: 0xffa500,
    orangered: 0xff4500,
    orchid: 0xda70d6,
    palegoldenrod: 0xeee8aa,
    palegreen: 0x98fb98,
    paleturquoise: 0xafeeee,
    palevioletred: 0xdb7093,
    papayawhip: 0xffefd5,
    peachpuff: 0xffdab9,
    peru: 0xcd853f,
    pink: 0xffc0cb,
    plum: 0xdda0dd,
    powderblue: 0xb0e0e6,
    purple: 0x800080,
    rebeccapurple: 0x663399,
    red: 0xff0000,
    rosybrown: 0xbc8f8f,
    royalblue: 0x4169e1,
    saddlebrown: 0x8b4513,
    salmon: 0xfa8072,
    sandybrown: 0xf4a460,
    seagreen: 0x2e8b57,
    seashell: 0xfff5ee,
    sienna: 0xa0522d,
    silver: 0xc0c0c0,
    skyblue: 0x87ceeb,
    slateblue: 0x6a5acd,
    slategray: 0x708090,
    slategrey: 0x708090,
    snow: 0xfffafa,
    springgreen: 0x00ff7f,
    steelblue: 0x4682b4,
    tan: 0xd2b48c,
    teal: 0x008080,
    thistle: 0xd8bfd8,
    tomato: 0xff6347,
    turquoise: 0x40e0d0,
    violet: 0xee82ee,
    wheat: 0xf5deb3,
    white: 0xffffff,
    whitesmoke: 0xf5f5f5,
    yellow: 0xffff00,
    yellowgreen: 0x9acd32
  };
  define$1(Color, color, {
    copy: function copy(channels) {
      return Object.assign(new this.constructor(), this, channels);
    },
    displayable: function displayable() {
      return this.rgb().displayable();
    },
    hex: color_formatHex,
    // Deprecated! Use color.formatHex.
    formatHex: color_formatHex,
    formatHsl: color_formatHsl,
    formatRgb: color_formatRgb,
    toString: color_formatRgb
  });

  function color_formatHex() {
    return this.rgb().formatHex();
  }

  function color_formatHsl() {
    return hslConvert(this).formatHsl();
  }

  function color_formatRgb() {
    return this.rgb().formatRgb();
  }

  function color(format) {
    var m, l;
    format = (format + "").trim().toLowerCase();
    return (m = reHex.exec(format)) ? (l = m[1].length, m = parseInt(m[1], 16), l === 6 ? rgbn(m) // #ff0000
    : l === 3 ? new Rgb(m >> 8 & 0xf | m >> 4 & 0xf0, m >> 4 & 0xf | m & 0xf0, (m & 0xf) << 4 | m & 0xf, 1) // #f00
    : l === 8 ? rgba(m >> 24 & 0xff, m >> 16 & 0xff, m >> 8 & 0xff, (m & 0xff) / 0xff) // #ff000000
    : l === 4 ? rgba(m >> 12 & 0xf | m >> 8 & 0xf0, m >> 8 & 0xf | m >> 4 & 0xf0, m >> 4 & 0xf | m & 0xf0, ((m & 0xf) << 4 | m & 0xf) / 0xff) // #f000
    : null // invalid hex
    ) : (m = reRgbInteger.exec(format)) ? new Rgb(m[1], m[2], m[3], 1) // rgb(255, 0, 0)
    : (m = reRgbPercent.exec(format)) ? new Rgb(m[1] * 255 / 100, m[2] * 255 / 100, m[3] * 255 / 100, 1) // rgb(100%, 0%, 0%)
    : (m = reRgbaInteger.exec(format)) ? rgba(m[1], m[2], m[3], m[4]) // rgba(255, 0, 0, 1)
    : (m = reRgbaPercent.exec(format)) ? rgba(m[1] * 255 / 100, m[2] * 255 / 100, m[3] * 255 / 100, m[4]) // rgb(100%, 0%, 0%, 1)
    : (m = reHslPercent.exec(format)) ? hsla(m[1], m[2] / 100, m[3] / 100, 1) // hsl(120, 50%, 50%)
    : (m = reHslaPercent.exec(format)) ? hsla(m[1], m[2] / 100, m[3] / 100, m[4]) // hsla(120, 50%, 50%, 1)
    : named.hasOwnProperty(format) ? rgbn(named[format]) // eslint-disable-line no-prototype-builtins
    : format === "transparent" ? new Rgb(NaN, NaN, NaN, 0) : null;
  }

  function rgbn(n) {
    return new Rgb(n >> 16 & 0xff, n >> 8 & 0xff, n & 0xff, 1);
  }

  function rgba(r, g, b, a) {
    if (a <= 0) r = g = b = NaN;
    return new Rgb(r, g, b, a);
  }

  function rgbConvert(o) {
    if (!(o instanceof Color)) o = color(o);
    if (!o) return new Rgb();
    o = o.rgb();
    return new Rgb(o.r, o.g, o.b, o.opacity);
  }
  function rgb(r, g, b, opacity) {
    return arguments.length === 1 ? rgbConvert(r) : new Rgb(r, g, b, opacity == null ? 1 : opacity);
  }
  function Rgb(r, g, b, opacity) {
    this.r = +r;
    this.g = +g;
    this.b = +b;
    this.opacity = +opacity;
  }
  define$1(Rgb, rgb, extend(Color, {
    brighter: function brighter(k) {
      k = k == null ? _brighter : Math.pow(_brighter, k);
      return new Rgb(this.r * k, this.g * k, this.b * k, this.opacity);
    },
    darker: function darker(k) {
      k = k == null ? _darker : Math.pow(_darker, k);
      return new Rgb(this.r * k, this.g * k, this.b * k, this.opacity);
    },
    rgb: function rgb() {
      return this;
    },
    displayable: function displayable() {
      return -0.5 <= this.r && this.r < 255.5 && -0.5 <= this.g && this.g < 255.5 && -0.5 <= this.b && this.b < 255.5 && 0 <= this.opacity && this.opacity <= 1;
    },
    hex: rgb_formatHex,
    // Deprecated! Use color.formatHex.
    formatHex: rgb_formatHex,
    formatRgb: rgb_formatRgb,
    toString: rgb_formatRgb
  }));

  function rgb_formatHex() {
    return "#" + hex(this.r) + hex(this.g) + hex(this.b);
  }

  function rgb_formatRgb() {
    var a = this.opacity;
    a = isNaN(a) ? 1 : Math.max(0, Math.min(1, a));
    return (a === 1 ? "rgb(" : "rgba(") + Math.max(0, Math.min(255, Math.round(this.r) || 0)) + ", " + Math.max(0, Math.min(255, Math.round(this.g) || 0)) + ", " + Math.max(0, Math.min(255, Math.round(this.b) || 0)) + (a === 1 ? ")" : ", " + a + ")");
  }

  function hex(value) {
    value = Math.max(0, Math.min(255, Math.round(value) || 0));
    return (value < 16 ? "0" : "") + value.toString(16);
  }

  function hsla(h, s, l, a) {
    if (a <= 0) h = s = l = NaN;else if (l <= 0 || l >= 1) h = s = NaN;else if (s <= 0) h = NaN;
    return new Hsl(h, s, l, a);
  }

  function hslConvert(o) {
    if (o instanceof Hsl) return new Hsl(o.h, o.s, o.l, o.opacity);
    if (!(o instanceof Color)) o = color(o);
    if (!o) return new Hsl();
    if (o instanceof Hsl) return o;
    o = o.rgb();
    var r = o.r / 255,
        g = o.g / 255,
        b = o.b / 255,
        min = Math.min(r, g, b),
        max = Math.max(r, g, b),
        h = NaN,
        s = max - min,
        l = (max + min) / 2;

    if (s) {
      if (r === max) h = (g - b) / s + (g < b) * 6;else if (g === max) h = (b - r) / s + 2;else h = (r - g) / s + 4;
      s /= l < 0.5 ? max + min : 2 - max - min;
      h *= 60;
    } else {
      s = l > 0 && l < 1 ? 0 : h;
    }

    return new Hsl(h, s, l, o.opacity);
  }
  function hsl(h, s, l, opacity) {
    return arguments.length === 1 ? hslConvert(h) : new Hsl(h, s, l, opacity == null ? 1 : opacity);
  }

  function Hsl(h, s, l, opacity) {
    this.h = +h;
    this.s = +s;
    this.l = +l;
    this.opacity = +opacity;
  }

  define$1(Hsl, hsl, extend(Color, {
    brighter: function brighter(k) {
      k = k == null ? _brighter : Math.pow(_brighter, k);
      return new Hsl(this.h, this.s, this.l * k, this.opacity);
    },
    darker: function darker(k) {
      k = k == null ? _darker : Math.pow(_darker, k);
      return new Hsl(this.h, this.s, this.l * k, this.opacity);
    },
    rgb: function rgb() {
      var h = this.h % 360 + (this.h < 0) * 360,
          s = isNaN(h) || isNaN(this.s) ? 0 : this.s,
          l = this.l,
          m2 = l + (l < 0.5 ? l : 1 - l) * s,
          m1 = 2 * l - m2;
      return new Rgb(hsl2rgb(h >= 240 ? h - 240 : h + 120, m1, m2), hsl2rgb(h, m1, m2), hsl2rgb(h < 120 ? h + 240 : h - 120, m1, m2), this.opacity);
    },
    displayable: function displayable() {
      return (0 <= this.s && this.s <= 1 || isNaN(this.s)) && 0 <= this.l && this.l <= 1 && 0 <= this.opacity && this.opacity <= 1;
    },
    formatHsl: function formatHsl() {
      var a = this.opacity;
      a = isNaN(a) ? 1 : Math.max(0, Math.min(1, a));
      return (a === 1 ? "hsl(" : "hsla(") + (this.h || 0) + ", " + (this.s || 0) * 100 + "%, " + (this.l || 0) * 100 + "%" + (a === 1 ? ")" : ", " + a + ")");
    }
  }));
  /* From FvD 13.37, CSS Color Module Level 3 */

  function hsl2rgb(h, m1, m2) {
    return (h < 60 ? m1 + (m2 - m1) * h / 60 : h < 180 ? m2 : h < 240 ? m1 + (m2 - m1) * (240 - h) / 60 : m1) * 255;
  }

  var constant$2 = (function (x) {
    return function () {
      return x;
    };
  });

  function linear$2(a, d) {
    return function (t) {
      return a + t * d;
    };
  }

  function exponential(a, b, y) {
    return a = Math.pow(a, y), b = Math.pow(b, y) - a, y = 1 / y, function (t) {
      return Math.pow(a + t * b, y);
    };
  }
  function gamma(y) {
    return (y = +y) === 1 ? nogamma : function (a, b) {
      return b - a ? exponential(a, b, y) : constant$2(isNaN(a) ? b : a);
    };
  }
  function nogamma(a, b) {
    var d = b - a;
    return d ? linear$2(a, d) : constant$2(isNaN(a) ? b : a);
  }

  var interpolateRgb = (function rgbGamma(y) {
    var color = gamma(y);

    function rgb$1(start, end) {
      var r = color((start = rgb(start)).r, (end = rgb(end)).r),
          g = color(start.g, end.g),
          b = color(start.b, end.b),
          opacity = nogamma(start.opacity, end.opacity);
      return function (t) {
        start.r = r(t);
        start.g = g(t);
        start.b = b(t);
        start.opacity = opacity(t);
        return start + "";
      };
    }

    rgb$1.gamma = rgbGamma;
    return rgb$1;
  })(1);

  function numberArray (a, b) {
    if (!b) b = [];
    var n = a ? Math.min(b.length, a.length) : 0,
        c = b.slice(),
        i;
    return function (t) {
      for (i = 0; i < n; ++i) {
        c[i] = a[i] * (1 - t) + b[i] * t;
      }

      return c;
    };
  }
  function isNumberArray(x) {
    return ArrayBuffer.isView(x) && !(x instanceof DataView);
  }

  function genericArray(a, b) {
    var nb = b ? b.length : 0,
        na = a ? Math.min(nb, a.length) : 0,
        x = new Array(na),
        c = new Array(nb),
        i;

    for (i = 0; i < na; ++i) {
      x[i] = interpolate$1(a[i], b[i]);
    }

    for (; i < nb; ++i) {
      c[i] = b[i];
    }

    return function (t) {
      for (i = 0; i < na; ++i) {
        c[i] = x[i](t);
      }

      return c;
    };
  }

  function date (a, b) {
    var d = new Date();
    return a = +a, b = +b, function (t) {
      return d.setTime(a * (1 - t) + b * t), d;
    };
  }

  function interpolateNumber (a, b) {
    return a = +a, b = +b, function (t) {
      return a * (1 - t) + b * t;
    };
  }

  function object (a, b) {
    var i = {},
        c = {},
        k;
    if (a === null || _typeof(a) !== "object") a = {};
    if (b === null || _typeof(b) !== "object") b = {};

    for (k in b) {
      if (k in a) {
        i[k] = interpolate$1(a[k], b[k]);
      } else {
        c[k] = b[k];
      }
    }

    return function (t) {
      for (k in i) {
        c[k] = i[k](t);
      }

      return c;
    };
  }

  var reA = /[-+]?(?:\d+\.?\d*|\.?\d+)(?:[eE][-+]?\d+)?/g,
      reB = new RegExp(reA.source, "g");

  function zero(b) {
    return function () {
      return b;
    };
  }

  function one(b) {
    return function (t) {
      return b(t) + "";
    };
  }

  function interpolateString (a, b) {
    var bi = reA.lastIndex = reB.lastIndex = 0,
        // scan index for next number in b
    am,
        // current match in a
    bm,
        // current match in b
    bs,
        // string preceding current number in b, if any
    i = -1,
        // index in s
    s = [],
        // string constants and placeholders
    q = []; // number interpolators
    // Coerce inputs to strings.

    a = a + "", b = b + ""; // Interpolate pairs of numbers in a & b.

    while ((am = reA.exec(a)) && (bm = reB.exec(b))) {
      if ((bs = bm.index) > bi) {
        // a string precedes the next number in b
        bs = b.slice(bi, bs);
        if (s[i]) s[i] += bs; // coalesce with previous string
        else s[++i] = bs;
      }

      if ((am = am[0]) === (bm = bm[0])) {
        // numbers in a & b match
        if (s[i]) s[i] += bm; // coalesce with previous string
        else s[++i] = bm;
      } else {
        // interpolate non-matching numbers
        s[++i] = null;
        q.push({
          i: i,
          x: interpolateNumber(am, bm)
        });
      }

      bi = reB.lastIndex;
    } // Add remains of b.


    if (bi < b.length) {
      bs = b.slice(bi);
      if (s[i]) s[i] += bs; // coalesce with previous string
      else s[++i] = bs;
    } // Special optimization for only a single match.
    // Otherwise, interpolate each of the numbers and rejoin the string.


    return s.length < 2 ? q[0] ? one(q[0].x) : zero(b) : (b = q.length, function (t) {
      for (var i = 0, o; i < b; ++i) {
        s[(o = q[i]).i] = o.x(t);
      }

      return s.join("");
    });
  }

  function interpolate$1 (a, b) {
    var t = _typeof(b),
        c;

    return b == null || t === "boolean" ? constant$2(b) : (t === "number" ? interpolateNumber : t === "string" ? (c = color(b)) ? (b = c, interpolateRgb) : interpolateString : b instanceof color ? interpolateRgb : b instanceof Date ? date : isNumberArray(b) ? numberArray : Array.isArray(b) ? genericArray : typeof b.valueOf !== "function" && typeof b.toString !== "function" || isNaN(b) ? object : interpolateNumber)(a, b);
  }

  function interpolateRound (a, b) {
    return a = +a, b = +b, function (t) {
      return Math.round(a * (1 - t) + b * t);
    };
  }

  var degrees$1 = 180 / Math.PI;
  var identity$4 = {
    translateX: 0,
    translateY: 0,
    rotate: 0,
    skewX: 0,
    scaleX: 1,
    scaleY: 1
  };
  function decompose (a, b, c, d, e, f) {
    var scaleX, scaleY, skewX;
    if (scaleX = Math.sqrt(a * a + b * b)) a /= scaleX, b /= scaleX;
    if (skewX = a * c + b * d) c -= a * skewX, d -= b * skewX;
    if (scaleY = Math.sqrt(c * c + d * d)) c /= scaleY, d /= scaleY, skewX /= scaleY;
    if (a * d < b * c) a = -a, b = -b, skewX = -skewX, scaleX = -scaleX;
    return {
      translateX: e,
      translateY: f,
      rotate: Math.atan2(b, a) * degrees$1,
      skewX: Math.atan(skewX) * degrees$1,
      scaleX: scaleX,
      scaleY: scaleY
    };
  }

  var svgNode;
  /* eslint-disable no-undef */

  function parseCss(value) {
    var m = new (typeof DOMMatrix === "function" ? DOMMatrix : WebKitCSSMatrix)(value + "");
    return m.isIdentity ? identity$4 : decompose(m.a, m.b, m.c, m.d, m.e, m.f);
  }
  function parseSvg(value) {
    if (value == null) return identity$4;
    if (!svgNode) svgNode = document.createElementNS("http://www.w3.org/2000/svg", "g");
    svgNode.setAttribute("transform", value);
    if (!(value = svgNode.transform.baseVal.consolidate())) return identity$4;
    value = value.matrix;
    return decompose(value.a, value.b, value.c, value.d, value.e, value.f);
  }

  function interpolateTransform(parse, pxComma, pxParen, degParen) {
    function pop(s) {
      return s.length ? s.pop() + " " : "";
    }

    function translate(xa, ya, xb, yb, s, q) {
      if (xa !== xb || ya !== yb) {
        var i = s.push("translate(", null, pxComma, null, pxParen);
        q.push({
          i: i - 4,
          x: interpolateNumber(xa, xb)
        }, {
          i: i - 2,
          x: interpolateNumber(ya, yb)
        });
      } else if (xb || yb) {
        s.push("translate(" + xb + pxComma + yb + pxParen);
      }
    }

    function rotate(a, b, s, q) {
      if (a !== b) {
        if (a - b > 180) b += 360;else if (b - a > 180) a += 360; // shortest path

        q.push({
          i: s.push(pop(s) + "rotate(", null, degParen) - 2,
          x: interpolateNumber(a, b)
        });
      } else if (b) {
        s.push(pop(s) + "rotate(" + b + degParen);
      }
    }

    function skewX(a, b, s, q) {
      if (a !== b) {
        q.push({
          i: s.push(pop(s) + "skewX(", null, degParen) - 2,
          x: interpolateNumber(a, b)
        });
      } else if (b) {
        s.push(pop(s) + "skewX(" + b + degParen);
      }
    }

    function scale(xa, ya, xb, yb, s, q) {
      if (xa !== xb || ya !== yb) {
        var i = s.push(pop(s) + "scale(", null, ",", null, ")");
        q.push({
          i: i - 4,
          x: interpolateNumber(xa, xb)
        }, {
          i: i - 2,
          x: interpolateNumber(ya, yb)
        });
      } else if (xb !== 1 || yb !== 1) {
        s.push(pop(s) + "scale(" + xb + "," + yb + ")");
      }
    }

    return function (a, b) {
      var s = [],
          // string constants and placeholders
      q = []; // number interpolators

      a = parse(a), b = parse(b);
      translate(a.translateX, a.translateY, b.translateX, b.translateY, s, q);
      rotate(a.rotate, b.rotate, s, q);
      skewX(a.skewX, b.skewX, s, q);
      scale(a.scaleX, a.scaleY, b.scaleX, b.scaleY, s, q);
      a = b = null; // gc

      return function (t) {
        var i = -1,
            n = q.length,
            o;

        while (++i < n) {
          s[(o = q[i]).i] = o.x(t);
        }

        return s.join("");
      };
    };
  }

  var interpolateTransformCss = interpolateTransform(parseCss, "px, ", "px)", "deg)");
  var interpolateTransformSvg = interpolateTransform(parseSvg, ", ", ")", ")");

  var frame = 0,
      // is an animation frame pending?
  timeout$1 = 0,
      // is a timeout pending?
  interval$1 = 0,
      // are any timers active?
  pokeDelay = 1000,
      // how frequently we check for clock skew
  taskHead,
      taskTail,
      clockLast = 0,
      clockNow = 0,
      clockSkew = 0,
      clock = (typeof performance === "undefined" ? "undefined" : _typeof(performance)) === "object" && performance.now ? performance : Date,
      setFrame = (typeof window === "undefined" ? "undefined" : _typeof(window)) === "object" && window.requestAnimationFrame ? window.requestAnimationFrame.bind(window) : function (f) {
    setTimeout(f, 17);
  };
  function now() {
    return clockNow || (setFrame(clearNow), clockNow = clock.now() + clockSkew);
  }

  function clearNow() {
    clockNow = 0;
  }

  function Timer() {
    this._call = this._time = this._next = null;
  }
  Timer.prototype = timer.prototype = {
    constructor: Timer,
    restart: function restart(callback, delay, time) {
      if (typeof callback !== "function") throw new TypeError("callback is not a function");
      time = (time == null ? now() : +time) + (delay == null ? 0 : +delay);

      if (!this._next && taskTail !== this) {
        if (taskTail) taskTail._next = this;else taskHead = this;
        taskTail = this;
      }

      this._call = callback;
      this._time = time;
      sleep();
    },
    stop: function stop() {
      if (this._call) {
        this._call = null;
        this._time = Infinity;
        sleep();
      }
    }
  };
  function timer(callback, delay, time) {
    var t = new Timer();
    t.restart(callback, delay, time);
    return t;
  }
  function timerFlush() {
    now(); // Get the current time, if not already set.

    ++frame; // Pretend we’ve set an alarm, if we haven’t already.

    var t = taskHead,
        e;

    while (t) {
      if ((e = clockNow - t._time) >= 0) t._call.call(undefined, e);
      t = t._next;
    }

    --frame;
  }

  function wake() {
    clockNow = (clockLast = clock.now()) + clockSkew;
    frame = timeout$1 = 0;

    try {
      timerFlush();
    } finally {
      frame = 0;
      nap();
      clockNow = 0;
    }
  }

  function poke() {
    var now = clock.now(),
        delay = now - clockLast;
    if (delay > pokeDelay) clockSkew -= delay, clockLast = now;
  }

  function nap() {
    var t0,
        t1 = taskHead,
        t2,
        time = Infinity;

    while (t1) {
      if (t1._call) {
        if (time > t1._time) time = t1._time;
        t0 = t1, t1 = t1._next;
      } else {
        t2 = t1._next, t1._next = null;
        t1 = t0 ? t0._next = t2 : taskHead = t2;
      }
    }

    taskTail = t0;
    sleep(time);
  }

  function sleep(time) {
    if (frame) return; // Soonest alarm already set, or will be.

    if (timeout$1) timeout$1 = clearTimeout(timeout$1);
    var delay = time - clockNow; // Strictly less than if we recomputed clockNow.

    if (delay > 24) {
      if (time < Infinity) timeout$1 = setTimeout(wake, time - clock.now() - clockSkew);
      if (interval$1) interval$1 = clearInterval(interval$1);
    } else {
      if (!interval$1) clockLast = clock.now(), interval$1 = setInterval(poke, pokeDelay);
      frame = 1, setFrame(wake);
    }
  }

  function timeout (callback, delay, time) {
    var t = new Timer();
    delay = delay == null ? 0 : +delay;
    t.restart(function (elapsed) {
      t.stop();
      callback(elapsed + delay);
    }, delay, time);
    return t;
  }

  function interval (callback, delay, time) {
    var t = new Timer(),
        total = delay;
    if (delay == null) return t.restart(callback, delay, time), t;
    t._restart = t.restart;

    t.restart = function (callback, delay, time) {
      delay = +delay, time = time == null ? now() : +time;

      t._restart(function tick(elapsed) {
        elapsed += total;

        t._restart(tick, total += delay, time);

        callback(elapsed);
      }, delay, time);
    };

    t.restart(callback, delay, time);
    return t;
  }

  var emptyOn = dispatch("start", "end", "cancel", "interrupt");
  var emptyTween = [];
  var CREATED = 0;
  var SCHEDULED = 1;
  var STARTING = 2;
  var STARTED = 3;
  var RUNNING = 4;
  var ENDING = 5;
  var ENDED = 6;
  function schedule (node, name, id, index, group, timing) {
    var schedules = node.__transition;
    if (!schedules) node.__transition = {};else if (id in schedules) return;
    create(node, id, {
      name: name,
      index: index,
      // For context during callback.
      group: group,
      // For context during callback.
      on: emptyOn,
      tween: emptyTween,
      time: timing.time,
      delay: timing.delay,
      duration: timing.duration,
      ease: timing.ease,
      timer: null,
      state: CREATED
    });
  }
  function init(node, id) {
    var schedule = get(node, id);
    if (schedule.state > CREATED) throw new Error("too late; already scheduled");
    return schedule;
  }
  function set(node, id) {
    var schedule = get(node, id);
    if (schedule.state > STARTED) throw new Error("too late; already running");
    return schedule;
  }
  function get(node, id) {
    var schedule = node.__transition;
    if (!schedule || !(schedule = schedule[id])) throw new Error("transition not found");
    return schedule;
  }

  function create(node, id, self) {
    var schedules = node.__transition,
        tween; // Initialize the self timer when the transition is created.
    // Note the actual delay is not known until the first callback!

    schedules[id] = self;
    self.timer = timer(schedule, 0, self.time);

    function schedule(elapsed) {
      self.state = SCHEDULED;
      self.timer.restart(start, self.delay, self.time); // If the elapsed delay is less than our first sleep, start immediately.

      if (self.delay <= elapsed) start(elapsed - self.delay);
    }

    function start(elapsed) {
      var i, j, n, o; // If the state is not SCHEDULED, then we previously errored on start.

      if (self.state !== SCHEDULED) return stop();

      for (i in schedules) {
        o = schedules[i];
        if (o.name !== self.name) continue; // While this element already has a starting transition during this frame,
        // defer starting an interrupting transition until that transition has a
        // chance to tick (and possibly end); see d3/d3-transition#54!

        if (o.state === STARTED) return timeout(start); // Interrupt the active transition, if any.

        if (o.state === RUNNING) {
          o.state = ENDED;
          o.timer.stop();
          o.on.call("interrupt", node, node.__data__, o.index, o.group);
          delete schedules[i];
        } // Cancel any pre-empted transitions.
        else if (+i < id) {
          o.state = ENDED;
          o.timer.stop();
          o.on.call("cancel", node, node.__data__, o.index, o.group);
          delete schedules[i];
        }
      } // Defer the first tick to end of the current frame; see d3/d3#1576.
      // Note the transition may be canceled after start and before the first tick!
      // Note this must be scheduled before the start event; see d3/d3-transition#16!
      // Assuming this is successful, subsequent callbacks go straight to tick.


      timeout(function () {
        if (self.state === STARTED) {
          self.state = RUNNING;
          self.timer.restart(tick, self.delay, self.time);
          tick(elapsed);
        }
      }); // Dispatch the start event.
      // Note this must be done before the tween are initialized.

      self.state = STARTING;
      self.on.call("start", node, node.__data__, self.index, self.group);
      if (self.state !== STARTING) return; // interrupted

      self.state = STARTED; // Initialize the tween, deleting null tween.

      tween = new Array(n = self.tween.length);

      for (i = 0, j = -1; i < n; ++i) {
        if (o = self.tween[i].value.call(node, node.__data__, self.index, self.group)) {
          tween[++j] = o;
        }
      }

      tween.length = j + 1;
    }

    function tick(elapsed) {
      var t = elapsed < self.duration ? self.ease.call(null, elapsed / self.duration) : (self.timer.restart(stop), self.state = ENDING, 1),
          i = -1,
          n = tween.length;

      while (++i < n) {
        tween[i].call(node, t);
      } // Dispatch the end event.


      if (self.state === ENDING) {
        self.on.call("end", node, node.__data__, self.index, self.group);
        stop();
      }
    }

    function stop() {
      self.state = ENDED;
      self.timer.stop();
      delete schedules[id];

      for (var i in schedules) {
        return;
      } // eslint-disable-line no-unused-vars


      delete node.__transition;
    }
  }

  function interrupt (node, name) {
    var schedules = node.__transition,
        schedule,
        active,
        empty = true,
        i;
    if (!schedules) return;
    name = name == null ? null : name + "";

    for (i in schedules) {
      if ((schedule = schedules[i]).name !== name) {
        empty = false;
        continue;
      }

      active = schedule.state > STARTING && schedule.state < ENDING;
      schedule.state = ENDED;
      schedule.timer.stop();
      schedule.on.call(active ? "interrupt" : "cancel", node, node.__data__, schedule.index, schedule.group);
      delete schedules[i];
    }

    if (empty) delete node.__transition;
  }

  function selection_interrupt (name) {
    return this.each(function () {
      interrupt(this, name);
    });
  }

  function tweenRemove(id, name) {
    var tween0, tween1;
    return function () {
      var schedule = set(this, id),
          tween = schedule.tween; // If this node shared tween with the previous node,
      // just assign the updated shared tween and we’re done!
      // Otherwise, copy-on-write.

      if (tween !== tween0) {
        tween1 = tween0 = tween;

        for (var i = 0, n = tween1.length; i < n; ++i) {
          if (tween1[i].name === name) {
            tween1 = tween1.slice();
            tween1.splice(i, 1);
            break;
          }
        }
      }

      schedule.tween = tween1;
    };
  }

  function tweenFunction(id, name, value) {
    var tween0, tween1;
    if (typeof value !== "function") throw new Error();
    return function () {
      var schedule = set(this, id),
          tween = schedule.tween; // If this node shared tween with the previous node,
      // just assign the updated shared tween and we’re done!
      // Otherwise, copy-on-write.

      if (tween !== tween0) {
        tween1 = (tween0 = tween).slice();

        for (var t = {
          name: name,
          value: value
        }, i = 0, n = tween1.length; i < n; ++i) {
          if (tween1[i].name === name) {
            tween1[i] = t;
            break;
          }
        }

        if (i === n) tween1.push(t);
      }

      schedule.tween = tween1;
    };
  }

  function transition_tween (name, value) {
    var id = this._id;
    name += "";

    if (arguments.length < 2) {
      var tween = get(this.node(), id).tween;

      for (var i = 0, n = tween.length, t; i < n; ++i) {
        if ((t = tween[i]).name === name) {
          return t.value;
        }
      }

      return null;
    }

    return this.each((value == null ? tweenRemove : tweenFunction)(id, name, value));
  }
  function tweenValue(transition, name, value) {
    var id = transition._id;
    transition.each(function () {
      var schedule = set(this, id);
      (schedule.value || (schedule.value = {}))[name] = value.apply(this, arguments);
    });
    return function (node) {
      return get(node, id).value[name];
    };
  }

  function interpolate (a, b) {
    var c;
    return (typeof b === "number" ? interpolateNumber : b instanceof color ? interpolateRgb : (c = color(b)) ? (b = c, interpolateRgb) : interpolateString)(a, b);
  }

  function attrRemove(name) {
    return function () {
      this.removeAttribute(name);
    };
  }

  function attrRemoveNS(fullname) {
    return function () {
      this.removeAttributeNS(fullname.space, fullname.local);
    };
  }

  function attrConstant(name, interpolate, value1) {
    var string00,
        string1 = value1 + "",
        interpolate0;
    return function () {
      var string0 = this.getAttribute(name);
      return string0 === string1 ? null : string0 === string00 ? interpolate0 : interpolate0 = interpolate(string00 = string0, value1);
    };
  }

  function attrConstantNS(fullname, interpolate, value1) {
    var string00,
        string1 = value1 + "",
        interpolate0;
    return function () {
      var string0 = this.getAttributeNS(fullname.space, fullname.local);
      return string0 === string1 ? null : string0 === string00 ? interpolate0 : interpolate0 = interpolate(string00 = string0, value1);
    };
  }

  function attrFunction(name, interpolate, value) {
    var string00, string10, interpolate0;
    return function () {
      var string0,
          value1 = value(this),
          string1;
      if (value1 == null) return void this.removeAttribute(name);
      string0 = this.getAttribute(name);
      string1 = value1 + "";
      return string0 === string1 ? null : string0 === string00 && string1 === string10 ? interpolate0 : (string10 = string1, interpolate0 = interpolate(string00 = string0, value1));
    };
  }

  function attrFunctionNS(fullname, interpolate, value) {
    var string00, string10, interpolate0;
    return function () {
      var string0,
          value1 = value(this),
          string1;
      if (value1 == null) return void this.removeAttributeNS(fullname.space, fullname.local);
      string0 = this.getAttributeNS(fullname.space, fullname.local);
      string1 = value1 + "";
      return string0 === string1 ? null : string0 === string00 && string1 === string10 ? interpolate0 : (string10 = string1, interpolate0 = interpolate(string00 = string0, value1));
    };
  }

  function transition_attr (name, value) {
    var fullname = namespace(name),
        i = fullname === "transform" ? interpolateTransformSvg : interpolate;
    return this.attrTween(name, typeof value === "function" ? (fullname.local ? attrFunctionNS : attrFunction)(fullname, i, tweenValue(this, "attr." + name, value)) : value == null ? (fullname.local ? attrRemoveNS : attrRemove)(fullname) : (fullname.local ? attrConstantNS : attrConstant)(fullname, i, value));
  }

  function attrInterpolate(name, i) {
    return function (t) {
      this.setAttribute(name, i.call(this, t));
    };
  }

  function attrInterpolateNS(fullname, i) {
    return function (t) {
      this.setAttributeNS(fullname.space, fullname.local, i.call(this, t));
    };
  }

  function attrTweenNS(fullname, value) {
    var t0, i0;

    function tween() {
      var i = value.apply(this, arguments);
      if (i !== i0) t0 = (i0 = i) && attrInterpolateNS(fullname, i);
      return t0;
    }

    tween._value = value;
    return tween;
  }

  function attrTween(name, value) {
    var t0, i0;

    function tween() {
      var i = value.apply(this, arguments);
      if (i !== i0) t0 = (i0 = i) && attrInterpolate(name, i);
      return t0;
    }

    tween._value = value;
    return tween;
  }

  function transition_attrTween (name, value) {
    var key = "attr." + name;
    if (arguments.length < 2) return (key = this.tween(key)) && key._value;
    if (value == null) return this.tween(key, null);
    if (typeof value !== "function") throw new Error();
    var fullname = namespace(name);
    return this.tween(key, (fullname.local ? attrTweenNS : attrTween)(fullname, value));
  }

  function delayFunction(id, value) {
    return function () {
      init(this, id).delay = +value.apply(this, arguments);
    };
  }

  function delayConstant(id, value) {
    return value = +value, function () {
      init(this, id).delay = value;
    };
  }

  function transition_delay (value) {
    var id = this._id;
    return arguments.length ? this.each((typeof value === "function" ? delayFunction : delayConstant)(id, value)) : get(this.node(), id).delay;
  }

  function durationFunction(id, value) {
    return function () {
      set(this, id).duration = +value.apply(this, arguments);
    };
  }

  function durationConstant(id, value) {
    return value = +value, function () {
      set(this, id).duration = value;
    };
  }

  function transition_duration (value) {
    var id = this._id;
    return arguments.length ? this.each((typeof value === "function" ? durationFunction : durationConstant)(id, value)) : get(this.node(), id).duration;
  }

  function easeConstant(id, value) {
    if (typeof value !== "function") throw new Error();
    return function () {
      set(this, id).ease = value;
    };
  }

  function transition_ease (value) {
    var id = this._id;
    return arguments.length ? this.each(easeConstant(id, value)) : get(this.node(), id).ease;
  }

  function easeVarying(id, value) {
    return function () {
      var v = value.apply(this, arguments);
      if (typeof v !== "function") throw new Error();
      set(this, id).ease = v;
    };
  }

  function transition_easeVarying (value) {
    if (typeof value !== "function") throw new Error();
    return this.each(easeVarying(this._id, value));
  }

  function transition_filter (match) {
    if (typeof match !== "function") match = matcher(match);

    for (var groups = this._groups, m = groups.length, subgroups = new Array(m), j = 0; j < m; ++j) {
      for (var group = groups[j], n = group.length, subgroup = subgroups[j] = [], node, i = 0; i < n; ++i) {
        if ((node = group[i]) && match.call(node, node.__data__, i, group)) {
          subgroup.push(node);
        }
      }
    }

    return new Transition(subgroups, this._parents, this._name, this._id);
  }

  function transition_merge (transition) {
    if (transition._id !== this._id) throw new Error();

    for (var groups0 = this._groups, groups1 = transition._groups, m0 = groups0.length, m1 = groups1.length, m = Math.min(m0, m1), merges = new Array(m0), j = 0; j < m; ++j) {
      for (var group0 = groups0[j], group1 = groups1[j], n = group0.length, merge = merges[j] = new Array(n), node, i = 0; i < n; ++i) {
        if (node = group0[i] || group1[i]) {
          merge[i] = node;
        }
      }
    }

    for (; j < m0; ++j) {
      merges[j] = groups0[j];
    }

    return new Transition(merges, this._parents, this._name, this._id);
  }

  function start(name) {
    return (name + "").trim().split(/^|\s+/).every(function (t) {
      var i = t.indexOf(".");
      if (i >= 0) t = t.slice(0, i);
      return !t || t === "start";
    });
  }

  function onFunction(id, name, listener) {
    var on0,
        on1,
        sit = start(name) ? init : set;
    return function () {
      var schedule = sit(this, id),
          on = schedule.on; // If this node shared a dispatch with the previous node,
      // just assign the updated shared dispatch and we’re done!
      // Otherwise, copy-on-write.

      if (on !== on0) (on1 = (on0 = on).copy()).on(name, listener);
      schedule.on = on1;
    };
  }

  function transition_on (name, listener) {
    var id = this._id;
    return arguments.length < 2 ? get(this.node(), id).on.on(name) : this.each(onFunction(id, name, listener));
  }

  function removeFunction(id) {
    return function () {
      var parent = this.parentNode;

      for (var i in this.__transition) {
        if (+i !== id) return;
      }

      if (parent) parent.removeChild(this);
    };
  }

  function transition_remove () {
    return this.on("end.remove", removeFunction(this._id));
  }

  function transition_select (select) {
    var name = this._name,
        id = this._id;
    if (typeof select !== "function") select = selector(select);

    for (var groups = this._groups, m = groups.length, subgroups = new Array(m), j = 0; j < m; ++j) {
      for (var group = groups[j], n = group.length, subgroup = subgroups[j] = new Array(n), node, subnode, i = 0; i < n; ++i) {
        if ((node = group[i]) && (subnode = select.call(node, node.__data__, i, group))) {
          if ("__data__" in node) subnode.__data__ = node.__data__;
          subgroup[i] = subnode;
          schedule(subgroup[i], name, id, i, subgroup, get(node, id));
        }
      }
    }

    return new Transition(subgroups, this._parents, name, id);
  }

  function transition_selectAll (select) {
    var name = this._name,
        id = this._id;
    if (typeof select !== "function") select = selectorAll(select);

    for (var groups = this._groups, m = groups.length, subgroups = [], parents = [], j = 0; j < m; ++j) {
      for (var group = groups[j], n = group.length, node, i = 0; i < n; ++i) {
        if (node = group[i]) {
          for (var children = select.call(node, node.__data__, i, group), child, inherit = get(node, id), k = 0, l = children.length; k < l; ++k) {
            if (child = children[k]) {
              schedule(child, name, id, k, children, inherit);
            }
          }

          subgroups.push(children);
          parents.push(node);
        }
      }
    }

    return new Transition(subgroups, parents, name, id);
  }

  var Selection = selection.prototype.constructor;
  function transition_selection () {
    return new Selection(this._groups, this._parents);
  }

  function styleNull(name, interpolate) {
    var string00, string10, interpolate0;
    return function () {
      var string0 = styleValue(this, name),
          string1 = (this.style.removeProperty(name), styleValue(this, name));
      return string0 === string1 ? null : string0 === string00 && string1 === string10 ? interpolate0 : interpolate0 = interpolate(string00 = string0, string10 = string1);
    };
  }

  function styleRemove(name) {
    return function () {
      this.style.removeProperty(name);
    };
  }

  function styleConstant(name, interpolate, value1) {
    var string00,
        string1 = value1 + "",
        interpolate0;
    return function () {
      var string0 = styleValue(this, name);
      return string0 === string1 ? null : string0 === string00 ? interpolate0 : interpolate0 = interpolate(string00 = string0, value1);
    };
  }

  function styleFunction(name, interpolate, value) {
    var string00, string10, interpolate0;
    return function () {
      var string0 = styleValue(this, name),
          value1 = value(this),
          string1 = value1 + "";
      if (value1 == null) string1 = value1 = (this.style.removeProperty(name), styleValue(this, name));
      return string0 === string1 ? null : string0 === string00 && string1 === string10 ? interpolate0 : (string10 = string1, interpolate0 = interpolate(string00 = string0, value1));
    };
  }

  function styleMaybeRemove(id, name) {
    var on0,
        on1,
        listener0,
        key = "style." + name,
        event = "end." + key,
        remove;
    return function () {
      var schedule = set(this, id),
          on = schedule.on,
          listener = schedule.value[key] == null ? remove || (remove = styleRemove(name)) : undefined; // If this node shared a dispatch with the previous node,
      // just assign the updated shared dispatch and we’re done!
      // Otherwise, copy-on-write.

      if (on !== on0 || listener0 !== listener) (on1 = (on0 = on).copy()).on(event, listener0 = listener);
      schedule.on = on1;
    };
  }

  function transition_style (name, value, priority) {
    var i = (name += "") === "transform" ? interpolateTransformCss : interpolate;
    return value == null ? this.styleTween(name, styleNull(name, i)).on("end.style." + name, styleRemove(name)) : typeof value === "function" ? this.styleTween(name, styleFunction(name, i, tweenValue(this, "style." + name, value))).each(styleMaybeRemove(this._id, name)) : this.styleTween(name, styleConstant(name, i, value), priority).on("end.style." + name, null);
  }

  function styleInterpolate(name, i, priority) {
    return function (t) {
      this.style.setProperty(name, i.call(this, t), priority);
    };
  }

  function styleTween(name, value, priority) {
    var t, i0;

    function tween() {
      var i = value.apply(this, arguments);
      if (i !== i0) t = (i0 = i) && styleInterpolate(name, i, priority);
      return t;
    }

    tween._value = value;
    return tween;
  }

  function transition_styleTween (name, value, priority) {
    var key = "style." + (name += "");
    if (arguments.length < 2) return (key = this.tween(key)) && key._value;
    if (value == null) return this.tween(key, null);
    if (typeof value !== "function") throw new Error();
    return this.tween(key, styleTween(name, value, priority == null ? "" : priority));
  }

  function textConstant(value) {
    return function () {
      this.textContent = value;
    };
  }

  function textFunction(value) {
    return function () {
      var value1 = value(this);
      this.textContent = value1 == null ? "" : value1;
    };
  }

  function transition_text (value) {
    return this.tween("text", typeof value === "function" ? textFunction(tweenValue(this, "text", value)) : textConstant(value == null ? "" : value + ""));
  }

  function textInterpolate(i) {
    return function (t) {
      this.textContent = i.call(this, t);
    };
  }

  function textTween(value) {
    var t0, i0;

    function tween() {
      var i = value.apply(this, arguments);
      if (i !== i0) t0 = (i0 = i) && textInterpolate(i);
      return t0;
    }

    tween._value = value;
    return tween;
  }

  function transition_textTween (value) {
    var key = "text";
    if (arguments.length < 1) return (key = this.tween(key)) && key._value;
    if (value == null) return this.tween(key, null);
    if (typeof value !== "function") throw new Error();
    return this.tween(key, textTween(value));
  }

  function transition_transition () {
    var name = this._name,
        id0 = this._id,
        id1 = newId();

    for (var groups = this._groups, m = groups.length, j = 0; j < m; ++j) {
      for (var group = groups[j], n = group.length, node, i = 0; i < n; ++i) {
        if (node = group[i]) {
          var inherit = get(node, id0);
          schedule(node, name, id1, i, group, {
            time: inherit.time + inherit.delay + inherit.duration,
            delay: 0,
            duration: inherit.duration,
            ease: inherit.ease
          });
        }
      }
    }

    return new Transition(groups, this._parents, name, id1);
  }

  function transition_end () {
    var on0,
        on1,
        that = this,
        id = that._id,
        size = that.size();
    return new Promise(function (resolve, reject) {
      var cancel = {
        value: reject
      },
          end = {
        value: function value() {
          if (--size === 0) resolve();
        }
      };
      that.each(function () {
        var schedule = set(this, id),
            on = schedule.on; // If this node shared a dispatch with the previous node,
        // just assign the updated shared dispatch and we’re done!
        // Otherwise, copy-on-write.

        if (on !== on0) {
          on1 = (on0 = on).copy();

          on1._.cancel.push(cancel);

          on1._.interrupt.push(cancel);

          on1._.end.push(end);
        }

        schedule.on = on1;
      }); // The selection was empty, resolve end immediately

      if (size === 0) resolve();
    });
  }

  var id = 0;
  function Transition(groups, parents, name, id) {
    this._groups = groups;
    this._parents = parents;
    this._name = name;
    this._id = id;
  }
  function newId() {
    return ++id;
  }
  var selection_prototype = selection.prototype;
  Transition.prototype = _defineProperty({
    constructor: Transition,
    select: transition_select,
    selectAll: transition_selectAll,
    selectChild: selection_prototype.selectChild,
    selectChildren: selection_prototype.selectChildren,
    filter: transition_filter,
    merge: transition_merge,
    selection: transition_selection,
    transition: transition_transition,
    call: selection_prototype.call,
    nodes: selection_prototype.nodes,
    node: selection_prototype.node,
    size: selection_prototype.size,
    empty: selection_prototype.empty,
    each: selection_prototype.each,
    on: transition_on,
    attr: transition_attr,
    attrTween: transition_attrTween,
    style: transition_style,
    styleTween: transition_styleTween,
    text: transition_text,
    textTween: transition_textTween,
    remove: transition_remove,
    tween: transition_tween,
    delay: transition_delay,
    duration: transition_duration,
    ease: transition_ease,
    easeVarying: transition_easeVarying,
    end: transition_end
  }, Symbol.iterator, selection_prototype[Symbol.iterator]);

  var linear$1 = function linear(t) {
    return +t;
  };

  function cubicIn(t) {
    return t * t * t;
  }
  function cubicOut(t) {
    return --t * t * t + 1;
  }
  function cubicInOut(t) {
    return ((t *= 2) <= 1 ? t * t * t : (t -= 2) * t * t + 2) / 2;
  }

  var defaultTiming = {
    time: null,
    // Set on use.
    delay: 0,
    duration: 250,
    ease: cubicInOut
  };

  function inherit(node, id) {
    var timing;

    while (!(timing = node.__transition) || !(timing = timing[id])) {
      if (!(node = node.parentNode)) {
        throw new Error("transition ".concat(id, " not found"));
      }
    }

    return timing;
  }

  function selection_transition (name) {
    var id, timing;

    if (name instanceof Transition) {
      id = name._id, name = name._name;
    } else {
      id = newId(), (timing = defaultTiming).time = now(), name = name == null ? null : name + "";
    }

    for (var groups = this._groups, m = groups.length, j = 0; j < m; ++j) {
      for (var group = groups[j], n = group.length, node, i = 0; i < n; ++i) {
        if (node = group[i]) {
          schedule(node, name, id, i, group, timing || inherit(node, id));
        }
      }
    }

    return new Transition(groups, this._parents, name, id);
  }

  selection.prototype.interrupt = selection_interrupt;
  selection.prototype.transition = selection_transition;

  var pi$1 = Math.PI,
      tau$1 = 2 * pi$1,
      epsilon$1 = 1e-6,
      tauEpsilon = tau$1 - epsilon$1;

  function Path() {
    this._x0 = this._y0 = // start of current subpath
    this._x1 = this._y1 = null; // end of current subpath

    this._ = "";
  }

  function path() {
    return new Path();
  }

  Path.prototype = path.prototype = {
    constructor: Path,
    moveTo: function moveTo(x, y) {
      this._ += "M" + (this._x0 = this._x1 = +x) + "," + (this._y0 = this._y1 = +y);
    },
    closePath: function closePath() {
      if (this._x1 !== null) {
        this._x1 = this._x0, this._y1 = this._y0;
        this._ += "Z";
      }
    },
    lineTo: function lineTo(x, y) {
      this._ += "L" + (this._x1 = +x) + "," + (this._y1 = +y);
    },
    quadraticCurveTo: function quadraticCurveTo(x1, y1, x, y) {
      this._ += "Q" + +x1 + "," + +y1 + "," + (this._x1 = +x) + "," + (this._y1 = +y);
    },
    bezierCurveTo: function bezierCurveTo(x1, y1, x2, y2, x, y) {
      this._ += "C" + +x1 + "," + +y1 + "," + +x2 + "," + +y2 + "," + (this._x1 = +x) + "," + (this._y1 = +y);
    },
    arcTo: function arcTo(x1, y1, x2, y2, r) {
      x1 = +x1, y1 = +y1, x2 = +x2, y2 = +y2, r = +r;
      var x0 = this._x1,
          y0 = this._y1,
          x21 = x2 - x1,
          y21 = y2 - y1,
          x01 = x0 - x1,
          y01 = y0 - y1,
          l01_2 = x01 * x01 + y01 * y01; // Is the radius negative? Error.

      if (r < 0) throw new Error("negative radius: " + r); // Is this path empty? Move to (x1,y1).

      if (this._x1 === null) {
        this._ += "M" + (this._x1 = x1) + "," + (this._y1 = y1);
      } // Or, is (x1,y1) coincident with (x0,y0)? Do nothing.
      else if (!(l01_2 > epsilon$1)) ; // Or, are (x0,y0), (x1,y1) and (x2,y2) collinear?
      // Equivalently, is (x1,y1) coincident with (x2,y2)?
      // Or, is the radius zero? Line to (x1,y1).
      else if (!(Math.abs(y01 * x21 - y21 * x01) > epsilon$1) || !r) {
        this._ += "L" + (this._x1 = x1) + "," + (this._y1 = y1);
      } // Otherwise, draw an arc!
      else {
        var x20 = x2 - x0,
            y20 = y2 - y0,
            l21_2 = x21 * x21 + y21 * y21,
            l20_2 = x20 * x20 + y20 * y20,
            l21 = Math.sqrt(l21_2),
            l01 = Math.sqrt(l01_2),
            l = r * Math.tan((pi$1 - Math.acos((l21_2 + l01_2 - l20_2) / (2 * l21 * l01))) / 2),
            t01 = l / l01,
            t21 = l / l21; // If the start tangent is not coincident with (x0,y0), line to.

        if (Math.abs(t01 - 1) > epsilon$1) {
          this._ += "L" + (x1 + t01 * x01) + "," + (y1 + t01 * y01);
        }

        this._ += "A" + r + "," + r + ",0,0," + +(y01 * x20 > x01 * y20) + "," + (this._x1 = x1 + t21 * x21) + "," + (this._y1 = y1 + t21 * y21);
      }
    },
    arc: function arc(x, y, r, a0, a1, ccw) {
      x = +x, y = +y, r = +r, ccw = !!ccw;
      var dx = r * Math.cos(a0),
          dy = r * Math.sin(a0),
          x0 = x + dx,
          y0 = y + dy,
          cw = 1 ^ ccw,
          da = ccw ? a0 - a1 : a1 - a0; // Is the radius negative? Error.

      if (r < 0) throw new Error("negative radius: " + r); // Is this path empty? Move to (x0,y0).

      if (this._x1 === null) {
        this._ += "M" + x0 + "," + y0;
      } // Or, is (x0,y0) not coincident with the previous point? Line to (x0,y0).
      else if (Math.abs(this._x1 - x0) > epsilon$1 || Math.abs(this._y1 - y0) > epsilon$1) {
        this._ += "L" + x0 + "," + y0;
      } // Is this arc empty? We’re done.


      if (!r) return; // Does the angle go the wrong way? Flip the direction.

      if (da < 0) da = da % tau$1 + tau$1; // Is this a complete circle? Draw two arcs to complete the circle.

      if (da > tauEpsilon) {
        this._ += "A" + r + "," + r + ",0,1," + cw + "," + (x - dx) + "," + (y - dy) + "A" + r + "," + r + ",0,1," + cw + "," + (this._x1 = x0) + "," + (this._y1 = y0);
      } // Is this arc non-empty? Draw an arc!
      else if (da > epsilon$1) {
        this._ += "A" + r + "," + r + ",0," + +(da >= pi$1) + "," + cw + "," + (this._x1 = x + r * Math.cos(a1)) + "," + (this._y1 = y + r * Math.sin(a1));
      }
    },
    rect: function rect(x, y, w, h) {
      this._ += "M" + (this._x0 = this._x1 = +x) + "," + (this._y0 = this._y1 = +y) + "h" + +w + "v" + +h + "h" + -w + "Z";
    },
    toString: function toString() {
      return this._;
    }
  };

  var array$1 = Array.prototype;
  var slice = array$1.slice;

  function ascending (a, b) {
    return a - b;
  }

  function area (ring) {
    var i = 0,
        n = ring.length,
        area = ring[n - 1][1] * ring[0][0] - ring[n - 1][0] * ring[0][1];

    while (++i < n) {
      area += ring[i - 1][1] * ring[i][0] - ring[i - 1][0] * ring[i][1];
    }

    return area;
  }

  var constant$1 = (function (x) {
    return function () {
      return x;
    };
  });

  function contains (ring, hole) {
    var i = -1,
        n = hole.length,
        c;

    while (++i < n) {
      if (c = ringContains(ring, hole[i])) return c;
    }

    return 0;
  }

  function ringContains(ring, point) {
    var x = point[0],
        y = point[1],
        contains = -1;

    for (var i = 0, n = ring.length, j = n - 1; i < n; j = i++) {
      var pi = ring[i],
          xi = pi[0],
          yi = pi[1],
          pj = ring[j],
          xj = pj[0],
          yj = pj[1];
      if (segmentContains(pi, pj, point)) return 0;
      if (yi > y !== yj > y && x < (xj - xi) * (y - yi) / (yj - yi) + xi) contains = -contains;
    }

    return contains;
  }

  function segmentContains(a, b, c) {
    var i;
    return collinear(a, b, c) && within(a[i = +(a[0] === b[0])], c[i], b[i]);
  }

  function collinear(a, b, c) {
    return (b[0] - a[0]) * (c[1] - a[1]) === (c[0] - a[0]) * (b[1] - a[1]);
  }

  function within(p, q, r) {
    return p <= q && q <= r || r <= q && q <= p;
  }

  function noop$1 () {}

  var cases = [[], [[[1.0, 1.5], [0.5, 1.0]]], [[[1.5, 1.0], [1.0, 1.5]]], [[[1.5, 1.0], [0.5, 1.0]]], [[[1.0, 0.5], [1.5, 1.0]]], [[[1.0, 1.5], [0.5, 1.0]], [[1.0, 0.5], [1.5, 1.0]]], [[[1.0, 0.5], [1.0, 1.5]]], [[[1.0, 0.5], [0.5, 1.0]]], [[[0.5, 1.0], [1.0, 0.5]]], [[[1.0, 1.5], [1.0, 0.5]]], [[[0.5, 1.0], [1.0, 0.5]], [[1.5, 1.0], [1.0, 1.5]]], [[[1.5, 1.0], [1.0, 0.5]]], [[[0.5, 1.0], [1.5, 1.0]]], [[[1.0, 1.5], [1.5, 1.0]]], [[[0.5, 1.0], [1.0, 1.5]]], []];
  function contours () {
    var dx = 1,
        dy = 1,
        threshold = thresholdSturges,
        smooth = smoothLinear;

    function contours(values) {
      var tz = threshold(values); // Convert number of thresholds into uniform thresholds.

      if (!Array.isArray(tz)) {
        var e = extent(values),
            ts = tickStep(e[0], e[1], tz);
        tz = ticks(Math.floor(e[0] / ts) * ts, Math.floor(e[1] / ts - 1) * ts, tz);
      } else {
        tz = tz.slice().sort(ascending);
      }

      return tz.map(function (value) {
        return contour(values, value);
      });
    } // Accumulate, smooth contour rings, assign holes to exterior rings.
    // Based on https://github.com/mbostock/shapefile/blob/v0.6.2/shp/polygon.js


    function contour(values, value) {
      var polygons = [],
          holes = [];
      isorings(values, value, function (ring) {
        smooth(ring, values, value);
        if (area(ring) > 0) polygons.push([ring]);else holes.push(ring);
      });
      holes.forEach(function (hole) {
        for (var i = 0, n = polygons.length, polygon; i < n; ++i) {
          if (contains((polygon = polygons[i])[0], hole) !== -1) {
            polygon.push(hole);
            return;
          }
        }
      });
      return {
        type: "MultiPolygon",
        value: value,
        coordinates: polygons
      };
    } // Marching squares with isolines stitched into rings.
    // Based on https://github.com/topojson/topojson-client/blob/v3.0.0/src/stitch.js


    function isorings(values, value, callback) {
      var fragmentByStart = new Array(),
          fragmentByEnd = new Array(),
          x,
          y,
          t0,
          t1,
          t2,
          t3; // Special case for the first row (y = -1, t2 = t3 = 0).

      x = y = -1;
      t1 = values[0] >= value;
      cases[t1 << 1].forEach(stitch);

      while (++x < dx - 1) {
        t0 = t1, t1 = values[x + 1] >= value;
        cases[t0 | t1 << 1].forEach(stitch);
      }

      cases[t1 << 0].forEach(stitch); // General case for the intermediate rows.

      while (++y < dy - 1) {
        x = -1;
        t1 = values[y * dx + dx] >= value;
        t2 = values[y * dx] >= value;
        cases[t1 << 1 | t2 << 2].forEach(stitch);

        while (++x < dx - 1) {
          t0 = t1, t1 = values[y * dx + dx + x + 1] >= value;
          t3 = t2, t2 = values[y * dx + x + 1] >= value;
          cases[t0 | t1 << 1 | t2 << 2 | t3 << 3].forEach(stitch);
        }

        cases[t1 | t2 << 3].forEach(stitch);
      } // Special case for the last row (y = dy - 1, t0 = t1 = 0).


      x = -1;
      t2 = values[y * dx] >= value;
      cases[t2 << 2].forEach(stitch);

      while (++x < dx - 1) {
        t3 = t2, t2 = values[y * dx + x + 1] >= value;
        cases[t2 << 2 | t3 << 3].forEach(stitch);
      }

      cases[t2 << 3].forEach(stitch);

      function stitch(line) {
        var start = [line[0][0] + x, line[0][1] + y],
            end = [line[1][0] + x, line[1][1] + y],
            startIndex = index(start),
            endIndex = index(end),
            f,
            g;

        if (f = fragmentByEnd[startIndex]) {
          if (g = fragmentByStart[endIndex]) {
            delete fragmentByEnd[f.end];
            delete fragmentByStart[g.start];

            if (f === g) {
              f.ring.push(end);
              callback(f.ring);
            } else {
              fragmentByStart[f.start] = fragmentByEnd[g.end] = {
                start: f.start,
                end: g.end,
                ring: f.ring.concat(g.ring)
              };
            }
          } else {
            delete fragmentByEnd[f.end];
            f.ring.push(end);
            fragmentByEnd[f.end = endIndex] = f;
          }
        } else if (f = fragmentByStart[endIndex]) {
          if (g = fragmentByEnd[startIndex]) {
            delete fragmentByStart[f.start];
            delete fragmentByEnd[g.end];

            if (f === g) {
              f.ring.push(end);
              callback(f.ring);
            } else {
              fragmentByStart[g.start] = fragmentByEnd[f.end] = {
                start: g.start,
                end: f.end,
                ring: g.ring.concat(f.ring)
              };
            }
          } else {
            delete fragmentByStart[f.start];
            f.ring.unshift(start);
            fragmentByStart[f.start = startIndex] = f;
          }
        } else {
          fragmentByStart[startIndex] = fragmentByEnd[endIndex] = {
            start: startIndex,
            end: endIndex,
            ring: [start, end]
          };
        }
      }
    }

    function index(point) {
      return point[0] * 2 + point[1] * (dx + 1) * 4;
    }

    function smoothLinear(ring, values, value) {
      ring.forEach(function (point) {
        var x = point[0],
            y = point[1],
            xt = x | 0,
            yt = y | 0,
            v0,
            v1 = values[yt * dx + xt];

        if (x > 0 && x < dx && xt === x) {
          v0 = values[yt * dx + xt - 1];
          point[0] = x + (value - v0) / (v1 - v0) - 0.5;
        }

        if (y > 0 && y < dy && yt === y) {
          v0 = values[(yt - 1) * dx + xt];
          point[1] = y + (value - v0) / (v1 - v0) - 0.5;
        }
      });
    }

    contours.contour = contour;

    contours.size = function (_) {
      if (!arguments.length) return [dx, dy];

      var _0 = Math.floor(_[0]),
          _1 = Math.floor(_[1]);

      if (!(_0 >= 0 && _1 >= 0)) throw new Error("invalid size");
      return dx = _0, dy = _1, contours;
    };

    contours.thresholds = function (_) {
      return arguments.length ? (threshold = typeof _ === "function" ? _ : Array.isArray(_) ? constant$1(slice.call(_)) : constant$1(_), contours) : threshold;
    };

    contours.smooth = function (_) {
      return arguments.length ? (smooth = _ ? smoothLinear : noop$1, contours) : smooth === smoothLinear;
    };

    return contours;
  }

  function formatDecimal (x) {
    return Math.abs(x = Math.round(x)) >= 1e21 ? x.toLocaleString("en").replace(/,/g, "") : x.toString(10);
  } // Computes the decimal coefficient and exponent of the specified number x with
  // significant digits p, where x is positive and p is in [1, 21] or undefined.
  // For example, formatDecimalParts(1.23) returns ["123", 0].

  function formatDecimalParts(x, p) {
    if ((i = (x = p ? x.toExponential(p - 1) : x.toExponential()).indexOf("e")) < 0) return null; // NaN, ±Infinity

    var i,
        coefficient = x.slice(0, i); // The string returned by toExponential either has the form \d\.\d+e[-+]\d+
    // (e.g., 1.2e+3) or the form \de[-+]\d+ (e.g., 1e+3).

    return [coefficient.length > 1 ? coefficient[0] + coefficient.slice(2) : coefficient, +x.slice(i + 1)];
  }

  function exponent (x) {
    return x = formatDecimalParts(Math.abs(x)), x ? x[1] : NaN;
  }

  function formatGroup (grouping, thousands) {
    return function (value, width) {
      var i = value.length,
          t = [],
          j = 0,
          g = grouping[0],
          length = 0;

      while (i > 0 && g > 0) {
        if (length + g + 1 > width) g = Math.max(1, width - length);
        t.push(value.substring(i -= g, i + g));
        if ((length += g + 1) > width) break;
        g = grouping[j = (j + 1) % grouping.length];
      }

      return t.reverse().join(thousands);
    };
  }

  function formatNumerals (numerals) {
    return function (value) {
      return value.replace(/[0-9]/g, function (i) {
        return numerals[+i];
      });
    };
  }

  // [[fill]align][sign][symbol][0][width][,][.precision][~][type]
  var re = /^(?:(.)?([<>=^]))?([+\-( ])?([$#])?(0)?(\d+)?(,)?(\.\d+)?(~)?([a-z%])?$/i;
  function formatSpecifier(specifier) {
    if (!(match = re.exec(specifier))) throw new Error("invalid format: " + specifier);
    var match;
    return new FormatSpecifier({
      fill: match[1],
      align: match[2],
      sign: match[3],
      symbol: match[4],
      zero: match[5],
      width: match[6],
      comma: match[7],
      precision: match[8] && match[8].slice(1),
      trim: match[9],
      type: match[10]
    });
  }
  formatSpecifier.prototype = FormatSpecifier.prototype; // instanceof

  function FormatSpecifier(specifier) {
    this.fill = specifier.fill === undefined ? " " : specifier.fill + "";
    this.align = specifier.align === undefined ? ">" : specifier.align + "";
    this.sign = specifier.sign === undefined ? "-" : specifier.sign + "";
    this.symbol = specifier.symbol === undefined ? "" : specifier.symbol + "";
    this.zero = !!specifier.zero;
    this.width = specifier.width === undefined ? undefined : +specifier.width;
    this.comma = !!specifier.comma;
    this.precision = specifier.precision === undefined ? undefined : +specifier.precision;
    this.trim = !!specifier.trim;
    this.type = specifier.type === undefined ? "" : specifier.type + "";
  }

  FormatSpecifier.prototype.toString = function () {
    return this.fill + this.align + this.sign + this.symbol + (this.zero ? "0" : "") + (this.width === undefined ? "" : Math.max(1, this.width | 0)) + (this.comma ? "," : "") + (this.precision === undefined ? "" : "." + Math.max(0, this.precision | 0)) + (this.trim ? "~" : "") + this.type;
  };

  // Trims insignificant zeros, e.g., replaces 1.2000k with 1.2k.
  function formatTrim (s) {
    out: for (var n = s.length, i = 1, i0 = -1, i1; i < n; ++i) {
      switch (s[i]) {
        case ".":
          i0 = i1 = i;
          break;

        case "0":
          if (i0 === 0) i0 = i;
          i1 = i;
          break;

        default:
          if (!+s[i]) break out;
          if (i0 > 0) i0 = 0;
          break;
      }
    }

    return i0 > 0 ? s.slice(0, i0) + s.slice(i1 + 1) : s;
  }

  var prefixExponent;
  function formatPrefixAuto (x, p) {
    var d = formatDecimalParts(x, p);
    if (!d) return x + "";
    var coefficient = d[0],
        exponent = d[1],
        i = exponent - (prefixExponent = Math.max(-8, Math.min(8, Math.floor(exponent / 3))) * 3) + 1,
        n = coefficient.length;
    return i === n ? coefficient : i > n ? coefficient + new Array(i - n + 1).join("0") : i > 0 ? coefficient.slice(0, i) + "." + coefficient.slice(i) : "0." + new Array(1 - i).join("0") + formatDecimalParts(x, Math.max(0, p + i - 1))[0]; // less than 1y!
  }

  function formatRounded (x, p) {
    var d = formatDecimalParts(x, p);
    if (!d) return x + "";
    var coefficient = d[0],
        exponent = d[1];
    return exponent < 0 ? "0." + new Array(-exponent).join("0") + coefficient : coefficient.length > exponent + 1 ? coefficient.slice(0, exponent + 1) + "." + coefficient.slice(exponent + 1) : coefficient + new Array(exponent - coefficient.length + 2).join("0");
  }

  var formatTypes = {
    "%": function _(x, p) {
      return (x * 100).toFixed(p);
    },
    "b": function b(x) {
      return Math.round(x).toString(2);
    },
    "c": function c(x) {
      return x + "";
    },
    "d": formatDecimal,
    "e": function e(x, p) {
      return x.toExponential(p);
    },
    "f": function f(x, p) {
      return x.toFixed(p);
    },
    "g": function g(x, p) {
      return x.toPrecision(p);
    },
    "o": function o(x) {
      return Math.round(x).toString(8);
    },
    "p": function p(x, _p) {
      return formatRounded(x * 100, _p);
    },
    "r": formatRounded,
    "s": formatPrefixAuto,
    "X": function X(x) {
      return Math.round(x).toString(16).toUpperCase();
    },
    "x": function x(_x) {
      return Math.round(_x).toString(16);
    }
  };

  function identity$3 (x) {
    return x;
  }

  var map = Array.prototype.map,
      prefixes = ["y", "z", "a", "f", "p", "n", "µ", "m", "", "k", "M", "G", "T", "P", "E", "Z", "Y"];
  function formatLocale (locale) {
    var group = locale.grouping === undefined || locale.thousands === undefined ? identity$3 : formatGroup(map.call(locale.grouping, Number), locale.thousands + ""),
        currencyPrefix = locale.currency === undefined ? "" : locale.currency[0] + "",
        currencySuffix = locale.currency === undefined ? "" : locale.currency[1] + "",
        decimal = locale.decimal === undefined ? "." : locale.decimal + "",
        numerals = locale.numerals === undefined ? identity$3 : formatNumerals(map.call(locale.numerals, String)),
        percent = locale.percent === undefined ? "%" : locale.percent + "",
        minus = locale.minus === undefined ? "−" : locale.minus + "",
        nan = locale.nan === undefined ? "NaN" : locale.nan + "";

    function newFormat(specifier) {
      specifier = formatSpecifier(specifier);
      var fill = specifier.fill,
          align = specifier.align,
          sign = specifier.sign,
          symbol = specifier.symbol,
          zero = specifier.zero,
          width = specifier.width,
          comma = specifier.comma,
          precision = specifier.precision,
          trim = specifier.trim,
          type = specifier.type; // The "n" type is an alias for ",g".

      if (type === "n") comma = true, type = "g"; // The "" type, and any invalid type, is an alias for ".12~g".
      else if (!formatTypes[type]) precision === undefined && (precision = 12), trim = true, type = "g"; // If zero fill is specified, padding goes after sign and before digits.

      if (zero || fill === "0" && align === "=") zero = true, fill = "0", align = "="; // Compute the prefix and suffix.
      // For SI-prefix, the suffix is lazily computed.

      var prefix = symbol === "$" ? currencyPrefix : symbol === "#" && /[boxX]/.test(type) ? "0" + type.toLowerCase() : "",
          suffix = symbol === "$" ? currencySuffix : /[%p]/.test(type) ? percent : ""; // What format function should we use?
      // Is this an integer type?
      // Can this type generate exponential notation?

      var formatType = formatTypes[type],
          maybeSuffix = /[defgprs%]/.test(type); // Set the default precision if not specified,
      // or clamp the specified precision to the supported range.
      // For significant precision, it must be in [1, 21].
      // For fixed precision, it must be in [0, 20].

      precision = precision === undefined ? 6 : /[gprs]/.test(type) ? Math.max(1, Math.min(21, precision)) : Math.max(0, Math.min(20, precision));

      function format(value) {
        var valuePrefix = prefix,
            valueSuffix = suffix,
            i,
            n,
            c;

        if (type === "c") {
          valueSuffix = formatType(value) + valueSuffix;
          value = "";
        } else {
          value = +value; // Determine the sign. -0 is not less than 0, but 1 / -0 is!

          var valueNegative = value < 0 || 1 / value < 0; // Perform the initial formatting.

          value = isNaN(value) ? nan : formatType(Math.abs(value), precision); // Trim insignificant zeros.

          if (trim) value = formatTrim(value); // If a negative value rounds to zero after formatting, and no explicit positive sign is requested, hide the sign.

          if (valueNegative && +value === 0 && sign !== "+") valueNegative = false; // Compute the prefix and suffix.

          valuePrefix = (valueNegative ? sign === "(" ? sign : minus : sign === "-" || sign === "(" ? "" : sign) + valuePrefix;
          valueSuffix = (type === "s" ? prefixes[8 + prefixExponent / 3] : "") + valueSuffix + (valueNegative && sign === "(" ? ")" : ""); // Break the formatted value into the integer “value” part that can be
          // grouped, and fractional or exponential “suffix” part that is not.

          if (maybeSuffix) {
            i = -1, n = value.length;

            while (++i < n) {
              if (c = value.charCodeAt(i), 48 > c || c > 57) {
                valueSuffix = (c === 46 ? decimal + value.slice(i + 1) : value.slice(i)) + valueSuffix;
                value = value.slice(0, i);
                break;
              }
            }
          }
        } // If the fill character is not "0", grouping is applied before padding.


        if (comma && !zero) value = group(value, Infinity); // Compute the padding.

        var length = valuePrefix.length + value.length + valueSuffix.length,
            padding = length < width ? new Array(width - length + 1).join(fill) : ""; // If the fill character is "0", grouping is applied after padding.

        if (comma && zero) value = group(padding + value, padding.length ? width - valueSuffix.length : Infinity), padding = ""; // Reconstruct the final output based on the desired alignment.

        switch (align) {
          case "<":
            value = valuePrefix + value + valueSuffix + padding;
            break;

          case "=":
            value = valuePrefix + padding + value + valueSuffix;
            break;

          case "^":
            value = padding.slice(0, length = padding.length >> 1) + valuePrefix + value + valueSuffix + padding.slice(length);
            break;

          default:
            value = padding + valuePrefix + value + valueSuffix;
            break;
        }

        return numerals(value);
      }

      format.toString = function () {
        return specifier + "";
      };

      return format;
    }

    function formatPrefix(specifier, value) {
      var f = newFormat((specifier = formatSpecifier(specifier), specifier.type = "f", specifier)),
          e = Math.max(-8, Math.min(8, Math.floor(exponent(value) / 3))) * 3,
          k = Math.pow(10, -e),
          prefix = prefixes[8 + e / 3];
      return function (value) {
        return f(k * value) + prefix;
      };
    }

    return {
      format: newFormat,
      formatPrefix: formatPrefix
    };
  }

  var locale;
  var format;
  var formatPrefix;
  defaultLocale({
    thousands: ",",
    grouping: [3],
    currency: ["$", ""]
  });
  function defaultLocale(definition) {
    locale = formatLocale(definition);
    format = locale.format;
    formatPrefix = locale.formatPrefix;
    return locale;
  }

  function precisionFixed (step) {
    return Math.max(0, -exponent(Math.abs(step)));
  }

  function precisionPrefix (step, value) {
    return Math.max(0, Math.max(-8, Math.min(8, Math.floor(exponent(value) / 3))) * 3 - exponent(Math.abs(step)));
  }

  function precisionRound (step, max) {
    step = Math.abs(step), max = Math.abs(max) - step;
    return Math.max(0, exponent(max) - exponent(step)) + 1;
  }

  var epsilon = 1e-6;
  var pi = Math.PI;
  var tau = pi * 2;
  var degrees = 180 / pi;
  var radians = pi / 180;
  var abs = Math.abs;
  var cos = Math.cos;
  var sin = Math.sin;
  var sqrt = Math.sqrt;

  function noop() {}

  function streamGeometry(geometry, stream) {
    if (geometry && streamGeometryType.hasOwnProperty(geometry.type)) {
      streamGeometryType[geometry.type](geometry, stream);
    }
  }

  var streamObjectType = {
    Feature: function Feature(object, stream) {
      streamGeometry(object.geometry, stream);
    },
    FeatureCollection: function FeatureCollection(object, stream) {
      var features = object.features,
          i = -1,
          n = features.length;

      while (++i < n) {
        streamGeometry(features[i].geometry, stream);
      }
    }
  };
  var streamGeometryType = {
    Sphere: function Sphere(object, stream) {
      stream.sphere();
    },
    Point: function Point(object, stream) {
      object = object.coordinates;
      stream.point(object[0], object[1], object[2]);
    },
    MultiPoint: function MultiPoint(object, stream) {
      var coordinates = object.coordinates,
          i = -1,
          n = coordinates.length;

      while (++i < n) {
        object = coordinates[i], stream.point(object[0], object[1], object[2]);
      }
    },
    LineString: function LineString(object, stream) {
      streamLine(object.coordinates, stream, 0);
    },
    MultiLineString: function MultiLineString(object, stream) {
      var coordinates = object.coordinates,
          i = -1,
          n = coordinates.length;

      while (++i < n) {
        streamLine(coordinates[i], stream, 0);
      }
    },
    Polygon: function Polygon(object, stream) {
      streamPolygon(object.coordinates, stream);
    },
    MultiPolygon: function MultiPolygon(object, stream) {
      var coordinates = object.coordinates,
          i = -1,
          n = coordinates.length;

      while (++i < n) {
        streamPolygon(coordinates[i], stream);
      }
    },
    GeometryCollection: function GeometryCollection(object, stream) {
      var geometries = object.geometries,
          i = -1,
          n = geometries.length;

      while (++i < n) {
        streamGeometry(geometries[i], stream);
      }
    }
  };

  function streamLine(coordinates, stream, closed) {
    var i = -1,
        n = coordinates.length - closed,
        coordinate;
    stream.lineStart();

    while (++i < n) {
      coordinate = coordinates[i], stream.point(coordinate[0], coordinate[1], coordinate[2]);
    }

    stream.lineEnd();
  }

  function streamPolygon(coordinates, stream) {
    var i = -1,
        n = coordinates.length;
    stream.polygonStart();

    while (++i < n) {
      streamLine(coordinates[i], stream, 1);
    }

    stream.polygonEnd();
  }

  function geoStream (object, stream) {
    if (object && streamObjectType.hasOwnProperty(object.type)) {
      streamObjectType[object.type](object, stream);
    } else {
      streamGeometry(object, stream);
    }
  }

  function clipBuffer () {
    var lines = [],
        line;
    return {
      point: function point(x, y, m) {
        line.push([x, y, m]);
      },
      lineStart: function lineStart() {
        lines.push(line = []);
      },
      lineEnd: noop,
      rejoin: function rejoin() {
        if (lines.length > 1) lines.push(lines.pop().concat(lines.shift()));
      },
      result: function result() {
        var result = lines;
        lines = [];
        line = null;
        return result;
      }
    };
  }

  function pointEqual (a, b) {
    return abs(a[0] - b[0]) < epsilon && abs(a[1] - b[1]) < epsilon;
  }

  function Intersection(point, points, other, entry) {
    this.x = point;
    this.z = points;
    this.o = other; // another intersection

    this.e = entry; // is an entry?

    this.v = false; // visited

    this.n = this.p = null; // next & previous
  } // A generalized polygon clipping algorithm: given a polygon that has been cut
  // into its visible line segments, and rejoins the segments by interpolating
  // along the clip edge.


  function clipRejoin (segments, compareIntersection, startInside, interpolate, stream) {
    var subject = [],
        clip = [],
        i,
        n;
    segments.forEach(function (segment) {
      if ((n = segment.length - 1) <= 0) return;
      var n,
          p0 = segment[0],
          p1 = segment[n],
          x;

      if (pointEqual(p0, p1)) {
        if (!p0[2] && !p1[2]) {
          stream.lineStart();

          for (i = 0; i < n; ++i) {
            stream.point((p0 = segment[i])[0], p0[1]);
          }

          stream.lineEnd();
          return;
        } // handle degenerate cases by moving the point


        p1[0] += 2 * epsilon;
      }

      subject.push(x = new Intersection(p0, segment, null, true));
      clip.push(x.o = new Intersection(p0, null, x, false));
      subject.push(x = new Intersection(p1, segment, null, false));
      clip.push(x.o = new Intersection(p1, null, x, true));
    });
    if (!subject.length) return;
    clip.sort(compareIntersection);
    link(subject);
    link(clip);

    for (i = 0, n = clip.length; i < n; ++i) {
      clip[i].e = startInside = !startInside;
    }

    var start = subject[0],
        points,
        point;

    while (1) {
      // Find first unvisited intersection.
      var current = start,
          isSubject = true;

      while (current.v) {
        if ((current = current.n) === start) return;
      }

      points = current.z;
      stream.lineStart();

      do {
        current.v = current.o.v = true;

        if (current.e) {
          if (isSubject) {
            for (i = 0, n = points.length; i < n; ++i) {
              stream.point((point = points[i])[0], point[1]);
            }
          } else {
            interpolate(current.x, current.n.x, 1, stream);
          }

          current = current.n;
        } else {
          if (isSubject) {
            points = current.p.z;

            for (i = points.length - 1; i >= 0; --i) {
              stream.point((point = points[i])[0], point[1]);
            }
          } else {
            interpolate(current.x, current.p.x, -1, stream);
          }

          current = current.p;
        }

        current = current.o;
        points = current.z;
        isSubject = !isSubject;
      } while (!current.v);

      stream.lineEnd();
    }
  }

  function link(array) {
    if (!(n = array.length)) return;
    var n,
        i = 0,
        a = array[0],
        b;

    while (++i < n) {
      a.n = b = array[i];
      b.p = a;
      a = b;
    }

    a.n = b = array[0];
    b.p = a;
  }

  function clipLine (a, b, x0, y0, x1, y1) {
    var ax = a[0],
        ay = a[1],
        bx = b[0],
        by = b[1],
        t0 = 0,
        t1 = 1,
        dx = bx - ax,
        dy = by - ay,
        r;
    r = x0 - ax;
    if (!dx && r > 0) return;
    r /= dx;

    if (dx < 0) {
      if (r < t0) return;
      if (r < t1) t1 = r;
    } else if (dx > 0) {
      if (r > t1) return;
      if (r > t0) t0 = r;
    }

    r = x1 - ax;
    if (!dx && r < 0) return;
    r /= dx;

    if (dx < 0) {
      if (r > t1) return;
      if (r > t0) t0 = r;
    } else if (dx > 0) {
      if (r < t0) return;
      if (r < t1) t1 = r;
    }

    r = y0 - ay;
    if (!dy && r > 0) return;
    r /= dy;

    if (dy < 0) {
      if (r < t0) return;
      if (r < t1) t1 = r;
    } else if (dy > 0) {
      if (r > t1) return;
      if (r > t0) t0 = r;
    }

    r = y1 - ay;
    if (!dy && r < 0) return;
    r /= dy;

    if (dy < 0) {
      if (r > t1) return;
      if (r > t0) t0 = r;
    } else if (dy > 0) {
      if (r < t0) return;
      if (r < t1) t1 = r;
    }

    if (t0 > 0) a[0] = ax + t0 * dx, a[1] = ay + t0 * dy;
    if (t1 < 1) b[0] = ax + t1 * dx, b[1] = ay + t1 * dy;
    return true;
  }

  var clipMax = 1e9,
      clipMin = -clipMax; // TODO Use d3-polygon’s polygonContains here for the ring check?
  // TODO Eliminate duplicate buffering in clipBuffer and polygon.push?

  function clipRectangle(x0, y0, x1, y1) {
    function visible(x, y) {
      return x0 <= x && x <= x1 && y0 <= y && y <= y1;
    }

    function interpolate(from, to, direction, stream) {
      var a = 0,
          a1 = 0;

      if (from == null || (a = corner(from, direction)) !== (a1 = corner(to, direction)) || comparePoint(from, to) < 0 ^ direction > 0) {
        do {
          stream.point(a === 0 || a === 3 ? x0 : x1, a > 1 ? y1 : y0);
        } while ((a = (a + direction + 4) % 4) !== a1);
      } else {
        stream.point(to[0], to[1]);
      }
    }

    function corner(p, direction) {
      return abs(p[0] - x0) < epsilon ? direction > 0 ? 0 : 3 : abs(p[0] - x1) < epsilon ? direction > 0 ? 2 : 1 : abs(p[1] - y0) < epsilon ? direction > 0 ? 1 : 0 : direction > 0 ? 3 : 2; // abs(p[1] - y1) < epsilon
    }

    function compareIntersection(a, b) {
      return comparePoint(a.x, b.x);
    }

    function comparePoint(a, b) {
      var ca = corner(a, 1),
          cb = corner(b, 1);
      return ca !== cb ? ca - cb : ca === 0 ? b[1] - a[1] : ca === 1 ? a[0] - b[0] : ca === 2 ? a[1] - b[1] : b[0] - a[0];
    }

    return function (stream) {
      var activeStream = stream,
          bufferStream = clipBuffer(),
          segments,
          polygon,
          ring,
          x__,
          y__,
          v__,
          // first point
      x_,
          y_,
          v_,
          // previous point
      first,
          clean;
      var clipStream = {
        point: point,
        lineStart: lineStart,
        lineEnd: lineEnd,
        polygonStart: polygonStart,
        polygonEnd: polygonEnd
      };

      function point(x, y) {
        if (visible(x, y)) activeStream.point(x, y);
      }

      function polygonInside() {
        var winding = 0;

        for (var i = 0, n = polygon.length; i < n; ++i) {
          for (var ring = polygon[i], j = 1, m = ring.length, point = ring[0], a0, a1, b0 = point[0], b1 = point[1]; j < m; ++j) {
            a0 = b0, a1 = b1, point = ring[j], b0 = point[0], b1 = point[1];

            if (a1 <= y1) {
              if (b1 > y1 && (b0 - a0) * (y1 - a1) > (b1 - a1) * (x0 - a0)) ++winding;
            } else {
              if (b1 <= y1 && (b0 - a0) * (y1 - a1) < (b1 - a1) * (x0 - a0)) --winding;
            }
          }
        }

        return winding;
      } // Buffer geometry within a polygon and then clip it en masse.


      function polygonStart() {
        activeStream = bufferStream, segments = [], polygon = [], clean = true;
      }

      function polygonEnd() {
        var startInside = polygonInside(),
            cleanInside = clean && startInside,
            visible = (segments = merge(segments)).length;

        if (cleanInside || visible) {
          stream.polygonStart();

          if (cleanInside) {
            stream.lineStart();
            interpolate(null, null, 1, stream);
            stream.lineEnd();
          }

          if (visible) {
            clipRejoin(segments, compareIntersection, startInside, interpolate, stream);
          }

          stream.polygonEnd();
        }

        activeStream = stream, segments = polygon = ring = null;
      }

      function lineStart() {
        clipStream.point = linePoint;
        if (polygon) polygon.push(ring = []);
        first = true;
        v_ = false;
        x_ = y_ = NaN;
      } // TODO rather than special-case polygons, simply handle them separately.
      // Ideally, coincident intersection points should be jittered to avoid
      // clipping issues.


      function lineEnd() {
        if (segments) {
          linePoint(x__, y__);
          if (v__ && v_) bufferStream.rejoin();
          segments.push(bufferStream.result());
        }

        clipStream.point = point;
        if (v_) activeStream.lineEnd();
      }

      function linePoint(x, y) {
        var v = visible(x, y);
        if (polygon) ring.push([x, y]);

        if (first) {
          x__ = x, y__ = y, v__ = v;
          first = false;

          if (v) {
            activeStream.lineStart();
            activeStream.point(x, y);
          }
        } else {
          if (v && v_) activeStream.point(x, y);else {
            var a = [x_ = Math.max(clipMin, Math.min(clipMax, x_)), y_ = Math.max(clipMin, Math.min(clipMax, y_))],
                b = [x = Math.max(clipMin, Math.min(clipMax, x)), y = Math.max(clipMin, Math.min(clipMax, y))];

            if (clipLine(a, b, x0, y0, x1, y1)) {
              if (!v_) {
                activeStream.lineStart();
                activeStream.point(a[0], a[1]);
              }

              activeStream.point(b[0], b[1]);
              if (!v) activeStream.lineEnd();
              clean = false;
            } else if (v) {
              activeStream.lineStart();
              activeStream.point(x, y);
              clean = false;
            }
          }
        }

        x_ = x, y_ = y, v_ = v;
      }

      return clipStream;
    };
  }

  var identity$2 = (function (x) {
    return x;
  });

  var areaSum = new Adder(),
      areaRingSum = new Adder(),
      x00$2,
      y00$2,
      x0$3,
      y0$3;
  var areaStream = {
    point: noop,
    lineStart: noop,
    lineEnd: noop,
    polygonStart: function polygonStart() {
      areaStream.lineStart = areaRingStart;
      areaStream.lineEnd = areaRingEnd;
    },
    polygonEnd: function polygonEnd() {
      areaStream.lineStart = areaStream.lineEnd = areaStream.point = noop;
      areaSum.add(abs(areaRingSum));
      areaRingSum = new Adder();
    },
    result: function result() {
      var area = areaSum / 2;
      areaSum = new Adder();
      return area;
    }
  };

  function areaRingStart() {
    areaStream.point = areaPointFirst;
  }

  function areaPointFirst(x, y) {
    areaStream.point = areaPoint;
    x00$2 = x0$3 = x, y00$2 = y0$3 = y;
  }

  function areaPoint(x, y) {
    areaRingSum.add(y0$3 * x - x0$3 * y);
    x0$3 = x, y0$3 = y;
  }

  function areaRingEnd() {
    areaPoint(x00$2, y00$2);
  }

  var pathArea = areaStream;

  var x0$2 = Infinity,
      y0$2 = x0$2,
      x1 = -x0$2,
      y1 = x1;
  var boundsStream = {
    point: boundsPoint,
    lineStart: noop,
    lineEnd: noop,
    polygonStart: noop,
    polygonEnd: noop,
    result: function result() {
      var bounds = [[x0$2, y0$2], [x1, y1]];
      x1 = y1 = -(y0$2 = x0$2 = Infinity);
      return bounds;
    }
  };

  function boundsPoint(x, y) {
    if (x < x0$2) x0$2 = x;
    if (x > x1) x1 = x;
    if (y < y0$2) y0$2 = y;
    if (y > y1) y1 = y;
  }

  var boundsStream$1 = boundsStream;

  var X0 = 0,
      Y0 = 0,
      Z0 = 0,
      X1 = 0,
      Y1 = 0,
      Z1 = 0,
      X2 = 0,
      Y2 = 0,
      Z2 = 0,
      x00$1,
      y00$1,
      x0$1,
      y0$1;
  var centroidStream = {
    point: centroidPoint,
    lineStart: centroidLineStart,
    lineEnd: centroidLineEnd,
    polygonStart: function polygonStart() {
      centroidStream.lineStart = centroidRingStart;
      centroidStream.lineEnd = centroidRingEnd;
    },
    polygonEnd: function polygonEnd() {
      centroidStream.point = centroidPoint;
      centroidStream.lineStart = centroidLineStart;
      centroidStream.lineEnd = centroidLineEnd;
    },
    result: function result() {
      var centroid = Z2 ? [X2 / Z2, Y2 / Z2] : Z1 ? [X1 / Z1, Y1 / Z1] : Z0 ? [X0 / Z0, Y0 / Z0] : [NaN, NaN];
      X0 = Y0 = Z0 = X1 = Y1 = Z1 = X2 = Y2 = Z2 = 0;
      return centroid;
    }
  };

  function centroidPoint(x, y) {
    X0 += x;
    Y0 += y;
    ++Z0;
  }

  function centroidLineStart() {
    centroidStream.point = centroidPointFirstLine;
  }

  function centroidPointFirstLine(x, y) {
    centroidStream.point = centroidPointLine;
    centroidPoint(x0$1 = x, y0$1 = y);
  }

  function centroidPointLine(x, y) {
    var dx = x - x0$1,
        dy = y - y0$1,
        z = sqrt(dx * dx + dy * dy);
    X1 += z * (x0$1 + x) / 2;
    Y1 += z * (y0$1 + y) / 2;
    Z1 += z;
    centroidPoint(x0$1 = x, y0$1 = y);
  }

  function centroidLineEnd() {
    centroidStream.point = centroidPoint;
  }

  function centroidRingStart() {
    centroidStream.point = centroidPointFirstRing;
  }

  function centroidRingEnd() {
    centroidPointRing(x00$1, y00$1);
  }

  function centroidPointFirstRing(x, y) {
    centroidStream.point = centroidPointRing;
    centroidPoint(x00$1 = x0$1 = x, y00$1 = y0$1 = y);
  }

  function centroidPointRing(x, y) {
    var dx = x - x0$1,
        dy = y - y0$1,
        z = sqrt(dx * dx + dy * dy);
    X1 += z * (x0$1 + x) / 2;
    Y1 += z * (y0$1 + y) / 2;
    Z1 += z;
    z = y0$1 * x - x0$1 * y;
    X2 += z * (x0$1 + x);
    Y2 += z * (y0$1 + y);
    Z2 += z * 3;
    centroidPoint(x0$1 = x, y0$1 = y);
  }

  var pathCentroid = centroidStream;

  function PathContext(context) {
    this._context = context;
  }
  PathContext.prototype = {
    _radius: 4.5,
    pointRadius: function pointRadius(_) {
      return this._radius = _, this;
    },
    polygonStart: function polygonStart() {
      this._line = 0;
    },
    polygonEnd: function polygonEnd() {
      this._line = NaN;
    },
    lineStart: function lineStart() {
      this._point = 0;
    },
    lineEnd: function lineEnd() {
      if (this._line === 0) this._context.closePath();
      this._point = NaN;
    },
    point: function point(x, y) {
      switch (this._point) {
        case 0:
          {
            this._context.moveTo(x, y);

            this._point = 1;
            break;
          }

        case 1:
          {
            this._context.lineTo(x, y);

            break;
          }

        default:
          {
            this._context.moveTo(x + this._radius, y);

            this._context.arc(x, y, this._radius, 0, tau);

            break;
          }
      }
    },
    result: noop
  };

  var lengthSum = new Adder(),
      lengthRing,
      x00,
      y00,
      x0,
      y0;
  var lengthStream = {
    point: noop,
    lineStart: function lineStart() {
      lengthStream.point = lengthPointFirst;
    },
    lineEnd: function lineEnd() {
      if (lengthRing) lengthPoint(x00, y00);
      lengthStream.point = noop;
    },
    polygonStart: function polygonStart() {
      lengthRing = true;
    },
    polygonEnd: function polygonEnd() {
      lengthRing = null;
    },
    result: function result() {
      var length = +lengthSum;
      lengthSum = new Adder();
      return length;
    }
  };

  function lengthPointFirst(x, y) {
    lengthStream.point = lengthPoint;
    x00 = x0 = x, y00 = y0 = y;
  }

  function lengthPoint(x, y) {
    x0 -= x, y0 -= y;
    lengthSum.add(sqrt(x0 * x0 + y0 * y0));
    x0 = x, y0 = y;
  }

  var pathMeasure = lengthStream;

  function PathString() {
    this._string = [];
  }
  PathString.prototype = {
    _radius: 4.5,
    _circle: circle(4.5),
    pointRadius: function pointRadius(_) {
      if ((_ = +_) !== this._radius) this._radius = _, this._circle = null;
      return this;
    },
    polygonStart: function polygonStart() {
      this._line = 0;
    },
    polygonEnd: function polygonEnd() {
      this._line = NaN;
    },
    lineStart: function lineStart() {
      this._point = 0;
    },
    lineEnd: function lineEnd() {
      if (this._line === 0) this._string.push("Z");
      this._point = NaN;
    },
    point: function point(x, y) {
      switch (this._point) {
        case 0:
          {
            this._string.push("M", x, ",", y);

            this._point = 1;
            break;
          }

        case 1:
          {
            this._string.push("L", x, ",", y);

            break;
          }

        default:
          {
            if (this._circle == null) this._circle = circle(this._radius);

            this._string.push("M", x, ",", y, this._circle);

            break;
          }
      }
    },
    result: function result() {
      if (this._string.length) {
        var result = this._string.join("");

        this._string = [];
        return result;
      } else {
        return null;
      }
    }
  };

  function circle(radius) {
    return "m0," + radius + "a" + radius + "," + radius + " 0 1,1 0," + -2 * radius + "a" + radius + "," + radius + " 0 1,1 0," + 2 * radius + "z";
  }

  function index (projection, context) {
    var pointRadius = 4.5,
        projectionStream,
        contextStream;

    function path(object) {
      if (object) {
        if (typeof pointRadius === "function") contextStream.pointRadius(+pointRadius.apply(this, arguments));
        geoStream(object, projectionStream(contextStream));
      }

      return contextStream.result();
    }

    path.area = function (object) {
      geoStream(object, projectionStream(pathArea));
      return pathArea.result();
    };

    path.measure = function (object) {
      geoStream(object, projectionStream(pathMeasure));
      return pathMeasure.result();
    };

    path.bounds = function (object) {
      geoStream(object, projectionStream(boundsStream$1));
      return boundsStream$1.result();
    };

    path.centroid = function (object) {
      geoStream(object, projectionStream(pathCentroid));
      return pathCentroid.result();
    };

    path.projection = function (_) {
      return arguments.length ? (projectionStream = _ == null ? (projection = null, identity$2) : (projection = _).stream, path) : projection;
    };

    path.context = function (_) {
      if (!arguments.length) return context;
      contextStream = _ == null ? (context = null, new PathString()) : new PathContext(context = _);
      if (typeof pointRadius !== "function") contextStream.pointRadius(pointRadius);
      return path;
    };

    path.pointRadius = function (_) {
      if (!arguments.length) return pointRadius;
      pointRadius = typeof _ === "function" ? _ : (contextStream.pointRadius(+_), +_);
      return path;
    };

    return path.projection(projection).context(context);
  }

  function transformer$1(methods) {
    return function (stream) {
      var s = new TransformStream();

      for (var key in methods) {
        s[key] = methods[key];
      }

      s.stream = stream;
      return s;
    };
  }

  function TransformStream() {}

  TransformStream.prototype = {
    constructor: TransformStream,
    point: function point(x, y) {
      this.stream.point(x, y);
    },
    sphere: function sphere() {
      this.stream.sphere();
    },
    lineStart: function lineStart() {
      this.stream.lineStart();
    },
    lineEnd: function lineEnd() {
      this.stream.lineEnd();
    },
    polygonStart: function polygonStart() {
      this.stream.polygonStart();
    },
    polygonEnd: function polygonEnd() {
      this.stream.polygonEnd();
    }
  };

  function fit(projection, fitBounds, object) {
    var clip = projection.clipExtent && projection.clipExtent();
    projection.scale(150).translate([0, 0]);
    if (clip != null) projection.clipExtent(null);
    geoStream(object, projection.stream(boundsStream$1));
    fitBounds(boundsStream$1.result());
    if (clip != null) projection.clipExtent(clip);
    return projection;
  }

  function fitExtent(projection, extent, object) {
    return fit(projection, function (b) {
      var w = extent[1][0] - extent[0][0],
          h = extent[1][1] - extent[0][1],
          k = Math.min(w / (b[1][0] - b[0][0]), h / (b[1][1] - b[0][1])),
          x = +extent[0][0] + (w - k * (b[1][0] + b[0][0])) / 2,
          y = +extent[0][1] + (h - k * (b[1][1] + b[0][1])) / 2;
      projection.scale(150 * k).translate([x, y]);
    }, object);
  }
  function fitSize(projection, size, object) {
    return fitExtent(projection, [[0, 0], size], object);
  }
  function fitWidth(projection, width, object) {
    return fit(projection, function (b) {
      var w = +width,
          k = w / (b[1][0] - b[0][0]),
          x = (w - k * (b[1][0] + b[0][0])) / 2,
          y = -k * b[0][1];
      projection.scale(150 * k).translate([x, y]);
    }, object);
  }
  function fitHeight(projection, height, object) {
    return fit(projection, function (b) {
      var h = +height,
          k = h / (b[1][1] - b[0][1]),
          x = -k * b[0][0],
          y = (h - k * (b[1][1] + b[0][1])) / 2;
      projection.scale(150 * k).translate([x, y]);
    }, object);
  }

  function identity$1 () {
    var k = 1,
        tx = 0,
        ty = 0,
        sx = 1,
        sy = 1,
        // scale, translate and reflect
    alpha = 0,
        ca,
        sa,
        // angle
    x0 = null,
        y0,
        x1,
        y1,
        // clip extent
    kx = 1,
        ky = 1,
        transform = transformer$1({
      point: function point(x, y) {
        var p = projection([x, y]);
        this.stream.point(p[0], p[1]);
      }
    }),
        postclip = identity$2,
        cache,
        cacheStream;

    function reset() {
      kx = k * sx;
      ky = k * sy;
      cache = cacheStream = null;
      return projection;
    }

    function projection(p) {
      var x = p[0] * kx,
          y = p[1] * ky;

      if (alpha) {
        var t = y * ca - x * sa;
        x = x * ca + y * sa;
        y = t;
      }

      return [x + tx, y + ty];
    }

    projection.invert = function (p) {
      var x = p[0] - tx,
          y = p[1] - ty;

      if (alpha) {
        var t = y * ca + x * sa;
        x = x * ca - y * sa;
        y = t;
      }

      return [x / kx, y / ky];
    };

    projection.stream = function (stream) {
      return cache && cacheStream === stream ? cache : cache = transform(postclip(cacheStream = stream));
    };

    projection.postclip = function (_) {
      return arguments.length ? (postclip = _, x0 = y0 = x1 = y1 = null, reset()) : postclip;
    };

    projection.clipExtent = function (_) {
      return arguments.length ? (postclip = _ == null ? (x0 = y0 = x1 = y1 = null, identity$2) : clipRectangle(x0 = +_[0][0], y0 = +_[0][1], x1 = +_[1][0], y1 = +_[1][1]), reset()) : x0 == null ? null : [[x0, y0], [x1, y1]];
    };

    projection.scale = function (_) {
      return arguments.length ? (k = +_, reset()) : k;
    };

    projection.translate = function (_) {
      return arguments.length ? (tx = +_[0], ty = +_[1], reset()) : [tx, ty];
    };

    projection.angle = function (_) {
      return arguments.length ? (alpha = _ % 360 * radians, sa = sin(alpha), ca = cos(alpha), reset()) : alpha * degrees;
    };

    projection.reflectX = function (_) {
      return arguments.length ? (sx = _ ? -1 : 1, reset()) : sx < 0;
    };

    projection.reflectY = function (_) {
      return arguments.length ? (sy = _ ? -1 : 1, reset()) : sy < 0;
    };

    projection.fitExtent = function (extent, object) {
      return fitExtent(projection, extent, object);
    };

    projection.fitSize = function (size, object) {
      return fitSize(projection, size, object);
    };

    projection.fitWidth = function (width, object) {
      return fitWidth(projection, width, object);
    };

    projection.fitHeight = function (height, object) {
      return fitHeight(projection, height, object);
    };

    return projection;
  }

  function initRange(domain, range) {
    switch (arguments.length) {
      case 0:
        break;

      case 1:
        this.range(domain);
        break;

      default:
        this.range(range).domain(domain);
        break;
    }

    return this;
  }

  function constants(x) {
    return function () {
      return x;
    };
  }

  function number(x) {
    return +x;
  }

  var unit = [0, 1];
  function identity(x) {
    return x;
  }

  function normalize(a, b) {
    return (b -= a = +a) ? function (x) {
      return (x - a) / b;
    } : constants(isNaN(b) ? NaN : 0.5);
  }

  function clamper(a, b) {
    var t;
    if (a > b) t = a, a = b, b = t;
    return function (x) {
      return Math.max(a, Math.min(b, x));
    };
  } // normalize(a, b)(x) takes a domain value x in [a,b] and returns the corresponding parameter t in [0,1].
  // interpolate(a, b)(t) takes a parameter t in [0,1] and returns the corresponding range value x in [a,b].


  function bimap(domain, range, interpolate) {
    var d0 = domain[0],
        d1 = domain[1],
        r0 = range[0],
        r1 = range[1];
    if (d1 < d0) d0 = normalize(d1, d0), r0 = interpolate(r1, r0);else d0 = normalize(d0, d1), r0 = interpolate(r0, r1);
    return function (x) {
      return r0(d0(x));
    };
  }

  function polymap(domain, range, interpolate) {
    var j = Math.min(domain.length, range.length) - 1,
        d = new Array(j),
        r = new Array(j),
        i = -1; // Reverse descending domains.

    if (domain[j] < domain[0]) {
      domain = domain.slice().reverse();
      range = range.slice().reverse();
    }

    while (++i < j) {
      d[i] = normalize(domain[i], domain[i + 1]);
      r[i] = interpolate(range[i], range[i + 1]);
    }

    return function (x) {
      var i = bisect(domain, x, 1, j) - 1;
      return r[i](d[i](x));
    };
  }

  function copy(source, target) {
    return target.domain(source.domain()).range(source.range()).interpolate(source.interpolate()).clamp(source.clamp()).unknown(source.unknown());
  }
  function transformer() {
    var domain = unit,
        range = unit,
        interpolate = interpolate$1,
        transform,
        untransform,
        unknown,
        clamp = identity,
        piecewise,
        output,
        input;

    function rescale() {
      var n = Math.min(domain.length, range.length);
      if (clamp !== identity) clamp = clamper(domain[0], domain[n - 1]);
      piecewise = n > 2 ? polymap : bimap;
      output = input = null;
      return scale;
    }

    function scale(x) {
      return x == null || isNaN(x = +x) ? unknown : (output || (output = piecewise(domain.map(transform), range, interpolate)))(transform(clamp(x)));
    }

    scale.invert = function (y) {
      return clamp(untransform((input || (input = piecewise(range, domain.map(transform), interpolateNumber)))(y)));
    };

    scale.domain = function (_) {
      return arguments.length ? (domain = Array.from(_, number), rescale()) : domain.slice();
    };

    scale.range = function (_) {
      return arguments.length ? (range = Array.from(_), rescale()) : range.slice();
    };

    scale.rangeRound = function (_) {
      return range = Array.from(_), interpolate = interpolateRound, rescale();
    };

    scale.clamp = function (_) {
      return arguments.length ? (clamp = _ ? true : identity, rescale()) : clamp !== identity;
    };

    scale.interpolate = function (_) {
      return arguments.length ? (interpolate = _, rescale()) : interpolate;
    };

    scale.unknown = function (_) {
      return arguments.length ? (unknown = _, scale) : unknown;
    };

    return function (t, u) {
      transform = t, untransform = u;
      return rescale();
    };
  }
  function continuous() {
    return transformer()(identity, identity);
  }

  function tickFormat(start, stop, count, specifier) {
    var step = tickStep(start, stop, count),
        precision;
    specifier = formatSpecifier(specifier == null ? ",f" : specifier);

    switch (specifier.type) {
      case "s":
        {
          var value = Math.max(Math.abs(start), Math.abs(stop));
          if (specifier.precision == null && !isNaN(precision = precisionPrefix(step, value))) specifier.precision = precision;
          return formatPrefix(specifier, value);
        }

      case "":
      case "e":
      case "g":
      case "p":
      case "r":
        {
          if (specifier.precision == null && !isNaN(precision = precisionRound(step, Math.max(Math.abs(start), Math.abs(stop))))) specifier.precision = precision - (specifier.type === "e");
          break;
        }

      case "f":
      case "%":
        {
          if (specifier.precision == null && !isNaN(precision = precisionFixed(step))) specifier.precision = precision - (specifier.type === "%") * 2;
          break;
        }
    }

    return format(specifier);
  }

  function linearish(scale) {
    var domain = scale.domain;

    scale.ticks = function (count) {
      var d = domain();
      return ticks(d[0], d[d.length - 1], count == null ? 10 : count);
    };

    scale.tickFormat = function (count, specifier) {
      var d = domain();
      return tickFormat(d[0], d[d.length - 1], count == null ? 10 : count, specifier);
    };

    scale.nice = function (count) {
      if (count == null) count = 10;
      var d = domain();
      var i0 = 0;
      var i1 = d.length - 1;
      var start = d[i0];
      var stop = d[i1];
      var prestep;
      var step;
      var maxIter = 10;

      if (stop < start) {
        step = start, start = stop, stop = step;
        step = i0, i0 = i1, i1 = step;
      }

      while (maxIter-- > 0) {
        step = tickIncrement(start, stop, count);

        if (step === prestep) {
          d[i0] = start;
          d[i1] = stop;
          return domain(d);
        } else if (step > 0) {
          start = Math.floor(start / step) * step;
          stop = Math.ceil(stop / step) * step;
        } else if (step < 0) {
          start = Math.ceil(start * step) / step;
          stop = Math.floor(stop * step) / step;
        } else {
          break;
        }

        prestep = step;
      }

      return scale;
    };

    return scale;
  }
  function linear() {
    var scale = continuous();

    scale.copy = function () {
      return copy(scale, linear());
    };

    initRange.apply(scale, arguments);
    return linearish(scale);
  }

  function colors (specifier) {
    var n = specifier.length / 6 | 0,
        colors = new Array(n),
        i = 0;

    while (i < n) {
      colors[i] = "#" + specifier.slice(i * 6, ++i * 6);
    }

    return colors;
  }

  var Set1 = colors("e41a1c377eb84daf4a984ea3ff7f00ffff33a65628f781bf999999");

  function constant (x) {
    return function constant() {
      return x;
    };
  }

  function array (x) {
    return _typeof(x) === "object" && "length" in x ? x // Array, TypedArray, NodeList, array-like
    : Array.from(x); // Map, Set, iterable, string, or anything else
  }

  function Linear(context) {
    this._context = context;
  }

  Linear.prototype = {
    areaStart: function areaStart() {
      this._line = 0;
    },
    areaEnd: function areaEnd() {
      this._line = NaN;
    },
    lineStart: function lineStart() {
      this._point = 0;
    },
    lineEnd: function lineEnd() {
      if (this._line || this._line !== 0 && this._point === 1) this._context.closePath();
      this._line = 1 - this._line;
    },
    point: function point(x, y) {
      x = +x, y = +y;

      switch (this._point) {
        case 0:
          this._point = 1;
          this._line ? this._context.lineTo(x, y) : this._context.moveTo(x, y);
          break;

        case 1:
          this._point = 2;
        // falls through

        default:
          this._context.lineTo(x, y);

          break;
      }
    }
  };
  function curveLinear (context) {
    return new Linear(context);
  }

  function x(p) {
    return p[0];
  }
  function y(p) {
    return p[1];
  }

  function line (x$1, y$1) {
    var defined = constant(true),
        context = null,
        curve = curveLinear,
        output = null;
    x$1 = typeof x$1 === "function" ? x$1 : x$1 === undefined ? x : constant(x$1);
    y$1 = typeof y$1 === "function" ? y$1 : y$1 === undefined ? y : constant(y$1);

    function line(data) {
      var i,
          n = (data = array(data)).length,
          d,
          defined0 = false,
          buffer;
      if (context == null) output = curve(buffer = path());

      for (i = 0; i <= n; ++i) {
        if (!(i < n && defined(d = data[i], i, data)) === defined0) {
          if (defined0 = !defined0) output.lineStart();else output.lineEnd();
        }

        if (defined0) output.point(+x$1(d, i, data), +y$1(d, i, data));
      }

      if (buffer) return output = null, buffer + "" || null;
    }

    line.x = function (_) {
      return arguments.length ? (x$1 = typeof _ === "function" ? _ : constant(+_), line) : x$1;
    };

    line.y = function (_) {
      return arguments.length ? (y$1 = typeof _ === "function" ? _ : constant(+_), line) : y$1;
    };

    line.defined = function (_) {
      return arguments.length ? (defined = typeof _ === "function" ? _ : constant(!!_), line) : defined;
    };

    line.curve = function (_) {
      return arguments.length ? (curve = _, context != null && (output = curve(context)), line) : curve;
    };

    line.context = function (_) {
      return arguments.length ? (_ == null ? context = output = null : output = curve(context = _), line) : context;
    };

    return line;
  }

  var _templateObject$m, _templateObject2$k, _templateObject3$a, _templateObject4$a, _templateObject5$a, _templateObject6$a, _templateObject7$a, _templateObject8$8, _templateObject9$8;
  /*
    DecidablesElement Base Class - Not intended for instantiation!
    <decidables-element>
  */

  var DecidablesElement = /*#__PURE__*/function (_LitElement) {
    _inherits(DecidablesElement, _LitElement);

    var _super = _createSuper(DecidablesElement);

    function DecidablesElement() {
      var _this;

      _classCallCheck(this, DecidablesElement);

      _this = _super.call(this);
      _this.uniqueId = "decidables-".concat(DecidablesElement.uniqueId);
      return _this;
    }

    _createClass(DecidablesElement, [{
      key: "getComputedStyleValue",
      value: function getComputedStyleValue(property) {
        // HACK: IE11 requires use of polyfill interface to get custom property value in Javascript
        if (window.ShadyCSS) {
          return window.ShadyCSS.getComputedStyleValue(this, property);
        }

        return getComputedStyle(this).getPropertyValue(property);
      }
    }, {
      key: "firstUpdated",
      value: function firstUpdated(changedProperties) {
        _get(_getPrototypeOf(DecidablesElement.prototype), "firstUpdated", this).call(this, changedProperties); // Use focus highlighting if keyboard is used at all


        select(this.renderRoot.host).classed('keyboard', true).on('mousemove.keyboard touchstart.keyboard', function (event) {
          var element = event.currentTarget;
          select(element.renderRoot.host).classed('keyboard', false).on('mousemove.keyboard touchstart.keyboard', null);
        }).on('keydown.keyboard', function (event) {
          var element = event.currentTarget;
          select(element.renderRoot.host).classed('keyboard', true).on('keydown.keyboard mousemove.keyboard touchstart.keyboard', null);
        });
      }
    }], [{
      key: "uniqueId",
      get: // HACK: Create a unique ID for each DecidablesElement
      // This is needed because Edge/IE11 don't have real Shadow DOM, so IDs leak
      // out of elements and collide if there is more than one of an element on a
      // page. Known issue for checkbox/switches and the id/for pattern on <input>
      // and <label>
      function get() {
        DecidablesElement.ID += 1;
        return DecidablesElement.ID;
      }
    }, {
      key: "greys",
      get: function get() {
        var grey = '#999999';
        var greys = {};
        greys.white = '#ffffff';
        greys.light75 = interpolateRgb(grey, '#ffffff')(0.75);
        greys.light50 = interpolateRgb(grey, '#ffffff')(0.5);
        greys.light25 = interpolateRgb(grey, '#ffffff')(0.25);
        greys.grey = grey;
        greys.dark25 = interpolateRgb(grey, '#000000')(0.25);
        greys.dark50 = interpolateRgb(grey, '#000000')(0.5);
        greys.dark75 = interpolateRgb(grey, '#000000')(0.75);
        greys.black = '#000000';
        return greys;
      }
    }, {
      key: "shadows",
      get: function get() {
        // Material Design elevation styles
        // References:
        //   https://github.com/material-components/material-components-web/tree/master/packages/mdc-elevation
        //   https://codepen.io/hanger/pen/yOGvQp

        /* eslint-disable key-spacing, object-curly-newline */
        return {
          elevations: [0, 2, 4, 8, 16],
          baselineColor: '#000000',
          baselineColorString: '0, 0, 0',
          inverseBaselineColor: '#FFFFFF',
          inverseBaselineColorString: '255, 255, 255',
          opacityUmbra: 0.2,
          opacityPenumbra: 0.14,
          opacityAmbient: 0.12,
          opacityBoost: 0.2,
          mapUmbra: {
            // $mdc-elevation-umbra-map
            0: {
              x: 0,
              y: 0,
              b: 0,
              s: 0
            },
            // offset-x, offset-y, blur-radius, spread-radius
            2: {
              x: 0,
              y: 3,
              b: 1,
              s: -2
            },
            4: {
              x: 0,
              y: 2,
              b: 4,
              s: -1
            },
            8: {
              x: 0,
              y: 5,
              b: 5,
              s: -3
            },
            16: {
              x: 0,
              y: 8,
              b: 10,
              s: -5
            }
          },
          mapPenumbra: {
            // $mdc-elevation-penumbra-map
            0: {
              x: 0,
              y: 0,
              b: 0,
              s: 0
            },
            // offset-x, offset-y, blur-radius, spread-radius
            2: {
              x: 0,
              y: 2,
              b: 2,
              s: 0
            },
            4: {
              x: 0,
              y: 4,
              b: 5,
              s: 0
            },
            8: {
              x: 0,
              y: 8,
              b: 10,
              s: 1
            },
            16: {
              x: 0,
              y: 16,
              b: 24,
              s: 2
            }
          },
          mapAmbient: {
            // $mdc-elevation-ambient-map
            0: {
              x: 0,
              y: 0,
              b: 0,
              s: 0
            },
            // offset-x, offset-y, blur-radius, spread-radius
            2: {
              x: 0,
              y: 1,
              b: 5,
              s: 0
            },
            4: {
              x: 0,
              y: 1,
              b: 10,
              s: 0
            },
            8: {
              x: 0,
              y: 3,
              b: 14,
              s: 2
            },
            16: {
              x: 0,
              y: 6,
              b: 30,
              s: 5
            }
          }
        };
        /* eslint-enable key-spacing, object-curly-newline */
      }
    }, {
      key: "cssBoxShadow",
      value: function cssBoxShadow(elevation) {
        var rotate = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;
        var inverse = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;
        var umbraO = this.shadows.opacityUmbra + this.shadows.opacityBoost;
        var penumbraO = this.shadows.opacityPenumbra + this.shadows.opacityBoost;
        var ambientO = this.shadows.opacityAmbient + this.shadows.opacityBoost;
        var umbraC = inverse ? "rgba(".concat(this.shadows.inverseBaselineColorString, ", ").concat(umbraO, ")") : "rgba(".concat(this.shadows.baselineColorString, ", ").concat(umbraO, ")");
        var penumbraC = inverse ? "rgba(".concat(this.shadows.inverseBaselineColorString, ", ").concat(penumbraO, ")") : "rgba(".concat(this.shadows.baselineColorString, ", ").concat(penumbraO, ")");
        var ambientC = inverse ? "rgba(".concat(this.shadows.inverseBaselineColorString, ", ").concat(ambientO, ")") : "rgba(".concat(this.shadows.baselineColorString, ", ").concat(ambientO, ")");
        var umbraM = this.shadows.mapUmbra[elevation];
        var penumbraM = this.shadows.mapPenumbra[elevation];
        var ambientM = this.shadows.mapAmbient[elevation];
        var umbraS = rotate ? "".concat(-umbraM.y, "px ").concat(umbraM.y / 2, "px ").concat(umbraM.b, "px ").concat(umbraM.s, "px") : "".concat(umbraM.y / 2, "px ").concat(umbraM.y, "px ").concat(umbraM.b, "px ").concat(umbraM.s, "px");
        var penumbraS = rotate ? "".concat(-penumbraM.y, "px ").concat(penumbraM.y / 2, "px ").concat(penumbraM.b, "px ").concat(penumbraM.s, "px") : "".concat(penumbraM.y / 2, "px ").concat(penumbraM.y, "px ").concat(penumbraM.b, "px ").concat(penumbraM.s, "px");
        var ambientS = rotate ? "".concat(-ambientM.y, "px ").concat(ambientM.y / 2, "px ").concat(ambientM.b, "px ").concat(ambientM.s, "px") : "".concat(ambientM.y / 2, "px ").concat(ambientM.y, "px ").concat(ambientM.b, "px ").concat(ambientM.s, "px");
        return "".concat(umbraS, " ").concat(umbraC, ", ").concat(penumbraS, " ").concat(penumbraC, ", ").concat(ambientS, " ").concat(ambientC);
      }
    }, {
      key: "svgFilters",
      get: function get() {
        var shadows = DecidablesElement.shadows; // eslint-disable-line prefer-destructuring

        var erodeRadius = 1;
        var filters = shadows.elevations.map(function (z) {
          return y$1(_templateObject$m || (_templateObject$m = _taggedTemplateLiteral(["\n        <filter id=", " x=\"-250%\" y=\"-250%\" width=\"600%\" height=\"600%\">\n          <feComponentTransfer in=\"SourceAlpha\" result=\"solid\">\n            <feFuncA  type=\"table\" tableValues=\"0 1 1\"/>\n          </feComponentTransfer>\n          <feOffset in=\"solid\" result=\"offU\" dx=", " dy=", " />\n          <feOffset in=\"solid\" result=\"offP\" dx=", " dy=", " />\n          <feOffset in=\"solid\" result=\"offA\" dx=", " dy=", " />\n          ", "\n          ", "\n          ", "\n          <feGaussianBlur in=", " result=\"blurU\" stdDeviation=", " />\n          <feGaussianBlur in=", " result=\"blurP\" stdDeviation=", " />\n          <feGaussianBlur in=", " result=\"blurA\" stdDeviation=", " />\n          <feFlood in=\"SourceGraphic\" result=\"opU\" flood-color=", " flood-opacity=", " />\n          <feFlood in=\"SourceGraphic\" result=\"opP\" flood-color=", " flood-opacity=", " />\n          <feFlood in=\"SourceGraphic\" result=\"opA\" flood-color=", " flood-opacity=", " />\n          <feComposite in=\"opU\" in2=\"blurU\" result=\"shU\" operator=\"in\" />\n          <feComposite in=\"opP\" in2=\"blurP\" result=\"shP\" operator=\"in\" />\n          <feComposite in=\"opA\" in2=\"blurA\" result=\"shA\" operator=\"in\" />\n          <!-- HACK Edge: Using a dynamic value for erode radius stops Edge from corrupting the \"radius\" value! -->\n          <feMorphology in=\"solid\" result=\"smaller\" operator=\"erode\" radius=", " />\n          <feComposite in=\"shU\" in2=\"smaller\" result=\"finalU\" operator=\"out\" />\n          <feComposite in=\"shP\" in2=\"smaller\" result=\"finalP\" operator=\"out\" />\n          <feComposite in=\"shA\" in2=\"smaller\" result=\"finalA\" operator=\"out\" />\n          <feMerge>\n            <feMergeNode in=\"finalU\" />\n            <feMergeNode in=\"finalP\" />\n            <feMergeNode in=\"finalA\" />\n            <feMergeNode in=\"SourceGraphic\" />\n          </feMerge>\n        </filter>"])), "shadow-".concat(z), shadows.mapUmbra[z].y / 2, shadows.mapUmbra[z].y, shadows.mapPenumbra[z].y / 2, shadows.mapPenumbra[z].y, shadows.mapAmbient[z].y / 2, shadows.mapAmbient[z].y, shadows.mapUmbra[z].s === 0 ? y$1(_templateObject2$k || (_templateObject2$k = _taggedTemplateLiteral([""]))) : y$1(_templateObject3$a || (_templateObject3$a = _taggedTemplateLiteral(["<feMorphology in=\"offU\" result=\"spreadU\" operator=", " radius=", " />"])), shadows.mapUmbra[z].s > 0 ? 'dilate' : 'erode', Math.abs(shadows.mapUmbra[z].s)), shadows.mapPenumbra[z].s === 0 ? y$1(_templateObject4$a || (_templateObject4$a = _taggedTemplateLiteral([""]))) : y$1(_templateObject5$a || (_templateObject5$a = _taggedTemplateLiteral(["<feMorphology in=\"offP\" result=\"spreadP\" operator=", " radius=", " />"])), shadows.mapPenumbra[z].s > 0 ? 'dilate' : 'erode', Math.abs(shadows.mapPenumbra[z].s)), shadows.mapAmbient[z].s === 0 ? y$1(_templateObject6$a || (_templateObject6$a = _taggedTemplateLiteral([""]))) : y$1(_templateObject7$a || (_templateObject7$a = _taggedTemplateLiteral(["<feMorphology in=\"offA\" result=\"spreadA\" operator=", " radius=", " />"])), shadows.mapAmbient[z].s > 0 ? 'dilate' : 'erode', Math.abs(shadows.mapAmbient[z].s)), shadows.mapUmbra[z].s === 0 ? 'offU' : 'spreadU', shadows.mapUmbra[z].b / 2, shadows.mapPenumbra[z].s === 0 ? 'offP' : 'spreadP', shadows.mapPenumbra[z].b / 2, shadows.mapAmbient[z].s === 0 ? 'offA' : 'spreadA', shadows.mapAmbient[z].b / 2, shadows.baselineColor, shadows.opacityUmbra + shadows.opacityBoost, shadows.baselineColor, shadows.opacityPenumbra + shadows.opacityBoost, shadows.baselineColor, shadows.opacityAmbient + shadows.opacityBoost, erodeRadius);
        });
        return y$1(_templateObject8$8 || (_templateObject8$8 = _taggedTemplateLiteral(["\n      <svg class=\"defs\">\n        <defs>\n          ", "\n        </defs>\n      </svg>\n    "])), filters);
      }
    }, {
      key: "styles",
      get: function get() {
        return r$2(_templateObject9$8 || (_templateObject9$8 = _taggedTemplateLiteral(["\n      :host {\n        ---shadow-0: var(--shadow-0, ", ");\n        ---shadow-2: var(--shadow-2, ", ");\n        ---shadow-4: var(--shadow-4, ", ");\n        ---shadow-8: var(--shadow-8, ", ");\n\n        ---color-background: var(--color-background, ", ");\n        ---color-border: var(--color-border, ", ");\n        ---color-text: var(--color-text, ", ");\n        ---color-text-inverse: var(--color-text-inverse, ", ");\n        ---color-link: var(--color-link, ", ");\n        ---color-element-background: var(--color-element-background, ", ");\n        ---color-element-disabled: var(--color-element-disabled, ", ");\n        ---color-element-enabled: var(--color-element-enabled, ", ");\n        ---color-element-selected: var(--color-element-selected, ", ");\n        ---color-element-border: var(--color-element-border, ", ");\n        ---color-element-emphasis: var(--color-element-emphasis, ", ");\n\n        ---font-family-base: var(--font-family-base, \"Source Sans\", sans-serif);\n        ---font-family-math: var(--font-family-math, \"Source Serif\", serif);\n\n        ---transition-duration: var(--transition-duration, 500ms);\n\n        font-family: var(---font-family-base);\n      }\n\n      :host,\n      :host *,\n      :host *::before,\n      :host *::after {\n        box-sizing: border-box;\n      }\n\n      .math-greek {\n        font-family: var(---font-family-math);\n        font-style: normal;\n      }\n\n      .math-num {\n        font-family: var(---font-family-base);\n        font-style: normal;\n      }\n\n      .math-var {\n        font-family: var(---font-family-math);\n        font-style: italic;\n      }\n\n      .defs {\n        display: block;\n\n        width: 0;\n        height: 0;\n      }\n    "])), o$3(this.cssBoxShadow(0)), o$3(this.cssBoxShadow(2)), o$3(this.cssBoxShadow(4)), o$3(this.cssBoxShadow(8)), o$3(this.greys.white), o$3(this.greys.light75), o$3(this.greys.dark75), o$3(this.greys.white), o$3(this.greys.dark25), o$3(this.greys.light75), o$3(this.greys.light50), o$3(this.greys.grey), o$3(this.greys.dark25), o$3(this.greys.dark50), o$3(this.greys.dark75));
      }
    }]);

    return DecidablesElement;
  }(s); // Static property of DecidablesElement!
  DecidablesElement.ID = 0;

  var _templateObject$l, _templateObject2$j;

  var DecidablesButton = /*#__PURE__*/function (_DecidablesElement) {
    _inherits(DecidablesButton, _DecidablesElement);

    var _super = _createSuper(DecidablesButton);

    function DecidablesButton() {
      var _this;

      _classCallCheck(this, DecidablesButton);

      _this = _super.call(this); // Attributes

      _this.disabled = false;
      return _this;
    }

    _createClass(DecidablesButton, [{
      key: "render",
      value: function render() {
        return $(_templateObject$l || (_templateObject$l = _taggedTemplateLiteral(["\n      <button ?disabled=", ">\n        <slot></slot>\n      </button>\n    "])), this.disabled);
      }
    }], [{
      key: "properties",
      get: function get() {
        return {
          disabled: {
            attribute: 'disabled',
            type: Boolean,
            reflect: true
          }
        };
      }
    }, {
      key: "styles",
      get: function get() {
        return [_get(_getPrototypeOf(DecidablesButton), "styles", this), r$2(_templateObject2$j || (_templateObject2$j = _taggedTemplateLiteral(["\n        :host {\n          margin: 0.25rem;\n        }\n\n        button {\n          width: 100%;\n          height: 100%;\n          padding: 0.375rem 0.75rem;\n\n          font-family: var(---font-family-base);\n          font-size: 1.125rem;\n          line-height: 1.5;\n          color: var(---color-text-inverse);\n\n          border: 0;\n          border-radius: 0.25rem;\n          outline: none;\n        }\n\n        button:disabled {\n          background-color: var(--decidables-button-background-color, var(---color-element-disabled));\n          outline: none;\n          box-shadow: none;\n        }\n\n        button:enabled {\n          cursor: pointer;\n\n          background-color: var(--decidables-button-background-color, var(---color-element-enabled));\n          outline: none;\n          box-shadow: var(---shadow-2);\n        }\n\n        button:enabled:hover {\n          outline: none;\n          box-shadow: var(---shadow-4);\n        }\n\n        button:enabled:active {\n          outline: none;\n          box-shadow: var(---shadow-8);\n        }\n\n        :host(.keyboard) button:enabled:focus {\n          outline: none;\n          box-shadow: var(---shadow-4);\n        }\n\n        :host(.keyboard) button:enabled:focus:active {\n          outline: none;\n          box-shadow: var(---shadow-8);\n        }\n      "])))];
      }
    }]);

    return DecidablesButton;
  }(DecidablesElement);
  customElements.define('decidables-button', DecidablesButton);

  /**
   * @license
   * Copyright 2018 Google LLC
   * SPDX-License-Identifier: BSD-3-Clause
   */

  var l = function l(_l) {
    return null != _l ? _l : w;
  };

  var _templateObject$k, _templateObject2$i;

  var DecidablesSlider = /*#__PURE__*/function (_DecidablesElement) {
    _inherits(DecidablesSlider, _DecidablesElement);

    var _super = _createSuper(DecidablesSlider);

    function DecidablesSlider() {
      var _this;

      _classCallCheck(this, DecidablesSlider);

      _this = _super.call(this); // Attributes

      _this.disabled = false;
      _this.max = undefined;
      _this.min = undefined;
      _this.step = undefined;
      _this.value = undefined;
      return _this;
    }

    _createClass(DecidablesSlider, [{
      key: "changed",
      value: function changed(event) {
        this.value = event.target.value;
        this.dispatchEvent(new CustomEvent('change', {
          detail: {
            value: this.value
          },
          bubbles: true
        }));
      }
    }, {
      key: "inputted",
      value: function inputted(event) {
        this.value = event.target.value;
      }
    }, {
      key: "render",
      value: function render() {
        return $(_templateObject$k || (_templateObject$k = _taggedTemplateLiteral(["\n      <label for=", ">\n        <slot></slot>\n      </label>\n      <div class=\"range\">\n        <input type=\"range\" id=", " min=", " max=", " step=", " .value=", " @change=", " @input=", ">\n      </div>\n      <decidables-spinner min=", " max=", " step=", " .value=", " @input=", "></decidables-spinner>\n    "])), "".concat(this.uniqueId, "-slider"), "".concat(this.uniqueId, "-slider"), l(this.min), l(this.max), l(this.step), this.value, this.changed.bind(this), this.inputted.bind(this), l(this.min), l(this.max), l(this.step), this.value, this.inputted.bind(this));
      }
    }], [{
      key: "properties",
      get: function get() {
        return {
          disabled: {
            attribute: 'disabled',
            type: Boolean,
            reflect: true
          },
          max: {
            attribute: 'max',
            type: Number,
            reflect: true
          },
          min: {
            attribute: 'min',
            type: Number,
            reflect: true
          },
          step: {
            attribute: 'step',
            type: Number,
            reflect: true
          },
          value: {
            attribute: 'value',
            type: Number,
            reflect: true
          }
        };
      }
    }, {
      key: "styles",
      get: function get() {
        return [_get(_getPrototypeOf(DecidablesSlider), "styles", this), r$2(_templateObject2$i || (_templateObject2$i = _taggedTemplateLiteral(["\n        :host {\n          ---shadow-2-rotate: var(--shadow-2-rotate, ", ");\n          ---shadow-4-rotate: var(--shadow-4-rotate, ", ");\n          ---shadow-8-rotate: var(--shadow-8-rotate, ", ");\n\n          display: flex;\n\n          flex-direction: column;\n\n          align-items: center;\n          justify-content: center;\n        }\n\n        label {\n          margin: 0.25rem 0.25rem 0;\n        }\n\n        .range {\n          display: inline-block;\n\n          width: 3.5rem;\n          height: 4.75rem;\n          margin: 0 0.25rem 0.25rem;\n        }\n\n        decidables-spinner {\n          --decidables-spinner-input-width: 3.5rem;\n\n          margin: 0 0.25rem 0.25rem;\n        }\n\n        /* Adapted from http://danielstern.ca/range.css/#/ */\n        /* Overall */\n        input[type=range] {\n          width: 4.75rem;\n          height: 3.5rem;\n          padding: 0;\n          margin: 0;\n\n          background-color: unset;\n\n          transform: rotate(-90deg);\n          transform-origin: 2.375rem 2.375rem;\n\n          /* stylelint-disable-next-line property-no-vendor-prefix */\n          -webkit-appearance: none;\n        }\n\n        input[type=range]:enabled {\n          cursor: ns-resize;\n        }\n\n        input[type=range]:focus {\n          outline: none;\n        }\n\n        /* stylelint-disable-next-line no-descending-specificity */ /* stylelint ERROR */\n        input[type=range]::-ms-tooltip {\n          display: none;\n        }\n\n        /* Track */\n        /* stylelint-disable-next-line no-descending-specificity */ /* stylelint ERROR */\n        input[type=range]::-webkit-slider-runnable-track {\n          width: 100%;\n          height: 4px;\n\n          background: var(---color-element-disabled);\n          border: 0;\n          border-radius: 2px;\n          box-shadow: none;\n        }\n\n        input[type=range]:focus::-webkit-slider-runnable-track {\n          background: var(---color-element-disabled);\n        }\n\n        /* stylelint-disable-next-line no-descending-specificity */ /* stylelint ERROR */\n        input[type=range]::-moz-range-track {\n          width: 100%;\n          height: 4px;\n\n          background: var(---color-element-disabled);\n          border: 0;\n          border-radius: 2px;\n          box-shadow: none;\n        }\n\n        /* stylelint-disable-next-line no-descending-specificity */ /* stylelint ERROR */\n        input[type=range]::-ms-track {\n          width: 100%;\n          height: 4px;\n\n          color: transparent;\n\n          background: transparent;\n          border-color: transparent;\n        }\n\n        /* stylelint-disable-next-line no-descending-specificity */ /* stylelint ERROR */\n        input[type=range]::-ms-fill-lower {\n          background: #cccccc;\n          /* background: var(---color-element-disabled); */\n          border: 0;\n          border-radius: 2px;\n          box-shadow: none;\n        }\n\n        /* stylelint-disable-next-line no-descending-specificity */ /* stylelint ERROR */\n        input[type=range]::-ms-fill-upper {\n          background: #cccccc;\n          /* background: var(---color-element-disabled); */\n          border: 0;\n          border-radius: 2px;\n          box-shadow: none;\n        }\n\n        /* stylelint-disable-next-line no-descending-specificity */ /* stylelint ERROR */\n        input[type=range]:focus::-ms-fill-lower {\n          background: var(---color-element-disabled);\n        }\n\n        /* stylelint-disable-next-line no-descending-specificity */ /* stylelint ERROR */\n        input[type=range]:focus::-ms-fill-upper {\n          background: var(---color-element-disabled);\n        }\n\n        /* Thumb */\n        /* stylelint-disable-next-line no-descending-specificity */ /* stylelint ERROR */\n        input[type=range]::-webkit-slider-thumb {\n          width: 10px;\n          height: 20px;\n          margin-top: -8px;\n\n          border: 0;\n          border-radius: 4px;\n\n          /* stylelint-disable-next-line property-no-vendor-prefix */\n          -webkit-appearance: none;\n        }\n\n        input[type=range]:disabled::-webkit-slider-thumb {\n          background: var(---color-element-disabled);\n          box-shadow: none;\n        }\n\n        input[type=range]:enabled::-webkit-slider-thumb {\n          background: var(---color-element-enabled);\n          box-shadow: var(---shadow-2-rotate);\n        }\n\n        input[type=range]:enabled:hover::-webkit-slider-thumb {\n          box-shadow: var(---shadow-4-rotate);\n        }\n\n        input[type=range]:enabled:active::-webkit-slider-thumb {\n          box-shadow: var(---shadow-8-rotate);\n        }\n\n        :host(.keyboard) input[type=range]:enabled:focus::-webkit-slider-thumb {\n          box-shadow: var(---shadow-4-rotate);\n        }\n\n        :host(.keyboard) input[type=range]:focus:active::-webkit-slider-thumb {\n          box-shadow: var(---shadow-8-rotate);\n        }\n\n        /* stylelint-disable-next-line no-descending-specificity */ /* stylelint ERROR */\n        input[type=range]::-moz-range-thumb {\n          width: 10px;\n          height: 20px;\n\n          border: 0;\n          border-radius: 4px;\n        }\n\n        /* stylelint-disable-next-line no-descending-specificity */ /* stylelint ERROR */\n        input[type=range]:disabled::-moz-range-thumb {\n          background: var(---color-element-disabled);\n          box-shadow: none;\n        }\n\n        /* stylelint-disable-next-line no-descending-specificity */ /* stylelint ERROR */\n        input[type=range]:enabled::-moz-range-thumb {\n          background: var(---color-element-enabled);\n          box-shadow: var(---shadow-2-rotate);\n        }\n\n        /* stylelint-disable-next-line no-descending-specificity */ /* stylelint ERROR */\n        input[type=range]:enabled:hover::-moz-range-thumb {\n          box-shadow: var(---shadow-4-rotate);\n        }\n\n        /* stylelint-disable-next-line no-descending-specificity */ /* stylelint ERROR */\n        input[type=range]:enabled:active::-moz-range-thumb {\n          box-shadow: var(---shadow-8-rotate);\n        }\n\n        :host(.keyboard) input[type=range]:enabled:focus::-moz-range-thumb {\n          box-shadow: var(---shadow-4-rotate);\n        }\n\n        :host(.keyboard) input[type=range]:enabled:focus:active::-moz-range-thumb {\n          box-shadow: var(---shadow-8-rotate);\n        }\n\n        /* stylelint-disable-next-line no-descending-specificity */ /* stylelint ERROR */\n        input[type=range]::-ms-thumb {\n          width: 10px;\n          height: 20px;\n          margin-top: 0;\n\n          background: #999999;\n          /* background: var(---color-element-enabled); */\n          border: 0;\n          border-radius: 4px;\n          box-shadow: var(---shadow-2-rotate);\n        }\n\n        /* stylelint-disable-next-line no-descending-specificity */ /* stylelint ERROR */\n        input[type=range]:disabled::-ms-thumb {\n          background: var(---color-element-disabled);\n          box-shadow: none;\n        }\n\n        /* stylelint-disable-next-line no-descending-specificity */ /* stylelint ERROR */\n        input[type=range]:enabled::-ms-thumb {\n          background: var(---color-element-enabled);\n          box-shadow: var(---shadow-2-rotate);\n        }\n\n        /* stylelint-disable-next-line no-descending-specificity */ /* stylelint ERROR */\n        input[type=range]:enabled:hover::-ms-thumb {\n          box-shadow: var(---shadow-4-rotate);\n        }\n\n        /* stylelint-disable-next-line no-descending-specificity */ /* stylelint ERROR */\n        input[type=range]:enabled:active::-ms-thumb {\n          box-shadow: var(---shadow-8-rotate);\n        }\n\n        /* stylelint-disable-next-line no-descending-specificity */ /* stylelint ERROR */\n        :host(.keyboard) input[type=range]:enabled:focus::-ms-thumb {\n          box-shadow: var(---shadow-4-rotate);\n        }\n\n        :host(.keyboard) input[type=range]:enabled:focus:active::-ms-thumb {\n          box-shadow: var(---shadow-8-rotate);\n        }\n      "])), o$3(this.cssBoxShadow(2, true, false)), o$3(this.cssBoxShadow(4, true, false)), o$3(this.cssBoxShadow(8, true, false)))];
      }
    }]);

    return DecidablesSlider;
  }(DecidablesElement);
  customElements.define('decidables-slider', DecidablesSlider);

  var _templateObject$j, _templateObject2$h;

  var DecidablesSpinner = /*#__PURE__*/function (_DecidablesElement) {
    _inherits(DecidablesSpinner, _DecidablesElement);

    var _super = _createSuper(DecidablesSpinner);

    function DecidablesSpinner() {
      var _this;

      _classCallCheck(this, DecidablesSpinner);

      _this = _super.call(this); // Attributes

      _this.disabled = false;
      _this.max = undefined;
      _this.min = undefined;
      _this.step = undefined;
      _this.value = undefined;
      return _this;
    }

    _createClass(DecidablesSpinner, [{
      key: "inputted",
      value: function inputted(event) {
        this.value = event.target.value;
      }
    }, {
      key: "render",
      value: function render() {
        return $(_templateObject$j || (_templateObject$j = _taggedTemplateLiteral(["\n      <label>\n        <slot></slot>\n        <input ?disabled=", " type=\"number\" min=", " max=", " step=", " .value=", " @input=", ">\n      </label>\n    "])), this.disabled, l(this.min), l(this.max), l(this.step), this.value, this.inputted.bind(this));
      }
    }], [{
      key: "properties",
      get: function get() {
        return {
          disabled: {
            attribute: 'disabled',
            type: Boolean,
            reflect: true
          },
          max: {
            attribute: 'max',
            type: Number,
            reflect: true
          },
          min: {
            attribute: 'min',
            type: Number,
            reflect: true
          },
          step: {
            attribute: 'step',
            type: Number,
            reflect: true
          },
          value: {
            attribute: 'value',
            type: Number,
            reflect: true
          }
        };
      }
    }, {
      key: "styles",
      get: function get() {
        return [_get(_getPrototypeOf(DecidablesSpinner), "styles", this), r$2(_templateObject2$h || (_templateObject2$h = _taggedTemplateLiteral(["\n        :host {\n          ---decidables-spinner-font-size: var(--decidables-spinner-font-size, 1.125rem);\n          ---decidables-spinner-input-width: var(--decidables-spinner-input-width, 4rem);\n          ---decidables-spinner-prefix: var(--decidables-spinner-prefix, \"\");\n\n          display: block;\n        }\n\n        label {\n          position: relative;\n          display: flex;\n\n          flex-direction: column;\n\n          align-items: center;\n\n          margin: 0;\n\n          font-size: 0.75rem;\n        }\n\n        label::before {\n          position: absolute;\n          bottom: 1px;\n          left: calc(50% - var(---decidables-spinner-input-width) / 2 + 0.25rem);\n\n          font-size: var(---decidables-spinner-font-size);\n          line-height: normal;\n\n          content: var(---decidables-spinner-prefix);\n        }\n\n        input[type=number] {\n          width: var(---decidables-spinner-input-width);\n\n          font-family: var(---font-family-base);\n          font-size: var(---decidables-spinner-font-size);\n          color: inherit;\n          text-align: right;\n\n          background: none;\n          border: 0;\n          border-radius: 0;\n          outline: none;\n          box-shadow: var(---shadow-2);\n\n          -webkit-appearance: none; /* stylelint-disable-line property-no-vendor-prefix */\n        }\n\n        input[type=number]:hover {\n          box-shadow: var(---shadow-4);\n        }\n\n        input[type=number]:focus,\n        input[type=number]:active {\n          box-shadow: var(---shadow-8);\n        }\n\n        input[type=number]:disabled {\n          color: var(---color-text);\n\n          border: 0;\n          box-shadow: none;\n\n          /* HACK: Use correct text color in Safari */\n          -webkit-opacity: 1;\n          /* HACK: Hide spinners in disabled input for Firefox and Safari */\n          -moz-appearance: textfield; /* stylelint-disable-line property-no-vendor-prefix */\n          /* HACK: Use correct text color in Safari */\n          -webkit-text-fill-color: var(---color-text);\n        }\n\n        /* HACK: Hide spinners in disabled input for Firefox and Safari */\n        input[type=number]:disabled::-webkit-outer-spin-button,\n        input[type=number]:disabled::-webkit-inner-spin-button {\n          margin: 0;\n          -webkit-appearance: none; /* stylelint-disable-line property-no-vendor-prefix */\n        }\n      "])))];
      }
    }]);

    return DecidablesSpinner;
  }(DecidablesElement);
  customElements.define('decidables-spinner', DecidablesSpinner);

  var _templateObject$i, _templateObject2$g;

  var DecidablesSwitch = /*#__PURE__*/function (_DecidablesElement) {
    _inherits(DecidablesSwitch, _DecidablesElement);

    var _super = _createSuper(DecidablesSwitch);

    function DecidablesSwitch() {
      var _this;

      _classCallCheck(this, DecidablesSwitch);

      _this = _super.call(this); // Attributes

      _this.checked = false;
      _this.disabled = false;
      return _this;
    }

    _createClass(DecidablesSwitch, [{
      key: "changed",
      value: function changed(event) {
        this.checked = event.target.checked;
        this.dispatchEvent(new CustomEvent('change', {
          detail: {
            checked: this.checked
          },
          bubbles: true
        }));
      }
    }, {
      key: "render",
      value: function render() {
        return $(_templateObject$i || (_templateObject$i = _taggedTemplateLiteral(["\n      <input type=\"checkbox\" id=", " ?checked=", " ?disabled=", " @change=", ">\n      <label for=", ">\n        <slot name=\"off-label\"></slot>\n      </label>\n      <label for=", ">\n        <slot></slot>\n      </label>\n    "])), "".concat(this.uniqueId, "-checkbox"), this.checked, this.disabled, this.changed.bind(this), "".concat(this.uniqueId, "-checkbox"), "".concat(this.uniqueId, "-checkbox"));
      }
    }], [{
      key: "properties",
      get: function get() {
        return {
          checked: {
            attribute: 'checked',
            type: Boolean,
            reflect: true
          },
          disabled: {
            attribute: 'disabled',
            type: Boolean,
            reflect: true
          }
        };
      }
    }, {
      key: "styles",
      get: function get() {
        return [_get(_getPrototypeOf(DecidablesSwitch), "styles", this), r$2(_templateObject2$g || (_templateObject2$g = _taggedTemplateLiteral(["\n        :host {\n          display: flex;\n\n          flex-direction: column;\n\n          align-items: center;\n          justify-content: center;\n        }\n\n        /* Adapted from https://codepen.io/guuslieben/pen/YyPRVP */\n        input[type=checkbox] {\n          /* visuallyhidden: https://github.com/h5bp/html5-boilerplate/blob/master/dist/doc/css.md */\n          position: absolute;\n\n          width: 1px;\n          height: 1px;\n          padding: 0;\n          margin: -1px;\n          overflow: hidden;\n          clip: rect(0 0 0 0);\n\n          white-space: nowrap;\n\n          border: 0;\n          clip-path: inset(100%); /* May cause a performance issue: https://github.com/h5bp/html5-boilerplate/issues/2021 */\n        }\n\n        input[type=checkbox] + label {\n          order: 1;\n\n          margin: 0 0.25rem 0.25rem;\n\n          font-weight: 400;\n        }\n\n        input[type=checkbox] + label + label {\n          position: relative;\n\n          min-width: 24px;\n          padding: 0 0 36px;\n          margin: 0.25rem 0.25rem 0;\n\n          font-weight: 400;\n\n          outline: none;\n        }\n\n        input[type=checkbox] + label + label::before,\n        input[type=checkbox] + label + label::after {\n          position: absolute;\n\n          left: 50%;\n\n          margin: 0;\n\n          content: \"\";\n\n          outline: 0;\n\n          transition: all var(---transition-duration) ease;\n          transform: translate(-50%, 0);\n        }\n\n        input[type=checkbox] + label + label::before {\n          bottom: 1px;\n\n          width: 8px;\n          height: 34px;\n\n          background-color: var(---color-element-disabled);\n          border-radius: 4px;\n        }\n\n        input[type=checkbox] + label + label::after {\n          bottom: 0;\n\n          width: 18px;\n          height: 18px;\n\n          background-color: var(---color-element-enabled);\n          border-radius: 50%;\n          box-shadow: var(---shadow-2);\n        }\n\n        input[type=checkbox]:checked + label + label::after {\n          transform: translate(-50%, -100%);\n        }\n\n        input[type=checkbox]:disabled + label + label::after {\n          background-color: var(---color-element-disabled);\n          box-shadow: none;\n        }\n\n        input[type=checkbox]:enabled + label,\n        input[type=checkbox]:enabled + label + label {\n          cursor: pointer;\n        }\n\n        input[type=checkbox]:enabled + label:hover + label::after,\n        input[type=checkbox]:enabled + label + label:hover::after {\n          box-shadow: var(---shadow-4);\n        }\n\n        input[type=checkbox]:enabled + label:active + label::after,\n        input[type=checkbox]:enabled + label + label:active::after {\n          box-shadow: var(---shadow-8);\n        }\n\n        /* stylelint-disable-next-line selector-max-compound-selectors */\n        :host(.keyboard) input[type=checkbox]:enabled:focus + label + label::after {\n          box-shadow: var(---shadow-4);\n        }\n\n        /* stylelint-disable-next-line selector-max-compound-selectors */\n        :host(.keyboard) input[type=checkbox]:enabled:focus + label + label:active::after,\n        :host(.keyboard) input[type=checkbox]:enabled:focus:active + label + label::after {\n          box-shadow: var(---shadow-8);\n        }\n      "])))];
      }
    }]);

    return DecidablesSwitch;
  }(DecidablesElement);
  customElements.define('decidables-switch', DecidablesSwitch);

  var _templateObject$h, _templateObject2$f;

  var DecidablesToggle = /*#__PURE__*/function (_DecidablesElement) {
    _inherits(DecidablesToggle, _DecidablesElement);

    var _super = _createSuper(DecidablesToggle);

    function DecidablesToggle() {
      var _this;

      _classCallCheck(this, DecidablesToggle);

      _this = _super.call(this); // Attributes

      _this.disabled = false;
      return _this;
    }

    _createClass(DecidablesToggle, [{
      key: "render",
      value: function render() {
        return $(_templateObject$h || (_templateObject$h = _taggedTemplateLiteral(["\n      <fieldset ?disabled=", ">\n        <legend><slot name=\"label\"></slot></legend>\n        <slot></slot>\n      </fieldset>\n    "])), this.disabled);
      }
    }], [{
      key: "properties",
      get: function get() {
        return {
          disabled: {
            attribute: 'disabled',
            type: Boolean,
            reflect: true
          }
        };
      }
    }, {
      key: "styles",
      get: function get() {
        return [_get(_getPrototypeOf(DecidablesToggle), "styles", this), r$2(_templateObject2$f || (_templateObject2$f = _taggedTemplateLiteral(["\n        fieldset {\n          display: flex;\n\n          flex-direction: column;\n\n          align-items: stretch;\n          justify-content: center;\n\n          margin: 0.25rem;\n\n          border: 0;\n        }\n\n        legend {\n          text-align: center;\n        }\n      "])))];
      }
    }]);

    return DecidablesToggle;
  }(DecidablesElement);
  customElements.define('decidables-toggle', DecidablesToggle);

  var _templateObject$g, _templateObject2$e;

  var DecidablesToggleOption = /*#__PURE__*/function (_DecidablesElement) {
    _inherits(DecidablesToggleOption, _DecidablesElement);

    var _super = _createSuper(DecidablesToggleOption);

    function DecidablesToggleOption() {
      var _this;

      _classCallCheck(this, DecidablesToggleOption);

      _this = _super.call(this); // Attributes

      _this.checked = false;
      _this.disabled = false;
      _this.name = undefined;
      _this.value = undefined;
      return _this;
    }

    _createClass(DecidablesToggleOption, [{
      key: "changed",
      value: function changed(event) {
        this.checked = event.target.checked;
        this.dispatchEvent(new CustomEvent('change', {
          detail: {
            checked: this.checked,
            value: this.value
          },
          bubbles: true
        }));
      }
    }, {
      key: "render",
      value: function render() {
        return $(_templateObject$g || (_templateObject$g = _taggedTemplateLiteral(["\n      <input type=\"radio\" id=", " name=", " value=", " .checked=", " @change=", ">\n      <label for=", ">\n        <slot></slot>\n      </label>\n    "])), "".concat(this.uniqueId, "-radio"), this.name, this.value, this.checked, this.changed.bind(this), "".concat(this.uniqueId, "-radio"));
      }
    }], [{
      key: "properties",
      get: function get() {
        return {
          checked: {
            attribute: 'checked',
            type: Boolean,
            reflect: true
          },
          disabled: {
            attribute: 'disabled',
            type: Boolean,
            reflect: true
          },
          name: {
            attribute: 'name',
            type: String,
            reflect: true
          },
          value: {
            attribute: 'value',
            type: String,
            reflect: true
          }
        };
      }
    }, {
      key: "styles",
      get: function get() {
        return [_get(_getPrototypeOf(DecidablesToggleOption), "styles", this), r$2(_templateObject2$e || (_templateObject2$e = _taggedTemplateLiteral(["\n        :host {\n          display: flex;\n        }\n\n        input[type=radio] {\n          /* visuallyhidden: https://github.com/h5bp/html5-boilerplate/blob/master/dist/doc/css.md */\n          position: absolute;\n\n          width: 1px;\n          height: 1px;\n          padding: 0;\n          margin: -1px;\n          overflow: hidden;\n          clip: rect(0 0 0 0);\n\n          white-space: nowrap;\n\n          border: 0;\n          clip-path: inset(100%); /* May cause a performance issue: https://github.com/h5bp/html5-boilerplate/issues/2021 */\n        }\n\n        input[type=radio] + label {\n          width: 100%;\n          padding: 0.375rem 0.75rem;\n\n          font-family: var(---font-family-base);\n          font-size: 1.125rem;\n          line-height: 1.5;\n          color: var(---color-text-inverse);\n          text-align: center;\n\n          cursor: pointer;\n\n          background-color: var(---color-element-enabled);\n          border: 0;\n          border-radius: 0;\n          outline: none;\n\n          box-shadow: var(---shadow-2);\n        }\n\n        input[type=radio]:checked + label {\n          background-color: var(---color-element-selected);\n          outline: none;\n          box-shadow: var(---shadow-2);\n        }\n\n        input[type=radio] + label:hover {\n          z-index: 1;\n\n          outline: none;\n          box-shadow: var(---shadow-4);\n        }\n\n        input[type=radio] + label:active {\n          z-index: 2;\n\n          outline: none;\n          box-shadow: var(---shadow-8);\n        }\n\n        :host(:first-of-type) input[type=radio] + label {\n          border-top-left-radius: 0.25rem;\n          border-top-right-radius: 0.25rem;\n        }\n\n        :host(:last-of-type) input[type=radio] + label {\n          border-bottom-right-radius: 0.25rem;\n          border-bottom-left-radius: 0.25rem;\n        }\n\n        :host(.keyboard) input[type=radio]:focus + label {\n          z-index: 1;\n\n          outline: none;\n          box-shadow: var(---shadow-4);\n        }\n\n        :host(.keyboard) input[type=radio]:focus:checked + label {\n          z-index: 1;\n\n          background-color: var(---color-element-selected);\n          outline: none;\n          box-shadow: var(---shadow-4);\n        }\n\n        :host(.keyboard) input[type=radio]:focus + label:active {\n          z-index: 2;\n\n          outline: none;\n          box-shadow: var(---shadow-8);\n        }\n      "])))];
      }
    }]);

    return DecidablesToggleOption;
  }(DecidablesElement);
  customElements.define('decidables-toggle-option', DecidablesToggleOption);

  /*
    Attribute: Space-separated sequence of strings
    Property: Set of strings
  */
  var DecidablesConverterSet = {
    fromAttribute: function fromAttribute(value) {
      return new Set(value.split(/\s+/));
    },
    toAttribute: function toAttribute(value) {
      return value.size ? _toConsumableArray(value).join(' ') : null;
    }
  };

  var _templateObject$f;
  /*
    DetectableElement Base Class - Not intended for instantiation!
    <detectable-element>
  */

  var DetectableElement = /*#__PURE__*/function (_DecidablesElement) {
    _inherits(DetectableElement, _DecidablesElement);

    var _super = _createSuper(DetectableElement);

    function DetectableElement() {
      var _this;

      _classCallCheck(this, DetectableElement);

      _this = _super.call(this);
      _this.interactive = false;
      return _this;
    }

    _createClass(DetectableElement, null, [{
      key: "properties",
      get: function get() {
        return {
          interactive: {
            attribute: 'interactive',
            type: Boolean,
            reflect: true
          }
        };
      }
    }, {
      key: "colors",
      get: function get() {
        return {
          h: Set1[2],
          m: Set1[4],
          fa: Set1[1],
          cr: Set1[0],
          hr: Set1[5],
          far: Set1[3],
          acc: Set1[8],
          d: Set1[7],
          c: Set1[6],
          s: '#4545d0',
          present: '#f032e6',
          absent: '#10dbc9',
          correct: '#ffffff',
          error: '#000000',
          nr: '#cccccc'
        };
      }
    }, {
      key: "lights",
      get: function get() {
        return Object.keys(DetectableElement.colors).reduce(function (acc, cur) {
          acc[cur] = interpolateRgb(DetectableElement.colors[cur], '#ffffff')(0.5);
          return acc;
        }, {});
      }
    }, {
      key: "darks",
      get: function get() {
        return Object.keys(DetectableElement.colors).reduce(function (acc, cur) {
          acc[cur] = interpolateRgb(DetectableElement.colors[cur], '#000000')(0.5);
          return acc;
        }, {});
      }
    }, {
      key: "styles",
      get: function get() {
        return [_get(_getPrototypeOf(DetectableElement), "styles", this), r$2(_templateObject$f || (_templateObject$f = _taggedTemplateLiteral(["\n        :host {\n          ---color-h: var(--color-h, ", ");\n          ---color-m: var(--color-m, ", ");\n          ---color-fa: var(--color-fa, ", ");\n          ---color-cr: var(--color-cr, ", ");\n          ---color-hr: var(--color-hr, ", ");\n          ---color-far: var(--color-far, ", ");\n          ---color-acc: var(--color-acc, ", ");\n          ---color-d: var(--color-d, ", ");\n          ---color-c: var(--color-c, ", ");\n          ---color-s: var(--color-s, ", ");\n          ---color-present: var(--color-present, ", ");\n          ---color-absent: var(--color-absent, ", ");\n          ---color-correct: var(--color-correct, ", ");\n          ---color-error: var(--color-error, ", ");\n          ---color-nr: var(--color-nr, ", ");\n\n          ---color-h-light: var(--color-h-light, ", ");\n          ---color-m-light: var(--color-m-light, ", ");\n          ---color-fa-light: var(--color-fa-light, ", ");\n          ---color-cr-light: var(--color-cr-light, ", ");\n          ---color-hr-light: var(--color-hr-light, ", ");\n          ---color-far-light: var(--color-far-light, ", ");\n          ---color-acc-light: var(--color-acc-light, ", ");\n          ---color-d-light: var(--color-d-light, ", ");\n          ---color-c-light: var(--color-c-light, ", ");\n          ---color-s-light: var(--color-s-light, ", ");\n          ---color-present-light: var(--color-present-light, ", ");\n          ---color-absent-light: var(--color-absent-light, ", ");\n          ---color-correct-light: var(--color-correct-light, ", ");\n          ---color-error-light: var(--color-error-light, ", ");\n          ---color-nr-light: var(--color-nr-light, ", ");\n\n          ---color-h-dark: var(--color-h-dark, ", ");\n          ---color-m-dark: var(--color-m-dark, ", ");\n          ---color-fa-dark: var(--color-fa-dark, ", ");\n          ---color-cr-dark: var(--color-cr-dark, ", ");\n          ---color-hr-dark: var(--color-hr-dark, ", ");\n          ---color-far-dark: var(--color-far-dark, ", ");\n          ---color-acc-dark: var(--color-acc-dark, ", ");\n          ---color-d-dark: var(--color-d-dark, ", ");\n          ---color-c-dark: var(--color-c-dark, ", ");\n          ---color-s-dark: var(--color-s-dark, ", ");\n          ---color-present-dark: var(--color-present-dark, ", ");\n          ---color-absent-dark: var(--color-absent-dark, ", ");\n          ---color-correct-dark: var(--color-correct-dark, ", ");\n          ---color-error-dark: var(--color-error-dark, ", ");\n          ---color-nr-dark: var(--color-nr-dark, ", ");\n        }\n      "])), o$3(this.colors.h), o$3(this.colors.m), o$3(this.colors.fa), o$3(this.colors.cr), o$3(this.colors.hr), o$3(this.colors.far), o$3(this.colors.acc), o$3(this.colors.d), o$3(this.colors.c), o$3(this.colors.s), o$3(this.colors.present), o$3(this.colors.absent), o$3(this.colors.correct), o$3(this.colors.error), o$3(this.colors.nr), o$3(this.lights.h), o$3(this.lights.m), o$3(this.lights.fa), o$3(this.lights.cr), o$3(this.lights.hr), o$3(this.lights.far), o$3(this.lights.acc), o$3(this.lights.d), o$3(this.lights.c), o$3(this.lights.s), o$3(this.lights.present), o$3(this.lights.absent), o$3(this.lights.correct), o$3(this.lights.error), o$3(this.lights.nr), o$3(this.darks.h), o$3(this.darks.m), o$3(this.darks.fa), o$3(this.darks.cr), o$3(this.darks.hr), o$3(this.darks.far), o$3(this.darks.acc), o$3(this.darks.d), o$3(this.darks.c), o$3(this.darks.s), o$3(this.darks.present), o$3(this.darks.absent), o$3(this.darks.correct), o$3(this.darks.error), o$3(this.darks.nr))];
      }
    }]);

    return DetectableElement;
  }(DecidablesElement);

  var _templateObject$e, _templateObject2$d;
  /*
    RDKTask element
    <rdk-task>

    Attributes:
    Dots; Coherence;
    # Direction, Speed, Lifetime
  */

  var RDKTask = /*#__PURE__*/function (_DetectableElement) {
    _inherits(RDKTask, _DetectableElement);

    var _super = _createSuper(RDKTask);

    function RDKTask() {
      var _this;

      _classCallCheck(this, RDKTask);

      _this = _super.call(this); // Attributes

      _this.coherence = 0.5; // Proportion of dots moving coherently

      _this.count = 100; // Number of dots

      _this.probability = 0.5; // Probability of signal (as opposed to noise)

      _this.duration = 2000; // Duration of stimulus in milliseconds

      _this.wait = 2000; // Duration of wait period for response in milliseconds

      _this.iti = 2000; // Duration of inter-trial interval in milliseconds

      _this.trials = 5; // Number of trials per block

      _this.running = false; // Currently executing block of trials
      // Properties

      _this.direction = -1; // Direction of current trial in degrees

      _this.lifetime = 400; // Lifetime of each dot in milliseconds

      _this.speed = 50; // Rate of dot movement in pixels per second

      _this.width = NaN; // Width of component in pixels

      _this.height = NaN; // Height of component in pixels

      _this.rem = NaN; // Pixels per rem for component
      // Private

      _this.firstUpdate = true;
      _this.COHERENT = 0; // "Constant" for index to coherent dots

      _this.RANDOM = 1; // "Constant" for index to random dots

      _this.dots = [[], []]; // Array of array of dots

      _this.trial = 0; // Count of current trial

      _this.states = ['resetted', 'iti', 'stimulus', 'wait', 'ended']; // Possible states of task

      _this.state = 'resetted'; // Current state of task

      _this.baseTime = 0; // Real time, in milliseconds, that the current block started

      _this.pauseTime = 0; // Real time, in milliseconds, that block was paused at

      _this.startTime = 0; // Virtual time, in milliseconds, that current stage of trial started

      _this.lastTime = 0; // Virtual time, in milliseconds, of the most recent frame

      _this.currentDirection = undefined; // Direction in degrees for current trial

      _this.signals = ['present', 'absent']; // Possible trial types

      _this.signal = undefined; // Current trial type

      _this.runner = undefined; // D3 Interval for frame timing

      _this.xScale = undefined; // D3 Scale for x-axis

      _this.yScale = undefined; // D3 Scale for y-axis

      return _this;
    }

    _createClass(RDKTask, [{
      key: "render",
      value: function render() {
        // eslint-disable-line class-methods-use-this
        return $(_templateObject$e || (_templateObject$e = _taggedTemplateLiteral([""])));
      }
    }, {
      key: "getDimensions",
      value: function getDimensions() {
        this.width = parseFloat(this.getComputedStyleValue('width'), 10);
        this.height = parseFloat(this.getComputedStyleValue('height'), 10);
        this.rem = parseFloat(getComputedStyle(document.documentElement).getPropertyValue('font-size'), 10); // console.log(`rdk-task: width = ${this.width}, height = ${this.height}, rem = ${this.rem}`);
      }
    }, {
      key: "connectedCallback",
      value: function connectedCallback() {
        _get(_getPrototypeOf(RDKTask.prototype), "connectedCallback", this).call(this);

        window.addEventListener('resize', this.getDimensions.bind(this));
      }
    }, {
      key: "disconnectedCallback",
      value: function disconnectedCallback() {
        window.removeEventListener('resize', this.getDimensions.bind(this));

        _get(_getPrototypeOf(RDKTask.prototype), "disconnectedCallback", this).call(this);
      }
    }, {
      key: "firstUpdated",
      value: function firstUpdated(changedProperties) {
        _get(_getPrototypeOf(RDKTask.prototype), "firstUpdated", this).call(this, changedProperties); // Get the width and height after initial render/update has occurred
        // HACK Edge: Edge doesn't have width/height until after a 0ms timeout


        window.setTimeout(this.getDimensions.bind(this), 0);
      }
    }, {
      key: "update",
      value: function update(changedProperties) {
        var _this2 = this;

        _get(_getPrototypeOf(RDKTask.prototype), "update", this).call(this, changedProperties); // Bail out if we can't get the width/height/rem


        if (Number.isNaN(this.width) || Number.isNaN(this.height) || Number.isNaN(this.rem)) {
          return;
        }

        var elementWidth = this.width;
        var elementHeight = this.height;
        var elementSize = Math.min(elementWidth, elementHeight);
        var margin = {
          top: 0.25 * this.rem,
          bottom: 0.25 * this.rem,
          left: 0.25 * this.rem,
          right: 0.25 * this.rem
        };
        var height = elementSize - (margin.top + margin.bottom);
        var width = elementSize - (margin.left + margin.right); // X Scale

        this.xScale = linear().domain([-1, 1]).range([0, width]); // Y Scale

        this.yScale = linear().domain([1, -1]).range([0, height]); // Svg
        //  DATA-JOIN

        var svgUpdate = select(this.renderRoot).selectAll('.main').data([{
          width: this.width,
          height: this.height,
          rem: this.rem
        }]); //  ENTER

        var svgEnter = svgUpdate.enter().append('svg').classed('main', true); //  MERGE

        var svgMerge = svgEnter.merge(svgUpdate).attr('viewBox', "0 0 ".concat(elementSize, " ").concat(elementSize)); // Clippath
        //  ENTER

        svgEnter.append('clipPath').attr('id', 'clip-rdk-task').append('circle'); //  MERGE

        svgMerge.select('clipPath circle').attr('cx', this.xScale(0)).attr('cy', this.yScale(0)).attr('r', this.xScale(1) - this.xScale(0)); // Plot
        //  ENTER

        var plotEnter = svgEnter.append('g').classed('plot', true); //  MERGE

        var plotMerge = svgMerge.select('.plot').attr('transform', "translate(".concat(margin.left, ", ").concat(margin.top, ")")); // Underlayer
        //  ENTER

        var underlayerEnter = plotEnter.append('g').classed('underlayer', true); // MERGE

        var underlayerMerge = plotMerge.select('.underlayer'); // Background
        //  ENTER

        underlayerEnter.append('circle').classed('background', true); //  MERGE

        underlayerMerge.select('.background').attr('cx', this.xScale(0)).attr('cy', this.yScale(0)).attr('r', this.xScale(1) - this.xScale(0)); // Content
        //  ENTER

        plotEnter.append('g').classed('content', true).attr('clip-path', 'url(#clip-rdk-task)'); //  MERGE

        var contentMerge = plotMerge.select('.content'); // Dot Groups
        //  DATA-JOIN

        var dotsUpdate = contentMerge.selectAll('.dots').data([[], []]); //  ENTER

        dotsUpdate.enter().append('g').classed('dots', true).classed('coherent', function (datum, index) {
          return index === _this2.COHERENT;
        }).classed('random', function (datum, index) {
          return index === _this2.RANDOM;
        }); // Overlayer
        //  ENTER

        var overlayerEnter = plotEnter.append('g').classed('overlayer', true); // MERGE

        var overlayerMerge = plotMerge.select('.overlayer'); // Outline
        //  ENTER

        overlayerEnter.append('circle').classed('outline', true); //  MERGE

        overlayerMerge.select('.outline').attr('cx', this.xScale(0)).attr('cy', this.yScale(0)).attr('r', this.xScale(1) - this.yScale(0)); // Start or stop trial block

        if (this.firstUpdate || changedProperties.has('running')) {
          if (this.running) {
            // (Re)Start
            if (this.pauseTime) {
              // Shift timeline forward as if paused time never happened
              this.baseTime += now() - this.pauseTime;
              this.pauseTime = 0;
            }

            this.runner = interval(this.run.bind(this), 20); // FIXME??
          } else if (this.runner !== undefined) {
            // Pause
            this.runner.stop();
            this.pauseTime = now();
          }
        }

        this.firstUpdate = false;
      }
    }, {
      key: "reset",
      value: function reset() {
        if (this.runner !== undefined) {
          this.runner.stop();
        }

        this.running = false;
        this.trial = 0;
        this.state = 'resetted';
        this.baseTime = 0;
        this.pauseTime = 0;
        this.startTime = 0;
        this.lastTime = 0;
        this.signal = undefined;
        this.currentDirection = undefined;
        var dotsUpdate = select(this.renderRoot).select('.content').selectAll('.dots').data([[], []]);
        var dotUpdate = dotsUpdate.selectAll('.dot').data(function (datum) {
          return datum;
        });
        dotUpdate.exit().remove();
        var fixationUpdate = select(this.renderRoot).select('.content').selectAll('.fixation').data([]);
        fixationUpdate.exit().remove();
        var queryUpdate = select(this.renderRoot).select('.content').selectAll('.query').data([]);
        queryUpdate.exit().remove();
      }
    }, {
      key: "run",
      value: function
        /* elapsed */
      run() {
        var realTime = now();
        var currentTime = this.baseTime ? realTime - this.baseTime : 0;
        var elapsedTime = this.baseTime ? currentTime - this.startTime : 0;
        var frameTime = this.baseTime ? currentTime - this.lastTime : 0;
        this.lastTime = currentTime;
        var newTrial = false;

        if (this.state === 'resetted') {
          // Start block with an ITI
          this.state = 'iti';
          this.baseTime = realTime;
          this.startTime = 0;
          this.dispatchEvent(new CustomEvent('rdk-block-start', {
            detail: {
              trials: this.trials
            },
            bubbles: true
          }));
        } else if (this.state === 'iti' && elapsedTime >= this.iti) {
          // Start new trial with a stimulus
          newTrial = true;
          this.trial += 1;
          this.state = 'stimulus';
          this.startTime = currentTime;
          this.signal = Math.random() < this.probability ? 'present' : 'absent';
          this.currentDirection = this.signal === 'absent' ? undefined : this.direction >= 0 ? this.direction : Math.random() * 360;
          this.dispatchEvent(new CustomEvent('rdk-trial-start', {
            detail: {
              trials: this.trials,
              duration: this.duration,
              wait: this.wait,
              iti: this.iti,
              trial: this.trial,
              signal: this.signal
            },
            bubbles: true
          }));
        } else if (this.state === 'stimulus' && elapsedTime >= this.duration) {
          // Stimulus is over, now wait
          this.state = 'wait';
          this.startTime = currentTime;
          this.dispatchEvent(new CustomEvent('rdk-trial-middle', {
            detail: {
              trials: this.trials,
              duration: this.duration,
              wait: this.wait,
              iti: this.iti,
              trial: this.trial,
              signal: this.signal
            },
            bubbles: true
          }));
        } else if (this.state === 'wait' && elapsedTime >= this.wait) {
          // Wait is over, end of trial
          this.dispatchEvent(new CustomEvent('rdk-trial-end', {
            detail: {
              trials: this.trials,
              duration: this.duration,
              wait: this.wait,
              iti: this.iti,
              trial: this.trial,
              signal: this.signal
            },
            bubbles: true
          }));

          if (this.trial >= this.trials) {
            // End of block
            this.runner.stop();
            this.running = false;
            this.state = 'ended';
            this.baseTime = 0;
            this.pauseTime = 0;
            this.startTime = 0;
            this.lastTime = 0;
            this.signal = undefined;
            this.currentDirection = undefined;
            this.dispatchEvent(new CustomEvent('rdk-block-end', {
              detail: {
                trials: this.trial
              },
              bubbles: true
            }));
          } else {
            // ITI
            this.state = 'iti';
            this.startTime = currentTime;
          }
        } // Dots


        if (this.state === 'stimulus') {
          this.dots[this.COHERENT].length = this.signal === 'present' ? Math.round(this.count * this.coherence) : 0;
          this.dots[this.RANDOM].length = this.signal === 'present' ? this.count - this.dots[this.COHERENT].length : this.count;

          for (var t = 0; t < this.dots.length; t += 1) {
            for (var i = 0; i < this.dots[t].length; i += 1) {
              var newDot = this.dots[t][i] === undefined;

              if (newDot) {
                this.dots[t][i] = {};
              }

              var dot = this.dots[t][i];

              if (newTrial || newDot) {
                dot.direction = t === this.RANDOM ? Math.random() * 360 : this.currentDirection;
                dot.birth = currentTime - Math.floor(Math.random() * this.lifetime);
                var angle = Math.random() * 2 * Math.PI;
                var radius = Math.sqrt(Math.random());
                dot.x = this.xScale(radius * Math.cos(angle));
                dot.y = this.yScale(radius * Math.sin(angle));
              } else if (currentTime > dot.birth + this.lifetime) {
                // Dot has died, so rebirth
                dot.birth += this.lifetime;
                dot.direction = t === this.RANDOM ? Math.random() * 360 : this.currentDirection;

                var _angle = Math.random() * 2 * Math.PI;

                var _radius = Math.sqrt(Math.random());

                dot.x = this.xScale(_radius * Math.cos(_angle));
                dot.y = this.yScale(_radius * Math.sin(_angle));
              } else {
                if (t === this.COHERENT) {
                  dot.direction = this.currentDirection;
                }

                var directionR = dot.direction * (Math.PI / 180);
                dot.dx = this.speed * (frameTime / 1000) * Math.cos(directionR);
                dot.dy = this.speed * (frameTime / 1000) * Math.sin(directionR); // Update position

                dot.x += dot.dx;
                dot.y += dot.dy; // Calculate squared distance from center

                var distance2 = Math.pow(dot.x - this.xScale(0), 2) + Math.pow(dot.y - this.yScale(0), 2);
                var radius2 = Math.pow(this.xScale(1) - this.xScale(0), 2);

                if (distance2 > radius2) {
                  // Dot has exited so move to other side
                  dot.x = -(dot.x - this.xScale(0)) + this.xScale(0);
                  dot.y = -(dot.y - this.yScale(0)) + this.yScale(0);
                }
              }
            }
          }
        } // Fixation
        //  DATA-JOIN


        var fixationUpdate = select(this.renderRoot).select('.content').selectAll('.fixation').data(this.state === 'iti' ? [true] : []); //  ENTER

        var fixationEnter = fixationUpdate.enter().append('g').classed('fixation', true);
        fixationEnter.append('line').attr('x1', this.xScale(-0.1)).attr('y1', this.xScale(0)).attr('x2', this.xScale(0.1)).attr('y2', this.xScale(0));
        fixationEnter.append('line').attr('x1', this.xScale(0)).attr('y1', this.xScale(-0.1)).attr('x2', this.xScale(0)).attr('y2', this.xScale(0.1)); //  EXIT

        fixationUpdate.exit().remove(); // Dots
        //  DATA-JOIN

        var dotsUpdate = select(this.renderRoot).select('.content').selectAll('.dots').data(this.state === 'stimulus' ? this.dots : [[], []]);
        var dotUpdate = dotsUpdate.selectAll('.dot').data(function (datum) {
          return datum;
        }); //  ENTER

        var dotEnter = dotUpdate.enter().append('circle').classed('dot', true).attr('r', 2);
        /* HACK: Firefox does not support CSS SVG Geometry Properties */
        //  MERGE

        dotEnter.merge(dotUpdate).attr('cx', function (datum) {
          return datum.x;
        }).attr('cy', function (datum) {
          return datum.y;
        }); //  EXIT

        dotUpdate.exit().remove(); // Query
        //  DATA-JOIN

        var queryUpdate = select(this.renderRoot).select('.content').selectAll('.query').data(this.state === 'wait' ? [true] : []); //  ENTER

        var queryEnter = queryUpdate.enter().append('g').classed('query', true);
        queryEnter.append('text').attr('x', this.xScale(0)).attr('y', this.xScale(0)).attr('text-anchor', 'middle').attr('alignment-baseline', 'middle').text('?'); //  EXIT

        queryUpdate.exit().remove();
      }
    }], [{
      key: "properties",
      get: function get() {
        return {
          coherence: {
            attribute: 'coherence',
            type: Number,
            reflect: true
          },
          count: {
            attribute: 'count',
            type: Number,
            reflect: true
          },
          probability: {
            attribute: 'probability',
            type: Number,
            reflect: true
          },
          duration: {
            attribute: 'duration',
            type: Number,
            reflect: true
          },
          wait: {
            attribute: 'wait',
            type: Number,
            reflect: true
          },
          iti: {
            attribute: 'iti',
            type: Number,
            reflect: true
          },
          trials: {
            attribute: 'trials',
            type: Number,
            reflect: true
          },
          running: {
            attribute: 'running',
            type: Boolean,
            reflect: true
          },
          direction: {
            attribute: false,
            type: Number,
            reflect: false
          },
          lifetime: {
            attribute: false,
            type: Number,
            reflect: false
          },
          speed: {
            attribute: false,
            type: Number,
            reflect: false
          },
          width: {
            attribute: false,
            type: Number,
            reflect: false
          },
          height: {
            attribute: false,
            type: Number,
            reflect: false
          },
          rem: {
            attribute: false,
            type: Number,
            reflect: false
          }
        };
      }
    }, {
      key: "styles",
      get: function get() {
        return [_get(_getPrototypeOf(RDKTask), "styles", this), r$2(_templateObject2$d || (_templateObject2$d = _taggedTemplateLiteral(["\n        :host {\n          display: inline-block;\n\n          width: 10rem;\n          height: 10rem;\n        }\n\n        .main {\n          width: 100%;\n          height: 100%;\n        }\n\n        .background {\n          fill: var(---color-element-disabled);\n          stroke: none;\n        }\n\n        .outline {\n          fill: none;\n          stroke: var(---color-element-emphasis);\n          stroke-width: 2px;\n        }\n\n        .dot {\n          /* r: 2px; HACK: Firefox does not support CSS SVG Geometry Properties */\n        }\n\n        .dots.coherent {\n          fill: var(---color-background);\n        }\n\n        .dots.random {\n          fill: var(---color-background);\n        }\n\n        .fixation {\n          stroke: var(---color-text);\n          stroke-width: 2px;\n        }\n\n        .query {\n          font-size: 1.75rem;\n          font-weight: 600;\n        }\n      "])))];
      }
    }]);

    return RDKTask;
  }(DetectableElement);
  customElements.define('rdk-task', RDKTask);

  var jstat = createCommonjsModule(function (module, exports) {
    (function (window, factory) {
      {
        module.exports = factory();
      }
    })(commonjsGlobal, function () {
      var jStat = function (Math, undefined$1) {
        // For quick reference.
        var concat = Array.prototype.concat;
        var slice = Array.prototype.slice;
        var toString = Object.prototype.toString; // Calculate correction for IEEE error
        // TODO: This calculation can be improved.

        function calcRdx(n, m) {
          var val = n > m ? n : m;
          return Math.pow(10, 17 - ~~(Math.log(val > 0 ? val : -val) * Math.LOG10E));
        }

        var isArray = Array.isArray || function isArray(arg) {
          return toString.call(arg) === '[object Array]';
        };

        function isFunction(arg) {
          return toString.call(arg) === '[object Function]';
        }

        function isNumber(num) {
          return typeof num === 'number' ? num - num === 0 : false;
        } // Converts the jStat matrix to vector.


        function toVector(arr) {
          return concat.apply([], arr);
        } // The one and only jStat constructor.


        function jStat() {
          return new jStat._init(arguments);
        } // TODO: Remove after all references in src files have been removed.


        jStat.fn = jStat.prototype; // By separating the initializer from the constructor it's easier to handle
        // always returning a new instance whether "new" was used or not.

        jStat._init = function _init(args) {
          // If first argument is an array, must be vector or matrix.
          if (isArray(args[0])) {
            // Check if matrix.
            if (isArray(args[0][0])) {
              // See if a mapping function was also passed.
              if (isFunction(args[1])) args[0] = jStat.map(args[0], args[1]); // Iterate over each is faster than this.push.apply(this, args[0].

              for (var i = 0; i < args[0].length; i++) {
                this[i] = args[0][i];
              }

              this.length = args[0].length; // Otherwise must be a vector.
            } else {
              this[0] = isFunction(args[1]) ? jStat.map(args[0], args[1]) : args[0];
              this.length = 1;
            } // If first argument is number, assume creation of sequence.

          } else if (isNumber(args[0])) {
            this[0] = jStat.seq.apply(null, args);
            this.length = 1; // Handle case when jStat object is passed to jStat.
          } else if (args[0] instanceof jStat) {
            // Duplicate the object and pass it back.
            return jStat(args[0].toArray()); // Unexpected argument value, return empty jStat object.
            // TODO: This is strange behavior. Shouldn't this throw or some such to let
            // the user know they had bad arguments?
          } else {
            this[0] = [];
            this.length = 1;
          }

          return this;
        };

        jStat._init.prototype = jStat.prototype;
        jStat._init.constructor = jStat; // Utility functions.
        // TODO: for internal use only?

        jStat.utils = {
          calcRdx: calcRdx,
          isArray: isArray,
          isFunction: isFunction,
          isNumber: isNumber,
          toVector: toVector
        };
        jStat._random_fn = Math.random;

        jStat.setRandom = function setRandom(fn) {
          if (typeof fn !== 'function') throw new TypeError('fn is not a function');
          jStat._random_fn = fn;
        }; // Easily extend the jStat object.
        // TODO: is this seriously necessary?


        jStat.extend = function extend(obj) {
          var i, j;

          if (arguments.length === 1) {
            for (j in obj) {
              jStat[j] = obj[j];
            }

            return this;
          }

          for (i = 1; i < arguments.length; i++) {
            for (j in arguments[i]) {
              obj[j] = arguments[i][j];
            }
          }

          return obj;
        }; // Returns the number of rows in the matrix.


        jStat.rows = function rows(arr) {
          return arr.length || 1;
        }; // Returns the number of columns in the matrix.


        jStat.cols = function cols(arr) {
          return arr[0].length || 1;
        }; // Returns the dimensions of the object { rows: i, cols: j }


        jStat.dimensions = function dimensions(arr) {
          return {
            rows: jStat.rows(arr),
            cols: jStat.cols(arr)
          };
        }; // Returns a specified row as a vector or return a sub matrix by pick some rows


        jStat.row = function row(arr, index) {
          if (isArray(index)) {
            return index.map(function (i) {
              return jStat.row(arr, i);
            });
          }

          return arr[index];
        }; // return row as array
        // rowa([[1,2],[3,4]],0) -> [1,2]


        jStat.rowa = function rowa(arr, i) {
          return jStat.row(arr, i);
        }; // Returns the specified column as a vector or return a sub matrix by pick some
        // columns


        jStat.col = function col(arr, index) {
          if (isArray(index)) {
            var submat = jStat.arange(arr.length).map(function () {
              return new Array(index.length);
            });
            index.forEach(function (ind, i) {
              jStat.arange(arr.length).forEach(function (j) {
                submat[j][i] = arr[j][ind];
              });
            });
            return submat;
          }

          var column = new Array(arr.length);

          for (var i = 0; i < arr.length; i++) {
            column[i] = [arr[i][index]];
          }

          return column;
        }; // return column as array
        // cola([[1,2],[3,4]],0) -> [1,3]


        jStat.cola = function cola(arr, i) {
          return jStat.col(arr, i).map(function (a) {
            return a[0];
          });
        }; // Returns the diagonal of the matrix


        jStat.diag = function diag(arr) {
          var nrow = jStat.rows(arr);
          var res = new Array(nrow);

          for (var row = 0; row < nrow; row++) {
            res[row] = [arr[row][row]];
          }

          return res;
        }; // Returns the anti-diagonal of the matrix


        jStat.antidiag = function antidiag(arr) {
          var nrow = jStat.rows(arr) - 1;
          var res = new Array(nrow);

          for (var i = 0; nrow >= 0; nrow--, i++) {
            res[i] = [arr[i][nrow]];
          }

          return res;
        }; // Transpose a matrix or array.


        jStat.transpose = function transpose(arr) {
          var obj = [];
          var objArr, rows, cols, j, i; // Make sure arr is in matrix format.

          if (!isArray(arr[0])) arr = [arr];
          rows = arr.length;
          cols = arr[0].length;

          for (i = 0; i < cols; i++) {
            objArr = new Array(rows);

            for (j = 0; j < rows; j++) {
              objArr[j] = arr[j][i];
            }

            obj.push(objArr);
          } // If obj is vector, return only single array.


          return obj.length === 1 ? obj[0] : obj;
        }; // Map a function to an array or array of arrays.
        // "toAlter" is an internal variable.


        jStat.map = function map(arr, func, toAlter) {
          var row, nrow, ncol, res, col;
          if (!isArray(arr[0])) arr = [arr];
          nrow = arr.length;
          ncol = arr[0].length;
          res = toAlter ? arr : new Array(nrow);

          for (row = 0; row < nrow; row++) {
            // if the row doesn't exist, create it
            if (!res[row]) res[row] = new Array(ncol);

            for (col = 0; col < ncol; col++) {
              res[row][col] = func(arr[row][col], row, col);
            }
          }

          return res.length === 1 ? res[0] : res;
        }; // Cumulatively combine the elements of an array or array of arrays using a function.


        jStat.cumreduce = function cumreduce(arr, func, toAlter) {
          var row, nrow, ncol, res, col;
          if (!isArray(arr[0])) arr = [arr];
          nrow = arr.length;
          ncol = arr[0].length;
          res = toAlter ? arr : new Array(nrow);

          for (row = 0; row < nrow; row++) {
            // if the row doesn't exist, create it
            if (!res[row]) res[row] = new Array(ncol);
            if (ncol > 0) res[row][0] = arr[row][0];

            for (col = 1; col < ncol; col++) {
              res[row][col] = func(res[row][col - 1], arr[row][col]);
            }
          }

          return res.length === 1 ? res[0] : res;
        }; // Destructively alter an array.


        jStat.alter = function alter(arr, func) {
          return jStat.map(arr, func, true);
        }; // Generate a rows x cols matrix according to the supplied function.


        jStat.create = function create(rows, cols, func) {
          var res = new Array(rows);
          var i, j;

          if (isFunction(cols)) {
            func = cols;
            cols = rows;
          }

          for (i = 0; i < rows; i++) {
            res[i] = new Array(cols);

            for (j = 0; j < cols; j++) {
              res[i][j] = func(i, j);
            }
          }

          return res;
        };

        function retZero() {
          return 0;
        } // Generate a rows x cols matrix of zeros.


        jStat.zeros = function zeros(rows, cols) {
          if (!isNumber(cols)) cols = rows;
          return jStat.create(rows, cols, retZero);
        };

        function retOne() {
          return 1;
        } // Generate a rows x cols matrix of ones.


        jStat.ones = function ones(rows, cols) {
          if (!isNumber(cols)) cols = rows;
          return jStat.create(rows, cols, retOne);
        }; // Generate a rows x cols matrix of uniformly random numbers.


        jStat.rand = function rand(rows, cols) {
          if (!isNumber(cols)) cols = rows;
          return jStat.create(rows, cols, jStat._random_fn);
        };

        function retIdent(i, j) {
          return i === j ? 1 : 0;
        } // Generate an identity matrix of size row x cols.


        jStat.identity = function identity(rows, cols) {
          if (!isNumber(cols)) cols = rows;
          return jStat.create(rows, cols, retIdent);
        }; // Tests whether a matrix is symmetric


        jStat.symmetric = function symmetric(arr) {
          var size = arr.length;
          var row, col;
          if (arr.length !== arr[0].length) return false;

          for (row = 0; row < size; row++) {
            for (col = 0; col < size; col++) {
              if (arr[col][row] !== arr[row][col]) return false;
            }
          }

          return true;
        }; // Set all values to zero.


        jStat.clear = function clear(arr) {
          return jStat.alter(arr, retZero);
        }; // Generate sequence.


        jStat.seq = function seq(min, max, length, func) {
          if (!isFunction(func)) func = false;
          var arr = [];
          var hival = calcRdx(min, max);
          var step = (max * hival - min * hival) / ((length - 1) * hival);
          var current = min;
          var cnt; // Current is assigned using a technique to compensate for IEEE error.
          // TODO: Needs better implementation.

          for (cnt = 0; current <= max && cnt < length; cnt++, current = (min * hival + step * hival * cnt) / hival) {
            arr.push(func ? func(current, cnt) : current);
          }

          return arr;
        }; // arange(5) -> [0,1,2,3,4]
        // arange(1,5) -> [1,2,3,4]
        // arange(5,1,-1) -> [5,4,3,2]


        jStat.arange = function arange(start, end, step) {
          var rl = [];
          var i;
          step = step || 1;

          if (end === undefined$1) {
            end = start;
            start = 0;
          }

          if (start === end || step === 0) {
            return [];
          }

          if (start < end && step < 0) {
            return [];
          }

          if (start > end && step > 0) {
            return [];
          }

          if (step > 0) {
            for (i = start; i < end; i += step) {
              rl.push(i);
            }
          } else {
            for (i = start; i > end; i += step) {
              rl.push(i);
            }
          }

          return rl;
        }; // A=[[1,2,3],[4,5,6],[7,8,9]]
        // slice(A,{row:{end:2},col:{start:1}}) -> [[2,3],[5,6]]
        // slice(A,1,{start:1}) -> [5,6]
        // as numpy code A[:2,1:]


        jStat.slice = function () {
          function _slice(list, start, end, step) {
            // note it's not equal to range.map mode it's a bug
            var i;
            var rl = [];
            var length = list.length;

            if (start === undefined$1 && end === undefined$1 && step === undefined$1) {
              return jStat.copy(list);
            }

            start = start || 0;
            end = end || list.length;
            start = start >= 0 ? start : length + start;
            end = end >= 0 ? end : length + end;
            step = step || 1;

            if (start === end || step === 0) {
              return [];
            }

            if (start < end && step < 0) {
              return [];
            }

            if (start > end && step > 0) {
              return [];
            }

            if (step > 0) {
              for (i = start; i < end; i += step) {
                rl.push(list[i]);
              }
            } else {
              for (i = start; i > end; i += step) {
                rl.push(list[i]);
              }
            }

            return rl;
          }

          function slice(list, rcSlice) {
            var colSlice, rowSlice;
            rcSlice = rcSlice || {};

            if (isNumber(rcSlice.row)) {
              if (isNumber(rcSlice.col)) return list[rcSlice.row][rcSlice.col];
              var row = jStat.rowa(list, rcSlice.row);
              colSlice = rcSlice.col || {};
              return _slice(row, colSlice.start, colSlice.end, colSlice.step);
            }

            if (isNumber(rcSlice.col)) {
              var col = jStat.cola(list, rcSlice.col);
              rowSlice = rcSlice.row || {};
              return _slice(col, rowSlice.start, rowSlice.end, rowSlice.step);
            }

            rowSlice = rcSlice.row || {};
            colSlice = rcSlice.col || {};

            var rows = _slice(list, rowSlice.start, rowSlice.end, rowSlice.step);

            return rows.map(function (row) {
              return _slice(row, colSlice.start, colSlice.end, colSlice.step);
            });
          }

          return slice;
        }(); // A=[[1,2,3],[4,5,6],[7,8,9]]
        // sliceAssign(A,{row:{start:1},col:{start:1}},[[0,0],[0,0]])
        // A=[[1,2,3],[4,0,0],[7,0,0]]


        jStat.sliceAssign = function sliceAssign(A, rcSlice, B) {
          var nl, ml;

          if (isNumber(rcSlice.row)) {
            if (isNumber(rcSlice.col)) return A[rcSlice.row][rcSlice.col] = B;
            rcSlice.col = rcSlice.col || {};
            rcSlice.col.start = rcSlice.col.start || 0;
            rcSlice.col.end = rcSlice.col.end || A[0].length;
            rcSlice.col.step = rcSlice.col.step || 1;
            nl = jStat.arange(rcSlice.col.start, Math.min(A.length, rcSlice.col.end), rcSlice.col.step);
            var m = rcSlice.row;
            nl.forEach(function (n, i) {
              A[m][n] = B[i];
            });
            return A;
          }

          if (isNumber(rcSlice.col)) {
            rcSlice.row = rcSlice.row || {};
            rcSlice.row.start = rcSlice.row.start || 0;
            rcSlice.row.end = rcSlice.row.end || A.length;
            rcSlice.row.step = rcSlice.row.step || 1;
            ml = jStat.arange(rcSlice.row.start, Math.min(A[0].length, rcSlice.row.end), rcSlice.row.step);
            var n = rcSlice.col;
            ml.forEach(function (m, j) {
              A[m][n] = B[j];
            });
            return A;
          }

          if (B[0].length === undefined$1) {
            B = [B];
          }

          rcSlice.row.start = rcSlice.row.start || 0;
          rcSlice.row.end = rcSlice.row.end || A.length;
          rcSlice.row.step = rcSlice.row.step || 1;
          rcSlice.col.start = rcSlice.col.start || 0;
          rcSlice.col.end = rcSlice.col.end || A[0].length;
          rcSlice.col.step = rcSlice.col.step || 1;
          ml = jStat.arange(rcSlice.row.start, Math.min(A.length, rcSlice.row.end), rcSlice.row.step);
          nl = jStat.arange(rcSlice.col.start, Math.min(A[0].length, rcSlice.col.end), rcSlice.col.step);
          ml.forEach(function (m, i) {
            nl.forEach(function (n, j) {
              A[m][n] = B[i][j];
            });
          });
          return A;
        }; // [1,2,3] ->
        // [[1,0,0],[0,2,0],[0,0,3]]


        jStat.diagonal = function diagonal(diagArray) {
          var mat = jStat.zeros(diagArray.length, diagArray.length);
          diagArray.forEach(function (t, i) {
            mat[i][i] = t;
          });
          return mat;
        }; // return copy of A


        jStat.copy = function copy(A) {
          return A.map(function (row) {
            if (isNumber(row)) return row;
            return row.map(function (t) {
              return t;
            });
          });
        }; // TODO: Go over this entire implementation. Seems a tragic waste of resources
        // doing all this work. Instead, and while ugly, use new Function() to generate
        // a custom function for each static method.
        // Quick reference.


        var jProto = jStat.prototype; // Default length.

        jProto.length = 0; // For internal use only.
        // TODO: Check if they're actually used, and if they are then rename them
        // to _*

        jProto.push = Array.prototype.push;
        jProto.sort = Array.prototype.sort;
        jProto.splice = Array.prototype.splice;
        jProto.slice = Array.prototype.slice; // Return a clean array.

        jProto.toArray = function toArray() {
          return this.length > 1 ? slice.call(this) : slice.call(this)[0];
        }; // Map a function to a matrix or vector.


        jProto.map = function map(func, toAlter) {
          return jStat(jStat.map(this, func, toAlter));
        }; // Cumulatively combine the elements of a matrix or vector using a function.


        jProto.cumreduce = function cumreduce(func, toAlter) {
          return jStat(jStat.cumreduce(this, func, toAlter));
        }; // Destructively alter an array.


        jProto.alter = function alter(func) {
          jStat.alter(this, func);
          return this;
        }; // Extend prototype with methods that have no argument.


        (function (funcs) {
          for (var i = 0; i < funcs.length; i++) {
            (function (passfunc) {
              jProto[passfunc] = function (func) {
                var self = this,
                    results; // Check for callback.

                if (func) {
                  setTimeout(function () {
                    func.call(self, jProto[passfunc].call(self));
                  });
                  return this;
                }

                results = jStat[passfunc](this);
                return isArray(results) ? jStat(results) : results;
              };
            })(funcs[i]);
          }
        })('transpose clear symmetric rows cols dimensions diag antidiag'.split(' ')); // Extend prototype with methods that have one argument.


        (function (funcs) {
          for (var i = 0; i < funcs.length; i++) {
            (function (passfunc) {
              jProto[passfunc] = function (index, func) {
                var self = this; // check for callback

                if (func) {
                  setTimeout(function () {
                    func.call(self, jProto[passfunc].call(self, index));
                  });
                  return this;
                }

                return jStat(jStat[passfunc](this, index));
              };
            })(funcs[i]);
          }
        })('row col'.split(' ')); // Extend prototype with simple shortcut methods.


        (function (funcs) {
          for (var i = 0; i < funcs.length; i++) {
            (function (passfunc) {
              jProto[passfunc] = function () {
                return jStat(jStat[passfunc].apply(null, arguments));
              };
            })(funcs[i]);
          }
        })('create zeros ones rand identity'.split(' ')); // Exposing jStat.


        return jStat;
      }(Math);

      (function (jStat, Math) {
        var isFunction = jStat.utils.isFunction; // Ascending functions for sort

        function ascNum(a, b) {
          return a - b;
        }

        function clip(arg, min, max) {
          return Math.max(min, Math.min(arg, max));
        } // sum of an array


        jStat.sum = function sum(arr) {
          var sum = 0;
          var i = arr.length;

          while (--i >= 0) {
            sum += arr[i];
          }

          return sum;
        }; // sum squared


        jStat.sumsqrd = function sumsqrd(arr) {
          var sum = 0;
          var i = arr.length;

          while (--i >= 0) {
            sum += arr[i] * arr[i];
          }

          return sum;
        }; // sum of squared errors of prediction (SSE)


        jStat.sumsqerr = function sumsqerr(arr) {
          var mean = jStat.mean(arr);
          var sum = 0;
          var i = arr.length;
          var tmp;

          while (--i >= 0) {
            tmp = arr[i] - mean;
            sum += tmp * tmp;
          }

          return sum;
        }; // sum of an array in each row


        jStat.sumrow = function sumrow(arr) {
          var sum = 0;
          var i = arr.length;

          while (--i >= 0) {
            sum += arr[i];
          }

          return sum;
        }; // product of an array


        jStat.product = function product(arr) {
          var prod = 1;
          var i = arr.length;

          while (--i >= 0) {
            prod *= arr[i];
          }

          return prod;
        }; // minimum value of an array


        jStat.min = function min(arr) {
          var low = arr[0];
          var i = 0;

          while (++i < arr.length) {
            if (arr[i] < low) low = arr[i];
          }

          return low;
        }; // maximum value of an array


        jStat.max = function max(arr) {
          var high = arr[0];
          var i = 0;

          while (++i < arr.length) {
            if (arr[i] > high) high = arr[i];
          }

          return high;
        }; // unique values of an array


        jStat.unique = function unique(arr) {
          var hash = {},
              _arr = [];

          for (var i = 0; i < arr.length; i++) {
            if (!hash[arr[i]]) {
              hash[arr[i]] = true;

              _arr.push(arr[i]);
            }
          }

          return _arr;
        }; // mean value of an array


        jStat.mean = function mean(arr) {
          return jStat.sum(arr) / arr.length;
        }; // mean squared error (MSE)


        jStat.meansqerr = function meansqerr(arr) {
          return jStat.sumsqerr(arr) / arr.length;
        }; // geometric mean of an array


        jStat.geomean = function geomean(arr) {
          return Math.pow(jStat.product(arr), 1 / arr.length);
        }; // median of an array


        jStat.median = function median(arr) {
          var arrlen = arr.length;

          var _arr = arr.slice().sort(ascNum); // check if array is even or odd, then return the appropriate


          return !(arrlen & 1) ? (_arr[arrlen / 2 - 1] + _arr[arrlen / 2]) / 2 : _arr[arrlen / 2 | 0];
        }; // cumulative sum of an array


        jStat.cumsum = function cumsum(arr) {
          return jStat.cumreduce(arr, function (a, b) {
            return a + b;
          });
        }; // cumulative product of an array


        jStat.cumprod = function cumprod(arr) {
          return jStat.cumreduce(arr, function (a, b) {
            return a * b;
          });
        }; // successive differences of a sequence


        jStat.diff = function diff(arr) {
          var diffs = [];
          var arrLen = arr.length;
          var i;

          for (i = 1; i < arrLen; i++) {
            diffs.push(arr[i] - arr[i - 1]);
          }

          return diffs;
        }; // ranks of an array


        jStat.rank = function (arr) {
          var i;
          var distinctNumbers = [];
          var numberCounts = {};

          for (i = 0; i < arr.length; i++) {
            var number = arr[i];

            if (numberCounts[number]) {
              numberCounts[number]++;
            } else {
              numberCounts[number] = 1;
              distinctNumbers.push(number);
            }
          }

          var sortedDistinctNumbers = distinctNumbers.sort(ascNum);
          var numberRanks = {};
          var currentRank = 1;

          for (i = 0; i < sortedDistinctNumbers.length; i++) {
            var number = sortedDistinctNumbers[i];
            var count = numberCounts[number];
            var first = currentRank;
            var last = currentRank + count - 1;
            var rank = (first + last) / 2;
            numberRanks[number] = rank;
            currentRank += count;
          }

          return arr.map(function (number) {
            return numberRanks[number];
          });
        }; // mode of an array
        // if there are multiple modes of an array, return all of them
        // is this the appropriate way of handling it?


        jStat.mode = function mode(arr) {
          var arrLen = arr.length;

          var _arr = arr.slice().sort(ascNum);

          var count = 1;
          var maxCount = 0;
          var numMaxCount = 0;
          var mode_arr = [];
          var i;

          for (i = 0; i < arrLen; i++) {
            if (_arr[i] === _arr[i + 1]) {
              count++;
            } else {
              if (count > maxCount) {
                mode_arr = [_arr[i]];
                maxCount = count;
                numMaxCount = 0;
              } // are there multiple max counts
              else if (count === maxCount) {
                mode_arr.push(_arr[i]);
                numMaxCount++;
              } // resetting count for new value in array


              count = 1;
            }
          }

          return numMaxCount === 0 ? mode_arr[0] : mode_arr;
        }; // range of an array


        jStat.range = function range(arr) {
          return jStat.max(arr) - jStat.min(arr);
        }; // variance of an array
        // flag = true indicates sample instead of population


        jStat.variance = function variance(arr, flag) {
          return jStat.sumsqerr(arr) / (arr.length - (flag ? 1 : 0));
        }; // pooled variance of an array of arrays


        jStat.pooledvariance = function pooledvariance(arr) {
          var sumsqerr = arr.reduce(function (a, samples) {
            return a + jStat.sumsqerr(samples);
          }, 0);
          var count = arr.reduce(function (a, samples) {
            return a + samples.length;
          }, 0);
          return sumsqerr / (count - arr.length);
        }; // deviation of an array


        jStat.deviation = function (arr) {
          var mean = jStat.mean(arr);
          var arrlen = arr.length;
          var dev = new Array(arrlen);

          for (var i = 0; i < arrlen; i++) {
            dev[i] = arr[i] - mean;
          }

          return dev;
        }; // standard deviation of an array
        // flag = true indicates sample instead of population


        jStat.stdev = function stdev(arr, flag) {
          return Math.sqrt(jStat.variance(arr, flag));
        }; // pooled standard deviation of an array of arrays


        jStat.pooledstdev = function pooledstdev(arr) {
          return Math.sqrt(jStat.pooledvariance(arr));
        }; // mean deviation (mean absolute deviation) of an array


        jStat.meandev = function meandev(arr) {
          var mean = jStat.mean(arr);
          var a = [];

          for (var i = arr.length - 1; i >= 0; i--) {
            a.push(Math.abs(arr[i] - mean));
          }

          return jStat.mean(a);
        }; // median deviation (median absolute deviation) of an array


        jStat.meddev = function meddev(arr) {
          var median = jStat.median(arr);
          var a = [];

          for (var i = arr.length - 1; i >= 0; i--) {
            a.push(Math.abs(arr[i] - median));
          }

          return jStat.median(a);
        }; // coefficient of variation


        jStat.coeffvar = function coeffvar(arr) {
          return jStat.stdev(arr) / jStat.mean(arr);
        }; // quartiles of an array


        jStat.quartiles = function quartiles(arr) {
          var arrlen = arr.length;

          var _arr = arr.slice().sort(ascNum);

          return [_arr[Math.round(arrlen / 4) - 1], _arr[Math.round(arrlen / 2) - 1], _arr[Math.round(arrlen * 3 / 4) - 1]];
        }; // Arbitary quantiles of an array. Direct port of the scipy.stats
        // implementation by Pierre GF Gerard-Marchant.


        jStat.quantiles = function quantiles(arr, quantilesArray, alphap, betap) {
          var sortedArray = arr.slice().sort(ascNum);
          var quantileVals = [quantilesArray.length];
          var n = arr.length;
          var i, p, m, aleph, k, gamma;
          if (typeof alphap === 'undefined') alphap = 3 / 8;
          if (typeof betap === 'undefined') betap = 3 / 8;

          for (i = 0; i < quantilesArray.length; i++) {
            p = quantilesArray[i];
            m = alphap + p * (1 - alphap - betap);
            aleph = n * p + m;
            k = Math.floor(clip(aleph, 1, n - 1));
            gamma = clip(aleph - k, 0, 1);
            quantileVals[i] = (1 - gamma) * sortedArray[k - 1] + gamma * sortedArray[k];
          }

          return quantileVals;
        }; // Return the k-th percentile of values in a range, where k is in the range 0..1, inclusive.
        // Passing true for the exclusive parameter excludes both endpoints of the range.


        jStat.percentile = function percentile(arr, k, exclusive) {
          var _arr = arr.slice().sort(ascNum);

          var realIndex = k * (_arr.length + (exclusive ? 1 : -1)) + (exclusive ? 0 : 1);
          var index = parseInt(realIndex);
          var frac = realIndex - index;

          if (index + 1 < _arr.length) {
            return _arr[index - 1] + frac * (_arr[index] - _arr[index - 1]);
          } else {
            return _arr[index - 1];
          }
        }; // The percentile rank of score in a given array. Returns the percentage
        // of all values in the input array that are less than (kind='strict') or
        // less or equal than (kind='weak') score. Default is weak.


        jStat.percentileOfScore = function percentileOfScore(arr, score, kind) {
          var counter = 0;
          var len = arr.length;
          var strict = false;
          var value, i;
          if (kind === 'strict') strict = true;

          for (i = 0; i < len; i++) {
            value = arr[i];

            if (strict && value < score || !strict && value <= score) {
              counter++;
            }
          }

          return counter / len;
        }; // Histogram (bin count) data


        jStat.histogram = function histogram(arr, binCnt) {
          binCnt = binCnt || 4;
          var first = jStat.min(arr);
          var binWidth = (jStat.max(arr) - first) / binCnt;
          var len = arr.length;
          var bins = [];
          var i;

          for (i = 0; i < binCnt; i++) {
            bins[i] = 0;
          }

          for (i = 0; i < len; i++) {
            bins[Math.min(Math.floor((arr[i] - first) / binWidth), binCnt - 1)] += 1;
          }

          return bins;
        }; // covariance of two arrays


        jStat.covariance = function covariance(arr1, arr2) {
          var u = jStat.mean(arr1);
          var v = jStat.mean(arr2);
          var arr1Len = arr1.length;
          var sq_dev = new Array(arr1Len);
          var i;

          for (i = 0; i < arr1Len; i++) {
            sq_dev[i] = (arr1[i] - u) * (arr2[i] - v);
          }

          return jStat.sum(sq_dev) / (arr1Len - 1);
        }; // (pearson's) population correlation coefficient, rho


        jStat.corrcoeff = function corrcoeff(arr1, arr2) {
          return jStat.covariance(arr1, arr2) / jStat.stdev(arr1, 1) / jStat.stdev(arr2, 1);
        }; // (spearman's) rank correlation coefficient, sp


        jStat.spearmancoeff = function (arr1, arr2) {
          arr1 = jStat.rank(arr1);
          arr2 = jStat.rank(arr2); //return pearson's correlation of the ranks:

          return jStat.corrcoeff(arr1, arr2);
        }; // statistical standardized moments (general form of skew/kurt)


        jStat.stanMoment = function stanMoment(arr, n) {
          var mu = jStat.mean(arr);
          var sigma = jStat.stdev(arr);
          var len = arr.length;
          var skewSum = 0;

          for (var i = 0; i < len; i++) {
            skewSum += Math.pow((arr[i] - mu) / sigma, n);
          }

          return skewSum / arr.length;
        }; // (pearson's) moment coefficient of skewness


        jStat.skewness = function skewness(arr) {
          return jStat.stanMoment(arr, 3);
        }; // (pearson's) (excess) kurtosis


        jStat.kurtosis = function kurtosis(arr) {
          return jStat.stanMoment(arr, 4) - 3;
        };

        var jProto = jStat.prototype; // Extend jProto with method for calculating cumulative sums and products.
        // This differs from the similar extension below as cumsum and cumprod should
        // not be run again in the case fullbool === true.
        // If a matrix is passed, automatically assume operation should be done on the
        // columns.

        (function (funcs) {
          for (var i = 0; i < funcs.length; i++) {
            (function (passfunc) {
              // If a matrix is passed, automatically assume operation should be done on
              // the columns.
              jProto[passfunc] = function (fullbool, func) {
                var arr = [];
                var i = 0;
                var tmpthis = this; // Assignment reassignation depending on how parameters were passed in.

                if (isFunction(fullbool)) {
                  func = fullbool;
                  fullbool = false;
                } // Check if a callback was passed with the function.


                if (func) {
                  setTimeout(function () {
                    func.call(tmpthis, jProto[passfunc].call(tmpthis, fullbool));
                  });
                  return this;
                } // Check if matrix and run calculations.


                if (this.length > 1) {
                  tmpthis = fullbool === true ? this : this.transpose();

                  for (; i < tmpthis.length; i++) {
                    arr[i] = jStat[passfunc](tmpthis[i]);
                  }

                  return arr;
                } // Pass fullbool if only vector, not a matrix. for variance and stdev.


                return jStat[passfunc](this[0], fullbool);
              };
            })(funcs[i]);
          }
        })('cumsum cumprod'.split(' ')); // Extend jProto with methods which don't require arguments and work on columns.


        (function (funcs) {
          for (var i = 0; i < funcs.length; i++) {
            (function (passfunc) {
              // If a matrix is passed, automatically assume operation should be done on
              // the columns.
              jProto[passfunc] = function (fullbool, func) {
                var arr = [];
                var i = 0;
                var tmpthis = this; // Assignment reassignation depending on how parameters were passed in.

                if (isFunction(fullbool)) {
                  func = fullbool;
                  fullbool = false;
                } // Check if a callback was passed with the function.


                if (func) {
                  setTimeout(function () {
                    func.call(tmpthis, jProto[passfunc].call(tmpthis, fullbool));
                  });
                  return this;
                } // Check if matrix and run calculations.


                if (this.length > 1) {
                  if (passfunc !== 'sumrow') tmpthis = fullbool === true ? this : this.transpose();

                  for (; i < tmpthis.length; i++) {
                    arr[i] = jStat[passfunc](tmpthis[i]);
                  }

                  return fullbool === true ? jStat[passfunc](jStat.utils.toVector(arr)) : arr;
                } // Pass fullbool if only vector, not a matrix. for variance and stdev.


                return jStat[passfunc](this[0], fullbool);
              };
            })(funcs[i]);
          }
        })(('sum sumsqrd sumsqerr sumrow product min max unique mean meansqerr ' + 'geomean median diff rank mode range variance deviation stdev meandev ' + 'meddev coeffvar quartiles histogram skewness kurtosis').split(' ')); // Extend jProto with functions that take arguments. Operations on matrices are
        // done on columns.


        (function (funcs) {
          for (var i = 0; i < funcs.length; i++) {
            (function (passfunc) {
              jProto[passfunc] = function () {
                var arr = [];
                var i = 0;
                var tmpthis = this;
                var args = Array.prototype.slice.call(arguments);
                var callbackFunction; // If the last argument is a function, we assume it's a callback; we
                // strip the callback out and call the function again.

                if (isFunction(args[args.length - 1])) {
                  callbackFunction = args[args.length - 1];
                  var argsToPass = args.slice(0, args.length - 1);
                  setTimeout(function () {
                    callbackFunction.call(tmpthis, jProto[passfunc].apply(tmpthis, argsToPass));
                  });
                  return this; // Otherwise we curry the function args and call normally.
                } else {
                  callbackFunction = undefined;

                  var curriedFunction = function curriedFunction(vector) {
                    return jStat[passfunc].apply(tmpthis, [vector].concat(args));
                  };
                } // If this is a matrix, run column-by-column.


                if (this.length > 1) {
                  tmpthis = tmpthis.transpose();

                  for (; i < tmpthis.length; i++) {
                    arr[i] = curriedFunction(tmpthis[i]);
                  }

                  return arr;
                } // Otherwise run on the vector.


                return curriedFunction(this[0]);
              };
            })(funcs[i]);
          }
        })('quantiles percentileOfScore'.split(' '));
      })(jStat, Math); // Special functions //


      (function (jStat, Math) {
        // Log-gamma function
        jStat.gammaln = function gammaln(x) {
          var j = 0;
          var cof = [76.18009172947146, -86.50532032941677, 24.01409824083091, -1.231739572450155, 0.1208650973866179e-2, -0.5395239384953e-5];
          var ser = 1.000000000190015;
          var xx, y, tmp;
          tmp = (y = xx = x) + 5.5;
          tmp -= (xx + 0.5) * Math.log(tmp);

          for (; j < 6; j++) {
            ser += cof[j] / ++y;
          }

          return Math.log(2.5066282746310005 * ser / xx) - tmp;
        };
        /*
         * log-gamma function to support poisson distribution sampling. The
         * algorithm comes from SPECFUN by Shanjie Zhang and Jianming Jin and their
         * book "Computation of Special Functions", 1996, John Wiley & Sons, Inc.
         */


        jStat.loggam = function loggam(x) {
          var x0, x2, xp, gl, gl0;
          var k, n;
          var a = [8.333333333333333e-02, -2.777777777777778e-03, 7.936507936507937e-04, -5.952380952380952e-04, 8.417508417508418e-04, -1.917526917526918e-03, 6.410256410256410e-03, -2.955065359477124e-02, 1.796443723688307e-01, -1.39243221690590e+00];
          x0 = x;
          n = 0;

          if (x == 1.0 || x == 2.0) {
            return 0.0;
          }

          if (x <= 7.0) {
            n = Math.floor(7 - x);
            x0 = x + n;
          }

          x2 = 1.0 / (x0 * x0);
          xp = 2 * Math.PI;
          gl0 = a[9];

          for (k = 8; k >= 0; k--) {
            gl0 *= x2;
            gl0 += a[k];
          }

          gl = gl0 / x0 + 0.5 * Math.log(xp) + (x0 - 0.5) * Math.log(x0) - x0;

          if (x <= 7.0) {
            for (k = 1; k <= n; k++) {
              gl -= Math.log(x0 - 1.0);
              x0 -= 1.0;
            }
          }

          return gl;
        }; // gamma of x


        jStat.gammafn = function gammafn(x) {
          var p = [-1.716185138865495, 24.76565080557592, -379.80425647094563, 629.3311553128184, 866.9662027904133, -31451.272968848367, -36144.413418691176, 66456.14382024054];
          var q = [-30.8402300119739, 315.35062697960416, -1015.1563674902192, -3107.771671572311, 22538.118420980151, 4755.8462775278811, -134659.9598649693, -115132.2596755535];
          var fact = false;
          var n = 0;
          var xden = 0;
          var xnum = 0;
          var y = x;
          var i, z, yi, res;

          if (x > 171.6243769536076) {
            return Infinity;
          }

          if (y <= 0) {
            res = y % 1 + 3.6e-16;

            if (res) {
              fact = (!(y & 1) ? 1 : -1) * Math.PI / Math.sin(Math.PI * res);
              y = 1 - y;
            } else {
              return Infinity;
            }
          }

          yi = y;

          if (y < 1) {
            z = y++;
          } else {
            z = (y -= n = (y | 0) - 1) - 1;
          }

          for (i = 0; i < 8; ++i) {
            xnum = (xnum + p[i]) * z;
            xden = xden * z + q[i];
          }

          res = xnum / xden + 1;

          if (yi < y) {
            res /= yi;
          } else if (yi > y) {
            for (i = 0; i < n; ++i) {
              res *= y;
              y++;
            }
          }

          if (fact) {
            res = fact / res;
          }

          return res;
        }; // lower incomplete gamma function, which is usually typeset with a
        // lower-case greek gamma as the function symbol


        jStat.gammap = function gammap(a, x) {
          return jStat.lowRegGamma(a, x) * jStat.gammafn(a);
        }; // The lower regularized incomplete gamma function, usually written P(a,x)


        jStat.lowRegGamma = function lowRegGamma(a, x) {
          var aln = jStat.gammaln(a);
          var ap = a;
          var sum = 1 / a;
          var del = sum;
          var b = x + 1 - a;
          var c = 1 / 1.0e-30;
          var d = 1 / b;
          var h = d;
          var i = 1; // calculate maximum number of itterations required for a

          var ITMAX = -~(Math.log(a >= 1 ? a : 1 / a) * 8.5 + a * 0.4 + 17);
          var an;

          if (x < 0 || a <= 0) {
            return NaN;
          } else if (x < a + 1) {
            for (; i <= ITMAX; i++) {
              sum += del *= x / ++ap;
            }

            return sum * Math.exp(-x + a * Math.log(x) - aln);
          }

          for (; i <= ITMAX; i++) {
            an = -i * (i - a);
            b += 2;
            d = an * d + b;
            c = b + an / c;
            d = 1 / d;
            h *= d * c;
          }

          return 1 - h * Math.exp(-x + a * Math.log(x) - aln);
        }; // natural log factorial of n


        jStat.factorialln = function factorialln(n) {
          return n < 0 ? NaN : jStat.gammaln(n + 1);
        }; // factorial of n


        jStat.factorial = function factorial(n) {
          return n < 0 ? NaN : jStat.gammafn(n + 1);
        }; // combinations of n, m


        jStat.combination = function combination(n, m) {
          // make sure n or m don't exceed the upper limit of usable values
          return n > 170 || m > 170 ? Math.exp(jStat.combinationln(n, m)) : jStat.factorial(n) / jStat.factorial(m) / jStat.factorial(n - m);
        };

        jStat.combinationln = function combinationln(n, m) {
          return jStat.factorialln(n) - jStat.factorialln(m) - jStat.factorialln(n - m);
        }; // permutations of n, m


        jStat.permutation = function permutation(n, m) {
          return jStat.factorial(n) / jStat.factorial(n - m);
        }; // beta function


        jStat.betafn = function betafn(x, y) {
          // ensure arguments are positive
          if (x <= 0 || y <= 0) return undefined; // make sure x + y doesn't exceed the upper limit of usable values

          return x + y > 170 ? Math.exp(jStat.betaln(x, y)) : jStat.gammafn(x) * jStat.gammafn(y) / jStat.gammafn(x + y);
        }; // natural logarithm of beta function


        jStat.betaln = function betaln(x, y) {
          return jStat.gammaln(x) + jStat.gammaln(y) - jStat.gammaln(x + y);
        }; // Evaluates the continued fraction for incomplete beta function by modified
        // Lentz's method.


        jStat.betacf = function betacf(x, a, b) {
          var fpmin = 1e-30;
          var m = 1;
          var qab = a + b;
          var qap = a + 1;
          var qam = a - 1;
          var c = 1;
          var d = 1 - qab * x / qap;
          var m2, aa, del, h; // These q's will be used in factors that occur in the coefficients

          if (Math.abs(d) < fpmin) d = fpmin;
          d = 1 / d;
          h = d;

          for (; m <= 100; m++) {
            m2 = 2 * m;
            aa = m * (b - m) * x / ((qam + m2) * (a + m2)); // One step (the even one) of the recurrence

            d = 1 + aa * d;
            if (Math.abs(d) < fpmin) d = fpmin;
            c = 1 + aa / c;
            if (Math.abs(c) < fpmin) c = fpmin;
            d = 1 / d;
            h *= d * c;
            aa = -(a + m) * (qab + m) * x / ((a + m2) * (qap + m2)); // Next step of the recurrence (the odd one)

            d = 1 + aa * d;
            if (Math.abs(d) < fpmin) d = fpmin;
            c = 1 + aa / c;
            if (Math.abs(c) < fpmin) c = fpmin;
            d = 1 / d;
            del = d * c;
            h *= del;
            if (Math.abs(del - 1.0) < 3e-7) break;
          }

          return h;
        }; // Returns the inverse of the lower regularized inomplete gamma function


        jStat.gammapinv = function gammapinv(p, a) {
          var j = 0;
          var a1 = a - 1;
          var EPS = 1e-8;
          var gln = jStat.gammaln(a);
          var x, err, t, u, pp, lna1, afac;
          if (p >= 1) return Math.max(100, a + 100 * Math.sqrt(a));
          if (p <= 0) return 0;

          if (a > 1) {
            lna1 = Math.log(a1);
            afac = Math.exp(a1 * (lna1 - 1) - gln);
            pp = p < 0.5 ? p : 1 - p;
            t = Math.sqrt(-2 * Math.log(pp));
            x = (2.30753 + t * 0.27061) / (1 + t * (0.99229 + t * 0.04481)) - t;
            if (p < 0.5) x = -x;
            x = Math.max(1e-3, a * Math.pow(1 - 1 / (9 * a) - x / (3 * Math.sqrt(a)), 3));
          } else {
            t = 1 - a * (0.253 + a * 0.12);
            if (p < t) x = Math.pow(p / t, 1 / a);else x = 1 - Math.log(1 - (p - t) / (1 - t));
          }

          for (; j < 12; j++) {
            if (x <= 0) return 0;
            err = jStat.lowRegGamma(a, x) - p;
            if (a > 1) t = afac * Math.exp(-(x - a1) + a1 * (Math.log(x) - lna1));else t = Math.exp(-x + a1 * Math.log(x) - gln);
            u = err / t;
            x -= t = u / (1 - 0.5 * Math.min(1, u * ((a - 1) / x - 1)));
            if (x <= 0) x = 0.5 * (x + t);
            if (Math.abs(t) < EPS * x) break;
          }

          return x;
        }; // Returns the error function erf(x)


        jStat.erf = function erf(x) {
          var cof = [-1.3026537197817094, 6.4196979235649026e-1, 1.9476473204185836e-2, -9.561514786808631e-3, -9.46595344482036e-4, 3.66839497852761e-4, 4.2523324806907e-5, -2.0278578112534e-5, -1.624290004647e-6, 1.303655835580e-6, 1.5626441722e-8, -8.5238095915e-8, 6.529054439e-9, 5.059343495e-9, -9.91364156e-10, -2.27365122e-10, 9.6467911e-11, 2.394038e-12, -6.886027e-12, 8.94487e-13, 3.13092e-13, -1.12708e-13, 3.81e-16, 7.106e-15, -1.523e-15, -9.4e-17, 1.21e-16, -2.8e-17];
          var j = cof.length - 1;
          var isneg = false;
          var d = 0;
          var dd = 0;
          var t, ty, tmp, res;

          if (x < 0) {
            x = -x;
            isneg = true;
          }

          t = 2 / (2 + x);
          ty = 4 * t - 2;

          for (; j > 0; j--) {
            tmp = d;
            d = ty * d - dd + cof[j];
            dd = tmp;
          }

          res = t * Math.exp(-x * x + 0.5 * (cof[0] + ty * d) - dd);
          return isneg ? res - 1 : 1 - res;
        }; // Returns the complmentary error function erfc(x)


        jStat.erfc = function erfc(x) {
          return 1 - jStat.erf(x);
        }; // Returns the inverse of the complementary error function


        jStat.erfcinv = function erfcinv(p) {
          var j = 0;
          var x, err, t, pp;
          if (p >= 2) return -100;
          if (p <= 0) return 100;
          pp = p < 1 ? p : 2 - p;
          t = Math.sqrt(-2 * Math.log(pp / 2));
          x = -0.70711 * ((2.30753 + t * 0.27061) / (1 + t * (0.99229 + t * 0.04481)) - t);

          for (; j < 2; j++) {
            err = jStat.erfc(x) - pp;
            x += err / (1.12837916709551257 * Math.exp(-x * x) - x * err);
          }

          return p < 1 ? x : -x;
        }; // Returns the inverse of the incomplete beta function


        jStat.ibetainv = function ibetainv(p, a, b) {
          var EPS = 1e-8;
          var a1 = a - 1;
          var b1 = b - 1;
          var j = 0;
          var lna, lnb, pp, t, u, err, x, al, h, w, afac;
          if (p <= 0) return 0;
          if (p >= 1) return 1;

          if (a >= 1 && b >= 1) {
            pp = p < 0.5 ? p : 1 - p;
            t = Math.sqrt(-2 * Math.log(pp));
            x = (2.30753 + t * 0.27061) / (1 + t * (0.99229 + t * 0.04481)) - t;
            if (p < 0.5) x = -x;
            al = (x * x - 3) / 6;
            h = 2 / (1 / (2 * a - 1) + 1 / (2 * b - 1));
            w = x * Math.sqrt(al + h) / h - (1 / (2 * b - 1) - 1 / (2 * a - 1)) * (al + 5 / 6 - 2 / (3 * h));
            x = a / (a + b * Math.exp(2 * w));
          } else {
            lna = Math.log(a / (a + b));
            lnb = Math.log(b / (a + b));
            t = Math.exp(a * lna) / a;
            u = Math.exp(b * lnb) / b;
            w = t + u;
            if (p < t / w) x = Math.pow(a * w * p, 1 / a);else x = 1 - Math.pow(b * w * (1 - p), 1 / b);
          }

          afac = -jStat.gammaln(a) - jStat.gammaln(b) + jStat.gammaln(a + b);

          for (; j < 10; j++) {
            if (x === 0 || x === 1) return x;
            err = jStat.ibeta(x, a, b) - p;
            t = Math.exp(a1 * Math.log(x) + b1 * Math.log(1 - x) + afac);
            u = err / t;
            x -= t = u / (1 - 0.5 * Math.min(1, u * (a1 / x - b1 / (1 - x))));
            if (x <= 0) x = 0.5 * (x + t);
            if (x >= 1) x = 0.5 * (x + t + 1);
            if (Math.abs(t) < EPS * x && j > 0) break;
          }

          return x;
        }; // Returns the incomplete beta function I_x(a,b)


        jStat.ibeta = function ibeta(x, a, b) {
          // Factors in front of the continued fraction.
          var bt = x === 0 || x === 1 ? 0 : Math.exp(jStat.gammaln(a + b) - jStat.gammaln(a) - jStat.gammaln(b) + a * Math.log(x) + b * Math.log(1 - x));
          if (x < 0 || x > 1) return false;
          if (x < (a + 1) / (a + b + 2)) // Use continued fraction directly.
            return bt * jStat.betacf(x, a, b) / a; // else use continued fraction after making the symmetry transformation.

          return 1 - bt * jStat.betacf(1 - x, b, a) / b;
        }; // Returns a normal deviate (mu=0, sigma=1).
        // If n and m are specified it returns a object of normal deviates.


        jStat.randn = function randn(n, m) {
          var u, v, x, y, q;
          if (!m) m = n;
          if (n) return jStat.create(n, m, function () {
            return jStat.randn();
          });

          do {
            u = jStat._random_fn();
            v = 1.7156 * (jStat._random_fn() - 0.5);
            x = u - 0.449871;
            y = Math.abs(v) + 0.386595;
            q = x * x + y * (0.19600 * y - 0.25472 * x);
          } while (q > 0.27597 && (q > 0.27846 || v * v > -4 * Math.log(u) * u * u));

          return v / u;
        }; // Returns a gamma deviate by the method of Marsaglia and Tsang.


        jStat.randg = function randg(shape, n, m) {
          var oalph = shape;
          var a1, a2, u, v, x, mat;
          if (!m) m = n;
          if (!shape) shape = 1;

          if (n) {
            mat = jStat.zeros(n, m);
            mat.alter(function () {
              return jStat.randg(shape);
            });
            return mat;
          }

          if (shape < 1) shape += 1;
          a1 = shape - 1 / 3;
          a2 = 1 / Math.sqrt(9 * a1);

          do {
            do {
              x = jStat.randn();
              v = 1 + a2 * x;
            } while (v <= 0);

            v = v * v * v;
            u = jStat._random_fn();
          } while (u > 1 - 0.331 * Math.pow(x, 4) && Math.log(u) > 0.5 * x * x + a1 * (1 - v + Math.log(v))); // alpha > 1


          if (shape == oalph) return a1 * v; // alpha < 1

          do {
            u = jStat._random_fn();
          } while (u === 0);

          return Math.pow(u, 1 / oalph) * a1 * v;
        }; // making use of static methods on the instance


        (function (funcs) {
          for (var i = 0; i < funcs.length; i++) {
            (function (passfunc) {
              jStat.fn[passfunc] = function () {
                return jStat(jStat.map(this, function (value) {
                  return jStat[passfunc](value);
                }));
              };
            })(funcs[i]);
          }
        })('gammaln gammafn factorial factorialln'.split(' '));

        (function (funcs) {
          for (var i = 0; i < funcs.length; i++) {
            (function (passfunc) {
              jStat.fn[passfunc] = function () {
                return jStat(jStat[passfunc].apply(null, arguments));
              };
            })(funcs[i]);
          }
        })('randn'.split(' '));
      })(jStat, Math);

      (function (jStat, Math) {
        // generate all distribution instance methods
        (function (list) {
          for (var i = 0; i < list.length; i++) {
            (function (func) {
              // distribution instance method
              jStat[func] = function f(a, b, c) {
                if (!(this instanceof f)) return new f(a, b, c);
                this._a = a;
                this._b = b;
                this._c = c;
                return this;
              }; // distribution method to be used on a jStat instance


              jStat.fn[func] = function (a, b, c) {
                var newthis = jStat[func](a, b, c);
                newthis.data = this;
                return newthis;
              }; // sample instance method


              jStat[func].prototype.sample = function (arr) {
                var a = this._a;
                var b = this._b;
                var c = this._c;
                if (arr) return jStat.alter(arr, function () {
                  return jStat[func].sample(a, b, c);
                });else return jStat[func].sample(a, b, c);
              }; // generate the pdf, cdf and inv instance methods


              (function (vals) {
                for (var i = 0; i < vals.length; i++) {
                  (function (fnfunc) {
                    jStat[func].prototype[fnfunc] = function (x) {
                      var a = this._a;
                      var b = this._b;
                      var c = this._c;
                      if (!x && x !== 0) x = this.data;

                      if (typeof x !== 'number') {
                        return jStat.fn.map.call(x, function (x) {
                          return jStat[func][fnfunc](x, a, b, c);
                        });
                      }

                      return jStat[func][fnfunc](x, a, b, c);
                    };
                  })(vals[i]);
                }
              })('pdf cdf inv'.split(' ')); // generate the mean, median, mode and variance instance methods


              (function (vals) {
                for (var i = 0; i < vals.length; i++) {
                  (function (fnfunc) {
                    jStat[func].prototype[fnfunc] = function () {
                      return jStat[func][fnfunc](this._a, this._b, this._c);
                    };
                  })(vals[i]);
                }
              })('mean median mode variance'.split(' '));
            })(list[i]);
          }
        })(('beta centralF cauchy chisquare exponential gamma invgamma kumaraswamy ' + 'laplace lognormal noncentralt normal pareto studentt weibull uniform ' + 'binomial negbin hypgeom poisson triangular tukey arcsine').split(' ')); // extend beta function with static methods


        jStat.extend(jStat.beta, {
          pdf: function pdf(x, alpha, beta) {
            // PDF is zero outside the support
            if (x > 1 || x < 0) return 0; // PDF is one for the uniform case

            if (alpha == 1 && beta == 1) return 1;

            if (alpha < 512 && beta < 512) {
              return Math.pow(x, alpha - 1) * Math.pow(1 - x, beta - 1) / jStat.betafn(alpha, beta);
            } else {
              return Math.exp((alpha - 1) * Math.log(x) + (beta - 1) * Math.log(1 - x) - jStat.betaln(alpha, beta));
            }
          },
          cdf: function cdf(x, alpha, beta) {
            return x > 1 || x < 0 ? (x > 1) * 1 : jStat.ibeta(x, alpha, beta);
          },
          inv: function inv(x, alpha, beta) {
            return jStat.ibetainv(x, alpha, beta);
          },
          mean: function mean(alpha, beta) {
            return alpha / (alpha + beta);
          },
          median: function median(alpha, beta) {
            return jStat.ibetainv(0.5, alpha, beta);
          },
          mode: function mode(alpha, beta) {
            return (alpha - 1) / (alpha + beta - 2);
          },
          // return a random sample
          sample: function sample(alpha, beta) {
            var u = jStat.randg(alpha);
            return u / (u + jStat.randg(beta));
          },
          variance: function variance(alpha, beta) {
            return alpha * beta / (Math.pow(alpha + beta, 2) * (alpha + beta + 1));
          }
        }); // extend F function with static methods

        jStat.extend(jStat.centralF, {
          // This implementation of the pdf function avoids float overflow
          // See the way that R calculates this value:
          // https://svn.r-project.org/R/trunk/src/nmath/df.c
          pdf: function pdf(x, df1, df2) {
            var p, q, f;
            if (x < 0) return 0;

            if (df1 <= 2) {
              if (x === 0 && df1 < 2) {
                return Infinity;
              }

              if (x === 0 && df1 === 2) {
                return 1;
              }

              return 1 / jStat.betafn(df1 / 2, df2 / 2) * Math.pow(df1 / df2, df1 / 2) * Math.pow(x, df1 / 2 - 1) * Math.pow(1 + df1 / df2 * x, -(df1 + df2) / 2);
            }

            p = df1 * x / (df2 + x * df1);
            q = df2 / (df2 + x * df1);
            f = df1 * q / 2.0;
            return f * jStat.binomial.pdf((df1 - 2) / 2, (df1 + df2 - 2) / 2, p);
          },
          cdf: function cdf(x, df1, df2) {
            if (x < 0) return 0;
            return jStat.ibeta(df1 * x / (df1 * x + df2), df1 / 2, df2 / 2);
          },
          inv: function inv(x, df1, df2) {
            return df2 / (df1 * (1 / jStat.ibetainv(x, df1 / 2, df2 / 2) - 1));
          },
          mean: function mean(df1, df2) {
            return df2 > 2 ? df2 / (df2 - 2) : undefined;
          },
          mode: function mode(df1, df2) {
            return df1 > 2 ? df2 * (df1 - 2) / (df1 * (df2 + 2)) : undefined;
          },
          // return a random sample
          sample: function sample(df1, df2) {
            var x1 = jStat.randg(df1 / 2) * 2;
            var x2 = jStat.randg(df2 / 2) * 2;
            return x1 / df1 / (x2 / df2);
          },
          variance: function variance(df1, df2) {
            if (df2 <= 4) return undefined;
            return 2 * df2 * df2 * (df1 + df2 - 2) / (df1 * (df2 - 2) * (df2 - 2) * (df2 - 4));
          }
        }); // extend cauchy function with static methods

        jStat.extend(jStat.cauchy, {
          pdf: function pdf(x, local, scale) {
            if (scale < 0) {
              return 0;
            }

            return scale / (Math.pow(x - local, 2) + Math.pow(scale, 2)) / Math.PI;
          },
          cdf: function cdf(x, local, scale) {
            return Math.atan((x - local) / scale) / Math.PI + 0.5;
          },
          inv: function inv(p, local, scale) {
            return local + scale * Math.tan(Math.PI * (p - 0.5));
          },
          median: function median(local
          /*, scale*/
          ) {
            return local;
          },
          mode: function mode(local
          /*, scale*/
          ) {
            return local;
          },
          sample: function sample(local, scale) {
            return jStat.randn() * Math.sqrt(1 / (2 * jStat.randg(0.5))) * scale + local;
          }
        }); // extend chisquare function with static methods

        jStat.extend(jStat.chisquare, {
          pdf: function pdf(x, dof) {
            if (x < 0) return 0;
            return x === 0 && dof === 2 ? 0.5 : Math.exp((dof / 2 - 1) * Math.log(x) - x / 2 - dof / 2 * Math.log(2) - jStat.gammaln(dof / 2));
          },
          cdf: function cdf(x, dof) {
            if (x < 0) return 0;
            return jStat.lowRegGamma(dof / 2, x / 2);
          },
          inv: function inv(p, dof) {
            return 2 * jStat.gammapinv(p, 0.5 * dof);
          },
          mean: function mean(dof) {
            return dof;
          },
          // TODO: this is an approximation (is there a better way?)
          median: function median(dof) {
            return dof * Math.pow(1 - 2 / (9 * dof), 3);
          },
          mode: function mode(dof) {
            return dof - 2 > 0 ? dof - 2 : 0;
          },
          sample: function sample(dof) {
            return jStat.randg(dof / 2) * 2;
          },
          variance: function variance(dof) {
            return 2 * dof;
          }
        }); // extend exponential function with static methods

        jStat.extend(jStat.exponential, {
          pdf: function pdf(x, rate) {
            return x < 0 ? 0 : rate * Math.exp(-rate * x);
          },
          cdf: function cdf(x, rate) {
            return x < 0 ? 0 : 1 - Math.exp(-rate * x);
          },
          inv: function inv(p, rate) {
            return -Math.log(1 - p) / rate;
          },
          mean: function mean(rate) {
            return 1 / rate;
          },
          median: function median(rate) {
            return 1 / rate * Math.log(2);
          },
          mode: function
            /*rate*/
          mode() {
            return 0;
          },
          sample: function sample(rate) {
            return -1 / rate * Math.log(jStat._random_fn());
          },
          variance: function variance(rate) {
            return Math.pow(rate, -2);
          }
        }); // extend gamma function with static methods

        jStat.extend(jStat.gamma, {
          pdf: function pdf(x, shape, scale) {
            if (x < 0) return 0;
            return x === 0 && shape === 1 ? 1 / scale : Math.exp((shape - 1) * Math.log(x) - x / scale - jStat.gammaln(shape) - shape * Math.log(scale));
          },
          cdf: function cdf(x, shape, scale) {
            if (x < 0) return 0;
            return jStat.lowRegGamma(shape, x / scale);
          },
          inv: function inv(p, shape, scale) {
            return jStat.gammapinv(p, shape) * scale;
          },
          mean: function mean(shape, scale) {
            return shape * scale;
          },
          mode: function mode(shape, scale) {
            if (shape > 1) return (shape - 1) * scale;
            return undefined;
          },
          sample: function sample(shape, scale) {
            return jStat.randg(shape) * scale;
          },
          variance: function variance(shape, scale) {
            return shape * scale * scale;
          }
        }); // extend inverse gamma function with static methods

        jStat.extend(jStat.invgamma, {
          pdf: function pdf(x, shape, scale) {
            if (x <= 0) return 0;
            return Math.exp(-(shape + 1) * Math.log(x) - scale / x - jStat.gammaln(shape) + shape * Math.log(scale));
          },
          cdf: function cdf(x, shape, scale) {
            if (x <= 0) return 0;
            return 1 - jStat.lowRegGamma(shape, scale / x);
          },
          inv: function inv(p, shape, scale) {
            return scale / jStat.gammapinv(1 - p, shape);
          },
          mean: function mean(shape, scale) {
            return shape > 1 ? scale / (shape - 1) : undefined;
          },
          mode: function mode(shape, scale) {
            return scale / (shape + 1);
          },
          sample: function sample(shape, scale) {
            return scale / jStat.randg(shape);
          },
          variance: function variance(shape, scale) {
            if (shape <= 2) return undefined;
            return scale * scale / ((shape - 1) * (shape - 1) * (shape - 2));
          }
        }); // extend kumaraswamy function with static methods

        jStat.extend(jStat.kumaraswamy, {
          pdf: function pdf(x, alpha, beta) {
            if (x === 0 && alpha === 1) return beta;else if (x === 1 && beta === 1) return alpha;
            return Math.exp(Math.log(alpha) + Math.log(beta) + (alpha - 1) * Math.log(x) + (beta - 1) * Math.log(1 - Math.pow(x, alpha)));
          },
          cdf: function cdf(x, alpha, beta) {
            if (x < 0) return 0;else if (x > 1) return 1;
            return 1 - Math.pow(1 - Math.pow(x, alpha), beta);
          },
          inv: function inv(p, alpha, beta) {
            return Math.pow(1 - Math.pow(1 - p, 1 / beta), 1 / alpha);
          },
          mean: function mean(alpha, beta) {
            return beta * jStat.gammafn(1 + 1 / alpha) * jStat.gammafn(beta) / jStat.gammafn(1 + 1 / alpha + beta);
          },
          median: function median(alpha, beta) {
            return Math.pow(1 - Math.pow(2, -1 / beta), 1 / alpha);
          },
          mode: function mode(alpha, beta) {
            if (!(alpha >= 1 && beta >= 1 && alpha !== 1 && beta !== 1)) return undefined;
            return Math.pow((alpha - 1) / (alpha * beta - 1), 1 / alpha);
          },
          variance: function
            /*alpha, beta*/
          variance() {
            throw new Error('variance not yet implemented'); // TODO: complete this
          }
        }); // extend lognormal function with static methods

        jStat.extend(jStat.lognormal, {
          pdf: function pdf(x, mu, sigma) {
            if (x <= 0) return 0;
            return Math.exp(-Math.log(x) - 0.5 * Math.log(2 * Math.PI) - Math.log(sigma) - Math.pow(Math.log(x) - mu, 2) / (2 * sigma * sigma));
          },
          cdf: function cdf(x, mu, sigma) {
            if (x < 0) return 0;
            return 0.5 + 0.5 * jStat.erf((Math.log(x) - mu) / Math.sqrt(2 * sigma * sigma));
          },
          inv: function inv(p, mu, sigma) {
            return Math.exp(-1.41421356237309505 * sigma * jStat.erfcinv(2 * p) + mu);
          },
          mean: function mean(mu, sigma) {
            return Math.exp(mu + sigma * sigma / 2);
          },
          median: function median(mu
          /*, sigma*/
          ) {
            return Math.exp(mu);
          },
          mode: function mode(mu, sigma) {
            return Math.exp(mu - sigma * sigma);
          },
          sample: function sample(mu, sigma) {
            return Math.exp(jStat.randn() * sigma + mu);
          },
          variance: function variance(mu, sigma) {
            return (Math.exp(sigma * sigma) - 1) * Math.exp(2 * mu + sigma * sigma);
          }
        }); // extend noncentralt function with static methods

        jStat.extend(jStat.noncentralt, {
          pdf: function pdf(x, dof, ncp) {
            var tol = 1e-14;
            if (Math.abs(ncp) < tol) // ncp approx 0; use student-t
              return jStat.studentt.pdf(x, dof);

            if (Math.abs(x) < tol) {
              // different formula for x == 0
              return Math.exp(jStat.gammaln((dof + 1) / 2) - ncp * ncp / 2 - 0.5 * Math.log(Math.PI * dof) - jStat.gammaln(dof / 2));
            } // formula for x != 0


            return dof / x * (jStat.noncentralt.cdf(x * Math.sqrt(1 + 2 / dof), dof + 2, ncp) - jStat.noncentralt.cdf(x, dof, ncp));
          },
          cdf: function cdf(x, dof, ncp) {
            var tol = 1e-14;
            var min_iterations = 200;
            if (Math.abs(ncp) < tol) // ncp approx 0; use student-t
              return jStat.studentt.cdf(x, dof); // turn negative x into positive and flip result afterwards

            var flip = false;

            if (x < 0) {
              flip = true;
              ncp = -ncp;
            }

            var prob = jStat.normal.cdf(-ncp, 0, 1);
            var value = tol + 1; // use value at last two steps to determine convergence

            var lastvalue = value;
            var y = x * x / (x * x + dof);
            var j = 0;
            var p = Math.exp(-ncp * ncp / 2);
            var q = Math.exp(-ncp * ncp / 2 - 0.5 * Math.log(2) - jStat.gammaln(3 / 2)) * ncp;

            while (j < min_iterations || lastvalue > tol || value > tol) {
              lastvalue = value;

              if (j > 0) {
                p *= ncp * ncp / (2 * j);
                q *= ncp * ncp / (2 * (j + 1 / 2));
              }

              value = p * jStat.beta.cdf(y, j + 0.5, dof / 2) + q * jStat.beta.cdf(y, j + 1, dof / 2);
              prob += 0.5 * value;
              j++;
            }

            return flip ? 1 - prob : prob;
          }
        }); // extend normal function with static methods

        jStat.extend(jStat.normal, {
          pdf: function pdf(x, mean, std) {
            return Math.exp(-0.5 * Math.log(2 * Math.PI) - Math.log(std) - Math.pow(x - mean, 2) / (2 * std * std));
          },
          cdf: function cdf(x, mean, std) {
            return 0.5 * (1 + jStat.erf((x - mean) / Math.sqrt(2 * std * std)));
          },
          inv: function inv(p, mean, std) {
            return -1.41421356237309505 * std * jStat.erfcinv(2 * p) + mean;
          },
          mean: function mean(_mean
          /*, std*/
          ) {
            return _mean;
          },
          median: function median(mean
          /*, std*/
          ) {
            return mean;
          },
          mode: function mode(mean
          /*, std*/
          ) {
            return mean;
          },
          sample: function sample(mean, std) {
            return jStat.randn() * std + mean;
          },
          variance: function variance(mean, std) {
            return std * std;
          }
        }); // extend pareto function with static methods

        jStat.extend(jStat.pareto, {
          pdf: function pdf(x, scale, shape) {
            if (x < scale) return 0;
            return shape * Math.pow(scale, shape) / Math.pow(x, shape + 1);
          },
          cdf: function cdf(x, scale, shape) {
            if (x < scale) return 0;
            return 1 - Math.pow(scale / x, shape);
          },
          inv: function inv(p, scale, shape) {
            return scale / Math.pow(1 - p, 1 / shape);
          },
          mean: function mean(scale, shape) {
            if (shape <= 1) return undefined;
            return shape * Math.pow(scale, shape) / (shape - 1);
          },
          median: function median(scale, shape) {
            return scale * (shape * Math.SQRT2);
          },
          mode: function mode(scale
          /*, shape*/
          ) {
            return scale;
          },
          variance: function variance(scale, shape) {
            if (shape <= 2) return undefined;
            return scale * scale * shape / (Math.pow(shape - 1, 2) * (shape - 2));
          }
        }); // extend studentt function with static methods

        jStat.extend(jStat.studentt, {
          pdf: function pdf(x, dof) {
            dof = dof > 1e100 ? 1e100 : dof;
            return 1 / (Math.sqrt(dof) * jStat.betafn(0.5, dof / 2)) * Math.pow(1 + x * x / dof, -((dof + 1) / 2));
          },
          cdf: function cdf(x, dof) {
            var dof2 = dof / 2;
            return jStat.ibeta((x + Math.sqrt(x * x + dof)) / (2 * Math.sqrt(x * x + dof)), dof2, dof2);
          },
          inv: function inv(p, dof) {
            var x = jStat.ibetainv(2 * Math.min(p, 1 - p), 0.5 * dof, 0.5);
            x = Math.sqrt(dof * (1 - x) / x);
            return p > 0.5 ? x : -x;
          },
          mean: function mean(dof) {
            return dof > 1 ? 0 : undefined;
          },
          median: function
            /*dof*/
          median() {
            return 0;
          },
          mode: function
            /*dof*/
          mode() {
            return 0;
          },
          sample: function sample(dof) {
            return jStat.randn() * Math.sqrt(dof / (2 * jStat.randg(dof / 2)));
          },
          variance: function variance(dof) {
            return dof > 2 ? dof / (dof - 2) : dof > 1 ? Infinity : undefined;
          }
        }); // extend weibull function with static methods

        jStat.extend(jStat.weibull, {
          pdf: function pdf(x, scale, shape) {
            if (x < 0 || scale < 0 || shape < 0) return 0;
            return shape / scale * Math.pow(x / scale, shape - 1) * Math.exp(-Math.pow(x / scale, shape));
          },
          cdf: function cdf(x, scale, shape) {
            return x < 0 ? 0 : 1 - Math.exp(-Math.pow(x / scale, shape));
          },
          inv: function inv(p, scale, shape) {
            return scale * Math.pow(-Math.log(1 - p), 1 / shape);
          },
          mean: function mean(scale, shape) {
            return scale * jStat.gammafn(1 + 1 / shape);
          },
          median: function median(scale, shape) {
            return scale * Math.pow(Math.log(2), 1 / shape);
          },
          mode: function mode(scale, shape) {
            if (shape <= 1) return 0;
            return scale * Math.pow((shape - 1) / shape, 1 / shape);
          },
          sample: function sample(scale, shape) {
            return scale * Math.pow(-Math.log(jStat._random_fn()), 1 / shape);
          },
          variance: function variance(scale, shape) {
            return scale * scale * jStat.gammafn(1 + 2 / shape) - Math.pow(jStat.weibull.mean(scale, shape), 2);
          }
        }); // extend uniform function with static methods

        jStat.extend(jStat.uniform, {
          pdf: function pdf(x, a, b) {
            return x < a || x > b ? 0 : 1 / (b - a);
          },
          cdf: function cdf(x, a, b) {
            if (x < a) return 0;else if (x < b) return (x - a) / (b - a);
            return 1;
          },
          inv: function inv(p, a, b) {
            return a + p * (b - a);
          },
          mean: function mean(a, b) {
            return 0.5 * (a + b);
          },
          median: function median(a, b) {
            return jStat.mean(a, b);
          },
          mode: function
            /*a, b*/
          mode() {
            throw new Error('mode is not yet implemented');
          },
          sample: function sample(a, b) {
            return a / 2 + b / 2 + (b / 2 - a / 2) * (2 * jStat._random_fn() - 1);
          },
          variance: function variance(a, b) {
            return Math.pow(b - a, 2) / 12;
          }
        }); // Got this from http://www.math.ucla.edu/~tom/distributions/binomial.html

        function betinc(x, a, b, eps) {
          var a0 = 0;
          var b0 = 1;
          var a1 = 1;
          var b1 = 1;
          var m9 = 0;
          var a2 = 0;
          var c9;

          while (Math.abs((a1 - a2) / a1) > eps) {
            a2 = a1;
            c9 = -(a + m9) * (a + b + m9) * x / (a + 2 * m9) / (a + 2 * m9 + 1);
            a0 = a1 + c9 * a0;
            b0 = b1 + c9 * b0;
            m9 = m9 + 1;
            c9 = m9 * (b - m9) * x / (a + 2 * m9 - 1) / (a + 2 * m9);
            a1 = a0 + c9 * a1;
            b1 = b0 + c9 * b1;
            a0 = a0 / b1;
            b0 = b0 / b1;
            a1 = a1 / b1;
            b1 = 1;
          }

          return a1 / a;
        } // extend uniform function with static methods


        jStat.extend(jStat.binomial, {
          pdf: function pdf(k, n, p) {
            return p === 0 || p === 1 ? n * p === k ? 1 : 0 : jStat.combination(n, k) * Math.pow(p, k) * Math.pow(1 - p, n - k);
          },
          cdf: function cdf(x, n, p) {
            var betacdf;
            var eps = 1e-10;
            if (x < 0) return 0;
            if (x >= n) return 1;
            if (p < 0 || p > 1 || n <= 0) return NaN;
            x = Math.floor(x);
            var z = p;
            var a = x + 1;
            var b = n - x;
            var s = a + b;
            var bt = Math.exp(jStat.gammaln(s) - jStat.gammaln(b) - jStat.gammaln(a) + a * Math.log(z) + b * Math.log(1 - z));
            if (z < (a + 1) / (s + 2)) betacdf = bt * betinc(z, a, b, eps);else betacdf = 1 - bt * betinc(1 - z, b, a, eps);
            return Math.round((1 - betacdf) * (1 / eps)) / (1 / eps);
          }
        }); // extend uniform function with static methods

        jStat.extend(jStat.negbin, {
          pdf: function pdf(k, r, p) {
            if (k !== k >>> 0) return false;
            if (k < 0) return 0;
            return jStat.combination(k + r - 1, r - 1) * Math.pow(1 - p, k) * Math.pow(p, r);
          },
          cdf: function cdf(x, r, p) {
            var sum = 0,
                k = 0;
            if (x < 0) return 0;

            for (; k <= x; k++) {
              sum += jStat.negbin.pdf(k, r, p);
            }

            return sum;
          }
        }); // extend uniform function with static methods

        jStat.extend(jStat.hypgeom, {
          pdf: function pdf(k, N, m, n) {
            // Hypergeometric PDF.
            // A simplification of the CDF algorithm below.
            // k = number of successes drawn
            // N = population size
            // m = number of successes in population
            // n = number of items drawn from population
            if (k !== k | 0) {
              return false;
            } else if (k < 0 || k < m - (N - n)) {
              // It's impossible to have this few successes drawn.
              return 0;
            } else if (k > n || k > m) {
              // It's impossible to have this many successes drawn.
              return 0;
            } else if (m * 2 > N) {
              // More than half the population is successes.
              if (n * 2 > N) {
                // More than half the population is sampled.
                return jStat.hypgeom.pdf(N - m - n + k, N, N - m, N - n);
              } else {
                // Half or less of the population is sampled.
                return jStat.hypgeom.pdf(n - k, N, N - m, n);
              }
            } else if (n * 2 > N) {
              // Half or less is successes.
              return jStat.hypgeom.pdf(m - k, N, m, N - n);
            } else if (m < n) {
              // We want to have the number of things sampled to be less than the
              // successes available. So swap the definitions of successful and sampled.
              return jStat.hypgeom.pdf(k, N, n, m);
            } else {
              // If we get here, half or less of the population was sampled, half or
              // less of it was successes, and we had fewer sampled things than
              // successes. Now we can do this complicated iterative algorithm in an
              // efficient way.
              // The basic premise of the algorithm is that we partially normalize our
              // intermediate product to keep it in a numerically good region, and then
              // finish the normalization at the end.
              // This variable holds the scaled probability of the current number of
              // successes.
              var scaledPDF = 1; // This keeps track of how much we have normalized.

              var samplesDone = 0;

              for (var i = 0; i < k; i++) {
                // For every possible number of successes up to that observed...
                while (scaledPDF > 1 && samplesDone < n) {
                  // Intermediate result is growing too big. Apply some of the
                  // normalization to shrink everything.
                  scaledPDF *= 1 - m / (N - samplesDone); // Say we've normalized by this sample already.

                  samplesDone++;
                } // Work out the partially-normalized hypergeometric PDF for the next
                // number of successes


                scaledPDF *= (n - i) * (m - i) / ((i + 1) * (N - m - n + i + 1));
              }

              for (; samplesDone < n; samplesDone++) {
                // Apply all the rest of the normalization
                scaledPDF *= 1 - m / (N - samplesDone);
              } // Bound answer sanely before returning.


              return Math.min(1, Math.max(0, scaledPDF));
            }
          },
          cdf: function cdf(x, N, m, n) {
            // Hypergeometric CDF.
            // This algorithm is due to Prof. Thomas S. Ferguson, <tom@math.ucla.edu>,
            // and comes from his hypergeometric test calculator at
            // <http://www.math.ucla.edu/~tom/distributions/Hypergeometric.html>.
            // x = number of successes drawn
            // N = population size
            // m = number of successes in population
            // n = number of items drawn from population
            if (x < 0 || x < m - (N - n)) {
              // It's impossible to have this few successes drawn or fewer.
              return 0;
            } else if (x >= n || x >= m) {
              // We will always have this many successes or fewer.
              return 1;
            } else if (m * 2 > N) {
              // More than half the population is successes.
              if (n * 2 > N) {
                // More than half the population is sampled.
                return jStat.hypgeom.cdf(N - m - n + x, N, N - m, N - n);
              } else {
                // Half or less of the population is sampled.
                return 1 - jStat.hypgeom.cdf(n - x - 1, N, N - m, n);
              }
            } else if (n * 2 > N) {
              // Half or less is successes.
              return 1 - jStat.hypgeom.cdf(m - x - 1, N, m, N - n);
            } else if (m < n) {
              // We want to have the number of things sampled to be less than the
              // successes available. So swap the definitions of successful and sampled.
              return jStat.hypgeom.cdf(x, N, n, m);
            } else {
              // If we get here, half or less of the population was sampled, half or
              // less of it was successes, and we had fewer sampled things than
              // successes. Now we can do this complicated iterative algorithm in an
              // efficient way.
              // The basic premise of the algorithm is that we partially normalize our
              // intermediate sum to keep it in a numerically good region, and then
              // finish the normalization at the end.
              // Holds the intermediate, scaled total CDF.
              var scaledCDF = 1; // This variable holds the scaled probability of the current number of
              // successes.

              var scaledPDF = 1; // This keeps track of how much we have normalized.

              var samplesDone = 0;

              for (var i = 0; i < x; i++) {
                // For every possible number of successes up to that observed...
                while (scaledCDF > 1 && samplesDone < n) {
                  // Intermediate result is growing too big. Apply some of the
                  // normalization to shrink everything.
                  var factor = 1 - m / (N - samplesDone);
                  scaledPDF *= factor;
                  scaledCDF *= factor; // Say we've normalized by this sample already.

                  samplesDone++;
                } // Work out the partially-normalized hypergeometric PDF for the next
                // number of successes


                scaledPDF *= (n - i) * (m - i) / ((i + 1) * (N - m - n + i + 1)); // Add to the CDF answer.

                scaledCDF += scaledPDF;
              }

              for (; samplesDone < n; samplesDone++) {
                // Apply all the rest of the normalization
                scaledCDF *= 1 - m / (N - samplesDone);
              } // Bound answer sanely before returning.


              return Math.min(1, Math.max(0, scaledCDF));
            }
          }
        }); // extend uniform function with static methods

        jStat.extend(jStat.poisson, {
          pdf: function pdf(k, l) {
            if (l < 0 || k % 1 !== 0 || k < 0) {
              return 0;
            }

            return Math.pow(l, k) * Math.exp(-l) / jStat.factorial(k);
          },
          cdf: function cdf(x, l) {
            var sumarr = [],
                k = 0;
            if (x < 0) return 0;

            for (; k <= x; k++) {
              sumarr.push(jStat.poisson.pdf(k, l));
            }

            return jStat.sum(sumarr);
          },
          mean: function mean(l) {
            return l;
          },
          variance: function variance(l) {
            return l;
          },
          sampleSmall: function sampleSmall(l) {
            var p = 1,
                k = 0,
                L = Math.exp(-l);

            do {
              k++;
              p *= jStat._random_fn();
            } while (p > L);

            return k - 1;
          },
          sampleLarge: function sampleLarge(l) {
            var lam = l;
            var k;
            var U, V, slam, loglam, a, b, invalpha, vr, us;
            slam = Math.sqrt(lam);
            loglam = Math.log(lam);
            b = 0.931 + 2.53 * slam;
            a = -0.059 + 0.02483 * b;
            invalpha = 1.1239 + 1.1328 / (b - 3.4);
            vr = 0.9277 - 3.6224 / (b - 2);

            while (1) {
              U = Math.random() - 0.5;
              V = Math.random();
              us = 0.5 - Math.abs(U);
              k = Math.floor((2 * a / us + b) * U + lam + 0.43);

              if (us >= 0.07 && V <= vr) {
                return k;
              }

              if (k < 0 || us < 0.013 && V > us) {
                continue;
              }
              /* log(V) == log(0.0) ok here */

              /* if U==0.0 so that us==0.0, log is ok since always returns */


              if (Math.log(V) + Math.log(invalpha) - Math.log(a / (us * us) + b) <= -lam + k * loglam - jStat.loggam(k + 1)) {
                return k;
              }
            }
          },
          sample: function sample(l) {
            if (l < 10) return this.sampleSmall(l);else return this.sampleLarge(l);
          }
        }); // extend triangular function with static methods

        jStat.extend(jStat.triangular, {
          pdf: function pdf(x, a, b, c) {
            if (b <= a || c < a || c > b) {
              return NaN;
            } else {
              if (x < a || x > b) {
                return 0;
              } else if (x < c) {
                return 2 * (x - a) / ((b - a) * (c - a));
              } else if (x === c) {
                return 2 / (b - a);
              } else {
                // x > c
                return 2 * (b - x) / ((b - a) * (b - c));
              }
            }
          },
          cdf: function cdf(x, a, b, c) {
            if (b <= a || c < a || c > b) return NaN;
            if (x <= a) return 0;else if (x >= b) return 1;
            if (x <= c) return Math.pow(x - a, 2) / ((b - a) * (c - a));else // x > c
              return 1 - Math.pow(b - x, 2) / ((b - a) * (b - c));
          },
          inv: function inv(p, a, b, c) {
            if (b <= a || c < a || c > b) {
              return NaN;
            } else {
              if (p <= (c - a) / (b - a)) {
                return a + (b - a) * Math.sqrt(p * ((c - a) / (b - a)));
              } else {
                // p > ((c - a) / (b - a))
                return a + (b - a) * (1 - Math.sqrt((1 - p) * (1 - (c - a) / (b - a))));
              }
            }
          },
          mean: function mean(a, b, c) {
            return (a + b + c) / 3;
          },
          median: function median(a, b, c) {
            if (c <= (a + b) / 2) {
              return b - Math.sqrt((b - a) * (b - c)) / Math.sqrt(2);
            } else if (c > (a + b) / 2) {
              return a + Math.sqrt((b - a) * (c - a)) / Math.sqrt(2);
            }
          },
          mode: function mode(a, b, c) {
            return c;
          },
          sample: function sample(a, b, c) {
            var u = jStat._random_fn();

            if (u < (c - a) / (b - a)) return a + Math.sqrt(u * (b - a) * (c - a));
            return b - Math.sqrt((1 - u) * (b - a) * (b - c));
          },
          variance: function variance(a, b, c) {
            return (a * a + b * b + c * c - a * b - a * c - b * c) / 18;
          }
        }); // extend arcsine function with static methods

        jStat.extend(jStat.arcsine, {
          pdf: function pdf(x, a, b) {
            if (b <= a) return NaN;
            return x <= a || x >= b ? 0 : 2 / Math.PI * Math.pow(Math.pow(b - a, 2) - Math.pow(2 * x - a - b, 2), -0.5);
          },
          cdf: function cdf(x, a, b) {
            if (x < a) return 0;else if (x < b) return 2 / Math.PI * Math.asin(Math.sqrt((x - a) / (b - a)));
            return 1;
          },
          inv: function inv(p, a, b) {
            return a + (0.5 - 0.5 * Math.cos(Math.PI * p)) * (b - a);
          },
          mean: function mean(a, b) {
            if (b <= a) return NaN;
            return (a + b) / 2;
          },
          median: function median(a, b) {
            if (b <= a) return NaN;
            return (a + b) / 2;
          },
          mode: function
            /*a, b*/
          mode() {
            throw new Error('mode is not yet implemented');
          },
          sample: function sample(a, b) {
            return (a + b) / 2 + (b - a) / 2 * Math.sin(2 * Math.PI * jStat.uniform.sample(0, 1));
          },
          variance: function variance(a, b) {
            if (b <= a) return NaN;
            return Math.pow(b - a, 2) / 8;
          }
        });

        function laplaceSign(x) {
          return x / Math.abs(x);
        }

        jStat.extend(jStat.laplace, {
          pdf: function pdf(x, mu, b) {
            return b <= 0 ? 0 : Math.exp(-Math.abs(x - mu) / b) / (2 * b);
          },
          cdf: function cdf(x, mu, b) {
            if (b <= 0) {
              return 0;
            }

            if (x < mu) {
              return 0.5 * Math.exp((x - mu) / b);
            } else {
              return 1 - 0.5 * Math.exp(-(x - mu) / b);
            }
          },
          mean: function mean(mu
          /*, b*/
          ) {
            return mu;
          },
          median: function median(mu
          /*, b*/
          ) {
            return mu;
          },
          mode: function mode(mu
          /*, b*/
          ) {
            return mu;
          },
          variance: function variance(mu, b) {
            return 2 * b * b;
          },
          sample: function sample(mu, b) {
            var u = jStat._random_fn() - 0.5;
            return mu - b * laplaceSign(u) * Math.log(1 - 2 * Math.abs(u));
          }
        });

        function tukeyWprob(w, rr, cc) {
          var nleg = 12;
          var ihalf = 6;
          var C1 = -30;
          var C2 = -50;
          var C3 = 60;
          var bb = 8;
          var wlar = 3;
          var wincr1 = 2;
          var wincr2 = 3;
          var xleg = [0.981560634246719250690549090149, 0.904117256370474856678465866119, 0.769902674194304687036893833213, 0.587317954286617447296702418941, 0.367831498998180193752691536644, 0.125233408511468915472441369464];
          var aleg = [0.047175336386511827194615961485, 0.106939325995318430960254718194, 0.160078328543346226334652529543, 0.203167426723065921749064455810, 0.233492536538354808760849898925, 0.249147045813402785000562436043];
          var qsqz = w * 0.5; // if w >= 16 then the integral lower bound (occurs for c=20)
          // is 0.99999999999995 so return a value of 1.

          if (qsqz >= bb) return 1.0; // find (f(w/2) - 1) ^ cc
          // (first term in integral of hartley's form).

          var pr_w = 2 * jStat.normal.cdf(qsqz, 0, 1, 1, 0) - 1; // erf(qsqz / M_SQRT2)
          // if pr_w ^ cc < 2e-22 then set pr_w = 0

          if (pr_w >= Math.exp(C2 / cc)) pr_w = Math.pow(pr_w, cc);else pr_w = 0.0; // if w is large then the second component of the
          // integral is small, so fewer intervals are needed.

          var wincr;
          if (w > wlar) wincr = wincr1;else wincr = wincr2; // find the integral of second term of hartley's form
          // for the integral of the range for equal-length
          // intervals using legendre quadrature.  limits of
          // integration are from (w/2, 8).  two or three
          // equal-length intervals are used.
          // blb and bub are lower and upper limits of integration.

          var blb = qsqz;
          var binc = (bb - qsqz) / wincr;
          var bub = blb + binc;
          var einsum = 0.0; // integrate over each interval

          var cc1 = cc - 1.0;

          for (var wi = 1; wi <= wincr; wi++) {
            var elsum = 0.0;
            var a = 0.5 * (bub + blb); // legendre quadrature with order = nleg

            var b = 0.5 * (bub - blb);

            for (var jj = 1; jj <= nleg; jj++) {
              var j, xx;

              if (ihalf < jj) {
                j = nleg - jj + 1;
                xx = xleg[j - 1];
              } else {
                j = jj;
                xx = -xleg[j - 1];
              }

              var c = b * xx;
              var ac = a + c; // if exp(-qexpo/2) < 9e-14,
              // then doesn't contribute to integral

              var qexpo = ac * ac;
              if (qexpo > C3) break;
              var pplus = 2 * jStat.normal.cdf(ac, 0, 1, 1, 0);
              var pminus = 2 * jStat.normal.cdf(ac, w, 1, 1, 0); // if rinsum ^ (cc-1) < 9e-14,
              // then doesn't contribute to integral

              var rinsum = pplus * 0.5 - pminus * 0.5;

              if (rinsum >= Math.exp(C1 / cc1)) {
                rinsum = aleg[j - 1] * Math.exp(-(0.5 * qexpo)) * Math.pow(rinsum, cc1);
                elsum += rinsum;
              }
            }

            elsum *= 2.0 * b * cc / Math.sqrt(2 * Math.PI);
            einsum += elsum;
            blb = bub;
            bub += binc;
          } // if pr_w ^ rr < 9e-14, then return 0


          pr_w += einsum;
          if (pr_w <= Math.exp(C1 / rr)) return 0;
          pr_w = Math.pow(pr_w, rr);
          if (pr_w >= 1) // 1 was iMax was eps
            return 1;
          return pr_w;
        }

        function tukeyQinv(p, c, v) {
          var p0 = 0.322232421088;
          var q0 = 0.993484626060e-01;
          var p1 = -1.0;
          var q1 = 0.588581570495;
          var p2 = -0.342242088547;
          var q2 = 0.531103462366;
          var p3 = -0.204231210125;
          var q3 = 0.103537752850;
          var p4 = -0.453642210148e-04;
          var q4 = 0.38560700634e-02;
          var c1 = 0.8832;
          var c2 = 0.2368;
          var c3 = 1.214;
          var c4 = 1.208;
          var c5 = 1.4142;
          var vmax = 120.0;
          var ps = 0.5 - 0.5 * p;
          var yi = Math.sqrt(Math.log(1.0 / (ps * ps)));
          var t = yi + ((((yi * p4 + p3) * yi + p2) * yi + p1) * yi + p0) / ((((yi * q4 + q3) * yi + q2) * yi + q1) * yi + q0);
          if (v < vmax) t += (t * t * t + t) / v / 4.0;
          var q = c1 - c2 * t;
          if (v < vmax) q += -c3 / v + c4 * t / v;
          return t * (q * Math.log(c - 1.0) + c5);
        }

        jStat.extend(jStat.tukey, {
          cdf: function cdf(q, nmeans, df) {
            // Identical implementation as the R ptukey() function as of commit 68947
            var rr = 1;
            var cc = nmeans;
            var nlegq = 16;
            var ihalfq = 8;
            var eps1 = -30.0;
            var eps2 = 1.0e-14;
            var dhaf = 100.0;
            var dquar = 800.0;
            var deigh = 5000.0;
            var dlarg = 25000.0;
            var ulen1 = 1.0;
            var ulen2 = 0.5;
            var ulen3 = 0.25;
            var ulen4 = 0.125;
            var xlegq = [0.989400934991649932596154173450, 0.944575023073232576077988415535, 0.865631202387831743880467897712, 0.755404408355003033895101194847, 0.617876244402643748446671764049, 0.458016777657227386342419442984, 0.281603550779258913230460501460, 0.950125098376374401853193354250e-1];
            var alegq = [0.271524594117540948517805724560e-1, 0.622535239386478928628438369944e-1, 0.951585116824927848099251076022e-1, 0.124628971255533872052476282192, 0.149595988816576732081501730547, 0.169156519395002538189312079030, 0.182603415044923588866763667969, 0.189450610455068496285396723208];
            if (q <= 0) return 0; // df must be > 1
            // there must be at least two values

            if (df < 2 || rr < 1 || cc < 2) return NaN;
            if (!Number.isFinite(q)) return 1;
            if (df > dlarg) return tukeyWprob(q, rr, cc); // calculate leading constant

            var f2 = df * 0.5;
            var f2lf = f2 * Math.log(df) - df * Math.log(2) - jStat.gammaln(f2);
            var f21 = f2 - 1.0; // integral is divided into unit, half-unit, quarter-unit, or
            // eighth-unit length intervals depending on the value of the
            // degrees of freedom.

            var ff4 = df * 0.25;
            var ulen;
            if (df <= dhaf) ulen = ulen1;else if (df <= dquar) ulen = ulen2;else if (df <= deigh) ulen = ulen3;else ulen = ulen4;
            f2lf += Math.log(ulen); // integrate over each subinterval

            var ans = 0.0;

            for (var i = 1; i <= 50; i++) {
              var otsum = 0.0; // legendre quadrature with order = nlegq
              // nodes (stored in xlegq) are symmetric around zero.

              var twa1 = (2 * i - 1) * ulen;

              for (var jj = 1; jj <= nlegq; jj++) {
                var j, t1;

                if (ihalfq < jj) {
                  j = jj - ihalfq - 1;
                  t1 = f2lf + f21 * Math.log(twa1 + xlegq[j] * ulen) - (xlegq[j] * ulen + twa1) * ff4;
                } else {
                  j = jj - 1;
                  t1 = f2lf + f21 * Math.log(twa1 - xlegq[j] * ulen) + (xlegq[j] * ulen - twa1) * ff4;
                } // if exp(t1) < 9e-14, then doesn't contribute to integral


                var qsqz;

                if (t1 >= eps1) {
                  if (ihalfq < jj) {
                    qsqz = q * Math.sqrt((xlegq[j] * ulen + twa1) * 0.5);
                  } else {
                    qsqz = q * Math.sqrt((-(xlegq[j] * ulen) + twa1) * 0.5);
                  } // call wprob to find integral of range portion


                  var wprb = tukeyWprob(qsqz, rr, cc);
                  var rotsum = wprb * alegq[j] * Math.exp(t1);
                  otsum += rotsum;
                } // end legendre integral for interval i
                // L200:

              } // if integral for interval i < 1e-14, then stop.
              // However, in order to avoid small area under left tail,
              // at least  1 / ulen  intervals are calculated.


              if (i * ulen >= 1.0 && otsum <= eps2) break; // end of interval i
              // L330:

              ans += otsum;
            }

            if (otsum > eps2) {
              // not converged
              throw new Error('tukey.cdf failed to converge');
            }

            if (ans > 1) ans = 1;
            return ans;
          },
          inv: function inv(p, nmeans, df) {
            // Identical implementation as the R qtukey() function as of commit 68947
            var rr = 1;
            var cc = nmeans;
            var eps = 0.0001;
            var maxiter = 50; // df must be > 1 ; there must be at least two values

            if (df < 2 || rr < 1 || cc < 2) return NaN;
            if (p < 0 || p > 1) return NaN;
            if (p === 0) return 0;
            if (p === 1) return Infinity; // Initial value

            var x0 = tukeyQinv(p, cc, df); // Find prob(value < x0)

            var valx0 = jStat.tukey.cdf(x0, nmeans, df) - p; // Find the second iterate and prob(value < x1).
            // If the first iterate has probability value
            // exceeding p then second iterate is 1 less than
            // first iterate; otherwise it is 1 greater.

            var x1;
            if (valx0 > 0.0) x1 = Math.max(0.0, x0 - 1.0);else x1 = x0 + 1.0;
            var valx1 = jStat.tukey.cdf(x1, nmeans, df) - p; // Find new iterate

            var ans;

            for (var iter = 1; iter < maxiter; iter++) {
              ans = x1 - valx1 * (x1 - x0) / (valx1 - valx0);
              valx0 = valx1; // New iterate must be >= 0

              x0 = x1;

              if (ans < 0.0) {
                ans = 0.0;
                valx1 = -p;
              } // Find prob(value < new iterate)


              valx1 = jStat.tukey.cdf(ans, nmeans, df) - p;
              x1 = ans; // If the difference between two successive
              // iterates is less than eps, stop

              var xabs = Math.abs(x1 - x0);
              if (xabs < eps) return ans;
            }

            throw new Error('tukey.inv failed to converge');
          }
        });
      })(jStat, Math);
      /* Provides functions for the solution of linear system of equations, integration, extrapolation,
       * interpolation, eigenvalue problems, differential equations and PCA analysis. */


      (function (jStat, Math) {
        var push = Array.prototype.push;
        var isArray = jStat.utils.isArray;

        function isUsable(arg) {
          return isArray(arg) || arg instanceof jStat;
        }

        jStat.extend({
          // add a vector/matrix to a vector/matrix or scalar
          add: function add(arr, arg) {
            // check if arg is a vector or scalar
            if (isUsable(arg)) {
              if (!isUsable(arg[0])) arg = [arg];
              return jStat.map(arr, function (value, row, col) {
                return value + arg[row][col];
              });
            }

            return jStat.map(arr, function (value) {
              return value + arg;
            });
          },
          // subtract a vector or scalar from the vector
          subtract: function subtract(arr, arg) {
            // check if arg is a vector or scalar
            if (isUsable(arg)) {
              if (!isUsable(arg[0])) arg = [arg];
              return jStat.map(arr, function (value, row, col) {
                return value - arg[row][col] || 0;
              });
            }

            return jStat.map(arr, function (value) {
              return value - arg;
            });
          },
          // matrix division
          divide: function divide(arr, arg) {
            if (isUsable(arg)) {
              if (!isUsable(arg[0])) arg = [arg];
              return jStat.multiply(arr, jStat.inv(arg));
            }

            return jStat.map(arr, function (value) {
              return value / arg;
            });
          },
          // matrix multiplication
          multiply: function multiply(arr, arg) {
            var row, col, nrescols, sum, nrow, ncol, res, rescols; // eg: arr = 2 arg = 3 -> 6 for res[0][0] statement closure

            if (arr.length === undefined && arg.length === undefined) {
              return arr * arg;
            }

            nrow = arr.length, ncol = arr[0].length, res = jStat.zeros(nrow, nrescols = isUsable(arg) ? arg[0].length : ncol), rescols = 0;

            if (isUsable(arg)) {
              for (; rescols < nrescols; rescols++) {
                for (row = 0; row < nrow; row++) {
                  sum = 0;

                  for (col = 0; col < ncol; col++) {
                    sum += arr[row][col] * arg[col][rescols];
                  }

                  res[row][rescols] = sum;
                }
              }

              return nrow === 1 && rescols === 1 ? res[0][0] : res;
            }

            return jStat.map(arr, function (value) {
              return value * arg;
            });
          },
          // outer([1,2,3],[4,5,6])
          // ===
          // [[1],[2],[3]] times [[4,5,6]]
          // ->
          // [[4,5,6],[8,10,12],[12,15,18]]
          outer: function outer(A, B) {
            return jStat.multiply(A.map(function (t) {
              return [t];
            }), [B]);
          },
          // Returns the dot product of two matricies
          dot: function dot(arr, arg) {
            if (!isUsable(arr[0])) arr = [arr];
            if (!isUsable(arg[0])) arg = [arg]; // convert column to row vector

            var left = arr[0].length === 1 && arr.length !== 1 ? jStat.transpose(arr) : arr,
                right = arg[0].length === 1 && arg.length !== 1 ? jStat.transpose(arg) : arg,
                res = [],
                row = 0,
                nrow = left.length,
                ncol = left[0].length,
                sum,
                col;

            for (; row < nrow; row++) {
              res[row] = [];
              sum = 0;

              for (col = 0; col < ncol; col++) {
                sum += left[row][col] * right[row][col];
              }

              res[row] = sum;
            }

            return res.length === 1 ? res[0] : res;
          },
          // raise every element by a scalar
          pow: function pow(arr, arg) {
            return jStat.map(arr, function (value) {
              return Math.pow(value, arg);
            });
          },
          // exponentiate every element
          exp: function exp(arr) {
            return jStat.map(arr, function (value) {
              return Math.exp(value);
            });
          },
          // generate the natural log of every element
          log: function exp(arr) {
            return jStat.map(arr, function (value) {
              return Math.log(value);
            });
          },
          // generate the absolute values of the vector
          abs: function abs(arr) {
            return jStat.map(arr, function (value) {
              return Math.abs(value);
            });
          },
          // computes the p-norm of the vector
          // In the case that a matrix is passed, uses the first row as the vector
          norm: function norm(arr, p) {
            var nnorm = 0,
                i = 0; // check the p-value of the norm, and set for most common case

            if (isNaN(p)) p = 2; // check if multi-dimensional array, and make vector correction

            if (isUsable(arr[0])) arr = arr[0]; // vector norm

            for (; i < arr.length; i++) {
              nnorm += Math.pow(Math.abs(arr[i]), p);
            }

            return Math.pow(nnorm, 1 / p);
          },
          // computes the angle between two vectors in rads
          // In case a matrix is passed, this uses the first row as the vector
          angle: function angle(arr, arg) {
            return Math.acos(jStat.dot(arr, arg) / (jStat.norm(arr) * jStat.norm(arg)));
          },
          // augment one matrix by another
          // Note: this function returns a matrix, not a jStat object
          aug: function aug(a, b) {
            var newarr = [];
            var i;

            for (i = 0; i < a.length; i++) {
              newarr.push(a[i].slice());
            }

            for (i = 0; i < newarr.length; i++) {
              push.apply(newarr[i], b[i]);
            }

            return newarr;
          },
          // The inv() function calculates the inverse of a matrix
          // Create the inverse by augmenting the matrix by the identity matrix of the
          // appropriate size, and then use G-J elimination on the augmented matrix.
          inv: function inv(a) {
            var rows = a.length;
            var cols = a[0].length;
            var b = jStat.identity(rows, cols);
            var c = jStat.gauss_jordan(a, b);
            var result = [];
            var i = 0;
            var j; //We need to copy the inverse portion to a new matrix to rid G-J artifacts

            for (; i < rows; i++) {
              result[i] = [];

              for (j = cols; j < c[0].length; j++) {
                result[i][j - cols] = c[i][j];
              }
            }

            return result;
          },
          // calculate the determinant of a matrix
          det: function det(a) {
            var alen = a.length,
                alend = alen * 2,
                vals = new Array(alend),
                rowshift = alen - 1,
                colshift = alend - 1,
                mrow = rowshift - alen + 1,
                mcol = colshift,
                i = 0,
                result = 0,
                j; // check for special 2x2 case

            if (alen === 2) {
              return a[0][0] * a[1][1] - a[0][1] * a[1][0];
            }

            for (; i < alend; i++) {
              vals[i] = 1;
            }

            for (i = 0; i < alen; i++) {
              for (j = 0; j < alen; j++) {
                vals[mrow < 0 ? mrow + alen : mrow] *= a[i][j];
                vals[mcol < alen ? mcol + alen : mcol] *= a[i][j];
                mrow++;
                mcol--;
              }

              mrow = --rowshift - alen + 1;
              mcol = --colshift;
            }

            for (i = 0; i < alen; i++) {
              result += vals[i];
            }

            for (; i < alend; i++) {
              result -= vals[i];
            }

            return result;
          },
          gauss_elimination: function gauss_elimination(a, b) {
            var i = 0,
                j = 0,
                n = a.length,
                m = a[0].length,
                factor = 1,
                sum = 0,
                x = [],
                maug,
                pivot,
                temp,
                k;
            a = jStat.aug(a, b);
            maug = a[0].length;

            for (i = 0; i < n; i++) {
              pivot = a[i][i];
              j = i;

              for (k = i + 1; k < m; k++) {
                if (pivot < Math.abs(a[k][i])) {
                  pivot = a[k][i];
                  j = k;
                }
              }

              if (j != i) {
                for (k = 0; k < maug; k++) {
                  temp = a[i][k];
                  a[i][k] = a[j][k];
                  a[j][k] = temp;
                }
              }

              for (j = i + 1; j < n; j++) {
                factor = a[j][i] / a[i][i];

                for (k = i; k < maug; k++) {
                  a[j][k] = a[j][k] - factor * a[i][k];
                }
              }
            }

            for (i = n - 1; i >= 0; i--) {
              sum = 0;

              for (j = i + 1; j <= n - 1; j++) {
                sum = sum + x[j] * a[i][j];
              }

              x[i] = (a[i][maug - 1] - sum) / a[i][i];
            }

            return x;
          },
          gauss_jordan: function gauss_jordan(a, b) {
            var m = jStat.aug(a, b);
            var h = m.length;
            var w = m[0].length;
            var c = 0;
            var x, y, y2; // find max pivot

            for (y = 0; y < h; y++) {
              var maxrow = y;

              for (y2 = y + 1; y2 < h; y2++) {
                if (Math.abs(m[y2][y]) > Math.abs(m[maxrow][y])) maxrow = y2;
              }

              var tmp = m[y];
              m[y] = m[maxrow];
              m[maxrow] = tmp;

              for (y2 = y + 1; y2 < h; y2++) {
                c = m[y2][y] / m[y][y];

                for (x = y; x < w; x++) {
                  m[y2][x] -= m[y][x] * c;
                }
              }
            } // backsubstitute


            for (y = h - 1; y >= 0; y--) {
              c = m[y][y];

              for (y2 = 0; y2 < y; y2++) {
                for (x = w - 1; x > y - 1; x--) {
                  m[y2][x] -= m[y][x] * m[y2][y] / c;
                }
              }

              m[y][y] /= c;

              for (x = h; x < w; x++) {
                m[y][x] /= c;
              }
            }

            return m;
          },
          // solve equation
          // Ax=b
          // A is upper triangular matrix
          // A=[[1,2,3],[0,4,5],[0,6,7]]
          // b=[1,2,3]
          // triaUpSolve(A,b) // -> [2.666,0.1666,1.666]
          // if you use matrix style
          // A=[[1,2,3],[0,4,5],[0,6,7]]
          // b=[[1],[2],[3]]
          // will return [[2.666],[0.1666],[1.666]]
          triaUpSolve: function triaUpSolve(A, b) {
            var size = A[0].length;
            var x = jStat.zeros(1, size)[0];
            var parts;
            var matrix_mode = false;

            if (b[0].length != undefined) {
              b = b.map(function (i) {
                return i[0];
              });
              matrix_mode = true;
            }

            jStat.arange(size - 1, -1, -1).forEach(function (i) {
              parts = jStat.arange(i + 1, size).map(function (j) {
                return x[j] * A[i][j];
              });
              x[i] = (b[i] - jStat.sum(parts)) / A[i][i];
            });
            if (matrix_mode) return x.map(function (i) {
              return [i];
            });
            return x;
          },
          triaLowSolve: function triaLowSolve(A, b) {
            // like to triaUpSolve but A is lower triangular matrix
            var size = A[0].length;
            var x = jStat.zeros(1, size)[0];
            var parts;
            var matrix_mode = false;

            if (b[0].length != undefined) {
              b = b.map(function (i) {
                return i[0];
              });
              matrix_mode = true;
            }

            jStat.arange(size).forEach(function (i) {
              parts = jStat.arange(i).map(function (j) {
                return A[i][j] * x[j];
              });
              x[i] = (b[i] - jStat.sum(parts)) / A[i][i];
            });
            if (matrix_mode) return x.map(function (i) {
              return [i];
            });
            return x;
          },
          // A -> [L,U]
          // A=LU
          // L is lower triangular matrix
          // U is upper triangular matrix
          lu: function lu(A) {
            var size = A.length; //var L=jStat.diagonal(jStat.ones(1,size)[0]);

            var L = jStat.identity(size);
            var R = jStat.zeros(A.length, A[0].length);
            var parts;
            jStat.arange(size).forEach(function (t) {
              R[0][t] = A[0][t];
            });
            jStat.arange(1, size).forEach(function (l) {
              jStat.arange(l).forEach(function (i) {
                parts = jStat.arange(i).map(function (jj) {
                  return L[l][jj] * R[jj][i];
                });
                L[l][i] = (A[l][i] - jStat.sum(parts)) / R[i][i];
              });
              jStat.arange(l, size).forEach(function (j) {
                parts = jStat.arange(l).map(function (jj) {
                  return L[l][jj] * R[jj][j];
                });
                R[l][j] = A[parts.length][j] - jStat.sum(parts);
              });
            });
            return [L, R];
          },
          // A -> T
          // A=TT'
          // T is lower triangular matrix
          cholesky: function cholesky(A) {
            var size = A.length;
            var T = jStat.zeros(A.length, A[0].length);
            var parts;
            jStat.arange(size).forEach(function (i) {
              parts = jStat.arange(i).map(function (t) {
                return Math.pow(T[i][t], 2);
              });
              T[i][i] = Math.sqrt(A[i][i] - jStat.sum(parts));
              jStat.arange(i + 1, size).forEach(function (j) {
                parts = jStat.arange(i).map(function (t) {
                  return T[i][t] * T[j][t];
                });
                T[j][i] = (A[i][j] - jStat.sum(parts)) / T[i][i];
              });
            });
            return T;
          },
          gauss_jacobi: function gauss_jacobi(a, b, x, r) {
            var i = 0;
            var j = 0;
            var n = a.length;
            var l = [];
            var u = [];
            var d = [];
            var xv, c, h, xk;

            for (; i < n; i++) {
              l[i] = [];
              u[i] = [];
              d[i] = [];

              for (j = 0; j < n; j++) {
                if (i > j) {
                  l[i][j] = a[i][j];
                  u[i][j] = d[i][j] = 0;
                } else if (i < j) {
                  u[i][j] = a[i][j];
                  l[i][j] = d[i][j] = 0;
                } else {
                  d[i][j] = a[i][j];
                  l[i][j] = u[i][j] = 0;
                }
              }
            }

            h = jStat.multiply(jStat.multiply(jStat.inv(d), jStat.add(l, u)), -1);
            c = jStat.multiply(jStat.inv(d), b);
            xv = x;
            xk = jStat.add(jStat.multiply(h, x), c);
            i = 2;

            while (Math.abs(jStat.norm(jStat.subtract(xk, xv))) > r) {
              xv = xk;
              xk = jStat.add(jStat.multiply(h, xv), c);
              i++;
            }

            return xk;
          },
          gauss_seidel: function gauss_seidel(a, b, x, r) {
            var i = 0;
            var n = a.length;
            var l = [];
            var u = [];
            var d = [];
            var j, xv, c, h, xk;

            for (; i < n; i++) {
              l[i] = [];
              u[i] = [];
              d[i] = [];

              for (j = 0; j < n; j++) {
                if (i > j) {
                  l[i][j] = a[i][j];
                  u[i][j] = d[i][j] = 0;
                } else if (i < j) {
                  u[i][j] = a[i][j];
                  l[i][j] = d[i][j] = 0;
                } else {
                  d[i][j] = a[i][j];
                  l[i][j] = u[i][j] = 0;
                }
              }
            }

            h = jStat.multiply(jStat.multiply(jStat.inv(jStat.add(d, l)), u), -1);
            c = jStat.multiply(jStat.inv(jStat.add(d, l)), b);
            xv = x;
            xk = jStat.add(jStat.multiply(h, x), c);
            i = 2;

            while (Math.abs(jStat.norm(jStat.subtract(xk, xv))) > r) {
              xv = xk;
              xk = jStat.add(jStat.multiply(h, xv), c);
              i = i + 1;
            }

            return xk;
          },
          SOR: function SOR(a, b, x, r, w) {
            var i = 0;
            var n = a.length;
            var l = [];
            var u = [];
            var d = [];
            var j, xv, c, h, xk;

            for (; i < n; i++) {
              l[i] = [];
              u[i] = [];
              d[i] = [];

              for (j = 0; j < n; j++) {
                if (i > j) {
                  l[i][j] = a[i][j];
                  u[i][j] = d[i][j] = 0;
                } else if (i < j) {
                  u[i][j] = a[i][j];
                  l[i][j] = d[i][j] = 0;
                } else {
                  d[i][j] = a[i][j];
                  l[i][j] = u[i][j] = 0;
                }
              }
            }

            h = jStat.multiply(jStat.inv(jStat.add(d, jStat.multiply(l, w))), jStat.subtract(jStat.multiply(d, 1 - w), jStat.multiply(u, w)));
            c = jStat.multiply(jStat.multiply(jStat.inv(jStat.add(d, jStat.multiply(l, w))), b), w);
            xv = x;
            xk = jStat.add(jStat.multiply(h, x), c);
            i = 2;

            while (Math.abs(jStat.norm(jStat.subtract(xk, xv))) > r) {
              xv = xk;
              xk = jStat.add(jStat.multiply(h, xv), c);
              i++;
            }

            return xk;
          },
          householder: function householder(a) {
            var m = a.length;
            var n = a[0].length;
            var i = 0;
            var w = [];
            var p = [];
            var alpha, r, k, j, factor;

            for (; i < m - 1; i++) {
              alpha = 0;

              for (j = i + 1; j < n; j++) {
                alpha += a[j][i] * a[j][i];
              }

              factor = a[i + 1][i] > 0 ? -1 : 1;
              alpha = factor * Math.sqrt(alpha);
              r = Math.sqrt((alpha * alpha - a[i + 1][i] * alpha) / 2);
              w = jStat.zeros(m, 1);
              w[i + 1][0] = (a[i + 1][i] - alpha) / (2 * r);

              for (k = i + 2; k < m; k++) {
                w[k][0] = a[k][i] / (2 * r);
              }

              p = jStat.subtract(jStat.identity(m, n), jStat.multiply(jStat.multiply(w, jStat.transpose(w)), 2));
              a = jStat.multiply(p, jStat.multiply(a, p));
            }

            return a;
          },
          // A -> [Q,R]
          // Q is orthogonal matrix
          // R is upper triangular
          QR: function () {
            // x -> Q
            // find a orthogonal matrix Q st.
            // Qx=y
            // y is [||x||,0,0,...]
            // quick ref
            var sum = jStat.sum;
            var range = jStat.arange;

            function qr2(x) {
              // quick impletation
              // https://www.stat.wisc.edu/~larget/math496/qr.html
              var n = x.length;
              var p = x[0].length;
              var r = jStat.zeros(p, p);
              x = jStat.copy(x);
              var i, j, k;

              for (j = 0; j < p; j++) {
                r[j][j] = Math.sqrt(sum(range(n).map(function (i) {
                  return x[i][j] * x[i][j];
                })));

                for (i = 0; i < n; i++) {
                  x[i][j] = x[i][j] / r[j][j];
                }

                for (k = j + 1; k < p; k++) {
                  r[j][k] = sum(range(n).map(function (i) {
                    return x[i][j] * x[i][k];
                  }));

                  for (i = 0; i < n; i++) {
                    x[i][k] = x[i][k] - x[i][j] * r[j][k];
                  }
                }
              }

              return [x, r];
            }

            return qr2;
          }(),
          lstsq: function () {
            // solve least squard problem for Ax=b as QR decomposition way if b is
            // [[b1],[b2],[b3]] form will return [[x1],[x2],[x3]] array form solution
            // else b is [b1,b2,b3] form will return [x1,x2,x3] array form solution
            function R_I(A) {
              A = jStat.copy(A);
              var size = A.length;
              var I = jStat.identity(size);
              jStat.arange(size - 1, -1, -1).forEach(function (i) {
                jStat.sliceAssign(I, {
                  row: i
                }, jStat.divide(jStat.slice(I, {
                  row: i
                }), A[i][i]));
                jStat.sliceAssign(A, {
                  row: i
                }, jStat.divide(jStat.slice(A, {
                  row: i
                }), A[i][i]));
                jStat.arange(i).forEach(function (j) {
                  var c = jStat.multiply(A[j][i], -1);
                  var Aj = jStat.slice(A, {
                    row: j
                  });
                  var cAi = jStat.multiply(jStat.slice(A, {
                    row: i
                  }), c);
                  jStat.sliceAssign(A, {
                    row: j
                  }, jStat.add(Aj, cAi));
                  var Ij = jStat.slice(I, {
                    row: j
                  });
                  var cIi = jStat.multiply(jStat.slice(I, {
                    row: i
                  }), c);
                  jStat.sliceAssign(I, {
                    row: j
                  }, jStat.add(Ij, cIi));
                });
              });
              return I;
            }

            function qr_solve(A, b) {
              var array_mode = false;

              if (b[0].length === undefined) {
                // [c1,c2,c3] mode
                b = b.map(function (x) {
                  return [x];
                });
                array_mode = true;
              }

              var QR = jStat.QR(A);
              var Q = QR[0];
              var R = QR[1];
              var attrs = A[0].length;
              var Q1 = jStat.slice(Q, {
                col: {
                  end: attrs
                }
              });
              var R1 = jStat.slice(R, {
                row: {
                  end: attrs
                }
              });
              var RI = R_I(R1);
              var Q2 = jStat.transpose(Q1);

              if (Q2[0].length === undefined) {
                Q2 = [Q2]; // The confusing jStat.multifly implementation threat nature process again.
              }

              var x = jStat.multiply(jStat.multiply(RI, Q2), b);

              if (x.length === undefined) {
                x = [[x]]; // The confusing jStat.multifly implementation threat nature process again.
              }

              if (array_mode) return x.map(function (i) {
                return i[0];
              });
              return x;
            }

            return qr_solve;
          }(),
          jacobi: function jacobi(a) {
            var condition = 1;
            var n = a.length;
            var e = jStat.identity(n, n);
            var ev = [];
            var b, i, j, p, q, maxim, theta, s; // condition === 1 only if tolerance is not reached

            while (condition === 1) {
              maxim = a[0][1];
              p = 0;
              q = 1;

              for (i = 0; i < n; i++) {
                for (j = 0; j < n; j++) {
                  if (i != j) {
                    if (maxim < Math.abs(a[i][j])) {
                      maxim = Math.abs(a[i][j]);
                      p = i;
                      q = j;
                    }
                  }
                }
              }

              if (a[p][p] === a[q][q]) theta = a[p][q] > 0 ? Math.PI / 4 : -Math.PI / 4;else theta = Math.atan(2 * a[p][q] / (a[p][p] - a[q][q])) / 2;
              s = jStat.identity(n, n);
              s[p][p] = Math.cos(theta);
              s[p][q] = -Math.sin(theta);
              s[q][p] = Math.sin(theta);
              s[q][q] = Math.cos(theta); // eigen vector matrix

              e = jStat.multiply(e, s);
              b = jStat.multiply(jStat.multiply(jStat.inv(s), a), s);
              a = b;
              condition = 0;

              for (i = 1; i < n; i++) {
                for (j = 1; j < n; j++) {
                  if (i != j && Math.abs(a[i][j]) > 0.001) {
                    condition = 1;
                  }
                }
              }
            }

            for (i = 0; i < n; i++) {
              ev.push(a[i][i]);
            } //returns both the eigenvalue and eigenmatrix


            return [e, ev];
          },
          rungekutta: function rungekutta(f, h, p, t_j, u_j, order) {
            var k1, k2, u_j1, k3, k4;

            if (order === 2) {
              while (t_j <= p) {
                k1 = h * f(t_j, u_j);
                k2 = h * f(t_j + h, u_j + k1);
                u_j1 = u_j + (k1 + k2) / 2;
                u_j = u_j1;
                t_j = t_j + h;
              }
            }

            if (order === 4) {
              while (t_j <= p) {
                k1 = h * f(t_j, u_j);
                k2 = h * f(t_j + h / 2, u_j + k1 / 2);
                k3 = h * f(t_j + h / 2, u_j + k2 / 2);
                k4 = h * f(t_j + h, u_j + k3);
                u_j1 = u_j + (k1 + 2 * k2 + 2 * k3 + k4) / 6;
                u_j = u_j1;
                t_j = t_j + h;
              }
            }

            return u_j;
          },
          romberg: function romberg(f, a, b, order) {
            var i = 0;
            var h = (b - a) / 2;
            var x = [];
            var h1 = [];
            var g = [];
            var m, a1, j, k, I;

            while (i < order / 2) {
              I = f(a);

              for (j = a, k = 0; j <= b; j = j + h, k++) {
                x[k] = j;
              }

              m = x.length;

              for (j = 1; j < m - 1; j++) {
                I += (j % 2 !== 0 ? 4 : 2) * f(x[j]);
              }

              I = h / 3 * (I + f(b));
              g[i] = I;
              h /= 2;
              i++;
            }

            a1 = g.length;
            m = 1;

            while (a1 !== 1) {
              for (j = 0; j < a1 - 1; j++) {
                h1[j] = (Math.pow(4, m) * g[j + 1] - g[j]) / (Math.pow(4, m) - 1);
              }

              a1 = h1.length;
              g = h1;
              h1 = [];
              m++;
            }

            return g;
          },
          richardson: function richardson(X, f, x, h) {
            function pos(X, x) {
              var i = 0;
              var n = X.length;
              var p;

              for (; i < n; i++) {
                if (X[i] === x) p = i;
              }

              return p;
            }

            var h_min = Math.abs(x - X[pos(X, x) + 1]);
            var i = 0;
            var g = [];
            var h1 = [];
            var y1, y2, m, a, j;

            while (h >= h_min) {
              y1 = pos(X, x + h);
              y2 = pos(X, x);
              g[i] = (f[y1] - 2 * f[y2] + f[2 * y2 - y1]) / (h * h);
              h /= 2;
              i++;
            }

            a = g.length;
            m = 1;

            while (a != 1) {
              for (j = 0; j < a - 1; j++) {
                h1[j] = (Math.pow(4, m) * g[j + 1] - g[j]) / (Math.pow(4, m) - 1);
              }

              a = h1.length;
              g = h1;
              h1 = [];
              m++;
            }

            return g;
          },
          simpson: function simpson(f, a, b, n) {
            var h = (b - a) / n;
            var I = f(a);
            var x = [];
            var j = a;
            var k = 0;
            var i = 1;
            var m;

            for (; j <= b; j = j + h, k++) {
              x[k] = j;
            }

            m = x.length;

            for (; i < m - 1; i++) {
              I += (i % 2 !== 0 ? 4 : 2) * f(x[i]);
            }

            return h / 3 * (I + f(b));
          },
          hermite: function hermite(X, F, dF, value) {
            var n = X.length;
            var p = 0;
            var i = 0;
            var l = [];
            var dl = [];
            var A = [];
            var B = [];
            var j;

            for (; i < n; i++) {
              l[i] = 1;

              for (j = 0; j < n; j++) {
                if (i != j) l[i] *= (value - X[j]) / (X[i] - X[j]);
              }

              dl[i] = 0;

              for (j = 0; j < n; j++) {
                if (i != j) dl[i] += 1 / (X[i] - X[j]);
              }

              A[i] = (1 - 2 * (value - X[i]) * dl[i]) * (l[i] * l[i]);
              B[i] = (value - X[i]) * (l[i] * l[i]);
              p += A[i] * F[i] + B[i] * dF[i];
            }

            return p;
          },
          lagrange: function lagrange(X, F, value) {
            var p = 0;
            var i = 0;
            var j, l;
            var n = X.length;

            for (; i < n; i++) {
              l = F[i];

              for (j = 0; j < n; j++) {
                // calculating the lagrange polynomial L_i
                if (i != j) l *= (value - X[j]) / (X[i] - X[j]);
              } // adding the lagrange polynomials found above


              p += l;
            }

            return p;
          },
          cubic_spline: function cubic_spline(X, F, value) {
            var n = X.length;
            var i = 0,
                j;
            var A = [];
            var B = [];
            var alpha = [];
            var c = [];
            var h = [];
            var b = [];
            var d = [];

            for (; i < n - 1; i++) {
              h[i] = X[i + 1] - X[i];
            }

            alpha[0] = 0;

            for (i = 1; i < n - 1; i++) {
              alpha[i] = 3 / h[i] * (F[i + 1] - F[i]) - 3 / h[i - 1] * (F[i] - F[i - 1]);
            }

            for (i = 1; i < n - 1; i++) {
              A[i] = [];
              B[i] = [];
              A[i][i - 1] = h[i - 1];
              A[i][i] = 2 * (h[i - 1] + h[i]);
              A[i][i + 1] = h[i];
              B[i][0] = alpha[i];
            }

            c = jStat.multiply(jStat.inv(A), B);

            for (j = 0; j < n - 1; j++) {
              b[j] = (F[j + 1] - F[j]) / h[j] - h[j] * (c[j + 1][0] + 2 * c[j][0]) / 3;
              d[j] = (c[j + 1][0] - c[j][0]) / (3 * h[j]);
            }

            for (j = 0; j < n; j++) {
              if (X[j] > value) break;
            }

            j -= 1;
            return F[j] + (value - X[j]) * b[j] + jStat.sq(value - X[j]) * c[j] + (value - X[j]) * jStat.sq(value - X[j]) * d[j];
          },
          gauss_quadrature: function gauss_quadrature() {
            throw new Error('gauss_quadrature not yet implemented');
          },
          PCA: function PCA(X) {
            var m = X.length;
            var n = X[0].length;
            var i = 0;
            var j, temp1;
            var u = [];
            var D = [];
            var result = [];
            var temp2 = [];
            var Y = [];
            var Bt = [];
            var B = [];
            var C = [];
            var V = [];
            var Vt = [];

            for (i = 0; i < m; i++) {
              u[i] = jStat.sum(X[i]) / n;
            }

            for (i = 0; i < n; i++) {
              B[i] = [];

              for (j = 0; j < m; j++) {
                B[i][j] = X[j][i] - u[j];
              }
            }

            B = jStat.transpose(B);

            for (i = 0; i < m; i++) {
              C[i] = [];

              for (j = 0; j < m; j++) {
                C[i][j] = jStat.dot([B[i]], [B[j]]) / (n - 1);
              }
            }

            result = jStat.jacobi(C);
            V = result[0];
            D = result[1];
            Vt = jStat.transpose(V);

            for (i = 0; i < D.length; i++) {
              for (j = i; j < D.length; j++) {
                if (D[i] < D[j]) {
                  temp1 = D[i];
                  D[i] = D[j];
                  D[j] = temp1;
                  temp2 = Vt[i];
                  Vt[i] = Vt[j];
                  Vt[j] = temp2;
                }
              }
            }

            Bt = jStat.transpose(B);

            for (i = 0; i < m; i++) {
              Y[i] = [];

              for (j = 0; j < Bt.length; j++) {
                Y[i][j] = jStat.dot([Vt[i]], [Bt[j]]);
              }
            }

            return [X, D, Vt, Y];
          }
        }); // extend jStat.fn with methods that require one argument

        (function (funcs) {
          for (var i = 0; i < funcs.length; i++) {
            (function (passfunc) {
              jStat.fn[passfunc] = function (arg, func) {
                var tmpthis = this; // check for callback

                if (func) {
                  setTimeout(function () {
                    func.call(tmpthis, jStat.fn[passfunc].call(tmpthis, arg));
                  }, 15);
                  return this;
                }

                if (typeof jStat[passfunc](this, arg) === 'number') return jStat[passfunc](this, arg);else return jStat(jStat[passfunc](this, arg));
              };
            })(funcs[i]);
          }
        })('add divide multiply subtract dot pow exp log abs norm angle'.split(' '));
      })(jStat, Math);

      (function (jStat, Math) {
        var slice = [].slice;
        var isNumber = jStat.utils.isNumber;
        var isArray = jStat.utils.isArray; // flag==true denotes use of sample standard deviation
        // Z Statistics

        jStat.extend({
          // 2 different parameter lists:
          // (value, mean, sd)
          // (value, array, flag)
          zscore: function zscore() {
            var args = slice.call(arguments);

            if (isNumber(args[1])) {
              return (args[0] - args[1]) / args[2];
            }

            return (args[0] - jStat.mean(args[1])) / jStat.stdev(args[1], args[2]);
          },
          // 3 different paramter lists:
          // (value, mean, sd, sides)
          // (zscore, sides)
          // (value, array, sides, flag)
          ztest: function ztest() {
            var args = slice.call(arguments);
            var z;

            if (isArray(args[1])) {
              // (value, array, sides, flag)
              z = jStat.zscore(args[0], args[1], args[3]);
              return args[2] === 1 ? jStat.normal.cdf(-Math.abs(z), 0, 1) : jStat.normal.cdf(-Math.abs(z), 0, 1) * 2;
            } else {
              if (args.length > 2) {
                // (value, mean, sd, sides)
                z = jStat.zscore(args[0], args[1], args[2]);
                return args[3] === 1 ? jStat.normal.cdf(-Math.abs(z), 0, 1) : jStat.normal.cdf(-Math.abs(z), 0, 1) * 2;
              } else {
                // (zscore, sides)
                z = args[0];
                return args[1] === 1 ? jStat.normal.cdf(-Math.abs(z), 0, 1) : jStat.normal.cdf(-Math.abs(z), 0, 1) * 2;
              }
            }
          }
        });
        jStat.extend(jStat.fn, {
          zscore: function zscore(value, flag) {
            return (value - this.mean()) / this.stdev(flag);
          },
          ztest: function ztest(value, sides, flag) {
            var zscore = Math.abs(this.zscore(value, flag));
            return sides === 1 ? jStat.normal.cdf(-zscore, 0, 1) : jStat.normal.cdf(-zscore, 0, 1) * 2;
          }
        }); // T Statistics

        jStat.extend({
          // 2 parameter lists
          // (value, mean, sd, n)
          // (value, array)
          tscore: function tscore() {
            var args = slice.call(arguments);
            return args.length === 4 ? (args[0] - args[1]) / (args[2] / Math.sqrt(args[3])) : (args[0] - jStat.mean(args[1])) / (jStat.stdev(args[1], true) / Math.sqrt(args[1].length));
          },
          // 3 different paramter lists:
          // (value, mean, sd, n, sides)
          // (tscore, n, sides)
          // (value, array, sides)
          ttest: function ttest() {
            var args = slice.call(arguments);
            var tscore;

            if (args.length === 5) {
              tscore = Math.abs(jStat.tscore(args[0], args[1], args[2], args[3]));
              return args[4] === 1 ? jStat.studentt.cdf(-tscore, args[3] - 1) : jStat.studentt.cdf(-tscore, args[3] - 1) * 2;
            }

            if (isNumber(args[1])) {
              tscore = Math.abs(args[0]);
              return args[2] == 1 ? jStat.studentt.cdf(-tscore, args[1] - 1) : jStat.studentt.cdf(-tscore, args[1] - 1) * 2;
            }

            tscore = Math.abs(jStat.tscore(args[0], args[1]));
            return args[2] == 1 ? jStat.studentt.cdf(-tscore, args[1].length - 1) : jStat.studentt.cdf(-tscore, args[1].length - 1) * 2;
          }
        });
        jStat.extend(jStat.fn, {
          tscore: function tscore(value) {
            return (value - this.mean()) / (this.stdev(true) / Math.sqrt(this.cols()));
          },
          ttest: function ttest(value, sides) {
            return sides === 1 ? 1 - jStat.studentt.cdf(Math.abs(this.tscore(value)), this.cols() - 1) : jStat.studentt.cdf(-Math.abs(this.tscore(value)), this.cols() - 1) * 2;
          }
        }); // F Statistics

        jStat.extend({
          // Paramter list is as follows:
          // (array1, array2, array3, ...)
          // or it is an array of arrays
          // array of arrays conversion
          anovafscore: function anovafscore() {
            var args = slice.call(arguments),
                expVar,
                sample,
                sampMean,
                sampSampMean,
                tmpargs,
                unexpVar,
                i,
                j;

            if (args.length === 1) {
              tmpargs = new Array(args[0].length);

              for (i = 0; i < args[0].length; i++) {
                tmpargs[i] = args[0][i];
              }

              args = tmpargs;
            } // Builds sample array


            sample = new Array();

            for (i = 0; i < args.length; i++) {
              sample = sample.concat(args[i]);
            }

            sampMean = jStat.mean(sample); // Computes the explained variance

            expVar = 0;

            for (i = 0; i < args.length; i++) {
              expVar = expVar + args[i].length * Math.pow(jStat.mean(args[i]) - sampMean, 2);
            }

            expVar /= args.length - 1; // Computes unexplained variance

            unexpVar = 0;

            for (i = 0; i < args.length; i++) {
              sampSampMean = jStat.mean(args[i]);

              for (j = 0; j < args[i].length; j++) {
                unexpVar += Math.pow(args[i][j] - sampSampMean, 2);
              }
            }

            unexpVar /= sample.length - args.length;
            return expVar / unexpVar;
          },
          // 2 different paramter setups
          // (array1, array2, array3, ...)
          // (anovafscore, df1, df2)
          anovaftest: function anovaftest() {
            var args = slice.call(arguments),
                df1,
                df2,
                n,
                i;

            if (isNumber(args[0])) {
              return 1 - jStat.centralF.cdf(args[0], args[1], args[2]);
            }

            var anovafscore = jStat.anovafscore(args);
            df1 = args.length - 1;
            n = 0;

            for (i = 0; i < args.length; i++) {
              n = n + args[i].length;
            }

            df2 = n - df1 - 1;
            return 1 - jStat.centralF.cdf(anovafscore, df1, df2);
          },
          ftest: function ftest(fscore, df1, df2) {
            return 1 - jStat.centralF.cdf(fscore, df1, df2);
          }
        });
        jStat.extend(jStat.fn, {
          anovafscore: function anovafscore() {
            return jStat.anovafscore(this.toArray());
          },
          anovaftes: function anovaftes() {
            var n = 0;
            var i;

            for (i = 0; i < this.length; i++) {
              n = n + this[i].length;
            }

            return jStat.ftest(this.anovafscore(), this.length - 1, n - this.length);
          }
        }); // Tukey's range test

        jStat.extend({
          // 2 parameter lists
          // (mean1, mean2, n1, n2, sd)
          // (array1, array2, sd)
          qscore: function qscore() {
            var args = slice.call(arguments);
            var mean1, mean2, n1, n2, sd;

            if (isNumber(args[0])) {
              mean1 = args[0];
              mean2 = args[1];
              n1 = args[2];
              n2 = args[3];
              sd = args[4];
            } else {
              mean1 = jStat.mean(args[0]);
              mean2 = jStat.mean(args[1]);
              n1 = args[0].length;
              n2 = args[1].length;
              sd = args[2];
            }

            return Math.abs(mean1 - mean2) / (sd * Math.sqrt((1 / n1 + 1 / n2) / 2));
          },
          // 3 different parameter lists:
          // (qscore, n, k)
          // (mean1, mean2, n1, n2, sd, n, k)
          // (array1, array2, sd, n, k)
          qtest: function qtest() {
            var args = slice.call(arguments);
            var qscore;

            if (args.length === 3) {
              qscore = args[0];
              args = args.slice(1);
            } else if (args.length === 7) {
              qscore = jStat.qscore(args[0], args[1], args[2], args[3], args[4]);
              args = args.slice(5);
            } else {
              qscore = jStat.qscore(args[0], args[1], args[2]);
              args = args.slice(3);
            }

            var n = args[0];
            var k = args[1];
            return 1 - jStat.tukey.cdf(qscore, k, n - k);
          },
          tukeyhsd: function tukeyhsd(arrays) {
            var sd = jStat.pooledstdev(arrays);
            var means = arrays.map(function (arr) {
              return jStat.mean(arr);
            });
            var n = arrays.reduce(function (n, arr) {
              return n + arr.length;
            }, 0);
            var results = [];

            for (var i = 0; i < arrays.length; ++i) {
              for (var j = i + 1; j < arrays.length; ++j) {
                var p = jStat.qtest(means[i], means[j], arrays[i].length, arrays[j].length, sd, n, arrays.length);
                results.push([[i, j], p]);
              }
            }

            return results;
          }
        }); // Error Bounds

        jStat.extend({
          // 2 different parameter setups
          // (value, alpha, sd, n)
          // (value, alpha, array)
          normalci: function normalci() {
            var args = slice.call(arguments),
                ans = new Array(2),
                change;

            if (args.length === 4) {
              change = Math.abs(jStat.normal.inv(args[1] / 2, 0, 1) * args[2] / Math.sqrt(args[3]));
            } else {
              change = Math.abs(jStat.normal.inv(args[1] / 2, 0, 1) * jStat.stdev(args[2]) / Math.sqrt(args[2].length));
            }

            ans[0] = args[0] - change;
            ans[1] = args[0] + change;
            return ans;
          },
          // 2 different parameter setups
          // (value, alpha, sd, n)
          // (value, alpha, array)
          tci: function tci() {
            var args = slice.call(arguments),
                ans = new Array(2),
                change;

            if (args.length === 4) {
              change = Math.abs(jStat.studentt.inv(args[1] / 2, args[3] - 1) * args[2] / Math.sqrt(args[3]));
            } else {
              change = Math.abs(jStat.studentt.inv(args[1] / 2, args[2].length - 1) * jStat.stdev(args[2], true) / Math.sqrt(args[2].length));
            }

            ans[0] = args[0] - change;
            ans[1] = args[0] + change;
            return ans;
          },
          significant: function significant(pvalue, alpha) {
            return pvalue < alpha;
          }
        });
        jStat.extend(jStat.fn, {
          normalci: function normalci(value, alpha) {
            return jStat.normalci(value, alpha, this.toArray());
          },
          tci: function tci(value, alpha) {
            return jStat.tci(value, alpha, this.toArray());
          }
        }); // internal method for calculating the z-score for a difference of proportions test

        function differenceOfProportions(p1, n1, p2, n2) {
          if (p1 > 1 || p2 > 1 || p1 <= 0 || p2 <= 0) {
            throw new Error("Proportions should be greater than 0 and less than 1");
          }

          var pooled = (p1 * n1 + p2 * n2) / (n1 + n2);
          var se = Math.sqrt(pooled * (1 - pooled) * (1 / n1 + 1 / n2));
          return (p1 - p2) / se;
        } // Difference of Proportions


        jStat.extend(jStat.fn, {
          oneSidedDifferenceOfProportions: function oneSidedDifferenceOfProportions(p1, n1, p2, n2) {
            var z = differenceOfProportions(p1, n1, p2, n2);
            return jStat.ztest(z, 1);
          },
          twoSidedDifferenceOfProportions: function twoSidedDifferenceOfProportions(p1, n1, p2, n2) {
            var z = differenceOfProportions(p1, n1, p2, n2);
            return jStat.ztest(z, 2);
          }
        });
      })(jStat, Math);

      jStat.models = function () {
        function sub_regress(exog) {
          var var_count = exog[0].length;
          var modelList = jStat.arange(var_count).map(function (endog_index) {
            var exog_index = jStat.arange(var_count).filter(function (i) {
              return i !== endog_index;
            });
            return ols(jStat.col(exog, endog_index).map(function (x) {
              return x[0];
            }), jStat.col(exog, exog_index));
          });
          return modelList;
        } // do OLS model regress
        // exog have include const columns ,it will not generate it .In fact, exog is
        // "design matrix" look at
        //https://en.wikipedia.org/wiki/Design_matrix


        function ols(endog, exog) {
          var nobs = endog.length;
          var df_model = exog[0].length - 1;
          var df_resid = nobs - df_model - 1;
          var coef = jStat.lstsq(exog, endog);
          var predict = jStat.multiply(exog, coef.map(function (x) {
            return [x];
          })).map(function (p) {
            return p[0];
          });
          var resid = jStat.subtract(endog, predict);
          var ybar = jStat.mean(endog); // constant cause problem
          // var SST = jStat.sum(endog.map(function(y) {
          //   return Math.pow(y-ybar,2);
          // }));

          var SSE = jStat.sum(predict.map(function (f) {
            return Math.pow(f - ybar, 2);
          }));
          var SSR = jStat.sum(endog.map(function (y, i) {
            return Math.pow(y - predict[i], 2);
          }));
          var SST = SSE + SSR;
          var R2 = SSE / SST;
          return {
            exog: exog,
            endog: endog,
            nobs: nobs,
            df_model: df_model,
            df_resid: df_resid,
            coef: coef,
            predict: predict,
            resid: resid,
            ybar: ybar,
            SST: SST,
            SSE: SSE,
            SSR: SSR,
            R2: R2
          };
        } // H0: b_I=0
        // H1: b_I!=0


        function t_test(model) {
          var subModelList = sub_regress(model.exog); //var sigmaHat=jStat.stdev(model.resid);

          var sigmaHat = Math.sqrt(model.SSR / model.df_resid);
          var seBetaHat = subModelList.map(function (mod) {
            var SST = mod.SST;
            var R2 = mod.R2;
            return sigmaHat / Math.sqrt(SST * (1 - R2));
          });
          var tStatistic = model.coef.map(function (coef, i) {
            return (coef - 0) / seBetaHat[i];
          });
          var pValue = tStatistic.map(function (t) {
            var leftppf = jStat.studentt.cdf(t, model.df_resid);
            return (leftppf > 0.5 ? 1 - leftppf : leftppf) * 2;
          });
          var c = jStat.studentt.inv(0.975, model.df_resid);
          var interval95 = model.coef.map(function (coef, i) {
            var d = c * seBetaHat[i];
            return [coef - d, coef + d];
          });
          return {
            se: seBetaHat,
            t: tStatistic,
            p: pValue,
            sigmaHat: sigmaHat,
            interval95: interval95
          };
        }

        function F_test(model) {
          var F_statistic = model.R2 / model.df_model / ((1 - model.R2) / model.df_resid);

          var fcdf = function fcdf(x, n1, n2) {
            return jStat.beta.cdf(x / (n2 / n1 + x), n1 / 2, n2 / 2);
          };

          var pvalue = 1 - fcdf(F_statistic, model.df_model, model.df_resid);
          return {
            F_statistic: F_statistic,
            pvalue: pvalue
          };
        }

        function ols_wrap(endog, exog) {
          var model = ols(endog, exog);
          var ttest = t_test(model);
          var ftest = F_test(model); // Provide the Wherry / Ezekiel / McNemar / Cohen Adjusted R^2
          // Which matches the 'adjusted R^2' provided by R's lm package

          var adjust_R2 = 1 - (1 - model.R2) * ((model.nobs - 1) / model.df_resid);
          model.t = ttest;
          model.f = ftest;
          model.adjust_R2 = adjust_R2;
          return model;
        }

        return {
          ols: ols_wrap
        };
      }(); //To regress, simply build X matrix
      //(append column of 1's) using
      //buildxmatrix and build the Y
      //matrix using buildymatrix
      //(simply the transpose)
      //and run regress.
      //Regressions


      jStat.extend({
        buildxmatrix: function buildxmatrix() {
          //Parameters will be passed in as such
          //(array1,array2,array3,...)
          //as (x1,x2,x3,...)
          //needs to be (1,x1,x2,x3,...)
          var matrixRows = new Array(arguments.length);

          for (var i = 0; i < arguments.length; i++) {
            var array = [1];
            matrixRows[i] = array.concat(arguments[i]);
          }

          return jStat(matrixRows);
        },
        builddxmatrix: function builddxmatrix() {
          //Paramters will be passed in as such
          //([array1,array2,...]
          var matrixRows = new Array(arguments[0].length);

          for (var i = 0; i < arguments[0].length; i++) {
            var array = [1];
            matrixRows[i] = array.concat(arguments[0][i]);
          }

          return jStat(matrixRows);
        },
        buildjxmatrix: function buildjxmatrix(jMat) {
          //Builds from jStat Matrix
          var pass = new Array(jMat.length);

          for (var i = 0; i < jMat.length; i++) {
            pass[i] = jMat[i];
          }

          return jStat.builddxmatrix(pass);
        },
        buildymatrix: function buildymatrix(array) {
          return jStat(array).transpose();
        },
        buildjymatrix: function buildjymatrix(jMat) {
          return jMat.transpose();
        },
        matrixmult: function matrixmult(A, B) {
          var i, j, k, result, sum;

          if (A.cols() == B.rows()) {
            if (B.rows() > 1) {
              result = [];

              for (i = 0; i < A.rows(); i++) {
                result[i] = [];

                for (j = 0; j < B.cols(); j++) {
                  sum = 0;

                  for (k = 0; k < A.cols(); k++) {
                    sum += A.toArray()[i][k] * B.toArray()[k][j];
                  }

                  result[i][j] = sum;
                }
              }

              return jStat(result);
            }

            result = [];

            for (i = 0; i < A.rows(); i++) {
              result[i] = [];

              for (j = 0; j < B.cols(); j++) {
                sum = 0;

                for (k = 0; k < A.cols(); k++) {
                  sum += A.toArray()[i][k] * B.toArray()[j];
                }

                result[i][j] = sum;
              }
            }

            return jStat(result);
          }
        },
        //regress and regresst to be fixed
        regress: function regress(jMatX, jMatY) {
          //print("regressin!");
          //print(jMatX.toArray());
          var innerinv = jStat.xtranspxinv(jMatX); //print(innerinv);

          var xtransp = jMatX.transpose();
          var next = jStat.matrixmult(jStat(innerinv), xtransp);
          return jStat.matrixmult(next, jMatY);
        },
        regresst: function regresst(jMatX, jMatY, sides) {
          var beta = jStat.regress(jMatX, jMatY);
          var compile = {};
          compile.anova = {};
          var jMatYBar = jStat.jMatYBar(jMatX, beta);
          compile.yBar = jMatYBar;
          var yAverage = jMatY.mean();
          compile.anova.residuals = jStat.residuals(jMatY, jMatYBar);
          compile.anova.ssr = jStat.ssr(jMatYBar, yAverage);
          compile.anova.msr = compile.anova.ssr / (jMatX[0].length - 1);
          compile.anova.sse = jStat.sse(jMatY, jMatYBar);
          compile.anova.mse = compile.anova.sse / (jMatY.length - (jMatX[0].length - 1) - 1);
          compile.anova.sst = jStat.sst(jMatY, yAverage);
          compile.anova.mst = compile.anova.sst / (jMatY.length - 1);
          compile.anova.r2 = 1 - compile.anova.sse / compile.anova.sst;
          if (compile.anova.r2 < 0) compile.anova.r2 = 0;
          compile.anova.fratio = compile.anova.msr / compile.anova.mse;
          compile.anova.pvalue = jStat.anovaftest(compile.anova.fratio, jMatX[0].length - 1, jMatY.length - (jMatX[0].length - 1) - 1);
          compile.anova.rmse = Math.sqrt(compile.anova.mse);
          compile.anova.r2adj = 1 - compile.anova.mse / compile.anova.mst;
          if (compile.anova.r2adj < 0) compile.anova.r2adj = 0;
          compile.stats = new Array(jMatX[0].length);
          var covar = jStat.xtranspxinv(jMatX);
          var sds, ts, ps;

          for (var i = 0; i < beta.length; i++) {
            sds = Math.sqrt(compile.anova.mse * Math.abs(covar[i][i]));
            ts = Math.abs(beta[i] / sds);
            ps = jStat.ttest(ts, jMatY.length - jMatX[0].length - 1, sides);
            compile.stats[i] = [beta[i], sds, ts, ps];
          }

          compile.regress = beta;
          return compile;
        },
        xtranspx: function xtranspx(jMatX) {
          return jStat.matrixmult(jMatX.transpose(), jMatX);
        },
        xtranspxinv: function xtranspxinv(jMatX) {
          var inner = jStat.matrixmult(jMatX.transpose(), jMatX);
          var innerinv = jStat.inv(inner);
          return innerinv;
        },
        jMatYBar: function jMatYBar(jMatX, beta) {
          var yBar = jStat.matrixmult(jMatX, beta);
          return new jStat(yBar);
        },
        residuals: function residuals(jMatY, jMatYBar) {
          return jStat.matrixsubtract(jMatY, jMatYBar);
        },
        ssr: function ssr(jMatYBar, yAverage) {
          var ssr = 0;

          for (var i = 0; i < jMatYBar.length; i++) {
            ssr += Math.pow(jMatYBar[i] - yAverage, 2);
          }

          return ssr;
        },
        sse: function sse(jMatY, jMatYBar) {
          var sse = 0;

          for (var i = 0; i < jMatY.length; i++) {
            sse += Math.pow(jMatY[i] - jMatYBar[i], 2);
          }

          return sse;
        },
        sst: function sst(jMatY, yAverage) {
          var sst = 0;

          for (var i = 0; i < jMatY.length; i++) {
            sst += Math.pow(jMatY[i] - yAverage, 2);
          }

          return sst;
        },
        matrixsubtract: function matrixsubtract(A, B) {
          var ans = new Array(A.length);

          for (var i = 0; i < A.length; i++) {
            ans[i] = new Array(A[i].length);

            for (var j = 0; j < A[i].length; j++) {
              ans[i][j] = A[i][j] - B[i][j];
            }
          }

          return jStat(ans);
        }
      }); // Make it compatible with previous version.

      jStat.jStat = jStat;
      return jStat;
    });
  });

  /*
    SDTMath Static Class - Not intended for instantiation!

    Variables:
      H = hits
      M = misses
      FA = false alarms
      CR = correct rejections
      HR = hit rate
      zHR = Z-transformed hit rate
      FAR = false alarm rate
      zFAR = Z-transformed false alarm rate
      ACC = accuracy
      PPV = positive predictive value
      FOMR = false omission rate (used FOMR to avoid keyword FOR!)
      d = sensitivity (d' for equal variance, d_a for unequal variance)
      c = response bias (c for equal variance, c_a for unequal variance)
      s = standard deviation of signal distribution, with standard deviation of noise distribution = 1
      muN = mean of noise distribution
      muS = mean of signal distribution
      l = lambda, threshold location, with l = 0 indicating no response bias
      h = height of signal distribution

    Functions:
      Z = z-score
      Z^-1 = inverse z-score

    Equations (* = unequal variance):
      HR = H / (H + M)
      FAR = FA / (FA + CR)
      ACC = (H + CR) / (H + M + FA + CR)
      ACC = (HR + (1 - FAR)) / 2
      PPV = H / (H + FA)
      FOMR = M / (M + CR)

      d' = Z^-1(HR) - Z^-1(FAR)
      *d' = (2 / (s^2 + 1))^(1/2) * (s * Z^-1(HR) - Z^-1(FAR))

      c = -(Z^-1(HR) + Z^-1(FAR))/2
      *c = (2 / (s^2 + 1))^(1/2) * (s / s + 1) * -(Z^-1(HR) + Z^-1(FAR))

      HR = Z(d'/2 - c)
      *HR = Z(((s^2 + 1) / 2)^(1/2) * (d' / (s + 1) - c / s))

      FAR = Z(-d'/2 - c)
      *FAR = Z(((s^2 + 1) / 2)^(1/2) * -(d' / (s + 1) + c))

      HR = Z(d' + Z^-1(FAR))
      *HR = Z(((s^2 + 1) / 2)^(1/2) * d' + Z^-1(FAR) / s)

      HR = Z(-2c - Z^-1(FAR))
      *HR = Z(-((s^2 + 1) / 2)^(1/2) * ((s + 1) / s) * c - Z^-1(FAR))

      muN = -d'/2
      *muN = -((s^2 + 1) / 2)^(1/2) * (1 / (s + 1)) * d'

      d' = -2 * muN
      *d' = -(2 / (s^2 + 1))^(1/2) * (s + 1) * muN

      muS = d'/2
      *muS = ((s^2 + 1) / 2)^(1/2) * (s / (s + 1)) * d'

      d' = 2 * muS
      *d' = (2 / (s^2 + 1))^(1/2) * ((s + 1) / s) * muS

      l = c
      *l = ((s^2 + 1) / 2)^(1/2) * c

      c = l
      *c = (2 / (s^2 + 1))^(1/2) * l

      h = 1 / (s * (2 * pi)^(1/2))
      s = 1 / (h * (2 * pi)^(1/2))

      zHR = Z(HR)

      zFAR = Z(FAR)

      HR = Z^-1(zHR)

      FAR = Z^-1(zFAR)

  */

  var SDTMath = /*#__PURE__*/function () {
    function SDTMath() {
      _classCallCheck(this, SDTMath);
    }

    _createClass(SDTMath, null, [{
      key: "hM2Hr",
      value: function hM2Hr(h, m) {
        if (h === 0 && m === 0) {
          return 0;
        }

        return h / (h + m);
      }
    }, {
      key: "faCr2Far",
      value: function faCr2Far(fa, cr) {
        if (fa === 0 && cr === 0) {
          return 0;
        }

        return fa / (fa + cr);
      }
    }, {
      key: "hMFaCr2Acc",
      value: function hMFaCr2Acc(h, m, fa, cr) {
        if (h === 0 && m === 0 && fa === 0 && cr === 0) {
          return 0;
        }

        return (h + cr) / (h + m + fa + cr);
      }
    }, {
      key: "hrFar2Acc",
      value: function hrFar2Acc(hr, far) {
        return (hr + (1 - far)) / 2;
      }
    }, {
      key: "hFa2Ppv",
      value: function hFa2Ppv(h, fa) {
        if (h === 0 && fa === 0) {
          return 0;
        }

        return h / (h + fa);
      }
    }, {
      key: "mCr2Fomr",
      value: function mCr2Fomr(m, cr) {
        if (m === 0 && cr === 0) {
          return 0;
        }

        return m / (m + cr);
      }
    }, {
      key: "hrFar2D",
      value: function hrFar2D(hr, far) {
        var s = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 1;
        if (s === 1) return jstat.normal.inv(hr, 0, 1) - jstat.normal.inv(far, 0, 1);
        return Math.sqrt(2 / (s * s + 1)) * (s * jstat.normal.inv(hr, 0, 1) - jstat.normal.inv(far, 0, 1));
      }
    }, {
      key: "hrFar2C",
      value: function hrFar2C(hr, far) {
        var s = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 1;
        if (s === 1) return -(jstat.normal.inv(hr, 0, 1) + jstat.normal.inv(far, 0, 1)) / 2;
        return Math.sqrt(2 / (s * s + 1)) * (s / (s + 1)) * -(jstat.normal.inv(hr, 0, 1) + jstat.normal.inv(far, 0, 1));
      }
    }, {
      key: "dC2Hr",
      value: function dC2Hr(d, c) {
        var s = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 1;
        if (s === 1) return jstat.normal.cdf(d / 2 - c, 0, 1);
        return jstat.normal.cdf(Math.sqrt((s * s + 1) / 2) * (d / (1 + s) - c / s), 0, 1);
      }
    }, {
      key: "dC2Far",
      value: function dC2Far(d, c) {
        var s = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 1;
        if (s === 1) return jstat.normal.cdf(-(d / 2 + c), 0, 1);
        return jstat.normal.cdf(Math.sqrt((s * s + 1) / 2) * -(d / (1 + s) + c), 0, 1);
      }
    }, {
      key: "dFar2Hr",
      value: function dFar2Hr(d, far) {
        var s = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 1;
        if (s === 1) return jstat.normal.cdf(d + jstat.normal.inv(far, 0, 1), 0, 1);
        return jstat.normal.cdf((Math.sqrt((s * s + 1) / 2) * d + jstat.normal.inv(far, 0, 1)) / s, 0, 1);
      }
    }, {
      key: "cFar2Hr",
      value: function cFar2Hr(c, far) {
        var s = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 1;
        if (s === 1) return jstat.normal.cdf(-(2 * c) - jstat.normal.inv(far, 0, 1), 0, 1);
        return jstat.normal.cdf(-Math.sqrt((s * s + 1) / 2) * ((s + 1) / s) * c - jstat.normal.inv(far, 0, 1), 0, 1);
      }
    }, {
      key: "d2MuN",
      value: function d2MuN(d) {
        var s = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 1;
        if (s === 1) return -d / 2;
        return -Math.sqrt((s * s + 1) / 2) * (1 / (s + 1)) * d;
      }
    }, {
      key: "muN2D",
      value: function muN2D(muN) {
        var s = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 1;
        if (s === 1) return -2 * muN;
        return -Math.sqrt(2 / (s * s + 1)) * (s + 1) * muN;
      }
    }, {
      key: "d2MuS",
      value: function d2MuS(d) {
        var s = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 1;
        if (s === 1) return d / 2;
        return Math.sqrt((s * s + 1) / 2) * (s / (s + 1)) * d;
      }
    }, {
      key: "muS2D",
      value: function muS2D(muS) {
        var s = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 1;
        if (s === 1) return 2 * muS;
        return Math.sqrt(2 / (s * s + 1)) * ((s + 1) / s) * muS;
      }
    }, {
      key: "c2L",
      value: function c2L(c) {
        var s = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 1;
        if (s === 1) return c;
        return Math.sqrt((s * s + 1) / 2) * c;
      }
    }, {
      key: "l2C",
      value: function l2C(l) {
        var s = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 1;
        if (s === 1) return l;
        return Math.sqrt(2 / (s * s + 1)) * l;
      }
    }, {
      key: "s2H",
      value: function s2H() {
        var s = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 1;
        return 1 / (s * Math.sqrt(2 * Math.PI));
      }
    }, {
      key: "h2S",
      value: function h2S(h) {
        return 1 / (h * Math.sqrt(2 * Math.PI));
      }
    }, {
      key: "hr2Zhr",
      value: function hr2Zhr(hr) {
        return jstat.normal.inv(hr, 0, 1);
      }
    }, {
      key: "far2Zfar",
      value: function far2Zfar(far) {
        return jstat.normal.inv(far, 0, 1);
      }
    }, {
      key: "zhr2Hr",
      value: function zhr2Hr(zhr) {
        return jstat.normal.cdf(zhr, 0, 1);
      }
    }, {
      key: "zfar2Far",
      value: function zfar2Far(zfar) {
        return jstat.normal.cdf(zfar, 0, 1);
      }
    }]);

    return SDTMath;
  }();

  var _templateObject$d, _templateObject2$c;
  /*
    ROCSpace element
    <roc-space>

    Attributes:
      FAR; HR;
      d'; C; zFAR; zHR

      draggable: yes/no

      scale: FAR/HR; zFAR/zHR; d'/C
      grid: FAR/HR; zFAR/zHR; d'/C
      isos: d'; C; FAR; HR

    Styles:
      ??
  */

  var ROCSpace = /*#__PURE__*/function (_DetectableElement) {
    _inherits(ROCSpace, _DetectableElement);

    var _super = _createSuper(ROCSpace);

    function ROCSpace() {
      var _this;

      _classCallCheck(this, ROCSpace);

      _this = _super.call(this);
      _this.firstUpdate = true;
      _this.drag = false;
      _this.sdt = false;
      _this.contours = ['sensitivity', 'bias', 'accuracy'];
      _this.contour = undefined;
      _this.points = ['all', 'first', 'rest', 'none'];
      _this.point = 'all';
      _this.isoDs = ['all', 'first', 'rest', 'none'];
      _this.isoD = 'first';
      _this.isoCs = ['all', 'first', 'rest', 'none'];
      _this.isoC = 'first';
      _this.zRoc = false;
      _this.far = 0.25;
      _this.hr = 0.75;
      _this.s = 1;
      _this.label = '';
      _this.locations = [{
        name: 'default',
        far: _this.far,
        hr: _this.hr,
        s: _this.s,
        label: ''
      }];
      _this.pointArray = [];
      _this.isoDArray = [];
      _this.isoCArray = [];
      _this.width = NaN;
      _this.height = NaN;
      _this.rem = NaN;

      _this.alignState();

      return _this;
    }

    _createClass(ROCSpace, [{
      key: "alignState",
      value: function alignState() {
        var _this2 = this;

        this.locations[0].hr = this.hr;
        this.locations[0].far = this.far;
        this.locations[0].s = this.s;
        this.locations[0].label = this.label;
        this.d = SDTMath.hrFar2D(this.hr, this.far, this.s);
        this.c = SDTMath.hrFar2C(this.hr, this.far, this.s);
        this.pointArray = [];
        this.isoDArray = [];
        this.isoCArray = [];
        this.locations.forEach(function (item, index) {
          item.d = SDTMath.hrFar2D(item.hr, item.far, item.s);
          item.c = SDTMath.hrFar2C(item.hr, item.far, item.s);

          if (index === 0 && (_this2.point === 'first' || _this2.point === 'all')) {
            _this2.pointArray.push(item);
          } else if (index > 0 && (_this2.point === 'rest' || _this2.point === 'all')) {
            _this2.pointArray.push(item);
          }

          if (index === 0 && (_this2.isoD === 'first' || _this2.isoD === 'all')) {
            _this2.isoDArray.push(item);
          } else if (index > 0 && (_this2.isoD === 'rest' || _this2.isoD === 'all')) {
            _this2.isoDArray.push(item);
          }

          if (index === 0 && (_this2.isoC === 'first' || _this2.isoC === 'all')) {
            _this2.isoCArray.push(item);
          } else if (index > 0 && (_this2.isoC === 'rest' || _this2.isoC === 'all')) {
            _this2.isoCArray.push(item);
          }
        });
      }
    }, {
      key: "set",
      value: function set(hr, far) {
        var name = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 'default';
        var label = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : '';
        var s = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : 1;

        if (name === 'default') {
          this.hr = hr;
          this.far = far;
          this.s = s;
          this.label = label;
        }

        var location = this.locations.find(function (item) {
          return item.name === name;
        });

        if (location === undefined) {
          this.locations.push({
            name: name,
            far: far,
            hr: hr,
            s: s,
            label: label
          });
        } else {
          location.hr = hr;
          location.far = far;
          location.s = s;
          location.label = label;
        }

        this.requestUpdate();
      }
    }, {
      key: "setWithSDT",
      value: function setWithSDT(d, c) {
        var name = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 'default';
        var label = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : '';
        var s = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : 1;

        if (name === 'default') {
          this.hr = SDTMath.dC2Hr(d, c, s);
          this.far = SDTMath.dC2Far(d, c, s);
          this.s = s;
          this.label = label;
        }

        var location = this.locations.find(function (item) {
          return item.name === name;
        });

        if (location === undefined) {
          this.locations.push({
            name: name,
            far: SDTMath.dC2Far(d, c, s),
            hr: SDTMath.dC2Hr(d, c, s),
            s: s,
            label: label
          });
        } else {
          location.hr = SDTMath.dC2Hr(d, c, s);
          location.far = SDTMath.dC2Far(d, c, s);
          location.s = s;
          location.label = label;
        }

        this.sdt = true;
        this.requestUpdate();
      }
    }, {
      key: "render",
      value: function render() {
        // eslint-disable-line class-methods-use-this
        return $(_templateObject$d || (_templateObject$d = _taggedTemplateLiteral(["\n      ", "\n    "])), DetectableElement.svgFilters);
      }
    }, {
      key: "getDimensions",
      value: function getDimensions() {
        this.width = parseFloat(this.getComputedStyleValue('width'), 10);
        this.height = parseFloat(this.getComputedStyleValue('height'), 10);
        this.rem = parseFloat(getComputedStyle(document.documentElement).getPropertyValue('font-size'), 10); // console.log(`roc-space: width = ${this.width}, height = ${this.height}, rem = ${this.rem}`);
      }
    }, {
      key: "connectedCallback",
      value: function connectedCallback() {
        _get(_getPrototypeOf(ROCSpace.prototype), "connectedCallback", this).call(this);

        window.addEventListener('resize', this.getDimensions.bind(this));
      }
    }, {
      key: "disconnectedCallback",
      value: function disconnectedCallback() {
        window.removeEventListener('resize', this.getDimensions.bind(this));

        _get(_getPrototypeOf(ROCSpace.prototype), "disconnectedCallback", this).call(this);
      }
    }, {
      key: "firstUpdated",
      value: function firstUpdated(changedProperties) {
        _get(_getPrototypeOf(ROCSpace.prototype), "firstUpdated", this).call(this, changedProperties); // Get the width and height after initial render/update has occurred
        // HACK Edge: Edge doesn't have width/height until after a 0ms timeout


        window.setTimeout(this.getDimensions.bind(this), 0);
      }
    }, {
      key: "update",
      value: function update(changedProperties) {
        var _this3 = this;

        _get(_getPrototypeOf(ROCSpace.prototype), "update", this).call(this, changedProperties);

        this.alignState(); // Bail out if we can't get the width/height/rem

        if (Number.isNaN(this.width) || Number.isNaN(this.height) || Number.isNaN(this.rem)) {
          return;
        }

        var elementWidth = this.width;
        var elementHeight = this.height;
        var elementSize = Math.min(elementWidth, elementHeight);
        var margin = {
          top: 2 * this.rem,
          bottom: 3 * this.rem,
          left: 3 * this.rem,
          right: 2 * this.rem
        };
        var height = elementSize - (margin.top + margin.bottom);
        var width = elementSize - (margin.left + margin.right);
        var transitionDuration = parseInt(this.getComputedStyleValue('---transition-duration'), 10); // X Scale

        var xScale = linear().domain(this.zRoc ? [-3, 3] : [0, 1]) // zFAR or FAR
        .range([0, width]);
        this.xScale = xScale; // Y Scale

        var yScale = linear().domain(this.zRoc ? [3, -3] : [1, 0]) // zHR or HR
        .range([0, height]);
        this.yScale = yScale; // Drag behavior

        var drag$1 = drag().subject(function (event, datum) {
          return {
            x: _this3.xScale(_this3.zRoc ? SDTMath.far2Zfar(datum.far) : datum.far),
            y: _this3.yScale(_this3.zRoc ? SDTMath.hr2Zhr(datum.hr) : datum.hr)
          };
        }).on('start', function (event) {
          var element = event.currentTarget;
          select(element).classed('dragging', true);
        }).on('drag', function (event, datum) {
          _this3.drag = true;
          var far = _this3.zRoc ? SDTMath.zfar2Far(_this3.xScale.invert(event.x)) : _this3.xScale.invert(event.x);
          var hr = _this3.zRoc ? SDTMath.zhr2Hr(_this3.yScale.invert(event.y)) : _this3.yScale.invert(event.y); // Clamp FAR and HR to ROC Space

          datum.far = far < 0.001 ? 0.001 : far > 0.999 ? 0.999 : far;
          datum.hr = hr <= 0.001 ? 0.001 : hr >= 0.999 ? 0.999 : hr; // console.log(`roc-space.drag: far = ${datum.far}, hr = ${datum.hr}`);

          if (datum.name === 'default') {
            _this3.far = datum.far;
            _this3.hr = datum.hr;
          }

          _this3.alignState();

          _this3.requestUpdate();

          _this3.dispatchEvent(new CustomEvent('roc-point-change', {
            detail: {
              name: datum.name,
              far: datum.far,
              hr: datum.hr,
              d: datum.d,
              c: datum.c,
              s: datum.s,
              label: datum.label
            },
            bubbles: true
          }));
        }).on('end', function (event) {
          var element = event.currentTarget;
          select(element).classed('dragging', false);
        }); // Line for FAR/HR Space

        var line$1 = line().x(function (datum) {
          return xScale(_this3.zRoc ? SDTMath.far2Zfar(datum.far) : datum.far);
        }).y(function (datum) {
          return yScale(_this3.zRoc ? SDTMath.hr2Zhr(datum.hr) : datum.hr);
        }); // Svg
        //  DATA-JOIN

        var svgUpdate = select(this.renderRoot).selectAll('.main').data([{
          width: this.width,
          height: this.height,
          rem: this.rem
        }]); //  ENTER

        var svgEnter = svgUpdate.enter().append('svg').classed('main', true); //  MERGE

        var svgMerge = svgEnter.merge(svgUpdate).attr('viewBox', "0 0 ".concat(elementSize, " ").concat(elementSize)); // Plot
        //  ENTER

        var plotEnter = svgEnter.append('g').classed('plot', true); //  MERGE

        var plotMerge = svgMerge.select('.plot').attr('transform', "translate(".concat(margin.left, ", ").concat(margin.top, ")")); // Clippath
        //  ENTER

        plotEnter.append('clipPath').attr('id', 'clip-roc-space').append('rect'); //  MERGE

        plotMerge.select('clipPath rect').attr('height', height + 1).attr('width', width + 1); // Underlayer
        //  ENTER

        var underlayerEnter = plotEnter.append('g').classed('underlayer', true); // MERGE

        var underlayerMerge = plotMerge.select('.underlayer'); // Background
        //  ENTER

        underlayerEnter.append('rect').classed('background', true); //  MERGE

        underlayerMerge.select('.background').attr('height', height).attr('width', width); // Contour Plotting
        //  Handles: Bias, Sensitivity, & Accuracy

        if (this.firstUpdate || changedProperties.has('contour') || changedProperties.has('zRoc') || changedProperties.has('width') || changedProperties.has('height') || changedProperties.has('rem') || changedProperties.has('s')) {
          if (this.contour !== undefined) {
            // Contour Plot
            var n = 100; // Resolution

            var contourValues = [];

            for (var j = 0.5, k = 0; j < n; j += 1) {
              for (var i = 0.5; i < n; i += 1, k += 1) {
                var hr = this.zRoc ? SDTMath.zhr2Hr(i / n * 6 - 3) : i / n;
                var far = this.zRoc ? SDTMath.zfar2Far((1 - j / n) * 6 - 3) : 1 - j / n;
                contourValues[k] = this.contour === 'bias' ? SDTMath.hrFar2C(hr, far, this.s) : this.contour === 'sensitivity' ? SDTMath.hrFar2D(hr, far, this.s) : this.contour === 'accuracy' ? SDTMath.hrFar2Acc(hr, far) : null;
              }
            }

            var contourThresholds = this.contour === 'bias' ? range(-3, 3, 0.25) : this.contour === 'sensitivity' ? range(-6, 6, 0.5) : this.contour === 'accuracy' ? range(0, 1, 0.05) : null;
            var contours$1 = contours().size([n, n]).thresholds(contourThresholds);
            var contourColorStart = this.getComputedStyleValue(this.contour === 'bias' ? '---color-element-background' : this.contour === 'sensitivity' ? '---color-d' : this.contour === 'accuracy' ? '---color-acc-dark' : null);
            var contourColorEnd = this.getComputedStyleValue(this.contour === 'bias' ? '---color-c' : this.contour === 'sensitivity' ? '---color-element-background' : this.contour === 'accuracy' ? '---color-element-background' : null);
            var contourColor = linear().domain(extent(contourThresholds)).interpolate(function () {
              return interpolateRgb(contourColorStart, contourColorEnd);
            }); //  DATA-JOIN

            var contourPlotUpdate = underlayerMerge.selectAll('.plot-contour').data([this.contour]); //  ENTER

            var contourPlotEnter = contourPlotUpdate.enter().append('g').classed('plot-contour', true); //  MERGE

            var contourPlotMerge = contourPlotEnter.merge(contourPlotUpdate); // Contour Plot Contours
            //  DATA-JOIN

            var contoursUpdate = contourPlotMerge.selectAll('.contour').data(contours$1(contourValues)); //  ENTER

            var contoursEnter = contoursUpdate.enter().append('path').classed('contour', true); //  MERGE

            contoursEnter.merge(contoursUpdate).transition().duration(transitionDuration * 2) // Extra long transition!
            .ease(cubicOut).attr('d', index(identity$1().scale(width / n))) // ????
            .attr('fill', function (datum) {
              return contourColor(datum.value);
            }); //  EXIT

            contoursUpdate.exit().remove(); // Contour Title
            //  DATA-JOIN

            var contourTitleUpdate = underlayerMerge.selectAll('.title-contour').data([this.contour]); //  ENTER

            var contourTitleEnter = contourTitleUpdate.enter().append('text').classed('title-contour', true).attr('text-anchor', 'middle'); //  MERGE

            contourTitleEnter.merge(contourTitleUpdate).classed('math-var', this.contour === 'bias' || this.contour === 'sensitivity').attr('transform', this.contour === 'bias' ? "translate(".concat(width + 1.25 * this.rem, ", ").concat(this.rem, ")") : this.contour === 'sensitivity' ? "translate(".concat(width + 1.25 * this.rem, ", ").concat(this.rem, ")") : this.contour === 'accuracy' ? "translate(".concat(width + 1.125 * this.rem, ", ").concat(this.rem, ")") : null).text(this.contour === 'bias' ? 'c' : this.contour === 'sensitivity' ? 'd′' : this.contour === 'accuracy' ? 'Acc' : null); // Contour Legend

            var l = 100;
            var contourLegendValues = []; // new Array(4 * l);

            for (var _i = 0.5, _k = 0; _i < l; _i += 1, _k += 4) {
              contourLegendValues[_k] = this.contour === 'bias' ? -(_i / n * 6 - 3) : this.contour === 'sensitivity' ? _i / n * 12 - 6 : this.contour === 'accuracy' ? _i / n : null;
              contourLegendValues[_k + 1] = contourLegendValues[_k];
              contourLegendValues[_k + 2] = contourLegendValues[_k];
              contourLegendValues[_k + 3] = contourLegendValues[_k];
            }

            var legendContours = contours().size([4, l]).thresholds(contourThresholds);
            var legendScale = linear().domain(this.contour === 'bias' ? [3, -3] : this.contour === 'sensitivity' ? [6, -6] : this.contour === 'accuracy' ? [1, 0] : null).range([0, 10 * this.rem]); //  DATA-JOIN

            var contourLegendUpdate = underlayerMerge.selectAll('.legend-contour').data([this.contour]); //  ENTER

            var contourLegendEnter = contourLegendUpdate.enter().append('g').classed('legend-contour', true); //  MERGE

            var contourLegendMerge = contourLegendEnter.merge(contourLegendUpdate).attr('transform', this.contour === 'bias' ? "translate(".concat(width + 1.25 * this.rem, ", ").concat(1.5 * this.rem, ")") : this.contour === 'sensitivity' ? "translate(".concat(width + 1.25 * this.rem, ", ").concat(1.5 * this.rem, ")") : this.contour === 'accuracy' ? "translate(".concat(width + 1.5 * this.rem, ", ").concat(1.5 * this.rem, ")") : null); //  EXIT

            contourLegendUpdate.exit().remove(); // Contour Legend Axis
            //  ENTER

            contourLegendEnter.append('g').classed('axis-contour', true); //  MERGE

            contourLegendMerge.select('.axis-contour').call(axisLeft(legendScale).ticks(7).tickSize(0)).attr('font-size', null).attr('font-family', null); // Contour Legend Contours
            //  DATA-JOIN

            var legendContoursUpdate = contourLegendMerge.selectAll('.contour').data(legendContours(contourLegendValues)); //  ENTER

            var legendContoursEnter = legendContoursUpdate.enter().append('path').classed('contour', true); //  MERGE

            legendContoursEnter.merge(legendContoursUpdate).attr('d', index(identity$1().scale(10 * this.rem / l))) // ????
            .attr('fill', function (datum) {
              return contourColor(datum.value);
            }); //  EXIT

            legendContoursUpdate.exit().remove();
          } else {
            // Contour Plot
            //  DATA-JOIN
            var _contourPlotUpdate = underlayerMerge.selectAll('.plot-contour').data([]); //  EXIT


            _contourPlotUpdate.exit().remove(); // Contour Title
            //  DATA-JOIN


            var _contourTitleUpdate = underlayerMerge.selectAll('.title-contour').data([]); //  EXIT


            _contourTitleUpdate.exit().remove(); // Contour Legend
            //  DATA-JOIN


            var _contourLegendUpdate = underlayerMerge.selectAll('.legend-contour').data([]); //  EXIT


            _contourLegendUpdate.exit().remove();
          }
        } // X Axis
        //  ENTER


        underlayerEnter.append('g').classed('axis-x', true); //  MERGE

        var axisXMerge = underlayerMerge.select('.axis-x').attr('transform', "translate(0, ".concat(height, ")"));
        var axisXTransition = axisXMerge.transition().duration(transitionDuration * 2) // Extra long transition!
        .ease(cubicOut).call(axisBottom(xScale)).attr('font-size', null).attr('font-family', null);
        axisXTransition.selectAll('line, path').attr('stroke', null); // X Axis Title
        //  ENTER

        var titleXEnter = underlayerEnter.append('text').classed('title-x', true).attr('text-anchor', 'middle');
        titleXEnter.append('tspan').classed('z math-var', true);
        titleXEnter.append('tspan').classed('name', true); //  MERGE

        var titleXMerge = underlayerMerge.select('.title-x').attr('transform', "translate(".concat(width / 2, ", ").concat(height + 2.25 * this.rem, ")"));
        titleXMerge.select('tspan.z').text(this.zRoc ? 'z' : '');
        titleXMerge.select('tspan.name').text(this.zRoc ? '(False Alarm Rate)' : 'False Alarm Rate'); // Y Axis
        //  ENTER

        underlayerEnter.append('g').classed('axis-y', true); // MERGE

        var axisYTransition = underlayerMerge.select('.axis-y').transition().duration(transitionDuration * 2) // Extra long transition!
        .ease(cubicOut).call(axisLeft(yScale)).attr('font-size', null).attr('font-family', null);
        axisYTransition.selectAll('line, path').attr('stroke', null); // Y Axis Title
        //  ENTER

        var titleYEnter = underlayerEnter.append('text').classed('title-y', true).attr('text-anchor', 'middle');
        titleYEnter.append('tspan').classed('z math-var', true);
        titleYEnter.append('tspan').classed('name', true); //  MERGE

        var titleYMerge = underlayerMerge.select('.title-y').attr('transform', "translate(".concat(-2 * this.rem, ", ").concat(height / 2, ")rotate(-90)"));
        titleYMerge.select('tspan.z').text(this.zRoc ? 'z' : '');
        titleYMerge.select('tspan.name').text(this.zRoc ? '(Hit Rate)' : 'Hit Rate'); // No-Information Line
        //  ENTER

        underlayerEnter.append('line').classed('diagonal', true); //  MERGE

        underlayerMerge.select('.diagonal').attr('x1', this.zRoc ? xScale(-3) : xScale(0)).attr('y1', this.zRoc ? yScale(-3) : yScale(0)).attr('x2', this.zRoc ? xScale(3) : xScale(1)).attr('y2', this.zRoc ? yScale(3) : yScale(1)); // Content
        //  ENTER

        plotEnter.append('g').classed('content', true); //  MERGE

        var contentMerge = plotMerge.select('.content'); // Iso-sensitivity Curve
        //  DATA-JOIN

        var isoDUpdate = contentMerge.selectAll('.curve-iso-d').data(this.isoDArray, function (datum) {
          return datum.name;
        }); //  ENTER

        var isoDEnter = isoDUpdate.enter().append('path').classed('curve-iso-d', true).attr('clip-path', 'url(#clip-roc-space)'); //  MERGE

        var isoDMerge = isoDEnter.merge(isoDUpdate);

        if (this.firstUpdate || changedProperties.has('zRoc')) {
          isoDMerge.transition().duration(this.drag ? 0 : transitionDuration * 2) // Extra long transition!
          .ease(cubicOut).attr('d', function (datum) {
            return line$1(range(xScale.range()[0], xScale.range()[1] + 1, 1).map(function (x) {
              return {
                far: _this3.zRoc ? SDTMath.zfar2Far(xScale.invert(x)) : xScale.invert(x),
                hr: _this3.zRoc ? SDTMath.dFar2Hr(datum.d, SDTMath.zfar2Far(xScale.invert(x)), datum.s) : SDTMath.dFar2Hr(datum.d, xScale.invert(x), datum.s)
              };
            }));
          });
        } else if (this.sdt) {
          isoDMerge.transition().duration(this.drag ? 0 : transitionDuration).ease(cubicOut).attrTween('d', function (datum, index, elements) {
            var element = elements[index];
            element.hr = undefined;
            element.far = undefined;
            var interpolateD = interpolate$1(element.d !== undefined ? element.d : datum.d, datum.d);
            var interpolateS = interpolate$1(element.s !== undefined ? element.s : datum.s, datum.s);
            return function (time) {
              element.d = interpolateD(time);
              element.s = interpolateS(time);
              var isoD = range(xScale.range()[0], xScale.range()[1] + 1, 1).map(function (x) {
                return {
                  far: _this3.zRoc ? SDTMath.zfar2Far(xScale.invert(x)) : xScale.invert(x),
                  hr: _this3.zRoc ? SDTMath.dFar2Hr(element.d, SDTMath.zfar2Far(xScale.invert(x)), element.s) : SDTMath.dFar2Hr(element.d, xScale.invert(x), element.s)
                };
              });
              return line$1(isoD);
            };
          });
        } else {
          isoDMerge.transition().duration(this.drag ? 0 : transitionDuration).ease(cubicOut).attrTween('d', function (datum, index, elements) {
            var element = elements[index];
            element.d = undefined;
            element.s = undefined;
            var interpolateHr = interpolate$1(element.hr !== undefined ? element.hr : datum.hr, datum.hr);
            var interpolateFar = interpolate$1(element.far !== undefined ? element.far : datum.far, datum.far);
            return function (time) {
              element.hr = interpolateHr(time);
              element.far = interpolateFar(time);
              var isoD = range(xScale.range()[0], xScale.range()[1] + 1, 1).map(function (x) {
                return {
                  far: _this3.zRoc ? SDTMath.zfar2Far(xScale.invert(x)) : xScale.invert(x),
                  hr: _this3.zRoc ? SDTMath.dFar2Hr(SDTMath.hrFar2D(element.hr, element.far, datum.s), SDTMath.zfar2Far(xScale.invert(x)), datum.s) : SDTMath.dFar2Hr(SDTMath.hrFar2D(element.hr, element.far, datum.s), xScale.invert(x), datum.s)
                };
              });
              return line$1(isoD);
            };
          });
        } //  EXIT
        // NOTE: Could add a transition here


        isoDUpdate.exit().remove(); // Iso-bias Curve
        //  DATA-JOIN

        var isoCUpdate = contentMerge.selectAll('.curve-iso-c').data(this.isoCArray, function (datum) {
          return datum.name;
        }); //  ENTER

        var isoCEnter = isoCUpdate.enter().append('path').classed('curve-iso-c', true).attr('clip-path', 'url(#clip-roc-space)'); //  MERGE

        var isoCMerge = isoCEnter.merge(isoCUpdate);

        if (this.firstUpdate || changedProperties.has('zRoc')) {
          isoCMerge.transition().duration(this.drag ? 0 : transitionDuration * 2) // Extra long transition!
          .ease(cubicOut).attr('d', function (datum) {
            return line$1(range(xScale.range()[0], xScale.range()[1] + 1, 1).map(function (x) {
              return {
                far: _this3.zRoc ? SDTMath.zfar2Far(xScale.invert(x)) : xScale.invert(x),
                hr: _this3.zRoc ? SDTMath.cFar2Hr(datum.c, SDTMath.zfar2Far(xScale.invert(x)), datum.s) : SDTMath.cFar2Hr(datum.c, xScale.invert(x), datum.s)
              };
            }));
          });
        } else if (this.sdt) {
          isoCMerge.transition().duration(this.drag ? 0 : transitionDuration).ease(cubicOut).attrTween('d', function (datum, index, elements) {
            var element = elements[index];
            element.hr = undefined;
            element.far = undefined;
            var interpolateC = interpolate$1(element.c !== undefined ? element.c : datum.c, datum.c);
            var interpolateS = interpolate$1(element.s !== undefined ? element.s : datum.s, datum.s);
            return function (time) {
              element.c = interpolateC(time);
              element.s = interpolateS(time);
              var isoC = range(xScale.range()[0], xScale.range()[1] + 1, 1).map(function (x) {
                return {
                  far: _this3.zRoc ? SDTMath.zfar2Far(xScale.invert(x)) : xScale.invert(x),
                  hr: _this3.zRoc ? SDTMath.cFar2Hr(element.c, SDTMath.zfar2Far(xScale.invert(x)), element.s) : SDTMath.cFar2Hr(element.c, xScale.invert(x), element.s)
                };
              });
              return line$1(isoC);
            };
          });
        } else {
          isoCMerge.transition().duration(this.drag ? 0 : transitionDuration).ease(cubicOut).attrTween('d', function (datum, index, elements) {
            var element = elements[index];
            element.c = undefined;
            element.s = undefined;
            var interpolateHr = interpolate$1(element.hr !== undefined ? element.hr : datum.hr, datum.hr);
            var interpolateFar = interpolate$1(element.far !== undefined ? element.far : datum.far, datum.far);
            return function (time) {
              element.hr = interpolateHr(time);
              element.far = interpolateFar(time);
              var isoC = range(xScale.range()[0], xScale.range()[1] + 1, 1).map(function (x) {
                return {
                  far: _this3.zRoc ? SDTMath.zfar2Far(xScale.invert(x)) : xScale.invert(x),
                  hr: _this3.zRoc ? SDTMath.cFar2Hr(SDTMath.hrFar2C(element.hr, element.far, datum.s), SDTMath.zfar2Far(xScale.invert(x)), datum.s) : SDTMath.cFar2Hr(SDTMath.hrFar2C(element.hr, element.far, datum.s), xScale.invert(x), datum.s)
                };
              });
              return line$1(isoC);
            };
          });
        } //  EXIT
        // NOTE: Could add a transition here


        isoCUpdate.exit().remove(); // Point
        //  DATA-JOIN

        var pointUpdate = contentMerge.selectAll('.point').data(this.pointArray, function (datum) {
          return datum.name;
        }); //  ENTER

        var pointEnter = pointUpdate.enter().append('g').classed('point', true);
        pointEnter.append('circle').classed('circle', true).attr('r', 6);
        /* HACK: Firefox does not support CSS SVG Geometry Properties */

        pointEnter.append('text').classed('label', true); //  MERGE

        var pointMerge = pointEnter.merge(pointUpdate);
        pointMerge.select('text').text(function (datum) {
          return datum.label;
        });

        if (this.firstUpdate || changedProperties.has('interactive')) {
          if (this.interactive) {
            pointMerge.attr('tabindex', 0).classed('interactive', true).call(drag$1).on('keydown', function (event, datum) {
              if (['ArrowUp', 'ArrowDown', 'ArrowRight', 'ArrowLeft'].includes(event.key)) {
                var _hr = _this3.zRoc ? SDTMath.hr2Zhr(datum.hr) : datum.hr;

                var _far = _this3.zRoc ? SDTMath.far2Zfar(datum.far) : datum.far;

                switch (event.key) {
                  case 'ArrowUp':
                    _hr += _this3.zRoc ? event.shiftKey ? 0.05 : 0.25 : event.shiftKey ? 0.01 : 0.05;
                    break;

                  case 'ArrowDown':
                    _hr -= _this3.zRoc ? event.shiftKey ? 0.05 : 0.25 : event.shiftKey ? 0.01 : 0.05;
                    break;

                  case 'ArrowRight':
                    _far += _this3.zRoc ? event.shiftKey ? 0.05 : 0.25 : event.shiftKey ? 0.01 : 0.05;
                    break;

                  case 'ArrowLeft':
                    _far -= _this3.zRoc ? event.shiftKey ? 0.05 : 0.25 : event.shiftKey ? 0.01 : 0.05;
                    break;

                }

                _hr = _this3.zRoc ? SDTMath.zhr2Hr(_hr) : _hr;
                _far = _this3.zRoc ? SDTMath.zfar2Far(_far) : _far; // Clamp FAR and HR to ROC Space

                _hr = _hr < 0.001 ? 0.001 : _hr > 0.999 ? 0.999 : _hr;
                _far = _far < 0.001 ? 0.001 : _far > 0.999 ? 0.999 : _far;

                if (_hr !== datum.hr || _far !== datum.far) {
                  datum.hr = _hr;
                  datum.far = _far;

                  if (datum.name === 'default') {
                    _this3.hr = datum.hr;
                    _this3.far = datum.far;
                  }

                  _this3.alignState();

                  _this3.requestUpdate();

                  _this3.dispatchEvent(new CustomEvent('roc-point-change', {
                    detail: {
                      name: datum.name,
                      far: datum.far,
                      hr: datum.hr,
                      d: datum.d,
                      c: datum.c,
                      s: datum.s,
                      label: datum.label
                    },
                    bubbles: true
                  }));
                }

                event.preventDefault();
              }
            });
          } else {
            pointMerge.attr('tabindex', null).classed('interactive', false).on('drag', null).on('keydown', null);
          }
        }

        if (this.firstUpdate || changedProperties.has('zRoc')) {
          pointMerge.transition().duration(this.drag ? 0 : transitionDuration * 2) // Extra long transition!
          .ease(cubicOut).attr('transform', function (datum, index, elements) {
            var element = elements[index];
            element.d = undefined;
            element.c = undefined;
            element.s = undefined;
            return "translate(\n            ".concat(xScale(_this3.zRoc ? SDTMath.far2Zfar(datum.far) : datum.far), ",\n            ").concat(yScale(_this3.zRoc ? SDTMath.hr2Zhr(datum.hr) : datum.hr), "\n          )");
          });
        } else if (this.sdt) {
          pointMerge.transition().duration(this.drag ? 0 : transitionDuration).ease(cubicOut).attrTween('transform', function (datum, index, elements) {
            var element = elements[index];
            var interpolateD = interpolate$1(element.d !== undefined ? element.d : datum.d, datum.d);
            var interpolateC = interpolate$1(element.c !== undefined ? element.c : datum.c, datum.c);
            var interpolateS = interpolate$1(element.s !== undefined ? element.s : datum.s, datum.s);
            return function (time) {
              element.d = interpolateD(time);
              element.c = interpolateC(time);
              element.s = interpolateS(time);
              return "translate(\n              ".concat(xScale(_this3.zRoc ? SDTMath.far2Zfar(SDTMath.dC2Far(element.d, element.c, element.s)) : SDTMath.dC2Far(element.d, element.c, element.s)), ",\n              ").concat(yScale(_this3.zRoc ? SDTMath.hr2Zhr(SDTMath.dC2Hr(element.d, element.c, element.s)) : SDTMath.dC2Hr(element.d, element.c, element.s)), "\n            )");
            };
          });
        } else {
          pointMerge.transition().duration(this.drag ? 0 : transitionDuration).ease(cubicOut).attr('transform', function (datum, index, elements) {
            var element = elements[index];
            element.d = undefined;
            element.c = undefined;
            element.s = undefined;
            return "translate(\n            ".concat(xScale(_this3.zRoc ? SDTMath.far2Zfar(datum.far) : datum.far), ",\n            ").concat(yScale(_this3.zRoc ? SDTMath.hr2Zhr(datum.hr) : datum.hr), "\n          )");
          });
        } //  EXIT
        // NOTE: Could add a transition here


        pointUpdate.exit().remove();
        this.drag = false;
        this.sdt = false;
        this.firstUpdate = false;
      }
    }], [{
      key: "properties",
      get: function get() {
        return {
          contour: {
            attribute: 'contour',
            type: String,
            reflect: true
          },
          point: {
            attribute: 'point',
            type: String,
            reflect: true
          },
          isoD: {
            attribute: 'iso-d',
            type: String,
            reflect: true
          },
          isoC: {
            attribute: 'iso-c',
            type: String,
            reflect: true
          },
          zRoc: {
            attribute: 'z-roc',
            type: Boolean,
            reflect: true
          },
          far: {
            attribute: 'far',
            type: Number,
            reflect: true
          },
          hr: {
            attribute: 'hr',
            type: Number,
            reflect: true
          },
          d: {
            attribute: false,
            type: Number,
            reflect: false
          },
          c: {
            attribute: false,
            type: Number,
            reflect: false
          },
          s: {
            attribute: false,
            type: Number,
            reflect: false
          },
          width: {
            attribute: false,
            type: Number,
            reflect: false
          },
          height: {
            attribute: false,
            type: Number,
            reflect: false
          },
          rem: {
            attribute: false,
            type: Number,
            reflect: false
          }
        };
      }
    }, {
      key: "styles",
      get: function get() {
        return [_get(_getPrototypeOf(ROCSpace), "styles", this), r$2(_templateObject2$c || (_templateObject2$c = _taggedTemplateLiteral(["\n        :host {\n          display: inline-block;\n\n          width: 20rem;\n          height: 20rem;\n        }\n\n        .main {\n          width: 100%;\n          height: 100%;\n        }\n\n        .plot-contour,\n        .legend-contour .contour {\n          stroke: var(---color-background);\n          stroke-width: 0.5;\n        }\n\n        text {\n          /* stylelint-disable property-no-vendor-prefix */\n          -webkit-user-select: none;\n          -moz-user-select: none;\n          -ms-user-select: none;\n          user-select: none;\n        }\n\n        .point.interactive {\n          cursor: move;\n\n          filter: url(\"#shadow-2\");\n          outline: none;\n\n          /* HACK: This gets Safari to correctly apply the filter! */\n          /* https://github.com/emilbjorklund/svg-weirdness/issues/27 */\n          stroke: #000000;\n          stroke-opacity: 0;\n          stroke-width: 0;\n        }\n\n        /* Make a larger target for touch users */\n        @media (pointer: coarse) {\n          .point.interactive .circle {\n            stroke: #000000;\n            stroke-opacity: 0;\n            stroke-width: 12px;\n          }\n        }\n\n        .point.interactive:hover {\n          filter: url(\"#shadow-4\");\n\n          /* HACK: This gets Safari to correctly apply the filter! */\n          stroke: #ff0000;\n        }\n\n        .point.interactive:active {\n          filter: url(\"#shadow-8\");\n\n          /* HACK: This gets Safari to correctly apply the filter! */\n          stroke: #00ff00;\n        }\n\n        :host(.keyboard) .point.interactive:focus {\n          filter: url(\"#shadow-8\");\n\n          /* HACK: This gets Safari to correctly apply the filter! */\n          stroke: #0000ff;\n        }\n\n        .background {\n          fill: var(---color-element-background);\n          stroke: var(---color-element-border);\n          stroke-width: 1;\n          shape-rendering: crispEdges;\n        }\n\n        .title-x,\n        .title-y,\n        .title-contour {\n          font-weight: 600;\n\n          fill: currentColor;\n        }\n\n        .tick {\n          font-size: 0.75rem;\n        }\n\n        .axis-x path,\n        .axis-x line,\n        .axis-y path,\n        .axis-y line {\n          stroke: var(---color-element-border);\n        }\n\n        .axis-contour .domain {\n          stroke: none;\n        }\n\n        .diagonal {\n          stroke: var(---color-element-border);\n          stroke-dasharray: 4;\n          stroke-width: 1;\n        }\n\n        .curve-iso-d {\n          fill: none;\n          stroke: var(---color-d);\n          stroke-width: 2;\n        }\n\n        .curve-iso-c {\n          fill: none;\n          stroke: var(---color-c);\n          stroke-width: 2;\n        }\n\n        .point .circle {\n          fill: var(---color-element-emphasis);\n\n          /* r: 6; HACK: Firefox does not support CSS SVG Geometry Properties */\n        }\n\n        .point .label {\n          font-size: 0.75rem;\n\n          dominant-baseline: middle;\n          text-anchor: middle;\n\n          fill: var(---color-text-inverse);\n        }\n      "])))];
      }
    }]);

    return ROCSpace;
  }(DetectableElement);
  customElements.define('roc-space', ROCSpace);

  var _templateObject$c, _templateObject2$b, _templateObject3$9, _templateObject4$9, _templateObject5$9, _templateObject6$9, _templateObject7$9, _templateObject8$7, _templateObject9$7, _templateObject10$7, _templateObject11$7, _templateObject12$2, _templateObject13$2, _templateObject14$2, _templateObject15$2, _templateObject16$2, _templateObject17$2, _templateObject18$2, _templateObject19$2, _templateObject20$2, _templateObject21$1, _templateObject22$1;
  /*
    DetectableControl element
    <detectable-control>

    Attributes:

  */

  var DetectableControl = /*#__PURE__*/function (_DetectableElement) {
    _inherits(DetectableControl, _DetectableElement);

    var _super = _createSuper(DetectableControl);

    function DetectableControl() {
      var _this;

      _classCallCheck(this, DetectableControl);

      _this = _super.call(this); // Attributes

      _this.trials = undefined;
      _this.duration = undefined;
      _this.coherence = undefined;
      _this.payoff = undefined;
      _this.colors = ['none', 'accuracy', 'stimulus', 'response', 'outcome'];
      _this.color = undefined;
      _this.zRoc = undefined;
      _this.run = false;
      _this.pause = false;
      _this.reset = false; // Properties

      _this.states = ['resetted', 'running', 'paused', 'ended'];
      _this.state = 'resetted';
      return _this;
    }

    _createClass(DetectableControl, [{
      key: "setTrials",
      value: function setTrials(e) {
        this.trials = e.target.value;
        this.dispatchEvent(new CustomEvent('detectable-control-trials', {
          detail: {
            trials: this.trials
          },
          bubbles: true
        }));
      }
    }, {
      key: "setDuration",
      value: function setDuration(e) {
        this.duration = e.target.value;
        this.dispatchEvent(new CustomEvent('detectable-control-duration', {
          detail: {
            duration: this.duration
          },
          bubbles: true
        }));
      }
    }, {
      key: "setCoherence",
      value: function setCoherence(e) {
        this.coherence = e.target.value;
        this.dispatchEvent(new CustomEvent('detectable-control-coherence', {
          detail: {
            coherence: this.coherence
          },
          bubbles: true
        }));
      }
    }, {
      key: "setPayoff",
      value: function setPayoff(e) {
        this.payoff = e.target.value;
        this.dispatchEvent(new CustomEvent('detectable-control-payoff', {
          detail: {
            payoff: this.payoff
          },
          bubbles: true
        }));
      }
    }, {
      key: "chooseColor",
      value: function chooseColor(e) {
        this.color = e.target.value;
        this.dispatchEvent(new CustomEvent('detectable-control-color', {
          detail: {
            color: this.color
          },
          bubbles: true
        }));
      }
    }, {
      key: "flipZRoc",
      value: function flipZRoc(e) {
        this.zRoc = e.target.checked;
        this.dispatchEvent(new CustomEvent('detectable-control-z-roc', {
          detail: {
            zRoc: this.zRoc
          },
          bubbles: true
        }));
      }
    }, {
      key: "doRun",
      value: function doRun() {
        this.state = 'running';
        this.dispatchEvent(new CustomEvent('detectable-control-run', {
          detail: {},
          bubbles: true
        }));
      }
    }, {
      key: "doPause",
      value: function doPause() {
        this.state = 'paused';
        this.dispatchEvent(new CustomEvent('detectable-control-pause', {
          detail: {},
          bubbles: true
        }));
      }
    }, {
      key: "doReset",
      value: function doReset() {
        this.state = 'resetted';
        this.dispatchEvent(new CustomEvent('detectable-control-reset', {
          detail: {},
          bubbles: true
        }));
      }
    }, {
      key: "complete",
      value: function complete() {
        this.state = 'ended';
      }
    }, {
      key: "render",
      value: function render() {
        return $(_templateObject$c || (_templateObject$c = _taggedTemplateLiteral(["\n      <div class=\"holder\">\n        ", "\n        ", "\n        ", "\n        ", "\n        ", "\n        ", "\n        ", "\n      </div>"])), this.trials ? $(_templateObject2$b || (_templateObject2$b = _taggedTemplateLiteral(["<decidables-slider min=\"1\" max=\"100\" step=\"1\" .value=", " @change=", " @input=", ">Trials</decidables-slider>"])), this.trials, this.setTrials.bind(this), this.setTrials.bind(this)) : $(_templateObject3$9 || (_templateObject3$9 = _taggedTemplateLiteral([""]))), this.duration ? $(_templateObject4$9 || (_templateObject4$9 = _taggedTemplateLiteral(["<decidables-slider min=\"10\" max=\"2000\" step=\"10\" .value=", " @change=", " @input=", ">Duration</decidables-slider>"])), this.duration, this.setDuration.bind(this), this.setDuration.bind(this)) : $(_templateObject5$9 || (_templateObject5$9 = _taggedTemplateLiteral([""]))), this.coherence ? $(_templateObject6$9 || (_templateObject6$9 = _taggedTemplateLiteral(["<decidables-slider min=\"0\" max=\"1\" step=\".01\" .value=", " @change=", " @input=", ">Coherence</decidables-slider>"])), this.coherence, this.setCoherence.bind(this), this.setCoherence.bind(this)) : $(_templateObject7$9 || (_templateObject7$9 = _taggedTemplateLiteral([""]))), this.payoff ? $(_templateObject8$7 || (_templateObject8$7 = _taggedTemplateLiteral(["<decidables-slider class=\"payoff\" min=\"0\" max=\"100\" step=\"1\" .value=", " @change=", " @input=", ">Payoff</decidables-slider>"])), this.payoff, this.setPayoff.bind(this), this.setPayoff.bind(this)) : $(_templateObject9$7 || (_templateObject9$7 = _taggedTemplateLiteral([""]))), this.color !== undefined ? $(_templateObject10$7 || (_templateObject10$7 = _taggedTemplateLiteral(["\n            <decidables-toggle @change=", ">\n              <span slot=\"label\">Emphasis</span>\n              <decidables-toggle-option name=", " value=\"none\" ?checked=", ">None</decidables-toggle-option>\n              <decidables-toggle-option name=", " value=\"accuracy\" ?checked=", ">Accuracy</decidables-toggle-option>\n              <decidables-toggle-option name=", " value=\"stimulus\" ?checked=", ">Stimulus</decidables-toggle-option>\n              <decidables-toggle-option name=", " value=\"response\" ?checked=", ">Response</decidables-toggle-option>\n              <decidables-toggle-option name=", " value=\"outcome\" ?checked=", ">Outcome</decidables-toggle-option>\n            </decidables-toggle>\n          "])), this.chooseColor.bind(this), "".concat(this.uniqueId, "-color"), this.color === 'none', "".concat(this.uniqueId, "-color"), this.color === 'accuracy', "".concat(this.uniqueId, "-color"), this.color === 'stimulus', "".concat(this.uniqueId, "-color"), this.color === 'response', "".concat(this.uniqueId, "-color"), this.color === 'outcome') : $(_templateObject11$7 || (_templateObject11$7 = _taggedTemplateLiteral([""]))), this.zRoc !== undefined ? $(_templateObject12$2 || (_templateObject12$2 = _taggedTemplateLiteral(["\n            <decidables-switch ?checked=", " @change=", ">\n              <span class=\"math-var\">z</span>ROC\n              <span slot=\"off-label\">ROC</span>\n            </decidables-switch>\n          "])), this.zRoc, this.flipZRoc.bind(this)) : $(_templateObject13$2 || (_templateObject13$2 = _taggedTemplateLiteral([""]))), this.run || this.pause || this.reset ? $(_templateObject14$2 || (_templateObject14$2 = _taggedTemplateLiteral(["\n            <div class=\"buttons\">\n              ", "\n              ", "\n              ", "\n            </div>\n          "])), this.run ? $(_templateObject15$2 || (_templateObject15$2 = _taggedTemplateLiteral(["<decidables-button name=\"run\" ?disabled=", " @click=", ">Run</decidables-button>"])), this.state === 'running' || this.state === 'ended', this.doRun.bind(this)) : $(_templateObject16$2 || (_templateObject16$2 = _taggedTemplateLiteral([""]))), this.pause ? $(_templateObject17$2 || (_templateObject17$2 = _taggedTemplateLiteral(["<decidables-button name=\"pause\" ?disabled=", " @click=", ">Pause</decidables-button>"])), this.state !== 'running', this.doPause.bind(this)) : $(_templateObject18$2 || (_templateObject18$2 = _taggedTemplateLiteral([""]))), this.reset ? $(_templateObject19$2 || (_templateObject19$2 = _taggedTemplateLiteral(["<decidables-button name=\"reset\" ?disabled=", " @click=", ">Reset</decidables-button>"])), this.state === 'resetted', this.doReset.bind(this)) : $(_templateObject20$2 || (_templateObject20$2 = _taggedTemplateLiteral([""])))) : $(_templateObject21$1 || (_templateObject21$1 = _taggedTemplateLiteral([""]))));
      }
    }], [{
      key: "properties",
      get: function get() {
        return {
          trials: {
            attribute: 'trials',
            type: Number,
            reflect: true
          },
          duration: {
            attribute: 'duration',
            type: Number,
            reflect: true
          },
          coherence: {
            attribute: 'coherence',
            type: Number,
            reflect: true
          },
          payoff: {
            attribute: 'payoff',
            type: Number,
            reflect: true
          },
          color: {
            attribute: 'color',
            type: String,
            reflect: true
          },
          zRoc: {
            attribute: 'z-roc',
            type: Boolean,
            reflect: true
          },
          run: {
            attribute: 'run',
            type: Boolean,
            reflect: true
          },
          pause: {
            attribute: 'pause',
            type: Boolean,
            reflect: true
          },
          reset: {
            attribute: 'reset',
            type: Boolean,
            reflect: true
          },
          state: {
            atribute: false,
            type: String,
            reflect: false
          }
        };
      }
    }, {
      key: "styles",
      get: function get() {
        return [_get(_getPrototypeOf(DetectableControl), "styles", this), r$2(_templateObject22$1 || (_templateObject22$1 = _taggedTemplateLiteral(["\n        :host {\n          display: inline-block;\n        }\n\n        .holder {\n          display: flex;\n\n          flex-direction: row;\n\n          align-items: stretch;\n          justify-content: center;\n        }\n\n        .buttons {\n          display: flex;\n\n          flex-direction: column;\n\n          align-items: stretch;\n          justify-content: center;\n        }\n\n        /* Payoff  Slider */\n        .payoff {\n          --decidables-spinner-prefix: \"$\";\n        }\n      "])))];
      }
    }]);

    return DetectableControl;
  }(DetectableElement);
  customElements.define('detectable-control', DetectableControl);

  var _templateObject$b, _templateObject2$a;
  /*
    SDTModel element
    <sdt-model>

    Attributes:
      d'; C;
      FAR; HR; zFAR; zHR;

      draggable: d'; C;
      highlight: H; M; CR; FA;

      Styles:
        ??
  */

  var SDTModel = /*#__PURE__*/function (_DetectableElement) {
    _inherits(SDTModel, _DetectableElement);

    var _super = _createSuper(SDTModel);

    function SDTModel() {
      var _this;

      _classCallCheck(this, SDTModel);

      _this = _super.call(this); // Attributes

      _this.colors = ['outcome', 'response', 'stimulus', 'none']; // Allowable values of 'color'

      _this.color = 'outcome'; // How to color distributions and trials

      _this.distributions = false; // Show distributions?

      _this.threshold = false; // Show threshold?

      _this.unequal = false; // Allow unequal variance?

      _this.sensitivity = false; // Show d'?

      _this.bias = false; // Show c?

      _this.variance = false; // Show variance?

      _this.histogram = false; // Show histogram?

      _this.d = 1; // Sensitivity

      _this.c = 0; // Bias

      _this.s = 1; // Variance
      // Properties

      _this.binWidth = 0.25; // Histogram bin width in units of evidence

      _this.signals = ['present', 'absent']; // Allowable values of trial.signal

      _this.responses = ['present', 'absent']; // Allowable values of trial.response

      _this.trials = []; // Array of simulated trials

      _this.width = NaN; // Width of component in pixels

      _this.height = NaN; // Height of component in pixels

      _this.rem = NaN; // Pixels per rem for component
      // Private

      _this.muN = NaN; // Mean of noise distribution

      _this.muS = NaN; // Mean of signal distribution

      _this.l = NaN; // lambda (threshold location)

      _this.hS = NaN; // Height of signal distribution

      _this.binRange = [-3.0, 3.0]; // Range of histogram

      _this.h = 0; // Hits

      _this.m = 0; // Misses

      _this.fa = 0; // False alarms

      _this.cr = 0; // Correct rejections

      _this.firstUpdate = true; // Are we waiting for the first update?

      _this.drag = false; // Are we currently dragging?

      _this.alignState();

      return _this;
    }

    _createClass(SDTModel, [{
      key: "reset",
      value: function reset() {
        this.trials = [];
        this.h = 0;
        this.m = 0;
        this.fa = 0;
        this.cr = 0;
      }
    }, {
      key: "trial",
      value: function trial(trialNumber, signal, duration, wait, iti) {
        var trial = {};
        trial.new = true;
        trial.paused = false;
        trial.trial = trialNumber;
        trial.signal = signal;
        trial.duration = duration;
        trial.wait = wait;
        trial.iti = iti;
        trial.evidence = jstat.normal.sample(0, 1);
        this.alignTrial(trial);
        this.trials.push(trial);
        this.requestUpdate();
      }
    }, {
      key: "alignTrial",
      value: function alignTrial(trial) {
        if (trial.signal === 'present') {
          trial.trueEvidence = trial.evidence * this.s + this.muS;
          trial.response = trial.trueEvidence > this.l ? 'present' : 'absent';
          trial.outcome = trial.response === 'present' ? 'h' : 'm';
        } else {
          // trial.signal == 'absent'
          trial.trueEvidence = trial.evidence + this.muN;
          trial.response = trial.trueEvidence > this.l ? 'present' : 'absent';
          trial.outcome = trial.response === 'present' ? 'fa' : 'cr';
        }

        if (!trial.new) this[trial.outcome] += 1;
        return trial;
      }
    }, {
      key: "alignState",
      value: function alignState() {
        this.far = SDTMath.dC2Far(this.d, this.c, this.s);
        this.hr = SDTMath.dC2Hr(this.d, this.c, this.s);
        this.muN = SDTMath.d2MuN(this.d, this.s);
        this.muS = SDTMath.d2MuS(this.d, this.s);
        this.l = SDTMath.c2L(this.c, this.s);
        this.hS = SDTMath.s2H(this.s);
        this.h = 0;
        this.m = 0;
        this.fa = 0;
        this.cr = 0;

        for (var i = 0; i < this.trials.length; i += 1) {
          this.alignTrial(this.trials[i]);
        }
      }
    }, {
      key: "render",
      value: function render() {
        // eslint-disable-line class-methods-use-this
        return $(_templateObject$b || (_templateObject$b = _taggedTemplateLiteral(["\n      ", "\n    "])), DetectableElement.svgFilters);
      }
    }, {
      key: "sendEvent",
      value: function sendEvent() {
        this.dispatchEvent(new CustomEvent('sdt-model-change', {
          detail: {
            d: this.d,
            c: this.c,
            s: this.s,
            far: this.far,
            hr: this.hr,
            h: this.h,
            m: this.m,
            fa: this.fa,
            cr: this.cr
          },
          bubbles: true
        }));
      }
    }, {
      key: "getDimensions",
      value: function getDimensions() {
        this.width = parseFloat(this.getComputedStyleValue('width'), 10);
        this.height = parseFloat(this.getComputedStyleValue('height'), 10);
        this.rem = parseFloat(getComputedStyle(document.documentElement).getPropertyValue('font-size'), 10); // console.log(`sdt-model: width = ${this.width}, height = ${this.height}, rem = ${this.rem}`);
      }
    }, {
      key: "connectedCallback",
      value: function connectedCallback() {
        _get(_getPrototypeOf(SDTModel.prototype), "connectedCallback", this).call(this);

        window.addEventListener('resize', this.getDimensions.bind(this));
      }
    }, {
      key: "disconnectedCallback",
      value: function disconnectedCallback() {
        window.removeEventListener('resize', this.getDimensions.bind(this));

        _get(_getPrototypeOf(SDTModel.prototype), "disconnectedCallback", this).call(this);
      }
    }, {
      key: "firstUpdated",
      value: function firstUpdated(changedProperties) {
        _get(_getPrototypeOf(SDTModel.prototype), "firstUpdated", this).call(this, changedProperties); // Get the width and height after initial render/update has occurred
        // HACK Edge: Edge doesn't have width/height until after a 0ms timeout


        window.setTimeout(this.getDimensions.bind(this), 0);
      }
    }, {
      key: "update",
      value: function update(changedProperties) {
        var _this2 = this;

        _get(_getPrototypeOf(SDTModel.prototype), "update", this).call(this, changedProperties);

        this.alignState(); // Bail out if we can't get the width/height

        if (Number.isNaN(this.width) || Number.isNaN(this.height) || Number.isNaN(this.rem)) {
          return;
        }

        var hostWidth = this.width;
        var hostHeight = this.height;
        var hostAspectRatio = hostWidth / hostHeight;
        var elementAspectRatio = 1.8;
        var elementWidth;
        var elementHeight;

        if (hostAspectRatio > elementAspectRatio) {
          elementHeight = hostHeight;
          elementWidth = elementHeight * elementAspectRatio;
        } else {
          elementWidth = hostWidth;
          elementHeight = elementWidth / elementAspectRatio;
        }

        var margin = {
          top: 2 * this.rem,
          bottom: 3 * this.rem,
          left: 3 * this.rem,
          right: (this.histogram && this.distributions ? 3 : 0.75) * this.rem
        };
        var height = elementHeight - (margin.top + margin.bottom);
        var width = elementWidth - (margin.left + margin.right);
        var transitionDuration = parseInt(this.getComputedStyleValue('---transition-duration'), 10); // X Scale

        var xScale = linear().domain([-3, 3]) // Evidence // FIX - no hardcoding
        .range([0, width]); // Y Scale

        var yScale = linear().domain([0.5, 0]) // Probability // FIX - no hardcoding
        .range([0, height]); // 2nd Y Scale

        var strokeWidth = 3; // FIX - no hardcoding

        var binWidth = xScale(this.binWidth) - xScale(0);
        var y2Scale = linear().domain([height / binWidth, 0]) // Number of Stimuli
        .range([0, height]); // Threshold Drag behavior

        var dragThreshold = drag().subject(function () {
          return {
            x: xScale(_this2.l),
            y: 0
          };
        }).on('start', function (event) {
          var element = event.currentTarget;
          select(element).classed('dragging', true);
        }).on('drag', function (event) {
          _this2.drag = true;
          var l = xScale.invert(event.x); // Clamp lambda to stay visible

          l = l < xScale.domain()[0] ? xScale.domain()[0] : l > xScale.domain()[1] ? xScale.domain()[1] : l;
          _this2.c = SDTMath.l2C(l, _this2.s);

          _this2.alignState();

          _this2.sendEvent();
        }).on('end', function (event) {
          var element = event.currentTarget;
          select(element).classed('dragging', false);
        }); // Noise Curve Drag behavior

        var dragNoise = drag().subject(function () {
          return {
            x: xScale(_this2.muN),
            y: 0
          };
        }).on('start', function (event) {
          var element = event.currentTarget;
          select(element).classed('dragging', true);
        }).on('drag', function (event) {
          _this2.drag = true;
          var muN = xScale.invert(event.x); // Clamp Noise Curve to stay visible

          muN = muN < xScale.domain()[0] ? xScale.domain()[0] : muN > xScale.domain()[1] ? xScale.domain()[1] : muN;
          _this2.d = SDTMath.muN2D(muN, _this2.s);

          _this2.alignState();

          _this2.sendEvent();
        }).on('end', function (event) {
          var element = event.currentTarget;
          select(element).classed('dragging', false);
        }); // Signal+Noise Curve Drag behavior

        var dragSignal = drag().subject(function () {
          return {
            x: xScale(_this2.muS),
            y: yScale(_this2.hS)
          };
        }).on('start', function (event, datum) {
          var element = event.currentTarget;
          select(element).classed('dragging', true);
          datum.startX = event.x;
          datum.startY = event.y;
          datum.startHS = _this2.hS;
          datum.startMuS = _this2.muS;
        }).on('drag', function (event, datum) {
          _this2.drag = true;
          var muS = _this2.muS; // eslint-disable-line prefer-destructuring

          if (_this2.interactive) {
            muS = xScale.invert(event.x); // Clamp Signal Curve to stay visible

            muS = muS < xScale.domain()[0] ? xScale.domain()[0] : muS > xScale.domain()[1] ? xScale.domain()[1] : muS;
          }

          var hS = _this2.hS; // eslint-disable-line prefer-destructuring

          if (_this2.unequal) {
            hS = yScale.invert(event.y); // Clamp Signal Curve to stay visible

            hS = hS < 0.01 ? 0.01 : hS > yScale.domain()[0] ? yScale.domain()[0] : hS;
          }

          if (_this2.interactive && _this2.unequal) {
            // Use shift key as modifier for single dimension
            if (event.sourceEvent.shiftKey) {
              if (Math.abs(event.x - datum.startX) > Math.abs(event.y - datum.startY)) {
                hS = datum.startHS;
              } else {
                muS = datum.startMuS;
              }
            }
          }

          if (_this2.unequal) {
            _this2.s = SDTMath.h2S(hS);
            _this2.c = SDTMath.l2C(_this2.l, _this2.s);
          }

          _this2.d = SDTMath.muS2D(muS, _this2.s);

          _this2.alignState();

          _this2.sendEvent();
        }).on('end', function (event) {
          var element = event.currentTarget;
          select(element).classed('dragging', false);
        }); // Line for Evidence/Probability Space

        var line$1 = line().x(function (datum) {
          return xScale(datum.e);
        }).y(function (datum) {
          return yScale(datum.p);
        }); // Svg
        //  DATA-JOIN

        var svgUpdate = select(this.renderRoot).selectAll('.main').data([{
          width: this.width,
          height: this.height,
          rem: this.rem
        }]); // ENTER

        var svgEnter = svgUpdate.enter().append('svg').classed('main', true); // MERGE

        var svgMerge = svgEnter.merge(svgUpdate).attr('viewBox', "0 0 ".concat(elementWidth, " ").concat(elementHeight)); // Plot
        //  ENTER

        var plotEnter = svgEnter.append('g').classed('plot', true); //  MERGE

        var plotMerge = svgMerge.select('.plot').attr('transform', "translate(".concat(margin.left, ", ").concat(margin.top, ")")); // Underlayer
        //  ENTER

        var underlayerEnter = plotEnter.append('g').classed('underlayer', true); // MERGE

        var underlayerMerge = plotMerge.select('.underlayer'); // Background
        //  ENTER

        underlayerEnter.append('rect').classed('background', true); //  MERGE

        underlayerMerge.select('.background').attr('height', height).attr('width', width); // X Axis
        //  ENTER

        underlayerEnter.append('g').classed('axis-x', true); //  MERGE

        var axisXMerge = underlayerMerge.select('.axis-x').attr('transform', "translate(0, ".concat(height, ")")).call(axisBottom(xScale)).attr('font-size', null).attr('font-family', null);
        axisXMerge.selectAll('line, path').attr('stroke', null); // X Axis Title
        //  ENTER

        underlayerEnter.append('text').classed('title-x', true).attr('text-anchor', 'middle').text('Evidence'); //  MERGE

        underlayerMerge.select('.title-x').attr('transform', "translate(".concat(width / 2, ", ").concat(height + 2.25 * this.rem, ")")); // Y Axis
        //  DATA-JOIN

        var axisYUpdate = underlayerMerge.selectAll('.axis-y').data(this.distributions ? [{}] : []); //  ENTER

        var axisYEnter = axisYUpdate.enter().append('g').classed('axis-y', true); //  MERGE

        var axisYMerge = axisYEnter.merge(axisYUpdate).call(axisLeft(yScale).ticks(5)).attr('font-size', null).attr('font-family', null);
        axisYMerge.selectAll('line, path').attr('stroke', null); //  EXIT

        axisYUpdate.exit().remove(); // Y Axis Title
        //  DATA-JOIN

        var titleYUpdate = underlayerMerge.selectAll('.title-y').data(this.distributions ? [{}] : []); //  ENTER

        var titleYEnter = titleYUpdate.enter().append('text').classed('title-y', true).attr('text-anchor', 'middle').text('Probability'); //  MERGE

        titleYEnter.merge(titleYUpdate).attr('transform', "translate(".concat(-2 * this.rem, ", ").concat(height / 2, ")rotate(-90)")); //  EXIT

        titleYUpdate.exit().remove(); // 2nd Y Axis
        //  DATA-JOIN

        var axisY2Update = underlayerMerge.selectAll('.axis-y2').data(this.histogram ? [{}] : []); //  ENTER

        var axisY2Enter = axisY2Update.enter().append('g').classed('axis-y2', true); //  MERGE

        var axisY2Merge = axisY2Enter.merge(axisY2Update).attr('transform', this.distributions ? "translate(".concat(width, ", 0)") : '').call(this.distributions ? axisRight(y2Scale).ticks(10) : axisLeft(y2Scale).ticks(10)).attr('font-size', null).attr('font-family', null);
        axisY2Merge.selectAll('line, path').attr('stroke', null); //  EXIT

        axisY2Update.exit().remove(); // 2nd Y Axis Title
        //  DATA-JOIN

        var titleY2Update = underlayerMerge.selectAll('.title-y2').data(this.histogram ? [{}] : []); //  ENTER

        var titleY2Enter = titleY2Update.enter().append('text').classed('title-y2', true).attr('text-anchor', 'middle').text('Count'); //  MERGE

        titleY2Enter.merge(titleY2Update).attr('transform', this.distributions ? "translate(".concat(width + 1.5 * this.rem, ", ").concat(height / 2, ")rotate(90)") : "translate(".concat(-1.5 * this.rem, ", ").concat(height / 2, ")rotate(-90)")); //  EXIT

        titleY2Update.exit().remove(); // Plot Content

        plotEnter.append('g').classed('content', true); //  MERGE

        var contentMerge = plotMerge.select('.content'); // Noise & Signal + Noise Distributions
        //  DATA-JOIN

        var signalNoiseUpdate = contentMerge.selectAll('.signal-noise').data(this.distributions ? [{}] : []); //  ENTER

        var signalNoiseEnter = signalNoiseUpdate.enter().append('g').classed('signal-noise', true); //  MERGE

        var signalNoiseMerge = signalNoiseEnter.merge(signalNoiseUpdate); //  EXIT

        signalNoiseUpdate.exit().remove(); // Noise Distribution
        //  ENTER

        var noiseEnter = signalNoiseEnter.append('g').classed('noise', true); //  MERGE

        var noiseMerge = signalNoiseMerge.selectAll('.noise').attr('tabindex', this.interactive ? 0 : null).classed('interactive', this.interactive).on('keydown', this.interactive ? function (event) {
          if (['ArrowRight', 'ArrowLeft'].includes(event.key)) {
            var muN = _this2.muN; // eslint-disable-line prefer-destructuring

            switch (event.key) {
              case 'ArrowRight':
                muN += event.shiftKey ? 0.01 : 0.1;
                break;

              case 'ArrowLeft':
                muN -= event.shiftKey ? 0.01 : 0.1;
                break;
            } // Clamp C to visible extent


            muN = muN < xScale.domain()[0] ? xScale.domain()[0] : muN > xScale.domain()[1] ? xScale.domain()[1] : muN;

            if (muN !== _this2.muN) {
              _this2.d = SDTMath.muN2D(muN, _this2.s);

              _this2.alignState();

              _this2.sendEvent();
            }

            event.preventDefault();
          }
        } : null);

        if (this.firstUpdate || changedProperties.has('interactive')) {
          if (this.interactive) {
            noiseMerge.call(dragNoise);
          } else {
            noiseMerge.on('.drag', null);
          }
        } // CR Curve
        //  ENTER


        noiseEnter.append('path').classed('curve-cr', true); //  MERGE

        noiseMerge.select('.curve-cr').transition().duration(this.drag ? 0 : transitionDuration).ease(cubicOut).attrTween('d', function (datum, index, elements) {
          var element = elements[index];
          var interpolateD = interpolate$1(element.d !== undefined ? element.d : _this2.d, _this2.d);
          var interpolateC = interpolate$1(element.c !== undefined ? element.c : _this2.c, _this2.c);
          var interpolateS = interpolate$1(element.s !== undefined ? element.s : _this2.s, _this2.s);
          return function (time) {
            element.d = interpolateD(time);
            element.c = interpolateC(time);
            element.s = interpolateS(time);
            var correctRejections = range(xScale.domain()[0], SDTMath.c2L(element.c, element.s), 0.05).map(function (e) {
              return {
                e: e,
                p: jstat.normal.pdf(e, SDTMath.d2MuN(element.d, element.s), 1)
              };
            });
            correctRejections.push({
              e: SDTMath.c2L(element.c, element.s),
              p: jstat.normal.pdf(SDTMath.c2L(element.c, element.s), SDTMath.d2MuN(element.d, element.s), 1)
            });
            correctRejections.push({
              e: SDTMath.c2L(element.c, element.s),
              p: 0
            });
            correctRejections.push({
              e: xScale.domain()[0],
              p: 0
            });
            return line$1(correctRejections);
          };
        }); // FA Curve
        //  ENTER

        noiseEnter.append('path').classed('curve-fa', true); //  MERGE

        noiseMerge.select('.curve-fa').transition().duration(this.drag ? 0 : transitionDuration).ease(cubicOut).attrTween('d', function (datum, index, elements) {
          var element = elements[index];
          var interpolateD = interpolate$1(element.d !== undefined ? element.d : _this2.d, _this2.d);
          var interpolateC = interpolate$1(element.c !== undefined ? element.c : _this2.c, _this2.c);
          var interpolateS = interpolate$1(element.s !== undefined ? element.s : _this2.s, _this2.s);
          return function (time) {
            element.d = interpolateD(time);
            element.c = interpolateC(time);
            element.s = interpolateS(time);
            var falseAlarms = range(SDTMath.c2L(element.c, element.s), xScale.domain()[1], 0.05).map(function (e) {
              return {
                e: e,
                p: jstat.normal.pdf(e, SDTMath.d2MuN(element.d, element.s), 1)
              };
            });
            falseAlarms.push({
              e: xScale.domain()[1],
              p: jstat.normal.pdf(xScale.domain()[1], SDTMath.d2MuN(element.d, element.s), 1)
            });
            falseAlarms.push({
              e: xScale.domain()[1],
              p: 0
            });
            falseAlarms.push({
              e: SDTMath.c2L(element.c, element.s),
              p: 0
            });
            return line$1(falseAlarms);
          };
        }); // Noise Curve
        //  ENTER

        noiseEnter.append('path').classed('curve-noise', true); //  MERGE

        noiseMerge.select('.curve-noise').transition().duration(this.drag ? 0 : transitionDuration).ease(cubicOut).attrTween('d', function (datum, index, elements) {
          var element = elements[index];
          var interpolateD = interpolate$1(element.d !== undefined ? element.d : _this2.d, _this2.d);
          var interpolateS = interpolate$1(element.s !== undefined ? element.s : _this2.s, _this2.s);
          return function (time) {
            element.d = interpolateD(time);
            element.s = interpolateS(time);
            var noise = range(xScale.domain()[0], xScale.domain()[1], 0.05).map(function (e) {
              return {
                e: e,
                p: jstat.normal.pdf(e, SDTMath.d2MuN(element.d, element.s), 1)
              };
            });
            noise.push({
              e: xScale.domain()[1],
              p: jstat.normal.pdf(xScale.domain()[1], SDTMath.d2MuN(element.d, element.s), 1)
            });
            return line$1(noise);
          };
        }); // Signal + Noise Distribution
        //  ENTER

        var signalEnter = signalNoiseEnter.append('g').classed('signal', true); //  MERGE

        var signalMerge = signalNoiseMerge.selectAll('.signal').attr('tabindex', this.interactive || this.unequal ? 0 : null).classed('interactive', this.interactive).classed('unequal', this.unequal).on('keydown.sensitivity', this.interactive ? function (event) {
          if (['ArrowRight', 'ArrowLeft'].includes(event.key)) {
            var muS = _this2.muS; // eslint-disable-line prefer-destructuring

            switch (event.key) {
              case 'ArrowRight':
                muS += event.shiftKey ? 0.01 : 0.1;
                break;

              case 'ArrowLeft':
                muS -= event.shiftKey ? 0.01 : 0.1;
                break;
            } // Clamp C to visible extent


            muS = muS < xScale.domain()[0] ? xScale.domain()[0] : muS > xScale.domain()[1] ? xScale.domain()[1] : muS;

            if (muS !== _this2.muS) {
              _this2.d = SDTMath.muS2D(muS, _this2.s);

              _this2.alignState();

              _this2.sendEvent();
            }

            event.preventDefault();
          }
        } : null).on('keydown.variance', this.unequal ? function (event) {
          if (['ArrowUp', 'ArrowDown'].includes(event.key)) {
            var hS = _this2.hS; // eslint-disable-line prefer-destructuring

            switch (event.key) {
              case 'ArrowUp':
                hS += event.shiftKey ? 0.002 : 0.02;
                break;

              case 'ArrowDown':
                hS -= event.shiftKey ? 0.002 : 0.02;
                break;
            } // Clamp s so distribution stays visible


            hS = hS < 0.01 ? 0.01 : hS > yScale.domain()[0] ? yScale.domain()[0] : hS;

            if (hS !== _this2.hS) {
              _this2.s = SDTMath.h2S(hS);
              _this2.d = SDTMath.muN2D(_this2.muN, _this2.s);
              _this2.c = SDTMath.l2C(_this2.l, _this2.s);

              _this2.alignState();

              _this2.sendEvent();
            }

            event.preventDefault();
          }
        } : null);

        if (this.firstUpdate || changedProperties.has('interactive') || changedProperties.has('unequal')) {
          if (this.interactive || this.unequal) {
            signalMerge.call(dragSignal);
          } else {
            signalMerge.on('.drag', null);
          }
        } // M Curve
        //  ENTER


        signalEnter.append('path').classed('curve-m', true); //  MERGE

        signalMerge.select('.curve-m').transition().duration(this.drag ? 0 : transitionDuration).ease(cubicOut).attrTween('d', function (datum, index, elements) {
          var element = elements[index];
          var interpolateD = interpolate$1(element.d !== undefined ? element.d : _this2.d, _this2.d);
          var interpolateC = interpolate$1(element.c !== undefined ? element.c : _this2.c, _this2.c);
          var interpolateS = interpolate$1(element.s !== undefined ? element.s : _this2.s, _this2.s);
          return function (time) {
            element.d = interpolateD(time);
            element.c = interpolateC(time);
            element.s = interpolateS(time);
            var misses = range(xScale.domain()[0], SDTMath.c2L(element.c, element.s), 0.05).map(function (e) {
              return {
                e: e,
                p: jstat.normal.pdf(e, SDTMath.d2MuS(element.d, element.s), element.s)
              };
            });
            misses.push({
              e: SDTMath.c2L(element.c, element.s),
              p: jstat.normal.pdf(SDTMath.c2L(element.c, element.s), SDTMath.d2MuS(element.d, element.s), element.s)
            });
            misses.push({
              e: SDTMath.c2L(element.c, element.s),
              p: 0
            });
            misses.push({
              e: xScale.domain()[0],
              p: 0
            });
            return line$1(misses);
          };
        }); // H Curve
        //  ENTER

        signalEnter.append('path').classed('curve-h', true); //  MERGE

        signalMerge.select('.curve-h').transition().duration(this.drag ? 0 : transitionDuration).ease(cubicOut).attrTween('d', function (datum, index, elements) {
          var element = elements[index];
          var interpolateD = interpolate$1(element.d !== undefined ? element.d : _this2.d, _this2.d);
          var interpolateC = interpolate$1(element.c !== undefined ? element.c : _this2.c, _this2.c);
          var interpolateS = interpolate$1(element.s !== undefined ? element.s : _this2.s, _this2.s);
          return function (time) {
            element.d = interpolateD(time);
            element.c = interpolateC(time);
            element.s = interpolateS(time);
            var hits = range(SDTMath.c2L(element.c, element.s), xScale.domain()[1], 0.05).map(function (e) {
              return {
                e: e,
                p: jstat.normal.pdf(e, SDTMath.d2MuS(element.d, element.s), element.s)
              };
            });
            hits.push({
              e: xScale.domain()[1],
              p: jstat.normal.pdf(xScale.domain()[1], SDTMath.d2MuS(element.d, element.s), element.s)
            });
            hits.push({
              e: xScale.domain()[1],
              p: 0
            });
            hits.push({
              e: SDTMath.c2L(element.c, element.s),
              p: 0
            });
            return line$1(hits);
          };
        }); // Signal Curve
        //  ENTER

        signalEnter.append('path').classed('curve-signal', true); //  MERGE

        signalMerge.select('.curve-signal').transition().duration(this.drag ? 0 : transitionDuration).ease(cubicOut).attrTween('d', function (datum, index, elements) {
          var element = elements[index];
          var interpolateD = interpolate$1(element.d !== undefined ? element.d : _this2.d, _this2.d);
          var interpolateS = interpolate$1(element.s !== undefined ? element.s : _this2.s, _this2.s);
          return function (time) {
            element.d = interpolateD(time);
            element.s = interpolateS(time);
            var signal = range(xScale.domain()[0], xScale.domain()[1], 0.05).map(function (e) {
              return {
                e: e,
                p: jstat.normal.pdf(e, SDTMath.d2MuS(element.d, element.s), element.s)
              };
            });
            signal.push({
              e: xScale.domain()[1],
              p: jstat.normal.pdf(xScale.domain()[1], SDTMath.d2MuS(element.d, element.s), element.s)
            });
            return line$1(signal);
          };
        }); // d' Measure
        //  DATA-JOIN

        var dUpdate = contentMerge.selectAll('.measure-d').data(this.sensitivity ? [{}] : []); //  ENTER

        var dEnter = dUpdate.enter().append('g').classed('measure-d', true);
        dEnter.append('line').classed('line', true);
        dEnter.append('line').classed('cap-left', true);
        dEnter.append('line').classed('cap-right', true);
        var dLabel = dEnter.append('text').classed('label', true);
        dLabel.append('tspan').classed('d math-var', true).text('d′');
        dLabel.append('tspan').classed('equals', true).text(' = ');
        dLabel.append('tspan').classed('value', true); //  MERGE

        var dMerge = dEnter.merge(dUpdate);
        dMerge.select('.line').transition().duration(this.drag ? 0 : transitionDuration).ease(cubicOut).attr('x1', xScale(this.muN)).attr('y1', yScale(0.43)) // FIX - no hardcoding
        .attr('x2', xScale(this.muS)).attr('y2', yScale(0.43)); // FIX - no hardcoding

        dMerge.select('.cap-left').transition().duration(this.drag ? 0 : transitionDuration).ease(cubicOut).attr('x1', xScale(this.muN)).attr('y1', yScale(0.43) + 5) // FIX - no hardcoding
        .attr('x2', xScale(this.muN)).attr('y2', yScale(0.43) - 5); // FIX - no hardcoding

        dMerge.select('.cap-right').transition().duration(this.drag ? 0 : transitionDuration).ease(cubicOut).attr('x1', xScale(this.muS)).attr('y1', yScale(0.43) + 5) // FIX - no hardcoding
        .attr('x2', xScale(this.muS)).attr('y2', yScale(0.43) - 5); // FIX - no hardcoding

        var dLabelTransition = dMerge.select('.label').transition().duration(this.drag ? 0 : transitionDuration).ease(cubicOut).attr('x', xScale(this.muN > this.muS ? this.muN : this.muS) + 5).attr('y', yScale(0.43) + 3); // FIX - no hardcoding

        dLabelTransition.select('.value').tween('text', function (datum, index, elements) {
          var element = elements[index];
          var interpolateD = interpolate$1(element.d !== undefined ? element.d : _this2.d, _this2.d);
          return function (time) {
            element.d = interpolateD(time);
            select(element).text(+element.d.toFixed(3));
          };
        }); //  EXIT

        dUpdate.exit().remove(); // c Measure
        //  DATA-JOIN

        var cUpdate = contentMerge.selectAll('.measure-c').data(this.bias ? [{}] : []); //  ENTER

        var cEnter = cUpdate.enter().append('g').classed('measure-c', true);
        cEnter.append('line').classed('line', true);
        cEnter.append('line').classed('cap-zero', true);
        var cLabel = cEnter.append('text').classed('label', true);
        cLabel.append('tspan').classed('c math-var', true).text('c');
        cLabel.append('tspan').classed('equals', true).text(' = ');
        cLabel.append('tspan').classed('value', true); //  MERGE

        var cMerge = cEnter.merge(cUpdate);
        cMerge.select('.line').transition().duration(this.drag ? 0 : transitionDuration).ease(cubicOut).attr('x1', xScale(this.l)).attr('y1', yScale(0.47)) // FIX - no hardcoding
        .attr('x2', xScale(0)).attr('y2', yScale(0.47)); // FIX - no hardcoding

        cMerge.select('.cap-zero').transition().duration(this.drag ? 0 : transitionDuration).ease(cubicOut).attr('x1', xScale(0)).attr('y1', yScale(0.47) + 5) // FIX - no hardcoding
        .attr('x2', xScale(0)).attr('y2', yScale(0.47) - 5); // FIX - no hardcoding

        var cLabelTransition = cMerge.select('.label').transition().duration(this.drag ? 0 : transitionDuration).ease(cubicOut).attr('x', xScale(0) + (this.l < 0 ? 5 : -5)).attr('y', yScale(0.47) + 3) // FIX - no hardcoding
        .attr('text-anchor', this.c < 0 ? 'start' : 'end');
        cLabelTransition.select('.value').tween('text', function (datum, index, elements) {
          var element = elements[index];
          var interpolateC = interpolate$1(element.c !== undefined ? element.c : _this2.c, _this2.c);
          return function (time) {
            element.c = interpolateC(time);
            select(element).text(+element.c.toFixed(3));
          };
        }); //  EXIT

        cUpdate.exit().remove(); // s Measure
        //  DATA-JOIN

        var sUpdate = contentMerge.selectAll('.measure-s').data(this.variance ? [{}] : []); //  ENTER

        var sEnter = sUpdate.enter().append('g').classed('measure-s', true);
        sEnter.append('line').classed('line', true);
        sEnter.append('line').classed('cap-left', true);
        sEnter.append('line').classed('cap-right', true);
        var sLabel = sEnter.append('text').classed('label', true);
        sLabel.append('tspan').classed('s math-var', true).text('σ');
        sLabel.append('tspan').classed('equals', true).text(' = ');
        sLabel.append('tspan').classed('value', true); //  MERGE

        var sMerge = sEnter.merge(sUpdate);
        sMerge.select('.line').transition().duration(this.drag ? 0 : transitionDuration).ease(cubicOut).attr('x1', xScale(this.muS - this.s)).attr('y1', yScale(jstat.normal.pdf(this.s, 0, this.s)) + 10 / this.s) // FIX - no hardcoding
        .attr('x2', xScale(this.muS + this.s)).attr('y2', yScale(jstat.normal.pdf(this.s, 0, this.s)) + 10 / this.s); // FIX - no hardcoding

        sMerge.select('.cap-left').transition().duration(this.drag ? 0 : transitionDuration).ease(cubicOut).attr('x1', xScale(this.muS - this.s)).attr('y1', yScale(jstat.normal.pdf(this.s, 0, this.s)) + 10 / this.s + 5) // FIX - no hardcoding
        .attr('x2', xScale(this.muS - this.s)).attr('y2', yScale(jstat.normal.pdf(this.s, 0, this.s)) + 10 / this.s - 5); // FIX - no hardcoding

        sMerge.select('.cap-right').transition().duration(this.drag ? 0 : transitionDuration).ease(cubicOut).attr('x1', xScale(this.muS + this.s)).attr('y1', yScale(jstat.normal.pdf(this.s, 0, this.s)) + 10 / this.s + 5) // FIX - no hardcoding
        .attr('x2', xScale(this.muS + this.s)).attr('y2', yScale(jstat.normal.pdf(this.s, 0, this.s)) + 10 / this.s - 5); // FIX - no hardcoding

        var sLabelTransition = sMerge.select('.label').transition().duration(this.drag ? 0 : transitionDuration).ease(cubicOut).attr('x', xScale(this.muS)).attr('y', yScale(jstat.normal.pdf(this.s, 0, this.s)) + 10 / this.s - 3); // FIX - no hardcoding

        sLabelTransition.select('.value').tween('text', function (datum, index, elements) {
          var element = elements[index];
          var interpolateS = interpolate$1(element.s !== undefined ? element.s : _this2.s, _this2.s);
          return function (time) {
            element.s = interpolateS(time);
            select(element).text(+element.s.toFixed(3));
          };
        }); //  EXIT

        sUpdate.exit().remove(); // Threshold Line
        //  DATA-JOIN

        var thresholdUpdate = contentMerge.selectAll('.threshold').data(this.threshold ? [{}] : []); //  ENTER

        var thresholdEnter = thresholdUpdate.enter().append('g').classed('threshold', true);
        thresholdEnter.append('line').classed('line', true);
        thresholdEnter.append('circle').classed('handle', true).attr('r', 6);
        /* HACK: Firefox does not support CSS SVG Geometry Properties */
        //  MERGE

        var thresholdMerge = thresholdEnter.merge(thresholdUpdate).attr('tabindex', this.interactive ? 0 : null).classed('interactive', this.interactive);

        if (this.firstUpdate || changedProperties.has('interactive')) {
          if (this.interactive) {
            thresholdMerge.call(dragThreshold).on('keydown', function (event) {
              if (['ArrowRight', 'ArrowLeft'].includes(event.key)) {
                var l = _this2.l; // eslint-disable-line prefer-destructuring

                switch (event.key) {
                  case 'ArrowRight':
                    l += event.shiftKey ? 0.01 : 0.1;
                    break;

                  case 'ArrowLeft':
                    l -= event.shiftKey ? 0.01 : 0.1;
                    break;
                } // Clamp C to visible extent


                l = l < xScale.domain()[0] ? xScale.domain()[0] : l > xScale.domain()[1] ? xScale.domain()[1] : l;

                if (l !== _this2.l) {
                  _this2.c = SDTMath.l2C(l, _this2.s);

                  _this2.alignState();

                  _this2.sendEvent();
                }

                event.preventDefault();
              }
            });
          } else {
            thresholdMerge.on('drag', null).on('keydown', null);
          }
        }

        thresholdMerge.select('.line').transition().duration(this.drag ? 0 : transitionDuration).ease(cubicOut).attr('x1', xScale(this.l)).attr('y1', yScale(0)).attr('x2', xScale(this.l)).attr('y2', yScale(0.54));
        thresholdMerge.select('.handle').transition().duration(this.drag ? 0 : transitionDuration).ease(cubicOut).attr('cx', xScale(this.l)).attr('cy', yScale(0.54)); //  EXIT

        thresholdUpdate.exit().remove(); // Histogram
        //  DATA-JOIN

        var histogramUpdate = contentMerge.selectAll('.histogram').data(this.histogram ? [{}] : []); //  ENTER

        var histogramEnter = histogramUpdate.enter().append('g').classed('histogram', true); //  MERGE

        var histogramMerge = histogramEnter.merge(histogramUpdate); //  EXIT

        histogramUpdate.exit().remove(); // Trials

        if (this.histogram) {
          var histogram = bin().value(function (datum) {
            return datum.trueEvidence;
          }).domain(xScale.domain()).thresholds(range(this.binRange[0], this.binRange[1], this.binWidth));
          var hist = histogram(this.trials);
          var binCountLeft = -1;
          var binCountRight = -1;

          for (var i = 0; i < hist.length; i += 1) {
            for (var j = 0; j < hist[i].length; j += 1) {
              hist[i][j].binValue = hist[i].x0;
              hist[i][j].binCount = j;
              if (i === 0) binCountLeft = j;
              if (i === hist.length - 1) binCountRight = j;
            }
          } // Put out-of-range values in extreme left/right bins


          for (var _i = 0; _i < this.trials.length; _i += 1) {
            if (this.trials[_i].trueEvidence < this.binRange[0]) {
              binCountLeft += 1;
              this.trials[_i].binCount = binCountLeft;
              this.trials[_i].binValue = hist[0].x0;
            }

            if (this.trials[_i].trueEvidence > this.binRange[1]) {
              binCountRight += 1;
              this.trials[_i].binCount = binCountRight;
              this.trials[_i].binValue = hist[hist.length - 1].x0;
            }
          } //  DATA-JOIN


          var trialUpdate = histogramMerge.selectAll('.trial').data(this.trials, function (datum) {
            return datum.trial;
          }); //  ENTER

          var trialEnter = trialUpdate.enter().append('rect').attr('stroke-width', strokeWidth).attr('data-new-trial-ease-time', 0) // use 'data-trial-enter'
          .attr('stroke', this.getComputedStyleValue('---color-acc')).attr('fill', this.getComputedStyleValue('---color-acc-light')); //  MERGE

          var trialMerge = trialEnter.merge(trialUpdate).attr('class', function (datum) {
            return "trial ".concat(datum.outcome);
          }).attr('width', binWidth - strokeWidth).attr('height', binWidth - strokeWidth); //  MERGE - Active New Trials

          var trialMergeNewActive = trialMerge.filter(function (datum) {
            return datum.new && !datum.paused;
          });

          if (!trialMergeNewActive.empty()) {
            var easeTime = trialMergeNewActive.attr('data-new-trial-ease-time');

            var scaleIn = function scaleIn(time) {
              return linear().domain([0, 1]).range([easeTime, 1])(time);
            };

            var scaleOutGenerator = function scaleOutGenerator(easeFunction) {
              return function (time) {
                return linear().domain([easeFunction(easeTime), 1]).range([0, 1])(easeFunction(time));
              };
            };

            trialMergeNewActive.transition('new').duration(function (datum) {
              return Math.floor((datum.duration * 0.75 + datum.wait * 0.25) * (1 - easeTime));
            }).ease(scaleIn).attr('data-new-trial-ease-time', 1).attrTween('stroke', function (datum, index, elements) {
              var element = elements[index];
              var interpolator = interpolateRgb(element.getAttribute('stroke'), _this2.color === 'stimulus' ? datum.signal === 'present' ? _this2.getComputedStyleValue('---color-hr') : _this2.getComputedStyleValue('---color-far') : _this2.color === 'response' ? _this2.getComputedStyleValue("---color-".concat(datum.response)) : _this2.color === 'outcome' ? _this2.getComputedStyleValue("---color-".concat(datum.outcome)) : _this2.getComputedStyleValue('---color-acc'));
              return function (time) {
                return interpolator(scaleOutGenerator(cubicIn)(time));
              };
            }).attrTween('fill', function (datum, index, elements) {
              var element = elements[index];
              var interpolator = interpolateRgb(element.getAttribute('fill'), _this2.color === 'stimulus' ? datum.signal === 'present' ? _this2.getComputedStyleValue('---color-hr-light') : _this2.getComputedStyleValue('---color-far-light') : _this2.color === 'response' ? _this2.getComputedStyleValue("---color-".concat(datum.response, "-light")) : _this2.color === 'outcome' ? _this2.getComputedStyleValue("---color-".concat(datum.outcome, "-light")) : _this2.getComputedStyleValue('---color-acc-light'));
              return function (time) {
                return interpolator(scaleOutGenerator(cubicIn)(time));
              };
            }).attrTween('x', function (datum, index, elements) {
              var element = elements[index];
              var interpolator = interpolate$1(element.getAttribute('x'), xScale(datum.binValue) + strokeWidth / 2);
              return function (time) {
                return interpolator(scaleOutGenerator(cubicOut)(time));
              };
            }).attrTween('y', function (datum, index, elements) {
              var element = elements[index];
              var interpolator = interpolate$1(element.getAttribute('y'), yScale(0) + strokeWidth / 2 - (datum.binCount + 1) * binWidth);
              return function (time) {
                return interpolator(scaleOutGenerator(cubicIn)(time));
              };
            }).on('end', function (datum, index, elements) {
              var element = elements[index];
              element.removeAttribute('data-new-trial-ease-time');
              datum.new = false;

              _this2.alignTrial(datum);

              _this2.dispatchEvent(new CustomEvent('detectable-response', {
                detail: {
                  stimulus: datum.signal,
                  response: datum.response,
                  outcome: datum.outcome,
                  h: _this2.h,
                  m: _this2.m,
                  fa: _this2.fa,
                  cr: _this2.cr,
                  nr: 0
                },
                bubbles: true
              }));
            });
          } // MERGE - Paused New Trials


          var trialMergeNewPaused = trialMerge.filter(function (datum) {
            return datum.new && datum.paused;
          });

          if (!trialMergeNewPaused.empty()) {
            var _easeTime = trialMergeNewPaused.attr('data-new-trial-ease-time');

            trialMergeNewPaused.transition().duration(transitionDuration).ease(cubicOut).attr('x', function (datum) {
              var interpolator = interpolate$1(0, xScale(datum.binValue) + strokeWidth / 2);
              return interpolator(cubicOut(_easeTime));
            }).attr('y', function (datum) {
              var interpolator = interpolate$1(0, yScale(0) + strokeWidth / 2 - (datum.binCount + 1) * binWidth);
              return interpolator(cubicIn(_easeTime));
            }).attr('stroke', function (datum) {
              var interpolator = interpolateRgb(_this2.getComputedStyleValue('---color-acc'), _this2.color === 'stimulus' ? datum.signal === 'present' ? _this2.getComputedStyleValue('---color-hr') : _this2.getComputedStyleValue('---color-far') : _this2.color === 'response' ? _this2.getComputedStyleValue("---color-".concat(datum.response)) : _this2.color === 'outcome' ? _this2.getComputedStyleValue("---color-".concat(datum.outcome)) : _this2.getComputedStyleValue('---color-acc'));
              return interpolator(cubicIn(_easeTime));
            }).attr('fill', function (datum) {
              var interpolator = interpolateRgb(_this2.getComputedStyleValue('---color-acc-light'), _this2.color === 'stimulus' ? datum.signal === 'present' ? _this2.getComputedStyleValue('---color-hr-light') : _this2.getComputedStyleValue('---color-far-light') : _this2.color === 'response' ? _this2.getComputedStyleValue("---color-".concat(datum.response, "-light")) : _this2.color === 'outcome' ? _this2.getComputedStyleValue("---color-".concat(datum.outcome, "-light")) : _this2.getComputedStyleValue('---color-acc-light'));
              return interpolator(cubicIn(_easeTime));
            });
          } //  MERGE - Old Trials


          trialMerge.filter(function (datum) {
            return !datum.new;
          }).transition().duration(transitionDuration).ease(cubicOut).attr('x', function (datum) {
            return xScale(datum.binValue) + strokeWidth / 2;
          }).attr('y', function (datum) {
            return yScale(0) + strokeWidth / 2 - (datum.binCount + 1) * binWidth;
          }).attr('stroke', function (datum) {
            return _this2.color === 'stimulus' ? datum.signal === 'present' ? _this2.getComputedStyleValue('---color-hr') : _this2.getComputedStyleValue('---color-far') : _this2.color === 'response' ? _this2.getComputedStyleValue("---color-".concat(datum.response)) : _this2.color === 'outcome' ? _this2.getComputedStyleValue("---color-".concat(datum.outcome)) : _this2.getComputedStyleValue('---color-acc');
          }).attr('fill', function (datum) {
            return _this2.color === 'stimulus' ? datum.signal === 'present' ? _this2.getComputedStyleValue('---color-hr-light') : _this2.getComputedStyleValue('---color-far-light') : _this2.color === 'response' ? _this2.getComputedStyleValue("---color-".concat(datum.response, "-light")) : _this2.color === 'outcome' ? _this2.getComputedStyleValue("---color-".concat(datum.outcome, "-light")) : _this2.getComputedStyleValue('---color-acc-light');
          }); //  EXIT

          trialUpdate.exit().transition().duration(transitionDuration).ease(linear$1).attrTween('stroke', function (datum, index, elements) {
            var element = elements[index];
            var interpolator = interpolateRgb(element.getAttribute('stroke'), _this2.getComputedStyleValue('---color-acc'));
            return function (time) {
              return interpolator(cubicIn(time));
            };
          }).attrTween('fill', function (datum, index, elements) {
            var element = elements[index];
            var interpolator = interpolateRgb(element.getAttribute('fill'), _this2.getComputedStyleValue('---color-acc-light'));
            return function (time) {
              return interpolator(cubicIn(time));
            };
          }).attrTween('x', function (datum, index, elements) {
            var element = elements[index];
            var interpolator = interpolate$1(element.getAttribute('x'), 0);
            return function (time) {
              return interpolator(cubicIn(time));
            };
          }).attrTween('y', function (datum, index, elements) {
            var element = elements[index];
            var interpolator = interpolate$1(element.getAttribute('y'), 0);
            return function (time) {
              return interpolator(cubicOut(time));
            };
          }).remove();
        } // Overlayer
        //  ENTER


        var overlayerEnter = plotEnter.append('g').classed('overlayer', true); // MERGE

        var overlayerMerge = plotMerge.select('.overlayer'); // Background
        //  ENTER

        overlayerEnter.append('rect').classed('background', true); //  MERGE

        overlayerMerge.select('.background').attr('height', height).attr('width', width);
        this.drag = false;
        this.firstUpdate = false;
      } // Called to pause trial animations!

    }, {
      key: "pauseTrial",
      value: function pauseTrial() {
        var trialNew = select(this.renderRoot).select('.trial[data-new-trial-ease-time]');
        trialNew.interrupt('new');
        trialNew.datum(function (datum) {
          datum.paused = true;
          return datum;
        });
      } // Called to resume trial animations!

    }, {
      key: "resumeTrial",
      value: function resumeTrial() {
        var trialNew = select(this.renderRoot).select('.trial[data-new-trial-ease-time]');
        trialNew.datum(function (datum) {
          datum.paused = false;
          return datum;
        });
        this.requestUpdate();
      }
    }], [{
      key: "properties",
      get: function get() {
        return {
          color: {
            attribute: 'color',
            type: String,
            reflect: true
          },
          distributions: {
            attribute: 'distributions',
            type: Boolean,
            reflect: true
          },
          threshold: {
            attribute: 'threshold',
            type: Boolean,
            reflect: true
          },
          unequal: {
            attribute: 'unequal',
            type: Boolean,
            reflect: true
          },
          sensitivity: {
            attribute: 'sensitivity',
            type: Boolean,
            reflect: true
          },
          bias: {
            attribute: 'bias',
            type: Boolean,
            reflect: true
          },
          variance: {
            attribute: 'variance',
            type: Boolean,
            reflect: true
          },
          histogram: {
            attribute: 'histogram',
            type: Boolean,
            reflect: true
          },
          d: {
            attribute: 'd',
            type: Number,
            reflect: true
          },
          c: {
            attribute: 'c',
            type: Number,
            reflect: true
          },
          s: {
            attribute: 's',
            type: Number,
            reflect: true
          },
          far: {
            attribute: false,
            type: Number,
            reflect: false
          },
          hr: {
            attribute: false,
            type: Number,
            reflect: false
          },
          binWidth: {
            attribute: false,
            type: Number,
            reflect: false
          },
          trials: {
            attribute: false,
            type: Array,
            reflect: false
          },
          width: {
            attribute: false,
            type: Number,
            reflect: false
          },
          height: {
            attribute: false,
            type: Number,
            reflect: false
          },
          rem: {
            attribute: false,
            type: Number,
            reflect: false
          }
        };
      }
    }, {
      key: "styles",
      get: function get() {
        return [_get(_getPrototypeOf(SDTModel), "styles", this), r$2(_templateObject2$a || (_templateObject2$a = _taggedTemplateLiteral(["\n        :host {\n          display: inline-block;\n\n          width: 27rem;\n          height: 15rem;\n        }\n\n        .main {\n          width: 100%;\n          height: 100%;\n        }\n\n        text {\n          /* stylelint-disable property-no-vendor-prefix */\n          -webkit-user-select: none;\n          -moz-user-select: none;\n          -ms-user-select: none;\n          user-select: none;\n        }\n\n        .tick {\n          font-size: 0.75rem;\n        }\n\n        .axis-x path,\n        .axis-x line,\n        .axis-y path,\n        .axis-y line,\n        .axis-y2 path,\n        .axis-y2 line {\n          stroke: var(---color-element-border);\n        }\n\n        .noise.interactive,\n        .signal.interactive,\n        .threshold.interactive {\n          cursor: ew-resize;\n\n          filter: url(\"#shadow-2\");\n          outline: none;\n        }\n\n        .signal.unequal {\n          cursor: ns-resize;\n\n          filter: url(\"#shadow-2\");\n          outline: none;\n        }\n\n        .signal.interactive.unequal {\n          cursor: move;\n        }\n\n        .noise.interactive:hover,\n        .signal.interactive:hover,\n        .signal.unequal:hover,\n        .threshold.interactive:hover {\n          filter: url(\"#shadow-4\");\n\n          /* HACK: This gets Safari to correctly apply the filter! */\n          transform: translateX(0);\n        }\n\n        .noise.interactive:active,\n        .signal.interactive:active,\n        .signal.unequal:active,\n        .threshold.interactive:active {\n          filter: url(\"#shadow-8\");\n\n          /* HACK: This gets Safari to correctly apply the filter! */\n          transform: translateY(0);\n        }\n\n        :host(.keyboard) .noise.interactive:focus,\n        :host(.keyboard) .signal.interactive:focus,\n        :host(.keyboard) .signal.unequal:focus,\n        :host(.keyboard) .threshold.interactive:focus {\n          filter: url(\"#shadow-8\");\n\n          /* HACK: This gets Safari to correctly apply the filter! */\n          transform: translateZ(0);\n        }\n\n        .underlayer .background {\n          fill: var(---color-element-background);\n          stroke: none;\n        }\n\n        .overlayer .background {\n          fill: none;\n          stroke: var(---color-element-border);\n          stroke-width: 1;\n          shape-rendering: crispEdges;\n        }\n\n        .title-x,\n        .title-y,\n        .title-y2 {\n          font-weight: 600;\n\n          fill: currentColor;\n        }\n\n        .curve-cr,\n        .curve-fa,\n        .curve-m,\n        .curve-h {\n          fill-opacity: 0.5;\n          stroke: none;\n\n          transition: fill var(---transition-duration) ease;\n        }\n\n        .curve-cr {\n          fill: var(---color-cr);\n        }\n\n        .curve-fa {\n          fill: var(---color-fa);\n        }\n\n        .curve-m {\n          fill: var(---color-m);\n        }\n\n        .curve-h {\n          fill: var(---color-h);\n        }\n\n        :host([color=\"accuracy\"]) .curve-h,\n        :host([color=\"accuracy\"]) .curve-cr {\n          fill: var(---color-correct);\n        }\n\n        :host([color=\"accuracy\"]) .curve-m,\n        :host([color=\"accuracy\"]) .curve-fa {\n          fill: var(---color-error);\n        }\n\n        :host([color=\"stimulus\"]) .curve-cr,\n        :host([color=\"stimulus\"]) .curve-fa {\n          fill: var(---color-far);\n        }\n\n        :host([color=\"stimulus\"]) .curve-m,\n        :host([color=\"stimulus\"]) .curve-h {\n          fill: var(---color-hr);\n        }\n\n        :host([color=\"response\"]) .curve-cr,\n        :host([color=\"response\"]) .curve-m {\n          fill: var(---color-absent);\n        }\n\n        :host([color=\"response\"]) .curve-fa,\n        :host([color=\"response\"]) .curve-h {\n          fill: var(---color-present);\n        }\n\n        :host([color=\"none\"]) .curve-cr,\n        :host([color=\"none\"]) .curve-fa,\n        :host([color=\"none\"]) .curve-m,\n        :host([color=\"none\"]) .curve-h {\n          fill: var(---color-element-enabled);\n        }\n\n        .curve-noise,\n        .curve-signal {\n          fill: none;\n          stroke: var(---color-element-emphasis);\n          stroke-width: 2;\n        }\n\n        .measure-d,\n        .measure-c,\n        .measure-s {\n          pointer-events: none;\n        }\n\n        .threshold .line {\n          stroke: var(---color-element-emphasis);\n          stroke-width: 2;\n        }\n\n        .threshold .handle {\n          fill: var(---color-element-emphasis);\n\n          /* r: 6; HACK: Firefox does not support CSS SVG Geometry Properties */\n        }\n\n        /* Make a larger target for touch users */\n        @media (pointer: coarse) {\n          .threshold.interactive .handle {\n            stroke: #000000;\n            stroke-opacity: 0;\n            stroke-width: 12px;\n          }\n        }\n\n        .measure-d .line,\n        .measure-d .cap-left,\n        .measure-d .cap-right {\n          stroke: var(---color-d);\n          stroke-width: 2;\n          shape-rendering: crispEdges;\n        }\n\n        .measure-d .label {\n          font-size: 0.75rem;\n\n          text-anchor: start;\n          fill: currentColor;\n        }\n\n        .measure-c .line,\n        .measure-c .cap-zero {\n          stroke: var(---color-c);\n          stroke-width: 2;\n          shape-rendering: crispEdges;\n        }\n\n        .measure-c .label {\n          font-size: 0.75rem;\n\n          fill: currentColor;\n        }\n\n        .measure-s .line,\n        .measure-s .cap-left,\n        .measure-s .cap-right {\n          stroke: var(---color-s);\n          stroke-width: 2;\n          shape-rendering: crispEdges;\n        }\n\n        .measure-s .label {\n          font-size: 0.75rem;\n\n          text-anchor: middle;\n          fill: currentColor;\n        }\n      "])))];
      }
    }]);

    return SDTModel;
  }(DetectableElement);
  customElements.define('sdt-model', SDTModel);

  var _templateObject$a, _templateObject2$9, _templateObject3$8, _templateObject4$8, _templateObject5$8, _templateObject6$8, _templateObject7$8, _templateObject8$6, _templateObject9$6, _templateObject10$6, _templateObject11$6, _templateObject12$1, _templateObject13$1, _templateObject14$1, _templateObject15$1, _templateObject16$1, _templateObject17$1, _templateObject18$1, _templateObject19$1, _templateObject20$1;
  /*
    DetectableResponse element
    <detectable-response>

    Attributes:

  */

  var DetectableResponse = /*#__PURE__*/function (_DetectableElement) {
    _inherits(DetectableResponse, _DetectableElement);

    var _super = _createSuper(DetectableResponse);

    function DetectableResponse() {
      var _this;

      _classCallCheck(this, DetectableResponse);

      _this = _super.call(this); // Attributes

      _this.feedbacks = ['none', 'accuracy', 'outcome']; // Possible values for 'feedback'

      _this.feedback = 'outcome'; // What feedback to display

      _this.trial = false; // Show trial count?

      _this.payoffs = ['none', 'trial', 'total']; // Possible types of 'payoff' info

      _this.payoff = 'none'; // What payoff info to display

      _this.hPayoff = 0; // Hit payoff

      _this.mPayoff = 0; // Miss payoff

      _this.crPayoff = 0; // Correct Rejection payoff

      _this.faPayoff = 0; // False Alarm payoff

      _this.nrPayoff = 0; // No Response payoff
      // Properties

      _this.states = ['off', 'waiting', 'feedback']; // Possible states

      _this.state = 'off'; // Current state

      _this.trialCount = 0; // Current trial

      _this.trialTotal = 0; // Total trials
      // Private

      _this.signals = ['present', 'absent']; // Possible values of 'signal'

      _this.signal = undefined; // Signal for current trial

      _this.responses = ['present', 'absent']; // Possible values of 'response'

      _this.response = undefined; // Response for current trial

      _this.outcomes = ['h', 'm', 'fa', 'cr', 'nr']; // Possible values of 'outcome'

      _this.outcome = undefined; // Outcome for current trial

      _this.accuracies = ['c', 'e', 'nr']; // Possible values of 'accuracy'

      _this.accuracy = undefined; // Accuracy for current trial

      _this.h = 0; // Count of Hits

      _this.m = 0; // Count of Misses

      _this.cr = 0; // Count of Correct Rejections

      _this.fa = 0; // Count of False Alarms

      _this.c = 0; // Count of Correct trials

      _this.e = 0; // Count of Error trials

      _this.nr = 0; // Count of No Response trials

      return _this;
    }

    _createClass(DetectableResponse, [{
      key: "trialPayoff",
      get: function get() {
        switch (this.outcome) {
          case 'h':
            return this.hPayoff;

          case 'm':
            return this.mPayoff;

          case 'fa':
            return this.faPayoff;

          case 'cr':
            return this.crPayoff;

          case 'nr':
            return this.nrPayoff;

          default:
            return undefined;
        }
      }
    }, {
      key: "totalPayoff",
      get: function get() {
        return this.h * this.hPayoff + this.m * this.mPayoff + this.cr * this.crPayoff + this.fa * this.faPayoff + this.nr * this.nrPayoff;
      }
    }, {
      key: "start",
      value: function start(signal, trial) {
        this.trialCount = trial;
        this.state = 'waiting';
        this.signal = signal;
        this.response = undefined;
        this.outcome = undefined;
      }
    }, {
      key: "stop",
      value: function stop() {
        this.state = 'feedback';

        if (this.response === undefined) {
          this.outcome = 'nr';
          this.nr += 1;
          this.accuracy = 'nr';
        }
      }
    }, {
      key: "present",
      value: function present() {
        this.responded('present');
      }
    }, {
      key: "absent",
      value: function absent() {
        this.responded('absent');
      }
    }, {
      key: "responded",
      value: function responded(response) {
        this.state = 'feedback';
        this.response = response;

        if (this.signal === 'present' && this.response === 'present') {
          this.outcome = 'h';
          this.h += 1;
          this.accuracy = 'c';
          this.c += 1;
        } else if (this.signal === 'present' && this.response === 'absent') {
          this.outcome = 'm';
          this.m += 1;
          this.accuracy = 'e';
          this.e += 1;
        } else if (this.signal === 'absent' && this.response === 'present') {
          this.outcome = 'fa';
          this.fa += 1;
          this.accuracy = 'e';
          this.e += 1;
        } else if (this.signal === 'absent' && this.response === 'absent') {
          this.outcome = 'cr';
          this.cr += 1;
          this.accuracy = 'c';
          this.c += 1;
        }

        this.dispatchEvent(new CustomEvent('detectable-response', {
          detail: {
            trial: this.trialCount,
            signal: this.signal,
            response: this.response,
            outcome: this.outcome,
            payoff: this.trialPayoff,
            h: this.h,
            m: this.m,
            fa: this.fa,
            cr: this.cr,
            nr: this.nr,
            totalPayoff: this.totalPayoff
          },
          bubbles: true
        }));
      }
    }, {
      key: "reset",
      value: function reset() {
        this.state = 'off';
        this.trialCount = 0;
        this.signal = undefined;
        this.response = undefined;
        this.outcome = undefined;
        this.accuracy = undefined;
        this.h = 0;
        this.m = 0;
        this.cr = 0;
        this.fa = 0;
        this.nr = 0;
        this.c = 0;
        this.e = 0;
      }
    }, {
      key: "render",
      value: function render() {
        return $(_templateObject$a || (_templateObject$a = _taggedTemplateLiteral(["\n      <div class=\"holder\">\n        <div class=\"responses\">\n          <decidables-button name=\"present\" class=", " ?disabled=", " @click=", ">Present</decidables-button>\n          <decidables-button name=\"absent\" class=", " ?disabled=", " @click=", ">Absent</decidables-button>\n        </div>\n        ", "\n      </div>"])), this.state === 'feedback' && this.response === 'present' ? 'selected' : this.state === 'waiting' ? 'waiting' : '', this.state !== 'waiting' || this.interactive !== true, this.present.bind(this), this.state === 'feedback' && this.response === 'absent' ? 'selected' : this.state === 'waiting' ? 'waiting' : '', this.state !== 'waiting' || this.interactive !== true, this.absent.bind(this), this.trial || this.feedback !== 'none' || this.payoff === 'total' ? $(_templateObject2$9 || (_templateObject2$9 = _taggedTemplateLiteral(["\n            <div class=\"feedbacks\">\n              ", "\n              ", "\n              ", "\n            </div>"])), this.trial ? $(_templateObject3$8 || (_templateObject3$8 = _taggedTemplateLiteral(["\n                  <div class=\"trial\">\n                    <span class=\"label\">Trial: </span><span class=\"count\">", "</span><span class=\"of\"> of </span><span class=\"total\">", "</span>\n                  </div>"])), this.trialCount, this.trialTotal) : $(_templateObject4$8 || (_templateObject4$8 = _taggedTemplateLiteral([""]))), this.feedback !== 'none' ? $(_templateObject5$8 || (_templateObject5$8 = _taggedTemplateLiteral(["\n                  <div class=", ">\n                    ", "\n                    ", "\n                  </div>"])), "feedback ".concat(this.state === 'feedback' ? this.feedback === 'outcome' ? this.outcome : this.accuracy : ''), this.state === 'feedback' ? this.feedback === 'outcome' ? this.outcome === 'h' ? $(_templateObject6$8 || (_templateObject6$8 = _taggedTemplateLiteral(["<span class=\"outcome\">Hit</span>"]))) : this.outcome === 'm' ? $(_templateObject7$8 || (_templateObject7$8 = _taggedTemplateLiteral(["<span class=\"outcome\">Miss</span>"]))) : this.outcome === 'fa' ? $(_templateObject8$6 || (_templateObject8$6 = _taggedTemplateLiteral(["<span class=\"outcome\">False<br>Alarm</span>"]))) : this.outcome === 'cr' ? $(_templateObject9$6 || (_templateObject9$6 = _taggedTemplateLiteral(["<span class=\"outcome\">Correct<br>Rejection</span>"]))) : $(_templateObject10$6 || (_templateObject10$6 = _taggedTemplateLiteral(["<span class=\"outcome\">No<br>Response</span>"]))) : this.accuracy === 'c' ? $(_templateObject11$6 || (_templateObject11$6 = _taggedTemplateLiteral(["<span class=\"outcome\">Correct</span>"]))) : this.accuracy === 'e' ? $(_templateObject12$1 || (_templateObject12$1 = _taggedTemplateLiteral(["<span class=\"outcome\">Error</span>"]))) : $(_templateObject13$1 || (_templateObject13$1 = _taggedTemplateLiteral(["<span class=\"outcome\">No<br>Response</span>"]))) : '', this.payoff === 'trial' || this.payoff === 'total' ? $(_templateObject14$1 || (_templateObject14$1 = _taggedTemplateLiteral(["<span class=\"payoff\">", "</span>"])), this.trialPayoff) : $(_templateObject15$1 || (_templateObject15$1 = _taggedTemplateLiteral([""])))) : $(_templateObject16$1 || (_templateObject16$1 = _taggedTemplateLiteral([""]))), this.payoff === 'total' ? $(_templateObject17$1 || (_templateObject17$1 = _taggedTemplateLiteral(["\n                  <div class=\"payoff\">\n                    <span class=\"label\">Total: </span><span class=\"value\">", "</span>\n                  </div>"])), this.totalPayoff) : $(_templateObject18$1 || (_templateObject18$1 = _taggedTemplateLiteral([""])))) : $(_templateObject19$1 || (_templateObject19$1 = _taggedTemplateLiteral([""]))));
      }
    }], [{
      key: "properties",
      get: function get() {
        return {
          feedback: {
            attribute: 'feedback',
            type: String,
            reflect: true
          },
          trial: {
            attribute: 'trial',
            type: Boolean,
            reflect: true
          },
          payoff: {
            attribute: 'payoff',
            type: String,
            reflect: true
          },
          hPayoff: {
            attribute: 'hit-payoff',
            type: Number,
            reflect: true
          },
          mPayoff: {
            attribute: 'miss-payoff',
            type: Number,
            reflect: true
          },
          faPayoff: {
            attribute: 'false-alarm-payoff',
            type: Number,
            reflect: true
          },
          crPayoff: {
            attribute: 'correct-rejection-payoff',
            type: Number,
            reflect: true
          },
          nrPayoff: {
            attribute: 'no-response-payoff',
            type: Number,
            reflect: true
          },
          state: {
            attribute: false,
            type: String,
            reflect: false
          },
          trialCount: {
            attribute: false,
            type: Number,
            reflect: false
          },
          trialTotal: {
            attribute: false,
            type: Number,
            reflect: false
          }
        };
      }
    }, {
      key: "styles",
      get: function get() {
        return [_get(_getPrototypeOf(DetectableResponse), "styles", this), r$2(_templateObject20$1 || (_templateObject20$1 = _taggedTemplateLiteral(["\n        :host {\n          display: inline-block;\n        }\n\n        /* Overall container */\n        .holder {\n          display: flex;\n\n          flex-direction: row;\n        }\n\n        /* Response buttons */\n        .responses {\n          display: flex;\n\n          flex-direction: column;\n\n          align-items: stretch;\n          justify-content: center;\n        }\n\n        .waiting[disabled] {\n          --decidables-button-background-color: var(---color-element-enabled);\n        }\n\n        .selected[disabled][name=\"present\"] {\n          --decidables-button-background-color: var(---color-present);\n        }\n\n        .selected[disabled][name=\"absent\"] {\n          --decidables-button-background-color: var(---color-absent);\n        }\n\n        /* Feedback messages */\n        .feedbacks {\n          display: flex;\n\n          flex-direction: column;\n\n          justify-content: center;\n        }\n\n        /* Trial feedback */\n        .trial {\n          text-align: center;\n        }\n\n        .trial .label {\n          font-weight: 600;\n        }\n\n        /* Outcome feedback */\n        .feedback {\n          display: flex;\n\n          flex-direction: column;\n\n          align-items: center;\n          justify-content: center;\n\n          width: 6rem;\n          height: 3.5rem;\n          padding: 0.375rem 0.75rem;\n          margin: 0.25rem;\n\n          text-align: center;\n\n          background-color: var(---color-element-background);\n          border: 1px solid var(---color-element-border);\n        }\n\n        .feedback.h {\n          background-color: var(---color-h-light);\n        }\n\n        .feedback.m {\n          background-color: var(---color-m-light);\n        }\n\n        .feedback.fa {\n          background-color: var(---color-fa-light);\n        }\n\n        .feedback.cr {\n          background-color: var(---color-cr-light);\n        }\n\n        .feedback.nr {\n          background-color: var(---color-nr-light);\n        }\n\n        .feedback.c {\n          background-color: var(---color-correct-light);\n        }\n\n        .feedback.e {\n          color: var(---color-text-inverse);\n\n          background-color: var(---color-error-light);\n        }\n\n        .feedback .outcome {\n          font-weight: 600;\n          line-height: 1.15;\n        }\n\n        :host([payoff=\"trial\"]) .feedback,\n        :host([payoff=\"total\"]) .feedback {\n          height: 4rem;\n        }\n\n        /* Payoff feedback */\n        .payoff {\n          text-align: center;\n        }\n\n        .payoff .label {\n          font-weight: 600;\n        }\n      "])))];
      }
    }]);

    return DetectableResponse;
  }(DetectableElement);
  customElements.define('detectable-response', DetectableResponse);

  var _templateObject$9, _templateObject2$8, _templateObject3$7, _templateObject4$7, _templateObject5$7, _templateObject6$7, _templateObject7$7, _templateObject8$5, _templateObject9$5, _templateObject10$5, _templateObject11$5, _templateObject12, _templateObject13, _templateObject14, _templateObject15, _templateObject16, _templateObject17, _templateObject18, _templateObject19, _templateObject20, _templateObject21, _templateObject22, _templateObject23, _templateObject24, _templateObject25, _templateObject26, _templateObject27, _templateObject28, _templateObject29, _templateObject30, _templateObject31, _templateObject32, _templateObject33, _templateObject34, _templateObject35, _templateObject36, _templateObject37, _templateObject38, _templateObject39, _templateObject40, _templateObject41, _templateObject42, _templateObject43, _templateObject44, _templateObject45, _templateObject46;
  /*
    DetectableTable element
    <detectable-table>

    Attributes:
    Hit; Miss; FalseAlarm; CorrectRejection;
  */

  var DetectableTable = /*#__PURE__*/function (_DetectableElement) {
    _inherits(DetectableTable, _DetectableElement);

    var _super = _createSuper(DetectableTable);

    function DetectableTable() {
      var _this;

      _classCallCheck(this, DetectableTable);

      _this = _super.call(this);
      _this.numeric = false;
      _this.summaries = ['stimulusRates', 'responseRates', 'accuracy'];
      _this.summary = new Set();
      _this.colors = ['none', 'accuracy', 'stimulus', 'response', 'outcome'];
      _this.color = 'outcome';
      _this.h = 40;
      _this.m = 60;
      _this.fa = 75;
      _this.cr = 25;

      _this.alignState();

      _this.payoff = false;
      _this.hPayoff = undefined; // Hit payoff

      _this.mPayoff = undefined; // Miss payoff

      _this.crPayoff = undefined; // Correct Rejection payoff

      _this.faPayoff = undefined; // False Alarm payoff

      return _this;
    }

    _createClass(DetectableTable, [{
      key: "alignState",
      value: function alignState() {
        this.hr = SDTMath.hM2Hr(this.h, this.m);
        this.far = SDTMath.faCr2Far(this.fa, this.cr);
        this.acc = SDTMath.hMFaCr2Acc(this.h, this.m, this.fa, this.cr);
        this.ppv = SDTMath.hFa2Ppv(this.h, this.fa);
        this.fomr = SDTMath.mCr2Fomr(this.m, this.cr);
      }
    }, {
      key: "sendEvent",
      value: function sendEvent() {
        this.dispatchEvent(new CustomEvent('detectable-table-change', {
          detail: {
            h: this.h,
            m: this.m,
            hr: this.hr,
            fa: this.fa,
            cr: this.cr,
            far: this.far,
            acc: this.acc,
            ppv: this.ppv,
            fomr: this.fomr
          },
          bubbles: true
        }));
      }
    }, {
      key: "hInput",
      value: function hInput(e) {
        this.h = parseInt(e.target.value, 10);
        this.alignState();
        this.sendEvent();
      }
    }, {
      key: "mInput",
      value: function mInput(e) {
        this.m = parseInt(e.target.value, 10);
        this.alignState();
        this.sendEvent();
      }
    }, {
      key: "faInput",
      value: function faInput(e) {
        this.fa = parseInt(e.target.value, 10);
        this.alignState();
        this.sendEvent();
      }
    }, {
      key: "crInput",
      value: function crInput(e) {
        this.cr = parseInt(e.target.value, 10);
        this.alignState();
        this.sendEvent();
      }
    }, {
      key: "hrInput",
      value: function hrInput(e) {
        var newhr = parseFloat(e.target.value);
        var present = this.h + this.m;
        this.h = Math.round(newhr * present);
        this.m = present - this.h;
        this.alignState();
        this.sendEvent();
      }
    }, {
      key: "farInput",
      value: function farInput(e) {
        var newfar = parseFloat(e.target.value);
        var absent = this.fa + this.cr;
        this.fa = Math.round(newfar * absent);
        this.cr = absent - this.fa;
        this.alignState();
        this.sendEvent();
      }
    }, {
      key: "accInput",
      value: function accInput(e) {
        var newacc = parseFloat(e.target.value);
        var present = this.h + this.m;
        var absent = this.fa + this.cr;
        var x = (this.hr + this.far - 1) / 2; // Rotate into ACC

        var newhr = x + newacc;
        var newfar = 1 + x - newacc;

        if (newfar > 1) {
          newfar = 1;
          newhr = newfar + 2 * newacc - 1;
        }

        if (newfar < 0) {
          newfar = 0;
          newhr = newfar + 2 * newacc - 1;
        }

        if (newhr > 1) {
          newhr = 1;
          newfar = newhr - 2 * newacc + 1;
        }

        if (newhr < 0) {
          newhr = 0;
          newfar = newhr - 2 * newacc + 1;
        }

        this.h = Math.round(newhr * present);
        this.m = present - this.h;
        this.fa = Math.round(newfar * absent);
        this.cr = absent - this.fa;
        this.alignState();
        this.sendEvent();
      }
    }, {
      key: "ppvInput",
      value: function ppvInput(e) {
        var newppv = parseFloat(e.target.value);
        var present = this.h + this.fa;
        this.h = Math.round(newppv * present);
        this.fa = present - this.h;
        this.alignState();
        this.sendEvent();
      }
    }, {
      key: "fomrInput",
      value: function fomrInput(e) {
        var newfomr = parseFloat(e.target.value);
        var present = this.m + this.cr;
        this.m = Math.round(newfomr * present);
        this.cr = present - this.m;
        this.alignState();
        this.sendEvent();
      }
    }, {
      key: "render",
      value: function render() {
        var payoffFormatter = new Intl.NumberFormat('en-US', {
          style: 'currency',
          currency: 'USD',
          minimumFractionDigits: 0,
          maximumFractionDigits: 0
        });
        this.alignState();
        var h;
        var m;
        var fa;
        var cr;
        var hr;
        var far;
        var acc;
        var ppv;
        var fomr;

        if (this.numeric) {
          h = $(_templateObject$9 || (_templateObject$9 = _taggedTemplateLiteral(["\n        <decidables-spinner ?disabled=", " min=\"0\" .value=\"", "\" @input=", ">\n          <span>Hits</span>\n          ", "\n        </decidables-spinner>\n      "])), !this.interactive, this.h, this.hInput.bind(this), this.payoff ? $(_templateObject2$8 || (_templateObject2$8 = _taggedTemplateLiteral(["<span class=\"payoff\">", "</span>"])), payoffFormatter.format(this.hPayoff)) : $(_templateObject3$7 || (_templateObject3$7 = _taggedTemplateLiteral([""]))));
          m = $(_templateObject4$7 || (_templateObject4$7 = _taggedTemplateLiteral(["\n        <decidables-spinner ?disabled=", " min=\"0\" .value=\"", "\" @input=", ">\n          <span>Misses</span>\n          ", "\n        </decidables-spinner>\n      "])), !this.interactive, this.m, this.mInput.bind(this), this.payoff ? $(_templateObject5$7 || (_templateObject5$7 = _taggedTemplateLiteral(["<span class=\"payoff\">", "</span>"])), payoffFormatter.format(this.mPayoff)) : $(_templateObject6$7 || (_templateObject6$7 = _taggedTemplateLiteral([""]))));
          fa = $(_templateObject7$7 || (_templateObject7$7 = _taggedTemplateLiteral(["\n        <decidables-spinner ?disabled=", " min=\"0\" .value=\"", "\" @input=", ">\n          <span>False Alarms</span>\n          ", "\n        </decidables-spinner>\n      "])), !this.interactive, this.fa, this.faInput.bind(this), this.payoff ? $(_templateObject8$5 || (_templateObject8$5 = _taggedTemplateLiteral(["<span class=\"payoff\">", "</span>"])), payoffFormatter.format(this.faPayoff)) : $(_templateObject9$5 || (_templateObject9$5 = _taggedTemplateLiteral([""]))));
          cr = $(_templateObject10$5 || (_templateObject10$5 = _taggedTemplateLiteral(["\n        <decidables-spinner ?disabled=", " min=\"0\" .value=\"", "\" @input=", ">\n          <span>Correct Rejections</span>\n          ", "\n        </decidables-spinner>\n      "])), !this.interactive, this.cr, this.crInput.bind(this), this.payoff ? $(_templateObject11$5 || (_templateObject11$5 = _taggedTemplateLiteral(["<span class=\"payoff\">", "</span>"])), payoffFormatter.format(this.crPayoff)) : $(_templateObject12 || (_templateObject12 = _taggedTemplateLiteral([""]))));
          hr = $(_templateObject13 || (_templateObject13 = _taggedTemplateLiteral(["\n        <decidables-spinner ?disabled=", " min=\"0\" max=\"1\" step=\".001\" .value=\"", "\" @input=", ">\n          <span>Hit Rate</span>\n        </decidables-spinner>\n      "])), !this.interactive, +this.hr.toFixed(3), this.hrInput.bind(this));
          far = $(_templateObject14 || (_templateObject14 = _taggedTemplateLiteral(["\n        <decidables-spinner ?disabled=", " min=\"0\" max=\"1\" step=\".001\" .value=\"", "\" @input=", ">\n          <span>False Alarm Rate</span>\n        </decidables-spinner>\n      "])), !this.interactive, +this.far.toFixed(3), this.farInput.bind(this));
          acc = $(_templateObject15 || (_templateObject15 = _taggedTemplateLiteral(["\n        <decidables-spinner ?disabled=", " min=\"0\" max=\"1\" step=\".001\" .value=\"", "\" @input=", ">\n          <span>Accuracy</span>\n        </decidables-spinner>\n      "])), !this.interactive, +this.acc.toFixed(3), this.accInput.bind(this));
          ppv = $(_templateObject16 || (_templateObject16 = _taggedTemplateLiteral(["\n        <decidables-spinner ?disabled=", " min=\"0\" max=\"1\" step=\".001\" .value=\"", "\" @input=", ">\n          <span>Positive Predictive Value</span>\n        </decidables-spinner>\n      "])), !this.interactive, +this.ppv.toFixed(3), this.ppvInput.bind(this));
          fomr = $(_templateObject17 || (_templateObject17 = _taggedTemplateLiteral(["\n        <decidables-spinner ?disabled=", " min=\"0\" max=\"1\" step=\".001\" .value=\"", "\" @input=", ">\n          <span>False Omission Rate</span>\n        </decidables-spinner>\n      "])), !this.interactive, +this.fomr.toFixed(3), this.fomrInput.bind(this));
        } else {
          h = $(_templateObject18 || (_templateObject18 = _taggedTemplateLiteral(["<span>Hits</span>\n        ", ""])), this.payoff ? $(_templateObject19 || (_templateObject19 = _taggedTemplateLiteral(["<span class=\"payoff\">", "</span>"])), payoffFormatter.format(this.hPayoff)) : $(_templateObject20 || (_templateObject20 = _taggedTemplateLiteral([""]))));
          m = $(_templateObject21 || (_templateObject21 = _taggedTemplateLiteral(["<span>Misses</span>\n        ", ""])), this.payoff ? $(_templateObject22 || (_templateObject22 = _taggedTemplateLiteral(["<span class=\"payoff\">", "</span>"])), payoffFormatter.format(this.mPayoff)) : $(_templateObject23 || (_templateObject23 = _taggedTemplateLiteral([""]))));
          fa = $(_templateObject24 || (_templateObject24 = _taggedTemplateLiteral(["<span>False Alarms</span>\n        ", ""])), this.payoff ? $(_templateObject25 || (_templateObject25 = _taggedTemplateLiteral(["<span class=\"payoff\">", "</span>"])), payoffFormatter.format(this.faPayoff)) : $(_templateObject26 || (_templateObject26 = _taggedTemplateLiteral([""]))));
          cr = $(_templateObject27 || (_templateObject27 = _taggedTemplateLiteral(["<span>Correct Rejections</span>\n        ", ""])), this.payoff ? $(_templateObject28 || (_templateObject28 = _taggedTemplateLiteral(["<span class=\"payoff\">", "</span>"])), payoffFormatter.format(this.crPayoff)) : $(_templateObject29 || (_templateObject29 = _taggedTemplateLiteral([""]))));
          hr = $(_templateObject30 || (_templateObject30 = _taggedTemplateLiteral(["<span>Hit Rate</span>"])));
          far = $(_templateObject31 || (_templateObject31 = _taggedTemplateLiteral(["<span>False Alarm Rate</span>"])));
          acc = $(_templateObject32 || (_templateObject32 = _taggedTemplateLiteral(["<span>Accuracy</span>"])));
          ppv = $(_templateObject33 || (_templateObject33 = _taggedTemplateLiteral(["<span>Positive Predictive Value</span>"])));
          fomr = $(_templateObject34 || (_templateObject34 = _taggedTemplateLiteral(["<span>False Omission Rate</span>"])));
        }

        return $(_templateObject35 || (_templateObject35 = _taggedTemplateLiteral(["\n      <table class=", ">\n        <thead>\n          <tr>\n            <th colspan=\"2\" rowspan=\"2\"></th>\n            <th class=\"th th-main\" colspan=\"2\" scope=\"col\">\n              Response\n            </th>\n          </tr>\n          <tr>\n            <th class=\"th th-sub\" scope=\"col\">\n              \"Present\"\n            </th>\n            <th class=\"th th-sub\" scope=\"col\">\n              \"Absent\"\n            </th>\n          </tr>\n        </thead>\n        <tbody>\n          <tr>\n            <th class=\"th th-main\" rowspan=\"2\" scope=\"row\">\n              Signal\n            </th>\n            <th class=\"th th-sub th-left\" scope=\"row\">\n              Present\n            </th>\n            <td class=\"td td-data h\">\n              ", "\n            </td>\n            <td class=\"td td-data m\">\n              ", "\n            </td>\n            ", "\n          </tr>\n          <tr>\n            <th class=\"th th-sub th-left\" scope=\"row\">\n              Absent\n            </th>\n            <td class=\"td td-data fa\">\n              ", "\n            </td>\n            <td class=\"td td-data cr\">\n              ", "\n            </td>\n            ", "\n          </tr>\n          ", "\n        </tbody>\n      </table>"])), this.numeric ? 'numeric' : '', h, m, this.summary.has('stimulusRates') ? $(_templateObject36 || (_templateObject36 = _taggedTemplateLiteral(["\n                <td class=\"td td-summary hr\">\n                  ", "\n                </td>"])), hr) : $(_templateObject37 || (_templateObject37 = _taggedTemplateLiteral([""]))), fa, cr, this.summary.has('stimulusRates') ? $(_templateObject38 || (_templateObject38 = _taggedTemplateLiteral(["\n                <td class=\"td td-summary far\">\n                  ", "\n                </td>"])), far) : $(_templateObject39 || (_templateObject39 = _taggedTemplateLiteral([""]))), this.summary.has('responseRates') || this.summary.has('accuracy') ? $(_templateObject40 || (_templateObject40 = _taggedTemplateLiteral(["\n              <tr>\n                <td colspan=\"2\"></td>\n                ", "\n                ", "\n              </tr>"])), this.summary.has('responseRates') ? $(_templateObject41 || (_templateObject41 = _taggedTemplateLiteral(["\n                    <td class=\"td td-summary ppv\">\n                      ", "\n                    </td>\n                    <td class=\"td td-summary fomr\">\n                      ", "\n                    </td>"])), ppv, fomr) : $(_templateObject42 || (_templateObject42 = _taggedTemplateLiteral(["\n                    <td colspan=\"2\"></td>"]))), this.summary.has('accuracy') ? $(_templateObject43 || (_templateObject43 = _taggedTemplateLiteral(["\n                    <td class=\"td td-summary acc\" rowspan=\"2\">\n                      ", "\n                    </td>"])), acc) : $(_templateObject44 || (_templateObject44 = _taggedTemplateLiteral([""])))) : $(_templateObject45 || (_templateObject45 = _taggedTemplateLiteral([""]))));
      }
    }], [{
      key: "properties",
      get: function get() {
        return {
          numeric: {
            attribute: 'numeric',
            type: Boolean,
            reflect: true
          },
          summary: {
            attribute: 'summary',
            converter: DecidablesConverterSet,
            reflect: true
          },
          color: {
            attribute: 'color',
            type: String,
            reflect: true
          },
          h: {
            attribute: 'hits',
            type: Number,
            reflect: true
          },
          m: {
            attribute: 'misses',
            type: Number,
            reflect: true
          },
          fa: {
            attribute: 'false-alarms',
            type: Number,
            reflect: true
          },
          cr: {
            attribute: 'correct-rejections',
            type: Number,
            reflect: true
          },
          payoff: {
            attribute: 'payoff',
            type: Boolean,
            reflect: true
          },
          hPayoff: {
            attribute: 'hit-payoff',
            type: Number,
            reflect: true
          },
          mPayoff: {
            attribute: 'miss-payoff',
            type: Number,
            reflect: true
          },
          faPayoff: {
            attribute: 'false-alarm-payoff',
            type: Number,
            reflect: true
          },
          crPayoff: {
            attribute: 'correct-rejection-payoff',
            type: Number,
            reflect: true
          },
          far: {
            attribute: false,
            type: Number,
            reflect: false
          },
          hr: {
            attribute: false,
            type: Number,
            reflect: false
          },
          acc: {
            attribute: false,
            type: Number,
            reflect: false
          },
          // positive predictive value (https://en.wikipedia.org/wiki/Receiver_operating_characteristic)
          ppv: {
            attribute: false,
            type: Number,
            reflect: false
          },
          // false omission rate (https://en.wikipedia.org/wiki/Receiver_operating_characteristic)
          // Using "fomr" to avoid keyword "for"
          fomr: {
            attribute: false,
            type: Number,
            reflect: false
          }
        };
      }
    }, {
      key: "styles",
      get: function get() {
        return [_get(_getPrototypeOf(DetectableTable), "styles", this), r$2(_templateObject46 || (_templateObject46 = _taggedTemplateLiteral(["\n        :host {\n          display: inline-block;\n        }\n\n        /* Overall element */\n        table {\n          text-align: center;\n\n          border-collapse: collapse;\n\n          border: 0;\n        }\n\n        /* Headers */\n        .th-main {\n          padding: 0;\n\n          font-weight: bold;\n        }\n\n        .th-sub {\n          padding: 0 0.25rem;\n\n          font-weight: 600;\n        }\n\n        .th-left {\n          padding-left: 0;\n\n          text-align: right;\n        }\n\n        /* Cells */\n        .td {\n          width: 10rem;\n\n          padding: 0.25rem 0.25rem 0.375rem;\n\n          transition: all var(---transition-duration) ease;\n        }\n\n        .numeric .td {\n          width: 7rem;\n        }\n\n        /* Labels */\n        .payoff {\n          font-weight: 600;\n          line-height: 0.75rem;\n        }\n\n        /* User interaction <input> */\n        .td-data decidables-spinner {\n          --decidables-spinner-input-width: 3.5rem;\n        }\n\n        .td-summary decidables-spinner {\n          --decidables-spinner-input-width: 4.5rem;\n        }\n\n        /* Color schemes & Table emphasis */\n\n        /* (Default) Outcome color scheme */\n        .h {\n          background: var(---color-h-light);\n          border-top: 2px solid var(---color-element-emphasis);\n          border-left: 2px solid var(---color-element-emphasis);\n        }\n\n        .m {\n          background: var(---color-m-light);\n          border-top: 2px solid var(---color-element-emphasis);\n          border-right: 2px solid var(---color-element-emphasis);\n        }\n\n        .fa {\n          background: var(---color-fa-light);\n          border-bottom: 2px solid var(---color-element-emphasis);\n          border-left: 2px solid var(---color-element-emphasis);\n        }\n\n        .cr {\n          background: var(---color-cr-light);\n          border-right: 2px solid var(---color-element-emphasis);\n          border-bottom: 2px solid var(---color-element-emphasis);\n        }\n\n        .hr {\n          background: var(---color-hr-light);\n        }\n\n        .far {\n          background: var(---color-far-light);\n        }\n\n        .acc {\n          background: var(---color-acc-light);\n        }\n\n        .ppv {\n          background: var(---color-present-light);\n        }\n\n        .fomr {\n          background: var(---color-absent-light);\n        }\n\n        /* Accuracy color scheme */\n        :host([color=\"accuracy\"]) .h,\n        :host([color=\"accuracy\"]) .cr {\n          background: var(---color-correct-light);\n        }\n\n        :host([color=\"accuracy\"]) .m,\n        :host([color=\"accuracy\"]) .fa {\n          color: var(---color-text-inverse);\n\n          background: var(---color-error-light);\n        }\n\n        :host([color=\"accuracy\"]) .hr,\n        :host([color=\"accuracy\"]) .far,\n        :host([color=\"accuracy\"]) .ppv,\n        :host([color=\"accuracy\"]) .fomr {\n          background: var(---color-element-background);\n        }\n\n        /* Stimulus color scheme */\n        :host([color=\"stimulus\"]) .cr,\n        :host([color=\"stimulus\"]) .fa {\n          background: var(---color-far-light);\n        }\n\n        :host([color=\"stimulus\"]) .m,\n        :host([color=\"stimulus\"]) .h {\n          background: var(---color-hr-light);\n        }\n\n        :host([color=\"stimulus\"]) .ppv,\n        :host([color=\"stimulus\"]) .fomr,\n        :host([color=\"stimulus\"]) .acc {\n          background: var(---color-element-background);\n        }\n\n        /* Response color scheme */\n        :host([color=\"response\"]) .cr,\n        :host([color=\"response\"]) .m {\n          background: var(---color-absent-light);\n        }\n\n        :host([color=\"response\"]) .fa,\n        :host([color=\"response\"]) .h {\n          background: var(---color-present-light);\n        }\n\n        :host([color=\"response\"]) .hr,\n        :host([color=\"response\"]) .far,\n        :host([color=\"response\"]) .acc {\n          background: var(---color-element-background);\n        }\n\n        /* No color scheme */\n        :host([color=\"none\"]) .cr,\n        :host([color=\"none\"]) .fa,\n        :host([color=\"none\"]) .m,\n        :host([color=\"none\"]) .h,\n        :host([color=\"none\"]) .hr,\n        :host([color=\"none\"]) .far,\n        :host([color=\"none\"]) .ppv,\n        :host([color=\"none\"]) .fomr,\n        :host([color=\"none\"]) .acc {\n          background: var(---color-element-background);\n        }\n      "])))];
      }
    }]);

    return DetectableTable;
  }(DetectableElement);
  customElements.define('detectable-table', DetectableTable);

  var _templateObject$8;
  /*
    SDTEquation Base Class - Not intended for instantiation!
    <sdt-equation>
  */

  var SDTEquation = /*#__PURE__*/function (_DetectableElement) {
    _inherits(SDTEquation, _DetectableElement);

    var _super = _createSuper(SDTEquation);

    function SDTEquation() {
      var _this;

      _classCallCheck(this, SDTEquation);

      _this = _super.call(this);
      _this.numeric = false;
      return _this;
    }

    _createClass(SDTEquation, null, [{
      key: "properties",
      get: function get() {
        return {
          numeric: {
            attribute: 'numeric',
            type: Boolean,
            reflect: true
          }
        };
      }
    }, {
      key: "styles",
      get: function get() {
        return [_get(_getPrototypeOf(SDTEquation), "styles", this), r$2(_templateObject$8 || (_templateObject$8 = _taggedTemplateLiteral(["\n        :host {\n          display: block;\n\n          margin: 1rem;\n        }\n\n        /* Containing <div> */\n        .holder {\n          display: flex;\n\n          flex-direction: row;\n\n          justify-content: left;\n        }\n\n        /* Overall <table> */\n        .equation {\n          text-align: center;\n\n          border-collapse: collapse;\n\n          border: 0;\n        }\n\n        /* Modifies <td> */\n        .underline {\n          border-bottom: 1px solid var(---color-text);\n        }\n\n        /* Basic <span> and <var> w/modifiers */\n        span,\n        var {\n          padding: 0 0.25rem;\n\n          font-style: normal;\n        }\n\n        .tight {\n          padding: 0;\n        }\n\n        .paren {\n          font-size: 150%;\n        }\n\n        .bracket {\n          font-size: 175%;\n        }\n\n        .exp {\n          font-size: 0.75rem;\n        }\n\n        /* Input wrapping <label> */\n        decidables-spinner {\n          --decidables-spinner-input-width: 4rem;\n\n          display: inline-block;\n\n          padding: 0.125rem 0.375rem 0.375rem;\n\n          vertical-align: middle;\n        }\n\n        .bottom {\n          vertical-align: bottom;\n        }\n\n        /* Color scheme */\n        .h {\n          background: var(---color-h-light);\n        }\n\n        .m {\n          background: var(---color-m-light);\n        }\n\n        .hr {\n          background: var(---color-hr-light);\n        }\n\n        .fa {\n          background: var(---color-fa-light);\n        }\n\n        .acc {\n          background: var(---color-acc-light);\n        }\n\n        .cr {\n          background: var(---color-cr-light);\n        }\n\n        .far {\n          background: var(---color-far-light);\n        }\n\n        .d {\n          background: var(---color-d-light);\n        }\n\n        .c {\n          background: var(---color-c-light);\n        }\n\n        .s {\n          background: var(---color-s-light);\n        }\n      "])))];
      }
    }]);

    return SDTEquation;
  }(DetectableElement);

  var _templateObject$7, _templateObject2$7, _templateObject3$6, _templateObject4$6, _templateObject5$6, _templateObject6$6, _templateObject7$6, _templateObject8$4, _templateObject9$4, _templateObject10$4, _templateObject11$4;
  /*
    SDTEquationDC2Far element
    <sdt-equation-dc2far>

    Attributes:
    d'; c; False Alarm Rate;
  */

  var SDTEquationDC2Far = /*#__PURE__*/function (_SDTEquation) {
    _inherits(SDTEquationDC2Far, _SDTEquation);

    var _super = _createSuper(SDTEquationDC2Far);

    function SDTEquationDC2Far() {
      var _this;

      _classCallCheck(this, SDTEquationDC2Far);

      _this = _super.call(this);
      _this.unequal = false;
      _this.d = 0;
      _this.c = 0;
      _this.s = 1;

      _this.alignState();

      return _this;
    }

    _createClass(SDTEquationDC2Far, [{
      key: "alignState",
      value: function alignState() {
        this.far = SDTMath.dC2Far(this.d, this.c, this.s);
      }
    }, {
      key: "sendEvent",
      value: function sendEvent() {
        this.dispatchEvent(new CustomEvent('sdt-equation-dc2far-change', {
          detail: {
            d: this.d,
            c: this.c,
            s: this.s,
            far: this.far
          },
          bubbles: true
        }));
      }
    }, {
      key: "dInput",
      value: function dInput(event) {
        this.d = parseFloat(event.target.value);
        this.alignState();
        this.sendEvent();
      }
    }, {
      key: "cInput",
      value: function cInput(event) {
        this.c = parseFloat(event.target.value);
        this.alignState();
        this.sendEvent();
      }
    }, {
      key: "sInput",
      value: function sInput(event) {
        this.s = parseFloat(event.target.value);
        this.alignState();
        this.sendEvent();
      }
    }, {
      key: "render",
      value: function render() {
        this.alignState();
        var d;
        var c;
        var s;
        var far;

        if (this.numeric) {
          d = $(_templateObject$7 || (_templateObject$7 = _taggedTemplateLiteral(["\n        <decidables-spinner class=\"d bottom\" ?disabled=", " step=\".001\" .value=\"", "\" @input=", ">\n          <var class=\"math-var\">d\u2032</var>\n        </decidables-spinner>\n      "])), !this.interactive, this.d, this.dInput.bind(this));
          c = $(_templateObject2$7 || (_templateObject2$7 = _taggedTemplateLiteral(["\n        <decidables-spinner class=\"c bottom\" ?disabled=", " step=\".001\" .value=\"", "\" @input=", ">\n          <var class=\"math-var\">c</var>\n        </decidables-spinner>\n      "])), !this.interactive, this.c, this.cInput.bind(this));
          s = $(_templateObject3$6 || (_templateObject3$6 = _taggedTemplateLiteral(["\n        <decidables-spinner class=\"s bottom\" ?disabled=", " min=\"0\" step=\".001\" .value=\"", "\" @input=", ">\n          <var class=\"math-var\">\u03C3</var>\n        </decidables-spinner>\n      "])), !this.interactive, this.s, this.sInput.bind(this));
          far = $(_templateObject4$6 || (_templateObject4$6 = _taggedTemplateLiteral(["\n        <decidables-spinner class=\"far bottom\" disabled min=\"0\" max=\"1\" step=\".001\" .value=\"", "\">\n          <var>False Alarm Rate</var>\n        </decidables-spinner>\n      "])), +this.far.toFixed(3));
        } else {
          d = $(_templateObject5$6 || (_templateObject5$6 = _taggedTemplateLiteral(["<var class=\"math-var d\">d\u2032</var>"])));
          c = $(_templateObject6$6 || (_templateObject6$6 = _taggedTemplateLiteral(["<var class=\"math-var c\">c</var>"])));
          s = $(_templateObject7$6 || (_templateObject7$6 = _taggedTemplateLiteral(["<var class=\"math-var s\">\u03C3</var>"])));
          far = $(_templateObject8$4 || (_templateObject8$4 = _taggedTemplateLiteral(["<var class=\"far\">False Alarm Rate</var>"])));
        }

        var equation;

        if (this.unequal) {
          equation = $(_templateObject9$4 || (_templateObject9$4 = _taggedTemplateLiteral(["\n        <tr>\n          <td rowspan=\"2\">\n            ", "<span class=\"equals\">=</span><var class=\"math-greek phi tight\">\u03A6</var><span class=\"paren tight\">(</span><span class=\"bracket tight\">[</span>\n          </td>\n          <td class=\"underline bottom\">\n            <span>1</span><span class=\"plus tight\">+</span><span>", "<sup class=\"exp\">2</sup></span>\n          </td>\n          <td rowspan=\"2\">\n            <span class=\"bracket tight\">]<sup class=\"exp\">\xBD</sup></span><span class=\"bracket tight\">[</span>\n          </td>\n          <td class=\"underline\">\n            <span class=\"minus tight\">\u2212</span>", "\n          </td>\n          <td rowspan=\"2\">\n            <span class=\"minus\">\u2212</span>", "<span class=\"bracket tight\">]</span><span class=\"paren tight\">)</span>\n          </td>\n        </tr>\n        <tr>\n          <td>\n            <span>2</span>\n          </td>\n          <td>\n            <span><span>1</span><span class=\"plus\">+</span>", "</span>\n          </td>\n        </tr>"])), far, s, d, c, s);
        } else {
          equation = $(_templateObject10$4 || (_templateObject10$4 = _taggedTemplateLiteral(["\n        <tr>\n          <td rowspan=\"2\">\n            ", "<span class=\"equals\">=</span><var class=\"math-greek phi tight\">\u03A6</var><span class=\"paren tight\">(</span><span class=\"minus tight\">\u2212</span>\n          </td>\n          <td class=\"underline\">\n            ", "\n          </td>\n          <td rowspan=\"2\">\n            <span class=\"minus\">\u2212</span>", "<span class=\"paren tight\">)</span>\n          </td>\n        </tr>\n        <tr>\n          <td>\n            <span>2</span>\n          </td>\n        </tr>"])), far, d, c);
        }

        return $(_templateObject11$4 || (_templateObject11$4 = _taggedTemplateLiteral(["\n      <div class=\"holder\">\n        <table class=\"equation\">\n          <tbody>\n            ", "\n          </tbody>\n        </table>\n      </div>"])), equation);
      }
    }], [{
      key: "properties",
      get: function get() {
        return {
          unequal: {
            attribute: 'unequal',
            type: Boolean,
            reflect: true
          },
          d: {
            attribute: 'd',
            type: Number,
            reflect: true
          },
          c: {
            attribute: 'c',
            type: Number,
            reflect: true
          },
          s: {
            attribute: 's',
            type: Number,
            reflect: true
          },
          far: {
            attribute: false,
            type: Number,
            reflect: false
          }
        };
      }
    }]);

    return SDTEquationDC2Far;
  }(SDTEquation);
  customElements.define('sdt-equation-dc2far', SDTEquationDC2Far);

  var _templateObject$6, _templateObject2$6, _templateObject3$5, _templateObject4$5, _templateObject5$5, _templateObject6$5, _templateObject7$5, _templateObject8$3, _templateObject9$3, _templateObject10$3, _templateObject11$3;
  /*
    SDTEquationDC2Hr element
    <sdt-equation-dc2hr>

    Attributes:
    d'; c; Hit Rate;
  */

  var SDTEquationDC2Hr = /*#__PURE__*/function (_SDTEquation) {
    _inherits(SDTEquationDC2Hr, _SDTEquation);

    var _super = _createSuper(SDTEquationDC2Hr);

    function SDTEquationDC2Hr() {
      var _this;

      _classCallCheck(this, SDTEquationDC2Hr);

      _this = _super.call(this);
      _this.unequal = false;
      _this.d = 0;
      _this.c = 0;
      _this.s = 1;

      _this.alignState();

      return _this;
    }

    _createClass(SDTEquationDC2Hr, [{
      key: "alignState",
      value: function alignState() {
        this.hr = SDTMath.dC2Hr(this.d, this.c, this.s);
      }
    }, {
      key: "sendEvent",
      value: function sendEvent() {
        this.dispatchEvent(new CustomEvent('sdt-equation-dc2hr-change', {
          detail: {
            d: this.d,
            c: this.c,
            s: this.s,
            hr: this.hr
          },
          bubbles: true
        }));
      }
    }, {
      key: "dInput",
      value: function dInput(event) {
        this.d = parseFloat(event.target.value);
        this.alignState();
        this.sendEvent();
      }
    }, {
      key: "cInput",
      value: function cInput(event) {
        this.c = parseFloat(event.target.value);
        this.alignState();
        this.sendEvent();
      }
    }, {
      key: "sInput",
      value: function sInput(event) {
        this.s = parseFloat(event.target.value);
        this.alignState();
        this.sendEvent();
      }
    }, {
      key: "render",
      value: function render() {
        this.alignState();
        var d;
        var c;
        var s;
        var hr;

        if (this.numeric) {
          d = $(_templateObject$6 || (_templateObject$6 = _taggedTemplateLiteral(["\n        <decidables-spinner class=\"d bottom\" ?disabled=", " step=\".001\" .value=\"", "\" @input=", ">\n          <var class=\"math-var\">d\u2032</var>\n        </decidables-spinner>\n      "])), !this.interactive, this.d, this.dInput.bind(this));
          c = $(_templateObject2$6 || (_templateObject2$6 = _taggedTemplateLiteral(["\n        <decidables-spinner class=\"c bottom\" ?disabled=", " step=\".001\" .value=\"", "\" @input=", ">\n          <var class=\"math-var\">c</var>\n        </decidables-spinner>\n      "])), !this.interactive, this.c, this.cInput.bind(this));
          s = $(_templateObject3$5 || (_templateObject3$5 = _taggedTemplateLiteral(["\n        <decidables-spinner class=\"s bottom\" ?disabled=", " min=\"0\" step=\".001\" .value=\"", "\" @input=", ">\n          <var class=\"math-var\">\u03C3</var>\n        </decidables-spinner>\n      "])), !this.interactive, this.s, this.sInput.bind(this));
          hr = $(_templateObject4$5 || (_templateObject4$5 = _taggedTemplateLiteral(["\n        <decidables-spinner class=\"hr bottom\" disabled min=\"0\" max=\"1\" step=\".001\" .value=\"", "\">\n          <var>Hit Rate</var>\n        </decidables-spinner>\n      "])), +this.hr.toFixed(3));
        } else {
          d = $(_templateObject5$5 || (_templateObject5$5 = _taggedTemplateLiteral(["<var class=\"math-var d\">d\u2032</var>"])));
          c = $(_templateObject6$5 || (_templateObject6$5 = _taggedTemplateLiteral(["<var class=\"math-var c\">c</var>"])));
          s = $(_templateObject7$5 || (_templateObject7$5 = _taggedTemplateLiteral(["<var class=\"math-var s\">\u03C3</var>"])));
          hr = $(_templateObject8$3 || (_templateObject8$3 = _taggedTemplateLiteral(["<var class=\"hr\">Hit Rate</var>"])));
        }

        var equation;

        if (this.unequal) {
          equation = $(_templateObject9$3 || (_templateObject9$3 = _taggedTemplateLiteral(["\n        <tr>\n          <td rowspan=\"2\">\n            ", "<span class=\"equals\">=</span><var class=\"math-greek phi tight\">\u03A6</var><span class=\"paren tight\">(</span><span class=\"bracket tight\">[</span>\n          </td>\n          <td class=\"underline bottom\">\n            <span>1</span><span class=\"plus tight\">+</span><span>", "<sup class=\"exp\">2</sup></span>\n          </td>\n          <td rowspan=\"2\">\n            <span class=\"bracket tight\">]<sup class=\"exp\">\xBD</sup></span><span class=\"bracket tight\">[</span>\n          </td>\n          <td class=\"underline\">\n            ", "\n          </td>\n          <td rowspan=\"2\">\n            <span class=\"minus\">\u2212</span>\n          </td>\n          <td class=\"underline\">\n            ", "\n          </td>\n          <td rowspan=\"2\">\n            <span class=\"bracket tight\">]</span><span class=\"paren tight\">)</span>\n          </td>\n        </tr>\n        <tr>\n          <td>\n            <span>2</span>\n          </td>\n          <td>\n            <span><span>1</span><span class=\"plus\">+</span>", "</span>\n          </td>\n          <td>\n            ", "\n          </td>\n        </tr>"])), hr, s, d, c, s, s);
        } else {
          equation = $(_templateObject10$3 || (_templateObject10$3 = _taggedTemplateLiteral(["\n        <tr>\n          <td rowspan=\"2\">\n            ", "<span class=\"equals\">=</span><var class=\"math-greek phi tight\">\u03A6</var><span class=\"paren tight\">(</span>\n          </td>\n          <td class=\"underline\">\n            ", "\n          </td>\n          <td rowspan=\"2\">\n            <span class=\"minus\">\u2212</span>", "<span class=\"paren tight\">)</span>\n          </td>\n        </tr>\n        <tr>\n          <td>\n            <span>2</span>\n          </td>\n        </tr>"])), hr, d, c);
        }

        return $(_templateObject11$3 || (_templateObject11$3 = _taggedTemplateLiteral(["\n      <div class=\"holder\">\n        <table class=\"equation\">\n          <tbody>\n            ", "\n          </tbody>\n        </table>\n      </div>"])), equation);
      }
    }], [{
      key: "properties",
      get: function get() {
        return {
          unequal: {
            attribute: 'unequal',
            type: Boolean,
            reflect: true
          },
          d: {
            attribute: 'd',
            type: Number,
            reflect: true
          },
          c: {
            attribute: 'c',
            type: Number,
            reflect: true
          },
          s: {
            attribute: 's',
            type: Number,
            reflect: true
          },
          hr: {
            attribute: false,
            type: Number,
            reflect: false
          }
        };
      }
    }]);

    return SDTEquationDC2Hr;
  }(SDTEquation);
  customElements.define('sdt-equation-dc2hr', SDTEquationDC2Hr);

  var _templateObject$5, _templateObject2$5, _templateObject3$4, _templateObject4$4, _templateObject5$4, _templateObject6$4, _templateObject7$4;
  /*
    SDTEquationFaCr2Far element
    <sdt-equation-facr2far>

    Attributes:
    False Alarms; Correct Rejections; False Alarm Rate;
  */

  var SDTEquationFaCr2Far = /*#__PURE__*/function (_SDTEquation) {
    _inherits(SDTEquationFaCr2Far, _SDTEquation);

    var _super = _createSuper(SDTEquationFaCr2Far);

    function SDTEquationFaCr2Far() {
      var _this;

      _classCallCheck(this, SDTEquationFaCr2Far);

      _this = _super.call(this);
      _this.fa = 0;
      _this.cr = 0;

      _this.alignState();

      return _this;
    }

    _createClass(SDTEquationFaCr2Far, [{
      key: "alignState",
      value: function alignState() {
        this.far = SDTMath.faCr2Far(this.fa, this.cr);
      }
    }, {
      key: "sendEvent",
      value: function sendEvent() {
        this.dispatchEvent(new CustomEvent('sdt-equation-facr2far-change', {
          detail: {
            fa: this.fa,
            cr: this.cr,
            far: this.far
          },
          bubbles: true
        }));
      }
    }, {
      key: "faInput",
      value: function faInput(event) {
        this.fa = parseInt(event.target.value, 10);
        this.alignState();
        this.sendEvent();
      }
    }, {
      key: "crInput",
      value: function crInput(event) {
        this.cr = parseInt(event.target.value, 10);
        this.alignState();
        this.sendEvent();
      }
    }, {
      key: "render",
      value: function render() {
        this.alignState();
        var fa;
        var cr;
        var far;

        if (this.numeric) {
          fa = $(_templateObject$5 || (_templateObject$5 = _taggedTemplateLiteral(["\n        <decidables-spinner class=\"fa\" ?disabled=", " min=\"0\" .value=\"", "\" @input=", ">\n          <var>False Alarms</var>\n        </decidables-spinner>\n      "])), !this.interactive, this.fa, this.faInput.bind(this));
          cr = $(_templateObject2$5 || (_templateObject2$5 = _taggedTemplateLiteral(["\n        <decidables-spinner class=\"cr\" ?disabled=", " min=\"0\" .value=\"", "\" @input=", ">\n          <var>Correct Rejections</var>\n        </decidables-spinner>\n      "])), !this.interactive, this.cr, this.crInput.bind(this));
          far = $(_templateObject3$4 || (_templateObject3$4 = _taggedTemplateLiteral(["\n        <decidables-spinner class=\"far\" disabled min=\"0\" max=\"1\" step=\".001\" .value=\"", "\">\n          <var>False Alarm Rate</var>\n        </decidables-spinner>\n      "])), +this.far.toFixed(3));
        } else {
          fa = $(_templateObject4$4 || (_templateObject4$4 = _taggedTemplateLiteral(["<var class=\"fa\">False Alarms</var>"])));
          cr = $(_templateObject5$4 || (_templateObject5$4 = _taggedTemplateLiteral(["<var class=\"cr\">Correct Rejections</var>"])));
          far = $(_templateObject6$4 || (_templateObject6$4 = _taggedTemplateLiteral(["<var class=\"far\">False Alarm Rate</var>"])));
        }

        return $(_templateObject7$4 || (_templateObject7$4 = _taggedTemplateLiteral(["\n      <div class=\"holder\">\n        <table class=\"equation\">\n          <tbody>\n            <tr>\n              <td rowspan=\"2\">\n                ", "<span class=\"equals\">=</span>\n              </td>\n              <td class=\"underline\">\n                ", "\n              </td>\n            </tr>\n            <tr>\n              <td>\n                ", "<span class=\"plus\">+</span>", "\n              </td>\n            </tr>\n          </tbody>\n        </table>\n      </div>"])), far, fa, fa, cr);
      }
    }], [{
      key: "properties",
      get: function get() {
        return {
          fa: {
            attribute: 'false-alarms',
            type: Number,
            reflect: true
          },
          cr: {
            attribute: 'correct-rejections',
            type: Number,
            reflect: true
          },
          far: {
            attribute: false,
            type: Number,
            reflect: false
          }
        };
      }
    }]);

    return SDTEquationFaCr2Far;
  }(SDTEquation);
  customElements.define('sdt-equation-facr2far', SDTEquationFaCr2Far);

  var _templateObject$4, _templateObject2$4, _templateObject3$3, _templateObject4$3, _templateObject5$3, _templateObject6$3, _templateObject7$3;
  /*
    SDTEquationHM2Hr element
    <sdt-equation-hm2hr>

    Attributes:
    Hits; Misses; Hit Rate;
  */

  var SDTEquationHM2Hr = /*#__PURE__*/function (_SDTEquation) {
    _inherits(SDTEquationHM2Hr, _SDTEquation);

    var _super = _createSuper(SDTEquationHM2Hr);

    function SDTEquationHM2Hr() {
      var _this;

      _classCallCheck(this, SDTEquationHM2Hr);

      _this = _super.call(this);
      _this.h = 0;
      _this.m = 0;

      _this.alignState();

      return _this;
    }

    _createClass(SDTEquationHM2Hr, [{
      key: "alignState",
      value: function alignState() {
        this.hr = SDTMath.hM2Hr(this.h, this.m);
      }
    }, {
      key: "sendEvent",
      value: function sendEvent() {
        this.dispatchEvent(new CustomEvent('sdt-equation-hm2hr-change', {
          detail: {
            h: this.h,
            m: this.m,
            hr: this.hr
          },
          bubbles: true
        }));
      }
    }, {
      key: "hInput",
      value: function hInput(event) {
        this.h = parseInt(event.target.value, 10);
        this.alignState();
        this.sendEvent();
      }
    }, {
      key: "mInput",
      value: function mInput(event) {
        this.m = parseInt(event.target.value, 10);
        this.alignState();
        this.sendEvent();
      }
    }, {
      key: "render",
      value: function render() {
        this.alignState();
        var h;
        var m;
        var hr;

        if (this.numeric) {
          h = $(_templateObject$4 || (_templateObject$4 = _taggedTemplateLiteral(["\n        <decidables-spinner class=\"h\" ?disabled=", " min=\"0\" .value=\"", "\" @input=", ">\n          <var>Hits</var>\n        </decidables-spinner>\n      "])), !this.interactive, this.h, this.hInput.bind(this));
          m = $(_templateObject2$4 || (_templateObject2$4 = _taggedTemplateLiteral(["\n        <decidables-spinner class=\"m\" ?disabled=", " min=\"0\" .value=\"", "\" @input=", ">\n          <var>Misses</var>\n        </decidables-spinner>\n      "])), !this.interactive, this.m, this.mInput.bind(this));
          hr = $(_templateObject3$3 || (_templateObject3$3 = _taggedTemplateLiteral(["\n        <decidables-spinner class=\"hr\" disabled min=\"0\" max=\"1\" step=\".001\" .value=\"", "\">\n          <var>Hit Rate</var>\n        </decidables-spinner>\n      "])), +this.hr.toFixed(3));
        } else {
          h = $(_templateObject4$3 || (_templateObject4$3 = _taggedTemplateLiteral(["<var class=\"h\">Hits</var>"])));
          m = $(_templateObject5$3 || (_templateObject5$3 = _taggedTemplateLiteral(["<var class=\"m\">Misses</var>"])));
          hr = $(_templateObject6$3 || (_templateObject6$3 = _taggedTemplateLiteral(["<var class=\"hr\">Hit Rate</var>"])));
        }

        return $(_templateObject7$3 || (_templateObject7$3 = _taggedTemplateLiteral(["\n      <div class=\"holder\">\n        <table class=\"equation\">\n          <tbody>\n            <tr>\n              <td rowspan=\"2\">\n                ", "<span class=\"equals\">=</span>\n              </td>\n              <td class=\"underline\">\n                ", "\n              </td>\n            </tr>\n            <tr>\n              <td>\n                ", "<span class=\"plus\">+</span>", "\n              </td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    "])), hr, h, h, m);
      }
    }], [{
      key: "properties",
      get: function get() {
        return {
          h: {
            attribute: 'hits',
            type: Number,
            reflect: true
          },
          m: {
            attribute: 'misses',
            type: Number,
            reflect: true
          },
          hr: {
            attribute: false,
            type: Number,
            reflect: false
          }
        };
      }
    }]);

    return SDTEquationHM2Hr;
  }(SDTEquation);
  customElements.define('sdt-equation-hm2hr', SDTEquationHM2Hr);

  var _templateObject$3, _templateObject2$3, _templateObject3$2, _templateObject4$2, _templateObject5$2, _templateObject6$2, _templateObject7$2, _templateObject8$2, _templateObject9$2, _templateObject10$2, _templateObject11$2;
  /*
    SDTEquationHMFaCr2Acc element
    <sdt-equation-hmfacr2acc>

    Attributes:
    Hits; Misses; False Alarms; Correct Rejections; Accuracy;
  */

  var SDTEquationHMFaCr2Acc = /*#__PURE__*/function (_SDTEquation) {
    _inherits(SDTEquationHMFaCr2Acc, _SDTEquation);

    var _super = _createSuper(SDTEquationHMFaCr2Acc);

    function SDTEquationHMFaCr2Acc() {
      var _this;

      _classCallCheck(this, SDTEquationHMFaCr2Acc);

      _this = _super.call(this);
      _this.h = 0;
      _this.m = 0;
      _this.fa = 0;
      _this.cr = 0;

      _this.alignState();

      return _this;
    }

    _createClass(SDTEquationHMFaCr2Acc, [{
      key: "alignState",
      value: function alignState() {
        this.acc = SDTMath.hMFaCr2Acc(this.h, this.m, this.fa, this.cr);
      }
    }, {
      key: "sendEvent",
      value: function sendEvent() {
        this.dispatchEvent(new CustomEvent('sdt-equation-hmfacr2acc-change', {
          detail: {
            h: this.h,
            m: this.m,
            fa: this.fa,
            cr: this.cr,
            acc: this.acc
          },
          bubbles: true
        }));
      }
    }, {
      key: "hInput",
      value: function hInput(event) {
        this.h = parseInt(event.target.value, 10);
        this.alignState();
        this.sendEvent();
      }
    }, {
      key: "mInput",
      value: function mInput(event) {
        this.m = parseInt(event.target.value, 10);
        this.alignState();
        this.sendEvent();
      }
    }, {
      key: "faInput",
      value: function faInput(event) {
        this.fa = parseInt(event.target.value, 10);
        this.alignState();
        this.sendEvent();
      }
    }, {
      key: "crInput",
      value: function crInput(event) {
        this.cr = parseInt(event.target.value, 10);
        this.alignState();
        this.sendEvent();
      }
    }, {
      key: "render",
      value: function render() {
        this.alignState();
        var h;
        var m;
        var fa;
        var cr;
        var acc;

        if (this.numeric) {
          h = $(_templateObject$3 || (_templateObject$3 = _taggedTemplateLiteral(["\n        <decidables-spinner class=\"h\" ?disabled=", " min=\"0\" .value=\"", "\" @input=", ">\n          <var>Hits</var>\n        </decidables-spinner>\n      "])), !this.interactive, this.h, this.hInput.bind(this));
          m = $(_templateObject2$3 || (_templateObject2$3 = _taggedTemplateLiteral(["\n        <decidables-spinner class=\"m\" ?disabled=", " min=\"0\" .value=\"", "\" @input=", ">\n          <var>Misses</var>\n        </decidables-spinner>\n      "])), !this.interactive, this.m, this.mInput.bind(this));
          fa = $(_templateObject3$2 || (_templateObject3$2 = _taggedTemplateLiteral(["\n        <decidables-spinner class=\"fa\" ?disabled=", " min=\"0\" .value=\"", "\" @input=", ">\n          <var>False Alarms</var>\n        </decidables-spinner>\n      "])), !this.interactive, this.fa, this.faInput.bind(this));
          cr = $(_templateObject4$2 || (_templateObject4$2 = _taggedTemplateLiteral(["\n        <decidables-spinner class=\"cr\" ?disabled=", " min=\"0\" .value=\"", "\" @input=", ">\n          <var>Correct Rejections</var>\n        </decidables-spinner>\n      "])), !this.interactive, this.cr, this.crInput.bind(this));
          acc = $(_templateObject5$2 || (_templateObject5$2 = _taggedTemplateLiteral(["\n        <decidables-spinner class=\"acc\" disabled min=\"0\" max=\"1\" step=\".001\" .value=\"", "\">\n          <var>Accuracy</var>\n        </decidables-spinner>\n      "])), +this.acc.toFixed(3));
        } else {
          h = $(_templateObject6$2 || (_templateObject6$2 = _taggedTemplateLiteral(["<var class=\"h\">Hits</var>"])));
          m = $(_templateObject7$2 || (_templateObject7$2 = _taggedTemplateLiteral(["<var class=\"m\">Misses</var>"])));
          fa = $(_templateObject8$2 || (_templateObject8$2 = _taggedTemplateLiteral(["<var class=\"fa\">False Alarms</var>"])));
          cr = $(_templateObject9$2 || (_templateObject9$2 = _taggedTemplateLiteral(["<var class=\"cr\">Correct Rejections</var>"])));
          acc = $(_templateObject10$2 || (_templateObject10$2 = _taggedTemplateLiteral(["<var class=\"acc\">Accuracy</var>"])));
        }

        return $(_templateObject11$2 || (_templateObject11$2 = _taggedTemplateLiteral(["\n      <div class=\"holder\">\n        <table class=\"equation\">\n          <tbody>\n            <tr>\n              <td rowspan=\"2\">\n                ", "<span class=\"equals\">=</span>\n              </td>\n              <td class=\"underline\">\n                ", "<span class=\"plus\">+</span>", "\n              </td>\n            </tr>\n            <tr>\n              <td>\n                ", "<span class=\"plus\">+</span>", "<span class=\"plus\">+</span>", "<span class=\"plus\">+</span>", "\n              </td>\n            </tr>\n          </tbody>\n        </table>\n      </div>"])), acc, h, cr, h, m, fa, cr);
      }
    }], [{
      key: "properties",
      get: function get() {
        return {
          h: {
            attribute: 'hits',
            type: Number,
            reflect: true
          },
          m: {
            attribute: 'misses',
            type: Number,
            reflect: true
          },
          fa: {
            attribute: 'false-alarms',
            type: Number,
            reflect: true
          },
          cr: {
            attribute: 'correct-rejections',
            type: Number,
            reflect: true
          },
          acc: {
            attribute: false,
            type: Number,
            reflect: false
          }
        };
      }
    }]);

    return SDTEquationHMFaCr2Acc;
  }(SDTEquation);
  customElements.define('sdt-equation-hmfacr2acc', SDTEquationHMFaCr2Acc);

  var _templateObject$2, _templateObject2$2, _templateObject3$1, _templateObject4$1, _templateObject5$1, _templateObject6$1, _templateObject7$1, _templateObject8$1, _templateObject9$1, _templateObject10$1, _templateObject11$1;
  /*
    SDTEquationHrFar2C element
    <sdt-equation-hrfar2c>

    Attributes:
    Hit Rate; False Alarm Rate; d';
  */

  var SDTEquationHrFar2C = /*#__PURE__*/function (_SDTEquation) {
    _inherits(SDTEquationHrFar2C, _SDTEquation);

    var _super = _createSuper(SDTEquationHrFar2C);

    function SDTEquationHrFar2C() {
      var _this;

      _classCallCheck(this, SDTEquationHrFar2C);

      _this = _super.call(this);
      _this.unequal = false;
      _this.hr = 0;
      _this.far = 0;
      _this.s = 1;

      _this.alignState();

      return _this;
    }

    _createClass(SDTEquationHrFar2C, [{
      key: "alignState",
      value: function alignState() {
        this.c = SDTMath.hrFar2C(this.hr, this.far, this.s);
      }
    }, {
      key: "sendEvent",
      value: function sendEvent() {
        this.dispatchEvent(new CustomEvent('sdt-equation-hrfar2c-change', {
          detail: {
            hr: this.hr,
            far: this.far,
            s: this.s,
            c: this.c
          },
          bubbles: true
        }));
      }
    }, {
      key: "hrInput",
      value: function hrInput(event) {
        this.hr = parseFloat(event.target.value);
        this.alignState();
        this.sendEvent();
      }
    }, {
      key: "farInput",
      value: function farInput(event) {
        this.far = parseFloat(event.target.value);
        this.alignState();
        this.sendEvent();
      }
    }, {
      key: "sInput",
      value: function sInput(event) {
        this.s = parseFloat(event.target.value);
        this.alignState();
        this.sendEvent();
      }
    }, {
      key: "render",
      value: function render() {
        this.alignState();
        var hr;
        var far;
        var s;
        var c;

        if (this.numeric) {
          hr = $(_templateObject$2 || (_templateObject$2 = _taggedTemplateLiteral(["\n        <decidables-spinner class=\"hr bottom\" ?disabled=", " min=\"0\" max=\"1\" step=\".001\" .value=\"", "\" @input=", ">\n          <var>Hit Rate</var>\n        </decidables-spinner>\n      "])), !this.interactive, this.hr, this.hrInput.bind(this));
          far = $(_templateObject2$2 || (_templateObject2$2 = _taggedTemplateLiteral(["\n        <decidables-spinner class=\"far bottom\" ?disabled=", " min=\"0\" max=\"1\" step=\".001\" .value=\"", "\" @input=", ">\n          <var>False Alarm Rate</var>\n        </decidables-spinner>\n      "])), !this.interactive, this.far, this.farInput.bind(this));
          s = $(_templateObject3$1 || (_templateObject3$1 = _taggedTemplateLiteral(["\n        <decidables-spinner class=\"s bottom\" ?disabled=", " min=\"0\" step=\".001\" .value=\"", "\" @input=", ">\n          <var class=\"math-var\">\u03C3</var>\n        </decidables-spinner>\n      "])), !this.interactive, this.s, this.sInput.bind(this));
          c = $(_templateObject4$1 || (_templateObject4$1 = _taggedTemplateLiteral(["\n        <decidables-spinner class=\"c bottom\" disabled step=\".001\" .value=\"", "\">\n          <var class=\"math-var\">c</var>\n        </decidables-spinner>\n      "])), +this.c.toFixed(3));
        } else {
          hr = $(_templateObject5$1 || (_templateObject5$1 = _taggedTemplateLiteral(["<var class=\"hr\">Hit Rate</var>"])));
          far = $(_templateObject6$1 || (_templateObject6$1 = _taggedTemplateLiteral(["<var class=\"far\">False Alarm Rate</var>"])));
          s = $(_templateObject7$1 || (_templateObject7$1 = _taggedTemplateLiteral(["<var class=\"math-var s\">\u03C3</var>"])));
          c = $(_templateObject8$1 || (_templateObject8$1 = _taggedTemplateLiteral(["<var class=\"math-var c\">c</var>"])));
        }

        var equation;

        if (this.unequal) {
          equation = $(_templateObject9$1 || (_templateObject9$1 = _taggedTemplateLiteral(["\n        <tr>\n          <td rowspan=\"2\">\n            ", "<span class=\"equals\">=</span><span class=\"bracket tight\">(</span>\n          </td>\n          <td class=\"underline bottom\">\n            <span>1</span><span class=\"plus tight\">+</span><span>", "<sup class=\"exp\">2</sup></span>\n          </td>\n          <td rowspan=\"2\">\n            <span class=\"bracket tight\">)<sup class=\"exp\">\u2212\xBD</sup></span><span class=\"bracket tight\">(</span>\n          </td>\n          <td class=\"underline bottom\">\n            <span class=\"minus tight\">\u2212</span>", "\n          </td>\n          <td rowspan=\"2\">\n            <span class=\"bracket tight\">)</span><span class=\"bracket\">[</span><span class=\"tight\"><var class=\"math-greek phi tight\">\u03A6</var><sup class=\"exp\">\u22121</sup></span><span class=\"paren tight\">(</span>", "<span class=\"paren tight\">)</span><span class=\"plus\">+</span><span class=\"tight\"><var class=\"math-greek phi tight\">\u03A6</var><sup class=\"exp\">\u22121</sup></span><span class=\"paren tight\">(</span>", "<span class=\"paren tight\">)</span><span class=\"bracket\">]</span>\n          </td>\n        </tr>\n        <tr>\n          <td>\n            <span>2</span>\n          </td>\n          <td>\n            <span><span>1</span><span class=\"plus\">+</span>", "</span>\n          </td>\n        </tr>"])), c, s, s, hr, far, s);
        } else {
          equation = $(_templateObject10$1 || (_templateObject10$1 = _taggedTemplateLiteral(["\n        <tr>\n          <td rowspan=\"2\">\n            ", "<span class=\"equals\">=</span>\n          </td>\n          <td class=\"underline\">\n            <span class=\"minus tight\">\u2212</span><span class=\"bracket tight\">[</span><span class=\"tight\"><var class=\"math-greek phi tight\">\u03A6</var><sup class=\"exp\">\u22121</sup></span><span class=\"paren tight\">(</span>", "<span class=\"paren tight\">)</span><span class=\"plus\">+</span><span class=\"tight\"><var class=\"math-greek phi tight\">\u03A6</var><sup class=\"exp\">\u22121</sup></span><span class=\"paren tight\">(</span>", "<span class=\"paren tight\">)</span><span class=\"bracket tight\">]</span>\n          </td>\n        </tr>\n        <tr>\n          <td>\n            <span>2</span>\n          </td>\n        </tr>"])), c, hr, far);
        }

        return $(_templateObject11$1 || (_templateObject11$1 = _taggedTemplateLiteral(["\n      <div class=\"holder\">\n        <table class=\"equation\">\n          <tbody>\n            ", "\n          </tbody>\n        </table>\n      </div>"])), equation);
      }
    }], [{
      key: "properties",
      get: function get() {
        return {
          unequal: {
            attribute: 'unequal',
            type: Boolean,
            reflect: true
          },
          hr: {
            attribute: 'hit-rate',
            type: Number,
            reflect: true
          },
          far: {
            attribute: 'false-alarm-rate',
            type: Number,
            reflect: true
          },
          s: {
            attribute: 's',
            type: Number,
            reflect: true
          },
          c: {
            attribute: false,
            type: Number,
            reflect: false
          }
        };
      }
    }]);

    return SDTEquationHrFar2C;
  }(SDTEquation);
  customElements.define('sdt-equation-hrfar2c', SDTEquationHrFar2C);

  var _templateObject$1, _templateObject2$1, _templateObject3, _templateObject4, _templateObject5, _templateObject6, _templateObject7, _templateObject8, _templateObject9, _templateObject10, _templateObject11;
  /*
    SDTEquationHrFar2D element
    <sdt-equation-hrfar2d>

    Attributes:
    Hit Rate; False Alarm Rate; d';
  */

  var SDTEquationHrFar2D = /*#__PURE__*/function (_SDTEquation) {
    _inherits(SDTEquationHrFar2D, _SDTEquation);

    var _super = _createSuper(SDTEquationHrFar2D);

    function SDTEquationHrFar2D() {
      var _this;

      _classCallCheck(this, SDTEquationHrFar2D);

      _this = _super.call(this);
      _this.unequal = false;
      _this.hr = 0;
      _this.far = 0;
      _this.s = 1;

      _this.alignState();

      return _this;
    }

    _createClass(SDTEquationHrFar2D, [{
      key: "alignState",
      value: function alignState() {
        this.d = SDTMath.hrFar2D(this.hr, this.far, this.s);
      }
    }, {
      key: "sendEvent",
      value: function sendEvent() {
        this.dispatchEvent(new CustomEvent('sdt-equation-hrfar2d-change', {
          detail: {
            hr: this.hr,
            far: this.far,
            s: this.s,
            d: this.d
          },
          bubbles: true
        }));
      }
    }, {
      key: "hrInput",
      value: function hrInput(event) {
        this.hr = parseFloat(event.target.value);
        this.alignState();
        this.sendEvent();
      }
    }, {
      key: "farInput",
      value: function farInput(event) {
        this.far = parseFloat(event.target.value);
        this.alignState();
        this.sendEvent();
      }
    }, {
      key: "sInput",
      value: function sInput(event) {
        this.s = parseFloat(event.target.value);
        this.alignState();
        this.sendEvent();
      }
    }, {
      key: "render",
      value: function render() {
        this.alignState();
        var hr;
        var far;
        var s;
        var d;

        if (this.numeric) {
          hr = $(_templateObject$1 || (_templateObject$1 = _taggedTemplateLiteral(["\n        <decidables-spinner class=\"hr bottom\" ?disabled=", " min=\"0\" max=\"1\" step=\".001\" .value=\"", "\" @input=", ">\n          <var>Hit Rate</var>\n        </decidables-spinner>\n      "])), !this.interactive, this.hr, this.hrInput.bind(this));
          far = $(_templateObject2$1 || (_templateObject2$1 = _taggedTemplateLiteral(["\n        <decidables-spinner class=\"far bottom\" ?disabled=", " min=\"0\" max=\"1\" step=\".001\" .value=\"", "\" @input=", ">\n          <var>False Alarm Rate</var>\n        </decidables-spinner>\n      "])), !this.interactive, this.far, this.farInput.bind(this));
          s = $(_templateObject3 || (_templateObject3 = _taggedTemplateLiteral(["\n        <decidables-spinner class=\"s bottom\" ?disabled=", " min=\"0\" step=\".001\" .value=\"", "\" @input=", ">\n          <var class=\"math-var\">\u03C3</var>\n        </decidables-spinner>\n      "])), !this.interactive, this.s, this.sInput.bind(this));
          d = $(_templateObject4 || (_templateObject4 = _taggedTemplateLiteral(["\n        <decidables-spinner class=\"d bottom\" disabled step=\".001\" .value=\"", "\">\n          <var class=\"math-var\">d\u2032</var>\n        </decidables-spinner>\n      "])), +this.d.toFixed(3));
        } else {
          hr = $(_templateObject5 || (_templateObject5 = _taggedTemplateLiteral(["<var class=\"hr\">Hit Rate</var>"])));
          far = $(_templateObject6 || (_templateObject6 = _taggedTemplateLiteral(["<var class=\"far\">False Alarm Rate</var>"])));
          s = $(_templateObject7 || (_templateObject7 = _taggedTemplateLiteral(["<var class=\"math-var s\">\u03C3</var>"])));
          d = $(_templateObject8 || (_templateObject8 = _taggedTemplateLiteral(["<var class=\"math-var d\">d\u2032</var>"])));
        }

        var equation;

        if (this.unequal) {
          equation = $(_templateObject9 || (_templateObject9 = _taggedTemplateLiteral(["\n        <tr>\n          <td rowspan=\"2\">\n            ", "<span class=\"equals\">=</span><span class=\"bracket tight\">(</span>\n          </td>\n          <td class=\"underline bottom\">\n            <span>1</span><span class=\"plus tight\">+</span><span>", "<sup class=\"exp\">2</sup></span>\n          </td>\n          <td rowspan=\"2\">\n            <span class=\"bracket tight\">)<sup class=\"exp\">\u2212\xBD</sup></span><span class=\"bracket\">[</span>", "<span class=\"tight\"><var class=\"math-greek phi tight\">\u03A6</var><sup class=\"exp\">\u22121</sup></span><span class=\"paren tight\">(</span>", "<span class=\"paren tight\">)</span><span class=\"minus\">\u2212</span><span class=\"tight\"><var class=\"math-greek phi tight\">\u03A6</var><sup class=\"exp\">\u22121</sup></span><span class=\"paren tight\">(</span>", "<span class=\"paren tight\">)</span><span class=\"bracket\">]</span>\n          </td>\n        </tr>\n        <tr>\n          <td>\n            <span>2</span>\n          </td>\n        </tr>"])), d, s, s, hr, far);
        } else {
          equation = $(_templateObject10 || (_templateObject10 = _taggedTemplateLiteral(["\n        <tr>\n          <td>\n              ", "<span class=\"equals\">=</span><span class=\"tight\"><var class=\"math-greek phi tight\">\u03A6</var><sup class=\"exp\">\u22121</sup></span><span class=\"paren tight\">(</span>", "<span class=\"paren tight\">)</span><span class=\"minus\">\u2212</span><span class=\"tight\"><var class=\"math-greek phi tight\">\u03A6</var><sup class=\"exp\">\u22121</sup></span><span class=\"paren tight\">(</span>", "<span class=\"paren tight\">)</span>\n          </td>\n        </tr>"])), d, hr, far);
        }

        return $(_templateObject11 || (_templateObject11 = _taggedTemplateLiteral(["\n      <div class=\"holder\">\n        <table class=\"equation\">\n          <tbody>\n            ", "\n          </tbody>\n        </table>\n      </div>"])), equation);
      }
    }], [{
      key: "properties",
      get: function get() {
        return {
          unequal: {
            attribute: 'unequal',
            type: Boolean,
            reflect: true
          },
          hr: {
            attribute: 'hit-rate',
            type: Number,
            reflect: true
          },
          far: {
            attribute: 'false-alarm-rate',
            type: Number,
            reflect: true
          },
          s: {
            attribute: 's',
            type: Number,
            reflect: true
          },
          d: {
            attribute: false,
            type: Number,
            reflect: false
          }
        };
      }
    }]);

    return SDTEquationHrFar2D;
  }(SDTEquation);
  customElements.define('sdt-equation-hrfar2d', SDTEquationHrFar2D);

  var _templateObject, _templateObject2;
  /*
    SDTExample Base Class - Not intended for instantiation!
    <sdt-example>
  */

  var SDTExample = /*#__PURE__*/function (_DetectableElement) {
    _inherits(SDTExample, _DetectableElement);

    var _super = _createSuper(SDTExample);

    function SDTExample() {
      _classCallCheck(this, SDTExample);

      return _super.apply(this, arguments);
    }

    _createClass(SDTExample, [{
      key: "render",
      value: function render() {
        // eslint-disable-line class-methods-use-this
        return $(_templateObject || (_templateObject = _taggedTemplateLiteral(["\n      <div class=\"holder\">\n        <div class=\"body\">\n          <slot>Empty!</slot>\n        </div>\n      </div>"])));
      }
    }], [{
      key: "styles",
      get: function get() {
        return [_get(_getPrototypeOf(SDTExample), "styles", this), r$2(_templateObject2 || (_templateObject2 = _taggedTemplateLiteral(["\n        :host {\n          ---border: var(--border, 1px solid var(---color-border));\n          display: inline-block;\n\n          /* This makes IE11 happy */\n          width: 100%;\n\n          margin-bottom: 1rem;\n        }\n\n        .holder {\n          display: flex;\n        }\n\n        .body {\n          display: flex;\n\n          flex-wrap: wrap;\n\n          align-items: center;\n          justify-content: left;\n\n          padding: 0.625rem;\n\n          border: var(---border);\n          border-radius: 0.25rem;\n        }\n\n        .body ::slotted(*) {\n          margin: 0.625rem;\n        }\n\n        /* HACK: Sibling selectors not working with ::slotted */\n        /* .body > rdk-task + detectable-response,\n        ::slotted(rdk-task) + ::slotted(detectable-response) { */\n        .body ::slotted(detectable-response) {\n          margin-left: 0;\n        }\n\n        /* HACK: Sibling selectors not working with ::slotted */\n        /* .body > detectable-control + rdk-task,\n        ::slotted(detectable-control) + ::slotted(rdk-task) {\n          margin-left: 0;\n        } */\n        .body ::slotted(rdk-task) {\n          margin-left: 0;\n        }\n      "])))];
      }
    }]);

    return SDTExample;
  }(DetectableElement);
  customElements.define('sdt-example', SDTExample);

  /*
    SDTExample_DoubleInteractive element
    <sdt-example-interactive>
  */

  var SDTExampleDoubleInteractive = /*#__PURE__*/function (_SDTExample) {
    _inherits(SDTExampleDoubleInteractive, _SDTExample);

    var _super = _createSuper(SDTExampleDoubleInteractive);

    function SDTExampleDoubleInteractive() {
      _classCallCheck(this, SDTExampleDoubleInteractive);

      return _super.apply(this, arguments);
    }

    _createClass(SDTExampleDoubleInteractive, [{
      key: "firstUpdated",
      value: function
        /* changedProperties */
      firstUpdated() {
        var _this = this;

        this.one = {};
        this.one.h = 95;
        this.one.m = 5;
        this.one.fa = 35;
        this.one.cr = 65;
        this.one.hr = SDTMath.hM2Hr(this.one.h, this.one.m);
        this.one.far = SDTMath.faCr2Far(this.one.fa, this.one.cr);
        this.one.d = SDTMath.hrFar2D(this.one.hr, this.one.far);
        this.one.c = SDTMath.hrFar2C(this.one.hr, this.one.far);
        this.two = {};
        this.two.h = 40;
        this.two.m = 60;
        this.two.fa = 20;
        this.two.cr = 80;
        this.two.hr = SDTMath.hM2Hr(this.two.h, this.two.m);
        this.two.far = SDTMath.faCr2Far(this.two.fa, this.two.cr);
        this.two.d = SDTMath.hrFar2D(this.two.hr, this.two.far);
        this.two.c = SDTMath.hrFar2C(this.two.hr, this.two.far);
        this.detectableTableOne = this.querySelector('detectable-table:nth-of-type(1)');
        this.detectableTableTwo = this.querySelector('detectable-table:nth-of-type(2)');
        this.rocSpace = this.querySelector('roc-space');
        this.sdtModelOne = this.querySelector('sdt-model:nth-of-type(1)');
        this.sdtModelTwo = this.querySelector('sdt-model:nth-of-type(2)');

        if (this.detectableTableOne) {
          this.detectableTableOne.h = this.one.h;
          this.detectableTableOne.m = this.one.m;
          this.detectableTableOne.fa = this.one.fa;
          this.detectableTableOne.cr = this.one.cr;
          this.detectableTableOne.addEventListener('detectable-table-change', function (event) {
            if (_this.rocSpace) {
              _this.rocSpace.set(event.detail.hr, event.detail.far, 'default', '↑');
            }

            if (_this.sdtModelOne) {
              _this.sdtModelOne.d = SDTMath.hrFar2D(event.detail.hr, event.detail.far);
              _this.sdtModelOne.c = SDTMath.hrFar2C(event.detail.hr, event.detail.far);
            }
          });
        }

        if (this.detectableTableTwo) {
          this.detectableTableTwo.h = this.two.h;
          this.detectableTableTwo.m = this.two.m;
          this.detectableTableTwo.fa = this.two.fa;
          this.detectableTableTwo.cr = this.two.cr;
          this.detectableTableTwo.addEventListener('detectable-table-change', function (event) {
            if (_this.rocSpace) {
              _this.rocSpace.set(event.detail.hr, event.detail.far, 'two', '↓');
            }

            if (_this.sdtModelTwo) {
              _this.sdtModelTwo.d = SDTMath.hrFar2D(event.detail.hr, event.detail.far);
              _this.sdtModelTwo.c = SDTMath.hrFar2C(event.detail.hr, event.detail.far);
            }
          });
        }

        if (this.rocSpace) {
          this.rocSpace.set(this.one.hr, this.one.far, 'default', '↑');
          this.rocSpace.set(this.two.hr, this.two.far, 'two', '↓');
          this.rocSpace.addEventListener('roc-point-change', function (event) {
            if (event.detail.name === 'default' && _this.sdtModelOne) {
              _this.sdtModelOne.d = event.detail.d;
              _this.sdtModelOne.c = event.detail.c;
            } else if (event.detail.name === 'two' && _this.sdtModelTwo) {
              _this.sdtModelTwo.d = event.detail.d;
              _this.sdtModelTwo.c = event.detail.c;
            }

            if (event.detail.name === 'default' && _this.detectableTableOne) {
              var newh = Math.round((_this.detectableTableOne.h + _this.detectableTableOne.m) * event.detail.hr);
              var newm = _this.detectableTableOne.h + _this.detectableTableOne.m - newh;
              var newfa = Math.round((_this.detectableTableOne.fa + _this.detectableTableOne.cr) * event.detail.far);
              var newcr = _this.detectableTableOne.fa + _this.detectableTableOne.cr - newfa;
              _this.detectableTableOne.h = newh;
              _this.detectableTableOne.m = newm;
              _this.detectableTableOne.fa = newfa;
              _this.detectableTableOne.cr = newcr;
            } else if (event.detail.name === 'two' && _this.detectableTableTwo) {
              var _newh = Math.round((_this.detectableTableTwo.h + _this.detectableTableTwo.m) * event.detail.hr);

              var _newm = _this.detectableTableTwo.h + _this.detectableTableTwo.m - _newh;

              var _newfa = Math.round((_this.detectableTableTwo.fa + _this.detectableTableTwo.cr) * event.detail.far);

              var _newcr = _this.detectableTableTwo.fa + _this.detectableTableTwo.cr - _newfa;

              _this.detectableTableTwo.h = _newh;
              _this.detectableTableTwo.m = _newm;
              _this.detectableTableTwo.fa = _newfa;
              _this.detectableTableTwo.cr = _newcr;
            }
          });
        }

        if (this.sdtModelOne) {
          this.sdtModelOne.d = this.one.d;
          this.sdtModelOne.c = this.one.c;
          this.sdtModelOne.addEventListener('sdt-model-change', function (event) {
            if (_this.rocSpace) {
              _this.rocSpace.setWithSDT(event.detail.d, event.detail.c, 'default', '↑');
            }

            if (_this.detectableTableOne) {
              var newh = Math.round((_this.detectableTableOne.h + _this.detectableTableOne.m) * event.detail.hr);
              var newm = _this.detectableTableOne.h + _this.detectableTableOne.m - newh;
              var newfa = Math.round((_this.detectableTableOne.fa + _this.detectableTableOne.cr) * event.detail.far);
              var newcr = _this.detectableTableOne.fa + _this.detectableTableOne.cr - newfa;
              _this.detectableTableOne.h = newh;
              _this.detectableTableOne.m = newm;
              _this.detectableTableOne.fa = newfa;
              _this.detectableTableOne.cr = newcr;
            }
          });
        }

        if (this.sdtModelTwo) {
          this.sdtModelTwo.d = this.two.d;
          this.sdtModelTwo.c = this.two.c;
          this.sdtModelTwo.addEventListener('sdt-model-change', function (event) {
            if (_this.rocSpace) {
              _this.rocSpace.setWithSDT(event.detail.d, event.detail.c, 'two', '↓');
            }

            if (_this.detectableTableTwo) {
              var newh = Math.round((_this.detectableTableTwo.h + _this.detectableTableTwo.m) * event.detail.hr);
              var newm = _this.detectableTableTwo.h + _this.detectableTableTwo.m - newh;
              var newfa = Math.round((_this.detectableTableTwo.fa + _this.detectableTableTwo.cr) * event.detail.far);
              var newcr = _this.detectableTableTwo.fa + _this.detectableTableTwo.cr - newfa;
              _this.detectableTableTwo.h = newh;
              _this.detectableTableTwo.m = newm;
              _this.detectableTableTwo.fa = newfa;
              _this.detectableTableTwo.cr = newcr;
            }
          });
        }
      }
    }]);

    return SDTExampleDoubleInteractive;
  }(SDTExample);
  customElements.define('sdt-example-double-interactive', SDTExampleDoubleInteractive);

  /*
    SDTExample_Human element
    <sdt-example-human>
  */

  var SDTExampleHuman = /*#__PURE__*/function (_SDTExample) {
    _inherits(SDTExampleHuman, _SDTExample);

    var _super = _createSuper(SDTExampleHuman);

    function SDTExampleHuman() {
      _classCallCheck(this, SDTExampleHuman);

      return _super.apply(this, arguments);
    }

    _createClass(SDTExampleHuman, [{
      key: "firstUpdated",
      value: function
        /* changedProperties */
      firstUpdated() {
        var _this = this;

        this.count = 1;
        this.detectableControl = this.querySelector('detectable-control');
        this.rdkTask = this.querySelector('rdk-task');
        this.detectableResponse = this.querySelector('detectable-response');
        this.detectableTable = this.querySelector('detectable-table');
        this.rocSpace = this.querySelector('roc-space');
        this.sdtModel = this.querySelector('sdt-model');

        if (this.rocSpace) {
          if (this.rocSpace.hasAttribute('history')) {
            this.rocSpace.set(0.5, 0.5, 'default', this.count);
          }
        }

        if (this.detectableControl && this.detectableControl.hasAttribute('trials')) {
          this.detectableControl.addEventListener('detectable-control-trials', function (event) {
            if (_this.rdkTask) {
              _this.rdkTask.trials = event.detail.trials;
            }

            if (_this.detectableResponse) {
              _this.detectableResponse.trialTotal = event.detail.trials;
            }
          });
        }

        if (this.detectableControl && this.detectableControl.hasAttribute('duration')) {
          this.detectableControl.addEventListener('detectable-control-duration', function (event) {
            if (_this.rdkTask) {
              _this.rdkTask.duration = event.detail.duration;
              _this.rdkTask.wait = event.detail.duration;
              _this.rdkTask.iti = event.detail.duration;
            }
          });
        }

        if (this.detectableControl && this.detectableControl.hasAttribute('coherence')) {
          this.detectableControl.addEventListener('detectable-control-coherence', function (event) {
            if (_this.rdkTask) {
              _this.rdkTask.coherence = event.detail.coherence;
            }
          });
        }

        if (this.detectableControl && this.detectableControl.hasAttribute('payoff')) {
          this.detectableControl.addEventListener('detectable-control-payoff', function (event) {
            if (_this.detectableResponse) {
              _this.detectableResponse.hPayoff = event.detail.payoff;
              _this.detectableResponse.mPayoff = -event.detail.payoff + 0; // Get rid of -0

              _this.detectableResponse.faPayoff = -(100 - event.detail.payoff) + 0; // Get rid of -0

              _this.detectableResponse.crPayoff = 100 - event.detail.payoff;
            }

            if (_this.detectableTable) {
              _this.detectableTable.hPayoff = event.detail.payoff;
              _this.detectableTable.mPayoff = -event.detail.payoff + 0; // Get rid of -0

              _this.detectableTable.faPayoff = -(100 - event.detail.payoff) + 0; // Get rid of -0

              _this.detectableTable.crPayoff = 100 - event.detail.payoff;
            }
          });
        }

        if (this.detectableControl && this.detectableControl.hasAttribute('run')) {
          this.detectableControl.addEventListener('detectable-control-run', function
            /* event */
          () {
            if (_this.rdkTask) {
              _this.rdkTask.running = true;
            }
          });
        }

        if (this.detectableControl && this.detectableControl.hasAttribute('pause')) {
          this.detectableControl.addEventListener('detectable-control-pause', function
            /* event */
          () {
            if (_this.rdkTask) {
              _this.rdkTask.running = false;
            }
          });
        }

        if (this.detectableControl && this.detectableControl.hasAttribute('reset')) {
          this.detectableControl.addEventListener('detectable-control-reset', function
            /* event */
          () {
            if (_this.rdkTask) {
              _this.rdkTask.reset();
            }

            if (_this.detectableResponse) {
              _this.detectableResponse.reset();
            }

            if (_this.detectableTable) {
              _this.detectableTable.h = 0;
              _this.detectableTable.m = 0;
              _this.detectableTable.fa = 0;
              _this.detectableTable.cr = 0;
            }

            if (_this.rocSpace) {
              if (_this.rocSpace.hasAttribute('history')) {
                _this.count += 1;

                _this.rocSpace.set(0.5, 0.5, "point".concat(_this.count), _this.count);
              } else {
                _this.rocSpace.hr = 0.5;
                _this.rocSpace.far = 0.5;
              }
            }

            if (_this.sdtModel) {
              _this.sdtModel.d = 0;
              _this.sdtModel.c = 0;
            }
          });
        }

        if (this.rdkTask) {
          if (this.detectableResponse) {
            this.detectableResponse.trialTotal = this.rdkTask.trials;
          }
        }

        if (this.rdkTask) {
          this.rdkTask.addEventListener('rdk-trial-start', function (event) {
            if (_this.detectableResponse) {
              _this.detectableResponse.start(event.detail.signal, event.detail.trial);
            }
          });
        }

        if (this.rdkTask) {
          this.rdkTask.addEventListener('rdk-trial-end', function
            /* event */
          () {
            if (_this.detectableResponse) {
              _this.detectableResponse.stop();
            }
          });
        }

        if (this.rdkTask) {
          this.rdkTask.addEventListener('rdk-block-end', function
            /* event */
          () {
            if (_this.detectableControl) {
              _this.detectableControl.complete();
            }
          });
        }

        if (this.detectableResponse) {
          this.detectableResponse.addEventListener('detectable-response', function (event) {
            if (_this.detectableTable) {
              _this.detectableTable.h = event.detail.h;
              _this.detectableTable.m = event.detail.m;
              _this.detectableTable.fa = event.detail.fa;
              _this.detectableTable.cr = event.detail.cr;
            }

            var newhr = SDTMath.hM2Hr(event.detail.h + 1, event.detail.m + 1);
            var newfar = SDTMath.faCr2Far(event.detail.fa + 1, event.detail.cr + 1);

            if (_this.rocSpace) {
              if (_this.rocSpace.hasAttribute('history')) {
                _this.rocSpace.set(newhr, newfar, _this.count === 1 ? 'default' : "point".concat(_this.count), _this.count);
              } else {
                _this.rocSpace.hr = newhr;
                _this.rocSpace.far = newfar;
              }
            }

            if (_this.sdtModel) {
              _this.sdtModel.d = SDTMath.hrFar2D(newhr, newfar);
              _this.sdtModel.c = SDTMath.hrFar2C(newhr, newfar);
            }
          });
        }
      }
    }]);

    return SDTExampleHuman;
  }(SDTExample);
  customElements.define('sdt-example-human', SDTExampleHuman);

  /*
    SDTExample_Interactive element
    <sdt-example-interactive>
  */

  var SDTExampleInteractive = /*#__PURE__*/function (_SDTExample) {
    _inherits(SDTExampleInteractive, _SDTExample);

    var _super = _createSuper(SDTExampleInteractive);

    function SDTExampleInteractive() {
      _classCallCheck(this, SDTExampleInteractive);

      return _super.apply(this, arguments);
    }

    _createClass(SDTExampleInteractive, [{
      key: "firstUpdated",
      value: function
        /* changedProperties */
      firstUpdated() {
        var _this = this;

        this.detectableControl = this.querySelector('detectable-control');
        this.detectableTable = this.querySelector('detectable-table');
        this.rocSpace = this.querySelector('roc-space');
        this.sdtModel = this.querySelector('sdt-model');
        this.rocSpaces = this.querySelectorAll('roc-space');

        if (this.detectableControl && this.detectableControl.hasAttribute('color')) {
          this.detectableControl.addEventListener('detectable-control-color', function (event) {
            if (_this.sdtModel) {
              _this.sdtModel.color = event.detail.color;
            }

            if (_this.detectableTable) {
              _this.detectableTable.color = event.detail.color;
            }
          });
        }

        if (this.detectableControl) {
          this.detectableControl.addEventListener('detectable-control-z-roc', function (event) {
            if (_this.rocSpaces.length > 0) {
              _this.rocSpaces.forEach(function (rocSpace) {
                rocSpace.zRoc = event.detail.zRoc;
              });
            }
          });
        }

        if (this.detectableTable) {
          if (this.rocSpace) {
            this.rocSpace.hr = SDTMath.hM2Hr(this.detectableTable.h, this.detectableTable.m);
            this.rocSpace.far = SDTMath.faCr2Far(this.detectableTable.fa, this.detectableTable.cr);
          }

          if (this.sdtModel) {
            this.sdtModel.d = SDTMath.hrFar2D(SDTMath.hM2Hr(this.detectableTable.h, this.detectableTable.m), SDTMath.faCr2Far(this.detectableTable.fa, this.detectableTable.cr), this.sdtModel.s);
            this.sdtModel.c = SDTMath.hrFar2C(SDTMath.hM2Hr(this.detectableTable.h, this.detectableTable.m), SDTMath.faCr2Far(this.detectableTable.fa, this.detectableTable.cr), this.sdtModel.s);
          }

          this.detectableTable.addEventListener('detectable-table-change', function (event) {
            if (_this.rocSpace) {
              _this.rocSpace.far = event.detail.far;
              _this.rocSpace.hr = event.detail.hr;
            }

            if (_this.sdtModel) {
              _this.sdtModel.d = SDTMath.hrFar2D(event.detail.hr, event.detail.far, _this.sdtModel.s);
              _this.sdtModel.c = SDTMath.hrFar2C(event.detail.hr, event.detail.far, _this.sdtModel.s);
            }
          });
        }

        if (this.rocSpace) {
          if (this.sdtModel && !this.detectableTable) {
            this.sdtModel.d = SDTMath.hrFar2D(this.rocSpace.hr, this.rocSpace.far, this.rocSpace.s);
            this.sdtModel.c = SDTMath.hrFar2C(this.rocSpace.hr, this.rocSpace.far, this.rocSpace.s);
            this.sdtModel.s = this.rocSpace.s;
          }

          this.rocSpace.addEventListener('roc-point-change', function (event) {
            if (_this.sdtModel) {
              _this.sdtModel.d = event.detail.d;
              _this.sdtModel.c = event.detail.c;
              _this.sdtModel.s = event.detail.s;
            }

            if (_this.detectableTable) {
              var newh = Math.round((_this.detectableTable.h + _this.detectableTable.m) * event.detail.hr);
              var newm = _this.detectableTable.h + _this.detectableTable.m - newh;
              var newfa = Math.round((_this.detectableTable.fa + _this.detectableTable.cr) * event.detail.far);
              var newcr = _this.detectableTable.fa + _this.detectableTable.cr - newfa;
              _this.detectableTable.h = newh;
              _this.detectableTable.m = newm;
              _this.detectableTable.fa = newfa;
              _this.detectableTable.cr = newcr;
            }
          });
        }

        if (this.sdtModel) {
          this.sdtModel.addEventListener('sdt-model-change', function (event) {
            if (_this.rocSpaces.length > 0) {
              _this.rocSpaces.forEach(function (rocSpace) {
                rocSpace.setWithSDT(event.detail.d, event.detail.c, 'default', '', event.detail.s);
              });
            }

            if (_this.detectableTable) {
              var newh = Math.round((_this.detectableTable.h + _this.detectableTable.m) * event.detail.hr);
              var newm = _this.detectableTable.h + _this.detectableTable.m - newh;
              var newfa = Math.round((_this.detectableTable.fa + _this.detectableTable.cr) * event.detail.far);
              var newcr = _this.detectableTable.fa + _this.detectableTable.cr - newfa;
              _this.detectableTable.h = newh;
              _this.detectableTable.m = newm;
              _this.detectableTable.fa = newfa;
              _this.detectableTable.cr = newcr;
            }
          });
        }
      }
    }]);

    return SDTExampleInteractive;
  }(SDTExample);
  customElements.define('sdt-example-interactive', SDTExampleInteractive);

  /*
    SDTExample_Model element
    <sdt-example-model>
  */

  var SDTExampleModel = /*#__PURE__*/function (_SDTExample) {
    _inherits(SDTExampleModel, _SDTExample);

    var _super = _createSuper(SDTExampleModel);

    function SDTExampleModel() {
      _classCallCheck(this, SDTExampleModel);

      return _super.apply(this, arguments);
    }

    _createClass(SDTExampleModel, [{
      key: "firstUpdated",
      value: function
        /* changedProperties */
      firstUpdated() {
        var _this = this;

        this.count = 1;
        this.detectableControl = this.querySelector('detectable-control');
        this.rdkTask = this.querySelector('rdk-task');
        this.sdtModel = this.querySelector('sdt-model');
        this.detectableResponse = this.querySelector('detectable-response');
        this.detectableTable = this.querySelector('detectable-table');
        this.rocSpace = this.querySelector('roc-space');

        if (this.detectableControl && this.detectableControl.hasAttribute('color')) {
          this.detectableControl.addEventListener('detectable-control-color', function (event) {
            if (_this.sdtModel) {
              _this.sdtModel.color = event.detail.color;
            }

            if (_this.detectableTable) {
              _this.detectableTable.color = event.detail.color;
            }
          });
        }

        if (this.detectableControl && this.detectableControl.hasAttribute('duration')) {
          this.detectableControl.addEventListener('detectable-control-duration', function (event) {
            if (_this.rdkTask) {
              _this.rdkTask.duration = event.detail.duration;
              _this.rdkTask.wait = event.detail.duration;
              _this.rdkTask.iti = event.detail.duration;
            }
          });
        }

        if (this.detectableControl && this.detectableControl.hasAttribute('trials')) {
          this.detectableControl.addEventListener('detectable-control-trials', function (event) {
            if (_this.rdkTask) {
              _this.rdkTask.trials = event.detail.trials;
            }

            if (_this.detectableResponse) {
              _this.detectableResponse.trialTotal = event.detail.trials;
            }
          });
        }

        if (this.detectableControl && this.detectableControl.hasAttribute('coherence')) {
          this.detectableControl.addEventListener('detectable-control-coherence', function (event) {
            if (_this.rdkTask) {
              _this.rdkTask.coherence = event.detail.coherence;
            }
          });
        }

        if (this.detectableControl && this.detectableControl.hasAttribute('run')) {
          this.detectableControl.addEventListener('detectable-control-run', function
            /* event */
          () {
            if (_this.rdkTask) {
              _this.rdkTask.running = true;
            }

            if (_this.sdtModel) {
              _this.sdtModel.resumeTrial();
            }
          });
        }

        if (this.detectableControl && this.detectableControl.hasAttribute('pause')) {
          this.detectableControl.addEventListener('detectable-control-pause', function
            /* event */
          () {
            if (_this.rdkTask) {
              _this.rdkTask.running = false;
            }

            if (_this.sdtModel) {
              _this.sdtModel.pauseTrial();
            }
          });
        }

        if (this.detectableControl && this.detectableControl.hasAttribute('reset')) {
          this.detectableControl.addEventListener('detectable-control-reset', function
            /* event */
          () {
            if (_this.rdkTask) {
              _this.rdkTask.reset();
            }

            if (_this.detectableResponse) {
              _this.detectableResponse.reset();
            }

            if (_this.sdtModel) {
              _this.sdtModel.reset();
            }

            if (_this.detectableTable) {
              _this.detectableTable.h = 0;
              _this.detectableTable.m = 0;
              _this.detectableTable.fa = 0;
              _this.detectableTable.cr = 0;
            }

            if (_this.rocSpace) {
              if (_this.rocSpace.hasAttribute('history')) {
                _this.count += 1;

                _this.rocSpace.set(0.5, 0.5, "point".concat(_this.count), '', 1);
              } else {
                _this.rocSpace.hr = 0.5;
                _this.rocSpace.far = 0.5;
              }
            }
          });
        }

        if (this.rdkTask) {
          if (this.detectableResponse) {
            this.detectableResponse.trialTotal = this.rdkTask.trials;
          }
        }

        if (this.rdkTask) {
          this.rdkTask.addEventListener('rdk-trial-start', function (event) {
            if (_this.detectableResponse) {
              _this.detectableResponse.start(event.detail.signal, event.detail.trial);
            }

            if (_this.sdtModel) {
              _this.sdtModel.trial(event.detail.trial, event.detail.signal, event.detail.duration, event.detail.wait, event.detail.iti);
            }
          });
        }

        if (this.rdkTask) {
          this.rdkTask.addEventListener('rdk-trial-middle', function
            /* event */
          () {// if (this.sdtModel) {
            //   this.sdtModel.trial(event.detail.trial, event.detail.signal);
            // }
          });
        }

        if (this.rdkTask) {
          this.rdkTask.addEventListener('rdk-trial-end', function
            /* event */
          () {
            if (_this.detectableResponse) {
              _this.detectableResponse.stop();
            }
          });
        }

        if (this.rdkTask) {
          this.rdkTask.addEventListener('rdk-block-end', function
            /* event */
          () {
            if (_this.detectableControl) {
              _this.detectableControl.complete();
            }
          });
        }

        if (this.sdtModel) {
          this.sdtModel.addEventListener('detectable-response', function (event) {
            if (_this.detectableResponse) {
              _this.detectableResponse.responded(event.detail.response);
            }

            if (_this.detectableTable) {
              _this.detectableTable.h = event.detail.h;
              _this.detectableTable.m = event.detail.m;
              _this.detectableTable.fa = event.detail.fa;
              _this.detectableTable.cr = event.detail.cr;
            }

            if (_this.rocSpace) {
              _this.rocSpace.hr = SDTMath.hM2Hr(event.detail.h, event.detail.m);
              _this.rocSpace.far = SDTMath.faCr2Far(event.detail.fa, event.detail.cr);
            }
          });
        }

        if (this.sdtModel) {
          this.sdtModel.addEventListener('sdt-model-change', function (event) {
            if (_this.detectableTable) {
              _this.detectableTable.h = event.detail.h;
              _this.detectableTable.m = event.detail.m;
              _this.detectableTable.fa = event.detail.fa;
              _this.detectableTable.cr = event.detail.cr;
            }

            if (_this.rocSpace) {
              _this.rocSpace.hr = SDTMath.hM2Hr(event.detail.h, event.detail.m);
              _this.rocSpace.far = SDTMath.faCr2Far(event.detail.fa, event.detail.cr);
            }
          });
        }
      }
    }]);

    return SDTExampleModel;
  }(SDTExample);
  customElements.define('sdt-example-model', SDTExampleModel);

  /*
    SDTExampleUnequal element
    <sdt-example-unequal>
  */

  var SDTExampleUnequal = /*#__PURE__*/function (_SDTExample) {
    _inherits(SDTExampleUnequal, _SDTExample);

    var _super = _createSuper(SDTExampleUnequal);

    function SDTExampleUnequal() {
      _classCallCheck(this, SDTExampleUnequal);

      return _super.apply(this, arguments);
    }

    _createClass(SDTExampleUnequal, [{
      key: "firstUpdated",
      value: function
        /* changedProperties */
      firstUpdated() {
        var _this = this;

        this.detectableControl = this.querySelector('detectable-control');
        this.rocSpace = this.querySelector('roc-space');
        this.sdtModel = this.querySelector('sdt-model');

        if (this.detectableControl) {
          this.detectableControl.addEventListener('detectable-control-z-roc', function (event) {
            _this.rocSpace.zRoc = event.detail.zRoc;
          });
        }

        if (this.rocSpace) {
          this.rocSpace.setWithSDT(1, 0, 'default', '', 1); // Set 'default' to equal variance for contours
        }

        if (this.sdtModel) {
          if (this.rocSpace) {
            range(-1.5, 1.6, 0.5).forEach(function (c, index) {
              _this.rocSpace.setWithSDT(_this.sdtModel.d, c, "point".concat(index), '', _this.sdtModel.s);
            });
          }

          this.sdtModel.addEventListener('sdt-model-change', function (event) {
            if (_this.rocSpace) {
              range(-1.5, 1.6, 0.5).forEach(function (c, index) {
                _this.rocSpace.setWithSDT(event.detail.d, c, "point".concat(index), '', event.detail.s);
              });
            }
          });
        }
      }
    }]);

    return SDTExampleUnequal;
  }(SDTExample);
  customElements.define('sdt-example-unequal', SDTExampleUnequal);

})();
//# sourceMappingURL=page.js.map
