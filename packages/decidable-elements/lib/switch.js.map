{"version":3,"sources":["switch.js"],"names":["DecidableSwitch","checked","attribute","type","Boolean","reflect","disabled","event","target","dispatchEvent","CustomEvent","detail","bubbles","html","uniqueId","changed","bind","css","DecidableElement","customElements","define"],"mappings":";;;;;;;AACA;;AAEA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;IAEqBA,e;;;;;wBACK;AACtB,aAAO;AACLC,QAAAA,OAAO,EAAE;AACPC,UAAAA,SAAS,EAAE,SADJ;AAEPC,UAAAA,IAAI,EAAEC,OAFC;AAGPC,UAAAA,OAAO,EAAE;AAHF,SADJ;AAMLC,QAAAA,QAAQ,EAAE;AACRJ,UAAAA,SAAS,EAAE,UADH;AAERC,UAAAA,IAAI,EAAEC,OAFE;AAGRC,UAAAA,OAAO,EAAE;AAHD;AANL,OAAP;AAYD;;;AAED,6BAAc;AAAA;;AAAA;;AACZ,0FADY,CAGZ;;AACA,UAAKJ,OAAL,GAAe,KAAf;AACA,UAAKK,QAAL,GAAgB,KAAhB;AALY;AAMb;;;;4BAEOC,K,EAAO;AACb,WAAKN,OAAL,GAAeM,KAAK,CAACC,MAAN,CAAaP,OAA5B;AACA,WAAKQ,aAAL,CAAmB,IAAIC,WAAJ,CAAgB,QAAhB,EAA0B;AAC3CC,QAAAA,MAAM,EAAE;AACNV,UAAAA,OAAO,EAAE,KAAKA;AADR,SADmC;AAI3CW,QAAAA,OAAO,EAAE;AAJkC,OAA1B,CAAnB;AAMD;;;6BAgIQ;AACP,iBAAOC,gBAAP,+BACiC,KAAKC,QADtC,gBACsE,KAAKb,OAD3E,EACgG,KAAKK,QADrG,EACyH,KAAKS,OAAL,CAAaC,IAAb,CAAkB,IAAlB,CADzH,YAEkB,KAAKF,QAFvB,0BAKkB,KAAKA,QALvB;AASD;;;wBAxImB;AAClB,aAAO,6DAELG,eAFK,sBAAP;AA2HD;;;;EA9J0CC,yB;;;AA6K7CC,cAAc,CAACC,MAAf,CAAsB,kBAAtB,EAA0CpB,eAA1C","sourcesContent":["\nimport {html, css} from 'lit-element';\n\nimport DecidableElement from './decidable-element';\n\nexport default class DecidableSwitch extends DecidableElement {\n  static get properties() {\n    return {\n      checked: {\n        attribute: 'checked',\n        type: Boolean,\n        reflect: true,\n      },\n      disabled: {\n        attribute: 'disabled',\n        type: Boolean,\n        reflect: true,\n      },\n    };\n  }\n\n  constructor() {\n    super();\n\n    // Attributes\n    this.checked = false;\n    this.disabled = false;\n  }\n\n  changed(event) {\n    this.checked = event.target.checked;\n    this.dispatchEvent(new CustomEvent('change', {\n      detail: {\n        checked: this.checked,\n      },\n      bubbles: true,\n    }));\n  }\n\n  static get styles() {\n    return [\n      super.styles,\n      css`\n        :host {\n          display: flex;\n\n          flex-direction: column;\n\n          align-items: center;\n          justify-content: center;\n        }\n\n        /* Adapted from https://codepen.io/guuslieben/pen/YyPRVP */\n        input[type=checkbox] {\n          /* visuallyhidden: https://github.com/h5bp/html5-boilerplate/blob/master/dist/doc/css.md */\n          position: absolute;\n\n          width: 1px;\n          height: 1px;\n          padding: 0;\n          margin: -1px;\n          overflow: hidden;\n          clip: rect(0 0 0 0);\n\n          white-space: nowrap;\n\n          border: 0;\n          clip-path: inset(100%); /* May cause a performance issue: https://github.com/h5bp/html5-boilerplate/issues/2021 */\n        }\n\n        input[type=checkbox] + label {\n          order: 1;\n\n          margin: 0 0.25rem 0.25rem;\n\n          font-weight: 400;\n        }\n\n        input[type=checkbox] + label + label {\n          position: relative;\n\n          min-width: 24px;\n          padding: 0 0 36px;\n          margin: 0.25rem 0.25rem 0;\n\n          font-weight: 400;\n\n          outline: none;\n        }\n\n        input[type=checkbox] + label + label::before,\n        input[type=checkbox] + label + label::after {\n          position: absolute;\n\n          left: 50%;\n\n          margin: 0;\n\n          content: \"\";\n\n          outline: 0;\n\n          transition: all var(---transition-duration) ease;\n          transform: translate(-50%, 0);\n        }\n\n        input[type=checkbox] + label + label::before {\n          bottom: 1px;\n\n          width: 8px;\n          height: 34px;\n\n          background-color: var(---color-element-disabled);\n          border-radius: 4px;\n        }\n\n        input[type=checkbox] + label + label::after {\n          bottom: 0;\n\n          width: 18px;\n          height: 18px;\n\n          background-color: var(---color-element-enabled);\n          border-radius: 50%;\n          box-shadow: var(---shadow-2);\n        }\n\n        input[type=checkbox]:checked + label + label::after {\n          transform: translate(-50%, -100%);\n        }\n\n        input[type=checkbox]:disabled + label + label::after {\n          background-color: var(---color-element-disabled);\n          box-shadow: none;\n        }\n\n        input[type=checkbox]:enabled + label,\n        input[type=checkbox]:enabled + label + label {\n          cursor: pointer;\n        }\n\n        input[type=checkbox]:enabled + label:hover + label::after,\n        input[type=checkbox]:enabled + label + label:hover::after {\n          box-shadow: var(---shadow-4);\n        }\n\n        input[type=checkbox]:enabled + label:active + label::after,\n        input[type=checkbox]:enabled + label + label:active::after {\n          box-shadow: var(---shadow-8);\n        }\n\n        /* stylelint-disable-next-line selector-max-compound-selectors */\n        :host(.keyboard) input[type=checkbox]:enabled:focus + label + label::after {\n          box-shadow: var(---shadow-4);\n        }\n\n        /* stylelint-disable-next-line selector-max-compound-selectors */\n        :host(.keyboard) input[type=checkbox]:enabled:focus + label + label:active::after,\n        :host(.keyboard) input[type=checkbox]:enabled:focus:active + label + label::after {\n          box-shadow: var(---shadow-8);\n        }\n      `,\n    ];\n  }\n\n  render() {\n    return html`\n      <input type=\"checkbox\" id=${`${this.uniqueId}-checkbox`} ?checked=${this.checked} ?disabled=${this.disabled} @change=${this.changed.bind(this)}>\n      <label for=${`${this.uniqueId}-checkbox`}>\n        <slot name=\"off-label\"></slot>\n      </label>\n      <label for=${`${this.uniqueId}-checkbox`}>\n        <slot></slot>\n      </label>\n    `;\n  }\n}\n\ncustomElements.define('decidable-switch', DecidableSwitch);\n"],"file":"switch.js"}