{"version":3,"sources":["spinner.js"],"names":["DecidableSpinner","disabled","attribute","type","Boolean","reflect","max","Number","min","step","value","undefined","event","target","html","inputted","bind","css","DecidableElement","customElements","define"],"mappings":";;;;;;;AACA;;AACA;;AAEA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;IAEqBA,gB;;;;;wBACK;AACtB,aAAO;AACLC,QAAAA,QAAQ,EAAE;AACRC,UAAAA,SAAS,EAAE,UADH;AAERC,UAAAA,IAAI,EAAEC,OAFE;AAGRC,UAAAA,OAAO,EAAE;AAHD,SADL;AAMLC,QAAAA,GAAG,EAAE;AACHJ,UAAAA,SAAS,EAAE,KADR;AAEHC,UAAAA,IAAI,EAAEI,MAFH;AAGHF,UAAAA,OAAO,EAAE;AAHN,SANA;AAWLG,QAAAA,GAAG,EAAE;AACHN,UAAAA,SAAS,EAAE,KADR;AAEHC,UAAAA,IAAI,EAAEI,MAFH;AAGHF,UAAAA,OAAO,EAAE;AAHN,SAXA;AAgBLI,QAAAA,IAAI,EAAE;AACJP,UAAAA,SAAS,EAAE,MADP;AAEJC,UAAAA,IAAI,EAAEI,MAFF;AAGJF,UAAAA,OAAO,EAAE;AAHL,SAhBD;AAqBLK,QAAAA,KAAK,EAAE;AACLR,UAAAA,SAAS,EAAE,OADN;AAELC,UAAAA,IAAI,EAAEI,MAFD;AAGLF,UAAAA,OAAO,EAAE;AAHJ;AArBF,OAAP;AA2BD;;;AAED,8BAAc;AAAA;;AAAA;;AACZ,2FADY,CAGZ;;AACA,UAAKJ,QAAL,GAAgB,KAAhB;AACA,UAAKK,GAAL,GAAWK,SAAX;AACA,UAAKH,GAAL,GAAWG,SAAX;AACA,UAAKF,IAAL,GAAYE,SAAZ;AACA,UAAKD,KAAL,GAAaC,SAAb;AARY;AASb;;;;6BAEQC,K,EAAO;AACd,WAAKF,KAAL,GAAaE,KAAK,CAACC,MAAN,CAAaH,KAA1B;AACD;;;6BAoFQ;AACP,iBAAOI,gBAAP,qBAGuB,KAAKb,QAH5B,EAG0D,0BAAU,KAAKO,GAAf,CAH1D,EAGqF,0BAAU,KAAKF,GAAf,CAHrF,EAGiH,0BAAU,KAAKG,IAAf,CAHjH,EAGgJ,KAAKC,KAHrJ,EAGqK,KAAKK,QAAL,CAAcC,IAAd,CAAmB,IAAnB,CAHrK;AAMD;;;wBAzFmB;AAClB,aAAO,8DAELC,eAFK,sBAAP;AA+ED;;;;EA9H2CC,yB;;;AA0I9CC,cAAc,CAACC,MAAf,CAAsB,mBAAtB,EAA2CpB,gBAA3C","sourcesContent":["\nimport {ifDefined} from 'lit-html/directives/if-defined';\nimport {html, css} from 'lit-element';\n\nimport DecidableElement from './decidable-element';\n\nexport default class DecidableSpinner extends DecidableElement {\n  static get properties() {\n    return {\n      disabled: {\n        attribute: 'disabled',\n        type: Boolean,\n        reflect: true,\n      },\n      max: {\n        attribute: 'max',\n        type: Number,\n        reflect: true,\n      },\n      min: {\n        attribute: 'min',\n        type: Number,\n        reflect: true,\n      },\n      step: {\n        attribute: 'step',\n        type: Number,\n        reflect: true,\n      },\n      value: {\n        attribute: 'value',\n        type: Number,\n        reflect: true,\n      },\n    };\n  }\n\n  constructor() {\n    super();\n\n    // Attributes\n    this.disabled = false;\n    this.max = undefined;\n    this.min = undefined;\n    this.step = undefined;\n    this.value = undefined;\n  }\n\n  inputted(event) {\n    this.value = event.target.value;\n  }\n\n  static get styles() {\n    return [\n      super.styles,\n      css`\n        :host {\n          display: block;\n        }\n\n        label {\n          position: relative;\n          display: flex;\n\n          flex-direction: column;\n\n          align-items: center;\n\n          margin: 0;\n\n          font-size: 0.75rem;\n        }\n\n        label::before {\n          position: absolute;\n          bottom: 1px;\n          left: calc(50% - var(--decidable-spinner-input-width, 4rem) / 2 + 0.25rem);\n\n          font-size: 1.125rem;\n          line-height: normal;\n\n          content: var(--decidable-spinner-prefix, \"\");\n        }\n\n        input[type=number] {\n          width: var(--decidable-spinner-input-width, 4rem);\n\n          font-family: var(---font-family-base);\n          font-size: 1.125rem;\n          color: inherit;\n          text-align: right;\n\n          background: none;\n          border: 0;\n          border-radius: 0;\n          outline: none;\n          box-shadow: var(---shadow-2);\n\n          -webkit-appearance: none; /* stylelint-disable-line property-no-vendor-prefix */\n        }\n\n        input[type=number]:hover {\n          box-shadow: var(---shadow-4);\n        }\n\n        input[type=number]:focus,\n        input[type=number]:active {\n          box-shadow: var(---shadow-8);\n        }\n\n        input[type=number]:disabled {\n          color: var(---color-text);\n\n          border: 0;\n          box-shadow: none;\n\n          /* HACK: Use correct text color in Safari */\n          -webkit-opacity: 1;\n          /* HACK: Hide spinners in disabled input for Firefox and Safari */\n          -moz-appearance: textfield; /* stylelint-disable-line property-no-vendor-prefix */\n          /* HACK: Use correct text color in Safari */\n          -webkit-text-fill-color: var(---color-text);\n        }\n\n        /* HACK: Hide spinners in disabled input for Firefox and Safari */\n        input[type=number]:disabled::-webkit-outer-spin-button,\n        input[type=number]:disabled::-webkit-inner-spin-button {\n          margin: 0;\n          -webkit-appearance: none; /* stylelint-disable-line property-no-vendor-prefix */\n        }\n      `,\n    ];\n  }\n\n  render() {\n    return html`\n      <label>\n        <slot></slot>\n        <input ?disabled=${this.disabled} type=\"number\" min=${ifDefined(this.min)} max=${ifDefined(this.max)} step=${ifDefined(this.step)} .value=${this.value} @input=${this.inputted.bind(this)}>\n      </label>\n    `;\n  }\n}\n\ncustomElements.define('decidable-spinner', DecidableSpinner);\n"],"file":"spinner.js"}