{"version":3,"sources":["toggle-option.js"],"names":["DecidableToggleOption","checked","attribute","type","Boolean","reflect","disabled","name","String","value","undefined","event","target","dispatchEvent","CustomEvent","detail","bubbles","html","uniqueId","changed","bind","css","DecidableElement","customElements","define"],"mappings":";;;;;;;AACA;;AAEA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;IAEqBA,qB;;;;;wBACK;AACtB,aAAO;AACLC,QAAAA,OAAO,EAAE;AACPC,UAAAA,SAAS,EAAE,SADJ;AAEPC,UAAAA,IAAI,EAAEC,OAFC;AAGPC,UAAAA,OAAO,EAAE;AAHF,SADJ;AAMLC,QAAAA,QAAQ,EAAE;AACRJ,UAAAA,SAAS,EAAE,UADH;AAERC,UAAAA,IAAI,EAAEC,OAFE;AAGRC,UAAAA,OAAO,EAAE;AAHD,SANL;AAWLE,QAAAA,IAAI,EAAE;AACJL,UAAAA,SAAS,EAAE,MADP;AAEJC,UAAAA,IAAI,EAAEK,MAFF;AAGJH,UAAAA,OAAO,EAAE;AAHL,SAXD;AAgBLI,QAAAA,KAAK,EAAE;AACLP,UAAAA,SAAS,EAAE,OADN;AAELC,UAAAA,IAAI,EAAEK,MAFD;AAGLH,UAAAA,OAAO,EAAE;AAHJ;AAhBF,OAAP;AAsBD;;;AAED,mCAAc;AAAA;;AAAA;;AACZ,gGADY,CAGZ;;AACA,UAAKJ,OAAL,GAAe,KAAf;AACA,UAAKK,QAAL,GAAgB,KAAhB;AACA,UAAKC,IAAL,GAAYG,SAAZ;AACA,UAAKD,KAAL,GAAaC,SAAb;AAPY;AAQb;;;;4BAEOC,K,EAAO;AACb,WAAKV,OAAL,GAAeU,KAAK,CAACC,MAAN,CAAaX,OAA5B;AACA,WAAKY,aAAL,CAAmB,IAAIC,WAAJ,CAAgB,QAAhB,EAA0B;AAC3CC,QAAAA,MAAM,EAAE;AACNd,UAAAA,OAAO,EAAE,KAAKA,OADR;AAENQ,UAAAA,KAAK,EAAE,KAAKA;AAFN,SADmC;AAK3CO,QAAAA,OAAO,EAAE;AALkC,OAA1B,CAAnB;AAOD;;;6BAsGQ;AACP,iBAAOC,gBAAP,+BAC8B,KAAKC,QADnC,aAC4D,KAAKX,IADjE,EAC+E,KAAKE,KADpF,EACsG,KAAKR,OAD3G,EAC8H,KAAKkB,OAAL,CAAaC,IAAb,CAAkB,IAAlB,CAD9H,YAEkB,KAAKF,QAFvB;AAMD;;;wBA3GmB;AAClB,aAAO,mEAELG,eAFK,sBAAP;AAiGD;;;;EAjJgDC,yB;;;AA6JnDC,cAAc,CAACC,MAAf,CAAsB,yBAAtB,EAAiDxB,qBAAjD","sourcesContent":["\nimport {html, css} from 'lit-element';\n\nimport DecidableElement from './decidable-element';\n\nexport default class DecidableToggleOption extends DecidableElement {\n  static get properties() {\n    return {\n      checked: {\n        attribute: 'checked',\n        type: Boolean,\n        reflect: true,\n      },\n      disabled: {\n        attribute: 'disabled',\n        type: Boolean,\n        reflect: true,\n      },\n      name: {\n        attribute: 'name',\n        type: String,\n        reflect: true,\n      },\n      value: {\n        attribute: 'value',\n        type: String,\n        reflect: true,\n      },\n    };\n  }\n\n  constructor() {\n    super();\n\n    // Attributes\n    this.checked = false;\n    this.disabled = false;\n    this.name = undefined;\n    this.value = undefined;\n  }\n\n  changed(event) {\n    this.checked = event.target.checked;\n    this.dispatchEvent(new CustomEvent('change', {\n      detail: {\n        checked: this.checked,\n        value: this.value,\n      },\n      bubbles: true,\n    }));\n  }\n\n  static get styles() {\n    return [\n      super.styles,\n      css`\n        :host {\n          display: flex;\n        }\n\n        input[type=radio] {\n          /* visuallyhidden: https://github.com/h5bp/html5-boilerplate/blob/master/dist/doc/css.md */\n          position: absolute;\n\n          width: 1px;\n          height: 1px;\n          padding: 0;\n          margin: -1px;\n          overflow: hidden;\n          clip: rect(0 0 0 0);\n\n          white-space: nowrap;\n\n          border: 0;\n          clip-path: inset(100%); /* May cause a performance issue: https://github.com/h5bp/html5-boilerplate/issues/2021 */\n        }\n\n        input[type=radio] + label {\n          width: 100%;\n          padding: 0.375rem 0.75rem;\n\n          font-family: var(---font-family-base);\n          font-size: 1.125rem;\n          line-height: 1.5;\n          color: var(---color-text-inverse);\n          text-align: center;\n\n          cursor: pointer;\n\n          background-color: var(---color-element-enabled);\n          border: 0;\n          border-radius: 0;\n          outline: none;\n\n          box-shadow: var(---shadow-2);\n        }\n\n        input[type=radio]:checked + label {\n          background-color: var(---color-element-selected);\n          outline: none;\n          box-shadow: var(---shadow-2);\n        }\n\n        input[type=radio] + label:hover {\n          z-index: 1;\n\n          outline: none;\n          box-shadow: var(---shadow-4);\n        }\n\n        input[type=radio] + label:active {\n          z-index: 2;\n\n          outline: none;\n          box-shadow: var(---shadow-8);\n        }\n\n        :host(:first-of-type) input[type=radio] + label {\n          border-top-left-radius: 0.25rem;\n          border-top-right-radius: 0.25rem;\n        }\n\n        :host(:last-of-type) input[type=radio] + label {\n          border-bottom-right-radius: 0.25rem;\n          border-bottom-left-radius: 0.25rem;\n        }\n\n        :host(.keyboard) input[type=radio]:focus + label {\n          z-index: 1;\n\n          outline: none;\n          box-shadow: var(---shadow-4);\n        }\n\n        :host(.keyboard) input[type=radio]:focus:checked + label {\n          z-index: 1;\n\n          background-color: var(---color-element-selected);\n          outline: none;\n          box-shadow: var(---shadow-4);\n        }\n\n        :host(.keyboard) input[type=radio]:focus + label:active {\n          z-index: 2;\n\n          outline: none;\n          box-shadow: var(---shadow-8);\n        }\n      `,\n    ];\n  }\n\n  render() {\n    return html`\n      <input type=\"radio\" id=${`${this.uniqueId}-radio`} name=${this.name} value=${this.value} .checked=${this.checked} @change=${this.changed.bind(this)}>\n      <label for=${`${this.uniqueId}-radio`}>\n        <slot></slot>\n      </label>\n    `;\n  }\n}\n\ncustomElements.define('decidable-toggle-option', DecidableToggleOption);\n"],"file":"toggle-option.js"}