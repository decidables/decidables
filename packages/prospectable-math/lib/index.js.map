{"version":3,"sources":["../../../node_modules/browser-pack/_prelude.js","cpt-math.js","index.js"],"names":["f","exports","module","define","amd","window","global","self","this","prospectableMath","r","e","n","t","o","i","c","require","u","a","Error","code","p","call","length","1","x","l","Math","pow","v","log","g","default"],"mappings":"CAAA,SAAAA,GAAA,iBAAAC,SAAA,oBAAAC,OAAAA,OAAAD,QAAAD,IAAA,mBAAAG,QAAAA,OAAAC,IAAAD,OAAA,GAAAH,IAAA,oBAAAK,OAAAA,OAAA,oBAAAC,OAAAA,OAAA,oBAAAC,KAAAA,KAAAC,MAAAC,iBAAAT,IAAA,CAAA,WAAA,OAAA,SAAAU,EAAAC,EAAAC,EAAAC,GAAA,SAAAC,EAAAC,EAAAf,GAAA,IAAAY,EAAAG,GAAA,CAAA,IAAAJ,EAAAI,GAAA,CAAA,IAAAC,EAAA,mBAAAC,SAAAA,QAAA,IAAAjB,GAAAgB,EAAA,OAAAA,EAAAD,GAAA,GAAA,GAAAG,EAAA,OAAAA,EAAAH,GAAA,GAAA,MAAAI,EAAA,IAAAC,MAAA,uBAAAL,EAAA,MAAAM,KAAA,mBAAAF,EAAAG,EAAAV,EAAAG,GAAA,CAAAd,QAAA,IAAAU,EAAAI,GAAA,GAAAQ,KAAAD,EAAArB,QAAA,SAAAS,GAAA,OAAAI,EAAAH,EAAAI,GAAA,GAAAL,IAAAA,IAAAY,EAAAA,EAAArB,QAAAS,EAAAC,EAAAC,EAAAC,GAAA,OAAAD,EAAAG,GAAAd,QAAA,IAAA,IAAAiB,EAAA,mBAAAD,SAAAA,QAAAF,EAAA,EAAAA,EAAAF,EAAAW,OAAAT,IAAAD,EAAAD,EAAAE,IAAA,OAAAD,EAAA,CAAA,CAAAW,EAAA,CAAA,SAAAR,EAAAf,EAAAD,gB,2ZCuBE,SAAayB,EAAGP,EAAGQ,GACjB,OAAS,GAALD,EACFE,KAAAC,IAAOH,EAAKP,IAGNQ,EAADC,KAAAC,KAAQH,EAAMP,K,mBAGvB,SAAaO,EAAGC,EAAGG,GACjB,OAAS,GAALJ,EACKE,KAAKG,IAAID,GAAKF,KAAKG,IAAIL,IAGxBE,KAAKG,KAAKD,GAAKF,KAAKG,IAAIJ,IAAMC,KAAKG,KAAKL,K,mBAGlD,SAAaA,EAAGP,EAAGW,GACjB,OAAS,GAALJ,EACK,GAGDI,EAADF,KAAAC,KAAQH,EAAMP,K,kBAGvB,SAAYG,EAAGU,GACb,OAAOJ,KAAAC,IAACP,EAAKU,GAANJ,KAAAC,IAAaD,KAAAC,IAACP,EAAKU,GAANJ,KAAAC,IAAa,EAAIP,EAAMU,GAAQ,EAAIA,O,yMC9C3Df,EAAA,gB,4BAEegB,+CFJf","file":"index.js","sourcesContent":["(function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c=\"function\"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error(\"Cannot find module '\"+i+\"'\");throw a.code=\"MODULE_NOT_FOUND\",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u=\"function\"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()","\n// import * as jStat from 'jstat';\n\n/*\n  CPTMath Static Class - Not intended for instantiation!\n\n  Variables:\n    x = objective value\n    v = subjective value/utility\n    p = objective probability\n    w = subjective probability/decision weight\n    V = expected value/utility\n\n    a = alpha (curvature for value function)\n    l = lambda (loss aversion for value function)\n    g = gamma (sensitivity for decision weighting function)\n\n  Equations:\n    v = x^a, if x >= 0; -l * -x^a, if x < 0\n    w = p^g / (p^g + (1 - p)^g)^(1 / g)\n    V = v * w\n*/\nexport default class CPTMath {\n  static xal2v(x, a, l) {\n    if (x >= 0) {\n      return x ** a;\n    }\n    // else (x < 0)\n    return -l * ((-x) ** a);\n  }\n\n  static xlv2a(x, l, v) {\n    if (x >= 0) {\n      return Math.log(v) / Math.log(x);\n    }\n    // else (x < 0)\n    return (Math.log(-v) - Math.log(l)) / Math.log(-x);\n  }\n\n  static xav2l(x, a, v) {\n    if (x >= 0) {\n      return 1;\n    }\n    // else (x < 0)\n    return -v / ((-x) ** a);\n  }\n\n  static pg2w(p, g) {\n    return (p ** g) / (((p ** g) + ((1 - p) ** g)) ** (1 / g));\n  }\n}\n","\n// Internal dependencies\nimport CPTMath from './cpt-math';\n\nexport default CPTMath;\n"]}